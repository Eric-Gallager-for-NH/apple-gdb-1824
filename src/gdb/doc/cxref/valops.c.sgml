<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF valops.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for valops.c of gdb.cxref.
<author>cxref

<sect>File valops.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;regcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;cp-abi.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;dictionary.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbthread.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;errno.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;cp-support.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;observer.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;macosx/macosx-nat-infthread.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;macosx/macosx-nat-infthread.h&quot;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define STRING_HASH_TABLE_SIZE 2039</tt><newline>

<sect1>Type enum oload_classification

<p>
<itemize>
<item><tt>enum oload_classification</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>STANDARD;</tt><newline>
<item><tt>NON_STANDARD;</tt><newline>
<item><tt>INCOMPATIBLE;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct string_in_child

<p>
<itemize>
<item><tt>struct string_in_child</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>char* str;</tt><newline>
<item><tt>int len;</tt><newline>
<item><tt>CORE_ADDR addr;</tt><newline>
<item><tt>struct string_in_child* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct thread_is_safe_args

<p>
<itemize>
<item><tt>struct thread_is_safe_args</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct thread_info* tp;</tt><newline>
<item><tt>regex_t* unsafe_functions;</tt><newline>
<item><tt>int npatterns;</tt><newline>
<item><tt>int stack_depth;</tt><newline>
<item><tt>int unsafe_p;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable overload_resolution

<p>
<tt>int overload_resolution</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>eval.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valops()  :  valops.c
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
</descrip>

<sect1>External Variables

<p>
<bf>overload_debug</bf><newline>
<tt>extern int overload_debug</tt><newline>
<descrip>
<tag>Defined in:</tag>
<itemize>
<item>overload_debug</itemize>
</descrip>
<p>
<bf>msym_text_symbol_type</bf><newline>
<tt>extern struct type* msym_text_symbol_type</tt><newline>
<descrip>
<tag>Defined in:</tag>
<itemize>
<item>msym_text_symbol_type</itemize>
</descrip>
<p>
<bf>msym_data_symbol_type</bf><newline>
<tt>extern struct type* msym_data_symbol_type</tt><newline>
<descrip>
<tag>Defined in:</tag>
<itemize>
<item>msym_data_symbol_type</itemize>
</descrip>
<p>
<bf>msym_unknown_symbol_type</bf><newline>
<tt>extern struct type* msym_unknown_symbol_type</tt><newline>
<descrip>
<tag>Defined in:</tag>
<itemize>
<item>msym_unknown_symbol_type</itemize>
</descrip>
<p>
<bf>symbol_generation</bf><newline>
<tt>extern unsigned int symbol_generation</tt><newline>
<descrip>
<tag>Defined in:</tag>
<itemize>
<item>symbol_generation</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>string_table</bf><newline>
<tt>static struct string_in_child* string_table[2039]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>allocate_string_in_inferior()
<item>value_clear_inferior_string_pool()
</itemize>
</descrip>

<sect1>Global Function _initialize_valops()

<p><tt>void _initialize_valops ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valops.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_setshow_boolean_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>show_overload_resolution()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>overload_resolution  :  valops.c
<item>setlist, showlist
</itemize>
</descrip>

<sect1>Global Function allocate_space_in_inferior_malloc()

<p><tt>CORE_ADDR allocate_space_in_inferior_malloc ( int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>call_function_by_hand()  :  infcall.c
<item>create_cached_function()  :  value.c
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>gdbarch_name_of_malloc()  :  gdbarch.c
<item>lookup_cached_function()  :  value.c
<item>make_cleanup_set_restore_unwind_on_signal()  :  infcall.c
<item>value_as_long()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_logical_not()  :  valarith.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>update_current_target()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>builtin_type_voidptrfuncptr  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function check_field()

<p><tt>int check_field ( struct value* arg1, const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_field_in()  :  valops.c
<item>check_typedef()  :  gdbtypes.c
<item>coerce_array()  :  value.c
<item>error()  :  utils.c
<item>printf_unfiltered()  :  utils.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>lookup_symbol_aux()  :  symtab.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>info_verbose  :  top.c
</itemize>
</descrip>

<sect1>Global Function check_safe_call()

<p><tt>int check_safe_call ( regex_t unsafe_functions[], int npatterns, int stack_depth, enum check_which_threads which_threads )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_safe_get_selected_frame()  :  frame.c
<item>do_cleanups()  :  utils.c
<item>frame_find_by_id()  :  frame.c
<item>frame_id_eq()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>iterate_over_threads()  :  thread.c
<item>make_cleanup_restore_current_thread()  :  thread.c
<item>safe_check_is_thread_unsafe()  :  valops.c
<item>scheduler_lock_on_p()  :  infrun.c
<item>select_frame()  :  frame.c
<item>warning()  :  utils.c
<item>macosx_prune_threads()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>safe_check_is_thread_unsafe()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
<item>null_frame_id  :  frame.c
</itemize>
</descrip>

<sect1>Global Function destructor_name_p()

<p><tt>int destructor_name_p ( const char* name, const struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>type_name_no_tag()  :  gdbtypes.c
<item>strchr(), strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>check_field_in()  :  valops.c
<item>collect_methods()  :  linespec.c
<item>value_struct_elt()  :  valops.c
<item>value_struct_elt_for_reference()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function find_function_in_inferior()

<p><tt>struct value* find_function_in_inferior ( const char* name, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>func_sym_is_inlined_function()  :  inlining.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>lookup_symbol_all()  :  symtab.c
<item>value_from_longest()  :  value.c
<item>value_of_variable()  :  valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>lookup_cached_function()  :  value.c
<item>print_object_command()  :  objc-lang.c
<item>scm_evaluate_string()  :  scm-lang.c
<item>scm_lookup_name()  :  scm-lang.c
<item>value_nsstring()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>msym_text_symbol_type  :  parse.c
</itemize>
</descrip>

<sect1>Global Function find_overload_match()

<p><tt>int find_overload_match ( struct type** arg_types, int nargs, char* name, int method, int lax, struct value** objp, struct symbol* fsym, struct value** valp, struct symbol** symp, int* staticp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>classify_oload_match()  :  valops.c
<item>cp_func_name()  :  cp-support.c
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>find_oload_champ()  :  valops.c
<item>find_oload_champ_namespace()  :  valops.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>oload_method_static()  :  valops.c
<item>value_addr()  :  valops.c
<item>value_find_oload_method_list()  :  valops.c
<item>value_fn_field()  :  value.c
<item>value_type()  :  value.c
<item>value_virtual_fn_field()  :  cp-abi.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
</descrip>

<sect1>Global Function find_rt_vbase_offset()

<p><tt>void find_rt_vbase_offset ( struct type* type, struct type* basetype, const gdb_byte* valaddr, int offset, int* boffset_p, int* skip_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>find_rt_vbase_offset()  :  valops.c
<item>value_as_long()  :  value.c
<item>value_at()  :  valops.c
<item>virtual_base_index_skip_primaries()  :  gdbtypes.c
<item>virtual_base_list_length_skip_primaries()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_print_value()  :  cp-valprint.c
<item>find_method_list()  :  valops.c
<item>find_rt_vbase_offset()  :  valops.c
<item>search_struct_method()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function value_addr()

<p><tt>struct value* value_addr ( struct value* arg1 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_set_value_type()  :  value.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>error()  :  utils.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>set_value_pointed_to_offset()  :  value.c
<item>value_change_enclosing_type()  :  value.c
<item>value_coerce_function()  :  valops.c
<item>value_copy()  :  value.c
<item>value_embedded_offset()  :  value.c
<item>value_enclosing_type()  :  value.c
<item>value_from_pointer()  :  value.c
<item>value_offset()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>c_val_print()  :  c-valprint.c
<item>convert_actual()  :  ada-lang.c
<item>evaluate_subexp_for_address()  :  eval.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>find_function_addr()  :  infcall.c
<item>find_overload_match()  :  valops.c
<item>gnuv2_virtual_fn_field()  :  gnu-v2-abi.c
<item>gnuv3_virtual_fn_field()  :  gnu-v3-abi.c
<item>java_print_value_fields()  :  jv-valprint.c
<item>make_array_descriptor()  :  ada-lang.c
<item>typecmp()  :  valops.c
<item>value_arg_coerce()  :  infcall.c
<item>value_cast_1()  :  valops.c
<item>value_fn_field()  :  value.c
<item>value_x_binop()  :  valarith.c
<item>value_x_unop()  :  valarith.c
<item>watch_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function value_aggregate_elt()

<p><tt>struct value* value_aggregate_elt ( struct type* curtype, char* name, enum noside noside )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>value_namespace_elt()  :  valops.c
<item>value_struct_elt_for_reference()  :  valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
</descrip>

<sect1>Global Function value_allocate_space_in_inferior()

<p><tt>struct value* value_allocate_space_in_inferior ( int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_from_longest()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>scm_evaluate_string()  :  scm-lang.c
<item>scm_lookup_name()  :  scm-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void_data_ptr  :  gdbtypes.c
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function value_array()

<p><tt>struct value* value_array ( int lowbound, int highbound, struct value** elemvec )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_space_in_inferior()  :  valops.c
<item>allocate_value()  :  value.c
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
<item>error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_at_lazy()  :  valops.c
<item>value_contents_all()  :  value.c
<item>value_contents_all_raw()  :  value.c
<item>value_enclosing_type()  :  value.c
<item>write_memory()  :  corefile.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Global Function value_assign()

<p><tt>struct value* value_assign ( struct value* toval, struct value* fromval )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>coerce_array()  :  value.c
<item>coerce_ref()  :  value.c
<item>deprecated_set_value_type()  :  value.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_frame_id_hack()  :  value.c
<item>deprecated_value_internalvar_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>deprecated_value_modifiable()  :  value.c
<item>deprecated_value_regnum_hack()  :  value.c
<item>error()  :  utils.c
<item>frame_find_by_id()  :  frame.c
<item>frame_register_read()  :  frame.c
<item>frame_relative_level()  :  frame.c
<item>gdbarch_convert_register_p()  :  gdbarch.c
<item>gdbarch_value_to_register()  :  gdbarch.c
<item>get_current_frame()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>modify_field()  :  value.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>observer_notify_target_changed()  :  observer.c
<item>put_frame_register()  :  frame.c
<item>read_memory()  :  corefile.c
<item>register_size()  :  regcache.c
<item>reinit_frame_cache()  :  frame.c
<item>select_frame()  :  frame.c
<item>set_internalvar()  :  value.c
<item>set_internalvar_component()  :  value.c
<item>set_value_embedded_offset()  :  value.c
<item>set_value_pointed_to_offset()  :  value.c
<item>value_as_long()  :  value.c
<item>value_bitpos()  :  value.c
<item>value_bitsize()  :  value.c
<item>value_cast()  :  valops.c
<item>value_change_enclosing_type()  :  value.c
<item>value_contents()  :  value.c
<item>value_contents_raw()  :  value.c
<item>value_copy()  :  value.c
<item>value_embedded_offset()  :  value.c
<item>value_enclosing_type()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_offset()  :  value.c
<item>value_pointed_to_offset()  :  value.c
<item>value_type()  :  value.c
<item>warning()  :  utils.c
<item>write_memory()  :  corefile.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), deprecated_memory_changed_hook(), deprecated_register_changed_hook(), exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_assign()  :  ada-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>gdb_value_assign()  :  wrapper.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_target  :  target/target.c
<item>deprecated_memory_changed_hook  :  top.c
<item>deprecated_register_changed_hook  :  top.c
<item>deprecated_selected_frame  :  frame.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function value_at()

<p><tt>struct value* value_at ( struct type* type, CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>read_memory()  :  corefile.c
<item>value_contents_all_raw()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>c_val_print()  :  c-valprint.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>f_val_print()  :  f-valprint.c
<item>find_rt_vbase_offset()  :  valops.c
<item>hand_function_call()  :  infcall.c
<item>hpacc_value_rtti_type()  :  hpacc-abi.c
<item>hpacc_virtual_fn_field()  :  hpacc-abi.c
<item>java_class_from_object()  :  jv-lang.c
<item>java_value_print()  :  jv-valprint.c
<item>pascal_val_print()  :  p-valprint.c
<item>read_var_value()  :  findvar.c
<item>value_static_field()  :  value.c
</itemize>
</descrip>

<sect1>Global Function value_at_lazy()

<p><tt>struct value* value_at_lazy ( struct type* type, CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>error()  :  utils.c
<item>set_value_lazy()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>coerce_ref()  :  value.c
<item>do_examine()  :  printcmd.c
<item>evaluate_subexp_standard()  :  eval.c
<item>gnuv3_baseclass_offset()  :  gnu-v3-abi.c
<item>gnuv3_rtti_type()  :  gnu-v3-abi.c
<item>gnuv3_virtual_fn_field()  :  gnu-v3-abi.c
<item>print_subexp_standard()  :  expprint.c
<item>value_array()  :  valops.c
<item>value_cast_1()  :  valops.c
<item>value_full_object()  :  valops.c
<item>value_ind()  :  valops.c
<item>value_string()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function value_bitstring()

<p><tt>struct value* value_bitstring ( char* ptr, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>create_range_type()  :  gdbtypes.c
<item>create_set_type()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_contents_raw()  :  value.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function value_cast()

<p><tt>struct value* value_cast ( struct type* type, struct value* arg2 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_set_value_type()  :  value.c
<item>value_cast_1()  :  valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_coerce_to_simple_array_ptr()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_value_assign()  :  ada-lang.c
<item>ada_value_ptr_subscript()  :  ada-lang.c
<item>ada_value_slice()  :  ada-lang.c
<item>cast_to_fixed()  :  ada-lang.c
<item>coerce_enum()  :  value.c
<item>cplus_value_of_child()  :  varobj.c
<item>evaluate_struct_tuple()  :  eval.c
<item>evaluate_subexp_for_address()  :  eval.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>evaluate_subexp_with_coercion()  :  eval.c
<item>gdb_value_cast()  :  wrapper.c
<item>get_closure_implementation_fn()  :  gdbtypes.c
<item>gnuv2_value_rtti_type()  :  gnu-v2-abi.c
<item>gnuv2_virtual_fn_field()  :  gnu-v2-abi.c
<item>gnuv3_rtti_type()  :  gnu-v3-abi.c
<item>gnuv3_virtual_fn_field()  :  gnu-v3-abi.c
<item>hpacc_virtual_fn_field()  :  hpacc-abi.c
<item>print_object_command()  :  objc-lang.c
<item>return_command()  :  stack.c
<item>thin_data_pntr()  :  ada-lang.c
<item>value_arg_coerce()  :  infcall.c
<item>value_assign()  :  valops.c
<item>value_fn_field()  :  value.c
<item>value_literal_complex()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function value_clear_inferior_string_pool()

<p><tt>void value_clear_inferior_string_pool ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>generic_mourn_inferior()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>string_table  :  valops.c
</itemize>
</descrip>

<sect1>Global Function value_coerce_array()

<p><tt>struct value* value_coerce_array ( struct value* arg1 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>error()  :  utils.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>value_from_pointer()  :  value.c
<item>value_offset()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coerce_array()  :  value.c
<item>evaluate_subexp_standard()  :  eval.c
<item>lookup_child_selector_nocache()  :  objc-lang.c
<item>lookup_objc_class()  :  objc-lang.c
<item>typecmp()  :  valops.c
<item>value_cast_1()  :  valops.c
<item>value_nsstring()  :  objc-lang.c
<item>value_subscript()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function value_coerce_function()

<p><tt>struct value* value_coerce_function ( struct value* arg1 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>error()  :  utils.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>value_from_pointer()  :  value.c
<item>value_offset()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coerce_array()  :  value.c
<item>value_addr()  :  valops.c
<item>value_cast_1()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function value_fetch_lazy()

<p><tt>int value_fetch_lazy ( struct value* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_value_address_hack()  :  value.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>read_memory()  :  corefile.c
<item>set_value_lazy()  :  value.c
<item>value_contents_all_raw()  :  value.c
<item>value_enclosing_type()  :  value.c
<item>value_offset()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>cp_print_hpacc_virtual_table_entries()  :  cp-valprint.c
<item>do_enable_breakpoint()  :  breakpoint.c
<item>gdb_value_fetch_lazy()  :  wrapper.c
<item>gnuv2_virtual_fn_field()  :  gnu-v2-abi.c
<item>record_latest_value()  :  value.c
<item>return_command()  :  stack.c
<item>set_internalvar()  :  value.c
<item>value_contents_all()  :  value.c
<item>value_contents_writeable()  :  value.c
<item>value_of_internalvar()  :  value.c
<item>watch_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function value_find_oload_method_list()

<p><tt>struct fn_field* value_find_oload_method_list ( struct value** argp, char* method, int offset, int* num_fns, struct type** basetype, int* boffset )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>coerce_array()  :  value.c
<item>error()  :  utils.c
<item>find_method_list()  :  valops.c
<item>value_ind()  :  valops.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_overload_match()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function value_full_object()

<p><tt>struct value* value_full_object ( struct value* volatile argp, struct type* rtype, int xfull, int xtop, int xusing_enc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_set_value_type()  :  value.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>set_value_embedded_offset()  :  value.c
<item>value_at_lazy()  :  valops.c
<item>value_change_enclosing_type()  :  value.c
<item>value_embedded_offset()  :  value.c
<item>value_enclosing_type()  :  value.c
<item>value_rtti_type()  :  cp-abi.c
<item>value_type()  :  value.c
<item>warning()  :  utils.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_value_print()  :  c-valprint.c
<item>value_ind()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function value_ind()

<p><tt>struct value* value_ind ( struct value* arg1 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>coerce_array()  :  value.c
<item>deprecated_set_value_type()  :  value.c
<item>error()  :  utils.c
<item>set_value_embedded_offset()  :  value.c
<item>value_as_address()  :  value.c
<item>value_at_lazy()  :  valops.c
<item>value_change_enclosing_type()  :  value.c
<item>value_enclosing_type()  :  value.c
<item>value_full_object()  :  valops.c
<item>value_pointed_to_offset()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_coerce_to_simple_array()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_value_ind()  :  ada-lang.c
<item>ada_value_ptr_subscript()  :  ada-lang.c
<item>ada_value_struct_elt()  :  ada-lang.c
<item>cp_print_hpacc_virtual_table_entries()  :  cp-valprint.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>gdb_value_ind()  :  wrapper.c
<item>get_closure_implementation_fn()  :  gdbtypes.c
<item>gnuv2_virtual_fn_field()  :  gnu-v2-abi.c
<item>java_link_class_type()  :  jv-lang.c
<item>scm_lookup_name()  :  scm-lang.c
<item>type_from_class()  :  jv-lang.c
<item>value_cast_1()  :  valops.c
<item>value_find_oload_method_list()  :  valops.c
<item>value_fn_field()  :  value.c
<item>value_rtti_target_type()  :  valops.c
<item>value_struct_elt()  :  valops.c
<item>value_subscript()  :  valarith.c
<item>varobj_value_struct_elt_by_index()  :  varobj.c
<item>x_command()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function value_literal_complex()

<p><tt>struct value* value_literal_complex ( struct value* arg1, struct value* arg2, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_cast()  :  valops.c
<item>value_contents()  :  value.c
<item>value_contents_raw()  :  value.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cast_into_complex()  :  valops.c
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
</descrip>

<sect1>Global Function value_of_local()

<p><tt>struct value* value_of_local ( const char* name, int complain )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dict_empty()  :  dictionary.c
<item>error()  :  utils.c
<item>get_frame_function()  :  blockframe.c
<item>lookup_block_symbol()  :  symtab.c
<item>read_var_value()  :  findvar.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
<item>value_of_this()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>deprecated_selected_frame  :  frame.c
</itemize>
</descrip>

<sect1>Global Function value_of_this()

<p><tt>struct value* value_of_this ( int complain )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>get_frame_function()  :  blockframe.c
<item>get_selected_frame()  :  frame.c
<item>value_of_local()  :  valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>pascal_parse()  :  p-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c-lang.c
<item>f-lang.c
<item>jv-lang.c
<item>language.c
<item>m2-lang.c
<item>objc-lang.c
<item>p-lang.c
<item>scm-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Global Function value_of_variable()

<p><tt>struct value* value_of_variable ( struct symbol* var, struct block* b )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_innermost_frame()  :  blockframe.c
<item>error()  :  utils.c
<item>read_var_value()  :  findvar.c
<item>symbol_natural_name()  :  symtab.c
<item>symbol_read_needs_frame()  :  findvar.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
<item>find_function_in_inferior()  :  valops.c
<item>get_var_value()  :  ada-lang.c
<item>scm_lookup_name()  :  scm-lang.c
<item>value_maybe_namespace_elt()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle  :  utils.c
</itemize>
</descrip>

<sect1>Global Function value_repeat()

<p><tt>struct value* value_repeat ( struct value* arg1, int count )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_repeat_value()  :  value.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>read_memory()  :  corefile.c
<item>value_contents_all_raw()  :  value.c
<item>value_enclosing_type()  :  value.c
<item>value_offset()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
</descrip>

<sect1>Global Function value_rtti_target_type()

<p><tt>struct type* value_rtti_target_type ( struct value* v, int* full, int* top, int* using_enc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_ind()  :  valops.c
<item>value_rtti_type()  :  cp-abi.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_value_print()  :  c-valprint.c
<item>evaluate_subexp_standard()  :  eval.c
<item>safe_value_rtti_target_type()  :  varobj.c
<item>whatis_exp()  :  typeprint.c
</itemize>
</descrip>

<sect1>Global Function value_slice()

<p><tt>struct value* value_slice ( struct value* array, int lowbound, int length )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>check_typedef()  :  gdbtypes.c
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
<item>create_set_type()  :  gdbtypes.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_frame_id_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>error()  :  utils.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>get_discrete_bounds()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>set_value_lazy()  :  value.c
<item>set_value_offset()  :  value.c
<item>value_bit_index()  :  valarith.c
<item>value_contents()  :  value.c
<item>value_contents_raw()  :  value.c
<item>value_contents_writeable()  :  value.c
<item>value_lazy()  :  value.c
<item>value_offset()  :  value.c
<item>value_type()  :  value.c
<item>value_zero()  :  valops.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_slice()  :  ada-lang.c
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function value_string()

<p><tt>struct value* value_string ( const char* ptr, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_string_in_inferior()  :  valops.c
<item>allocate_value()  :  value.c
<item>create_range_type()  :  gdbtypes.c
<item>create_string_type()  :  gdbtypes.c
<item>value_at_lazy()  :  valops.c
<item>value_contents_raw()  :  value.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
<item>lookup_child_selector_nocache()  :  objc-lang.c
<item>lookup_objc_class()  :  objc-lang.c
<item>value_concat()  :  valarith.c
<item>value_nsstring()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Global Function value_struct_elt()

<p><tt>struct value* value_struct_elt ( struct value** argp, struct value** args, const char* name, int* static_memfuncp, const char* err )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>coerce_array()  :  value.c
<item>destructor_name_p()  :  valops.c
<item>error()  :  utils.c
<item>get_destructor_fn_field()  :  gdbtypes.c
<item>search_struct_field()  :  valops.c
<item>search_struct_method()  :  valops.c
<item>value_fn_field()  :  value.c
<item>value_ind()  :  valops.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>desc_bounds()  :  ada-lang.c
<item>desc_data()  :  ada-lang.c
<item>desc_one_bound()  :  ada-lang.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>gdb_value_struct_elt()  :  wrapper.c
<item>get_closure_implementation_fn()  :  gdbtypes.c
<item>get_java_utf8_name()  :  jv-lang.c
<item>java_class_from_object()  :  jv-lang.c
<item>java_class_is_primitive()  :  jv-lang.c
<item>java_link_class_type()  :  jv-lang.c
<item>java_value_print()  :  jv-valprint.c
<item>type_from_class()  :  jv-lang.c
<item>unwrap_value()  :  ada-lang.c
<item>value_x_binop()  :  valarith.c
<item>value_x_unop()  :  valarith.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function value_zero()

<p><tt>struct value* value_zero ( struct type* type, enum lval_type lv )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>cast_into_complex()  :  valops.c
<item>evaluate_subexp_for_address()  :  eval.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>value_cast_1()  :  valops.c
<item>value_slice()  :  valops.c
<item>value_x_binop()  :  valarith.c
<item>value_x_unop()  :  valarith.c
<item>varobj_get_dynamic_type()  :  varobj.c
<item>varobj_get_type_internal()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function allocate_space_in_inferior()

<p><tt>static CORE_ADDR allocate_space_in_inferior ( int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>allocate_string_in_inferior()  :  valops.c
<item>value_array()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function allocate_string_in_inferior()

<p><tt>static CORE_ADDR allocate_string_in_inferior ( const char* str, int len )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>allocate_space_in_inferior()  :  valops.c
<item>inferior_string_hash()  :  valops.c
<item>write_memory()  :  corefile.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), memcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_string()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>string_table  :  valops.c
</itemize>
</descrip>

<sect1>Local Function cast_into_complex()

<p><tt>static struct value* cast_into_complex ( struct type* type, struct value* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valops.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_contents()  :  value.c
<item>value_contents_raw()  :  value.c
<item>value_literal_complex()  :  valops.c
<item>value_type()  :  value.c
<item>value_zero()  :  valops.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_cast_1()  :  valops.c
</itemize>
</descrip>

<sect1>Local Function check_field_in()

<p><tt>static int check_field_in ( struct type* type, const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valops.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_field_in()  :  valops.c
<item>check_typedef()  :  gdbtypes.c
<item>destructor_name_p()  :  valops.c
<item>get_destructor_fn_field()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>strcmp_iw()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>check_field()  :  valops.c
<item>check_field_in()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function classify_oload_match()

<p><tt>static enum oload_classification classify_oload_match ( struct badness_vector* oload_champ_bv, int nargs, int static_offset )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_oload_champ_namespace_loop()  :  valops.c
<item>find_overload_match()  :  valops.c
</itemize>
</descrip>

<sect1>Local Function do_check_is_thread_unsafe()

<p><tt>static int do_check_is_thread_unsafe ( void* argptr )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>find_pc_partial_function()  :  blockframe.c
<item>frame_relative_level()  :  frame.c
<item>get_current_frame()  :  frame.c
<item>get_frame_pc()  :  frame.c
<item>get_prev_frame()  :  frame.c
<item>make_cleanup_ui_out_tuple_begin_end()  :  ui-out.c
<item>pid_to_thread_id()  :  thread.c
<item>switch_to_thread()  :  thread.c
<item>ui_out_field_fmt()  :  ui-out.c
<item>ui_out_field_int()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>regexec(), strlen()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>safe_check_is_thread_unsafe()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function find_method_list()

<p><tt>static struct fn_field* find_method_list ( struct value** argp, char* method, int offset, struct type* type, int* num_fns, struct type** basetype, int* boffset )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valops.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>baseclass_offset()  :  cp-abi.c
<item>check_stub_method_group()  :  gdbtypes.c
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_value_address_hack()  :  value.c
<item>error()  :  utils.c
<item>find_method_list()  :  valops.c
<item>find_rt_vbase_offset()  :  valops.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>strcmp_iw()  :  utils.c
<item>value_contents()  :  value.c
<item>value_contents_all()  :  value.c
<item>value_embedded_offset()  :  value.c
<item>value_offset()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_method_list()  :  valops.c
<item>value_find_oload_method_list()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function find_oload_champ()

<p><tt>static int find_oload_champ ( struct type** arg_types, int nargs, int method, int num_fns, struct fn_field* fns_ptr, struct symbol** oload_syms, struct badness_vector** oload_champ_bv )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valops.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>compare_badness()  :  gdbtypes.c
<item>fprintf_filtered()  :  utils.c
<item>oload_method_static()  :  valops.c
<item>rank_function()  :  gdbtypes.c
<item>symbol_demangled_name()  :  symtab.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_oload_champ_namespace_loop()  :  valops.c
<item>find_overload_match()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stderr  :  main.c
<item>overload_debug  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function find_oload_champ_namespace()

<p><tt>static int find_oload_champ_namespace ( struct type** arg_types, int nargs, const char* func_name, const char* qualified_name, struct symbol*** oload_syms, struct badness_vector** oload_champ_bv )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valops.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_oload_champ_namespace_loop()  :  valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_overload_match()  :  valops.c
</itemize>
</descrip>

<sect1>Local Function find_oload_champ_namespace_loop()

<p><tt>static int find_oload_champ_namespace_loop ( struct type** arg_types, int nargs, const char* func_name, const char* qualified_name, int namespace_len, struct symbol*** oload_syms, struct badness_vector** oload_champ_bv, int* oload_champ )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valops.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>classify_oload_match()  :  valops.c
<item>cp_find_first_component()  :  cp-support.c
<item>discard_cleanups()  :  utils.c
<item>do_cleanups()  :  utils.c
<item>find_oload_champ()  :  valops.c
<item>find_oload_champ_namespace_loop()  :  valops.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>make_symbol_overload_list()  :  cp-support.c
<item>xfree()  :  utils.c
<item>__builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strncpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_oload_champ_namespace()  :  valops.c
<item>find_oload_champ_namespace_loop()  :  valops.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function inferior_string_hash()

<p><tt>static unsigned int inferior_string_hash ( const char* string, int len )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>allocate_string_in_inferior()  :  valops.c
</itemize>
</descrip>

<sect1>Local Function oload_method_static()

<p><tt>static int oload_method_static ( int method, struct fn_field* fns_ptr, int index )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_oload_champ()  :  valops.c
<item>find_overload_match()  :  valops.c
</itemize>
</descrip>

<sect1>Local Function safe_check_is_thread_unsafe()

<p><tt>static int safe_check_is_thread_unsafe ( struct thread_info* tp, void* data )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>make_cleanup_restore_current_thread()  :  thread.c
<item>catch_errors()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>check_safe_call()  :  valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>check_safe_call()  :  valops.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_check_is_thread_unsafe()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function search_struct_field()

<p><tt>static struct value* search_struct_field ( const char* name, struct value* arg1, int offset, struct type* type, int looking_for_baseclass )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valops.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>baseclass_offset()  :  cp-abi.c
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_frame_id_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>search_struct_field()  :  valops.c
<item>set_value_lazy()  :  value.c
<item>set_value_offset()  :  value.c
<item>strcmp_iw()  :  utils.c
<item>target_read_memory()  :  target/target.c
<item>value_contents()  :  value.c
<item>value_contents_raw()  :  value.c
<item>value_lazy()  :  value.c
<item>value_offset()  :  value.c
<item>value_primitive_field()  :  value.c
<item>value_static_field()  :  value.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>search_struct_field()  :  valops.c
<item>value_cast_1()  :  valops.c
<item>value_struct_elt()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function search_struct_method()

<p><tt>static struct value* search_struct_method ( const char* name, struct value** arg1p, struct value** args, int offset, int* static_memfuncp, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valops.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>baseclass_offset()  :  cp-abi.c
<item>check_stub_method_group()  :  gdbtypes.c
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_value_address_hack()  :  value.c
<item>error()  :  utils.c
<item>find_rt_vbase_offset()  :  valops.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>search_struct_method()  :  valops.c
<item>strcmp_iw()  :  utils.c
<item>target_read_memory()  :  target/target.c
<item>typecmp()  :  valops.c
<item>value_contents()  :  value.c
<item>value_contents_all()  :  value.c
<item>value_embedded_offset()  :  value.c
<item>value_fn_field()  :  value.c
<item>value_offset()  :  value.c
<item>value_virtual_fn_field()  :  cp-abi.c
<item>__builtin_alloca(), cplus_demangle_opname(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>search_struct_method()  :  valops.c
<item>value_struct_elt()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function show_overload_resolution()

<p><tt>static void show_overload_resolution ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valops()  :  valops.c
</itemize>
</descrip>

<sect1>Local Function typecmp()

<p><tt>static int typecmp ( int staticp, int varargs, int nargs, struct field t1[], struct value* t2[] )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valops.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>internal_error()  :  utils.c
<item>value_addr()  :  valops.c
<item>value_coerce_array()  :  valops.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>search_struct_method()  :  valops.c
</itemize>
</descrip>

<sect1>Local Function value_cast_1()

<p><tt>static struct value* value_cast_1 ( struct type* type, struct value* arg2 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>cast_into_complex()  :  valops.c
<item>check_typedef()  :  gdbtypes.c
<item>coerce_ref()  :  value.c
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
<item>deprecated_set_value_type()  :  value.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>error()  :  utils.c
<item>extract_unsigned_integer()  :  findvar.c
<item>gdbarch_addr_bit()  :  gdbarch.c
<item>get_discrete_bounds()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>search_struct_field()  :  valops.c
<item>set_value_pointed_to_offset()  :  value.c
<item>type_name_no_tag()  :  gdbtypes.c
<item>value_addr()  :  valops.c
<item>value_as_address()  :  value.c
<item>value_as_double()  :  value.c
<item>value_as_long()  :  value.c
<item>value_at_lazy()  :  valops.c
<item>value_change_enclosing_type()  :  value.c
<item>value_coerce_array()  :  valops.c
<item>value_coerce_function()  :  valops.c
<item>value_contents()  :  value.c
<item>value_embedded_offset()  :  value.c
<item>value_from_double()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_from_pointer()  :  value.c
<item>value_ind()  :  valops.c
<item>value_logical_not()  :  valarith.c
<item>value_offset()  :  value.c
<item>value_type()  :  value.c
<item>value_zero()  :  valops.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_cast()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
<item>current_language  :  language.c
<item>deprecated_hp_som_som_object_present  :  symtab.c
</itemize>
</descrip>

<sect1>Local Function value_maybe_namespace_elt()

<p><tt>static struct value* value_maybe_namespace_elt ( const struct type* curtype, char* name, enum noside noside )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valops.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>cp_lookup_symbol_namespace()  :  cp-namespace.c
<item>get_selected_block()  :  stack.c
<item>value_of_variable()  :  valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_namespace_elt()  :  valops.c
<item>value_struct_elt_for_reference()  :  valops.c
</itemize>
</descrip>

<sect1>Local Function value_namespace_elt()

<p><tt>static struct value* value_namespace_elt ( const struct type* curtype, char* name, enum noside noside )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valops.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>value_maybe_namespace_elt()  :  valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_aggregate_elt()  :  valops.c
</itemize>
</descrip>

<sect1>Local Function value_struct_elt_for_reference()

<p><tt>static struct value* value_struct_elt_for_reference ( struct type* domain, int offset, struct type* curtype, char* name, struct type* intype, enum noside noside )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valops.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_stub_method_group()  :  gdbtypes.c
<item>destructor_name_p()  :  valops.c
<item>error()  :  utils.c
<item>lookup_member_type()  :  gdbtypes.c
<item>lookup_reference_type()  :  gdbtypes.c
<item>lookup_symbol()  :  symtab.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>read_var_value()  :  findvar.c
<item>value_from_longest()  :  value.c
<item>value_maybe_namespace_elt()  :  valops.c
<item>value_static_field()  :  value.c
<item>value_struct_elt_for_reference()  :  valops.c
<item>cplus_demangle_opname(), strcmp(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_aggregate_elt()  :  valops.c
<item>value_struct_elt_for_reference()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

</article>
