name: cooljeanius/apple-gdb-1824
on:
  push:
    branches:
      - "**/*"
  pull_request:
jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
    - name: checkout
      uses: actions/checkout@v4
#     # 'Transformers::TravisCI::Scripts::Dependencies' dependencies are currently unsupported
#     # 'compiler' was not transformed because there is no suitable equivalent in GitHub Actions
    - run: sudo apt-get update
    - run: sudo apt-get install autogen gobjc gobjc++ gobjc-multilib gobjc++-multilib libopts25 libopts25-dev texinfo flex flex-doc binutils binutils-dev binutils-multiarch pax binutils-gold libcurses-perl dejagnu expect expect-dev libexpect-perl guile-2.2 guile-2.2-dev guile-2.2-libs tclreadline m4 xutils-dev gfortran gfortran-multilib gccgo gccgo-multilib libdmalloc-dev libdmalloc5 gnulib fastjar gdb gdbserver autopoint gperf help2man libextutils-f77-perl emacs sharutils texlive latex2html ddd ${{ matrix.compiler }}
    # stuff I still need to find the packages for: gnatbind gnatmake libguile dvips gfortran
    - run: test -e ./.profile_generic && source ./.profile_generic && (env | uniq | sort | uniq)
    - run: cd src && ./configure --with-x --disable-werror --disable-opts-test --enable-64-bit-bfd --enable-silent-rules --with-system-zlib CC=${{ matrix.compiler }} OBJC=${{ matrix.compiler }}
    - run: cd src && make configure-bfd
    - run: cd src && make -C bfd headers
    - run: cd src && if test ! -e bfd/bfd.h; then make -C bfd bfd.h; else stat bfd/bfd.h; fi
    - run: cd src && if test -e autogen/Makefile; then make -C autogen; elif test -d autogen; then ls autogen/Makefile*; else echo "skipping autogen"; fi
    - run: cd src && make -C bfd diststuff
    - run: cd src && make all-cgen
    - run: cd src && make all-libiberty
    - run: cd src && make all-intl
    - run: cd src && make all-electric-fence
    - run: cd src && make all-etc
    - run: cd src && make all-libdecnumber
    - run: cd src && make all-mmalloc
    - run: cd src && make configure-readline
    - run: cd src && for dir in libtool_gnu sim utils tcl expect dejagnu itcl tk libgui; do if test -e ${dir}/configure; then make configure-${dir}; elif test -d ${dir}; then ls ${dir}/configure*; else echo "skipping configuring in ${dir}"; fi; done
    - run: cd src && for dir in sim utils tcl expect dejagnu itcl tk libgui; do if test -e ${dir}/Makefile; then make -C ${dir}; elif test -d ${dir}; then ls ${dir}/Makefile*; else echo "skipping ${dir}"; fi; done
    - run: cd src && make check-libiberty
    - run: cd src && make -C tcl/unix tcltest
    - run: cd src && for dir in sim itcl; do if test -e ${dir}/Makefile; then make check-${dir} V=0 RUNTESTFLAGS="-v"; elif test -d ${dir}; then ls ${dir}/Makefile*; else echo "skipping testing ${dir}"; fi; done
    - run: time (pwd && ls)
      if: "${{ success() }}"
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.3
      if: "${{ success() }}"
      with:
        # Artifact name
        name: apple-gdb-1824-${{ matrix.compiler }}-logfiles
        # A file, directory or wildcard pattern that describes what to upload
        path: |
            **/*.log
    - run: find . -name config.log -print0 | xargs cat | grep -i error | sort | uniq
      if: "${{ failure() }}"
    strategy:
      fail-fast: false
      matrix:
        compiler:
        - clang
        - gcc
