<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF block.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for block.c of gdb.cxref.
<author>cxref

<sect>File block.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;cp-support.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>

<sect1>Type struct block_namespace_info

<p>
<itemize>
<item><tt>struct block_namespace_info</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const char* scope;</tt><newline>
<item><tt>struct using_direct* usingd;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Function allocate_block()

<p><tt>struct block* allocate_block ( struct obstack* obstack )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>block.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>finish_block()  :  buildsym.c
<item>get_java_class_symtab()  :  jv-lang.c
<item>initialize_namespace_symtab()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Global Function block_contains_pc()

<p><tt>int block_contains_pc ( const struct block* bl, CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>block.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>block_innermost_frame()  :  blockframe.c
<item>blockvector_for_pc_sect()  :  block.c
<item>find_function_start_sal()  :  symtab.c
<item>find_methods()  :  objc-lang.c
<item>find_pc_sect_symtab()  :  symtab.c
<item>maintenance_check_symtabs()  :  symmisc.c
<item>print_frame_label_vars()  :  stack.c
<item>varobj_pc_in_valid_block_p()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function block_for_pc()

<p><tt>struct block* block_for_pc ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>block.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_for_pc_sect()  :  block.c
<item>find_pc_mapped_section()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_local_symbols()  :  tracepoint.c
<item>break_command_2()  :  breakpoint.c
<item>condition_command_1()  :  breakpoint.c
<item>create_breakpoints()  :  breakpoint.c
<item>do_captured_breakpoint()  :  breakpoint.c
<item>encode_actions()  :  tracepoint.c
<item>evaluate_subexp_standard()  :  eval.c
<item>get_frame_block()  :  blockframe.c
<item>get_pc_function_start()  :  blockframe.c
<item>get_selected_block()  :  stack.c
<item>hand_function_call()  :  infcall.c
<item>scope_info()  :  tracepoint.c
<item>validate_actionline()  :  tracepoint.c
</itemize>
</descrip>

<sect1>Global Function block_for_pc_sect()

<p><tt>struct block* block_for_pc_sect ( CORE_ADDR pc, struct bfd_section* section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>block.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>blockvector_for_pc_sect()  :  block.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>block_for_pc()  :  block.c
<item>find_pc_sect_function()  :  blockframe.c
<item>find_pc_sect_function_no_inlined()  :  blockframe.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cached_block  :  symtab.c
<item>cached_mapped_section  :  symtab.c
<item>last_block_lookup_pc  :  symtab.c
<item>last_mapped_section_lookup_pc  :  symtab.c
</itemize>
</descrip>

<sect1>Global Function block_function()

<p><tt>struct symbol* block_function ( const struct block* bl )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>block.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_find_renaming_symbol()  :  ada-lang.c
<item>find_pc_sect_function()  :  blockframe.c
<item>find_pc_sect_function_no_inlined()  :  blockframe.c
<item>get_frame_function()  :  blockframe.c
<item>get_pc_function_start()  :  blockframe.c
<item>remove_out_of_scope_renamings()  :  ada-lang.c
<item>resolve_sal_pc()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function block_global_block()

<p><tt>const struct block* block_global_block ( const struct block* block )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>block.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>lookup_symbol_aux()  :  symtab.c
<item>lookup_symbol_file()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Global Function block_highest_pc()

<p><tt>CORE_ADDR block_highest_pc ( const struct block* bl )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>block.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol()  :  ada-lang.c
<item>addr_inside_main_func()  :  blockframe.c
<item>blockvector_for_pc_sect()  :  block.c
<item>find_pc_partial_function_impl()  :  blockframe.c
</itemize>
</descrip>

<sect1>Global Function block_scope()

<p><tt>const char* block_scope ( const struct block* block )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>block.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_lookup_symbol_nonlocal()  :  cp-namespace.c
<item>cp_lookup_transparent_type()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Global Function block_set_scope()

<p><tt>void block_set_scope ( struct block* block, const char* scope, struct obstack* obstack )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>block.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_initialize_namespace()  :  block.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_set_block_scope()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Global Function block_set_using()

<p><tt>void block_set_using ( struct block* block, struct using_direct* usingd, struct obstack* obstack )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>block.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_initialize_namespace()  :  block.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_finalize_namespace()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Global Function block_starts_and_ends()

<p><tt>int block_starts_and_ends ( struct block* bl, CORE_ADDR start, CORE_ADDR end )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>block.h
</itemize>
</descrip>

<sect1>Global Function block_static_block()

<p><tt>const struct block* block_static_block ( const struct block* block )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>block.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol_nonlocal()  :  ada-lang.c
<item>block_using()  :  block.c
<item>lookup_symbol_all()  :  symtab.c
<item>lookup_symbol_aux_local()  :  symtab.c
<item>lookup_symbol_static()  :  symtab.c
<item>make_symbol_overload_list_qualified()  :  cp-support.c
</itemize>
</descrip>

<sect1>Global Function block_using()

<p><tt>struct using_direct* block_using ( const struct block* block )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>block.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_static_block()  :  block.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_lookup_symbol_namespace()  :  cp-namespace.c
<item>make_symbol_overload_list_using()  :  cp-support.c
</itemize>
</descrip>

<sect1>Global Function blockvector_for_pc()

<p><tt>struct blockvector* blockvector_for_pc ( CORE_ADDR pc, int* pindex )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>block.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>blockvector_for_pc_sect()  :  block.c
<item>find_pc_mapped_section()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_frame_label_vars()  :  stack.c
</itemize>
</descrip>

<sect1>Global Function blockvector_for_pc_sect()

<p><tt>struct blockvector* blockvector_for_pc_sect ( CORE_ADDR pc, struct bfd_section* section, int* pindex, struct symtab* symtab )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>block.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_contains_pc()  :  block.c
<item>block_highest_pc()  :  block.c
<item>find_pc_sect_symtab()  :  symtab.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>block_for_pc_sect()  :  block.c
<item>blockvector_for_pc()  :  block.c
<item>decode_all_digits_exhaustive()  :  linespec.c
<item>resolve_sal_pc()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cached_blockvector  :  symtab.c
<item>cached_blockvector_index  :  symtab.c
<item>cached_mapped_section  :  symtab.c
<item>last_blockvector_lookup_pc  :  symtab.c
<item>last_mapped_section_lookup_pc  :  symtab.c
</itemize>
</descrip>

<sect1>Global Function contained_in()

<p><tt>int contained_in ( const struct block* a, const struct block* b )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>block.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>display_info()  :  printcmd.c
<item>do_one_display()  :  printcmd.c
<item>f_parse()  :  f-exp.c
<item>finish_block()  :  buildsym.c
<item>m2_parse()  :  m2-exp.c
<item>objc_parse()  :  objc-exp.c
<item>pascal_parse()  :  p-exp.c
<item>print_frame_label_vars()  :  stack.c
<item>push_variable()  :  jv-exp.c
<item>resolve_subexp()  :  ada-lang.c
<item>write_var_from_sym()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function block_initialize_namespace()

<p><tt>static void block_initialize_namespace ( struct block* block, struct obstack* obstack )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>block.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>block_set_scope()  :  block.c
<item>block_set_using()  :  block.c
</itemize>
</descrip>

</article>
