<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF ada-valprint.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for ada-valprint.c of gdb.cxref.
<author>cxref

<sect>File ada-valprint.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;valprint.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;annotate.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;ada-lang.h&quot;</tt>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;c-lang.h&quot;</tt>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;macroexp.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;infcall.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>

<sect1>Type struct ada_val_print_args

<p>
<itemize>
<item><tt>struct ada_val_print_args</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct type* type;</tt><newline>
<item><tt>const gdb_byte* valaddr0;</tt><newline>
<item><tt>int embedded_offset;</tt><newline>
<item><tt>CORE_ADDR address;</tt><newline>
<item><tt>struct ui_file* stream;</tt><newline>
<item><tt>int format;</tt><newline>
<item><tt>int deref_ref;</tt><newline>
<item><tt>int recurse;</tt><newline>
<item><tt>enum val_prettyprint pretty;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Function ada_emit_char()

<p><tt>void ada_emit_char ( int c, struct ui_file* stream, int quoter, int type_len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>isascii(), isprint()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_printchar()  :  ada-valprint.c
<item>emit_char()  :  ada-lang.c
<item>printstr()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Global Function ada_print_scalar()

<p><tt>void ada_print_scalar ( struct type* type, long val, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_enum_name()  :  ada-lang.c
<item>ada_print_scalar()  :  ada-valprint.c
<item>error()  :  utils.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>print_longest()  :  valprint.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_scalar()  :  ada-valprint.c
<item>print_choices()  :  ada-typeprint.c
<item>print_dynamic_range_bound()  :  ada-typeprint.c
<item>print_optional_low_bound()  :  ada-valprint.c
<item>print_range()  :  ada-typeprint.c
<item>print_range_bound()  :  ada-typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Global Function ada_printchar()

<p><tt>void ada_printchar ( int c, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_emit_char()  :  ada-valprint.c
<item>fputs_filtered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_printstr()

<p><tt>void ada_printstr ( struct ui_file* stream, const gdb_byte* string, unsigned int length, int width, int force_ellipses )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>printstr()  :  ada-valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_val_print()

<p><tt>int ada_val_print ( struct type* type, const gdb_byte* valaddr0, int embedded_offset, CORE_ADDR address, struct ui_file* stream, int format, int deref_ref, int recurse, enum val_prettyprint pretty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>catch_errors()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_field_values()  :  ada-valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>ada_val_print_stub()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Global Function ada_value_print()

<p><tt>int ada_value_print ( struct value* val0, struct ui_file* stream, int format, enum val_prettyprint pretty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_is_array_descriptor_type()  :  ada-lang.c
<item>ada_is_bogus_array_descriptor()  :  ada-lang.c
<item>ada_to_fixed_type()  :  ada-lang.c
<item>deprecated_value_address_hack()  :  value.c
<item>fprintf_filtered()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>type_print()  :  typeprint.c
<item>val_print()  :  valprint.c
<item>value_contents()  :  value.c
<item>value_from_contents_and_address()  :  ada-lang.c
<item>value_offset()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_print_floating()

<p><tt>static void ada_print_floating ( const gdb_byte* valaddr, struct type* type, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>fprintf_filtered()  :  utils.c
<item>make_cleanup_ui_file_delete()  :  utils.c
<item>mem_fileopen()  :  ui-file.c
<item>print_floating()  :  valprint.c
<item>ui_file_put()  :  ui-file.c
<item>__builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), strchr(), strlen(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>ui_memcpy()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Local Function ada_val_print_1()

<p><tt>static int ada_val_print_1 ( struct type* type, const gdb_byte* valaddr0, int embedded_offset, CORE_ADDR address, struct ui_file* stream, int format, int deref_ref, int recurse, enum val_prettyprint pretty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-valprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_aligned_value_addr()  :  ada-lang.c
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_coerce_to_simple_array_ptr()  :  ada-lang.c
<item>ada_enum_name()  :  ada-lang.c
<item>ada_fixed_to_float()  :  ada-lang.c
<item>ada_is_array_descriptor_type()  :  ada-lang.c
<item>ada_is_bogus_array_descriptor()  :  ada-lang.c
<item>ada_is_character_type()  :  ada-lang.c
<item>ada_is_fixed_point_type()  :  ada-lang.c
<item>ada_is_packed_array_type()  :  ada-lang.c
<item>ada_is_string_type()  :  ada-lang.c
<item>ada_is_system_address_type()  :  ada-lang.c
<item>ada_is_tag_type()  :  ada-lang.c
<item>ada_is_vax_floating_type()  :  ada-lang.c
<item>ada_print_floating()  :  ada-valprint.c
<item>ada_printchar()  :  ada-valprint.c
<item>ada_tag_name()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_value_ind()  :  ada-lang.c
<item>ada_vax_float_print_function()  :  ada-lang.c
<item>c_val_print()  :  c-valprint.c
<item>call_function_by_hand()  :  infcall.c
<item>char_at()  :  ada-valprint.c
<item>check_typedef()  :  gdbtypes.c
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
<item>deprecated_print_address_numeric()  :  printcmd.c
<item>deprecated_value_address_hack()  :  value.c
<item>extract_typed_address()  :  findvar.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>make_pointer_type()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>print_longest()  :  valprint.c
<item>print_optional_low_bound()  :  ada-valprint.c
<item>print_record()  :  ada-valprint.c
<item>print_scalar_formatted()  :  printcmd.c
<item>print_spaces_filtered()  :  utils.c
<item>printable_val_type()  :  ada-valprint.c
<item>printstr()  :  ada-valprint.c
<item>quit()  :  utils.c
<item>type_print()  :  typeprint.c
<item>unpack_long()  :  value.c
<item>unpack_pointer()  :  value.c
<item>val_print()  :  valprint.c
<item>val_print_array_elements()  :  valprint.c
<item>val_print_packed_array_elements()  :  ada-valprint.c
<item>val_print_type_code_int()  :  valprint.c
<item>value_cast()  :  valops.c
<item>value_contents()  :  value.c
<item>value_free_to_mark()  :  value.c
<item>value_from_contents_and_address()  :  ada-lang.c
<item>value_from_longest()  :  value.c
<item>value_ind()  :  valops.c
<item>value_mark()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_val_print_stub()  :  ada-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_char  :  gdbtypes.c
<item>builtin_type_int  :  gdbtypes.c
<item>builtin_type_void  :  gdbtypes.c
<item>builtin_type_void_data_ptr  :  gdbtypes.c
<item>output_format  :  valprint.c
<item>prettyprint_arrays  :  valprint.c
<item>print_max  :  valprint.c
<item>quit_flag  :  utils.c
<item>stop_print_at_null  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function ada_val_print_stub()

<p><tt>static int ada_val_print_stub ( void* args0 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-valprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_val_print()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Local Function adjust_type_signedness()

<p><tt>static void adjust_type_signedness ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-valprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_field_values()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Local Function char_at()

<p><tt>static int char_at ( const gdb_byte* string, int i, int type_len )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>extract_unsigned_integer()  :  findvar.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
<item>printstr()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Local Function print_field_values()

<p><tt>static int print_field_values ( struct type* type, const gdb_byte* valaddr, struct ui_file* stream, int format, int recurse, enum val_prettyprint pretty, int comma_needed, struct type* outer_type, const gdb_byte* outer_valaddr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-valprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_is_ignored_field()  :  ada-lang.c
<item>ada_is_variant_part()  :  ada-lang.c
<item>ada_is_wrapper_field()  :  ada-lang.c
<item>ada_name_prefix_len()  :  ada-lang.c
<item>ada_val_print()  :  ada-valprint.c
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>adjust_type_signedness()  :  ada-valprint.c
<item>fprintf_filtered()  :  utils.c
<item>fprintf_symbol_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>n_spaces()  :  utils.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>print_field_values()  :  ada-valprint.c
<item>print_spaces_filtered()  :  utils.c
<item>print_variant_part()  :  ada-valprint.c
<item>val_print()  :  valprint.c
<item>value_contents()  :  value.c
<item>wrap_here()  :  utils.c
<item>annotate_field_begin(), annotate_field_end(), annotate_field_name_end(), annotate_field_value()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_field_values()  :  ada-valprint.c
<item>print_record()  :  ada-valprint.c
<item>print_variant_part()  :  ada-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
<item>inspect_it  :  printcmd.c
</itemize>
</descrip>

<sect1>Local Function print_optional_low_bound()

<p><tt>static int print_optional_low_bound ( struct ui_file* stream, struct type* type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_print_scalar()  :  ada-valprint.c
<item>fprintf_filtered()  :  utils.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_long  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function print_record()

<p><tt>static void print_record ( struct type* type, const gdb_byte* valaddr, struct ui_file* stream, int format, int recurse, enum val_prettyprint pretty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-valprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>fprintf_filtered()  :  utils.c
<item>print_field_values()  :  ada-valprint.c
<item>print_spaces_filtered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Local Function print_variant_part()

<p><tt>static int print_variant_part ( struct type* type, int field_num, const gdb_byte* valaddr, struct ui_file* stream, int format, int recurse, enum val_prettyprint pretty, int comma_needed, struct type* outer_type, const gdb_byte* outer_valaddr )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_which_variant_applies()  :  ada-lang.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>print_field_values()  :  ada-valprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_field_values()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Local Function printable_val_type()

<p><tt>static struct type* printable_val_type ( struct type* type, const gdb_byte* valaddr )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_aligned_type()  :  ada-lang.c
<item>ada_to_fixed_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Local Function printstr()

<p><tt>static void printstr ( struct ui_file* stream, const gdb_byte* string, unsigned int length, int force_ellipses, int type_len )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_emit_char()  :  ada-valprint.c
<item>char_at()  :  ada-valprint.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>quit()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_printstr()  :  ada-valprint.c
<item>ada_val_print_1()  :  ada-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inspect_it  :  printcmd.c
<item>print_max  :  valprint.c
<item>quit_flag  :  utils.c
<item>repeat_count_threshold  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function ui_memcpy()

<p><tt>static void ui_memcpy ( void* dest, const char* buffer, long len )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_print_floating()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Local Function val_print_packed_array_elements()

<p><tt>static void val_print_packed_array_elements ( struct type* type, const gdb_byte* valaddr, int bitoffset, struct ui_file* stream, int format, int recurse, enum val_prettyprint pretty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>check_typedef()  :  gdbtypes.c
<item>fprintf_filtered()  :  utils.c
<item>get_discrete_bounds()  :  gdbtypes.c
<item>n_spaces()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>print_spaces_filtered()  :  utils.c
<item>val_print()  :  valprint.c
<item>value_contents()  :  value.c
<item>value_free_to_mark()  :  value.c
<item>value_mark()  :  value.c
<item>wrap_here()  :  utils.c
<item>annotate_array_section_begin(), annotate_array_section_end(), annotate_elt(), annotate_elt_rep(), annotate_elt_rep_end(), memcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>prettyprint_arrays  :  valprint.c
<item>print_max  :  valprint.c
<item>repeat_count_threshold  :  valprint.c
</itemize>
</descrip>

</article>
