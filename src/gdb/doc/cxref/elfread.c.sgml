<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF elfread.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for elfread.c of gdb.cxref.
<author>cxref

<sect>File elfread.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>default_symfile_offsets()  :  symfile.c
<item>elf_new_init()  :  elfread.c
<item>elf_symfile_finish()  :  elfread.c
<item>elf_symfile_init()  :  elfread.c
<item>elf_symfile_read()  :  elfread.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/elf-bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;../include/elf/common.h&quot;</tt>
<item><tt>#include &quot;../include/elf/internal.h&quot;</tt>
<item><tt>#include &quot;../include/elf/external.h&quot;</tt>
<item><tt>#include &quot;../include/bfdlink.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/elf/mips.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/elf/reloc-macros.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;buildsym.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;stabsread.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb-stabs.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;complaints.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>

<sect1>Type struct elfinfo

<p>
<itemize>
<item><tt>struct elfinfo</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>file_ptr dboffset;</tt><newline>
<item><tt>unsigned int dbsize;</tt><newline>
<item><tt>file_ptr lnoffset;</tt><newline>
<item><tt>unsigned int lnsize;</tt><newline>
<item><tt>asection* stabsect;</tt><newline>
<item><tt>asection* stabindexsect;</tt><newline>
<item><tt>asection* mdebugsect;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Local Variables

<p>
<bf>elf_sym_fns</bf><newline>
<tt>static struct sym_fns elf_sym_fns</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_elfread()
</itemize>
</descrip>

<sect1>Global Function _initialize_elfread()

<p><tt>void _initialize_elfread ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>elfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_symtab_fns()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>elf_sym_fns  :  elfread.c
</itemize>
</descrip>

<sect1>Global Function elfstab_offset_sections()

<p><tt>void elfstab_offset_sections ( struct objfile* objfile, struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>_obstack_newchunk(), strchr(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>start_psymtab()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function elf_locate_sections()

<p><tt>static void elf_locate_sections ( bfd* ignore_abfd, asection* sectp, void* eip )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>elf_symfile_read()  :  elfread.c
</itemize>
</descrip>

<sect1>Local Function elf_new_init()

<p><tt>static void elf_new_init ( struct objfile* ignore )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>buildsym_new_init()  :  buildsym.c
<item>stabsread_new_init()  :  stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>elfread.c
</itemize>
</descrip>

<sect1>Local Function elf_symfile_finish()

<p><tt>static void elf_symfile_finish ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>elfread.c
</itemize>
</descrip>

<sect1>Local Function elf_symfile_init()

<p><tt>static void elf_symfile_init ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>elfread.c
</itemize>
</descrip>

<sect1>Local Function elf_symfile_read()

<p><tt>static void elf_symfile_read ( struct objfile* objfile, int mainline )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>dwarf2_build_frame_info()  :  dwarf2-frame.c
<item>dwarf2_build_psymtabs()  :  dwarf2read.c
<item>dwarf2_has_info()  :  dwarf2read.c
<item>dwarf_build_psymtabs()  :  dwarfread.c
<item>elf_symtab_read()  :  elfread.c
<item>elfmdebug_build_psymtabs()  :  mdebugread.c
<item>elfstab_build_psymtabs()  :  dbxread.c
<item>init_minimal_symbol_collection()  :  minsyms.c
<item>init_psymbol_list()  :  symfile.c
<item>install_minimal_symbols()  :  minsyms.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_discard_minimal_symbols()  :  minsyms.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), bfd_get_section_by_name(), bfd_map_over_sections()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>elfread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>elf_locate_sections()  :  elfread.c
<item>free_elfinfo()  :  elfread.c
</itemize>
</descrip>

<sect1>Local Function elf_symtab_read()

<p><tt>static void elf_symtab_read ( struct objfile* objfile, int dynamic )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>executable_objfile()  :  objfiles.c
<item>gdbarch_elf_make_msymbol_special()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>objfile_section_offset()  :  objfiles.c
<item>obsavestring()  :  symfile.c
<item>record_minimal_symbol()  :  elfread.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), bfd_errmsg(), bfd_get_error(), strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>elf_symfile_read()  :  elfread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>symfile_complaints  :  complaints.c
<item>bfd_abs_section, bfd_und_section
</itemize>
</descrip>

<sect1>Local Function free_elfinfo()

<p><tt>static void free_elfinfo ( void* objp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>elfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>elf_symfile_read()  :  elfread.c
</itemize>
</descrip>

<sect1>Local Function record_minimal_symbol()

<p><tt>static struct minimal_symbol* record_minimal_symbol ( char* name, CORE_ADDR address, enum minimal_symbol_type ms_type, asection* bfd_section, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_smash_text_address()  :  gdbarch.c
<item>prim_record_minimal_symbol_and_info()  :  minsyms.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>elf_symtab_read()  :  elfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

</article>
