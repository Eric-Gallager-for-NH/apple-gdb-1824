<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF linespec.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for linespec.c of gdb.cxref.
<author>cxref

<sect>File linespec.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;source.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;completer.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;cp-abi.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;parser-defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;objc-lang.h&quot;</tt>
<itemize>
<item><tt>#include &lt;Availability.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;linespec.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>

<sect1>Type enum sign

<p>
<itemize>
<item><tt>enum sign</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>none;</tt><newline>
<item><tt>plus;</tt><newline>
<item><tt>minus;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type enum sign

<p>
<itemize>
<item><tt>enum sign</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>none;</tt><newline>
<item><tt>plus;</tt><newline>
<item><tt>minus;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable allow_objc_selectors_flag

<p>
<tt>int allow_objc_selectors_flag</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
<item>linespec.c
<item>source.c
<item>symtab.c
<item>tracepoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>decode_line_1()  :  linespec.c
<item>rbreak_command()  :  symtab.c
<item>reset_allow_objc_selectors_flag()  :  linespec.c
</itemize>
</descrip>

<sect1>Global Function decode_line_1()

<p><tt>struct symtabs_and_lines decode_line_1 ( const char** argptr, int funfirstline, struct symtab* default_symtab, int default_line, char*** canonical, int* not_found_ptr, int find_all_occurrences )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>decode_all_digits()  :  linespec.c
<item>decode_all_digits_exhaustive()  :  linespec.c
<item>decode_all_variables()  :  linespec.c
<item>decode_compound()  :  linespec.c
<item>decode_dollar()  :  linespec.c
<item>decode_indirect()  :  linespec.c
<item>decode_objc()  :  linespec.c
<item>decode_variable()  :  linespec.c
<item>error()  :  utils.c
<item>get_gdb_completer_quote_characters()  :  completer.c
<item>initialize_defaults()  :  linespec.c
<item>intersect_sals()  :  linespec.c
<item>is_objc_method_format()  :  linespec.c
<item>locate_first_half()  :  linespec.c
<item>set_flags()  :  linespec.c
<item>skip_quoted()  :  completer.c
<item>skip_quoted_chars()  :  completer.c
<item>symtab_from_filename()  :  linespec.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk(), strchr(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>decode_line_spec()  :  symtab.c
<item>decode_line_spec_1()  :  breakpoint.c
<item>parse_breakpoint_sals()  :  breakpoint.c
<item>scope_info()  :  tracepoint.c
<item>solib_load_unload_1()  :  breakpoint.c
<item>trace_command()  :  tracepoint.c
<item>until_break_command()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>allow_objc_selectors_flag  :  linespec.c
</itemize>
</descrip>

<sect1>Global Function decode_objc()

<p><tt>struct symtabs_and_lines decode_objc ( const char** argptr, int funfirstline, struct symtab* file_symtab, char*** canonical, const char* saved_arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>build_canonical_line_spec()  :  linespec.c
<item>decode_line_2()  :  linespec.c
<item>find_function_start_sal()  :  symtab.c
<item>find_imps()  :  objc-lang.c
<item>find_pc_function()  :  blockframe.c
<item>find_pc_sect_function()  :  blockframe.c
<item>gdbarch_skip_prologue()  :  gdbarch.c
<item>gdbarch_skip_prologue_addr_ctx()  :  gdbarch.c
<item>gdbarch_skip_prologue_addr_ctx_p()  :  gdbarch.c
<item>get_selected_block()  :  stack.c
<item>init_address_context()  :  symtab.c
<item>internal_error()  :  utils.c
<item>symbol_natural_name()  :  symtab.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
<item>warning()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin_alloca(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_line_1()  :  linespec.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function reset_allow_objc_selectors_flag()

<p><tt>void reset_allow_objc_selectors_flag ( void* dummy )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>rbreak_command()  :  symtab.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>allow_objc_selectors_flag  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function add_constructors()

<p><tt>static int add_constructors ( int method_counter, struct type* t, struct symbol*** sym_arr, int* sym_arr_size, int* sym_arr_pos )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>is_constructor_name()  :  cp-abi.c
<item>lookup_symbol_all()  :  symtab.c
<item>remove_duplicate_symbols()  :  linespec.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_methods()  :  linespec.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function add_matching_methods()

<p><tt>static int add_matching_methods ( int method_counter, struct type* t, struct symbol*** sym_arr, int* sym_arr_size, int* sym_arr_pos )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdb_mangle_name()  :  symtab.c
<item>is_destructor_name()  :  cp-abi.c
<item>lookup_symbol_all()  :  symtab.c
<item>remove_duplicate_symbols()  :  linespec.c
<item>xfree()  :  utils.c
<item>xrealloc()  :  utils.c
<item>__builtin___snprintf_chk(), __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcpy_chk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_methods()  :  linespec.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function build_canonical_line_spec()

<p><tt>static void build_canonical_line_spec ( struct symtab_and_line* sal, const char* symname, char*** canonical )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>__builtin___snprintf_chk(), __builtin_object_size(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_all_digits()  :  linespec.c
<item>decode_all_digits_exhaustive()  :  linespec.c
<item>decode_dollar()  :  linespec.c
<item>decode_objc()  :  linespec.c
<item>symbol_found()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function collect_methods()

<p><tt>static int collect_methods ( char* copy, struct type* t, struct symbol*** sym_arr, int* sym_arr_size )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>destructor_name_p()  :  valops.c
<item>find_methods()  :  linespec.c
<item>get_destructor_fn_field()  :  gdbtypes.c
<item>lookup_symbol_all()  :  symtab.c
<item>remove_duplicate_symbols()  :  linespec.c
<item>xrealloc()  :  utils.c
<item>__builtin___snprintf_chk(), __builtin_alloca(), __builtin_object_size(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_method()  :  linespec.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function cplusplus_error()

<p><tt>static void cplusplus_error ( const char* name, const char* fmt, ... )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error_stream()  :  utils.c
<item>fprintf_unfiltered()  :  utils.c
<item>make_cleanup_ui_file_delete()  :  utils.c
<item>mem_fileopen()  :  ui-file.c
<item>vfprintf_unfiltered()  :  utils.c
<item>__builtin_va_end(), __builtin_va_start()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_compound()  :  linespec.c
<item>find_method()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function decode_all_digits()

<p><tt>static struct symtabs_and_lines decode_all_digits ( const char** argptr, int funfirstline, struct symtab* default_symtab, int default_line, char*** canonical, struct symtab* file_symtab, const char* q )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>build_canonical_line_spec()  :  linespec.c
<item>do_cleanups()  :  utils.c
<item>find_function_start_sal()  :  symtab.c
<item>find_line_pc()  :  symtab.c
<item>find_line_symtab()  :  symtab.c
<item>find_pc_function()  :  blockframe.c
<item>init_sal()  :  symtab.c
<item>initialize_defaults()  :  linespec.c
<item>make_cleanup_restrict_to_objfile()  :  objfiles.c
<item>set_default_source_symtab_and_line()  :  source.c
<item>xmalloc()  :  utils.c
<item>atoi()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_line_1()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function decode_all_digits_exhaustive()

<p><tt>static struct symtabs_and_lines decode_all_digits_exhaustive ( const char** argptr, int funfirstline, struct symtab* default_symtab, int default_line, char*** canonical, struct symtab* file_symtab, const char* q, int* parsed_lineno, int* not_found_ptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>blockvector_for_pc_sect()  :  block.c
<item>build_canonical_line_spec()  :  linespec.c
<item>do_cleanups()  :  utils.c
<item>find_function_start_sal()  :  symtab.c
<item>find_pc_function()  :  blockframe.c
<item>init_sal()  :  symtab.c
<item>initialize_defaults()  :  linespec.c
<item>make_cleanup_restrict_to_objfile()  :  objfiles.c
<item>one_block_contains_other()  :  linespec.c
<item>set_default_source_symtab_and_line()  :  source.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>atoi(), exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp(), throw_exception()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_line_1()  :  linespec.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function decode_all_variables()

<p><tt>static struct symtabs_and_lines decode_all_variables ( char* copy, int funfirstline, int equivalencies, char*** canonical, struct symtab* file_symtab, int* not_found_ptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>get_selected_block()  :  stack.c
<item>have_full_symbols()  :  objfiles.c
<item>have_minimal_symbols()  :  objfiles.c
<item>have_partial_symbols()  :  objfiles.c
<item>internal_error()  :  utils.c
<item>lookup_minimal_symbol_all()  :  minsyms.c
<item>lookup_symbol_all()  :  symtab.c
<item>minsyms_found()  :  linespec.c
<item>remove_duplicate_sals()  :  breakpoint.c
<item>symbols_found()  :  linespec.c
<item>xmalloc()  :  utils.c
<item>strcmp(), throw_error()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_line_1()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function decode_compound()

<p><tt>static struct symtabs_and_lines decode_compound ( const char** argptr, int funfirstline, char*** canonical, const char* saved_arg, const char* p, int* not_found_ptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>cplusplus_error()  :  linespec.c
<item>error()  :  utils.c
<item>find_method()  :  linespec.c
<item>find_template_name_end()  :  parse.c
<item>get_gdb_completer_quote_characters()  :  completer.c
<item>lookup_prefix_sym()  :  linespec.c
<item>lookup_symbol_all()  :  symtab.c
<item>skip_quoted()  :  completer.c
<item>symbols_found()  :  linespec.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), strchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_line_1()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function decode_dollar()

<p><tt>static struct symtabs_and_lines decode_dollar ( char* copy, int funfirstline, struct symtab* default_symtab, char*** canonical, struct symtab* file_symtab )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_value_history()  :  value.c
<item>build_canonical_line_spec()  :  linespec.c
<item>error()  :  utils.c
<item>init_sal()  :  symtab.c
<item>lookup_internalvar()  :  value.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_symbol()  :  symtab.c
<item>minsym_found()  :  linespec.c
<item>symbol_found()  :  linespec.c
<item>value_as_long()  :  value.c
<item>value_of_internalvar()  :  value.c
<item>value_type()  :  value.c
<item>xmalloc()  :  utils.c
<item>sscanf()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_line_1()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function decode_indirect()

<p><tt>static struct symtabs_and_lines decode_indirect ( const char** argptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_line()  :  symtab.c
<item>find_pc_overlay()  :  symfile.c
<item>parse_and_eval_address_1()  :  eval.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_line_1()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function decode_line_2()

<p><tt>static struct symtabs_and_lines decode_line_2 ( struct symbol* sym_arr[], int nelts, int nsyms, int funfirstline, int accept_all, char*** canonical )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>command_line_input()  :  top.c
<item>discard_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>find_function_start_sal()  :  symtab.c
<item>gdbarch_skip_prologue()  :  gdbarch.c
<item>gdbarch_skip_prologue_addr_ctx()  :  gdbarch.c
<item>gdbarch_skip_prologue_addr_ctx_p()  :  gdbarch.c
<item>init_address_context()  :  symtab.c
<item>init_sal()  :  symtab.c
<item>make_cleanup()  :  utils.c
<item>printf_filtered()  :  utils.c
<item>printf_unfiltered()  :  utils.c
<item>quit()  :  utils.c
<item>savestring()  :  utils.c
<item>symbol_natural_name()  :  symtab.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk(), atoi(), error_no_arg(), getenv(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_objc()  :  linespec.c
<item>find_method()  :  linespec.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>demangle  :  utils.c
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Local Function decode_variable()

<p><tt>static struct symtabs_and_lines decode_variable ( char* copy, int funfirstline, int equivalencies, char*** canonical, struct symtab* file_symtab, int* not_found_ptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>get_selected_block()  :  stack.c
<item>have_full_symbols()  :  objfiles.c
<item>have_minimal_symbols()  :  objfiles.c
<item>have_partial_symbols()  :  objfiles.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_symbol()  :  symtab.c
<item>minsym_found()  :  linespec.c
<item>symbol_found()  :  linespec.c
<item>throw_error()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_line_1()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function find_method()

<p><tt>static struct symtabs_and_lines find_method ( int funfirstline, char*** canonical, const char* saved_arg, char* copy, struct type* t, struct symbol* sym_class, int* not_found_ptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>collect_methods()  :  linespec.c
<item>cplusplus_error()  :  linespec.c
<item>decode_line_2()  :  linespec.c
<item>find_function_start_sal()  :  symtab.c
<item>is_operator_name()  :  cp-abi.c
<item>symbol_natural_name()  :  symtab.c
<item>total_number_of_methods()  :  linespec.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
<item>xcalloc()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_compound()  :  linespec.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle  :  utils.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function find_methods()

<p><tt>static int find_methods ( struct type* t, char* name, struct symbol*** sym_arr, int* sym_arr_size, int* sym_arr_pos )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_constructors()  :  linespec.c
<item>add_matching_methods()  :  linespec.c
<item>check_typedef()  :  gdbtypes.c
<item>do_cleanups()  :  utils.c
<item>find_methods()  :  linespec.c
<item>lookup_symbol()  :  symtab.c
<item>make_cleanup_restore_language()  :  language.c
<item>strcmp_iw()  :  utils.c
<item>type_name_no_tag()  :  gdbtypes.c
<item>cplus_demangle_opname(), strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>collect_methods()  :  linespec.c
<item>find_methods()  :  linespec.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function find_toplevel_char()

<p><tt>static const char* find_toplevel_char ( const char* s, char c )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>locate_first_half()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function initialize_defaults()

<p><tt>static void initialize_defaults ( struct symtab** default_symtab, int* default_line )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_current_source_symtab_and_line()  :  source.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_all_digits()  :  linespec.c
<item>decode_all_digits_exhaustive()  :  linespec.c
<item>decode_line_1()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function intersect_sals()

<p><tt>static void intersect_sals ( struct symtabs_and_lines* dst_sals, const struct symtabs_and_lines* src_sals )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>sals_pushback()  :  linespec.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_line_1()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function is_objc_method_format()

<p><tt>static int is_objc_method_format ( const char* s )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_line_1()  :  linespec.c
<item>locate_first_half()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function locate_first_half()

<p><tt>static const char* locate_first_half ( const char** argptr, int* is_quote_enclosed )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>find_template_name_end()  :  parse.c
<item>find_toplevel_char()  :  linespec.c
<item>is_objc_method_format()  :  linespec.c
<item>strchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_line_1()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function lookup_prefix_sym()

<p><tt>static struct symbol* lookup_prefix_sym ( const char** argptr, const char* p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>lookup_symbol()  :  symtab.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_compound()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function minsym_found()

<p><tt>static struct symtabs_and_lines minsym_found ( int funfirstline, int equivalencies, struct minimal_symbol* msymbol, char*** canonical )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>find_equivalent_msymbol()  :  symmisc.c
<item>find_pc_sect_line()  :  symtab.c
<item>gdbarch_deprecated_function_start_offset()  :  gdbarch.c
<item>gdbarch_skip_prologue()  :  gdbarch.c
<item>gdbarch_skip_prologue_addr_ctx()  :  gdbarch.c
<item>gdbarch_skip_prologue_addr_ctx_p()  :  gdbarch.c
<item>init_address_context()  :  symtab.c
<item>make_cleanup()  :  utils.c
<item>xasprintf()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_dollar()  :  linespec.c
<item>decode_variable()  :  linespec.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>null_cleanup()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function minsyms_found()

<p><tt>static struct symtabs_and_lines minsyms_found ( int funfirstline, int equivalencies, struct symbol_search* sym_list, char*** canonical )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>find_equivalent_msymbol()  :  symmisc.c
<item>find_pc_sect_line()  :  symtab.c
<item>gdbarch_deprecated_function_start_offset()  :  gdbarch.c
<item>gdbarch_skip_prologue()  :  gdbarch.c
<item>gdbarch_skip_prologue_addr_ctx()  :  gdbarch.c
<item>gdbarch_skip_prologue_addr_ctx_p()  :  gdbarch.c
<item>init_address_context()  :  symtab.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>xasprintf()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_all_variables()  :  linespec.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>null_cleanup()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function one_block_contains_other()

<p><tt>static int one_block_contains_other ( struct blockvector* bv, int index1, int index2 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_all_digits_exhaustive()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function remove_duplicate_symbols()

<p><tt>static void remove_duplicate_symbols ( struct symbol** sym_arr, int sym_arr_pos, struct symbol_search** sym_list )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>add_constructors()  :  linespec.c
<item>add_matching_methods()  :  linespec.c
<item>collect_methods()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function sals_pushback()

<p><tt>static void sals_pushback ( struct symtabs_and_lines* sals, struct symtab_and_line* sal, unsigned int num_sals )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>intersect_sals()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function set_flags()

<p><tt>static void set_flags ( const char* arg, int* is_quoted, char** paren_pointer )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_gdb_completer_quote_characters()  :  completer.c
<item>strchr(), strrchr(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_line_1()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function symbol_found()

<p><tt>static struct symtabs_and_lines symbol_found ( int funfirstline, char*** canonical, char* copy, struct symbol* sym, struct symtab* file_symtab, struct symtab* sym_symtab )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>build_canonical_line_spec()  :  linespec.c
<item>error()  :  utils.c
<item>find_function_start_sal()  :  symtab.c
<item>lookup_block_symbol()  :  symtab.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_dollar()  :  linespec.c
<item>decode_variable()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function symbols_found()

<p><tt>static struct symtabs_and_lines symbols_found ( int funfirstline, char*** canonical, char* copy, struct symbol_search* sym_list, struct symtab* file_symtab )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>find_function_start_sal()  :  symtab.c
<item>lookup_block_symbol()  :  symtab.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin___snprintf_chk(), __builtin_object_size(), __inline_memset_chk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_all_variables()  :  linespec.c
<item>decode_compound()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function symtab_from_filename()

<p><tt>static struct symtab** symtab_from_filename ( const char** argptr, const char* p, int is_quote_enclosed, int* not_found_ptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>have_full_symbols()  :  objfiles.c
<item>have_partial_symbols()  :  objfiles.c
<item>lookup_symtab_all()  :  symtab.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), throw_error()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_line_1()  :  linespec.c
</itemize>
</descrip>

<sect1>Local Function total_number_of_methods()

<p><tt>static int total_number_of_methods ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>linespec.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>total_number_of_methods()  :  linespec.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_method()  :  linespec.c
<item>total_number_of_methods()  :  linespec.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

</article>
