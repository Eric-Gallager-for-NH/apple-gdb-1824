<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF jv-valprint.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for jv-valprint.c of gdb.cxref.
<author>cxref

<sect>File jv-valprint.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;valprint.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;jv-lang.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;c-lang.h&quot;</tt>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;macroexp.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;annotate.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>

<sect1>Global Function java_val_print()

<p><tt>int java_val_print ( struct type* type, const gdb_byte* valaddr, int embedded_offset, CORE_ADDR address, struct ui_file* stream, int format, int deref_ref, int recurse, enum val_prettyprint pretty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>c_val_print()  :  c-valprint.c
<item>check_typedef()  :  gdbtypes.c
<item>fputs_filtered()  :  utils.c
<item>java_print_value_fields()  :  jv-valprint.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>print_address_demangle()  :  printcmd.c
<item>print_longest()  :  valprint.c
<item>print_scalar_formatted()  :  printcmd.c
<item>unpack_long()  :  value.c
<item>unpack_pointer()  :  value.c
<item>val_print_type_code_int()  :  valprint.c
<item>strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>addressprint  :  valprint.c
<item>current_language  :  language.c
<item>demangle  :  utils.c
<item>output_format  :  valprint.c
</itemize>
</descrip>

<sect1>Global Function java_value_print()

<p><tt>int java_value_print ( struct value* val, struct ui_file* stream, int format, enum val_prettyprint pretty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>common_val_print()  :  valprint.c
<item>deprecated_value_address_hack()  :  value.c
<item>extract_signed_integer()  :  findvar.c
<item>extract_unsigned_integer()  :  findvar.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>gdbarch_ptr_bit()  :  gdbarch.c
<item>get_java_object_header_size()  :  jv-lang.c
<item>is_object_type()  :  jv-lang.c
<item>java_class_from_object()  :  jv-lang.c
<item>java_primitive_type_from_name()  :  jv-lang.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>n_spaces()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>paddr_nz()  :  utils.c
<item>read_memory()  :  corefile.c
<item>set_value_lazy()  :  value.c
<item>set_value_offset()  :  value.c
<item>type_from_class()  :  jv-lang.c
<item>type_print()  :  typeprint.c
<item>unpack_pointer()  :  value.c
<item>val_print_string()  :  valprint.c
<item>value_as_address()  :  value.c
<item>value_at()  :  valops.c
<item>value_contents()  :  value.c
<item>value_free_to_mark()  :  value.c
<item>value_logical_not()  :  valarith.c
<item>value_mark()  :  value.c
<item>value_offset()  :  value.c
<item>value_struct_elt()  :  valops.c
<item>value_type()  :  value.c
<item>wrap_here()  :  utils.c
<item>__builtin_alloca(), memcmp(), strcmp(), strlen()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>print_max  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function java_print_value_fields()

<p><tt>static void java_print_value_fields ( struct type* type, const gdb_byte* valaddr, CORE_ADDR address, struct ui_file* stream, int format, int recurse, enum val_prettyprint pretty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>common_val_print()  :  valprint.c
<item>fprintf_filtered()  :  utils.c
<item>fprintf_symbol_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>java_print_value_fields()  :  jv-valprint.c
<item>n_spaces()  :  utils.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>print_spaces_filtered()  :  utils.c
<item>type_name_no_tag()  :  gdbtypes.c
<item>unpack_field_as_long()  :  value.c
<item>val_print()  :  valprint.c
<item>value_addr()  :  valops.c
<item>value_from_longest()  :  value.c
<item>value_static_field()  :  value.c
<item>value_type()  :  value.c
<item>wrap_here()  :  utils.c
<item>annotate_field_begin(), annotate_field_end(), annotate_field_name_end(), annotate_field_value(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_print_value_fields()  :  jv-valprint.c
<item>java_val_print()  :  jv-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
<item>inspect_it  :  printcmd.c
<item>static_field_print  :  cp-valprint.c
</itemize>
</descrip>

</article>
