<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF dwarf2read.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for dwarf2read.c of gdb.cxref.
<author>cxref

<sect>File dwarf2read.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/elf/dwarf2.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;buildsym.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/filenames.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/hashtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;macrotab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;complaints.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;bcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;dwarf2expr.h&quot;</tt>
<itemize>
<item><tt>#include &quot;dwarf2loc.h&quot;</tt>
<itemize>
<item><tt>#include &quot;dwarf2read.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;dwarf2loc.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;cp-support.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/hashtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;fcntl.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;db-access-functions.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
<item><tt>#include &quot;objfiles.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;dwarf2read.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;objc-lang.h&quot;</tt>
<itemize>
<item><tt>#include &lt;Availability.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;libgen.h&gt;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define _ACTUAL_COMP_UNIT_HEADER_SIZE 11</tt><newline>
<p>
<tt>#define _ACTUAL_PUBNAMES_HEADER_SIZE 13</tt><newline>
<p>
<tt>#define _ACTUAL_PUBTYPES_HEADER_SIZE 13</tt><newline>
<p>
<tt>#define _ACTUAL_ARANGES_HEADER_SIZE 12</tt><newline>
<p>
<tt>#define INFO_SECTION &quot;LC_SEGMENT.__DWARF.__debug_info&quot;</tt><newline>
<p>
<tt>#define ABBREV_SECTION &quot;LC_SEGMENT.__DWARF.__debug_abbrev&quot;</tt><newline>
<p>
<tt>#define LINE_SECTION &quot;LC_SEGMENT.__DWARF.__debug_line&quot;</tt><newline>
<p>
<tt>#define PUBNAMES_SECTION &quot;LC_SEGMENT.__DWARF.__debug_pubnames&quot;</tt><newline>
<p>
<tt>#define PUBTYPES_SECTION &quot;LC_SEGMENT.__DWARF.__debug_pubtypes&quot;</tt><newline>
<p>
<tt>#define INLINED_SECTION &quot;LC_SEGMENT.__DWARF.__debug_inlined&quot;</tt><newline>
<p>
<tt>#define ARANGES_SECTION &quot;LC_SEGMENT.__DWARF.__debug_aranges&quot;</tt><newline>
<p>
<tt>#define LOC_SECTION &quot;LC_SEGMENT.__DWARF.__debug_loc&quot;</tt><newline>
<p>
<tt>#define MACINFO_SECTION &quot;LC_SEGMENT.__DWARF.__debug_macinfo&quot;</tt><newline>
<p>
<tt>#define STR_SECTION &quot;LC_SEGMENT.__DWARF.__debug_str&quot;</tt><newline>
<p>
<tt>#define FRAME_SECTION &quot;LC_SEGMENT.__DWARF.__debug_frame&quot;</tt><newline>
<p>
<tt>#define RANGES_SECTION &quot;LC_SEGMENT.__DWARF.__debug_ranges&quot;</tt><newline>
<p>
<tt>#define EH_FRAME_SECTION &quot;LC_SEGMENT.__TEXT.__eh_frame&quot;</tt><newline>
<p>
<tt>#define MACINFO_SECTION &quot;debug_macinfo_do_not_use&quot;</tt><newline>
<p>
<tt>#define ABBREV_HASH_SIZE 121</tt><newline>
<p>
<tt>#define REF_HASH_SIZE 1021</tt><newline>
<p>
<tt>#define DW_STRING( attr )</tt><newline>
<p>
<tt>#define DW_UNSND( attr )</tt><newline>
<p>
<tt>#define DW_BLOCK( attr )</tt><newline>
<p>
<tt>#define DW_SND( attr )</tt><newline>
<p>
<tt>#define DW_ADDR( attr )</tt><newline>
<p>
<tt>#define ATTR_ALLOC_CHUNK 4</tt><newline>
<p>
<tt>#define DW_FIELD_ALLOC_CHUNK 4</tt><newline>
<p>
<tt>#define TARGET_ADDRESS_BYTES</tt><newline>
<p>
<tt>#define MAX_SEP_LEN 2</tt><newline>
<p>
<tt>#define LOCDESC_STACKSIZE 64</tt><newline>
<p>
<tt>#define MAX_OPEN_DBS 100</tt><newline>
<p>
<tt>#define SELECT_DIE_STR &quot;SELECT long_canonical FROM debug_info WHERE die_id == ?&quot;</tt><newline>
<p>
<tt>#define FIND_STRING_STR &quot;SELECT string FROM debug_str WHERE string_id == ?&quot;</tt><newline>

<sect1>Typedef _COMP_UNIT_HEADER

<p>
<tt>typedef struct comp_unit_header _COMP_UNIT_HEADER</tt><newline>
<itemize>
<item><tt>struct comp_unit_header</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>unsigned int length;</tt><newline>
<item><tt>unsigned short version;</tt><newline>
<item><tt>unsigned int abbrev_offset;</tt><newline>
<item><tt>unsigned char addr_size;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Typedef _PUBNAMES_HEADER

<p>
<tt>typedef struct pubnames_header _PUBNAMES_HEADER</tt><newline>
<itemize>
<item><tt>struct pubnames_header</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>unsigned int length;</tt><newline>
<item><tt>unsigned char version;</tt><newline>
<item><tt>unsigned int info_offset;</tt><newline>
<item><tt>unsigned int info_size;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Typedef _PUBTYPES_HEADER

<p>
<tt>typedef struct pubtypes_header _PUBTYPES_HEADER</tt><newline>
<itemize>
<item><tt>struct pubtypes_header</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>unsigned int length;</tt><newline>
<item><tt>unsigned char version;</tt><newline>
<item><tt>unsigned int info_offset;</tt><newline>
<item><tt>unsigned int info_size;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Typedef _ARANGES_HEADER

<p>
<tt>typedef struct aranges_header _ARANGES_HEADER</tt><newline>
<itemize>
<item><tt>struct aranges_header</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>unsigned int length;</tt><newline>
<item><tt>unsigned short version;</tt><newline>
<item><tt>unsigned int info_offset;</tt><newline>
<item><tt>unsigned char addr_size;</tt><newline>
<item><tt>unsigned char seg_size;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Typedef _STATEMENT_PROLOGUE

<p>
<tt>typedef struct statement_prologue _STATEMENT_PROLOGUE</tt><newline>
<itemize>
<item><tt>struct statement_prologue</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>unsigned int total_length;</tt><newline>
<item><tt>unsigned short version;</tt><newline>
<item><tt>unsigned int prologue_length;</tt><newline>
<item><tt>unsigned char minimum_instruction_length;</tt><newline>
<item><tt>unsigned char default_is_stmt;</tt><newline>
<item><tt>char line_base;</tt><newline>
<item><tt>unsigned char line_range;</tt><newline>
<item><tt>unsigned char opcode_base;</tt><newline>
<item><tt>unsigned char* standard_opcode_lengths;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dwarf2_per_objfile

<p>
<itemize>
<item><tt>struct dwarf2_per_objfile</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>unsigned int info_size;</tt><newline>
<item><tt>unsigned int abbrev_size;</tt><newline>
<item><tt>unsigned int line_size;</tt><newline>
<item><tt>unsigned int pubnames_size;</tt><newline>
<item><tt>unsigned int pubtypes_size;</tt><newline>
<item><tt>unsigned int aranges_size;</tt><newline>
<item><tt>unsigned int loc_size;</tt><newline>
<item><tt>unsigned int macinfo_size;</tt><newline>
<item><tt>unsigned int str_size;</tt><newline>
<item><tt>unsigned int ranges_size;</tt><newline>
<item><tt>unsigned int frame_size;</tt><newline>
<item><tt>unsigned int eh_frame_size;</tt><newline>
<item><tt>unsigned int inlined_size;</tt><newline>
<item><tt>char* info_buffer;</tt><newline>
<item><tt>char* abbrev_buffer;</tt><newline>
<item><tt>char* line_buffer;</tt><newline>
<item><tt>char* str_buffer;</tt><newline>
<item><tt>char* macinfo_buffer;</tt><newline>
<item><tt>char* ranges_buffer;</tt><newline>
<item><tt>char* loc_buffer;</tt><newline>
<item><tt>char* inlined_buffer;</tt><newline>
<item><tt>bfd_window info_window;</tt><newline>
<item><tt>bfd_window abbrev_window;</tt><newline>
<item><tt>bfd_window line_window;</tt><newline>
<item><tt>bfd_window str_window;</tt><newline>
<item><tt>bfd_window macinfo_window;</tt><newline>
<item><tt>bfd_window ranges_window;</tt><newline>
<item><tt>bfd_window loc_window;</tt><newline>
<item><tt>struct dwarf2_per_cu_data** all_comp_units;</tt><newline>
<item><tt>int n_comp_units;</tt><newline>
<item><tt>struct dwarf2_per_cu_data* read_in_chain;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct rb_repository_data

<p>
<itemize>
<item><tt>struct rb_repository_data</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct type* type_data;</tt><newline>
<item><tt>struct die_info* die_data;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct comp_unit_head

<p>
<itemize>
<item><tt>struct comp_unit_head</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>unsigned long length;</tt><newline>
<item><tt>short version;</tt><newline>
<item><tt>unsigned int abbrev_offset;</tt><newline>
<item><tt>unsigned char addr_size;</tt><newline>
<item><tt>unsigned char signed_addr_p;</tt><newline>
<item><tt>unsigned int offset_size;</tt><newline>
<item><tt>unsigned int initial_length_size;</tt><newline>
<item><tt>unsigned int offset;</tt><newline>
<item><tt>char* cu_head_ptr;</tt><newline>
<item><tt>char* first_die_ptr;</tt><newline>
<item><tt>struct comp_unit_head* next;</tt><newline>
<item><tt>CORE_ADDR base_address_untranslated;</tt><newline>
<item><tt>int base_known;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dwarf2_cu

<p>
<itemize>
<item><tt>struct dwarf2_cu</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct objfile* objfile;</tt><newline>
<item><tt>struct comp_unit_head header;</tt><newline>
<item><tt>struct function_range* first_fn;</tt><newline>
<item><tt>struct function_range* last_fn;</tt><newline>
<item><tt>struct function_range* cached_fn;</tt><newline>
<item><tt>enum language language;</tt><newline>
<item><tt>const struct language_defn* language_defn;</tt><newline>
<item><tt>const char* producer;</tt><newline>
<item><tt>char* comp_dir;</tt><newline>
<item><tt>struct pending** list_in_scope;</tt><newline>
<item><tt>struct type* ftypes[29];</tt><newline>
<item><tt>struct abbrev_info** dwarf2_abbrevs;</tt><newline>
<item><tt>struct obstack abbrev_obstack;</tt><newline>
<item><tt>htab_t partial_dies;</tt><newline>
<item><tt>struct obstack comp_unit_obstack;</tt><newline>
<item><tt>struct dwarf2_per_cu_data* read_in_chain;</tt><newline>
<item><tt>struct dwarf2_per_cu_data* per_cu;</tt><newline>
<item><tt>int last_used;</tt><newline>
<item><tt>struct die_info* die_ref_table[1021];</tt><newline>
<item><tt>struct die_info* dies;</tt><newline>
<item><tt>htab_t dependencies;</tt><newline>
<item><tt>unsigned int mark:1;</tt><newline>
<item><tt>unsigned int has_form_ref_addr:1;</tt><newline>
<item><tt>unsigned int has_namespace_info:1;</tt><newline>
<item><tt>unsigned int cu_is_optimized:1;</tt><newline>
<item><tt>sqlite3* repository;</tt><newline>
<item><tt>char* repository_name;</tt><newline>
<item><tt>struct oso_to_final_addr_map* addr_map;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dwarf2_per_cu_data

<p>
<itemize>
<item><tt>struct dwarf2_per_cu_data</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>unsigned long offset;</tt><newline>
<item><tt>unsigned long length:31;</tt><newline>
<item><tt>unsigned long queued:1;</tt><newline>
<item><tt>struct dwarf2_cu* cu;</tt><newline>
<item><tt>htab_t type_hash;</tt><newline>
<item><tt>struct partial_symtab* psymtab;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct file_entry

<p>
<itemize>
<item><tt>struct file_entry</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>char* name;</tt><newline>
<item><tt>unsigned int dir_index;</tt><newline>
<item><tt>unsigned int mod_time;</tt><newline>
<item><tt>unsigned int length;</tt><newline>
<item><tt>int included_p;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct line_header

<p>
<itemize>
<item><tt>struct line_header</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>unsigned int total_length;</tt><newline>
<item><tt>unsigned short version;</tt><newline>
<item><tt>unsigned int header_length;</tt><newline>
<item><tt>unsigned char minimum_instruction_length;</tt><newline>
<item><tt>unsigned char default_is_stmt;</tt><newline>
<item><tt>int line_base;</tt><newline>
<item><tt>unsigned char line_range;</tt><newline>
<item><tt>unsigned char opcode_base;</tt><newline>
<item><tt>unsigned char* standard_opcode_lengths;</tt><newline>
<item><tt>unsigned int num_include_dirs;</tt><newline>
<item><tt>unsigned int include_dirs_size;</tt><newline>
<item><tt>char** include_dirs;</tt><newline>
<item><tt>unsigned int num_file_names;</tt><newline>
<item><tt>unsigned int file_names_size;</tt><newline>
<item><tt>struct file_entry* file_names;</tt><newline>
<item><tt>char* statement_program_start;</tt><newline>
<item><tt>char* statement_program_end;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct partial_die_info

<p>
<itemize>
<item><tt>struct partial_die_info</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>unsigned int offset;</tt><newline>
<item><tt>enum dwarf_tag tag:16;</tt><newline>
<item><tt>unsigned int language:8;</tt><newline>
<item><tt>unsigned int has_children:1;</tt><newline>
<item><tt>unsigned int is_external:1;</tt><newline>
<item><tt>unsigned int is_declaration:1;</tt><newline>
<item><tt>unsigned int has_type:1;</tt><newline>
<item><tt>unsigned int has_specification:1;</tt><newline>
<item><tt>unsigned int has_stmt_list:1;</tt><newline>
<item><tt>unsigned int has_pc_info:1;</tt><newline>
<item><tt>unsigned int has_repo_specification:1;</tt><newline>
<item><tt>unsigned int has_repository:1;</tt><newline>
<item><tt>unsigned int has_repository_type:1;</tt><newline>
<item><tt>unsigned int scope_set:1;</tt><newline>
<item><tt>const char* name;</tt><newline>
<item><tt>char* dirname;</tt><newline>
<item><tt>const char* scope;</tt><newline>
<item><tt>struct dwarf_block* locdesc;</tt><newline>
<item><tt>CORE_ADDR lowpc;</tt><newline>
<item><tt>CORE_ADDR highpc;</tt><newline>
<item><tt>char* sibling;</tt><newline>
<item><tt>unsigned int spec_offset;</tt><newline>
<item><tt>unsigned int repo_spec_id;</tt><newline>
<item><tt>char* repo_name;</tt><newline>
<item><tt>unsigned int line_offset;</tt><newline>
<item><tt>struct partial_die_info* die_parent;</tt><newline>
<item><tt>struct partial_die_info* die_child;</tt><newline>
<item><tt>struct partial_die_info* die_sibling;</tt><newline>
<item><tt>const char* equiv_name;</tt><newline>
<item><tt>short int isa_value;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct abbrev_info

<p>
<itemize>
<item><tt>struct abbrev_info</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>unsigned int number;</tt><newline>
<item><tt>enum dwarf_tag tag;</tt><newline>
<item><tt>unsigned short has_children;</tt><newline>
<item><tt>unsigned short num_attrs;</tt><newline>
<item><tt>struct attr_abbrev* attrs;</tt><newline>
<item><tt>struct abbrev_info* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct attr_abbrev

<p>
<itemize>
<item><tt>struct attr_abbrev</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>enum dwarf_attribute name;</tt><newline>
<item><tt>enum dwarf_form form;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct die_info

<p>
<itemize>
<item><tt>struct die_info</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>enum dwarf_tag tag;</tt><newline>
<item><tt>unsigned int abbrev;</tt><newline>
<item><tt>unsigned int offset;</tt><newline>
<item><tt>unsigned int repository_id;</tt><newline>
<item><tt>unsigned int num_attrs;</tt><newline>
<item><tt>struct attribute* attrs;</tt><newline>
<item><tt>struct die_info* next_ref;</tt><newline>
<item><tt>struct die_info* child;</tt><newline>
<item><tt>struct die_info* sibling;</tt><newline>
<item><tt>struct die_info* parent;</tt><newline>
<item><tt>struct type* type;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct attribute

<p>
<itemize>
<item><tt>struct attribute</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>enum dwarf_attribute name;</tt><newline>
<item><tt>enum dwarf_form form;</tt><newline>
<item><tt>union</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>char* str;</tt><newline>
<item><tt>struct dwarf_block* blk;</tt><newline>
<item><tt>unsigned long unsnd;</tt><newline>
<item><tt>long int snd;</tt><newline>
<item><tt>CORE_ADDR addr;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>u;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct function_range

<p>
<itemize>
<item><tt>struct function_range</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const char* name;</tt><newline>
<item><tt>CORE_ADDR lowpc;</tt><newline>
<item><tt>CORE_ADDR highpc;</tt><newline>
<item><tt>int seen_line;</tt><newline>
<item><tt>struct function_range* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dwarf_block

<p>
<itemize>
<item><tt>struct dwarf_block</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>unsigned int size;</tt><newline>
<item><tt>char* data;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct nextfield

<p>
<itemize>
<item><tt>struct nextfield</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct nextfield* next;</tt><newline>
<item><tt>int accessibility;</tt><newline>
<item><tt>int virtuality;</tt><newline>
<item><tt>struct field field;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct nextfnfield

<p>
<itemize>
<item><tt>struct nextfnfield</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct nextfnfield* next;</tt><newline>
<item><tt>struct fn_field fnfield;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct fnfieldlist

<p>
<itemize>
<item><tt>struct fnfieldlist</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>char* name;</tt><newline>
<item><tt>int length;</tt><newline>
<item><tt>struct nextfnfield* head;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct field_info

<p>
<itemize>
<item><tt>struct field_info</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct nextfield* fields;</tt><newline>
<item><tt>int nfields;</tt><newline>
<item><tt>int nbaseclasses;</tt><newline>
<item><tt>int non_public_fields;</tt><newline>
<item><tt>struct nextfnfield* fnfields;</tt><newline>
<item><tt>struct fnfieldlist* fnfieldlists;</tt><newline>
<item><tt>int nfnfields;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dwarf2_queue_item

<p>
<itemize>
<item><tt>struct dwarf2_queue_item</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct dwarf2_per_cu_data* per_cu;</tt><newline>
<item><tt>struct dwarf2_queue_item* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type enum db_status

<p>
<itemize>
<item><tt>enum db_status</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>DB_UNKNOWN;</tt><newline>
<item><tt>DB_OPEN;</tt><newline>
<item><tt>DB_ABBREVS_LOADED;</tt><newline>
<item><tt>DB_CLOSED;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct objfile_list_node

<p>
<itemize>
<item><tt>struct objfile_list_node</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct objfile* ofile;</tt><newline>
<item><tt>struct objfile_list_node* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct database_info

<p>
<itemize>
<item><tt>struct database_info</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>char* fullname;</tt><newline>
<item><tt>struct abbrev_info* abbrev_table;</tt><newline>
<item><tt>enum db_status current_status;</tt><newline>
<item><tt>struct rb_tree_node* db_types;</tt><newline>
<item><tt>struct objfile_list_node* num_uses;</tt><newline>
<item><tt>struct dwarf2_cu* dummy_cu;</tt><newline>
<item><tt>struct objfile* dummy_objfile;</tt><newline>
<item><tt>sqlite3* db;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct final_addr_key

<p>
<itemize>
<item><tt>struct final_addr_key</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>CORE_ADDR final_addr;</tt><newline>
<item><tt>struct oso_to_final_addr_map* map;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dwarf2_offset_and_type

<p>
<itemize>
<item><tt>struct dwarf2_offset_and_type</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>unsigned int offset;</tt><newline>
<item><tt>struct type* type;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct attr_pair

<p>
<itemize>
<item><tt>struct attr_pair</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int attribute;</tt><newline>
<item><tt>int form;</tt><newline>
<item><tt>struct attr_pair* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable psym_equivalences

<p>
<tt>int psym_equivalences</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bcache.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>charset.c
<item>cli-out.c
<item>coff-pe-read.c
<item>coffread.c
<item>complaints.c
<item>completer.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>demangle.c
<item>dictionary.c
<item>disasm.c
<item>doublest.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>environ.c
<item>eval.c
<item>event-loop.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>interps.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod-cisco.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macrocmd.c
<item>macroexp.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>observer.c
<item>osabi.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>reggroups.c
<item>remote-fileio.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>ser-base.c
<item>ser-unix.c
<item>serial.c
<item>solib-null.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>ui-file.c
<item>ui-out.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>iter_name_first_hashed()  :  dictionary.c
<item>iter_name_next_hashed()  :  dictionary.c
<item>iter_name_next_linear()  :  dictionary.c
<item>lookup_equiv_partial_symbol()  :  symtab.c
<item>read_partial_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Variable dwarf2_allow_inlined_stepping

<p>
<tt>int dwarf2_allow_inlined_stepping</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-namespace.c
<item>cp-support.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>f-exp.c
<item>frame-unwind.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>linespec.c
<item>m2-exp.c
<item>macrotab.c
<item>maint.c
<item>mdebugread.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>printcmd.c
<item>remote.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>tramp-frame.c
<item>valops.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_dwarf2_read()  :  dwarf2read.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>process_die()  :  dwarf2read.c
<item>rest_of_line_contains_inlined_subroutine()  :  inlining.c
<item>step_1()  :  infcmd.c
<item>update_tmp_frame_stack()  :  inlining.c
<item>verify_stack()  :  inlining.c
</itemize>
</descrip>

<sect1>Global Variable dwarf2_debug_inlined_stepping

<p>
<tt>int dwarf2_debug_inlined_stepping</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-namespace.c
<item>cp-support.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>f-exp.c
<item>frame-unwind.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>linespec.c
<item>m2-exp.c
<item>macrotab.c
<item>maint.c
<item>mdebugread.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>printcmd.c
<item>remote.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>tramp-frame.c
<item>valops.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_dwarf2_read()  :  dwarf2read.c
<item>check_inlined_function_calls()  :  dwarf2read.c
<item>rb_tree_remove_node()  :  dwarf2read.c
<item>record_line()  :  buildsym.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Variable dwarf_frame_section

<p>
<tt>asection* dwarf_frame_section</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_build_frame_info()  :  dwarf2-frame.c
<item>dwarf2_has_info_1()  :  dwarf2read.c
<item>dwarf2_locate_sections()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Variable dwarf_eh_frame_section

<p>
<tt>asection* dwarf_eh_frame_section</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_build_frame_info()  :  dwarf2-frame.c
<item>dwarf2_has_info_1()  :  dwarf2read.c
<item>dwarf2_locate_sections()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Variable dwarf2_inform_debugging_optimized_code

<p>
<tt>int dwarf2_inform_debugging_optimized_code</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>dwarf2read.c
<item>event-top.c
<item>frame.c
<item>infcmd.c
<item>infrun.c
<item>interps.c
<item>main.c
<item>objc-exp.c
<item>p-exp.c
<item>source.c
<item>top.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_dwarf2_read()  :  dwarf2read.c
<item>adjust_prompts_for_optimized_code()  :  event-top.c
<item>normal_stop()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Variable inlined_subroutine_symbols

<p>
<tt>struct pending* inlined_subroutine_symbols</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>fix_inlined_subroutine_symbols()  :  dwarf2read.c
<item>process_full_comp_unit()  :  dwarf2read.c
<item>read_inlined_subroutine_scope()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Variable repositories

<p>
<tt>struct database_info* repositories</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>close_dwarf_repositories()  :  dwarf2read.c
<item>find_open_repository()  :  dwarf2read.c
<item>initialize_repositories()  :  dwarf2read.c
<item>open_dwarf_repository()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Variable num_open_dbs

<p>
<tt>int num_open_dbs</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>close_dwarf_repositories()  :  dwarf2read.c
<item>find_open_repository()  :  dwarf2read.c
<item>open_dwarf_repository()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Variable db_stmt1

<p>
<tt>sqlite3_stmt* db_stmt1</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>db_lookup_type()  :  dwarf2read.c
<item>finalize_stmts()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Variable db_stmt2

<p>
<tt>sqlite3_stmt* db_stmt2</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>finalize_stmts()  :  dwarf2read.c
<item>get_repository_name()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>dwarf2_objfile_data_key</bf><newline>
<tt>static const struct objfile_data* dwarf2_objfile_data_key</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_dwarf2_read()
<item>dwarf2_has_info_1()
<item>dwarf2_kext_psymtab_to_symtab()
<item>dwarf2_psymtab_to_symtab()
</itemize>
</descrip>
<p>
<bf>dwarf2_per_objfile</bf><newline>
<tt>static struct dwarf2_per_objfile* dwarf2_per_objfile</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>age_cached_comp_units()
<item>create_all_comp_units()
<item>dwarf2_build_psymtabs_hard()
<item>dwarf2_copy_dwarf_from_file()
<item>dwarf2_debug_map_psymtab_to_symtab()
<item>dwarf2_find_containing_comp_unit()
<item>dwarf2_get_pc_bounds()
<item>dwarf2_has_info_1()
<item>dwarf2_kext_psymtab_to_symtab()
<item>dwarf2_locate_sections()
<item>dwarf2_psymtab_to_symtab()
<item>dwarf2_read_abbrevs()
<item>dwarf2_symbol_mark_computed()
<item>dwarf_decode_line_header()
<item>dwarf_decode_macros()
<item>find_debug_info_for_pst()
<item>find_partial_die()
<item>free_cached_comp_units()
<item>free_one_cached_comp_unit()
<item>load_comp_unit()
<item>load_full_comp_unit()
<item>partial_read_comp_unit_head()
<item>peek_die_abbrev()
<item>process_queue()
<item>read_full_die()
<item>read_indirect_string()
<item>read_partial_die()
<item>scan_partial_inlined_function_symbols()
<item>skip_one_die()
</itemize>
</descrip>
<p>
<bf>dwarf_info_section</bf><newline>
<tt>static asection* dwarf_info_section</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_copy_dwarf_from_file()
<item>dwarf2_has_info_1()
<item>dwarf2_locate_sections()
</itemize>
</descrip>
<p>
<bf>dwarf_abbrev_section</bf><newline>
<tt>static asection* dwarf_abbrev_section</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_copy_dwarf_from_file()
<item>dwarf2_has_info_1()
<item>dwarf2_locate_sections()
</itemize>
</descrip>
<p>
<bf>dwarf_line_section</bf><newline>
<tt>static asection* dwarf_line_section</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_copy_dwarf_from_file()
<item>dwarf2_has_info_1()
<item>dwarf2_locate_sections()
</itemize>
</descrip>
<p>
<bf>dwarf_pubnames_section</bf><newline>
<tt>static asection* dwarf_pubnames_section</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_locate_sections()
</itemize>
</descrip>
<p>
<bf>dwarf_pubtypes_section</bf><newline>
<tt>static asection* dwarf_pubtypes_section</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_locate_sections()
</itemize>
</descrip>
<p>
<bf>dwarf_inlined_section</bf><newline>
<tt>static asection* dwarf_inlined_section</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_copy_dwarf_from_file()
<item>dwarf2_has_info_1()
<item>dwarf2_locate_sections()
</itemize>
</descrip>
<p>
<bf>dwarf_aranges_section</bf><newline>
<tt>static asection* dwarf_aranges_section</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_locate_sections()
</itemize>
</descrip>
<p>
<bf>dwarf_loc_section</bf><newline>
<tt>static asection* dwarf_loc_section</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_copy_dwarf_from_file()
<item>dwarf2_has_info_1()
<item>dwarf2_locate_sections()
</itemize>
</descrip>
<p>
<bf>dwarf_macinfo_section</bf><newline>
<tt>static asection* dwarf_macinfo_section</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_copy_dwarf_from_file()
<item>dwarf2_has_info_1()
<item>dwarf2_locate_sections()
</itemize>
</descrip>
<p>
<bf>dwarf_str_section</bf><newline>
<tt>static asection* dwarf_str_section</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_copy_dwarf_from_file()
<item>dwarf2_has_info_1()
<item>dwarf2_locate_sections()
</itemize>
</descrip>
<p>
<bf>dwarf_ranges_section</bf><newline>
<tt>static asection* dwarf_ranges_section</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_copy_dwarf_from_file()
<item>dwarf2_has_info_1()
<item>dwarf2_locate_sections()
</itemize>
</descrip>
<p>
<bf>decode_locdesc_common</bf><newline>
<tt>static char* decode_locdesc_common</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>decode_locdesc()
<item>read_common_block()
</itemize>
</descrip>
<p>
<bf>isreg</bf><newline>
<tt>static int isreg</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>decode_locdesc()
</itemize>
</descrip>
<p>
<bf>bits_per_byte</bf><newline>
<tt>static int bits_per_byte</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_add_field()
</itemize>
</descrip>
<p>
<bf>dwarf2_queue</bf><newline>
<tt>static struct dwarf2_queue_item* dwarf2_queue</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_release_queue()
<item>process_queue()
<item>queue_comp_unit()
</itemize>
</descrip>
<p>
<bf>dwarf2_queue_tail</bf><newline>
<tt>static struct dwarf2_queue_item* dwarf2_queue_tail</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_release_queue()
<item>process_queue()
<item>queue_comp_unit()
</itemize>
</descrip>
<p>
<bf>dwarf2_max_cache_age</bf><newline>
<tt>static int dwarf2_max_cache_age</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_dwarf2_read()
<item>age_cached_comp_units()
</itemize>
</descrip>
<p>
<bf>debug_debugmap</bf><newline>
<tt>static int debug_debugmap</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_dwarf2_read()
<item>convert_oso_map_to_final_map()
<item>create_kext_addr_map()
<item>dwarf2_record_line()
<item>translate_common_symbol_debug_map_address()
<item>translate_debug_map_address()
<item>translate_debug_map_address_with_tuple()
</itemize>
</descrip>
<p>
<bf>byte_swap_p</bf><newline>
<tt>static int byte_swap_p</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>db_read_2_bytes()
<item>db_read_4_bytes()
<item>db_read_8_bytes()
<item>dwarf2_build_psymtabs_hard()
</itemize>
</descrip>
<p>
<bf>set_dwarf2_cmdlist</bf><newline>
<tt>static struct cmd_list_element* set_dwarf2_cmdlist</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_dwarf2_read()
<item>set_dwarf2_cmd()
</itemize>
</descrip>
<p>
<bf>show_dwarf2_cmdlist</bf><newline>
<tt>static struct cmd_list_element* show_dwarf2_cmdlist</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_dwarf2_read()
<item>show_dwarf2_cmd()
</itemize>
</descrip>

<sect1>Global Function _initialize_dwarf2_read()

<p><tt>void _initialize_dwarf2_read ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>register_objfile_data()  :  objfiles.c
<item>add_prefix_cmd(), add_setshow_boolean_cmd(), add_setshow_zinteger_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>set_dwarf2_cmd()  :  dwarf2read.c
<item>show_debug_debugmap()  :  dwarf2read.c
<item>show_dwarf2_cmd()  :  dwarf2read.c
<item>show_dwarf2_max_cache_age()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_debugmap  :  dwarf2read.c
<item>dwarf2_allow_inlined_stepping  :  dwarf2read.c
<item>dwarf2_debug_inlined_stepping  :  dwarf2read.c
<item>dwarf2_inform_debugging_optimized_code  :  dwarf2read.c
<item>dwarf2_max_cache_age  :  dwarf2read.c
<item>dwarf2_objfile_data_key  :  dwarf2read.c
<item>maintenance_set_cmdlist  :  maint.c
<item>maintenance_show_cmdlist  :  maint.c
<item>set_dwarf2_cmdlist  :  dwarf2read.c
<item>show_dwarf2_cmdlist  :  dwarf2read.c
<item>setdebuglist, setlist, showdebuglist, showlist
</itemize>
</descrip>

<sect1>Global Function close_dwarf_repositories()

<p><tt>int close_dwarf_repositories ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>db-access-functions.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>decrement_use_count()  :  dwarf2read.c
<item>finalize_stmts()  :  dwarf2read.c
<item>sqlite3_close()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_objfile_internal()  :  objfiles.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>obstack_free()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>num_open_dbs  :  dwarf2read.c
<item>repositories  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function dwarf2_build_psymtabs()

<p><tt>void dwarf2_build_psymtabs ( struct objfile* objfile, int mainline )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
<item>dwarf2_copy_dwarf_from_file()  :  dwarf2read.c
<item>init_psymbol_list()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symfile_read()  :  coffread.c
<item>elf_symfile_read()  :  elfread.c
</itemize>
</descrip>

<sect1>Global Function dwarf2_debug_map_psymtab_to_symtab()

<p><tt>void dwarf2_debug_map_psymtab_to_symtab ( struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_containing_archive_cache()  :  dbxread.c
<item>close_bfd_or_archive()  :  dbxread.c
<item>convert_oso_map_to_final_map()  :  dwarf2read.c
<item>dwarf2_copy_dwarf_from_file()  :  dwarf2read.c
<item>dwarf2_debug_map_psymtab_to_symtab()  :  dwarf2read.c
<item>dwarf2_has_info_1()  :  dwarf2read.c
<item>fputs_filtered()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>load_full_comp_unit()  :  dwarf2read.c
<item>open_bfd_from_oso()  :  dbxread.c
<item>printf_filtered()  :  utils.c
<item>process_full_comp_unit()  :  dwarf2read.c
<item>read_initial_length()  :  dwarf2read.c
<item>read_oso_nlists()  :  dbxread.c
<item>warning()  :  utils.c
<item>wrap_here()  :  utils.c
<item>_obstack_newchunk(), bfd_check_format()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_debug_map_psymtab_to_symtab()  :  dwarf2read.c
<item>dwarf2_kext_psymtab_to_symtab()  :  dwarf2read.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
<item>gdb_stdout  :  main.c
<item>info_verbose  :  top.c
</itemize>
</descrip>

<sect1>Global Function dwarf2_has_info()

<p><tt>int dwarf2_has_info ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_has_info_1()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symfile_read()  :  coffread.c
<item>elf_symfile_read()  :  elfread.c
</itemize>
</descrip>

<sect1>Global Function dwarf2_kext_psymtab_to_symtab()

<p><tt>void dwarf2_kext_psymtab_to_symtab ( struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_kext_addr_map()  :  dwarf2read.c
<item>dwarf2_copy_dwarf_from_file()  :  dwarf2read.c
<item>dwarf2_debug_map_psymtab_to_symtab()  :  dwarf2read.c
<item>dwarf2_has_info_1()  :  dwarf2read.c
<item>error()  :  utils.c
<item>find_debug_info_for_pst()  :  dwarf2read.c
<item>fputs_filtered()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>get_objfile_data()  :  objfiles.c
<item>load_full_comp_unit()  :  dwarf2read.c
<item>printf_filtered()  :  utils.c
<item>process_full_comp_unit()  :  dwarf2read.c
<item>read_initial_length()  :  dwarf2read.c
<item>read_oso_nlists()  :  dbxread.c
<item>symfile_bfd_open()  :  symfile.c
<item>wrap_here()  :  utils.c
<item>_obstack_newchunk(), bfd_close()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>replace_psymbols_with_correct_psymbols()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_objfile_data_key  :  dwarf2read.c
<item>dwarf2_per_objfile  :  dwarf2read.c
<item>gdb_stdout  :  main.c
<item>info_verbose  :  top.c
</itemize>
</descrip>

<sect1>Global Function dwarf2_read_section()

<p><tt>char* dwarf2_read_section ( struct objfile* objfile, bfd* abfd, asection* sectp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>symfile_relocate_debug_section()  :  symfile.c
<item>_obstack_newchunk(), bfd_bread(), bfd_seek()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_frame_info()  :  dwarf2-frame.c
<item>dwarf2_copy_dwarf_from_file()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function dwarf2_scan_inlined_section_for_psymbols()

<p><tt>void dwarf2_scan_inlined_section_for_psymbols ( struct partial_symtab* pst, struct objfile* objfile, enum language psymtab_language )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_psymbol_to_list()  :  symfile.c
<item>close_bfd_or_archive()  :  dbxread.c
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>open_bfd_from_oso()  :  dbxread.c
<item>perror_with_name()  :  utils.c
<item>read_1_byte()  :  dwarf2read.c
<item>read_2_bytes()  :  dwarf2read.c
<item>read_address()  :  dwarf2read.c
<item>read_initial_length()  :  dwarf2read.c
<item>read_offset()  :  dwarf2read.c
<item>read_unsigned_leb128()  :  dwarf2read.c
<item>start_timer()  :  maint.c
<item>warning()  :  utils.c
<item>bfd_check_format(), bfd_close(), bfd_free_window(), bfd_get_section_contents_in_window_with_mode(), bfd_init_window(), bfd_sections_find_if(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>find_debug_inlined_section()  :  dwarf2read.c
<item>find_debug_str_section()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>maint_use_timers  :  maint.c
</itemize>
</descrip>

<sect1>Global Function dwarf2_scan_pubtype_for_psymbols()

<p><tt>void dwarf2_scan_pubtype_for_psymbols ( struct partial_symtab* pst, struct objfile* objfile, enum language psymtab_language )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_psymbol_to_list()  :  symfile.c
<item>close_bfd_or_archive()  :  dbxread.c
<item>do_cleanups()  :  utils.c
<item>open_bfd_from_oso()  :  dbxread.c
<item>perror_with_name()  :  utils.c
<item>read_2_bytes()  :  dwarf2read.c
<item>read_initial_length()  :  dwarf2read.c
<item>read_offset()  :  dwarf2read.c
<item>read_string()  :  dwarf2read.c
<item>start_timer()  :  maint.c
<item>warning()  :  utils.c
<item>bfd_check_format(), bfd_close(), bfd_free_window(), bfd_get_section_contents_in_window_with_mode(), bfd_init_window(), bfd_sections_find_if()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>find_pubtypes()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>maint_use_timers  :  maint.c
</itemize>
</descrip>

<sect1>Global Function find_debug_info_for_pst()

<p><tt>char* find_debug_info_for_pst ( struct partial_symtab* pst, int match_amount )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>dwarf2_read_abbrevs()  :  dwarf2read.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>partial_read_comp_unit_head()  :  dwarf2read.c
<item>peek_die_abbrev()  :  dwarf2read.c
<item>read_partial_die()  :  dwarf2read.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_begin(), strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_kext_psymtab_to_symtab()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dwarf2_free_abbrev_table()  :  dwarf2read.c
<item>free_cached_comp_units()  :  dwarf2read.c
<item>free_stack_comp_unit()  :  dwarf2read.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
<item>file_symbols  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function rb_tree_find_node()

<p><tt>struct rb_tree_node* rb_tree_find_node ( struct rb_tree_node* root, long long key, int secondary_key )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>rb_tree_find_node()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_class_to_cache()  :  objc-lang.c
<item>class_valid_p()  :  objc-lang.c
<item>lookup_real_class_in_cache()  :  objc-lang.c
<item>lookup_repository_type()  :  dwarf2read.c
<item>rb_tree_find_node()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function rb_tree_find_node_all_keys()

<p><tt>struct rb_tree_node* rb_tree_find_node_all_keys ( struct rb_tree_node* root, long long key, int secondary_key, long long third_key )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>rb_tree_find_node_all_keys()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>lookup_classname_in_cache()  :  objc-lang.c
<item>lookup_implementation_in_cache()  :  objc-lang.c
<item>rb_tree_find_node_all_keys()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function rb_tree_insert()

<p><tt>void rb_tree_insert ( struct rb_tree_node** root, struct rb_tree_node* tree, struct rb_tree_node* new_node )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>left_rotate()  :  dwarf2read.c
<item>plain_tree_insert()  :  dwarf2read.c
<item>right_rotate()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_class_to_cache()  :  objc-lang.c
<item>add_classname_to_cache()  :  objc-lang.c
<item>add_implementation_to_cache()  :  objc-lang.c
<item>dwarf2_add_to_list_of_inlined_calls()  :  dwarf2read.c
<item>inlined_function_add_function_names()  :  inlining.c
<item>lookup_repository_type()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function translate_debug_map_address()

<p><tt>int translate_debug_map_address ( struct oso_to_final_addr_map* map, CORE_ADDR oso_addr, CORE_ADDR* addr, int highpc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>paddr_nz()  :  utils.c
<item>translate_debug_map_address_with_tuple()  :  dwarf2read.c
<item>bsearch()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_locdesc()  :  dwarf2read.c
<item>dwarf2_const_value()  :  dwarf2read.c
<item>dwarf2_get_pc_bounds()  :  dwarf2read.c
<item>execute_stack_op()  :  dwarf2expr.c
<item>find_location_expression()  :  dwarf2loc.c
<item>loclist_describe_location()  :  dwarf2loc.c
<item>new_symbol()  :  dwarf2read.c
<item>read_partial_die()  :  dwarf2read.c
<item>scan_partial_inlined_function_symbols()  :  dwarf2read.c
<item>var_decode_location()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>compare_translation_tuples_highpc()  :  dwarf2read.c
<item>compare_translation_tuples_nothighpc()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_debugmap  :  dwarf2read.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function add_equiv_psym()

<p><tt>static void add_equiv_psym ( struct equiv_psym_list** equiv_psyms, const char* name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>scan_partial_symbols()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function add_file_name()

<p><tt>static void add_file_name ( struct line_header* lh, char* name, unsigned int dir_index, unsigned int mod_time, unsigned int length )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf_decode_line_header()  :  dwarf2read.c
<item>dwarf_decode_lines()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function add_include_dir()

<p><tt>static void add_include_dir ( struct line_header* lh, char* include_dir )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf_decode_line_header()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function add_partial_enumeration()

<p><tt>static void add_partial_enumeration ( struct partial_die_info* enum_pdi, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_partial_symbol()  :  dwarf2read.c
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>scan_partial_symbols()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function add_partial_namespace()

<p><tt>static void add_partial_namespace ( struct partial_die_info* pdi, CORE_ADDR* lowpc, CORE_ADDR* highpc, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_partial_symbol()  :  dwarf2read.c
<item>scan_partial_symbols()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>scan_partial_symbols()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function add_partial_symbol()

<p><tt>static void add_partial_symbol ( struct partial_die_info* pdi, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_psymbol_to_list()  :  symfile.c
<item>cp_check_possible_namespace_symbols()  :  cp-namespace.c
<item>decode_locdesc()  :  dwarf2read.c
<item>objfile_add_special_psym()  :  objfiles.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>partial_die_full_name()  :  dwarf2read.c
<item>pdi_needs_namespace()  :  dwarf2read.c
<item>prim_record_minimal_symbol()  :  minsyms.c
<item>xfree()  :  utils.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_partial_enumeration()  :  dwarf2read.c
<item>add_partial_namespace()  :  dwarf2read.c
<item>scan_partial_symbols()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function add_to_cu_func_list()

<p><tt>static void add_to_cu_func_list ( const char* name, CORE_ADDR lowpc, CORE_ADDR highpc, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_func_scope()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function age_cached_comp_units()

<p><tt>static void age_cached_comp_units ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_clear_marks()  :  dwarf2read.c
<item>dwarf2_mark()  :  dwarf2read.c
<item>free_one_comp_unit()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_stack_comp_unit()  :  dwarf2read.c
<item>psymtab_to_symtab_1()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_max_cache_age  :  dwarf2read.c
<item>dwarf2_per_objfile  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function attr_form_is_block()

<p><tt>static int attr_form_is_block ( struct attribute* attr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_add_member_fn()  :  dwarf2read.c
<item>dwarf2_symbol_mark_computed()  :  dwarf2read.c
<item>read_common_block()  :  dwarf2read.c
<item>read_partial_die()  :  dwarf2read.c
<item>var_decode_location()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function build_dummy_cu()

<p><tt>static struct dwarf2_cu* build_dummy_cu ( struct objfile* old_objfile, struct dwarf2_cu* old_cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin___strcpy_chk(), __builtin_object_size(), __inline_memset_chk(), __inline_strcpy_chk(), _obstack_begin(), strlen(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>open_dwarf_repository()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function build_dummy_objfile()

<p><tt>static struct objfile* build_dummy_objfile ( struct objfile* old_objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_objfile_registry_num_registrations()  :  objfiles.c
<item>xcalloc()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_begin()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>open_dwarf_repository()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function check_cu_functions()

<p><tt>static CORE_ADDR check_cu_functions ( CORE_ADDR address, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_record_line()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function check_inlined_function_calls()

<p><tt>static void check_inlined_function_calls ( struct subfile* subfile, int file_index, int line, CORE_ADDR address, struct line_header* lh, struct dwarf2_cu* cu, char* comp_dir )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_start_subfile()  :  dwarf2read.c
<item>fprintf_unfiltered()  :  utils.c
<item>inlined_function_add_function_names()  :  inlining.c
<item>internal_error()  :  utils.c
<item>rb_tree_find_and_remove_node()  :  dwarf2read.c
<item>record_line()  :  buildsym.c
<item>lbasename(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_record_line()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_debug_inlined_stepping  :  dwarf2read.c
<item>gdb_stdout  :  main.c
<item>subfiles  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function compare_map_entries_final_addr_index()

<p><tt>static int compare_map_entries_final_addr_index ( void* thunk, const void* a, const void* b )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>convert_oso_map_to_final_map()  :  dwarf2read.c
<item>create_kext_addr_map()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function compare_map_entries_name()

<p><tt>static int compare_map_entries_name ( const void* a, const void* b )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>convert_oso_map_to_final_map()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function compare_map_entries_oso_addr()

<p><tt>static int compare_map_entries_oso_addr ( const void* a, const void* b )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>convert_oso_map_to_final_map()  :  dwarf2read.c
<item>create_kext_addr_map()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function compare_translation_final_addr()

<p><tt>static int compare_translation_final_addr ( const void* key, const void* arrmem )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>warning()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>translate_debug_map_address_with_tuple()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function compare_translation_tuples_highpc()

<p><tt>static int compare_translation_tuples_highpc ( const void* key, const void* arrmem )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>translate_debug_map_address()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function compare_translation_tuples_inclusive()

<p><tt>static int compare_translation_tuples_inclusive ( const void* key, const void* arrmem )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_record_line()  :  dwarf2read.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_record_line()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function compare_translation_tuples_nothighpc()

<p><tt>static int compare_translation_tuples_nothighpc ( const void* key, const void* arrmem )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>translate_debug_map_address()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function consume_improper_spaces()

<p><tt>static const char* consume_improper_spaces ( const char* p, const char* body )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_macro_definition()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function convert_oso_map_to_final_map()

<p><tt>static struct oso_to_final_addr_map* convert_oso_map_to_final_map ( struct nlist_rec* nlists, int oso_nlists_count, char** oso_common_symnames, int oso_common_symnames_count, struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_minimal_symbol_by_pc_section_from_objfile()  :  minsyms.c
<item>lookup_partial_symbol()  :  symtab.c
<item>objfile_data_section_offset()  :  objfiles.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>paddr()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>cplus_demangle(), qsort(), qsort_r()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_debug_map_psymtab_to_symtab()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>compare_map_entries_final_addr_index()  :  dwarf2read.c
<item>compare_map_entries_name()  :  dwarf2read.c
<item>compare_map_entries_oso_addr()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_debugmap  :  dwarf2read.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function copy_string()

<p><tt>static char* copy_string ( const char* buf, int len )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_macro_definition()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function create_all_comp_units()

<p><tt>static void create_all_comp_units ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>read_initial_length()  :  dwarf2read.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function create_kext_addr_map()

<p><tt>static struct oso_to_final_addr_map* create_kext_addr_map ( struct nlist_rec* nlists, int oso_nlists_count, char** oso_common_symnames, int oso_common_symnames_count, struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_minimal_symbol_by_pc_section_from_objfile()  :  minsyms.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>paddr_nz()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>qsort(), qsort_r(), strcmp(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_kext_psymtab_to_symtab()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>compare_map_entries_final_addr_index()  :  dwarf2read.c
<item>compare_map_entries_oso_addr()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_debugmap  :  dwarf2read.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function db_error()

<p><tt>static void db_error ( const char* function_name, const char* db_action_description, sqlite3* db )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>finalize_stmts()  :  dwarf2read.c
<item>internal_error()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), sqlite3_close(), sqlite3_errmsg(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>db_lookup_type()  :  dwarf2read.c
<item>finalize_stmts()  :  dwarf2read.c
<item>get_repository_name()  :  dwarf2read.c
<item>open_dwarf_repository()  :  dwarf2read.c
<item>read_in_db_abbrev_table()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function db_lookup_type()

<p><tt>static struct die_info* db_lookup_type ( int type_id, sqlite3* db, struct abbrev_info* abbrev_table )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>db_error()  :  dwarf2read.c
<item>fill_in_die_info()  :  dwarf2read.c
<item>get_uleb128()  :  dwarf2read.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), sqlite3_bind_int(), sqlite3_column_blob(), sqlite3_column_bytes(), sqlite3_prepare_v2(), sqlite3_step(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>fill_in_die_info()  :  dwarf2read.c
<item>lookup_repository_type()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>db_stmt1  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function db_read_1_byte()

<p><tt>static uint8_t db_read_1_byte ( uint8_t* info_ptr )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>db_read_attribute_value()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function db_read_2_bytes()

<p><tt>static uint16_t db_read_2_bytes ( uint8_t* info_ptr )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>db_read_attribute_value()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>byte_swap_p  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function db_read_4_bytes()

<p><tt>static uint32_t db_read_4_bytes ( uint8_t* info_ptr )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>db_read_attribute_value()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>byte_swap_p  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function db_read_8_bytes()

<p><tt>static uint64_t db_read_8_bytes ( uint8_t* info_ptr )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>db_read_attribute_value()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>byte_swap_p  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function db_read_attribute_value()

<p><tt>static uint8_t* db_read_attribute_value ( struct attribute* attr, unsigned form, uint8_t** info_ptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>db_read_1_byte()  :  dwarf2read.c
<item>db_read_2_bytes()  :  dwarf2read.c
<item>db_read_4_bytes()  :  dwarf2read.c
<item>db_read_8_bytes()  :  dwarf2read.c
<item>db_read_attribute_value()  :  dwarf2read.c
<item>db_read_n_bytes()  :  dwarf2read.c
<item>db_read_signed_leb128()  :  dwarf2read.c
<item>db_read_unsigned_leb128()  :  dwarf2read.c
<item>dwarf_form_name()  :  dwarf2read.c
<item>error()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>db_read_attribute_value()  :  dwarf2read.c
<item>fill_in_die_info()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function db_read_n_bytes()

<p><tt>static uint8_t* db_read_n_bytes ( uint8_t* info_ptr, unsigned int num_bytes )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>db_read_attribute_value()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function db_read_signed_leb128()

<p><tt>static int32_t db_read_signed_leb128 ( uint8_t* info_ptr, unsigned int* bytes_read )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>db_read_attribute_value()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function db_read_unsigned_leb128()

<p><tt>static uint32_t db_read_unsigned_leb128 ( uint8_t* info_ptr, unsigned int* bytes_read )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>db_read_attribute_value()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function decode_locdesc()

<p><tt>static CORE_ADDR decode_locdesc ( struct dwarf_block* blk, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>dwarf2_complex_location_expr_complaint()  :  dwarf2read.c
<item>dwarf_stack_op_name()  :  dwarf2read.c
<item>internal_error()  :  utils.c
<item>read_1_byte()  :  dwarf2read.c
<item>read_1_signed_byte()  :  dwarf2read.c
<item>read_2_bytes()  :  dwarf2read.c
<item>read_2_signed_bytes()  :  dwarf2read.c
<item>read_4_bytes()  :  dwarf2read.c
<item>read_4_signed_bytes()  :  dwarf2read.c
<item>read_address()  :  dwarf2read.c
<item>read_signed_leb128()  :  dwarf2read.c
<item>read_unsigned_leb128()  :  dwarf2read.c
<item>translate_common_symbol_debug_map_address()  :  dwarf2read.c
<item>translate_debug_map_address()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_partial_symbol()  :  dwarf2read.c
<item>dwarf2_add_field()  :  dwarf2read.c
<item>dwarf2_add_member_fn()  :  dwarf2read.c
<item>read_common_block()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>decode_locdesc_common  :  dwarf2read.c
<item>isreg  :  dwarf2read.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function decrement_use_count()

<p><tt>static void decrement_use_count ( struct database_info* repository, struct objfile* ofile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>close_dwarf_repositories()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function determine_class_name()

<p><tt>static char* determine_class_name ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>determine_prefix()  :  dwarf2read.c
<item>die_specification()  :  dwarf2read.c
<item>do_cleanups()  :  utils.c
<item>dwarf2_linkage_name()  :  dwarf2read.c
<item>dwarf2_name()  :  dwarf2read.c
<item>language_class_name_from_physname()  :  language.c
<item>make_cleanup()  :  utils.c
<item>sibling_die()  :  dwarf2read.c
<item>typename_concat()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>determine_prefix()  :  dwarf2read.c
<item>read_structure_type()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>processing_current_prefix  :  cp-namespace.c
<item>processing_has_namespace_info  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function determine_prefix()

<p><tt>static char* determine_prefix ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>determine_class_name()  :  dwarf2read.c
<item>determine_prefix()  :  dwarf2read.c
<item>namespace_name()  :  dwarf2read.c
<item>typename_concat()  :  dwarf2read.c
<item>xfree()  :  utils.c
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>determine_class_name()  :  dwarf2read.c
<item>determine_prefix()  :  dwarf2read.c
<item>read_func_scope()  :  dwarf2read.c
<item>read_type_die()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>processing_current_prefix  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function die_containing_type()

<p><tt>static struct type* die_containing_type ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dump_die()  :  dwarf2read.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>error()  :  utils.c
<item>follow_die_ref()  :  dwarf2read.c
<item>tag_type_to_type()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_add_member_fn()  :  dwarf2read.c
<item>read_structure_type()  :  dwarf2read.c
<item>read_tag_ptr_to_member_type()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function die_is_declaration()

<p><tt>static int die_is_declaration ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_attr()  :  dwarf2read.c
<item>dwarf2_flag_true_p()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_add_field()  :  dwarf2read.c
<item>process_structure_scope()  :  dwarf2read.c
<item>read_structure_type()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function die_specification()

<p><tt>static struct die_info* die_specification ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_attr()  :  dwarf2read.c
<item>follow_die_ref()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>determine_class_name()  :  dwarf2read.c
<item>read_func_scope()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function die_type()

<p><tt>static struct type* die_type ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dump_die()  :  dwarf2read.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>dwarf2_fundamental_type()  :  dwarf2read.c
<item>error()  :  utils.c
<item>follow_db_ref()  :  dwarf2read.c
<item>follow_die_ref()  :  dwarf2read.c
<item>tag_type_to_type()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_add_field()  :  dwarf2read.c
<item>new_symbol()  :  dwarf2read.c
<item>read_array_type()  :  dwarf2read.c
<item>read_set_type()  :  dwarf2read.c
<item>read_subrange_type()  :  dwarf2read.c
<item>read_subroutine_type()  :  dwarf2read.c
<item>read_tag_const_type()  :  dwarf2read.c
<item>read_tag_pointer_type()  :  dwarf2read.c
<item>read_tag_ptr_to_member_type()  :  dwarf2read.c
<item>read_tag_reference_type()  :  dwarf2read.c
<item>read_tag_restrict_type()  :  dwarf2read.c
<item>read_tag_volatile_type()  :  dwarf2read.c
<item>read_typedef()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dummy_obstack_deallocate()

<p><tt>static void dummy_obstack_deallocate ( void* object, void* data )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_add_dependence()  :  dwarf2read.c
<item>load_partial_dies()  :  dwarf2read.c
<item>set_die_type()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dump_die()

<p><tt>static void dump_die ( struct die_info* die )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_print_address_numeric()  :  printcmd.c
<item>dwarf_attr_name()  :  dwarf2read.c
<item>dwarf_bool_name()  :  dwarf2read.c
<item>dwarf_form_name()  :  dwarf2read.c
<item>dwarf_tag_name()  :  dwarf2read.c
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>die_containing_type()  :  dwarf2read.c
<item>die_type()  :  dwarf2read.c
<item>dump_die_list()  :  dwarf2read.c
<item>tag_type_to_type()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stderr  :  main.c
</itemize>
</descrip>

<sect1>Local Function dump_die_list()

<p><tt>static void dump_die_list ( struct die_info* die )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dump_die()  :  dwarf2read.c
<item>dump_die_list()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dump_die_list()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_add_dependence()

<p><tt>static void dwarf2_add_dependence ( struct dwarf2_cu* cu, struct dwarf2_per_cu_data* ref_per_cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>htab_create_alloc_ex(), htab_find_slot()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_full_die()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dummy_obstack_deallocate()  :  dwarf2read.c
<item>hashtab_obstack_allocate()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>htab_eq_pointer, htab_hash_pointer
</itemize>
</descrip>

<sect1>Local Function dwarf2_add_field()

<p><tt>static void dwarf2_add_field ( struct field_info* fip, struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>decode_locdesc()  :  dwarf2read.c
<item>die_is_declaration()  :  dwarf2read.c
<item>die_type()  :  dwarf2read.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>dwarf2_linkage_name()  :  dwarf2read.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>make_cleanup()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>type_name_no_tag()  :  gdbtypes.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_structure_type()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bits_per_byte  :  dwarf2read.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_add_member_fn()

<p><tt>static void dwarf2_add_member_fn ( struct field_info* fip, struct die_info* die, struct type* type, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_type()  :  gdbtypes.c
<item>attr_form_is_block()  :  dwarf2read.c
<item>complaint()  :  complaints.c
<item>decode_locdesc()  :  dwarf2read.c
<item>die_containing_type()  :  dwarf2read.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>dwarf2_complex_location_expr_complaint()  :  dwarf2read.c
<item>dwarf2_invalid_attrib_class_complaint()  :  dwarf2read.c
<item>dwarf2_linkage_name()  :  dwarf2read.c
<item>make_cleanup()  :  utils.c
<item>smash_to_method_type()  :  gdbtypes.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_structure_type()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_add_to_list_of_inlined_calls()

<p><tt>static void dwarf2_add_to_list_of_inlined_calls ( struct objfile* objfile, struct attribute* file_attr, struct attribute* line_attr, struct attribute* column_attr, CORE_ADDR lowpc, CORE_ADDR highpc, struct address_range_list* ranges, char* name, char* parent_name, struct attribute* decl_file, struct attribute* decl_line, struct symbol* func_sym )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>rb_tree_insert()  :  dwarf2read.c
<item>xmalloc()  :  utils.c
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_inlined_subroutine_scope()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_attach_fields_to_type()

<p><tt>static void dwarf2_attach_fields_to_type ( struct field_info* fip, struct type* type, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_cplus_struct_type()  :  gdbtypes.c
<item>complaint()  :  complaints.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_structure_type()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_attach_fn_fields_to_type()

<p><tt>static void dwarf2_attach_fn_fields_to_type ( struct field_info* fip, struct type* type, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_cplus_struct_type()  :  gdbtypes.c
<item>xmalloc()  :  utils.c
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_structure_type()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_attr()

<p><tt>static struct attribute* dwarf2_attr ( struct die_info* die, unsigned int name, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_attr()  :  dwarf2read.c
<item>follow_db_ref()  :  dwarf2read.c
<item>follow_die_ref()  :  dwarf2read.c
<item>get_repository_name()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>die_containing_type()  :  dwarf2read.c
<item>die_is_declaration()  :  dwarf2read.c
<item>die_specification()  :  dwarf2read.c
<item>die_type()  :  dwarf2read.c
<item>dwarf2_add_field()  :  dwarf2read.c
<item>dwarf2_add_member_fn()  :  dwarf2read.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>dwarf2_extension()  :  dwarf2read.c
<item>dwarf2_flag_true_p()  :  dwarf2read.c
<item>dwarf2_get_pc_bounds()  :  dwarf2read.c
<item>dwarf2_linkage_name()  :  dwarf2read.c
<item>dwarf2_name()  :  dwarf2read.c
<item>load_full_comp_unit()  :  dwarf2read.c
<item>new_symbol()  :  dwarf2read.c
<item>process_enumeration_scope()  :  dwarf2read.c
<item>process_full_comp_unit()  :  dwarf2read.c
<item>process_structure_scope()  :  dwarf2read.c
<item>read_array_order()  :  dwarf2read.c
<item>read_array_type()  :  dwarf2read.c
<item>read_base_type()  :  dwarf2read.c
<item>read_common_block()  :  dwarf2read.c
<item>read_enumeration_type()  :  dwarf2read.c
<item>read_file_scope()  :  dwarf2read.c
<item>read_func_scope()  :  dwarf2read.c
<item>read_inlined_subroutine_scope()  :  dwarf2read.c
<item>read_structure_type()  :  dwarf2read.c
<item>read_subrange_type()  :  dwarf2read.c
<item>read_subroutine_type()  :  dwarf2read.c
<item>read_tag_pointer_type()  :  dwarf2read.c
<item>read_tag_reference_type()  :  dwarf2read.c
<item>read_tag_string_type()  :  dwarf2read.c
<item>read_tag_unspecified_type()  :  dwarf2read.c
<item>read_typedef()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_build_include_psymtabs()

<p><tt>static void dwarf2_build_include_psymtabs ( struct dwarf2_cu* cu, struct partial_die_info* pdi, struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf_decode_line_header()  :  dwarf2read.c
<item>dwarf_decode_lines()  :  dwarf2read.c
<item>free_line_header()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_build_psymtabs_hard()

<p><tt>static void dwarf2_build_psymtabs_hard ( struct objfile* objfile, int mainline )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_all_comp_units()  :  dwarf2read.c
<item>do_cleanups()  :  utils.c
<item>dwarf2_build_include_psymtabs()  :  dwarf2read.c
<item>dwarf2_find_comp_unit()  :  dwarf2read.c
<item>dwarf2_read_abbrevs()  :  dwarf2read.c
<item>dwarf2_read_repository_abbrevs()  :  dwarf2read.c
<item>free_named_symtabs()  :  symfile.c
<item>free_one_cached_comp_unit()  :  dwarf2read.c
<item>load_partial_dies()  :  dwarf2read.c
<item>make_cleanup()  :  utils.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>obsavestring()  :  symfile.c
<item>partial_read_comp_unit_head()  :  dwarf2read.c
<item>peek_die_abbrev()  :  dwarf2read.c
<item>read_partial_die()  :  dwarf2read.c
<item>scan_partial_inlined_function_symbols()  :  dwarf2read.c
<item>scan_partial_symbols()  :  dwarf2read.c
<item>set_cu_language()  :  dwarf2read.c
<item>set_repository_cu_language()  :  dwarf2read.c
<item>sort_objfile_thumb_psyms()  :  objfiles.c
<item>sort_pst_symbols()  :  symfile.c
<item>start_psymtab_common()  :  symfile.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_begin(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_psymtabs()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dwarf2_free_abbrev_table()  :  dwarf2read.c
<item>dwarf2_psymtab_to_symtab()  :  dwarf2read.c
<item>free_cached_comp_units()  :  dwarf2read.c
<item>free_stack_comp_unit()  :  dwarf2read.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>byte_swap_p  :  dwarf2read.c
<item>dwarf2_per_objfile  :  dwarf2read.c
<item>file_symbols  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_clear_marks()

<p><tt>static void dwarf2_clear_marks ( struct dwarf2_per_cu_data* per_cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>age_cached_comp_units()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_complex_location_expr_complaint()

<p><tt>static void dwarf2_complex_location_expr_complaint ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_locdesc()  :  dwarf2read.c
<item>dwarf2_add_member_fn()  :  dwarf2read.c
<item>read_common_block()  :  dwarf2read.c
<item>read_partial_die()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_const_value()

<p><tt>static void dwarf2_const_value ( struct attribute* attr, struct symbol* sym, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>dwarf2_const_value_data()  :  dwarf2read.c
<item>dwarf2_const_value_length_mismatch_complaint()  :  dwarf2read.c
<item>dwarf_form_name()  :  dwarf2read.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>store_unsigned_integer()  :  findvar.c
<item>translate_debug_map_address()  :  dwarf2read.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>new_symbol()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_const_value_data()

<p><tt>static void dwarf2_const_value_data ( struct attribute* attr, struct symbol* sym, int bits )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_const_value()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_const_value_length_mismatch_complaint()

<p><tt>static void dwarf2_const_value_length_mismatch_complaint ( const char* arg1, int arg2, int arg3 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_const_value()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_copy_dwarf_from_file()

<p><tt>static void dwarf2_copy_dwarf_from_file ( struct objfile* objfile, bfd* abfd )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_read_section()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_psymtabs()  :  dwarf2read.c
<item>dwarf2_debug_map_psymtab_to_symtab()  :  dwarf2read.c
<item>dwarf2_kext_psymtab_to_symtab()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
<item>dwarf_abbrev_section  :  dwarf2read.c
<item>dwarf_info_section  :  dwarf2read.c
<item>dwarf_inlined_section  :  dwarf2read.c
<item>dwarf_line_section  :  dwarf2read.c
<item>dwarf_loc_section  :  dwarf2read.c
<item>dwarf_macinfo_section  :  dwarf2read.c
<item>dwarf_ranges_section  :  dwarf2read.c
<item>dwarf_str_section  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_create_include_psymtab()

<p><tt>static void dwarf2_create_include_psymtab ( char* name, struct partial_symtab* pst, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_psymtab()  :  symfile.c
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf_decode_lines()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_extension()

<p><tt>static struct die_info* dwarf2_extension ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_attr()  :  dwarf2read.c
<item>follow_die_ref()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>namespace_name()  :  dwarf2read.c
<item>read_namespace()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_find_comp_unit()

<p><tt>static struct dwarf2_per_cu_data* dwarf2_find_comp_unit ( unsigned long offset, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_find_containing_comp_unit()  :  dwarf2read.c
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_find_containing_comp_unit()

<p><tt>static struct dwarf2_per_cu_data* dwarf2_find_containing_comp_unit ( unsigned long offset, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_find_comp_unit()  :  dwarf2read.c
<item>find_partial_die()  :  dwarf2read.c
<item>follow_die_ref()  :  dwarf2read.c
<item>read_full_die()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_flag_true_p()

<p><tt>static int dwarf2_flag_true_p ( struct die_info* die, unsigned name, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_attr()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>die_is_declaration()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_free_abbrev_table()

<p><tt>static void dwarf2_free_abbrev_table ( void* ptr_to_cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
<item>find_debug_info_for_pst()  :  dwarf2read.c
<item>load_comp_unit()  :  dwarf2read.c
<item>load_full_comp_unit()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>obstack_free()
</itemize>
</descrip>

<sect1>Local Function dwarf2_fundamental_type()

<p><tt>static struct type* dwarf2_fundamental_type ( struct objfile* objfile, int d2typeid, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>die_type()  :  dwarf2read.c
<item>dwarf_base_type()  :  dwarf2read.c
<item>read_array_type()  :  dwarf2read.c
<item>read_base_type()  :  dwarf2read.c
<item>read_tag_string_type()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_get_attr_constant_value()

<p><tt>static int dwarf2_get_attr_constant_value ( struct attribute* attr, int default_value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>dwarf_form_name()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_subrange_type()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_get_pc_bounds()

<p><tt>static int dwarf2_get_pc_bounds ( struct die_info* die, CORE_ADDR* lowpc, CORE_ADDR* highpc, struct address_range_list** ranges, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>read_address()  :  dwarf2read.c
<item>translate_debug_map_address()  :  dwarf2read.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_scope_pc_bounds()  :  dwarf2read.c
<item>read_func_scope()  :  dwarf2read.c
<item>read_inlined_subroutine_scope()  :  dwarf2read.c
<item>read_lexical_block_scope()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_get_ref_die_offset()

<p><tt>static unsigned int dwarf2_get_ref_die_offset ( struct attribute* attr, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>dwarf_form_name()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>follow_die_ref()  :  dwarf2read.c
<item>read_partial_die()  :  dwarf2read.c
<item>skip_one_die()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_has_info_1()

<p><tt>static int dwarf2_has_info_1 ( struct objfile* objfile, bfd* abfd )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>set_objfile_data()  :  objfiles.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), bfd_map_over_sections()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_debug_map_psymtab_to_symtab()  :  dwarf2read.c
<item>dwarf2_has_info()  :  dwarf2read.c
<item>dwarf2_kext_psymtab_to_symtab()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dwarf2_locate_sections()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_objfile_data_key  :  dwarf2read.c
<item>dwarf2_per_objfile  :  dwarf2read.c
<item>dwarf_abbrev_section  :  dwarf2read.c
<item>dwarf_eh_frame_section  :  dwarf2read.c
<item>dwarf_frame_section  :  dwarf2read.c
<item>dwarf_info_section  :  dwarf2read.c
<item>dwarf_inlined_section  :  dwarf2read.c
<item>dwarf_line_section  :  dwarf2read.c
<item>dwarf_loc_section  :  dwarf2read.c
<item>dwarf_macinfo_section  :  dwarf2read.c
<item>dwarf_ranges_section  :  dwarf2read.c
<item>dwarf_str_section  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_invalid_attrib_class_complaint()

<p><tt>static void dwarf2_invalid_attrib_class_complaint ( const char* arg1, const char* arg2 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_add_member_fn()  :  dwarf2read.c
<item>dwarf2_symbol_mark_computed()  :  dwarf2read.c
<item>read_common_block()  :  dwarf2read.c
<item>read_partial_die()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_linkage_name()

<p><tt>static char* dwarf2_linkage_name ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_attr()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>determine_class_name()  :  dwarf2read.c
<item>dwarf2_add_field()  :  dwarf2read.c
<item>dwarf2_add_member_fn()  :  dwarf2read.c
<item>new_symbol()  :  dwarf2read.c
<item>read_func_scope()  :  dwarf2read.c
<item>read_inlined_subroutine_scope()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_locate_sections()

<p><tt>static void dwarf2_locate_sections ( bfd* ignore_abfd, asection* sectp, void* ignore_ptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_has_info_1()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
<item>dwarf_abbrev_section  :  dwarf2read.c
<item>dwarf_aranges_section  :  dwarf2read.c
<item>dwarf_eh_frame_section  :  dwarf2read.c
<item>dwarf_frame_section  :  dwarf2read.c
<item>dwarf_info_section  :  dwarf2read.c
<item>dwarf_inlined_section  :  dwarf2read.c
<item>dwarf_line_section  :  dwarf2read.c
<item>dwarf_loc_section  :  dwarf2read.c
<item>dwarf_macinfo_section  :  dwarf2read.c
<item>dwarf_pubnames_section  :  dwarf2read.c
<item>dwarf_pubtypes_section  :  dwarf2read.c
<item>dwarf_ranges_section  :  dwarf2read.c
<item>dwarf_str_section  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_lookup_abbrev()

<p><tt>static struct abbrev_info* dwarf2_lookup_abbrev ( unsigned int number, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_read_abbrevs()  :  dwarf2read.c
<item>peek_die_abbrev()  :  dwarf2read.c
<item>read_full_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_macro_malformed_definition_complaint()

<p><tt>static void dwarf2_macro_malformed_definition_complaint ( const char* arg1 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_macro_definition()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_macros_too_long_complaint()

<p><tt>static void dwarf2_macros_too_long_complaint ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf_decode_macros()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_mark()

<p><tt>static void dwarf2_mark ( struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>htab_traverse()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>age_cached_comp_units()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dwarf2_mark_helper()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_mark_helper()

<p><tt>static int dwarf2_mark_helper ( void** slot, void* data )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>htab_traverse()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_mark()  :  dwarf2read.c
<item>dwarf2_mark_helper()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dwarf2_mark_helper()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_name()

<p><tt>static char* dwarf2_name ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_attr()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>determine_class_name()  :  dwarf2read.c
<item>namespace_name()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_psymtab_to_symtab()

<p><tt>static void dwarf2_psymtab_to_symtab ( struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdb_flush()  :  ui-file.c
<item>get_objfile_data()  :  objfiles.c
<item>printf_filtered()  :  utils.c
<item>psymtab_to_symtab_1()  :  dwarf2read.c
<item>warning()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_objfile_data_key  :  dwarf2read.c
<item>dwarf2_per_objfile  :  dwarf2read.c
<item>gdb_stdout  :  main.c
<item>info_verbose  :  top.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_read_abbrevs()

<p><tt>static void dwarf2_read_abbrevs ( bfd* abfd, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_lookup_abbrev()  :  dwarf2read.c
<item>dwarf_alloc_abbrev()  :  dwarf2read.c
<item>internal_error()  :  utils.c
<item>read_1_byte()  :  dwarf2read.c
<item>read_unsigned_leb128()  :  dwarf2read.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk(), _obstack_begin(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
<item>find_debug_info_for_pst()  :  dwarf2read.c
<item>load_comp_unit()  :  dwarf2read.c
<item>load_full_comp_unit()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_read_repository_abbrevs()

<p><tt>static void dwarf2_read_repository_abbrevs ( struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_open_repository()  :  dwarf2read.c
<item>read_in_db_abbrev_table()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_record_line()

<p><tt>static int dwarf2_record_line ( struct line_header* lh, char* comp_dir, struct dwarf2_cu* cu, CORE_ADDR address, CORE_ADDR baseaddr, int file, int line, int end_sequence )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>check_cu_functions()  :  dwarf2read.c
<item>check_inlined_function_calls()  :  dwarf2read.c
<item>compare_translation_tuples_inclusive()  :  dwarf2read.c
<item>fprintf_unfiltered()  :  utils.c
<item>paddr_nz()  :  utils.c
<item>record_line()  :  buildsym.c
<item>translate_debug_map_address_with_tuple()  :  dwarf2read.c
<item>bsearch()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf_decode_lines()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>compare_translation_tuples_inclusive()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_subfile  :  buildsym.c
<item>debug_debugmap  :  dwarf2read.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_release_queue()

<p><tt>static void dwarf2_release_queue ( void* dummy )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>free_one_cached_comp_unit()  :  dwarf2read.c
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>psymtab_to_symtab_1()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_queue  :  dwarf2read.c
<item>dwarf2_queue_tail  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_start_subfile()

<p><tt>static void dwarf2_start_subfile ( char* filename, char* dirname, char* comp_dir )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>start_subfile()  :  buildsym.c
<item>xfree()  :  utils.c
<item>concat(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>check_inlined_function_calls()  :  dwarf2read.c
<item>dwarf_decode_lines()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>null_cleanup()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_subfile  :  buildsym.c
<item>subfiles  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_statement_list_fits_in_line_number_section_complaint()

<p><tt>static void dwarf2_statement_list_fits_in_line_number_section_complaint ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf_decode_line_header()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_symbol_mark_computed()

<p><tt>static void dwarf2_symbol_mark_computed ( struct attribute* attr, struct symbol* sym, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>attr_form_is_block()  :  dwarf2read.c
<item>complaint()  :  complaints.c
<item>dwarf2_invalid_attrib_class_complaint()  :  dwarf2read.c
<item>internal_error()  :  utils.c
<item>symbol_natural_name()  :  symtab.c
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_func_scope()  :  dwarf2read.c
<item>var_decode_location()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_locexpr_funcs  :  dwarf2loc.c
<item>dwarf2_loclist_funcs  :  dwarf2loc.c
<item>dwarf2_per_objfile  :  dwarf2read.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dwarf_alloc_abbrev()

<p><tt>static struct abbrev_info* dwarf_alloc_abbrev ( struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_read_abbrevs()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf_alloc_block()

<p><tt>static struct dwarf_block* dwarf_alloc_block ( struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_attribute_value()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf_alloc_die()

<p><tt>static struct die_info* dwarf_alloc_die ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_full_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf_attr_name()

<p><tt>static const char* dwarf_attr_name ( unsigned int attr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dump_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf_base_type()

<p><tt>static struct type* dwarf_base_type ( int encoding, int size, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_fundamental_type()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_base_type()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf_bool_name()

<p><tt>static const char* dwarf_bool_name ( unsigned mybool )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dump_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf_decode_line_header()

<p><tt>static struct line_header* dwarf_decode_line_header ( unsigned int offset, bfd* abfd, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_file_name()  :  dwarf2read.c
<item>add_include_dir()  :  dwarf2read.c
<item>complaint()  :  complaints.c
<item>discard_cleanups()  :  utils.c
<item>dwarf2_statement_list_fits_in_line_number_section_complaint()  :  dwarf2read.c
<item>make_cleanup()  :  utils.c
<item>read_1_byte()  :  dwarf2read.c
<item>read_1_signed_byte()  :  dwarf2read.c
<item>read_2_bytes()  :  dwarf2read.c
<item>read_initial_length()  :  dwarf2read.c
<item>read_offset()  :  dwarf2read.c
<item>read_string()  :  dwarf2read.c
<item>read_unsigned_leb128()  :  dwarf2read.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_include_psymtabs()  :  dwarf2read.c
<item>read_file_scope()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_line_header()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dwarf_decode_lines()

<p><tt>static void dwarf_decode_lines ( struct line_header* lh, char* comp_dir, bfd* abfd, struct dwarf2_cu* cu, struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_file_name()  :  dwarf2read.c
<item>complaint()  :  complaints.c
<item>dwarf2_create_include_psymtab()  :  dwarf2read.c
<item>dwarf2_record_line()  :  dwarf2read.c
<item>dwarf2_start_subfile()  :  dwarf2read.c
<item>make_cleanup()  :  utils.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>read_1_byte()  :  dwarf2read.c
<item>read_2_bytes()  :  dwarf2read.c
<item>read_address()  :  dwarf2read.c
<item>read_signed_leb128()  :  dwarf2read.c
<item>read_string()  :  dwarf2read.c
<item>read_unsigned_leb128()  :  dwarf2read.c
<item>concat(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_include_psymtabs()  :  dwarf2read.c
<item>read_file_scope()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dwarf_decode_macros()

<p><tt>static void dwarf_decode_macros ( struct line_header* lh, unsigned int offset, char* comp_dir, bfd* abfd, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>dwarf2_macros_too_long_complaint()  :  dwarf2read.c
<item>internal_error()  :  utils.c
<item>macro_start_file()  :  dwarf2read.c
<item>macro_undef()  :  macrotab.c
<item>parse_macro_definition()  :  dwarf2read.c
<item>read_1_byte()  :  dwarf2read.c
<item>read_string()  :  dwarf2read.c
<item>read_unsigned_leb128()  :  dwarf2read.c
<item>fprintf()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_file_scope()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dwarf_form_name()

<p><tt>static const char* dwarf_form_name ( unsigned int form )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>db_read_attribute_value()  :  dwarf2read.c
<item>dump_die()  :  dwarf2read.c
<item>dwarf2_const_value()  :  dwarf2read.c
<item>dwarf2_get_attr_constant_value()  :  dwarf2read.c
<item>dwarf2_get_ref_die_offset()  :  dwarf2read.c
<item>read_attribute_value()  :  dwarf2read.c
<item>skip_one_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf_stack_op_name()

<p><tt>static const char* dwarf_stack_op_name ( unsigned int op )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_locdesc()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf_tag_name()

<p><tt>static const char* dwarf_tag_name ( unsigned tag )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dump_die()  :  dwarf2read.c
<item>new_symbol()  :  dwarf2read.c
<item>read_type_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function dwarf_type_encoding_name()

<p><tt>static const char* dwarf_type_encoding_name ( unsigned int enc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_base_type()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function file_full_name()

<p><tt>static char* file_full_name ( int file, struct line_header* lh, const char* comp_dir )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), strlen(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>macro_start_file()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function fill_in_die_info()

<p><tt>static void fill_in_die_info ( struct die_info* new_die, int die_len, uint8_t* die_bytes, uint8_t* d_ptr, struct abbrev_info* abbrev_table, sqlite3* db )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>db_lookup_type()  :  dwarf2read.c
<item>db_read_attribute_value()  :  dwarf2read.c
<item>get_uleb128()  :  dwarf2read.c
<item>internal_error()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>db_lookup_type()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function finalize_stmts()

<p><tt>static int finalize_stmts ( sqlite3* db )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>db_error()  :  dwarf2read.c
<item>sqlite3_finalize()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>close_dwarf_repositories()  :  dwarf2read.c
<item>db_error()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>db_stmt1  :  dwarf2read.c
<item>db_stmt2  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function find_debug_inlined_section()

<p><tt>static bfd_boolean find_debug_inlined_section ( bfd* ignore_abfd, asection* sectp, void* ignore )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_scan_inlined_section_for_psymbols()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function find_debug_str_section()

<p><tt>static bfd_boolean find_debug_str_section ( bfd* ignore_abfd, asection* sectp, void* ignore )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_scan_inlined_section_for_psymbols()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function find_open_repository()

<p><tt>static struct database_info* find_open_repository ( sqlite3* db )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_read_repository_abbrevs()  :  dwarf2read.c
<item>lookup_repository_type()  :  dwarf2read.c
<item>set_repository_cu_language()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>num_open_dbs  :  dwarf2read.c
<item>repositories  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function find_partial_die()

<p><tt>static struct partial_die_info* find_partial_die ( unsigned long offset, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_find_containing_comp_unit()  :  dwarf2read.c
<item>find_partial_die_in_comp_unit()  :  dwarf2read.c
<item>load_comp_unit()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>fixup_partial_die()  :  dwarf2read.c
<item>guess_structure_name()  :  dwarf2read.c
<item>partial_die_parent_scope()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function find_partial_die_in_comp_unit()

<p><tt>static struct partial_die_info* find_partial_die_in_comp_unit ( unsigned long offset, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), basename(), htab_find_with_hash()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_partial_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function find_pubtypes()

<p><tt>static bfd_boolean find_pubtypes ( bfd* ignore_abfd, asection* sectp, void* ignore )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_scan_pubtype_for_psymbols()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function fix_inlined_subroutine_symbols()

<p><tt>static void fix_inlined_subroutine_symbols ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_full_comp_unit()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inlined_subroutine_symbols  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function fixup_partial_die()

<p><tt>static void fixup_partial_die ( struct partial_die_info* part_die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_partial_die()  :  dwarf2read.c
<item>fixup_partial_die()  :  dwarf2read.c
<item>guess_structure_name()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>fixup_partial_die()  :  dwarf2read.c
<item>partial_die_parent_scope()  :  dwarf2read.c
<item>scan_partial_symbols()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function follow_db_ref()

<p><tt>static struct die_info* follow_db_ref ( struct die_info* die, struct attribute* repository_spec, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>lookup_repository_type()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>die_type()  :  dwarf2read.c
<item>dwarf2_attr()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function follow_die_ref()

<p><tt>static struct die_info* follow_die_ref ( struct die_info* src_die, struct attribute* attr, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_find_containing_comp_unit()  :  dwarf2read.c
<item>dwarf2_get_ref_die_offset()  :  dwarf2read.c
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>die_containing_type()  :  dwarf2read.c
<item>die_specification()  :  dwarf2read.c
<item>die_type()  :  dwarf2read.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>dwarf2_extension()  :  dwarf2read.c
<item>new_symbol()  :  dwarf2read.c
<item>read_inlined_subroutine_scope()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function free_cached_comp_units()

<p><tt>static void free_cached_comp_units ( void* data )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_one_comp_unit()  :  dwarf2read.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
<item>find_debug_info_for_pst()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function free_die_list()

<p><tt>static void free_die_list ( struct die_info* dies )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_die_list()  :  dwarf2read.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_die_list()  :  dwarf2read.c
<item>free_one_comp_unit()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function free_line_header()

<p><tt>static void free_line_header ( struct line_header* lh )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_include_psymtabs()  :  dwarf2read.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf_decode_line_header()  :  dwarf2read.c
<item>read_file_scope()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function free_one_cached_comp_unit()

<p><tt>static void free_one_cached_comp_unit ( void* target_cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_one_comp_unit()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
<item>dwarf2_release_queue()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function free_one_comp_unit()

<p><tt>static void free_one_comp_unit ( void* data )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_die_list()  :  dwarf2read.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>age_cached_comp_units()  :  dwarf2read.c
<item>free_cached_comp_units()  :  dwarf2read.c
<item>free_one_cached_comp_unit()  :  dwarf2read.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>load_full_comp_unit()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>obstack_free()
</itemize>
</descrip>

<sect1>Local Function free_stack_comp_unit()

<p><tt>static void free_stack_comp_unit ( void* data )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>age_cached_comp_units()  :  dwarf2read.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
<item>find_debug_info_for_pst()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>obstack_free()
</itemize>
</descrip>

<sect1>Local Function get_die_type()

<p><tt>static struct type* get_die_type ( struct die_info* die, htab_t type_hash )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>htab_find_with_hash()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>reset_die_and_siblings_types()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function get_repository_name()

<p><tt>static struct attribute* get_repository_name ( struct attribute* attr, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>db_error()  :  dwarf2read.c
<item>xmalloc()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), sqlite3_bind_int(), sqlite3_column_text(), sqlite3_prepare_v2(), sqlite3_step(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_attr()  :  dwarf2read.c
<item>read_partial_die()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>db_stmt2  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function get_scope_pc_bounds()

<p><tt>static void get_scope_pc_bounds ( struct die_info* die, CORE_ADDR* lowpc, CORE_ADDR* highpc, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_get_pc_bounds()  :  dwarf2read.c
<item>get_scope_pc_bounds()  :  dwarf2read.c
<item>sibling_die()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_scope_pc_bounds()  :  dwarf2read.c
<item>process_full_comp_unit()  :  dwarf2read.c
<item>read_file_scope()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function get_uleb128()

<p><tt>static uint32_t get_uleb128 ( uint8_t** addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>db_lookup_type()  :  dwarf2read.c
<item>fill_in_die_info()  :  dwarf2read.c
<item>read_in_db_abbrev_table()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function guess_structure_name()

<p><tt>static void guess_structure_name ( struct partial_die_info* struct_pdi, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>find_partial_die()  :  dwarf2read.c
<item>language_class_name_from_physname()  :  language.c
<item>obsavestring()  :  symfile.c
<item>xfree()  :  utils.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>fixup_partial_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function hashtab_obstack_allocate()

<p><tt>static void* hashtab_obstack_allocate ( void* data, size_t size, size_t count )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_add_dependence()  :  dwarf2read.c
<item>load_partial_dies()  :  dwarf2read.c
<item>set_die_type()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function increment_use_count()

<p><tt>static void increment_use_count ( struct database_info* repository, struct objfile* ofile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>open_dwarf_repository()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function initialize_cu_func_list()

<p><tt>static void initialize_cu_func_list ( struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_file_scope()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function initialize_repositories()

<p><tt>static void initialize_repositories ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>open_dwarf_repository()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>repositories  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function is_type_tag_for_partial()

<p><tt>static int is_type_tag_for_partial ( int tag )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>load_partial_dies()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function is_vtable_name()

<p><tt>static int is_vtable_name ( const char* name, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>is_cplus_marker()  :  demangle.c
<item>strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gnuv2_value_rtti_type()  :  gnu-v2-abi.c
<item>read_structure_type()  :  dwarf2read.c
<item>record_minimal_symbol()  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function left_rotate()

<p><tt>static void left_rotate ( struct rb_tree_node** root, struct rb_tree_node* x )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>rb_delete_fixup()  :  dwarf2read.c
<item>rb_tree_insert()  :  dwarf2read.c
<item>rb_tree_remove_node()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function load_comp_unit()

<p><tt>static void load_comp_unit ( struct dwarf2_per_cu_data* this_cu, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>dwarf2_read_abbrevs()  :  dwarf2read.c
<item>load_partial_dies()  :  dwarf2read.c
<item>make_cleanup()  :  utils.c
<item>partial_read_comp_unit_head()  :  dwarf2read.c
<item>peek_die_abbrev()  :  dwarf2read.c
<item>read_partial_die()  :  dwarf2read.c
<item>set_cu_language()  :  dwarf2read.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_begin()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_partial_die()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dwarf2_free_abbrev_table()  :  dwarf2read.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function load_full_comp_unit()

<p><tt>static struct dwarf2_cu* load_full_comp_unit ( struct dwarf2_per_cu_data* per_cu, struct oso_to_final_addr_map* addr_map )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>discard_cleanups()  :  utils.c
<item>do_cleanups()  :  utils.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>dwarf2_read_abbrevs()  :  dwarf2read.c
<item>make_cleanup()  :  utils.c
<item>read_comp_unit()  :  dwarf2read.c
<item>read_comp_unit_head()  :  dwarf2read.c
<item>set_cu_language()  :  dwarf2read.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_begin()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_debug_map_psymtab_to_symtab()  :  dwarf2read.c
<item>dwarf2_kext_psymtab_to_symtab()  :  dwarf2read.c
<item>process_queue()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dwarf2_free_abbrev_table()  :  dwarf2read.c
<item>free_one_comp_unit()  :  dwarf2read.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function load_partial_dies()

<p><tt>static struct partial_die_info* load_partial_dies ( bfd* abfd, char* info_ptr, int building_psymtab, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_psymbol_to_list()  :  symfile.c
<item>complaint()  :  complaints.c
<item>is_type_tag_for_partial()  :  dwarf2read.c
<item>locate_pdi_sibling()  :  dwarf2read.c
<item>peek_die_abbrev()  :  dwarf2read.c
<item>read_partial_die()  :  dwarf2read.c
<item>skip_one_die()  :  dwarf2read.c
<item>_obstack_newchunk(), htab_create_alloc_ex(), htab_find_slot_with_hash(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
<item>load_comp_unit()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dummy_obstack_deallocate()  :  dwarf2read.c
<item>hashtab_obstack_allocate()  :  dwarf2read.c
<item>partial_die_eq()  :  dwarf2read.c
<item>partial_die_hash()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function locate_pdi_sibling()

<p><tt>static char* locate_pdi_sibling ( struct partial_die_info* orig_pdi, char* info_ptr, bfd* abfd, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>skip_children()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>load_partial_dies()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function lookup_repository_type()

<p><tt>static void* lookup_repository_type ( int type_id, sqlite3* db, struct dwarf2_cu* cu, int return_die )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>db_lookup_type()  :  dwarf2read.c
<item>find_open_repository()  :  dwarf2read.c
<item>internal_error()  :  utils.c
<item>rb_tree_find_node()  :  dwarf2read.c
<item>rb_tree_insert()  :  dwarf2read.c
<item>tag_type_to_type()  :  dwarf2read.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>follow_db_ref()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function macro_start_file()

<p><tt>static struct macro_source_file* macro_start_file ( int file, int line, struct macro_source_file* current_file, const char* comp_dir, struct line_header* lh, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>file_full_name()  :  dwarf2read.c
<item>macro_include()  :  macrotab.c
<item>macro_set_main()  :  macrotab.c
<item>new_macro_table()  :  macrotab.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf_decode_macros()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>pending_macros  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function namespace_name()

<p><tt>static const char* namespace_name ( struct die_info* die, int* is_anonymous, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_extension()  :  dwarf2read.c
<item>dwarf2_name()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>determine_prefix()  :  dwarf2read.c
<item>read_namespace()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function new_symbol()

<p><tt>static struct symbol* new_symbol ( struct die_info* die, struct type* type, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_symbol_to_list()  :  buildsym.c
<item>complaint()  :  complaints.c
<item>die_type()  :  dwarf2read.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>dwarf2_const_value()  :  dwarf2read.c
<item>dwarf2_linkage_name()  :  dwarf2read.c
<item>dwarf_tag_name()  :  dwarf2read.c
<item>follow_die_ref()  :  dwarf2read.c
<item>gdbarch_int_bit()  :  gdbarch.c
<item>init_type()  :  gdbtypes.c
<item>internal_error()  :  utils.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>symbol_search_name()  :  symtab.c
<item>symbol_set_names()  :  symtab.c
<item>translate_debug_map_address()  :  dwarf2read.c
<item>typename_concat()  :  dwarf2read.c
<item>var_decode_location()  :  dwarf2read.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
<item>process_enumeration_scope()  :  dwarf2read.c
<item>process_structure_scope()  :  dwarf2read.c
<item>read_common_block()  :  dwarf2read.c
<item>read_func_scope()  :  dwarf2read.c
<item>read_inlined_subroutine_scope()  :  dwarf2read.c
<item>read_namespace()  :  dwarf2read.c
<item>read_tag_pointer_type()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>file_symbols  :  buildsym.c
<item>global_symbols  :  buildsym.c
<item>processing_current_prefix  :  cp-namespace.c
<item>processing_has_namespace_info  :  cp-namespace.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function num_nodes_in_tree()

<p><tt>static int num_nodes_in_tree ( struct rb_tree_node* tree )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>num_nodes_in_tree()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>num_nodes_in_tree()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function offset_and_type_eq()

<p><tt>static int offset_and_type_eq ( const void* item_lhs, const void* item_rhs )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>set_die_type()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function offset_and_type_hash()

<p><tt>static hashval_t offset_and_type_hash ( const void* item )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>set_die_type()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function open_dwarf_repository()

<p><tt>static int open_dwarf_repository ( char* dirname, char* filename, struct objfile* objfile, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>build_dummy_cu()  :  dwarf2read.c
<item>build_dummy_objfile()  :  dwarf2read.c
<item>db_error()  :  dwarf2read.c
<item>increment_use_count()  :  dwarf2read.c
<item>initialize_repositories()  :  dwarf2read.c
<item>internal_error()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___snprintf_chk(), __builtin_object_size(), sqlite3_open(), strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_full_die()  :  dwarf2read.c
<item>read_partial_die()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>num_open_dbs  :  dwarf2read.c
<item>repositories  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function parse_macro_definition()

<p><tt>static void parse_macro_definition ( struct macro_source_file* file, int line, const char* body )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>consume_improper_spaces()  :  dwarf2read.c
<item>copy_string()  :  dwarf2read.c
<item>dwarf2_macro_malformed_definition_complaint()  :  dwarf2read.c
<item>macro_define_function()  :  macrotab.c
<item>macro_define_object()  :  macrotab.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf_decode_macros()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function partial_die_eq()

<p><tt>static int partial_die_eq ( const void* item_lhs, const void* item_rhs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>load_partial_dies()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function partial_die_full_name()

<p><tt>static char* partial_die_full_name ( struct partial_die_info* pdi, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>partial_die_parent_scope()  :  dwarf2read.c
<item>typename_concat()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_partial_symbol()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function partial_die_hash()

<p><tt>static hashval_t partial_die_hash ( const void* item )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>load_partial_dies()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function partial_die_parent_scope()

<p><tt>static const char* partial_die_parent_scope ( struct partial_die_info* pdi, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>find_partial_die()  :  dwarf2read.c
<item>fixup_partial_die()  :  dwarf2read.c
<item>partial_die_parent_scope()  :  dwarf2read.c
<item>typename_concat()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>partial_die_full_name()  :  dwarf2read.c
<item>partial_die_parent_scope()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function partial_read_comp_unit_head()

<p><tt>static char* partial_read_comp_unit_head ( struct comp_unit_head* header, char* info_ptr, bfd* abfd )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>read_comp_unit_head()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
<item>find_debug_info_for_pst()  :  dwarf2read.c
<item>load_comp_unit()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function pdi_needs_namespace()

<p><tt>static int pdi_needs_namespace ( enum dwarf_tag tag )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_partial_symbol()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function peek_die_abbrev()

<p><tt>static struct abbrev_info* peek_die_abbrev ( char* info_ptr, int* bytes_read, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_lookup_abbrev()  :  dwarf2read.c
<item>error()  :  utils.c
<item>read_unsigned_leb128()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
<item>find_debug_info_for_pst()  :  dwarf2read.c
<item>load_comp_unit()  :  dwarf2read.c
<item>load_partial_dies()  :  dwarf2read.c
<item>skip_children()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function plain_tree_insert()

<p><tt>static void plain_tree_insert ( struct rb_tree_node** root, struct rb_tree_node* new_node )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>plain_tree_insert()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>plain_tree_insert()  :  dwarf2read.c
<item>rb_tree_insert()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function process_die()

<p><tt>static void process_die ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>new_symbol()  :  dwarf2read.c
<item>process_enumeration_scope()  :  dwarf2read.c
<item>process_structure_scope()  :  dwarf2read.c
<item>read_array_type()  :  dwarf2read.c
<item>read_base_type()  :  dwarf2read.c
<item>read_common_block()  :  dwarf2read.c
<item>read_enumeration_type()  :  dwarf2read.c
<item>read_file_scope()  :  dwarf2read.c
<item>read_func_scope()  :  dwarf2read.c
<item>read_inlined_subroutine_scope()  :  dwarf2read.c
<item>read_lexical_block_scope()  :  dwarf2read.c
<item>read_namespace()  :  dwarf2read.c
<item>read_set_type()  :  dwarf2read.c
<item>read_structure_type()  :  dwarf2read.c
<item>read_subrange_type()  :  dwarf2read.c
<item>read_subroutine_type()  :  dwarf2read.c
<item>read_tag_pointer_type()  :  dwarf2read.c
<item>read_tag_ptr_to_member_type()  :  dwarf2read.c
<item>read_tag_reference_type()  :  dwarf2read.c
<item>read_tag_string_type()  :  dwarf2read.c
<item>read_type_die()  :  dwarf2read.c
<item>read_typedef()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_enumeration_scope()  :  dwarf2read.c
<item>process_full_comp_unit()  :  dwarf2read.c
<item>process_structure_scope()  :  dwarf2read.c
<item>read_file_scope()  :  dwarf2read.c
<item>read_func_scope()  :  dwarf2read.c
<item>read_inlined_subroutine_scope()  :  dwarf2read.c
<item>read_lexical_block_scope()  :  dwarf2read.c
<item>read_namespace()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_allow_inlined_stepping  :  dwarf2read.c
<item>processing_has_namespace_info  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function process_enumeration_scope()

<p><tt>static void process_enumeration_scope ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_attr()  :  dwarf2read.c
<item>new_symbol()  :  dwarf2read.c
<item>process_die()  :  dwarf2read.c
<item>sibling_die()  :  dwarf2read.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function process_full_comp_unit()

<p><tt>static void process_full_comp_unit ( struct dwarf2_per_cu_data* per_cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>buildsym_init()  :  buildsym.c
<item>do_cleanups()  :  utils.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>end_symtab()  :  buildsym.c
<item>executable_objfile()  :  objfiles.c
<item>fix_inlined_subroutine_symbols()  :  dwarf2read.c
<item>get_scope_pc_bounds()  :  dwarf2read.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>process_die()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_debug_map_psymtab_to_symtab()  :  dwarf2read.c
<item>dwarf2_kext_psymtab_to_symtab()  :  dwarf2read.c
<item>process_queue()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>really_free_pendings()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>file_symbols  :  buildsym.c
<item>inlined_subroutine_symbols  :  dwarf2read.c
<item>processing_current_prefix  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function process_queue()

<p><tt>static void process_queue ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>load_full_comp_unit()  :  dwarf2read.c
<item>process_full_comp_unit()  :  dwarf2read.c
<item>reset_die_and_siblings_types()  :  dwarf2read.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>psymtab_to_symtab_1()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
<item>dwarf2_queue  :  dwarf2read.c
<item>dwarf2_queue_tail  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function process_structure_scope()

<p><tt>static void process_structure_scope ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>die_is_declaration()  :  dwarf2read.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>new_symbol()  :  dwarf2read.c
<item>process_die()  :  dwarf2read.c
<item>sibling_die()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>processing_current_prefix  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function psymtab_to_symtab_1()

<p><tt>static void psymtab_to_symtab_1 ( struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>age_cached_comp_units()  :  dwarf2read.c
<item>do_cleanups()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>make_cleanup()  :  utils.c
<item>printf_filtered()  :  utils.c
<item>process_queue()  :  dwarf2read.c
<item>psymtab_to_symtab_1()  :  dwarf2read.c
<item>queue_comp_unit()  :  dwarf2read.c
<item>wrap_here()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_psymtab_to_symtab()  :  dwarf2read.c
<item>psymtab_to_symtab_1()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dwarf2_release_queue()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>info_verbose  :  top.c
</itemize>
</descrip>

<sect1>Local Function queue_comp_unit()

<p><tt>static void queue_comp_unit ( struct dwarf2_per_cu_data* per_cu )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>psymtab_to_symtab_1()  :  dwarf2read.c
<item>read_full_die()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_queue  :  dwarf2read.c
<item>dwarf2_queue_tail  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function rb_delete_fixup()

<p><tt>static void rb_delete_fixup ( struct rb_tree_node** root, struct rb_tree_node* x )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>left_rotate()  :  dwarf2read.c
<item>right_rotate()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>rb_tree_remove_node()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function rb_print_node()

<p><tt>static void rb_print_node ( struct rb_tree_node* tree )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>paddr_nz()  :  utils.c
<item>fprintf()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>rb_print_tree()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function rb_print_tree()

<p><tt>static void rb_print_tree ( struct rb_tree_node* tree, int indent_level )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>rb_print_node()  :  dwarf2read.c
<item>rb_print_tree()  :  dwarf2read.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), fprintf()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>rb_print_tree()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function rb_tree_find_and_remove_node()

<p><tt>static struct rb_tree_node* rb_tree_find_and_remove_node ( struct rb_tree_node** root, struct rb_tree_node* cur_node, long long key, int secondary_key )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>rb_tree_find_and_remove_node()  :  dwarf2read.c
<item>rb_tree_remove_node()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>check_inlined_function_calls()  :  dwarf2read.c
<item>rb_tree_find_and_remove_node()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function rb_tree_minimum()

<p><tt>static struct rb_tree_node* rb_tree_minimum ( struct rb_tree_node* node )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>rb_tree_successor()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function rb_tree_remove_node()

<p><tt>static struct rb_tree_node* rb_tree_remove_node ( struct rb_tree_node** root, struct rb_tree_node* node )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>left_rotate()  :  dwarf2read.c
<item>rb_delete_fixup()  :  dwarf2read.c
<item>rb_tree_successor()  :  dwarf2read.c
<item>right_rotate()  :  dwarf2read.c
<item>verify_rb_tree()  :  dwarf2read.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>rb_tree_find_and_remove_node()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_debug_inlined_stepping  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function rb_tree_successor()

<p><tt>static struct rb_tree_node* rb_tree_successor ( struct rb_tree_node* node )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>rb_tree_minimum()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>rb_tree_remove_node()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_1_byte()

<p><tt>static unsigned int read_1_byte ( bfd* abfd, char* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_locdesc()  :  dwarf2read.c
<item>dwarf2_read_abbrevs()  :  dwarf2read.c
<item>dwarf2_scan_inlined_section_for_psymbols()  :  dwarf2read.c
<item>dwarf_decode_line_header()  :  dwarf2read.c
<item>dwarf_decode_lines()  :  dwarf2read.c
<item>dwarf_decode_macros()  :  dwarf2read.c
<item>read_attribute_value()  :  dwarf2read.c
<item>read_comp_unit_head()  :  dwarf2read.c
<item>scan_partial_inlined_function_symbols()  :  dwarf2read.c
<item>skip_one_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_1_signed_byte()

<p><tt>static int read_1_signed_byte ( bfd* abfd, char* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_locdesc()  :  dwarf2read.c
<item>dwarf_decode_line_header()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_2_bytes()

<p><tt>static unsigned int read_2_bytes ( bfd* abfd, char* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_locdesc()  :  dwarf2read.c
<item>dwarf2_scan_inlined_section_for_psymbols()  :  dwarf2read.c
<item>dwarf2_scan_pubtype_for_psymbols()  :  dwarf2read.c
<item>dwarf_decode_line_header()  :  dwarf2read.c
<item>dwarf_decode_lines()  :  dwarf2read.c
<item>read_attribute_value()  :  dwarf2read.c
<item>read_comp_unit_head()  :  dwarf2read.c
<item>scan_partial_inlined_function_symbols()  :  dwarf2read.c
<item>skip_one_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_2_signed_bytes()

<p><tt>static int read_2_signed_bytes ( bfd* abfd, char* buf )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>decode_locdesc()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_4_bytes()

<p><tt>static unsigned int read_4_bytes ( bfd* abfd, char* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_locdesc()  :  dwarf2read.c
<item>read_attribute_value()  :  dwarf2read.c
<item>skip_one_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_4_signed_bytes()

<p><tt>static int read_4_signed_bytes ( bfd* abfd, char* buf )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>decode_locdesc()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_8_bytes()

<p><tt>static unsigned long read_8_bytes ( bfd* abfd, char* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_attribute_value()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_address()

<p><tt>static CORE_ADDR read_address ( bfd* abfd, char* buf, struct dwarf2_cu* cu, int* bytes_read )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_locdesc()  :  dwarf2read.c
<item>dwarf2_get_pc_bounds()  :  dwarf2read.c
<item>dwarf2_scan_inlined_section_for_psymbols()  :  dwarf2read.c
<item>dwarf_decode_lines()  :  dwarf2read.c
<item>read_attribute_value()  :  dwarf2read.c
<item>scan_partial_inlined_function_symbols()  :  dwarf2read.c
<item>var_decode_location()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_array_order()

<p><tt>static enum dwarf_array_dim_ordering read_array_order ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_attr()  :  dwarf2read.c
<item>strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_array_type()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_array_type()

<p><tt>static void read_array_type ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
<item>die_type()  :  dwarf2read.c
<item>do_cleanups()  :  utils.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>dwarf2_fundamental_type()  :  dwarf2read.c
<item>make_cleanup()  :  utils.c
<item>read_array_order()  :  dwarf2read.c
<item>read_subrange_type()  :  dwarf2read.c
<item>set_die_type()  :  dwarf2read.c
<item>sibling_die()  :  dwarf2read.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
<item>read_type_die()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
<item>null_cleanup()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function read_attribute()

<p><tt>static char* read_attribute ( struct attribute* attr, struct attr_abbrev* abbrev, bfd* abfd, char* info_ptr, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>read_attribute_value()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_full_die()  :  dwarf2read.c
<item>read_partial_die()  :  dwarf2read.c
<item>skip_one_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_attribute_value()

<p><tt>static char* read_attribute_value ( struct attribute* attr, unsigned form, bfd* abfd, char* info_ptr, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf_alloc_block()  :  dwarf2read.c
<item>dwarf_form_name()  :  dwarf2read.c
<item>error()  :  utils.c
<item>read_1_byte()  :  dwarf2read.c
<item>read_2_bytes()  :  dwarf2read.c
<item>read_4_bytes()  :  dwarf2read.c
<item>read_8_bytes()  :  dwarf2read.c
<item>read_address()  :  dwarf2read.c
<item>read_attribute_value()  :  dwarf2read.c
<item>read_indirect_string()  :  dwarf2read.c
<item>read_n_bytes()  :  dwarf2read.c
<item>read_signed_leb128()  :  dwarf2read.c
<item>read_string()  :  dwarf2read.c
<item>read_unsigned_leb128()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_attribute()  :  dwarf2read.c
<item>read_attribute_value()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_base_type()

<p><tt>static void read_base_type ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>dwarf2_fundamental_type()  :  dwarf2read.c
<item>dwarf_base_type()  :  dwarf2read.c
<item>dwarf_type_encoding_name()  :  dwarf2read.c
<item>init_type()  :  gdbtypes.c
<item>set_die_type()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
<item>read_type_die()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function read_common_block()

<p><tt>static void read_common_block ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_symbol_to_list()  :  buildsym.c
<item>attr_form_is_block()  :  dwarf2read.c
<item>decode_locdesc()  :  dwarf2read.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>dwarf2_complex_location_expr_complaint()  :  dwarf2read.c
<item>dwarf2_invalid_attrib_class_complaint()  :  dwarf2read.c
<item>new_symbol()  :  dwarf2read.c
<item>sibling_die()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>decode_locdesc_common  :  dwarf2read.c
<item>global_symbols  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function read_comp_unit()

<p><tt>static struct die_info* read_comp_unit ( char* info_ptr, bfd* abfd, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>read_die_and_children()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>load_full_comp_unit()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_comp_unit_head()

<p><tt>static char* read_comp_unit_head ( struct comp_unit_head* cu_header, char* info_ptr, bfd* abfd )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>read_1_byte()  :  dwarf2read.c
<item>read_2_bytes()  :  dwarf2read.c
<item>read_initial_length()  :  dwarf2read.c
<item>read_offset()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>load_full_comp_unit()  :  dwarf2read.c
<item>partial_read_comp_unit_head()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_die_and_children()

<p><tt>static struct die_info* read_die_and_children ( char* info_ptr, bfd* abfd, struct dwarf2_cu* cu, char** new_info_ptr, struct die_info* parent )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>read_die_and_siblings()  :  dwarf2read.c
<item>read_full_die()  :  dwarf2read.c
<item>store_in_ref_table()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_comp_unit()  :  dwarf2read.c
<item>read_die_and_siblings()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_die_and_siblings()

<p><tt>static struct die_info* read_die_and_siblings ( char* info_ptr, bfd* abfd, struct dwarf2_cu* cu, char** new_info_ptr, struct die_info* parent )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>read_die_and_children()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_die_and_children()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_enumeration_type()

<p><tt>static void read_enumeration_type ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_type()  :  gdbtypes.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>set_die_type()  :  dwarf2read.c
<item>typename_concat()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
<item>read_type_die()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>processing_current_prefix  :  cp-namespace.c
<item>processing_has_namespace_info  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function read_file_scope()

<p><tt>static void read_file_scope ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>dwarf_decode_line_header()  :  dwarf2read.c
<item>dwarf_decode_lines()  :  dwarf2read.c
<item>dwarf_decode_macros()  :  dwarf2read.c
<item>get_scope_pc_bounds()  :  dwarf2read.c
<item>initialize_cu_func_list()  :  dwarf2read.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>process_die()  :  dwarf2read.c
<item>record_debugformat()  :  buildsym.c
<item>record_producer()  :  buildsym.c
<item>set_cu_language()  :  dwarf2read.c
<item>sibling_die()  :  dwarf2read.c
<item>start_symtab()  :  buildsym.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), strchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_line_header()  :  dwarf2read.c
<item>null_cleanup()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>processing_gcc_compilation  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function read_full_die()

<p><tt>static char* read_full_die ( struct die_info** diep, bfd* abfd, char* info_ptr, struct dwarf2_cu* cu, int* has_children )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_add_dependence()  :  dwarf2read.c
<item>dwarf2_find_containing_comp_unit()  :  dwarf2read.c
<item>dwarf2_lookup_abbrev()  :  dwarf2read.c
<item>dwarf_alloc_die()  :  dwarf2read.c
<item>error()  :  utils.c
<item>open_dwarf_repository()  :  dwarf2read.c
<item>queue_comp_unit()  :  dwarf2read.c
<item>read_attribute()  :  dwarf2read.c
<item>read_unsigned_leb128()  :  dwarf2read.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_die_and_children()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_func_scope()

<p><tt>static void read_func_scope ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_to_cu_func_list()  :  dwarf2read.c
<item>determine_prefix()  :  dwarf2read.c
<item>die_specification()  :  dwarf2read.c
<item>do_cleanups()  :  utils.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>dwarf2_get_pc_bounds()  :  dwarf2read.c
<item>dwarf2_linkage_name()  :  dwarf2read.c
<item>dwarf2_symbol_mark_computed()  :  dwarf2read.c
<item>finish_block()  :  buildsym.c
<item>make_cleanup()  :  utils.c
<item>new_symbol()  :  dwarf2read.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>pop_context()  :  buildsym.c
<item>process_die()  :  dwarf2read.c
<item>push_context()  :  buildsym.c
<item>sibling_die()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>context_stack_depth  :  buildsym.c
<item>file_symbols  :  buildsym.c
<item>local_symbols  :  buildsym.c
<item>param_symbols  :  buildsym.c
<item>processing_current_prefix  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function read_in_db_abbrev_table()

<p><tt>static void read_in_db_abbrev_table ( struct abbrev_info** abbrev_table, sqlite3* db )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>db_error()  :  dwarf2read.c
<item>get_uleb128()  :  dwarf2read.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), sqlite3_column_blob(), sqlite3_column_bytes(), sqlite3_column_int(), sqlite3_finalize(), sqlite3_prepare_v2(), sqlite3_step(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_read_repository_abbrevs()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_indirect_string()

<p><tt>static char* read_indirect_string ( bfd* abfd, char* buf, const struct comp_unit_head* cu_header, unsigned int* bytes_read_ptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>internal_error()  :  utils.c
<item>read_offset()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_attribute_value()  :  dwarf2read.c
<item>scan_partial_inlined_function_symbols()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_initial_length()

<p><tt>static long read_initial_length ( bfd* abfd, char* buf, struct comp_unit_head* cu_header, int* bytes_read )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_all_comp_units()  :  dwarf2read.c
<item>dwarf2_debug_map_psymtab_to_symtab()  :  dwarf2read.c
<item>dwarf2_kext_psymtab_to_symtab()  :  dwarf2read.c
<item>dwarf2_scan_inlined_section_for_psymbols()  :  dwarf2read.c
<item>dwarf2_scan_pubtype_for_psymbols()  :  dwarf2read.c
<item>dwarf_decode_line_header()  :  dwarf2read.c
<item>read_comp_unit_head()  :  dwarf2read.c
<item>scan_partial_inlined_function_symbols()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function read_inlined_subroutine_scope()

<p><tt>static void read_inlined_subroutine_scope ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_symbol_to_inlined_subroutine_list()  :  inlining.c
<item>dwarf2_add_to_list_of_inlined_calls()  :  dwarf2read.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>dwarf2_get_pc_bounds()  :  dwarf2read.c
<item>dwarf2_linkage_name()  :  dwarf2read.c
<item>finish_block()  :  buildsym.c
<item>follow_die_ref()  :  dwarf2read.c
<item>new_symbol()  :  dwarf2read.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>pop_context()  :  buildsym.c
<item>process_die()  :  dwarf2read.c
<item>push_context()  :  buildsym.c
<item>sibling_die()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inlined_subroutine_symbols  :  dwarf2read.c
<item>local_symbols  :  buildsym.c
<item>param_symbols  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function read_lexical_block_scope()

<p><tt>static void read_lexical_block_scope ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_get_pc_bounds()  :  dwarf2read.c
<item>finish_block()  :  buildsym.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>pop_context()  :  buildsym.c
<item>process_die()  :  dwarf2read.c
<item>push_context()  :  buildsym.c
<item>sibling_die()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>local_symbols  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function read_n_bytes()

<p><tt>static char* read_n_bytes ( bfd* abfd, char* buf, unsigned int size )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_attribute_value()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_namespace()

<p><tt>static void read_namespace ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cp_add_using_directive()  :  cp-namespace.c
<item>do_cleanups()  :  utils.c
<item>dwarf2_extension()  :  dwarf2read.c
<item>init_type()  :  gdbtypes.c
<item>make_cleanup()  :  utils.c
<item>namespace_name()  :  dwarf2read.c
<item>new_symbol()  :  dwarf2read.c
<item>process_die()  :  dwarf2read.c
<item>set_die_type()  :  dwarf2read.c
<item>sibling_die()  :  dwarf2read.c
<item>typename_concat()  :  dwarf2read.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>null_cleanup()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>processing_current_prefix  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function read_offset()

<p><tt>static long read_offset ( bfd* abfd, char* buf, const struct comp_unit_head* cu_header, int* bytes_read )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_scan_inlined_section_for_psymbols()  :  dwarf2read.c
<item>dwarf2_scan_pubtype_for_psymbols()  :  dwarf2read.c
<item>dwarf_decode_line_header()  :  dwarf2read.c
<item>read_comp_unit_head()  :  dwarf2read.c
<item>read_indirect_string()  :  dwarf2read.c
<item>scan_partial_inlined_function_symbols()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_partial_die()

<p><tt>static char* read_partial_die ( struct partial_die_info* part_die, struct abbrev_info* abbrev, unsigned int abbrev_len, bfd* abfd, char* info_ptr, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>attr_form_is_block()  :  dwarf2read.c
<item>complaint()  :  complaints.c
<item>dwarf2_complex_location_expr_complaint()  :  dwarf2read.c
<item>dwarf2_get_ref_die_offset()  :  dwarf2read.c
<item>dwarf2_invalid_attrib_class_complaint()  :  dwarf2read.c
<item>get_repository_name()  :  dwarf2read.c
<item>internal_error()  :  utils.c
<item>open_dwarf_repository()  :  dwarf2read.c
<item>read_attribute()  :  dwarf2read.c
<item>translate_debug_map_address()  :  dwarf2read.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), isdigit(), isupper(), strchr(), strlen(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
<item>find_debug_info_for_pst()  :  dwarf2read.c
<item>load_comp_unit()  :  dwarf2read.c
<item>load_partial_dies()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
<item>psym_equivalences  :  dwarf2read.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function read_set_type()

<p><tt>static void read_set_type ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_set_type()  :  gdbtypes.c
<item>die_type()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
<item>read_type_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_signed_leb128()

<p><tt>static long read_signed_leb128 ( bfd* abfd, char* buf, unsigned int* bytes_read_ptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_locdesc()  :  dwarf2read.c
<item>dwarf_decode_lines()  :  dwarf2read.c
<item>read_attribute_value()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_string()

<p><tt>static char* read_string ( bfd* abfd, char* buf, unsigned int* bytes_read_ptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_scan_pubtype_for_psymbols()  :  dwarf2read.c
<item>dwarf_decode_line_header()  :  dwarf2read.c
<item>dwarf_decode_lines()  :  dwarf2read.c
<item>dwarf_decode_macros()  :  dwarf2read.c
<item>read_attribute_value()  :  dwarf2read.c
<item>skip_one_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_structure_type()

<p><tt>static void read_structure_type ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_type()  :  gdbtypes.c
<item>allocate_cplus_struct_type()  :  gdbtypes.c
<item>complaint()  :  complaints.c
<item>determine_class_name()  :  dwarf2read.c
<item>die_containing_type()  :  dwarf2read.c
<item>die_is_declaration()  :  dwarf2read.c
<item>do_cleanups()  :  utils.c
<item>dwarf2_add_field()  :  dwarf2read.c
<item>dwarf2_add_member_fn()  :  dwarf2read.c
<item>dwarf2_attach_fields_to_type()  :  dwarf2read.c
<item>dwarf2_attach_fn_fields_to_type()  :  dwarf2read.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>is_vtable_name()  :  dwarf2read.c
<item>make_cleanup()  :  utils.c
<item>objc_invalidate_objc_class()  :  objc-lang.c
<item>obsavestring()  :  symfile.c
<item>read_type_die()  :  dwarf2read.c
<item>set_die_type()  :  dwarf2read.c
<item>sibling_die()  :  dwarf2read.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
<item>read_type_die()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>null_cleanup()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
<item>processing_current_prefix  :  cp-namespace.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function read_subrange_type()

<p><tt>static void read_subrange_type ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_type()  :  gdbtypes.c
<item>complaint()  :  complaints.c
<item>create_range_type()  :  gdbtypes.c
<item>die_type()  :  dwarf2read.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>dwarf2_get_attr_constant_value()  :  dwarf2read.c
<item>set_die_type()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
<item>read_array_type()  :  dwarf2read.c
<item>read_type_die()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function read_subroutine_type()

<p><tt>static void read_subroutine_type ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>die_type()  :  dwarf2read.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>make_function_type()  :  gdbtypes.c
<item>set_die_type()  :  dwarf2read.c
<item>sibling_die()  :  dwarf2read.c
<item>xmalloc()  :  utils.c
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
<item>read_type_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_tag_const_type()

<p><tt>static void read_tag_const_type ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>die_type()  :  dwarf2read.c
<item>make_cvr_type()  :  gdbtypes.c
<item>set_die_type()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_type_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_tag_pointer_type()

<p><tt>static void read_tag_pointer_type ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>die_type()  :  dwarf2read.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>gdbarch_address_class_type_flags()  :  gdbarch.c
<item>gdbarch_address_class_type_flags_p()  :  gdbarch.c
<item>init_type()  :  gdbtypes.c
<item>internal_error()  :  utils.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>make_pointer_type()  :  gdbtypes.c
<item>make_type_with_address_space()  :  gdbtypes.c
<item>new_symbol()  :  dwarf2read.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>set_die_type()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
<item>read_type_die()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function read_tag_ptr_to_member_type()

<p><tt>static void read_tag_ptr_to_member_type ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_type()  :  gdbtypes.c
<item>die_containing_type()  :  dwarf2read.c
<item>die_type()  :  dwarf2read.c
<item>set_die_type()  :  dwarf2read.c
<item>smash_to_member_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
<item>read_type_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_tag_reference_type()

<p><tt>static void read_tag_reference_type ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>die_type()  :  dwarf2read.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>lookup_reference_type()  :  gdbtypes.c
<item>set_die_type()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
<item>read_type_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_tag_restrict_type()

<p><tt>static void read_tag_restrict_type ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>die_type()  :  dwarf2read.c
<item>make_cvr_type()  :  gdbtypes.c
<item>set_die_type()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_type_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_tag_string_type()

<p><tt>static void read_tag_string_type ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_range_type()  :  gdbtypes.c
<item>create_string_type()  :  gdbtypes.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>dwarf2_fundamental_type()  :  dwarf2read.c
<item>set_die_type()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
<item>read_type_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_tag_unspecified_type()

<p><tt>static void read_tag_unspecified_type ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_type()  :  gdbtypes.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>set_die_type()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_type_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_tag_volatile_type()

<p><tt>static void read_tag_volatile_type ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>die_type()  :  dwarf2read.c
<item>make_cvr_type()  :  gdbtypes.c
<item>set_die_type()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_type_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_type_die()

<p><tt>static void read_type_die ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>determine_prefix()  :  dwarf2read.c
<item>do_cleanups()  :  utils.c
<item>dwarf_tag_name()  :  dwarf2read.c
<item>make_cleanup()  :  utils.c
<item>read_array_type()  :  dwarf2read.c
<item>read_base_type()  :  dwarf2read.c
<item>read_enumeration_type()  :  dwarf2read.c
<item>read_set_type()  :  dwarf2read.c
<item>read_structure_type()  :  dwarf2read.c
<item>read_subrange_type()  :  dwarf2read.c
<item>read_subroutine_type()  :  dwarf2read.c
<item>read_tag_const_type()  :  dwarf2read.c
<item>read_tag_pointer_type()  :  dwarf2read.c
<item>read_tag_ptr_to_member_type()  :  dwarf2read.c
<item>read_tag_reference_type()  :  dwarf2read.c
<item>read_tag_restrict_type()  :  dwarf2read.c
<item>read_tag_string_type()  :  dwarf2read.c
<item>read_tag_unspecified_type()  :  dwarf2read.c
<item>read_tag_volatile_type()  :  dwarf2read.c
<item>read_typedef()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
<item>read_structure_type()  :  dwarf2read.c
<item>tag_type_to_type()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>processing_current_prefix  :  cp-namespace.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function read_typedef()

<p><tt>static void read_typedef ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>die_type()  :  dwarf2read.c
<item>dwarf2_attr()  :  dwarf2read.c
<item>init_type()  :  gdbtypes.c
<item>set_die_type()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_die()  :  dwarf2read.c
<item>read_type_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function read_unsigned_leb128()

<p><tt>static unsigned long read_unsigned_leb128 ( bfd* abfd, char* buf, unsigned int* bytes_read_ptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_locdesc()  :  dwarf2read.c
<item>dwarf2_read_abbrevs()  :  dwarf2read.c
<item>dwarf2_scan_inlined_section_for_psymbols()  :  dwarf2read.c
<item>dwarf_decode_line_header()  :  dwarf2read.c
<item>dwarf_decode_lines()  :  dwarf2read.c
<item>dwarf_decode_macros()  :  dwarf2read.c
<item>peek_die_abbrev()  :  dwarf2read.c
<item>read_attribute_value()  :  dwarf2read.c
<item>read_full_die()  :  dwarf2read.c
<item>scan_partial_inlined_function_symbols()  :  dwarf2read.c
<item>skip_one_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function reset_die_and_siblings_types()

<p><tt>static void reset_die_and_siblings_types ( struct die_info* start_die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_die_type()  :  dwarf2read.c
<item>reset_die_and_siblings_types()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_queue()  :  dwarf2read.c
<item>reset_die_and_siblings_types()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function right_rotate()

<p><tt>static void right_rotate ( struct rb_tree_node** root, struct rb_tree_node* x )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>rb_delete_fixup()  :  dwarf2read.c
<item>rb_tree_insert()  :  dwarf2read.c
<item>rb_tree_remove_node()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function scan_partial_inlined_function_symbols()

<p><tt>static void scan_partial_inlined_function_symbols ( struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_psymbol_to_list()  :  symfile.c
<item>cp_check_possible_namespace_symbols()  :  cp-namespace.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>read_1_byte()  :  dwarf2read.c
<item>read_2_bytes()  :  dwarf2read.c
<item>read_address()  :  dwarf2read.c
<item>read_indirect_string()  :  dwarf2read.c
<item>read_initial_length()  :  dwarf2read.c
<item>read_offset()  :  dwarf2read.c
<item>read_unsigned_leb128()  :  dwarf2read.c
<item>translate_debug_map_address()  :  dwarf2read.c
<item>warning()  :  utils.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function scan_partial_symbols()

<p><tt>static void scan_partial_symbols ( struct partial_die_info* first_die, CORE_ADDR* lowpc, CORE_ADDR* highpc, struct dwarf2_cu* cu, struct equiv_psym_list** equiv_psyms )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_equiv_psym()  :  dwarf2read.c
<item>add_partial_enumeration()  :  dwarf2read.c
<item>add_partial_namespace()  :  dwarf2read.c
<item>add_partial_symbol()  :  dwarf2read.c
<item>fixup_partial_die()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_partial_namespace()  :  dwarf2read.c
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function set_cu_language()

<p><tt>static void set_cu_language ( unsigned int lang, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>language_def()  :  language.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
<item>load_comp_unit()  :  dwarf2read.c
<item>load_full_comp_unit()  :  dwarf2read.c
<item>read_file_scope()  :  dwarf2read.c
<item>set_repository_cu_language()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function set_die_type()

<p><tt>static void set_die_type ( struct die_info* die, struct type* type, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>_obstack_newchunk(), htab_create_alloc_ex(), htab_find_slot_with_hash()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_array_type()  :  dwarf2read.c
<item>read_base_type()  :  dwarf2read.c
<item>read_enumeration_type()  :  dwarf2read.c
<item>read_namespace()  :  dwarf2read.c
<item>read_structure_type()  :  dwarf2read.c
<item>read_subrange_type()  :  dwarf2read.c
<item>read_subroutine_type()  :  dwarf2read.c
<item>read_tag_const_type()  :  dwarf2read.c
<item>read_tag_pointer_type()  :  dwarf2read.c
<item>read_tag_ptr_to_member_type()  :  dwarf2read.c
<item>read_tag_reference_type()  :  dwarf2read.c
<item>read_tag_restrict_type()  :  dwarf2read.c
<item>read_tag_string_type()  :  dwarf2read.c
<item>read_tag_unspecified_type()  :  dwarf2read.c
<item>read_tag_volatile_type()  :  dwarf2read.c
<item>read_typedef()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dummy_obstack_deallocate()  :  dwarf2read.c
<item>hashtab_obstack_allocate()  :  dwarf2read.c
<item>offset_and_type_eq()  :  dwarf2read.c
<item>offset_and_type_hash()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function set_dwarf2_cmd()

<p><tt>static void set_dwarf2_cmd ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>help_list()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_dwarf2_read()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>set_dwarf2_cmdlist  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function set_repository_cu_language()

<p><tt>static void set_repository_cu_language ( unsigned int language, struct dwarf2_cu* old_cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_open_repository()  :  dwarf2read.c
<item>internal_error()  :  utils.c
<item>set_cu_language()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function show_debug_debugmap()

<p><tt>static void show_debug_debugmap ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_dwarf2_read()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function show_dwarf2_cmd()

<p><tt>static void show_dwarf2_cmd ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>cmd_show_list()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_dwarf2_read()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>show_dwarf2_cmdlist  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function show_dwarf2_max_cache_age()

<p><tt>static void show_dwarf2_max_cache_age ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_dwarf2_read()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function sibling_die()

<p><tt>static struct die_info* sibling_die ( struct die_info* die )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>determine_class_name()  :  dwarf2read.c
<item>get_scope_pc_bounds()  :  dwarf2read.c
<item>process_enumeration_scope()  :  dwarf2read.c
<item>process_structure_scope()  :  dwarf2read.c
<item>read_array_type()  :  dwarf2read.c
<item>read_common_block()  :  dwarf2read.c
<item>read_file_scope()  :  dwarf2read.c
<item>read_func_scope()  :  dwarf2read.c
<item>read_inlined_subroutine_scope()  :  dwarf2read.c
<item>read_lexical_block_scope()  :  dwarf2read.c
<item>read_namespace()  :  dwarf2read.c
<item>read_structure_type()  :  dwarf2read.c
<item>read_subroutine_type()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function skip_children()

<p><tt>static char* skip_children ( char* info_ptr, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>peek_die_abbrev()  :  dwarf2read.c
<item>skip_one_die()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>locate_pdi_sibling()  :  dwarf2read.c
<item>skip_one_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function skip_leb128()

<p><tt>static char* skip_leb128 ( bfd* abfd, char* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>skip_one_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function skip_one_die()

<p><tt>static char* skip_one_die ( char* info_ptr, struct abbrev_info* abbrev, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>dwarf2_get_ref_die_offset()  :  dwarf2read.c
<item>dwarf_form_name()  :  dwarf2read.c
<item>error()  :  utils.c
<item>read_1_byte()  :  dwarf2read.c
<item>read_2_bytes()  :  dwarf2read.c
<item>read_4_bytes()  :  dwarf2read.c
<item>read_attribute()  :  dwarf2read.c
<item>read_string()  :  dwarf2read.c
<item>read_unsigned_leb128()  :  dwarf2read.c
<item>skip_children()  :  dwarf2read.c
<item>skip_leb128()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>load_partial_dies()  :  dwarf2read.c
<item>skip_children()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_per_objfile  :  dwarf2read.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function store_in_ref_table()

<p><tt>static void store_in_ref_table ( unsigned int offset, struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_die_and_children()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function tag_type_to_type()

<p><tt>static struct type* tag_type_to_type ( struct die_info* die, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dump_die()  :  dwarf2read.c
<item>error()  :  utils.c
<item>read_type_die()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>die_containing_type()  :  dwarf2read.c
<item>die_type()  :  dwarf2read.c
<item>lookup_repository_type()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function translate_common_symbol_debug_map_address()

<p><tt>static int translate_common_symbol_debug_map_address ( struct oso_to_final_addr_map* map, const char* name, CORE_ADDR* addr )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>paddr_nz()  :  utils.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_locdesc()  :  dwarf2read.c
<item>var_decode_location()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_debugmap  :  dwarf2read.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function translate_debug_map_address_with_tuple()

<p><tt>static CORE_ADDR translate_debug_map_address_with_tuple ( struct oso_to_final_addr_map* map, struct oso_final_addr_tuple* match, CORE_ADDR oso_addr, int highpc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
<item>paddr()  :  utils.c
<item>bsearch()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_record_line()  :  dwarf2read.c
<item>translate_debug_map_address()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>compare_translation_final_addr()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_debugmap  :  dwarf2read.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function tree_height()

<p><tt>static int tree_height ( struct rb_tree_node* tree )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>tree_height()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>tree_height()  :  dwarf2read.c
<item>verify_tree_heights()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function typename_concat()

<p><tt>static char* typename_concat ( struct obstack* obs, const char* prefix, const char* suffix, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>obconcat()  :  symfile.c
<item>xmalloc()  :  utils.c
<item>__builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>determine_class_name()  :  dwarf2read.c
<item>determine_prefix()  :  dwarf2read.c
<item>new_symbol()  :  dwarf2read.c
<item>partial_die_full_name()  :  dwarf2read.c
<item>partial_die_parent_scope()  :  dwarf2read.c
<item>read_enumeration_type()  :  dwarf2read.c
<item>read_namespace()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function var_decode_location()

<p><tt>static void var_decode_location ( struct attribute* attr, struct symbol* sym, struct dwarf2_cu* cu )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>attr_form_is_block()  :  dwarf2read.c
<item>dwarf2_symbol_mark_computed()  :  dwarf2read.c
<item>fixup_symbol_section()  :  symtab.c
<item>objfile_section_offset()  :  objfiles.c
<item>read_address()  :  dwarf2read.c
<item>translate_common_symbol_debug_map_address()  :  dwarf2read.c
<item>translate_debug_map_address()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>new_symbol()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function verify_rb_tree()

<p><tt>static int verify_rb_tree ( struct rb_tree_node* tree )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>verify_tree_colors()  :  dwarf2read.c
<item>verify_tree_heights()  :  dwarf2read.c
<item>fprintf()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>rb_tree_remove_node()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function verify_tree_colors()

<p><tt>static int verify_tree_colors ( struct rb_tree_node* tree )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>verify_tree_colors()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>verify_rb_tree()  :  dwarf2read.c
<item>verify_tree_colors()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function verify_tree_heights()

<p><tt>static int verify_tree_heights ( struct rb_tree_node* tree )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2read.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>tree_height()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>verify_rb_tree()  :  dwarf2read.c
</itemize>
</descrip>

</article>
