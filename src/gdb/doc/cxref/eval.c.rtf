{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF eval.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File eval.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "f-lang.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "cp-abi.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "infcall.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objc-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <Availability.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "parser-defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "cp-support.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <math.h>\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable print_closure\par}
{\s5\f1\fs20\ql\sb50\sa50 int print_closure\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell eval.c\cell\cell\row
Used in:\cell do_restore_print_closure()\cell eval.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell make_cleanup_set_restore_print_closure()\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep External Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable overload_resolution\par}
{\s5\f1\fs20\ql\sb50\sa50 extern int overload_resolution\par}
\trowd\trgaph120\cellx1440\cellx5220
\intbl\plain
Defined in:\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep External Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable objectprint\par}
{\s5\f1\fs20\ql\sb50\sa50 extern int objectprint\par}
\trowd\trgaph120\cellx1440\cellx5220
\intbl\plain
Defined in:\cell cp-valprint.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function calc_f77_array_dims()\par}
{\s5\f1\fs20\ql\sb50\sa50 int calc_f77_array_dims ( struct type* array_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell f-lang.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell f77_print_array()\cell f-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function evaluate_expression()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* evaluate_expression ( struct expression* exp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell evaluate_subexp()\cell eval.c\cell\row
Called by:\cell breakpoint_cond_eval()\cell breakpoint.c\cell\row
\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell do_enable_breakpoint()\cell breakpoint.c\cell\row
\cell do_one_display()\cell printcmd.c\cell\row
\cell encode_actions()\cell tracepoint.c\cell\row
\cell gdb_evaluate_expression()\cell wrapper.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell insert_breakpoints()\cell breakpoint.c\cell\row
\cell invoke_block_command()\cell printcmd.c\cell\row
\cell output_command()\cell printcmd.c\cell\row
\cell parse_and_eval()\cell eval.c\cell\row
\cell parse_and_eval_address()\cell eval.c\cell\row
\cell parse_and_eval_address_1()\cell eval.c\cell\row
\cell parse_and_eval_long()\cell eval.c\cell\row
\cell parse_to_comma_and_eval()\cell eval.c\cell\row
\cell print_command_1()\cell printcmd.c\cell\row
\cell set_command()\cell printcmd.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
\cell watchpoint_check()\cell breakpoint.c\cell\row
\cell x_command()\cell printcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function evaluate_subexp_standard()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* evaluate_subexp_standard ( struct type* expect_type, struct expression* exp, int* pos, enum noside noside )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell expression.h\cell\cell\row
Calls: \cell access_value_history()\cell value.c\cell\row
\cell allocate_repeat_value()\cell value.c\cell\row
\cell allocate_value()\cell value.c\cell\row
\cell binop_user_defined_p()\cell valarith.c\cell\row
\cell block_for_pc()\cell block.c\cell\row
\cell calc_f77_array_dims()\cell eval.c\cell\row
\cell call_function_by_hand_expecting_type()\cell infcall.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell create_cached_function()\cell value.c\cell\row
\cell deprecated_set_value_type()\cell value.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell evaluate_struct_tuple()\cell eval.c\cell\row
\cell evaluate_subexp()\cell eval.c\cell\row
\cell evaluate_subexp_for_address()\cell eval.c\cell\row
\cell evaluate_subexp_for_sizeof()\cell eval.c\cell\row
\cell evaluate_subexp_with_coercion()\cell eval.c\cell\row
\cell f77_get_dynamic_lowerbound()\cell f-valprint.c\cell\row
\cell f77_get_dynamic_upperbound()\cell f-valprint.c\cell\row
\cell find_function_addr()\cell infcall.c\cell\row
\cell find_implementation()\cell objc-lang.c\cell\row
\cell find_overload_match()\cell valops.c\cell\row
\cell find_pc_function()\cell blockframe.c\cell\row
\cell frame_map_regnum_to_name()\cell frame.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell gdbarch_ptr_bit()\cell gdbarch.c\cell\row
\cell get_closure_dynamic_type()\cell gdbtypes.c\cell\row
\cell get_discrete_bounds()\cell gdbtypes.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell init_array_element()\cell eval.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lang_bool_type()\cell language.c\cell\row
\cell longest_to_int()\cell valprint.c\cell\row
\cell lookup_cached_function()\cell value.c\cell\row
\cell lookup_child_selector()\cell objc-lang.c\cell\row
\cell lookup_function_type()\cell gdbtypes.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell lookup_reference_type()\cell gdbtypes.c\cell\row
\cell lookup_struct_elt_type()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell unop_user_defined_p()\cell valarith.c\cell\row
\cell using_struct_return()\cell value.c\cell\row
\cell value_add()\cell valarith.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_aggregate_elt()\cell valops.c\cell\row
\cell value_array()\cell valops.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_at_lazy()\cell valops.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_bitstring()\cell valops.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_coerce_array()\cell valops.c\cell\row
\cell value_complement()\cell valarith.c\cell\row
\cell value_concat()\cell valarith.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell value_embedded_offset()\cell value.c\cell\row
\cell value_equal()\cell valarith.c\cell\row
\cell value_from_double()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
\cell value_in()\cell valarith.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_less()\cell valarith.c\cell\row
\cell value_literal_complex()\cell valops.c\cell\row
\cell value_logical_not()\cell valarith.c\cell\row
\cell value_neg()\cell valarith.c\cell\row
\cell value_nsstring()\cell objc-lang.c\cell\row
\cell value_of_internalvar()\cell value.c\cell\row
\cell value_of_local()\cell valops.c\cell\row
\cell value_of_register()\cell findvar.c\cell\row
\cell value_of_variable()\cell valops.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_pos()\cell valarith.c\cell\row
\cell value_repeat()\cell valops.c\cell\row
\cell value_rtti_target_type()\cell valops.c\cell\row
\cell value_slice()\cell valops.c\cell\row
\cell value_string()\cell valops.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
\cell value_sub()\cell valarith.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell value_virtual_fn_field()\cell cp-abi.c\cell\row
\cell value_x_binop()\cell valarith.c\cell\row
\cell value_x_unop()\cell valarith.c\cell\row
\cell value_zero()\cell valops.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin___memset_chk(), __builtin___strcpy_chk(), __builtin_alloca(), __builtin_huge_valf(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk(), __inline_strcpy_chk()\cell\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell evaluate_subexp_scm()\cell scm-lang.c\cell\row
Used in:\cell parse.c\cell\cell\row
Refs Var:\cell builtin_type_char\cell gdbtypes.c\cell\row
\cell builtin_type_f_complex_s16\cell f-lang.c\cell\row
\cell builtin_type_f_integer\cell f-lang.c\cell\row
\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell builtin_type_long\cell gdbtypes.c\cell\row
\cell builtin_type_void\cell gdbtypes.c\cell\row
\cell builtin_type_void_data_ptr\cell gdbtypes.c\cell\row
\cell builtin_type_void_func_ptr\cell gdbtypes.c\cell\row
\cell cplus_struct_default\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell deprecated_hp_som_som_object_present\cell symtab.c\cell\row
\cell objectprint\cell cp-valprint.c\cell\row
\cell overload_resolution\cell valops.c\cell\row
\cell print_closure\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function evaluate_subexp_with_coercion()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* evaluate_subexp_with_coercion ( struct expression* exp, int* pos, enum noside noside )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell block_innermost_frame()\cell blockframe.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell evaluate_subexp()\cell eval.c\cell\row
\cell locate_var_value()\cell findvar.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell value_cast()\cell valops.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function evaluate_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* evaluate_type ( struct expression* exp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell evaluate_subexp()\cell eval.c\cell\row
Called by:\cell gdb_evaluate_type()\cell wrapper.c\cell\row
\cell maintenance_print_type()\cell typeprint.c\cell\row
\cell whatis_exp()\cell typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function make_cleanup_set_restore_print_closure()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct cleanup* make_cleanup_set_restore_print_closure ( int newval )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell make_cleanup()\cell utils.c\cell\row
Called by:\cell invoke_block_command()\cell printcmd.c\cell\row
\cell varobj_evaluate_expression()\cell varobj.c\cell\row
\cell varobj_evaluate_type()\cell varobj.c\cell\row
\cell varobj_parse_exp_1()\cell varobj.c\cell\row
Refs Func:\cell do_restore_print_closure()\cell eval.c\cell\row
Refs Var:\cell print_closure\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function parse_and_eval()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* parse_and_eval ( const char* exp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell evaluate_expression()\cell eval.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell parse_expression()\cell parse.c\cell\row
Called by:\cell do_captured_thread_select()\cell thread.c\cell\row
\cell ignore_command()\cell breakpoint.c\cell\row
\cell parse_frame_specification_1()\cell stack.c\cell\row
\cell quit_force()\cell top.c\cell\row
\cell return_command()\cell stack.c\cell\row
Refs Func:\cell free_current_contents()\cell utils.c\cell\row
Refs Var:\cell innermost_block\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function parse_and_eval_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR parse_and_eval_address ( const char* exp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell evaluate_expression()\cell eval.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell parse_expression()\cell parse.c\cell\row
\cell value_as_address()\cell value.c\cell\row
Called by:\cell add_symbol_file_command()\cell symfile.c\cell\row
\cell add_symbol_file_from_memory_command()\cell symfile-mem.c\cell\row
\cell maintenance_translate_address()\cell maint.c\cell\row
\cell mem_command()\cell memattr.c\cell\row
\cell sym_info()\cell printcmd.c\cell\row
\cell trace_find_outside_command()\cell tracepoint.c\cell\row
\cell trace_find_pc_command()\cell tracepoint.c\cell\row
\cell trace_find_range_command()\cell tracepoint.c\cell\row
Refs Func:\cell free_current_contents()\cell utils.c\cell\row
Refs Var:\cell innermost_block\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function parse_and_eval_address_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR parse_and_eval_address_1 ( const char** expptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell evaluate_expression()\cell eval.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell parse_exp_1()\cell parse.c\cell\row
\cell value_as_address()\cell value.c\cell\row
Called by:\cell decode_indirect()\cell linespec.c\cell\row
Refs Func:\cell free_current_contents()\cell utils.c\cell\row
Refs Var:\cell innermost_block\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function parse_and_eval_long()\par}
{\s5\f1\fs20\ql\sb50\sa50 long parse_and_eval_long ( const char* exp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell evaluate_expression()\cell eval.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell parse_expression()\cell parse.c\cell\row
\cell value_as_long()\cell value.c\cell\row
Called by:\cell backtrace_command_1()\cell stack.c\cell\row
\cell breakpoints_info()\cell breakpoint.c\cell\row
\cell continue_command()\cell infcmd.c\cell\row
\cell down_silently_base()\cell stack.c\cell\row
\cell maintenance_info_breakpoints()\cell breakpoint.c\cell\row
\cell re_execute_command()\cell infcmd.c\cell\row
\cell set_radix()\cell valprint.c\cell\row
\cell show_commands()\cell top.c\cell\row
\cell show_values()\cell value.c\cell\row
\cell signal_command()\cell infcmd.c\cell\row
\cell signals_info()\cell infrun.c\cell\row
\cell step_1_inlining()\cell infcmd.c\cell\row
\cell step_1_no_inlining()\cell infcmd.c\cell\row
\cell trace_find_command()\cell tracepoint.c\cell\row
\cell trace_find_tracepoint_command()\cell tracepoint.c\cell\row
\cell tracepoints_info()\cell tracepoint.c\cell\row
\cell up_silently_base()\cell stack.c\cell\row
Refs Func:\cell free_current_contents()\cell utils.c\cell\row
Refs Var:\cell innermost_block\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function parse_and_eval_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* parse_and_eval_type ( char* p, int length )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell parse_expression()\cell parse.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell gdb_parse_and_eval_type()\cell wrapper.c\cell\row
Refs Var:\cell innermost_block\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function parse_to_comma_and_eval()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* parse_to_comma_and_eval ( const char** expp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell evaluate_expression()\cell eval.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell parse_exp_1()\cell parse.c\cell\row
Called by:\cell printf_command()\cell printcmd.c\cell\row
Refs Func:\cell free_current_contents()\cell utils.c\cell\row
Refs Var:\cell innermost_block\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_restore_print_closure()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_restore_print_closure ( void* in_oldval )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell make_cleanup_set_restore_print_closure()\cell eval.c\cell\row
Refs Var:\cell print_closure\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function evaluate_struct_tuple()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* evaluate_struct_tuple ( struct value* struct_val, struct expression* exp, int* pos, enum noside noside, int nargs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell eval.c\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell evaluate_subexp()\cell eval.c\cell\row
\cell get_label()\cell eval.c\cell\row
\cell modify_field()\cell value.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_contents_writeable()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), strcmp()\cell\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function evaluate_subexp()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* evaluate_subexp ( struct type* expect_type, struct expression* exp, int* pos, enum noside noside )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell eval.c\cell\cell\row
Called by:\cell evaluate_expression()\cell eval.c\cell\row
\cell evaluate_struct_tuple()\cell eval.c\cell\row
\cell evaluate_subexp_for_address()\cell eval.c\cell\row
\cell evaluate_subexp_for_sizeof()\cell eval.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell evaluate_subexp_with_coercion()\cell eval.c\cell\row
\cell evaluate_type()\cell eval.c\cell\row
\cell init_array_element()\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function evaluate_subexp_for_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* evaluate_subexp_for_address ( struct expression* exp, int* pos, enum noside noside )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell eval.c\cell\cell\row
Calls: \cell block_innermost_frame()\cell blockframe.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell evaluate_subexp()\cell eval.c\cell\row
\cell locate_var_value()\cell findvar.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell value_zero()\cell valops.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function evaluate_subexp_for_sizeof()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* evaluate_subexp_for_sizeof ( struct expression* exp, int* pos )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell eval.c\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell evaluate_subexp()\cell eval.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_label()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* get_label ( struct expression* exp, int* pos )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell eval.c\cell\cell\row
Calls: \cell longest_to_int()\cell valprint.c\cell\row
Called by:\cell evaluate_struct_tuple()\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function init_array_element()\par}
{\s5\f1\fs20\ql\sb50\sa50 static long init_array_element ( struct value* array, struct value* element, struct expression* exp, int* pos, enum noside noside, long low_bound, long high_bound )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell eval.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell evaluate_subexp()\cell eval.c\cell\row
\cell init_array_element()\cell eval.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_huge_valf(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell init_array_element()\cell eval.c\cell\row
\intbl0
}
