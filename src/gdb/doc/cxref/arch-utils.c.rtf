{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF arch-utils.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File arch-utils.c\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Refs Var:\cell endian_auto\cell arch-utils.c\cell\row
\cell endian_big\cell arch-utils.c\cell\row
\cell endian_little\cell arch-utils.c\cell\row
\cell  bfd_i386_arch, mach_o_le_vec\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "arch-utils.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "buildsym.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "regcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "sim-regno.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "osabi.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/libbfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/hashtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "version.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define bfd_powerpc_arch\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type enum set_arch\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum set_arch}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 set_arch_auto;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 set_arch_manual;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep External Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable bfd_i386_arch\par}
{\s5\f1\fs20\ql\sb50\sa50 extern const bfd_arch_info_type bfd_i386_arch\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep External Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mach_o_le_vec\par}
{\s5\f1\fs20\ql\sb50\sa50 extern const bfd_target mach_o_le_vec\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable target_byte_order\par}
{\s5\f1\fs20\ql\sb50\sa50 static int target_byte_order\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell selected_byte_order()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable target_byte_order_auto\par}
{\s5\f1\fs20\ql\sb50\sa50 static int target_byte_order_auto\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell gdbarch_info_fill()\cell\cell\row
\cell selected_byte_order()\cell\cell\row
\cell set_endian()\cell\cell\row
\cell show_endian()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable endian_big\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char endian_big[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell arch-utils.c\cell\cell\row
\cell set_endian()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable endian_little\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char endian_little[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell arch-utils.c\cell\cell\row
\cell set_endian()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable endian_auto\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char endian_auto[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell arch-utils.c\cell\cell\row
\cell set_endian()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable endian_enum\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* endian_enum[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_gdbarch_utils()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable set_endian_string\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* set_endian_string\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_gdbarch_utils()\cell\cell\row
\cell set_endian()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable target_architecture_auto\par}
{\s5\f1\fs20\ql\sb50\sa50 static int target_architecture_auto\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell gdbarch_info_fill()\cell\cell\row
\cell selected_architecture_name()\cell\cell\row
\cell set_architecture()\cell\cell\row
\cell set_architecture_from_string()\cell\cell\row
\cell set_gdbarch_from_file()\cell\cell\row
\cell show_architecture()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable set_architecture_string\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* set_architecture_string\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell initialize_current_architecture()\cell\cell\row
\cell selected_architecture_name()\cell\cell\row
\cell set_architecture()\cell\cell\row
\cell set_architecture_from_string()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable default_bfd_arch\par}
{\s5\f1\fs20\ql\sb50\sa50 static const bfd_arch_info_type* default_bfd_arch\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell initialize_current_architecture()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable default_bfd_vec\par}
{\s5\f1\fs20\ql\sb50\sa50 static const bfd_target* default_bfd_vec\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell initialize_current_architecture()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_gdbarch_utils()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_gdbarch_utils ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.c\cell\cell\row
Calls: \cell  add_setshow_enum_cmd()\cell\cell\row
Refs Func:\cell set_endian()\cell arch-utils.c\cell\row
\cell show_endian()\cell arch-utils.c\cell\row
Refs Var:\cell endian_enum\cell arch-utils.c\cell\row
\cell set_endian_string\cell arch-utils.c\cell\row
\cell  setlist, showlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function always_use_struct_convention()\par}
{\s5\f1\fs20\ql\sb50\sa50 int always_use_struct_convention ( int gcc_p, struct type* value_type )\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cannot_register_not()\par}
{\s5\f1\fs20\ql\sb50\sa50 int cannot_register_not ( int regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Used in:\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function convert_from_func_ptr_addr_identity()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR convert_from_func_ptr_addr_identity ( struct gdbarch* gdbarch, CORE_ADDR addr, struct target_ops* targ )\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function core_addr_greaterthan()\par}
{\s5\f1\fs20\ql\sb50\sa50 int core_addr_greaterthan ( CORE_ADDR lhs, CORE_ADDR rhs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function core_addr_identity()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR core_addr_identity ( CORE_ADDR addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Used in:\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function core_addr_lessthan()\par}
{\s5\f1\fs20\ql\sb50\sa50 int core_addr_lessthan ( CORE_ADDR lhs, CORE_ADDR rhs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function default_adjust_ehframe_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 int default_adjust_ehframe_regnum ( struct gdbarch* gdbarch, int regnum, int eh_frame_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Used in:\cell gdbarch.c\cell\cell\row
\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function default_coff_make_msymbol_special()\par}
{\s5\f1\fs20\ql\sb50\sa50 void default_coff_make_msymbol_special ( int val, struct minimal_symbol* msym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Used in:\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function default_dbx_make_msymbol_special()\par}
{\s5\f1\fs20\ql\sb50\sa50 void default_dbx_make_msymbol_special ( int16_t val, struct minimal_symbol* msym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Used in:\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function default_double_format()\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct floatformat* default_double_format ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Calls: \cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell verify_gdbarch()\cell gdbarch.c\cell\row
Refs Var:\cell  floatformat_ieee_double_big, floatformat_ieee_double_little\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function default_elf_make_msymbol_special()\par}
{\s5\f1\fs20\ql\sb50\sa50 void default_elf_make_msymbol_special ( asymbol* sym, struct minimal_symbol* msym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Used in:\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function default_float_format()\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct floatformat* default_float_format ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Calls: \cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell verify_gdbarch()\cell gdbarch.c\cell\row
Refs Var:\cell  floatformat_ieee_single_big, floatformat_ieee_single_little\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function default_stabs_argument_has_addr()\par}
{\s5\f1\fs20\ql\sb50\sa50 int default_stabs_argument_has_addr ( struct gdbarch* gdbarch, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell gdbarch_deprecated_reg_struct_has_addr()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_reg_struct_has_addr_p()\cell gdbarch.c\cell\row
Used in:\cell gdbarch.c\cell\cell\row
\cell gdbarch_alloc()\cell gdbarch.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell processing_gcc_compilation\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_from_bfd()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch* gdbarch_from_bfd ( bfd* abfd )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Calls: \cell gdbarch_find_by_info()\cell gdbarch.c\cell\row
\cell gdbarch_info_init()\cell arch-utils.c\cell\row
Called by:\cell set_gdbarch_from_file()\cell arch-utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_info_fill()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_info_fill ( struct gdbarch* gdbarch, struct gdbarch_info* info )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell gdbarch_bfd_arch_info()\cell gdbarch.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell gdbarch_lookup_osabi()\cell osabi.c\cell\row
\cell gdbarch_osabi()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  bfd_get_arch(), bfd_get_arch_info()\cell\cell\row
Called by:\cell find_arch_by_info()\cell gdbarch.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\cell target_architecture_auto\cell arch-utils.c\cell\row
\cell target_byte_order_auto\cell arch-utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_info_init()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_info_init ( struct gdbarch_info* info )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Calls: \cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell gdbarch_from_bfd()\cell arch-utils.c\cell\row
\cell initialize_current_architecture()\cell arch-utils.c\cell\row
\cell set_architecture()\cell arch-utils.c\cell\row
\cell set_architecture_from_string()\cell arch-utils.c\cell\row
\cell set_endian()\cell arch-utils.c\cell\row
\cell set_osabi()\cell osabi.c\cell\row
\cell set_osabi_from_string()\cell osabi.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_update_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_update_p ( struct gdbarch_info info )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell deprecated_current_gdbarch_select_hack()\cell gdbarch.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell gdbarch_bfd_arch_info()\cell gdbarch.c\cell\row
\cell gdbarch_find_by_info()\cell gdbarch.c\cell\row
Called by:\cell initialize_current_architecture()\cell arch-utils.c\cell\row
\cell set_architecture()\cell arch-utils.c\cell\row
\cell set_architecture_from_string()\cell arch-utils.c\cell\row
\cell set_endian()\cell arch-utils.c\cell\row
\cell set_osabi()\cell osabi.c\cell\row
\cell set_osabi_from_string()\cell osabi.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function generic_convert_register_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int generic_convert_register_p ( int regnum, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Used in:\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function generic_in_function_epilogue_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int generic_in_function_epilogue_p ( struct gdbarch* gdbarch, CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Used in:\cell gdbarch.c\cell\cell\row
\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function generic_in_solib_return_trampoline()\par}
{\s5\f1\fs20\ql\sb50\sa50 int generic_in_solib_return_trampoline ( CORE_ADDR pc, const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Used in:\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function generic_instruction_nullified()\par}
{\s5\f1\fs20\ql\sb50\sa50 int generic_instruction_nullified ( struct gdbarch* gdbarch, struct regcache* regcache )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function generic_register_byte()\par}
{\s5\f1\fs20\ql\sb50\sa50 int generic_register_byte ( int regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Calls: \cell gdbarch_num_pseudo_regs()\cell gdbarch.c\cell\row
\cell gdbarch_num_regs()\cell gdbarch.c\cell\row
\cell generic_register_size()\cell arch-utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Used in:\cell gdbarch.c\cell\cell\row
\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_register_byte_p()\cell gdbarch.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function generic_register_size()\par}
{\s5\f1\fs20\ql\sb50\sa50 int generic_register_size ( int regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Calls: \cell gdbarch_num_pseudo_regs()\cell gdbarch.c\cell\row
\cell gdbarch_num_regs()\cell gdbarch.c\cell\row
\cell gdbarch_register_type()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell generic_register_byte()\cell arch-utils.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function generic_remote_translate_xfer_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 void generic_remote_translate_xfer_address ( struct gdbarch* gdbarch, struct regcache* regcache, CORE_ADDR gdb_addr, int gdb_len, CORE_ADDR* rem_addr, int* rem_len )\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function generic_skip_solib_resolver()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR generic_skip_solib_resolver ( struct gdbarch* gdbarch, CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Used in:\cell gdbarch.c\cell\cell\row
\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function generic_skip_trampoline_code()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR generic_skip_trampoline_code ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Used in:\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function initialize_current_architecture()\par}
{\s5\f1\fs20\ql\sb50\sa50 void initialize_current_architecture ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell gdbarch_info_init()\cell arch-utils.c\cell\row
\cell gdbarch_printable_names()\cell gdbarch.c\cell\row
\cell gdbarch_update_p()\cell arch-utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  add_alias_cmd(), add_setshow_enum_cmd(), bfd_scan_arch(), strchr(), strcmp(), strncmp()\cell\cell\row
Called by:\cell gdb_init()\cell top.c\cell\row
Refs Func:\cell set_architecture()\cell arch-utils.c\cell\row
\cell show_architecture()\cell arch-utils.c\cell\row
Refs Var:\cell default_bfd_arch\cell arch-utils.c\cell\row
\cell default_bfd_vec\cell arch-utils.c\cell\row
\cell set_architecture_string\cell arch-utils.c\cell\row
\cell  setlist, showlist, target_name\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function legacy_extract_return_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 void legacy_extract_return_value ( struct type* type, struct regcache* regcache, gdb_byte* valbuf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell deprecated_grub_regcache_for_registers()\cell regcache.c\cell\row
\cell gdbarch_deprecated_extract_return_value()\cell gdbarch.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function legacy_pc_in_sigtramp()\par}
{\s5\f1\fs20\ql\sb50\sa50 int legacy_pc_in_sigtramp ( CORE_ADDR pc, char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Calls: \cell  strcmp()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function legacy_register_sim_regno()\par}
{\s5\f1\fs20\ql\sb50\sa50 int legacy_register_sim_regno ( int regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Calls: \cell gdbarch_num_regs()\cell gdbarch.c\cell\row
\cell gdbarch_register_name()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Used in:\cell gdbarch_alloc()\cell gdbarch.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function legacy_return_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum return_value_convention legacy_return_value ( struct gdbarch* gdbarch, struct type* valtype, struct regcache* regcache, gdb_byte* readbuf, const gdb_byte* writebuf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Calls: \cell gdbarch_deprecated_use_struct_convention()\cell gdbarch.c\cell\row
\cell gdbarch_extract_return_value()\cell gdbarch.c\cell\row
\cell gdbarch_store_return_value()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Used in:\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\cell gdbarch_return_value_p()\cell gdbarch.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function legacy_store_return_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 void legacy_store_return_value ( struct type* type, struct regcache* regcache, const gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_deprecated_store_return_value()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_regcache\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function legacy_virtual_frame_pointer()\par}
{\s5\f1\fs20\ql\sb50\sa50 void legacy_virtual_frame_pointer ( CORE_ADDR pc, int* frame_regnum, long* frame_offset )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_deprecated_fp_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_num_regs()\cell gdbarch.c\cell\row
\cell gdbarch_sp_regnum()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function no_op_reg_to_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 int no_op_reg_to_regnum ( int reg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Used in:\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function selected_architecture_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* selected_architecture_name ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Refs Var:\cell set_architecture_string\cell arch-utils.c\cell\row
\cell target_architecture_auto\cell arch-utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function selected_byte_order()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum bfd_endian selected_byte_order ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Refs Var:\cell target_byte_order\cell arch-utils.c\cell\row
\cell target_byte_order_auto\cell arch-utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_architecture_from_string()\par}
{\s5\f1\fs20\ql\sb50\sa50 int set_architecture_from_string ( const char* new_arch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell arch-utils.h\cell\cell\row
Calls: \cell gdbarch_info_init()\cell arch-utils.c\cell\row
\cell gdbarch_update_p()\cell arch-utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  bfd_scan_arch(), xstrdup()\cell\cell\row
Called by:\cell captured_main()\cell main.c\cell\row
Refs Var:\cell set_architecture_string\cell arch-utils.c\cell\row
\cell target_architecture_auto\cell arch-utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_from_file()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_from_file ( bfd* abfd )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell deprecated_current_gdbarch_select_hack()\cell gdbarch.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gdbarch_from_bfd()\cell arch-utils.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell target_architecture_auto\cell arch-utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_architecture()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_architecture ( const char* ignore_args, int from_tty, struct cmd_list_element* c )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_info_init()\cell arch-utils.c\cell\row
\cell gdbarch_update_p()\cell arch-utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell show_architecture()\cell arch-utils.c\cell\row
\cell  bfd_scan_arch(), strcmp()\cell\cell\row
Used in:\cell initialize_current_architecture()\cell arch-utils.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\cell set_architecture_string\cell arch-utils.c\cell\row
\cell target_architecture_auto\cell arch-utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_endian()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_endian ( const char* ignore_args, int from_tty, struct cmd_list_element* c )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_info_init()\cell arch-utils.c\cell\row
\cell gdbarch_update_p()\cell arch-utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell show_endian()\cell arch-utils.c\cell\row
Used in:\cell _initialize_gdbarch_utils()\cell arch-utils.c\cell\row
Refs Var:\cell endian_auto\cell arch-utils.c\cell\row
\cell endian_big\cell arch-utils.c\cell\row
\cell endian_little\cell arch-utils.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell set_endian_string\cell arch-utils.c\cell\row
\cell target_byte_order_auto\cell arch-utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_architecture()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_architecture ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
\cell gdbarch_bfd_arch_info()\cell gdbarch.c\cell\row
Called by:\cell set_architecture()\cell arch-utils.c\cell\row
Used in:\cell initialize_current_architecture()\cell arch-utils.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell target_architecture_auto\cell arch-utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_endian()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_endian ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell ui_out_field_string()\cell ui-out.c\cell\row
\cell ui_out_is_mi_like_p()\cell ui-out.c\cell\row
Called by:\cell set_endian()\cell arch-utils.c\cell\row
Used in:\cell _initialize_gdbarch_utils()\cell arch-utils.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell target_byte_order_auto\cell arch-utils.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
}
