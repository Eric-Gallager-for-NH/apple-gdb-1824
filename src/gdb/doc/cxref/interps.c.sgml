<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF interps.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for interps.c of gdb.cxref.
<author>cxref

<sect>File interps.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;event-loop.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;event-top.h&quot;</tt>
<itemize>
<item><tt>#include &lt;signal.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;interps.h&quot;</tt>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;completer.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;top.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
</itemize>

<sect1>Type struct interp

<p>
<itemize>
<item><tt>struct interp</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const char* name;</tt><newline>
<item><tt>struct interp* next;</tt><newline>
<item><tt>void* data;</tt><newline>
<item><tt>int inited;</tt><newline>
<item><tt>struct ui_out* interpreter_out;</tt><newline>
<item><tt>const struct interp_procs* procs;</tt><newline>
<item><tt>int quiet_p;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Local Variables

<p>
<bf>interp_list</bf><newline>
<tt>static struct interp* interp_list</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>interp_add()
<item>interp_lookup()
<item>interpreter_completer()
<item>list_interpreter_cmd()
</itemize>
</descrip>
<p>
<bf>current_interpreter</bf><newline>
<tt>static struct interp* current_interpreter</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>current_interp()
<item>current_interp_command_loop()
<item>current_interp_display_prompt_p()
<item>current_interp_named_p()
<item>interp_quiet_p()
<item>interp_set()
<item>interp_ui_out()
<item>set_interpreter_cmd()
</itemize>
</descrip>
<p>
<bf>interpreter_initialized</bf><newline>
<tt>static int interpreter_initialized</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>initialize_interps()
<item>interp_add()
</itemize>
</descrip>

<sect1>Global Function _initialize_interpreter()

<p><tt>void _initialize_interpreter ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_cmd(), add_setshow_string_cmd(), set_cmd_completer()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>interpreter_completer()  :  interps.c
<item>interpreter_exec_cmd()  :  interps.c
<item>list_interpreter_cmd()  :  interps.c
<item>set_interpreter_cmd()  :  interps.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>interpreter_p  :  main.c
<item>cmdlist, infolist, setlist, showlist
</itemize>
</descrip>

<sect1>Global Function clear_interpreter_hooks()

<p><tt>void clear_interpreter_hooks ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_gdb_event_hooks()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>deprecated_call_command_hook  :  top.c
<item>deprecated_command_loop_hook  :  top.c
<item>deprecated_context_hook  :  top.c
<item>deprecated_create_breakpoint_hook  :  top.c
<item>deprecated_delete_breakpoint_hook  :  top.c
<item>deprecated_error_begin_hook  :  utils.c
<item>deprecated_error_hook  :  top.c
<item>deprecated_init_ui_hook  :  top.c
<item>deprecated_interactive_hook  :  top.c
<item>deprecated_memory_changed_hook  :  top.c
<item>deprecated_modify_breakpoint_hook  :  top.c
<item>deprecated_print_frame_info_listing_hook  :  top.c
<item>deprecated_query_hook  :  top.c
<item>deprecated_readline_begin_hook  :  top.c
<item>deprecated_readline_end_hook  :  top.c
<item>deprecated_readline_hook  :  top.c
<item>deprecated_register_changed_hook  :  top.c
<item>deprecated_registers_changed_hook  :  top.c
<item>deprecated_target_wait_hook  :  top.c
<item>deprecated_warning_hook  :  top.c
</itemize>
</descrip>

<sect1>Global Function current_interp()

<p><tt>struct interp* current_interp ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>interp_set_ui_out()  :  interps.c
<item>start_event_loop()  :  event-loop.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_interpreter  :  interps.c
</itemize>
</descrip>

<sect1>Global Function current_interp_command_loop()

<p><tt>void current_interp_command_loop ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cli_command_loop()  :  event-top.c
<item>deprecated_command_loop_hook()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>captured_command_loop()  :  main.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_interpreter  :  interps.c
<item>deprecated_command_loop_hook  :  top.c
</itemize>
</descrip>

<sect1>Global Function current_interp_display_prompt_p()

<p><tt>int current_interp_display_prompt_p ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>display_gdb_prompt()  :  event-top.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_interpreter  :  interps.c
</itemize>
</descrip>

<sect1>Global Function current_interp_named_p()

<p><tt>int current_interp_named_p ( const char* interp_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>captured_main()  :  main.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_interpreter  :  interps.c
</itemize>
</descrip>

<sect1>Global Function interp_add()

<p><tt>void interp_add ( struct interp* interp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>initialize_interps()  :  interps.c
<item>internal_error()  :  utils.c
<item>interp_lookup()  :  interps.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>interp_list  :  interps.c
<item>interpreter_initialized  :  interps.c
</itemize>
</descrip>

<sect1>Global Function interp_complete()

<p><tt>int interp_complete ( struct interp* interp, char* word, char* command_buffer, int cursor, int limit )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.h
</itemize>
</descrip>

<sect1>Global Function interp_exec()

<p><tt>struct gdb_exception interp_exec ( struct interp* interp, const char* command_str )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>interpreter_exec_cmd()  :  interps.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>exception_none
</itemize>
</descrip>

<sect1>Global Function interp_exec_p()

<p><tt>int interp_exec_p ( struct interp* interp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.h
</itemize>
</descrip>

<sect1>Global Function interp_lookup()

<p><tt>struct interp* interp_lookup ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>captured_main()  :  main.c
<item>interp_add()  :  interps.c
<item>interpreter_exec_cmd()  :  interps.c
<item>set_interpreter_cmd()  :  interps.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>interp_list  :  interps.c
</itemize>
</descrip>

<sect1>Global Function interp_new()

<p><tt>struct interp* interp_new ( const char* name, void* data, struct ui_out* uiout, const struct interp_procs* procs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>xstrdup()
</itemize>
</descrip>

<sect1>Global Function interp_quiet_p()

<p><tt>int interp_quiet_p ( struct interp* interp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>interp_set()  :  interps.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_interpreter  :  interps.c
</itemize>
</descrip>

<sect1>Global Function interp_set()

<p><tt>struct interp* interp_set ( struct interp* interp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>display_gdb_prompt()  :  event-top.c
<item>error()  :  utils.c
<item>internal_error()  :  utils.c
<item>interp_quiet_p()  :  interps.c
<item>interp_set()  :  interps.c
<item>ui_out_flush()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>xfree()  :  utils.c
<item>__builtin___snprintf_chk(), __builtin_object_size(), strcmp(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>captured_main()  :  main.c
<item>interp_set()  :  interps.c
<item>interpreter_exec_cmd()  :  interps.c
<item>set_interpreter_cmd()  :  interps.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_interpreter  :  interps.c
<item>interpreter_p  :  main.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function interp_set_quiet()

<p><tt>int interp_set_quiet ( struct interp* interp, int quiet )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>interpreter_exec_cmd()  :  interps.c
</itemize>
</descrip>

<sect1>Global Function interp_set_ui_out()

<p><tt>struct ui_out* interp_set_ui_out ( struct interp* interp, struct ui_out* new_uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>current_interp()  :  interps.c
<item>error()  :  utils.c
</itemize>
</descrip>

<sect1>Global Function interp_ui_out()

<p><tt>struct ui_out* interp_ui_out ( struct interp* interp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>start_event_loop()  :  event-loop.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_interpreter  :  interps.c
</itemize>
</descrip>

<sect1>Global Function list_interpreter_cmd()

<p><tt>void list_interpreter_cmd ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>make_cleanup_ui_out_list_begin_end()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_interpreter()  :  interps.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>interp_list  :  interps.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function initialize_interps()

<p><tt>static void initialize_interps ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>interp_add()  :  interps.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>interpreter_initialized  :  interps.c
</itemize>
</descrip>

<sect1>Local Function interpreter_completer()

<p><tt>static char** interpreter_completer ( const char* text, char* word )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>__builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin___strncpy_chk(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), __inline_strncpy_chk(), strlen(), strncmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_interpreter()  :  interps.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>interp_list  :  interps.c
</itemize>
</descrip>

<sect1>Local Function interpreter_exec_cmd()

<p><tt>static void interpreter_exec_cmd ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>interp_exec()  :  interps.c
<item>interp_lookup()  :  interps.c
<item>interp_set()  :  interps.c
<item>interp_set_quiet()  :  interps.c
<item>buildargv()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_interpreter()  :  interps.c
</itemize>
</descrip>

<sect1>Local Function set_interpreter_cmd()

<p><tt>static void set_interpreter_cmd ( const char* args, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>interps.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dont_repeat()  :  top.c
<item>error()  :  utils.c
<item>interp_lookup()  :  interps.c
<item>interp_set()  :  interps.c
<item>cmd_type(), xstrdup()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_interpreter()  :  interps.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_interpreter  :  interps.c
<item>interpreter_p  :  main.c
</itemize>
</descrip>

</article>
