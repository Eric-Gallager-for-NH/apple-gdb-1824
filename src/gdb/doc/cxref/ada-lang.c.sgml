<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF ada-lang.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for ada-lang.c of gdb.cxref.
<author>cxref

<sect>File ada-lang.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>ada_create_fundamental_type()  :  ada-lang.c
<item>ada_dump_subexp_body()  :  ada-lang.c
<item>ada_error()  :  ada-exp.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_get_gdb_completer_word_break_characters()  :  ada-lang.c
<item>ada_la_decode()  :  ada-lang.c
<item>ada_language_arch_info()  :  ada-lang.c
<item>ada_lookup_symbol_nonlocal()  :  ada-lang.c
<item>ada_op_name()  :  ada-lang.c
<item>ada_operator_length()  :  ada-lang.c
<item>ada_print_subexp()  :  ada-lang.c
<item>ada_print_type()  :  ada-typeprint.c
<item>ada_printchar()  :  ada-valprint.c
<item>ada_printstr()  :  ada-valprint.c
<item>ada_val_print()  :  ada-valprint.c
<item>ada_value_print()  :  ada-valprint.c
<item>basic_lookup_transparent_type()  :  symtab.c
<item>emit_char()  :  ada-lang.c
<item>parse()  :  ada-lang.c
<item>resolve()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_exp_descriptor  :  ada-lang.c
<item>ada_op_print_tab  :  ada-lang.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;stdarg.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;parser-defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;c-lang.h&quot;</tt>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;macroexp.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/hashtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;ada-lang.h&quot;</tt>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;completer.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_stat.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;sys/stat.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;infcall.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;dictionary.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define ADA_RETAIN_DOTS 0</tt><newline>
<p>
<tt>#define TRUNCATION_TOWARDS_ZERO</tt><newline>
<p>
<tt>#define MAX_ADA_DIMENS</tt><newline>
<p>
<tt>#define EXP_OPCODE_OPERATORS</tt><newline>
<p>
<tt>#define ADA_OPERATORS</tt><newline>
<p>
<tt>#define OP_DEFN( op, len, args, binop )</tt><newline>
<p>
<tt>#define OP_DEFN( op, len, args, binop )</tt><newline>
<p>
<tt>#define OP_DEFN( op, len, args, binop )</tt><newline>

<sect1>Type struct tag_args

<p>
<itemize>
<item><tt>struct tag_args</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct value* tag;</tt><newline>
<item><tt>char* name;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type enum ada_primitive_types

<p>
<itemize>
<item><tt>enum ada_primitive_types</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>ada_primitive_type_int;</tt><newline>
<item><tt>ada_primitive_type_long;</tt><newline>
<item><tt>ada_primitive_type_short;</tt><newline>
<item><tt>ada_primitive_type_char;</tt><newline>
<item><tt>ada_primitive_type_float;</tt><newline>
<item><tt>ada_primitive_type_double;</tt><newline>
<item><tt>ada_primitive_type_void;</tt><newline>
<item><tt>ada_primitive_type_long_long;</tt><newline>
<item><tt>ada_primitive_type_long_double;</tt><newline>
<item><tt>ada_primitive_type_natural;</tt><newline>
<item><tt>ada_primitive_type_positive;</tt><newline>
<item><tt>ada_primitive_type_system_address;</tt><newline>
<item><tt>nr_ada_primitive_types;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable ada_opname_table

<p>
<tt>const struct ada_opname_map ada_opname_table[]</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>symtab.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_decode()  :  ada-lang.c
<item>ada_decoded_op_name()  :  ada-lang.c
<item>ada_encode()  :  ada-lang.c
<item>is_suppressed_name()  :  ada-lang.c
<item>string_to_operator()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Variable ada_language_defn

<p>
<tt>const struct language_defn ada_language_defn</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ada_language()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>varsize_limit</bf><newline>
<tt>static unsigned int varsize_limit</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ada_language()
<item>ada_template_to_fixed_record_type_1()
<item>check_size()
<item>to_fixed_array_type()
</itemize>
</descrip>
<p>
<bf>ada_completer_word_break_characters</bf><newline>
<tt>static const char* ada_completer_word_break_characters</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>ada_get_gdb_completer_word_break_characters()
</itemize>
</descrip>
<p>
<bf>ADA_MAIN_PROGRAM_SYMBOL_NAME</bf><newline>
<tt>static const char ADA_MAIN_PROGRAM_SYMBOL_NAME[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>ada_main_name()
</itemize>
</descrip>
<p>
<bf>warning_limit</bf><newline>
<tt>static int warning_limit</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>lim_warning()
</itemize>
</descrip>
<p>
<bf>warnings_issued</bf><newline>
<tt>static int warnings_issued</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>lim_warning()
<item>parse()
</itemize>
</descrip>
<p>
<bf>symbol_list_obstack</bf><newline>
<tt>static struct obstack symbol_list_obstack</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ada_language()
<item>ada_lookup_symbol_list()
</itemize>
</descrip>
<p>
<bf>decoded_names_store</bf><newline>
<tt>static struct htab* decoded_names_store</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ada_language()
<item>ada_decode_symbol()
</itemize>
</descrip>
<p>
<bf>bound_name</bf><newline>
<tt>static const char* bound_name[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>desc_index_type()
<item>desc_one_bound()
</itemize>
</descrip>
<p>
<bf>attribute_names</bf><newline>
<tt>static const char* attribute_names[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>ada_attribute_name()
</itemize>
</descrip>
<p>
<bf>ada_op_print_tab</bf><newline>
<tt>static const struct op_print ada_op_print_tab[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
</descrip>
<p>
<bf>ada_exp_descriptor</bf><newline>
<tt>static const struct exp_descriptor ada_exp_descriptor</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
</descrip>

<sect1>Global Function _initialize_ada_language()

<p><tt>void _initialize_ada_language ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_language()  :  language.c
<item>_obstack_begin(), htab_create_alloc()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>streq()  :  utils.c
<item>xcalloc()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>htab_hash_string()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_language_defn  :  ada-lang.c
<item>decoded_names_store  :  ada-lang.c
<item>symbol_list_obstack  :  ada-lang.c
<item>varsize_limit  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_aligned_type()

<p><tt>struct type* ada_aligned_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_aligned_type()  :  ada-lang.c
<item>ada_get_base_type()  :  ada-lang.c
<item>ada_is_aligner_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_aligned_type()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_print_type()  :  ada-typeprint.c
<item>printable_val_type()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Global Function ada_aligned_value_addr()

<p><tt>const gdb_byte* ada_aligned_value_addr ( struct type* type, const gdb_byte* valaddr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_aligned_value_addr()  :  ada-lang.c
<item>ada_is_aligner_type()  :  ada-lang.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_aligned_value_addr()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Global Function ada_array_arity()

<p><tt>int ada_array_arity ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>desc_arity()  :  ada-lang.c
<item>desc_base_type()  :  ada-lang.c
<item>desc_bounds_type()  :  ada-lang.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_array_element_type()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_index_type()  :  ada-lang.c
<item>ada_is_string_type()  :  ada-lang.c
<item>ada_type_of_array()  :  ada-lang.c
<item>make_array_descriptor()  :  ada-lang.c
<item>print_array_type()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Global Function ada_array_bound()

<p><tt>struct value* ada_array_bound ( struct value* arr, int n, int which )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_array_bound()  :  ada-lang.c
<item>ada_array_bound_from_type()  :  ada-lang.c
<item>ada_is_packed_array_type()  :  ada-lang.c
<item>ada_is_simple_array_type()  :  ada-lang.c
<item>decode_packed_array()  :  ada-lang.c
<item>desc_bounds()  :  ada-lang.c
<item>desc_one_bound()  :  ada-lang.c
<item>value_from_longest()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_array_bound()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>make_array_descriptor()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_array_bound_from_type()

<p><tt>long ada_array_bound_from_type ( struct type* arr_type, int n, int which, struct type** typep )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_find_parallel_type()  :  ada-lang.c
<item>ada_is_packed_array_type()  :  ada-lang.c
<item>ada_is_simple_array_type()  :  ada-lang.c
<item>decode_packed_array_type()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>to_fixed_range_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_array_bound()  :  ada-lang.c
<item>ada_array_length()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>builtin_type_long  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function ada_array_element_type()

<p><tt>struct type* ada_array_element_type ( struct type* type, int nindices )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_array_arity()  :  ada-lang.c
<item>ada_check_typedef()  :  ada-lang.c
<item>desc_base_type()  :  ada-lang.c
<item>desc_data_type()  :  ada-lang.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_is_string_type()  :  ada-lang.c
<item>ada_type_of_array()  :  ada-lang.c
<item>empty_array()  :  ada-lang.c
<item>print_array_type()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Global Function ada_array_length()

<p><tt>struct value* ada_array_length ( struct value* arr, int n )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_array_bound_from_type()  :  ada-lang.c
<item>ada_array_length()  :  ada-lang.c
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_is_packed_array_type()  :  ada-lang.c
<item>ada_is_simple_array_type()  :  ada-lang.c
<item>decode_packed_array()  :  ada-lang.c
<item>desc_bounds()  :  ada-lang.c
<item>desc_one_bound()  :  ada-lang.c
<item>value_as_long()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_array_length()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function ada_attribute_name()

<p><tt>const char* ada_attribute_name ( enum exp_opcode n )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_print_subexp()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>attribute_names  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_check_typedef()

<p><tt>struct type* ada_check_typedef ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_find_any_type()  :  ada-lang.c
<item>check_typedef()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_args_match()  :  ada-lang.c
<item>ada_array_arity()  :  ada-lang.c
<item>ada_array_element_type()  :  ada-lang.c
<item>ada_array_length()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_is_aligner_type()  :  ada-lang.c
<item>ada_is_array_descriptor_type()  :  ada-lang.c
<item>ada_is_direct_array_type()  :  ada-lang.c
<item>ada_is_packed_array_type()  :  ada-lang.c
<item>ada_is_parent_field()  :  ada-lang.c
<item>ada_is_simple_array_type()  :  ada-lang.c
<item>ada_is_string_type()  :  ada-lang.c
<item>ada_lookup_struct_elt_type()  :  ada-lang.c
<item>ada_parent_type()  :  ada-lang.c
<item>ada_print_scalar()  :  ada-valprint.c
<item>ada_print_type()  :  ada-typeprint.c
<item>ada_resolve_function()  :  ada-lang.c
<item>ada_search_struct_field()  :  ada-lang.c
<item>ada_to_fixed_type()  :  ada-lang.c
<item>ada_type_match()  :  ada-lang.c
<item>ada_type_of_array()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_value_binop()  :  ada-lang.c
<item>ada_value_primitive_field()  :  ada-lang.c
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>ada_value_struct_elt()  :  ada-lang.c
<item>ada_value_subscript()  :  ada-lang.c
<item>add_defn_to_vec()  :  ada-lang.c
<item>coerce_for_assign()  :  ada-lang.c
<item>coerce_unspec_val_to_type()  :  ada-lang.c
<item>convert_actual()  :  ada-lang.c
<item>decode_packed_array_type()  :  ada-lang.c
<item>desc_base_type()  :  ada-lang.c
<item>desc_bounds()  :  ada-lang.c
<item>desc_bounds_type()  :  ada-lang.c
<item>dynamic_template_type()  :  ada-lang.c
<item>ensure_lval()  :  ada-lang.c
<item>fat_pntr_bounds_bitsize()  :  ada-lang.c
<item>find_struct_field()  :  ada-lang.c
<item>make_array_descriptor()  :  ada-lang.c
<item>packed_array_type()  :  ada-lang.c
<item>possible_user_operator_p()  :  ada-lang.c
<item>print_record()  :  ada-valprint.c
<item>static_unwrap_type()  :  ada-lang.c
<item>template_to_static_fixed_type()  :  ada-lang.c
<item>to_fixed_array_type()  :  ada-lang.c
<item>to_static_fixed_type()  :  ada-lang.c
<item>unwrap_value()  :  ada-lang.c
<item>value_subscript_packed()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_coerce_to_simple_array_ptr()

<p><tt>struct value* ada_coerce_to_simple_array_ptr ( struct value* arr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_is_array_descriptor_type()  :  ada-lang.c
<item>ada_is_packed_array_type()  :  ada-lang.c
<item>ada_type_of_array()  :  ada-lang.c
<item>decode_packed_array()  :  ada-lang.c
<item>desc_data()  :  ada-lang.c
<item>value_cast()  :  valops.c
<item>value_copy()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_coerce_to_simple_array()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Global Function ada_coerce_to_simple_array_type()

<p><tt>struct type* ada_coerce_to_simple_array_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_type_of_array()  :  ada-lang.c
<item>deprecated_set_value_type()  :  value.c
<item>value_free_to_mark()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_mark()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_array_type()  :  ada-typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_long  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function ada_convert_actuals()

<p><tt>void ada_convert_actuals ( struct value* func, int nargs, struct value* args[], CORE_ADDR* sp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>convert_actual()  :  ada-lang.c
<item>value_type()  :  value.c
</itemize>
</descrip>

<sect1>Global Function ada_decode()

<p><tt>const char* ada_decode ( const char* encoded )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>grow_vect()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>__builtin___snprintf_chk(), __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), isalnum(), isalpha(), isdigit(), isupper(), strcmp(), strlen(), strncmp(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_decode_symbol()  :  ada-lang.c
<item>ada_la_decode()  :  ada-lang.c
<item>name_lookup()  :  ada-exp.c
<item>write_object_renaming()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_opname_table  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_decode_symbol()

<p><tt>char* ada_decode_symbol ( const struct general_symbol_info* gsymbol )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_decode()  :  ada-lang.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>obsavestring()  :  symfile.c
<item>htab_find_slot(), strlen(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>symbol_demangled_name()  :  symtab.c
<item>symbol_natural_name()  :  symtab.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>decoded_names_store  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_delta()

<p><tt>DOUBLEST ada_delta ( struct type* the_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fixed_type_info()  :  ada-lang.c
<item>sscanf()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_fixed_point_type()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Global Function ada_encode()

<p><tt>char* ada_encode ( const char* decoded )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>grow_vect()  :  ada-lang.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
<item>ada_lookup_symbol()  :  ada-lang.c
<item>resolve_subexp()  :  ada-lang.c
<item>type_from_tag()  :  ada-lang.c
<item>write_var_from_name()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_opname_table  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_enum_name()

<p><tt>const char* ada_enum_name ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>grow_vect()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>__builtin___snprintf_chk(), __builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), isascii(), isdigit(), isprint(), sscanf(), strrchr(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_scalar()  :  ada-valprint.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>print_enum_type()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Global Function ada_evaluate_subexp()

<p><tt>struct value* ada_evaluate_subexp ( struct type* expect_type, struct expression* exp, int* pos, enum noside noside )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_aligned_type()  :  ada-lang.c
<item>ada_array_arity()  :  ada-lang.c
<item>ada_array_bound()  :  ada-lang.c
<item>ada_array_bound_from_type()  :  ada-lang.c
<item>ada_array_element_type()  :  ada-lang.c
<item>ada_array_length()  :  ada-lang.c
<item>ada_attribute_name()  :  ada-lang.c
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_coerce_ref()  :  ada-lang.c
<item>ada_coerce_to_simple_array()  :  ada-lang.c
<item>ada_coerce_to_simple_array_ptr()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_index_type()  :  ada-lang.c
<item>ada_is_aligner_type()  :  ada-lang.c
<item>ada_is_array_descriptor_type()  :  ada-lang.c
<item>ada_is_fixed_point_type()  :  ada-lang.c
<item>ada_is_modular_type()  :  ada-lang.c
<item>ada_is_packed_array_type()  :  ada-lang.c
<item>ada_is_simple_array_type()  :  ada-lang.c
<item>ada_is_tagged_type()  :  ada-lang.c
<item>ada_lookup_struct_elt_type()  :  ada-lang.c
<item>ada_modulus()  :  ada-lang.c
<item>ada_tag_type()  :  ada-lang.c
<item>ada_to_fixed_value()  :  ada-lang.c
<item>ada_to_fixed_value_create()  :  ada-lang.c
<item>ada_type_name()  :  ada-lang.c
<item>ada_type_of_array()  :  ada-lang.c
<item>ada_value_assign()  :  ada-lang.c
<item>ada_value_binop()  :  ada-lang.c
<item>ada_value_equal()  :  ada-lang.c
<item>ada_value_ind()  :  ada-lang.c
<item>ada_value_ptr_subscript()  :  ada-lang.c
<item>ada_value_slice()  :  ada-lang.c
<item>ada_value_slice_ptr()  :  ada-lang.c
<item>ada_value_struct_elt()  :  ada-lang.c
<item>ada_value_subscript()  :  ada-lang.c
<item>ada_value_tag()  :  ada-lang.c
<item>allocate_value()  :  value.c
<item>call_function_by_hand()  :  infcall.c
<item>cast_from_fixed_to_double()  :  ada-lang.c
<item>cast_to_fixed()  :  ada-lang.c
<item>check_size()  :  ada-lang.c
<item>coerce_for_assign()  :  ada-lang.c
<item>coerce_ref()  :  value.c
<item>decode_packed_array_type()  :  ada-lang.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>desc_base_type()  :  ada-lang.c
<item>discrete_type_high_bound()  :  ada-lang.c
<item>discrete_type_low_bound()  :  ada-lang.c
<item>discrete_type_p()  :  ada-lang.c
<item>empty_array()  :  ada-lang.c
<item>error()  :  utils.c
<item>evaluate_subexp()  :  ada-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>evaluate_subexp_with_coercion()  :  eval.c
<item>lang_bool_type()  :  language.c
<item>lim_warning()  :  ada-lang.c
<item>longest_to_int()  :  valprint.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>pos_atr()  :  ada-lang.c
<item>static_unwrap_type()  :  ada-lang.c
<item>symbol_natural_name()  :  symtab.c
<item>to_fixed_array_type()  :  ada-lang.c
<item>to_fixed_range_type()  :  ada-lang.c
<item>to_static_fixed_type()  :  ada-lang.c
<item>unwrap_value()  :  ada-lang.c
<item>value_add()  :  valarith.c
<item>value_addr()  :  valops.c
<item>value_at_lazy()  :  valops.c
<item>value_binop()  :  valarith.c
<item>value_cast()  :  valops.c
<item>value_equal()  :  valarith.c
<item>value_from_longest()  :  value.c
<item>value_ind()  :  valops.c
<item>value_less()  :  valarith.c
<item>value_neg()  :  valarith.c
<item>value_offset()  :  value.c
<item>value_pos_atr()  :  ada-lang.c
<item>value_sub()  :  valarith.c
<item>value_type()  :  value.c
<item>value_val_atr()  :  ada-lang.c
<item>value_zero()  :  valops.c
<item>__builtin_alloca()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>builtin_type_long  :  gdbtypes.c
<item>builtin_type_void  :  gdbtypes.c
<item>demangle  :  utils.c
</itemize>
</descrip>

<sect1>Global Function ada_find_any_symbol()

<p><tt>struct symbol* ada_find_any_symbol ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_selected_block()  :  stack.c
<item>standard_lookup()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_find_any_type()  :  ada-lang.c
<item>ada_find_renaming_symbol()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_find_any_type()

<p><tt>struct type* ada_find_any_type ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_find_any_symbol()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_find_parallel_type()  :  ada-lang.c
<item>ada_get_base_type()  :  ada-lang.c
<item>print_range_type_named()  :  ada-typeprint.c
<item>to_fixed_range_type()  :  ada-lang.c
<item>type_from_tag()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_find_parallel_type()

<p><tt>struct type* ada_find_parallel_type ( struct type* the_type, const char* suffix )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_find_any_type()  :  ada-lang.c
<item>ada_type_name()  :  ada-lang.c
<item>grow_vect()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_array_bound_from_type()  :  ada-lang.c
<item>ada_get_base_type()  :  ada-lang.c
<item>ada_is_aligner_type()  :  ada-lang.c
<item>dynamic_template_type()  :  ada-lang.c
<item>print_array_type()  :  ada-typeprint.c
<item>print_record_type()  :  ada-typeprint.c
<item>print_variant_clauses()  :  ada-typeprint.c
<item>thin_descriptor_type()  :  ada-lang.c
<item>to_fixed_array_type()  :  ada-lang.c
<item>to_fixed_variant_branch_type()  :  ada-lang.c
<item>to_static_fixed_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_find_renaming_symbol()

<p><tt>struct symbol* ada_find_renaming_symbol ( const char* name, struct block* block )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_find_any_symbol()  :  ada-lang.c
<item>block_function()  :  block.c
<item>__builtin___snprintf_chk(), __builtin_alloca(), __builtin_object_size(), strlen(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>name_lookup()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function ada_fixed_to_float()

<p><tt>DOUBLEST ada_fixed_to_float ( struct type* type, long x )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>scaling_factor()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
<item>cast_from_fixed_to_double()  :  ada-lang.c
<item>cast_to_fixed()  :  ada-lang.c
<item>print_fixed_point_type()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Global Function ada_float_to_fixed()

<p><tt>long ada_float_to_fixed ( struct type* type, DOUBLEST x )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>scaling_factor()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cast_to_fixed()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_fold_name()

<p><tt>char* ada_fold_name ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>grow_vect()  :  ada-lang.c
<item>__builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), strlen(), tolower()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_get_base_type()

<p><tt>struct type* ada_get_base_type ( struct type* raw_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_find_any_type()  :  ada-lang.c
<item>ada_find_parallel_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_aligned_type()  :  ada-lang.c
<item>ada_print_type()  :  ada-typeprint.c
<item>ada_template_to_fixed_record_type_1()  :  ada-lang.c
<item>ada_value_struct_elt()  :  ada-lang.c
<item>static_unwrap_type()  :  ada-lang.c
<item>unwrap_value()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_get_field_index()

<p><tt>int ada_get_field_index ( const struct type* type, const char* field_name, int maybe_missing )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>field_name_match()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_in_variant()

<p><tt>int ada_in_variant ( long val, struct type* type, int field_num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_scan_number()  :  ada-lang.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_which_variant_applies()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_index_type()

<p><tt>struct type* ada_index_type ( struct type* type, int n )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_array_arity()  :  ada-lang.c
<item>ada_is_simple_array_type()  :  ada-lang.c
<item>desc_base_type()  :  ada-lang.c
<item>desc_bounds_type()  :  ada-lang.c
<item>desc_index_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function ada_is_aligner_type()

<p><tt>int ada_is_aligner_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_find_parallel_type()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_aligned_type()  :  ada-lang.c
<item>ada_aligned_value_addr()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_print_type()  :  ada-typeprint.c
<item>static_unwrap_type()  :  ada-lang.c
<item>unwrap_value()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_is_array_descriptor_type()

<p><tt>int ada_is_array_descriptor_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>desc_arity()  :  ada-lang.c
<item>desc_bounds_type()  :  ada-lang.c
<item>desc_data_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_coerce_to_simple_array()  :  ada-lang.c
<item>ada_coerce_to_simple_array_ptr()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_is_bogus_array_descriptor()  :  ada-lang.c
<item>ada_is_direct_array_type()  :  ada-lang.c
<item>ada_is_string_type()  :  ada-lang.c
<item>ada_prefer_type()  :  ada-lang.c
<item>ada_print_type()  :  ada-typeprint.c
<item>ada_type_match()  :  ada-lang.c
<item>ada_type_of_array()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_value_print()  :  ada-valprint.c
<item>convert_actual()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_is_bogus_array_descriptor()

<p><tt>int ada_is_bogus_array_descriptor ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_is_array_descriptor_type()  :  ada-lang.c
<item>lookup_struct_elt_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_value_print()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Global Function ada_is_character_type()

<p><tt>int ada_is_character_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_type_name()  :  ada-lang.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_is_string_type()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Global Function ada_is_fixed_point_type()

<p><tt>int ada_is_fixed_point_type ( struct type* the_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fixed_type_info()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_print_type()  :  ada-typeprint.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>cast_to_fixed()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_is_ignored_field()

<p><tt>int ada_is_ignored_field ( struct type* type, int field_num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_field_values()  :  ada-valprint.c
<item>print_record_field_types()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Global Function ada_is_modular_type()

<p><tt>int ada_is_modular_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>base_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_print_type()  :  ada-typeprint.c
<item>decode_packed_array()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_is_object_renaming()

<p><tt>int ada_is_object_renaming ( struct symbol* sym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_renaming_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>name_lookup()  :  ada-exp.c
<item>remove_out_of_scope_renamings()  :  ada-lang.c
<item>write_object_renaming()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function ada_is_others_clause()

<p><tt>int ada_is_others_clause ( struct type* type, int field_num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_which_variant_applies()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_is_packed_array_type()

<p><tt>int ada_is_packed_array_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_type_name()  :  ada-lang.c
<item>desc_base_type()  :  ada-lang.c
<item>strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_array_bound()  :  ada-lang.c
<item>ada_array_bound_from_type()  :  ada-lang.c
<item>ada_array_length()  :  ada-lang.c
<item>ada_coerce_to_simple_array()  :  ada-lang.c
<item>ada_coerce_to_simple_array_ptr()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_prefer_type()  :  ada-lang.c
<item>ada_print_type()  :  ada-typeprint.c
<item>ada_type_of_array()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>print_array_type()  :  ada-typeprint.c
<item>to_fixed_array_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_is_parent_field()

<p><tt>int ada_is_parent_field ( struct type* type, int field_num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_parent_type()  :  ada-lang.c
<item>print_record_field_types()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Global Function ada_is_range_type_name()

<p><tt>int ada_is_range_type_name ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Global Function ada_is_simple_array_type()

<p><tt>int ada_is_simple_array_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_array_bound()  :  ada-lang.c
<item>ada_array_bound_from_type()  :  ada-lang.c
<item>ada_array_length()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_index_type()  :  ada-lang.c
<item>ada_is_string_type()  :  ada-lang.c
<item>print_array_type()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Global Function ada_is_string_type()

<p><tt>int ada_is_string_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_array_arity()  :  ada-lang.c
<item>ada_array_element_type()  :  ada-lang.c
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_is_array_descriptor_type()  :  ada-lang.c
<item>ada_is_character_type()  :  ada-lang.c
<item>ada_is_simple_array_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Global Function ada_is_system_address_type()

<p><tt>int ada_is_system_address_type ( struct type* the_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Global Function ada_is_tag_type()

<p><tt>int ada_is_tag_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_type_name()  :  ada-lang.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_tag_name()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Global Function ada_is_tagged_type()

<p><tt>int ada_is_tagged_type ( struct type* type, int refok )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_lookup_struct_elt_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_to_fixed_type()  :  ada-lang.c
<item>print_record_type()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Global Function ada_is_variant_part()

<p><tt>int ada_is_variant_part ( struct type* type, int field_num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>is_dynamic_field()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_struct_elt_type()  :  ada-lang.c
<item>ada_search_struct_field()  :  ada-lang.c
<item>ada_template_to_fixed_record_type_1()  :  ada-lang.c
<item>find_struct_field()  :  ada-lang.c
<item>print_field_values()  :  ada-valprint.c
<item>print_record_field_types()  :  ada-typeprint.c
<item>variant_field_index()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_is_vax_floating_type()

<p><tt>int ada_is_vax_floating_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_type_name()  :  ada-lang.c
<item>strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
<item>ada_val_print_1()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Global Function ada_is_wrapper_field()

<p><tt>int ada_is_wrapper_field ( struct type* type, int field_num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strcmp(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_struct_elt_type()  :  ada-lang.c
<item>ada_search_struct_field()  :  ada-lang.c
<item>find_struct_field()  :  ada-lang.c
<item>print_field_values()  :  ada-valprint.c
<item>print_record_field_types()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Global Function ada_la_decode()

<p><tt>char* ada_la_decode ( const char* encoded, int options )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_decode()  :  ada-lang.c
<item>xstrdup()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_lookup_simple_minsym()

<p><tt>struct minimal_symbol* ada_lookup_simple_minsym ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_match_name()  :  ada-lang.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>strncmp(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>name_lookup()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function ada_lookup_symbol()

<p><tt>struct symbol* ada_lookup_symbol ( const char* name, const struct block* block0, domain_enum anamespace, int* is_a_field_of_this, struct symtab** symtab )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_encode()  :  ada-lang.c
<item>ada_fold_name()  :  ada-lang.c
<item>ada_lookup_symbol_list()  :  ada-lang.c
<item>block_highest_pc()  :  block.c
<item>fixup_symbol_section()  :  symtab.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>symtab_get_first()  :  objfiles.c
<item>symtab_get_next()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol_nonlocal()  :  ada-lang.c
<item>name_lookup()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function ada_lookup_symbol_list()

<p><tt>int ada_lookup_symbol_list ( const char* name0, const struct block* block0, domain_enum anamespace, struct ada_symbol_info** results )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_add_block_symbols()  :  ada-lang.c
<item>ada_lookup_partial_symbol()  :  ada-lang.c
<item>ada_match_name()  :  ada-lang.c
<item>add_defn_to_vec()  :  ada-lang.c
<item>add_symbols_from_enclosing_procs()  :  ada-lang.c
<item>cache_symbol()  :  ada-lang.c
<item>defns_collected()  :  ada-lang.c
<item>find_pc_symtab()  :  symtab.c
<item>is_nonfunction()  :  ada-lang.c
<item>lookup_cached_symbol()  :  ada-lang.c
<item>num_defns_collected()  :  ada-lang.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>psymtab_get_first()  :  objfiles.c
<item>psymtab_get_next()  :  objfiles.c
<item>psymtab_to_symtab()  :  symfile.c
<item>quit()  :  utils.c
<item>remove_extra_symbols()  :  ada-lang.c
<item>remove_out_of_scope_renamings()  :  ada-lang.c
<item>symtab_get_first()  :  objfiles.c
<item>symtab_get_next()  :  objfiles.c
<item>_obstack_begin(), strncmp(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol()  :  ada-lang.c
<item>block_lookup()  :  ada-exp.c
<item>get_var_value()  :  ada-lang.c
<item>name_lookup()  :  ada-exp.c
<item>resolve_subexp()  :  ada-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>obstack_free()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>quit_flag  :  utils.c
<item>symbol_list_obstack  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_main_name()

<p><tt>char* ada_main_name ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>extract_string()  :  ada-lang.c
<item>lookup_minimal_symbol()  :  minsyms.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_main_name()  :  symtab.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ADA_MAIN_PROGRAM_SYMBOL_NAME  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_match_name()

<p><tt>int ada_match_name ( const char* sym_name, const char* name, int wild )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>is_name_suffix()  :  ada-lang.c
<item>wild_match()  :  ada-lang.c
<item>strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_simple_minsym()  :  ada-lang.c
<item>ada_lookup_symbol_list()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_modulus()

<p><tt>unsigned long ada_modulus ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_print_type()  :  ada-typeprint.c
<item>decode_packed_array()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_name_prefix_len()

<p><tt>int ada_name_prefix_len ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strlen(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
<item>ada_typedef_print()  :  ada-typeprint.c
<item>print_field_values()  :  ada-valprint.c
<item>print_range()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Global Function ada_parent_type()

<p><tt>struct type* ada_parent_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_is_parent_field()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_record_type()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Global Function ada_prefer_type()

<p><tt>int ada_prefer_type ( struct type* type0, struct type* type1 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_is_array_descriptor_type()  :  ada-lang.c
<item>ada_is_packed_array_type()  :  ada-lang.c
<item>ada_renaming_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>name_lookup()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function ada_renaming_type()

<p><tt>const char* ada_renaming_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>type_name_no_tag()  :  gdbtypes.c
<item>strchr(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_is_object_renaming()  :  ada-lang.c
<item>ada_prefer_type()  :  ada-lang.c
<item>name_lookup()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function ada_scan_number()

<p><tt>int ada_scan_number ( const char str[], int k, long* R, int* new_k )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>isdigit()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_in_variant()  :  ada-lang.c
<item>print_choices()  :  ada-typeprint.c
<item>print_range_bound()  :  ada-typeprint.c
<item>to_fixed_range_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_simple_renamed_entity()

<p><tt>char* ada_simple_renamed_entity ( struct symbol* sym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>name_lookup()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function ada_suppress_symbol_printing()

<p><tt>int ada_suppress_symbol_printing ( struct symbol* sym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>is_suppressed_name()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_tag_name()

<p><tt>const char* ada_tag_name ( struct value* tag )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_is_tag_type()  :  ada-lang.c
<item>value_type()  :  value.c
<item>catch_errors()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
<item>type_from_tag()  :  ada-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>ada_tag_name_1()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_tag_type()

<p><tt>struct type* ada_tag_type ( struct value* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_lookup_struct_elt_type()  :  ada-lang.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_template_to_fixed_record_type_1()

<p><tt>struct type* ada_template_to_fixed_record_type_1 ( struct type* type, const gdb_byte* valaddr, CORE_ADDR address, struct value* dval0, int keep_dynamic_fields )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_get_base_type()  :  ada-lang.c
<item>ada_is_variant_part()  :  ada-lang.c
<item>ada_to_fixed_type()  :  ada-lang.c
<item>ada_type_name()  :  ada-lang.c
<item>align_value()  :  ada-lang.c
<item>alloc_type()  :  gdbtypes.c
<item>cond_offset_host()  :  ada-lang.c
<item>cond_offset_target()  :  ada-lang.c
<item>error()  :  utils.c
<item>field_alignment()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>is_dynamic_field()  :  ada-lang.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>to_fixed_variant_branch_type()  :  ada-lang.c
<item>value_free_to_mark()  :  value.c
<item>value_from_contents_and_address()  :  ada-lang.c
<item>value_mark()  :  value.c
<item>warning()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>template_to_fixed_record_type()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>varsize_limit  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_to_fixed_type()

<p><tt>struct type* ada_to_fixed_type ( struct type* type, const gdb_byte* valaddr, CORE_ADDR address, struct value* dval )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_is_tagged_type()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>to_fixed_array_type()  :  ada-lang.c
<item>to_fixed_record_type()  :  ada-lang.c
<item>to_fixed_variant_branch_type()  :  ada-lang.c
<item>to_static_fixed_type()  :  ada-lang.c
<item>type_from_tag()  :  ada-lang.c
<item>value_tag_from_contents_and_address()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_template_to_fixed_record_type_1()  :  ada-lang.c
<item>ada_to_fixed_value_create()  :  ada-lang.c
<item>ada_value_print()  :  ada-valprint.c
<item>ada_value_struct_elt()  :  ada-lang.c
<item>printable_val_type()  :  ada-valprint.c
<item>to_fixed_array_type()  :  ada-lang.c
<item>unwrap_value()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_to_static_fixed_value()

<p><tt>struct value* ada_to_static_fixed_value ( struct value* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>coerce_unspec_val_to_type()  :  ada-lang.c
<item>static_unwrap_type()  :  ada-lang.c
<item>to_static_fixed_type()  :  ada-lang.c
<item>value_type()  :  value.c
</itemize>
</descrip>

<sect1>Global Function ada_type_name()

<p><tt>const char* ada_type_name ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_find_parallel_type()  :  ada-lang.c
<item>ada_is_character_type()  :  ada-lang.c
<item>ada_is_packed_array_type()  :  ada-lang.c
<item>ada_is_tag_type()  :  ada-lang.c
<item>ada_is_vax_floating_type()  :  ada-lang.c
<item>ada_print_type()  :  ada-typeprint.c
<item>ada_template_to_fixed_record_type_1()  :  ada-lang.c
<item>ada_variant_discrim_name()  :  ada-lang.c
<item>ada_vax_float_type_suffix()  :  ada-lang.c
<item>decode_packed_array_type()  :  ada-lang.c
<item>decoded_type_name()  :  ada-typeprint.c
<item>dynamic_template_type()  :  ada-lang.c
<item>equiv_types()  :  ada-lang.c
<item>fixed_type_info()  :  ada-lang.c
<item>is_nondebugging_type()  :  ada-lang.c
<item>is_thin_pntr()  :  ada-lang.c
<item>packed_array_type()  :  ada-lang.c
<item>print_record_type()  :  ada-typeprint.c
<item>static_unwrap_type()  :  ada-lang.c
<item>template_to_static_fixed_type()  :  ada-lang.c
<item>thin_descriptor_type()  :  ada-lang.c
<item>to_record_with_fixed_variant_part()  :  ada-lang.c
<item>unwrap_value()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_type_of_array()

<p><tt>struct type* ada_type_of_array ( struct value* arr, int bounds )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_array_arity()  :  ada-lang.c
<item>ada_array_element_type()  :  ada-lang.c
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_is_array_descriptor_type()  :  ada-lang.c
<item>ada_is_packed_array_type()  :  ada-lang.c
<item>alloc_type()  :  gdbtypes.c
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
<item>decode_packed_array_type()  :  ada-lang.c
<item>desc_bounds()  :  ada-lang.c
<item>desc_data_type()  :  ada-lang.c
<item>desc_one_bound()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>value_as_long()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_coerce_to_simple_array_ptr()  :  ada-lang.c
<item>ada_coerce_to_simple_array_type()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_update_initial_language()

<p><tt>enum language ada_update_initial_language ( enum language lang, struct partial_symtab* main_pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>lookup_minimal_symbol()  :  minsyms.c
</itemize>
</descrip>

<sect1>Global Function ada_value_ind()

<p><tt>struct value* ada_value_ind ( struct value* val0 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_to_fixed_value()  :  ada-lang.c
<item>unwrap_value()  :  ada-lang.c
<item>value_ind()  :  valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_value_struct_elt()  :  ada-lang.c
<item>coerce_for_assign()  :  ada-lang.c
<item>convert_actual()  :  ada-lang.c
<item>decode_packed_array()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_value_primitive_packed_val()

<p><tt>struct value* ada_value_primitive_packed_val ( struct value* obj, const gdb_byte* valaddr, long offset, int bit_offset, size_t bit_size, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>allocate_value()  :  value.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>has_negatives()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>read_memory()  :  corefile.c
<item>set_value_bitpos()  :  value.c
<item>set_value_bitsize()  :  value.c
<item>value_at()  :  valops.c
<item>value_bitpos()  :  value.c
<item>value_contents()  :  value.c
<item>value_lazy()  :  value.c
<item>value_offset()  :  value.c
<item>warning()  :  utils.c
<item>__builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_primitive_field()  :  ada-lang.c
<item>ada_value_struct_elt()  :  ada-lang.c
<item>decode_packed_array()  :  ada-lang.c
<item>print_field_values()  :  ada-valprint.c
<item>val_print_packed_array_elements()  :  ada-valprint.c
<item>value_subscript_packed()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function ada_value_ptr_subscript()

<p><tt>struct value* ada_value_ptr_subscript ( struct value* arr, struct type* type, int arity, struct value** ind )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>get_discrete_bounds()  :  gdbtypes.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>value_add()  :  valarith.c
<item>value_cast()  :  valops.c
<item>value_copy()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_ind()  :  valops.c
<item>value_pos_atr()  :  ada-lang.c
<item>value_sub()  :  valarith.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function ada_value_struct_elt()

<p><tt>struct value* ada_value_struct_elt ( struct value* arg, const char* name, const char* err )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_coerce_ref()  :  ada-lang.c
<item>ada_get_base_type()  :  ada-lang.c
<item>ada_search_struct_field()  :  ada-lang.c
<item>ada_to_fixed_type()  :  ada-lang.c
<item>ada_value_ind()  :  ada-lang.c
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>coerce_ref()  :  value.c
<item>error()  :  utils.c
<item>find_struct_field()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>lookup_reference_type()  :  gdbtypes.c
<item>unpack_pointer()  :  value.c
<item>value_as_address()  :  value.c
<item>value_contents()  :  value.c
<item>value_from_pointer()  :  value.c
<item>value_ind()  :  valops.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_tag_name_1()  :  ada-lang.c
<item>ada_value_tag()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_value_subscript()

<p><tt>struct value* ada_value_subscript ( struct value* arr, int arity, struct value** ind )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_coerce_to_simple_array()  :  ada-lang.c
<item>error()  :  utils.c
<item>value_pos_atr()  :  ada-lang.c
<item>value_subscript()  :  valarith.c
<item>value_subscript_packed()  :  ada-lang.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_value_tag()

<p><tt>struct value* ada_value_tag ( struct value* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_value_struct_elt()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_variant_discrim_name()

<p><tt>const char* ada_variant_discrim_name ( struct type* type0 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_type_name()  :  ada-lang.c
<item>grow_vect()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>__builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_variant_discrim_type()  :  ada-lang.c
<item>ada_which_variant_applies()  :  ada-lang.c
<item>print_variant_part()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Global Function ada_variant_discrim_type()

<p><tt>struct type* ada_variant_discrim_type ( struct type* var_type, struct type* outer_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_lookup_struct_elt_type()  :  ada-lang.c
<item>ada_variant_discrim_name()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_variant_clauses()  :  ada-typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function ada_vax_float_print_function()

<p><tt>struct value* ada_vax_float_print_function ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_vax_float_type_suffix()  :  ada-lang.c
<item>error()  :  utils.c
<item>get_var_value()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Global Function ada_vax_float_type_suffix()

<p><tt>int ada_vax_float_type_suffix ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_type_name()  :  ada-lang.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_vax_float_print_function()  :  ada-lang.c
<item>print_vax_floating_point_type()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Global Function ada_which_variant_applies()

<p><tt>int ada_which_variant_applies ( struct type* var_type, struct type* outer_type, const gdb_byte* outer_valaddr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_in_variant()  :  ada-lang.c
<item>ada_is_others_clause()  :  ada-lang.c
<item>ada_lookup_struct_elt_type()  :  ada-lang.c
<item>ada_variant_discrim_name()  :  ada-lang.c
<item>unpack_long()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_variant_part()  :  ada-valprint.c
<item>to_fixed_variant_branch_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function get_int_var_value()

<p><tt>long get_int_var_value ( char* name, int* flag )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_var_value()  :  ada-lang.c
<item>value_as_long()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_dynamic_range_bound()  :  ada-typeprint.c
<item>to_fixed_range_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function get_selections()

<p><tt>int get_selections ( int* choices, int n_choices, int max_results, int is_all_choice, const char* annotation_suffix )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>command_line_input()  :  top.c
<item>error()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>printf_unfiltered()  :  utils.c
<item>error_no_arg(), getenv(), isspace(), strtol()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>user_select_syms()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

<sect1>Global Function grow_vect()

<p><tt>void* grow_vect ( void* vect, size_t* size, size_t min_size, int element_size )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_decode()  :  ada-lang.c
<item>ada_encode()  :  ada-lang.c
<item>ada_enum_name()  :  ada-lang.c
<item>ada_find_parallel_type()  :  ada-lang.c
<item>ada_fold_name()  :  ada-lang.c
<item>ada_variant_discrim_name()  :  ada-lang.c
<item>print_dynamic_range_bound()  :  ada-typeprint.c
<item>scan_discrim_bound()  :  ada-lang.c
<item>to_fixed_range_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function lookup_symbol_in_language()

<p><tt>struct symbol* lookup_symbol_in_language ( const char* name, const struct block* block, domain_enum domain, enum language lang, int* is_a_field_of_this, struct symtab** symtab )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>lookup_symbol()  :  symtab.c
<item>make_cleanup()  :  utils.c
<item>set_language()  :  language.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>standard_lookup()  :  ada-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>restore_language()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Global Function user_select_syms()

<p><tt>int user_select_syms ( struct ada_symbol_info* syms, int nsyms, int max_results )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
<item>error()  :  utils.c
<item>find_function_start_sal()  :  symtab.c
<item>get_selections()  :  ada-lang.c
<item>printf_unfiltered()  :  utils.c
<item>sort_choices()  :  ada-lang.c
<item>symbol_natural_name()  :  symtab.c
<item>symtab_for_sym()  :  ada-lang.c
<item>__builtin_alloca()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_resolve_function()  :  ada-lang.c
<item>resolve_subexp()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle  :  utils.c
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

<sect1>Global Function value_from_contents_and_address()

<p><tt>struct value* value_from_contents_and_address ( struct type* type, const gdb_byte* valaddr, CORE_ADDR address )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>set_value_lazy()  :  value.c
<item>value_contents_raw()  :  value.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_template_to_fixed_record_type_1()  :  ada-lang.c
<item>ada_to_fixed_value_create()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_value_print()  :  ada-valprint.c
<item>to_record_with_fixed_variant_part()  :  ada-lang.c
<item>value_tag_from_contents_and_address()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_add_block_symbols()

<p><tt>static void ada_add_block_symbols ( struct obstack* obstackp, struct block* block, const char* name, domain_enum domain, struct objfile* objfile, struct symtab* symtab, int wild )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_defn_to_vec()  :  ada-lang.c
<item>dict_iterator_first()  :  dictionary.c
<item>dict_iterator_next()  :  dictionary.c
<item>fixup_symbol_section()  :  symtab.c
<item>is_name_suffix()  :  ada-lang.c
<item>wild_match()  :  ada-lang.c
<item>strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol_list()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_args_match()

<p><tt>static int ada_args_match ( struct symbol* func, struct value** actuals, int n_actuals )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_type_match()  :  ada-lang.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_resolve_function()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_coerce_ref()

<p><tt>static struct value* ada_coerce_ref ( struct value* val0 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_to_fixed_value()  :  ada-lang.c
<item>coerce_ref()  :  value.c
<item>unwrap_value()  :  ada-lang.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_value_struct_elt()  :  ada-lang.c
<item>decode_packed_array()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_coerce_to_simple_array()

<p><tt>static struct value* ada_coerce_to_simple_array ( struct value* arr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_coerce_to_simple_array_ptr()  :  ada-lang.c
<item>ada_is_array_descriptor_type()  :  ada-lang.c
<item>ada_is_packed_array_type()  :  ada-lang.c
<item>decode_packed_array()  :  ada-lang.c
<item>error()  :  utils.c
<item>value_ind()  :  valops.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_value_equal()  :  ada-lang.c
<item>ada_value_subscript()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_create_fundamental_type()

<p><tt>static struct type* ada_create_fundamental_type ( struct objfile* objfile, int adatypeid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_double_bit()  :  gdbarch.c
<item>gdbarch_float_bit()  :  gdbarch.c
<item>gdbarch_int_bit()  :  gdbarch.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>gdbarch_long_double_bit()  :  gdbarch.c
<item>gdbarch_long_long_bit()  :  gdbarch.c
<item>gdbarch_short_bit()  :  gdbarch.c
<item>init_type()  :  gdbtypes.c
<item>warning()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function ada_decoded_op_name()

<p><tt>static const char* ada_decoded_op_name ( enum exp_opcode op )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>resolve_subexp()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_opname_table  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_dump_subexp_body()

<p><tt>static int ada_dump_subexp_body ( struct expression* exp, struct ui_file* stream, int elt )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_forward_operator_length()  :  ada-lang.c
<item>dump_subexp()  :  expprint.c
<item>dump_subexp_body_standard()  :  expprint.c
<item>fprintf_filtered()  :  utils.c
<item>gdb_print_host_address()  :  utils.c
<item>type_print()  :  typeprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_forward_operator_length()

<p><tt>static void ada_forward_operator_length ( struct expression* exp, int pc, int* oplenp, int* argsp )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>ada_dump_subexp_body()  :  ada-lang.c
<item>ada_print_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_get_gdb_completer_word_break_characters()

<p><tt>static const char* ada_get_gdb_completer_word_break_characters ( void )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_completer_word_break_characters  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_is_direct_array_type()

<p><tt>static int ada_is_direct_array_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_is_array_descriptor_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_equal()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_language_arch_info()

<p><tt>static void ada_language_arch_info ( struct gdbarch* current_gdbarch, struct language_arch_info* lai )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_double_bit()  :  gdbarch.c
<item>gdbarch_float_bit()  :  gdbarch.c
<item>gdbarch_int_bit()  :  gdbarch.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>gdbarch_long_double_bit()  :  gdbarch.c
<item>gdbarch_long_long_bit()  :  gdbarch.c
<item>gdbarch_obstack_zalloc()  :  gdbarch.c
<item>gdbarch_short_bit()  :  gdbarch.c
<item>get_builtin_type()  :  gdbtypes.c
<item>init_type()  :  gdbtypes.c
<item>lookup_pointer_type()  :  gdbtypes.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_lookup_partial_symbol()

<p><tt>static struct partial_symbol* ada_lookup_partial_symbol ( struct partial_symtab* pst, const char* name, int global, domain_enum anamespace, int wild )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>is_name_suffix()  :  ada-lang.c
<item>wild_match()  :  ada-lang.c
<item>strcmp(), strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol_list()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_lookup_struct_elt_type()

<p><tt>static struct type* ada_lookup_struct_elt_type ( struct type* type, const char* name, int refok, int noerr, int* dispp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_is_variant_part()  :  ada-lang.c
<item>ada_is_wrapper_field()  :  ada-lang.c
<item>ada_lookup_struct_elt_type()  :  ada-lang.c
<item>error()  :  utils.c
<item>field_name_match()  :  ada-lang.c
<item>fprintf_unfiltered()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>internal_error()  :  utils.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>to_static_fixed_type()  :  ada-lang.c
<item>type_print()  :  typeprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_is_tagged_type()  :  ada-lang.c
<item>ada_lookup_struct_elt_type()  :  ada-lang.c
<item>ada_tag_type()  :  ada-lang.c
<item>ada_variant_discrim_type()  :  ada-lang.c
<item>ada_which_variant_applies()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>gdb_stderr  :  main.c
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

<sect1>Local Function ada_lookup_symbol_nonlocal()

<p><tt>static struct symbol* ada_lookup_symbol_nonlocal ( const char* name, const char* linkage_name, const struct block* block, const domain_enum domain, struct symtab** symtab )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_lookup_symbol()  :  ada-lang.c
<item>block_static_block()  :  block.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_op_name()

<p><tt>static const char* ada_op_name ( enum exp_opcode opcode )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>op_name_standard()  :  expprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_operator_length()

<p><tt>static void ada_operator_length ( struct expression* exp, int pc, int* oplenp, int* argsp )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>operator_length_standard()  :  parse.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_print_subexp()

<p><tt>static void ada_print_subexp ( struct expression* exp, int* pos, struct ui_file* stream, enum precedence prec )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_attribute_name()  :  ada-lang.c
<item>ada_forward_operator_length()  :  ada-lang.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>print_subexp()  :  expprint.c
<item>print_subexp_standard()  :  expprint.c
<item>symbol_natural_name()  :  symtab.c
<item>type_print()  :  typeprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Local Function ada_resolve_function()

<p><tt>static int ada_resolve_function ( struct ada_symbol_info syms[], int nsyms, struct value** args, int nargs, const char* name, struct type* context_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_args_match()  :  ada-lang.c
<item>ada_check_typedef()  :  ada-lang.c
<item>printf_filtered()  :  utils.c
<item>return_match()  :  ada-lang.c
<item>user_select_syms()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>resolve_subexp()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function ada_search_struct_field()

<p><tt>static struct value* ada_search_struct_field ( const char* name, struct value* arg, int offset, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_is_variant_part()  :  ada-lang.c
<item>ada_is_wrapper_field()  :  ada-lang.c
<item>ada_search_struct_field()  :  ada-lang.c
<item>ada_value_primitive_field()  :  ada-lang.c
<item>field_name_match()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_search_struct_field()  :  ada-lang.c
<item>ada_value_struct_elt()  :  ada-lang.c
<item>scan_discrim_bound()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_tag_name_1()

<p><tt>static int ada_tag_name_1 ( void* args0 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_value_struct_elt()  :  ada-lang.c
<item>read_memory_string()  :  corefile.c
<item>value_as_address()  :  value.c
<item>isalpha(), tolower()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_tag_name()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_to_fixed_value()

<p><tt>static struct value* ada_to_fixed_value ( struct value* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_to_fixed_value_create()  :  ada-lang.c
<item>deprecated_value_address_hack()  :  value.c
<item>value_offset()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_coerce_ref()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_value_ind()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_to_fixed_value_create()

<p><tt>static struct value* ada_to_fixed_value_create ( struct type* type0, CORE_ADDR address, struct value* val0 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_to_fixed_type()  :  ada-lang.c
<item>value_from_contents_and_address()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_to_fixed_value()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_type_match()

<p><tt>static int ada_type_match ( struct type* ftype, struct type* atype, int may_deref )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_is_array_descriptor_type()  :  ada-lang.c
<item>ada_type_match()  :  ada-lang.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_args_match()  :  ada-lang.c
<item>ada_type_match()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_value_assign()

<p><tt>static struct value* ada_value_assign ( struct value* toval, struct value* fromval )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>coerce_ref()  :  value.c
<item>deprecated_set_value_type()  :  value.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>deprecated_value_modifiable()  :  value.c
<item>error()  :  utils.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>move_bits()  :  ada-lang.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>read_memory()  :  corefile.c
<item>value_assign()  :  valops.c
<item>value_bitpos()  :  value.c
<item>value_bitsize()  :  value.c
<item>value_cast()  :  valops.c
<item>value_contents()  :  value.c
<item>value_contents_raw()  :  value.c
<item>value_copy()  :  value.c
<item>value_offset()  :  value.c
<item>value_type()  :  value.c
<item>warning()  :  utils.c
<item>write_memory()  :  corefile.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function ada_value_binop()

<p><tt>static struct value* ada_value_binop ( struct value* arg1, struct value* arg2, enum exp_opcode op )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>allocate_value()  :  value.c
<item>base_type()  :  ada-lang.c
<item>coerce_ref()  :  value.c
<item>error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>op_string()  :  expprint.c
<item>store_unsigned_integer()  :  findvar.c
<item>value_as_long()  :  value.c
<item>value_binop()  :  valarith.c
<item>value_contents_raw()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_value_equal()

<p><tt>static int ada_value_equal ( struct value* arg1, struct value* arg2 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_coerce_to_simple_array()  :  ada-lang.c
<item>ada_is_direct_array_type()  :  ada-lang.c
<item>error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_contents()  :  value.c
<item>value_equal()  :  valarith.c
<item>value_type()  :  value.c
<item>memcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_value_primitive_field()

<p><tt>static struct value* ada_value_primitive_field ( struct value* arg1, int offset, int fieldno, struct type* arg_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>value_contents()  :  value.c
<item>value_primitive_field()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_search_struct_field()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_value_slice()

<p><tt>static struct value* ada_value_slice ( struct value* array, int low, int high )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
<item>value_cast()  :  valops.c
<item>value_slice()  :  valops.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ada_value_slice_ptr()

<p><tt>static struct value* ada_value_slice_ptr ( struct value* array_ptr, struct type* type, int low, int high )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
<item>lookup_reference_type()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_as_address()  :  value.c
<item>value_from_pointer()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function add_defn_to_vec()

<p><tt>static void add_defn_to_vec ( struct obstack* obstackp, struct symbol* sym, struct block* block, struct symtab* symtab )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>defns_collected()  :  ada-lang.c
<item>lesseq_defined_than()  :  ada-lang.c
<item>num_defns_collected()  :  ada-lang.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_add_block_symbols()  :  ada-lang.c
<item>ada_lookup_symbol_list()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function add_symbols_from_enclosing_procs()

<p><tt>static void add_symbols_from_enclosing_procs ( struct obstack* obstackp, const char* name, domain_enum anamespace, int wild_match )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol_list()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function align_value()

<p><tt>static unsigned int align_value ( unsigned int off, unsigned int alignment )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>ada_template_to_fixed_record_type_1()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function base_type()

<p><tt>static struct type* base_type ( struct type* type )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>ada_is_modular_type()  :  ada-lang.c
<item>ada_value_binop()  :  ada-lang.c
<item>return_match()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function cache_symbol()

<p><tt>static void cache_symbol ( const char* name, domain_enum anamespace, struct symbol* sym, struct block* block, struct symtab* symtab )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol_list()  :  ada-lang.c
<item>standard_lookup()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function cast_from_fixed_to_double()

<p><tt>static struct value* cast_from_fixed_to_double ( struct value* arg )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_fixed_to_float()  :  ada-lang.c
<item>value_as_long()  :  value.c
<item>value_from_double()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_double  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function cast_to_fixed()

<p><tt>static struct value* cast_to_fixed ( struct type* type, struct value* arg )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_fixed_to_float()  :  ada-lang.c
<item>ada_float_to_fixed()  :  ada-lang.c
<item>ada_is_fixed_point_type()  :  ada-lang.c
<item>value_as_double()  :  value.c
<item>value_as_long()  :  value.c
<item>value_cast()  :  valops.c
<item>value_copy()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_double  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function check_size()

<p><tt>static void check_size ( struct type* the_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>internal_error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>coerce_unspec_val_to_type()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>varsize_limit  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function coerce_for_assign()

<p><tt>static struct value* coerce_for_assign ( struct type* type, struct value* val )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_value_ind()  :  ada-lang.c
<item>deprecated_set_value_type()  :  value.c
<item>error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function coerce_unspec_val_to_type()

<p><tt>static struct value* coerce_unspec_val_to_type ( struct value* val, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>allocate_value()  :  value.c
<item>check_size()  :  ada-lang.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>set_value_bitpos()  :  value.c
<item>set_value_bitsize()  :  value.c
<item>set_value_lazy()  :  value.c
<item>value_bitpos()  :  value.c
<item>value_bitsize()  :  value.c
<item>value_contents()  :  value.c
<item>value_contents_raw()  :  value.c
<item>value_lazy()  :  value.c
<item>value_offset()  :  value.c
<item>value_type()  :  value.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_to_static_fixed_value()  :  ada-lang.c
<item>decode_packed_array()  :  ada-lang.c
<item>unwrap_value()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function cond_offset_host()

<p><tt>static const gdb_byte* cond_offset_host ( const gdb_byte* valaddr, long offset )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>ada_template_to_fixed_record_type_1()  :  ada-lang.c
<item>to_record_with_fixed_variant_part()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function cond_offset_target()

<p><tt>static CORE_ADDR cond_offset_target ( CORE_ADDR address, long offset )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>ada_template_to_fixed_record_type_1()  :  ada-lang.c
<item>to_record_with_fixed_variant_part()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function convert_actual()

<p><tt>static struct value* convert_actual ( struct value* actual, struct type* formal_type0, CORE_ADDR* sp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_is_array_descriptor_type()  :  ada-lang.c
<item>ada_value_ind()  :  ada-lang.c
<item>allocate_value()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>desc_data()  :  ada-lang.c
<item>ensure_lval()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>make_array_descriptor()  :  ada-lang.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_addr()  :  valops.c
<item>value_contents()  :  value.c
<item>value_contents_raw()  :  value.c
<item>value_type()  :  value.c
<item>warning()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_convert_actuals()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function decode_packed_array()

<p><tt>static struct value* decode_packed_array ( struct value* arr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_coerce_ref()  :  ada-lang.c
<item>ada_is_modular_type()  :  ada-lang.c
<item>ada_modulus()  :  ada-lang.c
<item>ada_value_ind()  :  ada-lang.c
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>coerce_unspec_val_to_type()  :  ada-lang.c
<item>decode_packed_array_type()  :  ada-lang.c
<item>error()  :  utils.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_array_bound()  :  ada-lang.c
<item>ada_array_length()  :  ada-lang.c
<item>ada_coerce_to_simple_array()  :  ada-lang.c
<item>ada_coerce_to_simple_array_ptr()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function decode_packed_array_type()

<p><tt>static struct type* decode_packed_array_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_type_name()  :  ada-lang.c
<item>desc_base_type()  :  ada-lang.c
<item>get_selected_block()  :  stack.c
<item>lim_warning()  :  ada-lang.c
<item>packed_array_type()  :  ada-lang.c
<item>standard_lookup()  :  ada-lang.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), sscanf(), strlen(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_array_bound_from_type()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_type_of_array()  :  ada-lang.c
<item>decode_packed_array()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function defns_collected()

<p><tt>static struct ada_symbol_info* defns_collected ( struct obstack* obstackp, int finish )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol_list()  :  ada-lang.c
<item>add_defn_to_vec()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function desc_arity()

<p><tt>static int desc_arity ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>desc_base_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_array_arity()  :  ada-lang.c
<item>ada_is_array_descriptor_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function desc_base_type()

<p><tt>static struct type* desc_base_type ( struct type* the_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_array_arity()  :  ada-lang.c
<item>ada_array_element_type()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_index_type()  :  ada-lang.c
<item>ada_is_packed_array_type()  :  ada-lang.c
<item>decode_packed_array_type()  :  ada-lang.c
<item>desc_arity()  :  ada-lang.c
<item>desc_bound_bitpos()  :  ada-lang.c
<item>desc_bound_bitsize()  :  ada-lang.c
<item>desc_bounds_type()  :  ada-lang.c
<item>desc_data_type()  :  ada-lang.c
<item>desc_index_type()  :  ada-lang.c
<item>fat_pntr_bounds_bitpos()  :  ada-lang.c
<item>fat_pntr_bounds_bitsize()  :  ada-lang.c
<item>fat_pntr_data_bitpos()  :  ada-lang.c
<item>fat_pntr_data_bitsize()  :  ada-lang.c
<item>is_thick_pntr()  :  ada-lang.c
<item>is_thin_pntr()  :  ada-lang.c
<item>make_array_descriptor()  :  ada-lang.c
<item>thin_descriptor_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function desc_bound_bitpos()

<p><tt>static int desc_bound_bitpos ( struct type* type, int i, int which )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>desc_base_type()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_array_descriptor()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function desc_bound_bitsize()

<p><tt>static int desc_bound_bitsize ( struct type* type, int i, int which )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>desc_base_type()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_array_descriptor()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function desc_bounds()

<p><tt>static struct value* desc_bounds ( struct value* arr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>deprecated_value_address_hack()  :  value.c
<item>desc_bounds_type()  :  ada-lang.c
<item>error()  :  utils.c
<item>is_thick_pntr()  :  ada-lang.c
<item>is_thin_pntr()  :  ada-lang.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>thin_descriptor_type()  :  ada-lang.c
<item>value_as_long()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_offset()  :  value.c
<item>value_struct_elt()  :  valops.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_array_bound()  :  ada-lang.c
<item>ada_array_length()  :  ada-lang.c
<item>ada_type_of_array()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function desc_bounds_type()

<p><tt>static struct type* desc_bounds_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>desc_base_type()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>is_thin_pntr()  :  ada-lang.c
<item>lookup_struct_elt_type()  :  gdbtypes.c
<item>thin_descriptor_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_array_arity()  :  ada-lang.c
<item>ada_index_type()  :  ada-lang.c
<item>ada_is_array_descriptor_type()  :  ada-lang.c
<item>desc_bounds()  :  ada-lang.c
<item>make_array_descriptor()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function desc_data()

<p><tt>static struct value* desc_data ( struct value* arr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>is_thick_pntr()  :  ada-lang.c
<item>is_thin_pntr()  :  ada-lang.c
<item>thin_data_pntr()  :  ada-lang.c
<item>value_struct_elt()  :  valops.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_coerce_to_simple_array_ptr()  :  ada-lang.c
<item>convert_actual()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function desc_data_type()

<p><tt>static struct type* desc_data_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>desc_base_type()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>is_thick_pntr()  :  ada-lang.c
<item>is_thin_pntr()  :  ada-lang.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>lookup_struct_elt_type()  :  gdbtypes.c
<item>thin_descriptor_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_array_element_type()  :  ada-lang.c
<item>ada_is_array_descriptor_type()  :  ada-lang.c
<item>ada_type_of_array()  :  ada-lang.c
<item>thin_data_pntr()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function desc_index_type()

<p><tt>static struct type* desc_index_type ( struct type* type, int i )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>desc_base_type()  :  ada-lang.c
<item>lookup_struct_elt_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_index_type()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bound_name  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function desc_one_bound()

<p><tt>static struct value* desc_one_bound ( struct value* bounds, int i, int which )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_struct_elt()  :  valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_array_bound()  :  ada-lang.c
<item>ada_array_length()  :  ada-lang.c
<item>ada_type_of_array()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bound_name  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function discrete_type_high_bound()

<p><tt>static struct value* discrete_type_high_bound ( struct type* type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>max_of_type()  :  ada-lang.c
<item>value_from_longest()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function discrete_type_low_bound()

<p><tt>static struct value* discrete_type_low_bound ( struct type* type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>min_of_type()  :  ada-lang.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>value_from_longest()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function discrete_type_p()

<p><tt>static int discrete_type_p ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>pos_atr()  :  ada-lang.c
<item>value_val_atr()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function dynamic_template_type()

<p><tt>static struct type* dynamic_template_type ( struct type* type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_find_parallel_type()  :  ada-lang.c
<item>ada_type_name()  :  ada-lang.c
<item>strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>to_fixed_record_type()  :  ada-lang.c
<item>to_static_fixed_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function emit_char()

<p><tt>static void emit_char ( int c, struct ui_file* stream, int quoter )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_emit_char()  :  ada-valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
</descrip>

<sect1>Local Function empty_array()

<p><tt>static struct value* empty_array ( struct type* arr_type, int low )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_array_element_type()  :  ada-lang.c
<item>allocate_value()  :  value.c
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function empty_record()

<p><tt>static struct type* empty_record ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>alloc_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>to_fixed_variant_branch_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function encoded_ordered_before()

<p><tt>static int encoded_ordered_before ( const char* N0, const char* N1 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>atoi(), isdigit(), strcmp(), strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>sort_choices()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function ensure_lval()

<p><tt>static struct value* ensure_lval ( struct value* val, CORE_ADDR* sp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>gdbarch_frame_align()  :  gdbarch.c
<item>gdbarch_frame_align_p()  :  gdbarch.c
<item>gdbarch_inner_than()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_contents_raw()  :  value.c
<item>value_type()  :  value.c
<item>write_memory()  :  corefile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>convert_actual()  :  ada-lang.c
<item>make_array_descriptor()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function equiv_types()

<p><tt>static int equiv_types ( struct type* type0, struct type* type1 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_type_name()  :  ada-lang.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>lesseq_defined_than()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function evaluate_subexp()

<p><tt>static struct value* evaluate_subexp ( struct type* expect_type, struct expression* exp, int* pos, enum noside noside )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function evaluate_subexp_type()

<p><tt>static struct value* evaluate_subexp_type ( struct expression* exp, int* pos )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>resolve_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function extract_string()

<p><tt>static void extract_string ( CORE_ADDR addr, char* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>target_read_memory()  :  target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_main_name()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function fat_pntr_bounds_bitpos()

<p><tt>static int fat_pntr_bounds_bitpos ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>desc_base_type()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_array_descriptor()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function fat_pntr_bounds_bitsize()

<p><tt>static int fat_pntr_bounds_bitsize ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>desc_base_type()  :  ada-lang.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_array_descriptor()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function fat_pntr_data_bitpos()

<p><tt>static int fat_pntr_data_bitpos ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>desc_base_type()  :  ada-lang.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_array_descriptor()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function fat_pntr_data_bitsize()

<p><tt>static int fat_pntr_data_bitsize ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>desc_base_type()  :  ada-lang.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_array_descriptor()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function field_alignment()

<p><tt>static unsigned int field_alignment ( struct type* type, int f )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>warning()  :  utils.c
<item>atoi(), isdigit(), strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_template_to_fixed_record_type_1()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function field_name_match()

<p><tt>static int field_name_match ( const char* field_name, const char* target )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>strcmp(), strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_get_field_index()  :  ada-lang.c
<item>ada_lookup_struct_elt_type()  :  ada-lang.c
<item>ada_search_struct_field()  :  ada-lang.c
<item>find_struct_field()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function find_struct_field()

<p><tt>static int find_struct_field ( const char* name, struct type* type, int offset, struct type** field_type_p, int* byte_offset_p, int* bit_offset_p, int* bit_size_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_is_variant_part()  :  ada-lang.c
<item>ada_is_wrapper_field()  :  ada-lang.c
<item>field_name_match()  :  ada-lang.c
<item>find_struct_field()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_struct_elt()  :  ada-lang.c
<item>find_struct_field()  :  ada-lang.c
<item>value_tag_from_contents_and_address()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function fixed_type_info()

<p><tt>static const char* fixed_type_info ( struct type* type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_type_name()  :  ada-lang.c
<item>fixed_type_info()  :  ada-lang.c
<item>strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_delta()  :  ada-lang.c
<item>ada_is_fixed_point_type()  :  ada-lang.c
<item>fixed_type_info()  :  ada-lang.c
<item>scaling_factor()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function get_var_value()

<p><tt>static struct value* get_var_value ( const char* name, char* err_msg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_lookup_symbol_list()  :  ada-lang.c
<item>error()  :  utils.c
<item>get_selected_block()  :  stack.c
<item>value_of_variable()  :  valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_vax_float_print_function()  :  ada-lang.c
<item>get_int_var_value()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function has_negatives()

<p><tt>static int has_negatives ( struct type* type )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>ada_value_primitive_packed_val()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function integer_type_p()

<p><tt>static int integer_type_p ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>integer_type_p()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>integer_type_p()  :  ada-lang.c
<item>possible_user_operator_p()  :  ada-lang.c
<item>value_val_atr()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function is_dot_digits_suffix()

<p><tt>static int is_dot_digits_suffix ( const char* str )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>isdigit()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>wild_match()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function is_dynamic_field()

<p><tt>static int is_dynamic_field ( struct type* templ_type, int field_num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_is_variant_part()  :  ada-lang.c
<item>ada_template_to_fixed_record_type_1()  :  ada-lang.c
<item>template_to_static_fixed_type()  :  ada-lang.c
<item>to_fixed_variant_branch_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function is_name_suffix()

<p><tt>static int is_name_suffix ( const char* str )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>isdigit(), strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_add_block_symbols()  :  ada-lang.c
<item>ada_lookup_partial_symbol()  :  ada-lang.c
<item>ada_match_name()  :  ada-lang.c
<item>wild_match()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function is_nondebugging_type()

<p><tt>static int is_nondebugging_type ( struct type* type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_type_name()  :  ada-lang.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remove_extra_symbols()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function is_nonfunction()

<p><tt>static int is_nonfunction ( struct ada_symbol_info syms[], int n )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol_list()  :  ada-lang.c
<item>resolve_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function is_package_name()

<p><tt>static int is_package_name ( const char* name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>standard_lookup()  :  ada-lang.c
<item>xstrprintf()  :  utils.c
<item>strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>renaming_is_visible()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function is_suffix()

<p><tt>static int is_suffix ( const char* str, const char* suffix )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>is_thin_pntr()  :  ada-lang.c
<item>thin_descriptor_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function is_suppressed_name()

<p><tt>static int is_suppressed_name ( const char* str )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>isupper(), strlen(), strncmp(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_suppress_symbol_printing()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_opname_table  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function is_thick_pntr()

<p><tt>static int is_thick_pntr ( struct type* type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>desc_base_type()  :  ada-lang.c
<item>lookup_struct_elt_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>desc_bounds()  :  ada-lang.c
<item>desc_data()  :  ada-lang.c
<item>desc_data_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function is_thin_pntr()

<p><tt>static int is_thin_pntr ( struct type* the_type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_type_name()  :  ada-lang.c
<item>desc_base_type()  :  ada-lang.c
<item>is_suffix()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>desc_bounds()  :  ada-lang.c
<item>desc_bounds_type()  :  ada-lang.c
<item>desc_data()  :  ada-lang.c
<item>desc_data_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function lesseq_defined_than()

<p><tt>static int lesseq_defined_than ( struct symbol* sym0, struct symbol* sym1 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>equiv_types()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_defn_to_vec()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function lim_warning()

<p><tt>static void lim_warning ( const char* format, ... )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>vwarning()  :  utils.c
<item>__builtin_va_end(), __builtin_va_start()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>decode_packed_array_type()  :  ada-lang.c
<item>to_fixed_range_type()  :  ada-lang.c
<item>value_subscript_packed()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>warning_limit  :  ada-lang.c
<item>warnings_issued  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function lookup_cached_symbol()

<p><tt>static int lookup_cached_symbol ( const char* name, domain_enum anamespace, struct symbol** sym, struct block** block, struct symtab** symtab )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol_list()  :  ada-lang.c
<item>standard_lookup()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function make_array_descriptor()

<p><tt>static struct value* make_array_descriptor ( struct type* atype, struct value* arr, CORE_ADDR* sp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_array_arity()  :  ada-lang.c
<item>ada_array_bound()  :  ada-lang.c
<item>ada_check_typedef()  :  ada-lang.c
<item>allocate_value()  :  value.c
<item>deprecated_value_address_hack()  :  value.c
<item>desc_base_type()  :  ada-lang.c
<item>desc_bound_bitpos()  :  ada-lang.c
<item>desc_bound_bitsize()  :  ada-lang.c
<item>desc_bounds_type()  :  ada-lang.c
<item>ensure_lval()  :  ada-lang.c
<item>fat_pntr_bounds_bitpos()  :  ada-lang.c
<item>fat_pntr_bounds_bitsize()  :  ada-lang.c
<item>fat_pntr_data_bitpos()  :  ada-lang.c
<item>fat_pntr_data_bitsize()  :  ada-lang.c
<item>modify_general_field()  :  ada-lang.c
<item>value_addr()  :  valops.c
<item>value_as_long()  :  value.c
<item>value_contents_writeable()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>convert_actual()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function max_of_size()

<p><tt>static long max_of_size ( int size )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>max_of_type()  :  ada-lang.c
<item>min_of_size()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function max_of_type()

<p><tt>static long max_of_type ( struct type* t )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>max_of_size()  :  ada-lang.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>umax_of_size()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>discrete_type_high_bound()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function min_of_size()

<p><tt>static long min_of_size ( int size )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>max_of_size()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>min_of_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function min_of_type()

<p><tt>static long min_of_type ( struct type* t )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>min_of_size()  :  ada-lang.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>discrete_type_low_bound()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function modify_general_field()

<p><tt>static void modify_general_field ( char* addr, long fieldval, int bitpos, int bitsize )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>modify_field()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_array_descriptor()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function move_bits()

<p><tt>static void move_bits ( gdb_byte* target, int targ_offset, const gdb_byte* source, int src_offset, int n )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_byte_order()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_assign()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function num_defns_collected()

<p><tt>static int num_defns_collected ( struct obstack* obstackp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol_list()  :  ada-lang.c
<item>add_defn_to_vec()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function numeric_type_p()

<p><tt>static int numeric_type_p ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>numeric_type_p()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>numeric_type_p()  :  ada-lang.c
<item>possible_user_operator_p()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function packed_array_type()

<p><tt>static struct type* packed_array_type ( struct type* type, long* elt_bits )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_type_name()  :  ada-lang.c
<item>alloc_type()  :  gdbtypes.c
<item>create_array_type()  :  gdbtypes.c
<item>get_discrete_bounds()  :  gdbtypes.c
<item>internal_error()  :  utils.c
<item>packed_array_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_packed_array_type()  :  ada-lang.c
<item>packed_array_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function parse()

<p><tt>static int parse ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_parse()  :  ada-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>warnings_issued  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function pos_atr()

<p><tt>static long pos_atr ( struct value* arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>discrete_type_p()  :  ada-lang.c
<item>error()  :  utils.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>value_as_long()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>value_pos_atr()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function possible_user_operator_p()

<p><tt>static int possible_user_operator_p ( enum exp_opcode op, struct value* args[] )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>integer_type_p()  :  ada-lang.c
<item>numeric_type_p()  :  ada-lang.c
<item>scalar_type_p()  :  ada-lang.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>resolve_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function remove_extra_symbols()

<p><tt>static int remove_extra_symbols ( struct ada_symbol_info* syms, int nsyms )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>is_nondebugging_type()  :  ada-lang.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol_list()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function remove_out_of_scope_renamings()

<p><tt>static int remove_out_of_scope_renamings ( struct ada_symbol_info* syms, int nsyms, struct block* current_block )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_is_object_renaming()  :  ada-lang.c
<item>block_function()  :  block.c
<item>renaming_is_visible()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol_list()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function renaming_is_visible()

<p><tt>static int renaming_is_visible ( const struct symbol* sym, const char* function_name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>is_package_name()  :  ada-lang.c
<item>make_cleanup()  :  utils.c
<item>xget_renaming_scope()  :  ada-lang.c
<item>strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remove_out_of_scope_renamings()  :  ada-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function replace_operator_with_call()

<p><tt>static void replace_operator_with_call ( struct expression** expp, int pc, int nargs, int oplen, struct symbol* sym, struct block* block )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>resolve_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function resolve()

<p><tt>static void resolve ( struct expression** expp, int void_context_p )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>resolve_subexp()  :  ada-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function resolve_subexp()

<p><tt>static struct value* resolve_subexp ( struct expression** expp, int* pos, int deprocedure_p, struct type* context_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_decoded_op_name()  :  ada-lang.c
<item>ada_encode()  :  ada-lang.c
<item>ada_lookup_symbol_list()  :  ada-lang.c
<item>ada_resolve_function()  :  ada-lang.c
<item>contained_in()  :  block.c
<item>error()  :  utils.c
<item>evaluate_subexp_type()  :  ada-lang.c
<item>is_nonfunction()  :  ada-lang.c
<item>longest_to_int()  :  valprint.c
<item>possible_user_operator_p()  :  ada-lang.c
<item>printf_filtered()  :  utils.c
<item>replace_operator_with_call()  :  ada-lang.c
<item>resolve_subexp()  :  ada-lang.c
<item>symbol_natural_name()  :  symtab.c
<item>user_select_syms()  :  ada-lang.c
<item>value_type()  :  value.c
<item>__builtin_alloca()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>resolve()  :  ada-lang.c
<item>resolve_subexp()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle  :  utils.c
<item>innermost_block  :  parse.c
</itemize>
</descrip>

<sect1>Local Function restore_language()

<p><tt>static void restore_language ( void* lang )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>set_language()  :  language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>lookup_symbol_in_language()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function return_match()

<p><tt>static int return_match ( struct type* func_type, struct type* context_type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>base_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_resolve_function()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function scalar_type_p()

<p><tt>static int scalar_type_p ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>possible_user_operator_p()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function scaling_factor()

<p><tt>static DOUBLEST scaling_factor ( struct type* the_type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fixed_type_info()  :  ada-lang.c
<item>sscanf()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_fixed_to_float()  :  ada-lang.c
<item>ada_float_to_fixed()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function scan_discrim_bound()

<p><tt>static int scan_discrim_bound ( char* str, int k, struct value* dval, long* px, int* pnew_k )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_search_struct_field()  :  ada-lang.c
<item>grow_vect()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>value_as_long()  :  value.c
<item>value_type()  :  value.c
<item>__builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), strlen(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>to_fixed_range_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function sort_choices()

<p><tt>static void sort_choices ( struct ada_symbol_info syms[], int nsyms )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>encoded_ordered_before()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>user_select_syms()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function standard_lookup()

<p><tt>static struct symbol* standard_lookup ( const char* name, const struct block* block, domain_enum domain )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cache_symbol()  :  ada-lang.c
<item>lookup_cached_symbol()  :  ada-lang.c
<item>lookup_symbol_in_language()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_find_any_symbol()  :  ada-lang.c
<item>decode_packed_array_type()  :  ada-lang.c
<item>is_package_name()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>block_found  :  symtab.c
</itemize>
</descrip>

<sect1>Local Function static_unwrap_type()

<p><tt>static struct type* static_unwrap_type ( struct type* type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_get_base_type()  :  ada-lang.c
<item>ada_is_aligner_type()  :  ada-lang.c
<item>ada_type_name()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>static_unwrap_type()  :  ada-lang.c
<item>to_static_fixed_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_to_static_fixed_value()  :  ada-lang.c
<item>static_unwrap_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function symtab_for_sym()

<p><tt>static struct symtab* symtab_for_sym ( struct symbol* sym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dict_iterator_first()  :  dictionary.c
<item>dict_iterator_next()  :  dictionary.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>symtab_get_first()  :  objfiles.c
<item>symtab_get_next()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>user_select_syms()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function template_to_fixed_record_type()

<p><tt>static struct type* template_to_fixed_record_type ( struct type* type, const gdb_byte* valaddr, CORE_ADDR address, struct value* dval0 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_template_to_fixed_record_type_1()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>to_fixed_record_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function template_to_static_fixed_type()

<p><tt>static struct type* template_to_static_fixed_type ( struct type* type0 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_type_name()  :  ada-lang.c
<item>alloc_type()  :  gdbtypes.c
<item>is_dynamic_field()  :  ada-lang.c
<item>to_static_fixed_type()  :  ada-lang.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>to_static_fixed_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function thin_data_pntr()

<p><tt>static struct value* thin_data_pntr ( struct value* val )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>deprecated_value_address_hack()  :  value.c
<item>desc_data_type()  :  ada-lang.c
<item>thin_descriptor_type()  :  ada-lang.c
<item>value_cast()  :  valops.c
<item>value_copy()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_offset()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>desc_data()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function thin_descriptor_type()

<p><tt>static struct type* thin_descriptor_type ( struct type* type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_find_parallel_type()  :  ada-lang.c
<item>ada_type_name()  :  ada-lang.c
<item>desc_base_type()  :  ada-lang.c
<item>is_suffix()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>desc_bounds()  :  ada-lang.c
<item>desc_bounds_type()  :  ada-lang.c
<item>desc_data_type()  :  ada-lang.c
<item>thin_data_pntr()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function to_fixed_array_type()

<p><tt>static struct type* to_fixed_array_type ( struct type* type0, struct value* dval, int ignore_too_big )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_find_parallel_type()  :  ada-lang.c
<item>ada_is_packed_array_type()  :  ada-lang.c
<item>ada_to_fixed_type()  :  ada-lang.c
<item>alloc_type()  :  gdbtypes.c
<item>create_array_type()  :  gdbtypes.c
<item>error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>to_fixed_range_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_to_fixed_type()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>varsize_limit  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function to_fixed_range_type()

<p><tt>static struct type* to_fixed_range_type ( const char* name, struct value* dval, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_find_any_type()  :  ada-lang.c
<item>ada_scan_number()  :  ada-lang.c
<item>alloc_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
<item>get_int_var_value()  :  ada-lang.c
<item>grow_vect()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>lim_warning()  :  ada-lang.c
<item>scan_discrim_bound()  :  ada-lang.c
<item>__builtin___strcpy_chk(), __builtin___strncpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), __inline_strncpy_chk(), strchr(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_array_bound_from_type()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>to_fixed_array_type()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function to_fixed_record_type()

<p><tt>static struct type* to_fixed_record_type ( struct type* type0, const gdb_byte* valaddr, CORE_ADDR address, struct value* dval )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>dynamic_template_type()  :  ada-lang.c
<item>template_to_fixed_record_type()  :  ada-lang.c
<item>to_record_with_fixed_variant_part()  :  ada-lang.c
<item>variant_field_index()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_to_fixed_type()  :  ada-lang.c
<item>to_fixed_variant_branch_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function to_fixed_variant_branch_type()

<p><tt>static struct type* to_fixed_variant_branch_type ( struct type* var_type0, const gdb_byte* valaddr, CORE_ADDR address, struct value* dval )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_find_parallel_type()  :  ada-lang.c
<item>ada_which_variant_applies()  :  ada-lang.c
<item>empty_record()  :  ada-lang.c
<item>is_dynamic_field()  :  ada-lang.c
<item>to_fixed_record_type()  :  ada-lang.c
<item>value_contents()  :  value.c
<item>value_type()  :  value.c
<item>variant_field_index()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_template_to_fixed_record_type_1()  :  ada-lang.c
<item>ada_to_fixed_type()  :  ada-lang.c
<item>to_record_with_fixed_variant_part()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function to_record_with_fixed_variant_part()

<p><tt>static struct type* to_record_with_fixed_variant_part ( struct type* type, const gdb_byte* valaddr, CORE_ADDR address, struct value* dval0 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_type_name()  :  ada-lang.c
<item>alloc_type()  :  gdbtypes.c
<item>cond_offset_host()  :  ada-lang.c
<item>cond_offset_target()  :  ada-lang.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>to_fixed_variant_branch_type()  :  ada-lang.c
<item>value_free_to_mark()  :  value.c
<item>value_from_contents_and_address()  :  ada-lang.c
<item>value_mark()  :  value.c
<item>variant_field_index()  :  ada-lang.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>to_fixed_record_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function to_static_fixed_type()

<p><tt>static struct type* to_static_fixed_type ( struct type* type0 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_find_parallel_type()  :  ada-lang.c
<item>dynamic_template_type()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>template_to_static_fixed_type()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_lookup_struct_elt_type()  :  ada-lang.c
<item>ada_to_fixed_type()  :  ada-lang.c
<item>ada_to_static_fixed_value()  :  ada-lang.c
<item>static_unwrap_type()  :  ada-lang.c
<item>template_to_static_fixed_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function type_from_tag()

<p><tt>static struct type* type_from_tag ( struct value* tag )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_encode()  :  ada-lang.c
<item>ada_find_any_type()  :  ada-lang.c
<item>ada_tag_name()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_to_fixed_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function umax_of_size()

<p><tt>static unsigned long umax_of_size ( int size )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>max_of_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function unwrap_value()

<p><tt>static struct value* unwrap_value ( struct value* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_get_base_type()  :  ada-lang.c
<item>ada_is_aligner_type()  :  ada-lang.c
<item>ada_to_fixed_type()  :  ada-lang.c
<item>ada_type_name()  :  ada-lang.c
<item>coerce_unspec_val_to_type()  :  ada-lang.c
<item>deprecated_value_address_hack()  :  value.c
<item>unwrap_value()  :  ada-lang.c
<item>value_offset()  :  value.c
<item>value_struct_elt()  :  valops.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_coerce_ref()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_value_ind()  :  ada-lang.c
<item>unwrap_value()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function value_pos_atr()

<p><tt>static struct value* value_pos_atr ( struct value* arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>pos_atr()  :  ada-lang.c
<item>value_from_longest()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_value_ptr_subscript()  :  ada-lang.c
<item>ada_value_subscript()  :  ada-lang.c
<item>value_subscript_packed()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function value_subscript_packed()

<p><tt>static struct value* value_subscript_packed ( struct value* arr, int arity, struct value** ind )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>deprecated_value_lval_hack()  :  value.c
<item>error()  :  utils.c
<item>get_discrete_bounds()  :  gdbtypes.c
<item>lim_warning()  :  ada-lang.c
<item>value_as_long()  :  value.c
<item>value_pos_atr()  :  ada-lang.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_subscript()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function value_tag_from_contents_and_address()

<p><tt>static struct value* value_tag_from_contents_and_address ( struct type* type, const gdb_byte* valaddr, CORE_ADDR address )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>find_struct_field()  :  ada-lang.c
<item>value_from_contents_and_address()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_to_fixed_type()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function value_val_atr()

<p><tt>static struct value* value_val_atr ( struct type* type, struct value* arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>discrete_type_p()  :  ada-lang.c
<item>error()  :  utils.c
<item>integer_type_p()  :  ada-lang.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>value_as_long()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function variant_field_index()

<p><tt>static int variant_field_index ( struct type* type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_is_variant_part()  :  ada-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>to_fixed_record_type()  :  ada-lang.c
<item>to_fixed_variant_branch_type()  :  ada-lang.c
<item>to_record_with_fixed_variant_part()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function wild_match()

<p><tt>static int wild_match ( const char* patn0, int patn_len, const char* name0 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>is_dot_digits_suffix()  :  ada-lang.c
<item>is_name_suffix()  :  ada-lang.c
<item>__builtin___strcpy_chk(), __builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcpy_chk(), __inline_strncpy_chk(), islower(), strlen(), strncmp(), strrchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_add_block_symbols()  :  ada-lang.c
<item>ada_lookup_partial_symbol()  :  ada-lang.c
<item>ada_match_name()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function xget_renaming_scope()

<p><tt>static char* xget_renaming_scope ( struct type* renaming_type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>type_name_no_tag()  :  gdbtypes.c
<item>xmalloc()  :  utils.c
<item>__builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>renaming_is_visible()  :  ada-lang.c
</itemize>
</descrip>

</article>
