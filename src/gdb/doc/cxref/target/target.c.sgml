<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF target/target.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for target/target.c of gdb.cxref.
<author>cxref

<sect>File target/target.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;errno.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_wait.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/wait.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;dcache.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;signal.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;regcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;event-loop.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;memattr.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objc-lang.h&quot;</tt>
<itemize>
<item><tt>#include &lt;Availability.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;checkpoint.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/dis-asm.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;exec.h&quot;</tt>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
</itemize>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define DEFAULT_ALLOCSIZE 10</tt><newline>
<p>
<tt>#define INHERIT( FIELD, TARGET )</tt><newline>
<p>
<tt>#define de_fault( field, value )</tt><newline>
<p>
<tt>#define MIN( A, B )</tt><newline>

<sect1>Global Variable target_activity_fd

<p>
<tt>int target_activity_fd</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>ada-typeprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>c-typeprint.c
<item>c-valprint.c
<item>coffread.c
<item>corefile.c
<item>cp-valprint.c
<item>dbxread.c
<item>disasm.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>eval.c
<item>event-top.c
<item>expprint.c
<item>f-typeprint.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>kod.c
<item>language.c
<item>m2-typeprint.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>memattr.c
<item>objc-lang.c
<item>objfiles.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>tramp-frame.c
<item>typeprint.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>clear_sigio_trap()  :  inflow.c
<item>handle_sigio()  :  inflow.c
<item>set_sigio_trap()  :  inflow.c
</itemize>
</descrip>

<sect1>Global Variable target_activity_function

<p>
<tt>int (*target_activity_function)(void)</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>ada-typeprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>c-typeprint.c
<item>c-valprint.c
<item>coffread.c
<item>corefile.c
<item>cp-valprint.c
<item>dbxread.c
<item>disasm.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>eval.c
<item>event-top.c
<item>expprint.c
<item>f-typeprint.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>kod.c
<item>language.c
<item>m2-typeprint.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>memattr.c
<item>objc-lang.c
<item>objfiles.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>tramp-frame.c
<item>typeprint.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>clear_sigio_trap()  :  inflow.c
<item>handle_sigio()  :  inflow.c
<item>set_sigio_trap()  :  inflow.c
</itemize>
</descrip>

<sect1>Global Variable current_target

<p>
<tt>struct target_ops current_target</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>ada-typeprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>c-typeprint.c
<item>c-valprint.c
<item>coffread.c
<item>corefile.c
<item>cp-valprint.c
<item>dbxread.c
<item>disasm.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>eval.c
<item>event-top.c
<item>expprint.c
<item>f-typeprint.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>kod.c
<item>language.c
<item>m2-typeprint.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>memattr.c
<item>objc-lang.c
<item>objfiles.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>tramp-frame.c
<item>typeprint.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lookup_struct_elt_type()  :  ada-lang.c
<item>advance_command()  :  infcmd.c
<item>allocate_space_in_inferior()  :  valops.c
<item>allocate_space_in_inferior_malloc()  :  valops.c
<item>async_disable_stdin()  :  event-top.c
<item>async_enable_stdin()  :  event-top.c
<item>async_remote_interrupt()  :  remote.c
<item>attach_command()  :  infcmd.c
<item>backtrace_command_1()  :  stack.c
<item>bpstat_do_actions()  :  breakpoint.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>breakpoint_update()  :  breakpoint.c
<item>catch_exception_command_1()  :  breakpoint.c
<item>catch_info()  :  stack.c
<item>coff_symtab_read()  :  coffread.c
<item>command_handler()  :  event-top.c
<item>compare_sections_command()  :  remote.c
<item>complete_execution()  :  inf-loop.c
<item>continue_command()  :  infcmd.c
<item>cover_target_enable_exception_callback()  :  breakpoint.c
<item>create_breakpoints()  :  breakpoint.c
<item>default_macro_scope()  :  macroscope.c
<item>delete_breakpoint()  :  breakpoint.c
<item>deprecated_safe_get_selected_frame()  :  frame.c
<item>deprecated_write_register_bytes()  :  regcache.c
<item>disable_breakpoints_in_shlibs()  :  breakpoint.c
<item>disable_breakpoints_in_unloaded_shlib()  :  breakpoint.c
<item>disable_exception_catch()  :  breakpoint.c
<item>discard_inferior_status()  :  infrun.c
<item>display_command()  :  printcmd.c
<item>display_gdb_prompt()  :  event-top.c
<item>do_captured_list_thread_ids()  :  thread.c
<item>do_captured_thread_select()  :  thread.c
<item>do_enable_breakpoint()  :  breakpoint.c
<item>do_end_debugger_mode()  :  objc-lang.c
<item>do_monitor_command()  :  target/target.c
<item>dwarf_expr_tls_address()  :  dwarf2loc.c
<item>execute_command()  :  top.c
<item>extended_remote_async_create_inferior()  :  remote.c
<item>fetch_inferior_event()  :  infrun.c
<item>find_function_addr()  :  infcall.c
<item>find_function_in_inferior()  :  valops.c
<item>find_pc_partial_function_impl()  :  blockframe.c
<item>finish_command()  :  infcmd.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>follow_exec()  :  infrun.c
<item>follow_fork()  :  infrun.c
<item>gdb_kod_query()  :  kod.c
<item>get_class_address_from_object()  :  objc-lang.c
<item>get_current_frame()  :  frame.c
<item>get_selected_block()  :  stack.c
<item>get_selected_frame()  :  frame.c
<item>getpkt_sane()  :  remote.c
<item>gnu_v3_update_exception_catchpoints()  :  breakpoint.c
<item>hand_function_call()  :  infcall.c
<item>handle_alarm_while_calling()  :  infcall.c
<item>handle_command()  :  infrun.c
<item>handle_inferior_event()  :  infrun.c
<item>inferior_event_handler()  :  inf-loop.c
<item>info_threads_command()  :  thread.c
<item>insert_bp_location()  :  breakpoint.c
<item>insert_breakpoints()  :  breakpoint.c
<item>insert_catchpoint()  :  breakpoint.c
<item>inside_main_func()  :  frame.c
<item>internal_vproblem()  :  utils.c
<item>interrupt_query()  :  remote.c
<item>interrupt_target_command()  :  infcmd.c
<item>jump_command()  :  infcmd.c
<item>kill_command()  :  inflow.c
<item>kill_if_already_running()  :  infcmd.c
<item>kill_or_be_killed()  :  target/target.c
<item>load_section_callback()  :  symfile.c
<item>lookup_cached_function()  :  value.c
<item>lookup_child_selector_nocache()  :  objc-lang.c
<item>lookup_objc_class()  :  objc-lang.c
<item>lookup_struct_elt_type()  :  gdbtypes.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>maybe_kill_then_attach()  :  target/target.c
<item>maybe_kill_then_create_inferior()  :  target/target.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>new_objc_runtime_get_classname()  :  objc-lang.c
<item>normal_stop()  :  infrun.c
<item>objc_check_safe_to_run_all_threads()  :  objc-lang.c
<item>pid_info()  :  infcmd.c
<item>pop_target()  :  target/target.c
<item>print_command_1()  :  printcmd.c
<item>print_float_info()  :  infcmd.c
<item>print_function_pointer_address()  :  c-valprint.c
<item>print_object_command()  :  objc-lang.c
<item>print_vector_info()  :  infcmd.c
<item>printf_command()  :  printcmd.c
<item>proceed()  :  infrun.c
<item>program_info()  :  infcmd.c
<item>quit()  :  utils.c
<item>quit_confirm()  :  top.c
<item>quit_target()  :  top.c
<item>re_enable_breakpoints_in_shlibs()  :  breakpoint.c
<item>re_exec_1()  :  infcmd.c
<item>read_command_file()  :  top.c
<item>read_dbx_symtab()  :  dbxread.c
<item>read_var_value()  :  findvar.c
<item>readchar()  :  remote.c
<item>reattach_breakpoints()  :  breakpoint.c
<item>record_currthread()  :  remote.c
<item>regcache_raw_read()  :  regcache.c
<item>regcache_raw_write()  :  regcache.c
<item>registers_info()  :  infcmd.c
<item>remote_async()  :  remote.c
<item>remote_async_kill()  :  remote.c
<item>remote_async_resume()  :  remote.c
<item>remote_async_wait()  :  remote.c
<item>remote_can_async_p()  :  remote.c
<item>remote_detach()  :  remote.c
<item>remote_disconnect()  :  remote.c
<item>remote_interrupt()  :  remote.c
<item>remote_is_async_p()  :  remote.c
<item>remote_kill()  :  remote.c
<item>remote_macosx_complete_create_or_attach()  :  remote.c
<item>remote_macosx_open()  :  remote.c
<item>remote_open_1()  :  remote.c
<item>remote_start_remote()  :  remote.c
<item>remote_wait()  :  remote.c
<item>remove_breakpoint()  :  breakpoint.c
<item>reopen_exec_file()  :  corefile.c
<item>restore_inferior_status()  :  infrun.c
<item>resume()  :  infrun.c
<item>run_command_1()  :  infcmd.c
<item>save_inferior_status()  :  infrun.c
<item>set_schedlock_helper()  :  infrun.c
<item>setup_target_debug()  :  target/target.c
<item>signal_command()  :  infcmd.c
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
<item>target_async_mask()  :  target/target.c
<item>target_detach()  :  target/target.c
<item>target_disconnect()  :  target/target.c
<item>target_is_remote()  :  tracepoint.c
<item>target_kill()  :  target/target.c
<item>target_load()  :  target/target.c
<item>target_preopen()  :  target/target.c
<item>target_read_memory()  :  target/target.c
<item>target_resize_to_sections()  :  target/target.c
<item>target_write_memory()  :  target/target.c
<item>tcomplain()  :  target/target.c
<item>term_info()  :  inflow.c
<item>thread_alive()  :  thread.c
<item>thread_apply_all_command()  :  thread.c
<item>thread_apply_command()  :  thread.c
<item>thread_command()  :  thread.c
<item>until_break_command()  :  breakpoint.c
<item>until_command()  :  infcmd.c
<item>update_current_target()  :  target/target.c
<item>update_exception_catchpoints()  :  breakpoint.c
<item>value_allocate_space_in_inferior()  :  valops.c
<item>value_assign()  :  valops.c
<item>value_nsstring()  :  objc-lang.c
<item>varobj_lookup_struct_elt_type_by_index()  :  varobj.c
<item>vwarning()  :  utils.c
<item>wait_for_inferior()  :  infrun.c
<item>watch_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Variable target_dcache

<p>
<tt>DCACHE* target_dcache</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>ada-typeprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>c-typeprint.c
<item>c-valprint.c
<item>coffread.c
<item>corefile.c
<item>cp-valprint.c
<item>dbxread.c
<item>disasm.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>eval.c
<item>event-top.c
<item>expprint.c
<item>f-typeprint.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>kod.c
<item>language.c
<item>m2-typeprint.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>memattr.c
<item>objc-lang.c
<item>objfiles.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>tramp-frame.c
<item>typeprint.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>initialize_targets()  :  target/target.c
<item>mem_delete_command()  :  memattr.c
<item>mem_disable_command()  :  memattr.c
<item>mem_enable_command()  :  memattr.c
<item>memory_xfer_partial()  :  target/target.c
<item>resume()  :  infrun.c
<item>target_load()  :  target/target.c
</itemize>
</descrip>

<sect1>Global Variable gdb_override_async

<p>
<tt>int gdb_override_async</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>ada-typeprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>c-typeprint.c
<item>c-valprint.c
<item>coffread.c
<item>corefile.c
<item>cp-valprint.c
<item>dbxread.c
<item>disasm.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>eval.c
<item>event-top.c
<item>expprint.c
<item>f-typeprint.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>kod.c
<item>language.c
<item>m2-typeprint.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>memattr.c
<item>objc-lang.c
<item>objfiles.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>tramp-frame.c
<item>typeprint.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>advance_command()  :  infcmd.c
<item>bpstat_do_actions()  :  breakpoint.c
<item>command_handler()  :  event-top.c
<item>continue_command()  :  infcmd.c
<item>execute_command()  :  top.c
<item>extended_remote_async_create_inferior()  :  remote.c
<item>finish_command()  :  infcmd.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>gdb_set_async_override()  :  target/target.c
<item>hand_function_call()  :  infcall.c
<item>interrupt_target_command()  :  infcmd.c
<item>jump_command()  :  infcmd.c
<item>proceed()  :  infrun.c
<item>re_exec_1()  :  infcmd.c
<item>read_command_file()  :  top.c
<item>remote_async_resume()  :  remote.c
<item>run_command_1()  :  infcmd.c
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
<item>until_break_command()  :  breakpoint.c
<item>until_command()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Variable deprecated_child_ops

<p>
<tt>struct target_ops deprecated_child_ops</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>ada-typeprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>c-typeprint.c
<item>c-valprint.c
<item>coffread.c
<item>corefile.c
<item>cp-valprint.c
<item>dbxread.c
<item>disasm.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>eval.c
<item>event-top.c
<item>expprint.c
<item>f-typeprint.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>kod.c
<item>language.c
<item>m2-typeprint.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>memattr.c
<item>objc-lang.c
<item>objfiles.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>tramp-frame.c
<item>typeprint.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
</itemize>
</descrip>

<sect1>Global Variable attach_flag

<p>
<tt>int attach_flag</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>captured_main()  :  main.c
<item>clear_sigint_trap()  :  inflow.c
<item>generic_mourn_inferior()  :  target/target.c
<item>quit_confirm()  :  top.c
<item>quit_target()  :  top.c
<item>set_sigint_trap()  :  inflow.c
<item>terminal_inferior()  :  inflow.c
<item>terminal_ours_1()  :  inflow.c
<item>update_solib_list()  :  solib.c
</itemize>
</descrip>

<sect1>Global Variable target_structs

<p>
<tt>struct target_ops** target_structs</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>add_target()  :  target/target.c
<item>find_core_target()  :  target/target.c
<item>find_default_run_target()  :  target/target.c
<item>find_run_target()  :  target/target.c
<item>remove_target_sections()  :  target/target.c
<item>target_resize_to_sections()  :  target/target.c
</itemize>
</descrip>

<sect1>Global Variable target_struct_size

<p>
<tt>unsigned int target_struct_size</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>add_target()  :  target/target.c
<item>find_core_target()  :  target/target.c
<item>find_default_run_target()  :  target/target.c
<item>find_run_target()  :  target/target.c
<item>remove_target_sections()  :  target/target.c
<item>target_resize_to_sections()  :  target/target.c
</itemize>
</descrip>

<sect1>Global Variable target_struct_index

<p>
<tt>unsigned int target_struct_index</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>target/target.c
</itemize>
</descrip>

<sect1>Global Variable target_struct_allocsize

<p>
<tt>unsigned int target_struct_allocsize</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>add_target()  :  target/target.c
</itemize>
</descrip>

<sect1>External Variables

<p>
<bf>show_breakpoint_hit_counts</bf><newline>
<tt>extern int show_breakpoint_hit_counts</tt><newline>
<descrip>
<tag>Defined in:</tag>
<itemize>
<item>show_breakpoint_hit_counts</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>debug_target</bf><newline>
<tt>static struct target_ops debug_target</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>debug_check_is_objfile_loaded()
<item>debug_free_thread_inferior_status()
<item>debug_keep_going()
<item>debug_load_solib()
<item>debug_restore_thread_inferior_status()
<item>debug_save_thread_inferior_status()
<item>debug_to_acknowledge_created_inferior()
<item>debug_to_attach()
<item>debug_to_can_run()
<item>debug_to_can_use_hw_breakpoint()
<item>debug_to_close()
<item>debug_to_create_inferior()
<item>debug_to_detach()
<item>debug_to_disconnect()
<item>debug_to_enable_exception_callback()
<item>debug_to_fetch_registers()
<item>debug_to_files_info()
<item>debug_to_find_exception_catchpoints()
<item>debug_to_find_new_threads()
<item>debug_to_follow_fork()
<item>debug_to_get_current_exception_event()
<item>debug_to_has_exited()
<item>debug_to_insert_breakpoint()
<item>debug_to_insert_exec_catchpoint()
<item>debug_to_insert_fork_catchpoint()
<item>debug_to_insert_hw_breakpoint()
<item>debug_to_insert_vfork_catchpoint()
<item>debug_to_insert_watchpoint()
<item>debug_to_kill()
<item>debug_to_load()
<item>debug_to_lookup_symbol()
<item>debug_to_mourn_inferior()
<item>debug_to_notice_signals()
<item>debug_to_open()
<item>debug_to_pid_to_exec_file()
<item>debug_to_pid_to_str()
<item>debug_to_post_attach()
<item>debug_to_post_startup_inferior()
<item>debug_to_prepare_to_store()
<item>debug_to_rcmd()
<item>debug_to_region_size_ok_for_hw_watchpoint()
<item>debug_to_remove_breakpoint()
<item>debug_to_remove_exec_catchpoint()
<item>debug_to_remove_fork_catchpoint()
<item>debug_to_remove_hw_breakpoint()
<item>debug_to_remove_vfork_catchpoint()
<item>debug_to_remove_watchpoint()
<item>debug_to_reported_exec_events_per_exec_call()
<item>debug_to_resume()
<item>debug_to_stop()
<item>debug_to_stopped_by_watchpoint()
<item>debug_to_stopped_data_address()
<item>debug_to_store_registers()
<item>debug_to_terminal_inferior()
<item>debug_to_terminal_info()
<item>debug_to_terminal_init()
<item>debug_to_terminal_ours()
<item>debug_to_terminal_ours_for_output()
<item>debug_to_terminal_save_ours()
<item>debug_to_thread_alive()
<item>debug_to_wait()
<item>deprecated_debug_xfer_memory()
<item>do_monitor_command()
<item>setup_target_debug()
<item>target_stopped_data_address_p()
</itemize>
</descrip>
<p>
<bf>dummy_target</bf><newline>
<tt>static struct target_ops dummy_target</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>init_dummy_target()
<item>initialize_targets()
</itemize>
</descrip>
<p>
<bf>target_stack</bf><newline>
<tt>static struct target_ops* target_stack</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>pop_target()
<item>push_target()
<item>target_info()
<item>unpush_target()
<item>update_current_target()
</itemize>
</descrip>
<p>
<bf>targetlist</bf><newline>
<tt>static struct cmd_list_element* targetlist</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_target()
</itemize>
</descrip>
<p>
<bf>trust_readonly</bf><newline>
<tt>static int trust_readonly</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>initialize_targets()
<item>memory_xfer_partial()
<item>set_trust_readonly()
</itemize>
</descrip>
<p>
<bf>targetdebug</bf><newline>
<tt>static int targetdebug</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>deprecated_debug_xfer_memory()
<item>initialize_targets()
<item>target_xfer_partial()
<item>update_current_target()
</itemize>
</descrip>
<p>
<bf>debug_target_writes</bf><newline>
<tt>static int debug_target_writes</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>initialize_targets()
<item>target_xfer_partial()
</itemize>
</descrip>
<p>
<bf>targ_desc</bf><newline>
<tt>static const char targ_desc[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>initialize_targets()
</itemize>
</descrip>

<sect1>Global Function add_target()

<p><tt>void add_target ( struct target_ops* t )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>add_cmd(), add_prefix_cmd()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_remote()  :  remote.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>default_xfer_partial()  :  target/target.c
<item>target_command()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>target_struct_allocsize  :  target/target.c
<item>target_struct_size  :  target/target.c
<item>target_structs  :  target/target.c
<item>targetlist  :  target/target.c
<item>cmdlist
</itemize>
</descrip>

<sect1>Global Function debug_to_enable_exception_callback()

<p><tt>int debug_to_enable_exception_callback ( enum exception_event_kind kind, int enable )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Global Function do_restore_target_async_mask()

<p><tt>void do_restore_target_async_mask ( int mask )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>target_async_mask()  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function find_core_target()

<p><tt>struct target_ops* find_core_target ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>core_file_attach()  :  corefile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>target_struct_size  :  target/target.c
<item>target_structs  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function find_default_attach()

<p><tt>void find_default_attach ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_default_run_target()  :  target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>init_dummy_target()  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function find_default_create_inferior()

<p><tt>void find_default_create_inferior ( char* exec_file, char* allargs, char** env, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_default_run_target()  :  target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>init_dummy_target()  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function find_run_target()

<p><tt>struct target_ops* find_run_target ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>follow_exec()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>target_struct_size  :  target/target.c
<item>target_structs  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function find_target_beneath()

<p><tt>struct target_ops* find_target_beneath ( struct target_ops* t )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
</descrip>

<sect1>Global Function gdb_set_async_override()

<p><tt>void gdb_set_async_override ( void* on )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_command_file()  :  top.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>read_command_file()  :  top.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_override_async  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function generic_mourn_inferior()

<p><tt>void generic_mourn_inferior ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_clear_ignore_counts()  :  breakpoint.c
<item>breakpoint_init_inferior()  :  breakpoint.c
<item>registers_changed()  :  regcache.c
<item>reinit_frame_cache()  :  frame.c
<item>reinitialize_objc()  :  objc-lang.c
<item>reopen_exec_file()  :  corefile.c
<item>value_clear_inferior_string_pool()  :  valops.c
<item>checkpoint_clear_inferior(), deprecated_detach_hook()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remote_mourn_1()  :  remote.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>attach_flag  :  target/target.c
<item>deprecated_detach_hook  :  top.c
<item>inferior_ptid  :  infcmd.c
<item>null_ptid  :  infrun.c
<item>show_breakpoint_hit_counts  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function get_target_memory()

<p><tt>void get_target_memory ( struct target_ops* ops, CORE_ADDR addr, gdb_byte* buf, long len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>memory_error()  :  corefile.c
<item>target_read()  :  target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_target_memory_unsigned()  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function get_target_memory_unsigned()

<p><tt>unsigned long get_target_memory_unsigned ( struct target_ops* ops, CORE_ADDR addr, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_unsigned_integer()  :  findvar.c
<item>get_target_memory()  :  target/target.c
<item>internal_error()  :  utils.c
</itemize>
</descrip>

<sect1>Global Function initialize_targets()

<p><tt>void initialize_targets ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>init_dummy_target()  :  target/target.c
<item>push_target()  :  target/target.c
<item>add_com(), add_info(), add_setshow_boolean_cmd(), add_setshow_zinteger_cmd(), dcache_init()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdb_init()  :  top.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_monitor_command()  :  target/target.c
<item>show_targetdebug()  :  target/target.c
<item>show_trust_readonly()  :  target/target.c
<item>target_info()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target_writes  :  target/target.c
<item>dummy_target  :  target/target.c
<item>targ_desc  :  target/target.c
<item>target_dcache  :  target/target.c
<item>targetdebug  :  target/target.c
<item>trust_readonly  :  target/target.c
<item>setdebuglist, setlist, showdebuglist, showlist
</itemize>
</descrip>

<sect1>Global Function length_of_this_instruction()

<p><tt>int length_of_this_instruction ( CORE_ADDR memaddr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdb_disassemble_info_noprint()  :  target/target.c
<item>gdbarch_print_insn()  :  gdbarch.c
<item>ui_out_stream_new()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>x86_analyze_prologue()  :  target/x86-shared-tdep.c
<item>x86_blocks_context_var_copy_pattern_p()  :  target/x86-shared-tdep.c
<item>x86_cxx_virtual_override_thunk_trampline()  :  target/x86-shared-tdep.c
<item>x86_picbase_setup_pattern_p()  :  target/x86-shared-tdep.c
<item>x86_unopt_arg_copy_to_local_stack_p()  :  target/x86-shared-tdep.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function noprocess()

<p><tt>void noprocess ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
<item>nosupport_runtime()  :  target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>update_current_target()  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function normal_pid_to_str()

<p><tt>char* normal_pid_to_str ( ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ptid_get_pid()  :  infrun.c
<item>xsnprintf()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>init_dummy_target()  :  target/target.c
<item>update_current_target()  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function pop_target()

<p><tt>void pop_target ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
<item>target_close()  :  target/target.c
<item>unpush_target()  :  target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>inferior_event_handler()  :  inf-loop.c
<item>remote_macosx_complete_create_or_attach()  :  remote.c
<item>remote_macosx_create_inferior()  :  remote.c
<item>remote_open_1()  :  remote.c
<item>target_preopen()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>gdb_stderr  :  main.c
<item>target_stack  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function push_target()

<p><tt>int push_target ( struct target_ops* t )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
<item>target_close()  :  target/target.c
<item>update_current_target()  :  target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>follow_exec()  :  infrun.c
<item>initialize_targets()  :  target/target.c
<item>remote_open_1()  :  remote.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stderr  :  main.c
<item>target_stack  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function remove_target_sections()

<p><tt>void remove_target_sections ( bfd* abfd )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>target_resize_to_sections()  :  target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>clear_solib()  :  solib.c
<item>free_objfile_internal()  :  objfiles.c
<item>reread_symbols_for_objfile()  :  symfile.c
<item>update_solib_list()  :  solib.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>target_struct_size  :  target/target.c
<item>target_structs  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function set_trust_readonly()

<p><tt>int set_trust_readonly ( int newval )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>default_memory_insert_breakpoint()  :  mem-break.c
<item>default_memory_remove_breakpoint()  :  mem-break.c
<item>set_trust_readonly_cleanup()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>trust_readonly  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function set_trust_readonly_cleanup()

<p><tt>void set_trust_readonly_cleanup ( void* newone )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>set_trust_readonly()  :  target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>default_memory_insert_breakpoint()  :  mem-break.c
<item>default_memory_remove_breakpoint()  :  mem-break.c
</itemize>
</descrip>

<sect1>Global Function store_waitstatus()

<p><tt>void store_waitstatus ( struct target_waitstatus* ourstatus, int hoststatus )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>target_signal_from_host()
</itemize>
</descrip>

<sect1>Global Function target_async_mask()

<p><tt>int target_async_mask ( int mask )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_restore_target_async_mask()  :  target/target.c
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function target_close()

<p><tt>void target_close ( struct target_ops* targ, int quitting )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>debug_to_close()  :  target/target.c
<item>pop_target()  :  target/target.c
<item>push_target()  :  target/target.c
<item>quit_target()  :  top.c
<item>unpush_target()  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function target_detach()

<p><tt>void target_detach ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_hand_call_cleanups()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>captured_main()  :  main.c
<item>detach_command()  :  infcmd.c
<item>quit_target()  :  top.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function target_disconnect()

<p><tt>void target_disconnect ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>disconnect_command()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function target_ignore()

<p><tt>void target_ignore ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>update_current_target()  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function target_kill()

<p><tt>void target_kill ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>attach_command()  :  infcmd.c
<item>kill_command()  :  inflow.c
<item>kill_if_already_running()  :  infcmd.c
<item>kill_or_be_killed()  :  target/target.c
<item>quit_target()  :  top.c
<item>target_preopen()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function target_load()

<p><tt>void target_load ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dcache_invalidate()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>load_command()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>target_dcache  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function target_preopen()

<p><tt>void target_preopen ( int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dont_repeat()  :  top.c
<item>error()  :  utils.c
<item>pop_target()  :  target/target.c
<item>query()  :  utils.c
<item>target_kill()  :  target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remote_open_1()  :  remote.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function target_read()

<p><tt>long target_read ( struct target_ops* ops, enum target_object object, const char* annex, gdb_byte* buf, unsigned long offset, long len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>quit()  :  utils.c
<item>target_read_partial()  :  target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_target_memory()  :  target/target.c
<item>target_read_memory()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Global Function target_read_memory()

<p><tt>int target_read_memory ( CORE_ADDR memaddr, gdb_byte* myaddr, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>target_read()  :  target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_print_value()  :  cp-valprint.c
<item>default_memory_insert_breakpoint()  :  mem-break.c
<item>default_memory_remove_breakpoint()  :  mem-break.c
<item>deprecated_read_memory_nobpt()  :  breakpoint.c
<item>dis_asm_read_memory()  :  disasm.c
<item>dis_asm_read_memory_noprint()  :  target/target.c
<item>extract_string()  :  ada-lang.c
<item>load_progress()  :  symfile.c
<item>partial_memory_read()  :  valprint.c
<item>pascal_object_print_value()  :  p-valprint.c
<item>re_enable_breakpoints_in_shlibs()  :  breakpoint.c
<item>read_memory()  :  corefile.c
<item>search_struct_field()  :  valops.c
<item>search_struct_method()  :  valops.c
<item>target_read_string()  :  target/target.c
<item>val_print_string()  :  valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>symbol_file_add_from_memory()  :  symfile-mem.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function target_read_partial()

<p><tt>long target_read_partial ( struct target_ops* ops, enum target_object object, const char* annex, gdb_byte* buf, unsigned long offset, long len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>target_xfer_partial()  :  target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdb_kod_query()  :  kod.c
<item>target_read()  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function target_read_string()

<p><tt>int target_read_string ( CORE_ADDR memaddr, char** string, int len, int* errnop )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>target_read_memory()  :  target/target.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_subexp_standard()  :  expprint.c
</itemize>
</descrip>

<sect1>Global Function target_resize_to_sections()

<p><tt>int target_resize_to_sections ( struct target_ops* target, int num_added )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>build_target_sections_from_bfd()  :  bfd-target.c
<item>remove_target_sections()  :  target/target.c
<item>update_solib_list()  :  solib.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>target_struct_size  :  target/target.c
<item>target_structs  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function target_section_by_addr()

<p><tt>struct section_table* target_section_by_addr ( struct target_ops* target, CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>target_bfd_xfer_partial()  :  bfd-target.c
</itemize>
</descrip>

<sect1>Global Function target_stopped_data_address_p()

<p><tt>int target_stopped_data_address_p ( struct target_ops* target )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>debug_to_stopped_data_address()  :  target/target.c
<item>return_zero()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function target_write()

<p><tt>long target_write ( struct target_ops* ops, enum target_object object, const char* annex, const gdb_byte* buf, unsigned long offset, long len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>target_write_with_progress()  :  target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>target_write_memory()  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function target_write_memory()

<p><tt>int target_write_memory ( CORE_ADDR memaddr, const gdb_byte* myaddr, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>target_write()  :  target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>default_memory_insert_breakpoint()  :  mem-break.c
<item>default_memory_remove_breakpoint()  :  mem-break.c
<item>write_memory()  :  corefile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function target_write_partial()

<p><tt>long target_write_partial ( struct target_ops* ops, enum target_object object, const char* annex, const gdb_byte* buf, unsigned long offset, long len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>target_xfer_partial()  :  target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>target_write_with_progress()  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function target_write_with_progress()

<p><tt>long target_write_with_progress ( struct target_ops* ops, enum target_object object, const char* annex, const gdb_byte* buf, unsigned long offset, long len, void (*progress)(unsigned long,void*), void* baton )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>quit()  :  utils.c
<item>target_write_partial()  :  target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>load_section_callback()  :  symfile.c
<item>target_write()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Global Function unpush_target()

<p><tt>int unpush_target ( struct target_ops* t )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>target_close()  :  target/target.c
<item>update_current_target()  :  target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>pop_target()  :  target/target.c
<item>remote_mourn_1()  :  remote.c
<item>remote_open_1()  :  remote.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>target_stack  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function update_current_target()

<p><tt>void update_current_target ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>setup_target_debug()  :  target/target.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_kext_command()  :  symfile.c
<item>add_symbol_file_command()  :  symfile.c
<item>push_target()  :  target/target.c
<item>unpush_target()  :  target/target.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>allocate_space_in_inferior_malloc()  :  valops.c
<item>default_region_size_ok_for_hw_watchpoint()  :  target/target.c
<item>default_setup_safe_print()  :  target/target.c
<item>default_terminal_info()  :  target/target.c
<item>default_xfer_partial()  :  target/target.c
<item>maybe_kill_then_attach()  :  target/target.c
<item>maybe_kill_then_create_inferior()  :  target/target.c
<item>memory_insert_breakpoint()  :  mem-break.c
<item>memory_remove_breakpoint()  :  mem-break.c
<item>nomemory()  :  target/target.c
<item>noprocess()  :  target/target.c
<item>normal_pid_to_str()  :  target/target.c
<item>nosupport_runtime()  :  target/target.c
<item>nosymbol()  :  target/target.c
<item>return_minus_one()  :  target/target.c
<item>return_one()  :  target/target.c
<item>return_zero()  :  target/target.c
<item>target_ignore()  :  target/target.c
<item>tcomplain()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>target_stack  :  target/target.c
<item>targetdebug  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function current_xfer_partial()

<p><tt>static long current_xfer_partial ( struct target_ops* ops, enum target_object object, const char* annex, gdb_byte* readbuf, const gdb_byte* writebuf, unsigned long offset, long len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
</descrip>

<sect1>Local Function debug_check_is_objfile_loaded()

<p><tt>static int debug_check_is_objfile_loaded ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_free_thread_inferior_status()

<p><tt>static void debug_free_thread_inferior_status ( void* p )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_keep_going()

<p><tt>static int debug_keep_going ( CORE_ADDR stop_pc )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>paddr()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_load_solib()

<p><tt>static struct value* debug_load_solib ( char* path, char* flags )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>paddr_nz()  :  utils.c
<item>value_as_address()  :  value.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_print_register()

<p><tt>static void debug_print_register ( const char* func, int regno )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>deprecated_read_register_gen()  :  regcache.c
<item>fprintf_unfiltered()  :  utils.c
<item>gdbarch_num_pseudo_regs()  :  gdbarch.c
<item>gdbarch_num_regs()  :  gdbarch.c
<item>gdbarch_register_name()  :  gdbarch.c
<item>paddr_d()  :  utils.c
<item>paddr_nz()  :  utils.c
<item>read_register()  :  regcache.c
<item>register_size()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>debug_to_fetch_registers()  :  target/target.c
<item>debug_to_store_registers()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_restore_thread_inferior_status()

<p><tt>static void debug_restore_thread_inferior_status ( void* p )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_save_thread_inferior_status()

<p><tt>static void* debug_save_thread_inferior_status ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_acknowledge_created_inferior()

<p><tt>static void debug_to_acknowledge_created_inferior ( int pid )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_attach()

<p><tt>static void debug_to_attach ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_can_run()

<p><tt>static int debug_to_can_run ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_can_use_hw_breakpoint()

<p><tt>static int debug_to_can_use_hw_breakpoint ( int type, int cnt, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_close()

<p><tt>static void debug_to_close ( int quitting )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>target_close()  :  target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_create_inferior()

<p><tt>static void debug_to_create_inferior ( char* exec_file, char* args, char** env, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_detach()

<p><tt>static void debug_to_detach ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_disconnect()

<p><tt>static void debug_to_disconnect ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_fetch_registers()

<p><tt>static void debug_to_fetch_registers ( int regno )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>debug_print_register()  :  target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function debug_to_files_info()

<p><tt>static void debug_to_files_info ( struct target_ops* target )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_find_exception_catchpoints()

<p><tt>static struct symtabs_and_lines* debug_to_find_exception_catchpoints ( enum exception_event_kind kind, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_find_new_threads()

<p><tt>static void debug_to_find_new_threads ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fputs_unfiltered()  :  ui-file.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_follow_fork()

<p><tt>static int debug_to_follow_fork ( int follow_child )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_get_current_exception_event()

<p><tt>static struct exception_event_record* debug_to_get_current_exception_event ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_has_exited()

<p><tt>static int debug_to_has_exited ( int pid, int wait_status, int* exit_status )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_insert_breakpoint()

<p><tt>static int debug_to_insert_breakpoint ( CORE_ADDR addr, gdb_byte* save )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>paddr_nz()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_insert_exec_catchpoint()

<p><tt>static void debug_to_insert_exec_catchpoint ( int pid )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_insert_fork_catchpoint()

<p><tt>static void debug_to_insert_fork_catchpoint ( int pid )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_insert_hw_breakpoint()

<p><tt>static int debug_to_insert_hw_breakpoint ( CORE_ADDR addr, gdb_byte* save )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_insert_vfork_catchpoint()

<p><tt>static void debug_to_insert_vfork_catchpoint ( int pid )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_insert_watchpoint()

<p><tt>static int debug_to_insert_watchpoint ( CORE_ADDR addr, int len, int type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_kill()

<p><tt>static void debug_to_kill ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_load()

<p><tt>static void debug_to_load ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_lookup_symbol()

<p><tt>static int debug_to_lookup_symbol ( const char* name, CORE_ADDR* addrp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_mourn_inferior()

<p><tt>static void debug_to_mourn_inferior ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_notice_signals()

<p><tt>static void debug_to_notice_signals ( ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>ptid_get_pid()  :  infrun.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_open()

<p><tt>static void debug_to_open ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_pid_to_exec_file()

<p><tt>static char* debug_to_pid_to_exec_file ( int pid )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_pid_to_str()

<p><tt>static char* debug_to_pid_to_str ( ptid_t pid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>ptid_get_pid()  :  infrun.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_post_attach()

<p><tt>static void debug_to_post_attach ( int pid )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_post_startup_inferior()

<p><tt>static void debug_to_post_startup_inferior ( ptid_t ptid )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>ptid_get_pid()  :  infrun.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_prepare_to_store()

<p><tt>static void debug_to_prepare_to_store ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_rcmd()

<p><tt>static void debug_to_rcmd ( const char* command, struct ui_file* outbuf )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>do_monitor_command()  :  target/target.c
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_region_size_ok_for_hw_watchpoint()

<p><tt>static int debug_to_region_size_ok_for_hw_watchpoint ( int byte_count )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_remove_breakpoint()

<p><tt>static int debug_to_remove_breakpoint ( CORE_ADDR addr, gdb_byte* save )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>paddr_nz()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_remove_exec_catchpoint()

<p><tt>static int debug_to_remove_exec_catchpoint ( int pid )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_remove_fork_catchpoint()

<p><tt>static int debug_to_remove_fork_catchpoint ( int pid )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_remove_hw_breakpoint()

<p><tt>static int debug_to_remove_hw_breakpoint ( CORE_ADDR addr, gdb_byte* save )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_remove_vfork_catchpoint()

<p><tt>static int debug_to_remove_vfork_catchpoint ( int pid )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_remove_watchpoint()

<p><tt>static int debug_to_remove_watchpoint ( CORE_ADDR addr, int len, int type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_reported_exec_events_per_exec_call()

<p><tt>static int debug_to_reported_exec_events_per_exec_call ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_resume()

<p><tt>static void debug_to_resume ( ptid_t ptid, int step, enum target_signal siggnal )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>ptid_get_pid()  :  infrun.c
<item>target_signal_to_name()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_stop()

<p><tt>static void debug_to_stop ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_stopped_by_watchpoint()

<p><tt>static int debug_to_stopped_by_watchpoint ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_stopped_data_address()

<p><tt>static int debug_to_stopped_data_address ( struct target_ops* target, CORE_ADDR* addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
<item>target_stopped_data_address_p()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_store_registers()

<p><tt>static void debug_to_store_registers ( int regno )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>debug_print_register()  :  target/target.c
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_terminal_inferior()

<p><tt>static void debug_to_terminal_inferior ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_terminal_info()

<p><tt>static void debug_to_terminal_info ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_terminal_init()

<p><tt>static void debug_to_terminal_init ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_terminal_ours()

<p><tt>static void debug_to_terminal_ours ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_terminal_ours_for_output()

<p><tt>static void debug_to_terminal_ours_for_output ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_terminal_save_ours()

<p><tt>static void debug_to_terminal_save_ours ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_thread_alive()

<p><tt>static int debug_to_thread_alive ( ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>ptid_get_pid()  :  infrun.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function debug_to_wait()

<p><tt>static ptid_t debug_to_wait ( ptid_t ptid, struct target_waitstatus* status, gdb_client_data client_data )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>ptid_get_pid()  :  infrun.c
<item>target_signal_to_name()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function default_region_size_ok_for_hw_watchpoint()

<p><tt>static int default_region_size_ok_for_hw_watchpoint ( int byte_count )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>update_current_target()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void_data_ptr  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function default_setup_safe_print()

<p><tt>static int default_setup_safe_print ( struct cleanup** ret_cleanup )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>update_current_target()  :  target/target.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>null_cleanup()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function default_terminal_info()

<p><tt>static void default_terminal_info ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>printf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>update_current_target()  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function default_xfer_partial()

<p><tt>static long default_xfer_partial ( struct target_ops* ops, enum target_object object, const char* annex, gdb_byte* readbuf, const gdb_byte* writebuf, unsigned long offset, long len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __error(), __inline_memcpy_chk()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>add_target()  :  target/target.c
<item>init_dummy_target()  :  target/target.c
<item>update_current_target()  :  target/target.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function deprecated_debug_xfer_memory()

<p><tt>static int deprecated_debug_xfer_memory ( CORE_ADDR memaddr, bfd_byte* myaddr, int len, int write, struct mem_attrib* attrib, struct target_ops* target )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>fputc_unfiltered()  :  utils.c
<item>fputs_unfiltered()  :  ui-file.c
<item>paddr_nz()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>setup_target_debug()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target  :  target/target.c
<item>gdb_stdlog  :  main.c
<item>targetdebug  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function dis_asm_memory_error_noprint()

<p><tt>static void dis_asm_memory_error_noprint ( int status, bfd_vma memaddr, struct disassemble_info* info )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>memory_error()  :  corefile.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdb_disassemble_info_noprint()  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function dis_asm_print_address_noprint()

<p><tt>static void dis_asm_print_address_noprint ( bfd_vma addr, struct disassemble_info* info )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>gdb_disassemble_info_noprint()  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function dis_asm_read_memory_noprint()

<p><tt>static int dis_asm_read_memory_noprint ( bfd_vma memaddr, gdb_byte* myaddr, unsigned int len, struct disassemble_info* info )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>target_read_memory()  :  target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdb_disassemble_info_noprint()  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function do_monitor_command()

<p><tt>static void do_monitor_command ( const char* cmd, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>initialize_targets()  :  target/target.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>debug_to_rcmd()  :  target/target.c
<item>tcomplain()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>debug_target  :  target/target.c
<item>gdb_stdtarg  :  main.c
</itemize>
</descrip>

<sect1>Local Function dummy_find_memory_regions()

<p><tt>static int dummy_find_memory_regions ( int (*ignore1)(CORE_ADDR unused01,unsigned long uu02,int uu03,int uu04,int uu05,void* uu06), void* ignore2 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>init_dummy_target()  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function dummy_make_corefile_notes()

<p><tt>static char* dummy_make_corefile_notes ( bfd* ignore1, int* ignore2 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>init_dummy_target()  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function find_default_run_target()

<p><tt>static struct target_ops* find_default_run_target ( const char* do_mesg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_default_attach()  :  target/target.c
<item>find_default_create_inferior()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>target_struct_size  :  target/target.c
<item>target_structs  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function fprintf_disasm_noprint()

<p><tt>static int fprintf_disasm_noprint ( void* stream, const char* format, ... )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>__builtin_va_end(), __builtin_va_start()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdb_disassemble_info_noprint()  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function gdb_disassemble_info_noprint()

<p><tt>static struct disassemble_info gdb_disassemble_info_noprint ( struct gdbarch* gdbarch, struct ui_file* file )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_bfd_arch_info()  :  gdbarch.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>disassemble_init_for_target(), init_disassemble_info()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>length_of_this_instruction()  :  target/target.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dis_asm_memory_error_noprint()  :  target/target.c
<item>dis_asm_print_address_noprint()  :  target/target.c
<item>dis_asm_read_memory_noprint()  :  target/target.c
<item>fprintf_disasm_noprint()  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function init_dummy_target()

<p><tt>static void init_dummy_target ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>initialize_targets()  :  target/target.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>default_xfer_partial()  :  target/target.c
<item>dummy_find_memory_regions()  :  target/target.c
<item>dummy_make_corefile_notes()  :  target/target.c
<item>find_default_attach()  :  target/target.c
<item>find_default_create_inferior()  :  target/target.c
<item>normal_pid_to_str()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dummy_target  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function kill_or_be_killed()

<p><tt>static void kill_or_be_killed ( int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>printf_unfiltered()  :  utils.c
<item>query()  :  utils.c
<item>target_kill()  :  target/target.c
<item>tcomplain()  :  target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>maybe_kill_then_attach()  :  target/target.c
<item>maybe_kill_then_create_inferior()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function maybe_kill_then_attach()

<p><tt>static void maybe_kill_then_attach ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>kill_or_be_killed()  :  target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>update_current_target()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function maybe_kill_then_create_inferior()

<p><tt>static void maybe_kill_then_create_inferior ( char* exec, char* args, char** env, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>kill_or_be_killed()  :  target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>update_current_target()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function memory_xfer_partial()

<p><tt>static long memory_xfer_partial ( struct target_ops* ops, void* readbuf, const void* writebuf, unsigned long memaddr, long len )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>find_pc_sect_in_ordered_sections()  :  objfiles.c
<item>lookup_mem_region()  :  memattr.c
<item>dcache_xfer_memory(), xfer_memory()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>target_xfer_partial()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>target_dcache  :  target/target.c
<item>trust_readonly  :  target/target.c
<item>only_read_from_live_memory
</itemize>
</descrip>

<sect1>Local Function nomemory()

<p><tt>static int nomemory ( CORE_ADDR memaddr, char* myaddr, int len, int write, struct target_ops* t )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>__error()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>update_current_target()  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function nosupport_runtime()

<p><tt>static void nosupport_runtime ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>noprocess()  :  target/target.c
<item>ptid_equal()  :  infrun.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>update_current_target()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
<item>null_ptid  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function nosymbol()

<p><tt>static int nosymbol ( char* name, CORE_ADDR* addrp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>update_current_target()  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function return_minus_one()

<p><tt>static int return_minus_one ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>update_current_target()  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function return_one()

<p><tt>static int return_one ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>update_current_target()  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function return_zero()

<p><tt>static int return_zero ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>target_stopped_data_address_p()  :  target/target.c
<item>update_current_target()  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function setup_target_debug()

<p><tt>static void setup_target_debug ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>update_current_target()  :  target/target.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>debug_check_is_objfile_loaded()  :  target/target.c
<item>debug_free_thread_inferior_status()  :  target/target.c
<item>debug_keep_going()  :  target/target.c
<item>debug_load_solib()  :  target/target.c
<item>debug_restore_thread_inferior_status()  :  target/target.c
<item>debug_save_thread_inferior_status()  :  target/target.c
<item>debug_to_acknowledge_created_inferior()  :  target/target.c
<item>debug_to_attach()  :  target/target.c
<item>debug_to_can_run()  :  target/target.c
<item>debug_to_can_use_hw_breakpoint()  :  target/target.c
<item>debug_to_close()  :  target/target.c
<item>debug_to_create_inferior()  :  target/target.c
<item>debug_to_detach()  :  target/target.c
<item>debug_to_disconnect()  :  target/target.c
<item>debug_to_enable_exception_callback()  :  target/target.c
<item>debug_to_fetch_registers()  :  target/target.c
<item>debug_to_files_info()  :  target/target.c
<item>debug_to_find_exception_catchpoints()  :  target/target.c
<item>debug_to_find_new_threads()  :  target/target.c
<item>debug_to_follow_fork()  :  target/target.c
<item>debug_to_get_current_exception_event()  :  target/target.c
<item>debug_to_has_exited()  :  target/target.c
<item>debug_to_insert_breakpoint()  :  target/target.c
<item>debug_to_insert_exec_catchpoint()  :  target/target.c
<item>debug_to_insert_fork_catchpoint()  :  target/target.c
<item>debug_to_insert_hw_breakpoint()  :  target/target.c
<item>debug_to_insert_vfork_catchpoint()  :  target/target.c
<item>debug_to_insert_watchpoint()  :  target/target.c
<item>debug_to_kill()  :  target/target.c
<item>debug_to_load()  :  target/target.c
<item>debug_to_lookup_symbol()  :  target/target.c
<item>debug_to_mourn_inferior()  :  target/target.c
<item>debug_to_notice_signals()  :  target/target.c
<item>debug_to_open()  :  target/target.c
<item>debug_to_pid_to_exec_file()  :  target/target.c
<item>debug_to_pid_to_str()  :  target/target.c
<item>debug_to_post_attach()  :  target/target.c
<item>debug_to_post_startup_inferior()  :  target/target.c
<item>debug_to_prepare_to_store()  :  target/target.c
<item>debug_to_rcmd()  :  target/target.c
<item>debug_to_region_size_ok_for_hw_watchpoint()  :  target/target.c
<item>debug_to_remove_breakpoint()  :  target/target.c
<item>debug_to_remove_exec_catchpoint()  :  target/target.c
<item>debug_to_remove_fork_catchpoint()  :  target/target.c
<item>debug_to_remove_hw_breakpoint()  :  target/target.c
<item>debug_to_remove_vfork_catchpoint()  :  target/target.c
<item>debug_to_remove_watchpoint()  :  target/target.c
<item>debug_to_reported_exec_events_per_exec_call()  :  target/target.c
<item>debug_to_resume()  :  target/target.c
<item>debug_to_stop()  :  target/target.c
<item>debug_to_stopped_by_watchpoint()  :  target/target.c
<item>debug_to_stopped_data_address()  :  target/target.c
<item>debug_to_store_registers()  :  target/target.c
<item>debug_to_terminal_inferior()  :  target/target.c
<item>debug_to_terminal_info()  :  target/target.c
<item>debug_to_terminal_init()  :  target/target.c
<item>debug_to_terminal_ours()  :  target/target.c
<item>debug_to_terminal_ours_for_output()  :  target/target.c
<item>debug_to_terminal_save_ours()  :  target/target.c
<item>debug_to_thread_alive()  :  target/target.c
<item>debug_to_wait()  :  target/target.c
<item>deprecated_debug_xfer_memory()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>debug_target  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function show_targetdebug()

<p><tt>static void show_targetdebug ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>initialize_targets()  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function show_trust_readonly()

<p><tt>static void show_trust_readonly ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>initialize_targets()  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function target_command()

<p><tt>static void target_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fputs_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>add_target()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

<sect1>Local Function target_info()

<p><tt>static void target_info ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>printf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>initialize_targets()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_objfile  :  objfiles.c
<item>target_stack  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function target_xfer_partial()

<p><tt>static long target_xfer_partial ( struct target_ops* ops, enum target_object object, const char* annex, void* readbuf, const void* writebuf, unsigned long offset, long len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>fprintf_unfiltered()  :  utils.c
<item>fputc_unfiltered()  :  utils.c
<item>fputs_unfiltered()  :  ui-file.c
<item>internal_error()  :  utils.c
<item>memory_xfer_partial()  :  target/target.c
<item>paddr_d()  :  utils.c
<item>paddr_nz()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>target_read_partial()  :  target/target.c
<item>target_write_partial()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_target_writes  :  target/target.c
<item>gdb_stdlog  :  main.c
<item>targetdebug  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function tcomplain()

<p><tt>static void tcomplain ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target/target.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>kill_or_be_killed()  :  target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>do_monitor_command()  :  target/target.c
<item>update_current_target()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
</itemize>
</descrip>

</article>
