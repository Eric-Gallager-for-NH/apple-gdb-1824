<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF c-exp.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for c-exp.c of gdb.cxref.
<author>cxref

<sect>File c-exp.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;parser-defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;c-lang.h&quot;</tt>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;macroexp.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;charset.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;cp-support.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objc-lang.h&quot;</tt>
<itemize>
<item><tt>#include &lt;Availability.h&gt;</tt>
</itemize>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define YYBISON 1</tt><newline>
<p>
<tt>#define YYBISON_VERSION &quot;3.0.4&quot;</tt><newline>
<p>
<tt>#define YYSKELETON_NAME &quot;yacc.c&quot;</tt><newline>
<p>
<tt>#define YYPURE 0</tt><newline>
<p>
<tt>#define YYPUSH 0</tt><newline>
<p>
<tt>#define YYPULL 1</tt><newline>
<p>
<tt>#define yymaxdepth c_maxdepth</tt><newline>
<p>
<tt>#define yyparse c_parse</tt><newline>
<p>
<tt>#define yylex c_lex</tt><newline>
<p>
<tt>#define yyerror c_error</tt><newline>
<p>
<tt>#define yylval c_lval</tt><newline>
<p>
<tt>#define yychar c_char</tt><newline>
<p>
<tt>#define yydebug c_debug</tt><newline>
<p>
<tt>#define yypact c_pact</tt><newline>
<p>
<tt>#define yyr1 c_r1</tt><newline>
<p>
<tt>#define yyr2 c_r2</tt><newline>
<p>
<tt>#define yydef c_def</tt><newline>
<p>
<tt>#define yychk c_chk</tt><newline>
<p>
<tt>#define yypgo c_pgo</tt><newline>
<p>
<tt>#define yyact c_act</tt><newline>
<p>
<tt>#define yyexca c_exca</tt><newline>
<p>
<tt>#define yyerrflag c_errflag</tt><newline>
<p>
<tt>#define yynerrs c_nerrs</tt><newline>
<p>
<tt>#define yyps c_ps</tt><newline>
<p>
<tt>#define yypv c_pv</tt><newline>
<p>
<tt>#define yys c_s</tt><newline>
<p>
<tt>#define yy_yys c_yys</tt><newline>
<p>
<tt>#define yystate c_state</tt><newline>
<p>
<tt>#define yytmp c_tmp</tt><newline>
<p>
<tt>#define yyv c_v</tt><newline>
<p>
<tt>#define yy_yyv c_yyv</tt><newline>
<p>
<tt>#define yyval c_val</tt><newline>
<p>
<tt>#define yylloc c_lloc</tt><newline>
<p>
<tt>#define yyreds c_reds</tt><newline>
<p>
<tt>#define yytoks c_toks</tt><newline>
<p>
<tt>#define yyname c_name</tt><newline>
<p>
<tt>#define yyrule c_rule</tt><newline>
<p>
<tt>#define yylhs c_yylhs</tt><newline>
<p>
<tt>#define yylen c_yylen</tt><newline>
<p>
<tt>#define yydefred c_yydefred</tt><newline>
<p>
<tt>#define yydgoto c_yydgoto</tt><newline>
<p>
<tt>#define yysindex c_yysindex</tt><newline>
<p>
<tt>#define yyrindex c_yyrindex</tt><newline>
<p>
<tt>#define yygindex c_yygindex</tt><newline>
<p>
<tt>#define yytable c_yytable</tt><newline>
<p>
<tt>#define yycheck c_yycheck</tt><newline>
<p>
<tt>#define YYDEBUG 1</tt><newline>
<p>
<tt>#define YYFPRINTF parser_fprintf</tt><newline>
<p>
<tt>#define YY_NULLPTR 0</tt><newline>
<p>
<tt>#define YYERROR_VERBOSE 0</tt><newline>
<p>
<tt>#define YY_YY_Y_TAB_H_INCLUDED</tt><newline>
<p>
<tt>#define YYTOKENTYPE</tt><newline>
<p>
<tt>#define INT 258</tt><newline>
<p>
<tt>#define FLOAT 259</tt><newline>
<p>
<tt>#define STRING 260</tt><newline>
<p>
<tt>#define OBJC_NSSTRING 261</tt><newline>
<p>
<tt>#define OBJC_SELECTOR 262</tt><newline>
<p>
<tt>#define OBJC_CLASSNAME 263</tt><newline>
<p>
<tt>#define NAME 264</tt><newline>
<p>
<tt>#define TYPENAME 265</tt><newline>
<p>
<tt>#define NAME_OR_INT 266</tt><newline>
<p>
<tt>#define STRUCT 267</tt><newline>
<p>
<tt>#define CLASS 268</tt><newline>
<p>
<tt>#define UNION 269</tt><newline>
<p>
<tt>#define ENUM 270</tt><newline>
<p>
<tt>#define SIZEOF 271</tt><newline>
<p>
<tt>#define UNSIGNED 272</tt><newline>
<p>
<tt>#define COLONCOLON 273</tt><newline>
<p>
<tt>#define TEMPLATE 274</tt><newline>
<p>
<tt>#define ERROR 275</tt><newline>
<p>
<tt>#define SIGNED_KEYWORD 276</tt><newline>
<p>
<tt>#define LONG 277</tt><newline>
<p>
<tt>#define SHORT 278</tt><newline>
<p>
<tt>#define INT_KEYWORD 279</tt><newline>
<p>
<tt>#define CONST_KEYWORD 280</tt><newline>
<p>
<tt>#define VOLATILE_KEYWORD 281</tt><newline>
<p>
<tt>#define DOUBLE_KEYWORD 282</tt><newline>
<p>
<tt>#define VARIABLE 283</tt><newline>
<p>
<tt>#define ASSIGN_MODIFY 284</tt><newline>
<p>
<tt>#define TRUEKEYWORD 285</tt><newline>
<p>
<tt>#define FALSEKEYWORD 286</tt><newline>
<p>
<tt>#define ABOVE_COMMA 287</tt><newline>
<p>
<tt>#define OROR 288</tt><newline>
<p>
<tt>#define ANDAND 289</tt><newline>
<p>
<tt>#define EQUAL 290</tt><newline>
<p>
<tt>#define NOTEQUAL 291</tt><newline>
<p>
<tt>#define LEQ 292</tt><newline>
<p>
<tt>#define GEQ 293</tt><newline>
<p>
<tt>#define LSH 294</tt><newline>
<p>
<tt>#define RSH 295</tt><newline>
<p>
<tt>#define UNARY 296</tt><newline>
<p>
<tt>#define INCREMENT 297</tt><newline>
<p>
<tt>#define DECREMENT 298</tt><newline>
<p>
<tt>#define ARROW 299</tt><newline>
<p>
<tt>#define BLOCKNAME 300</tt><newline>
<p>
<tt>#define FILENAME 301</tt><newline>
<p>
<tt>#define YYSTYPE_IS_TRIVIAL 1</tt><newline>
<p>
<tt>#define YYSTYPE_IS_DECLARED 1</tt><newline>
<p>
<tt>#define YYSIZE_T __SIZE_TYPE__</tt><newline>
<p>
<tt>#define YYSIZE_MAXIMUM</tt><newline>
<p>
<tt>#define YY_( Msgid )</tt><newline>
<p>
<tt>#define YY_ATTRIBUTE( Spec )</tt><newline>
<p>
<tt>#define YY_ATTRIBUTE_PURE</tt><newline>
<p>
<tt>#define YY_ATTRIBUTE_UNUSED</tt><newline>
<p>
<tt>#define _Noreturn</tt><newline>
<p>
<tt>#define YYUSE( E )</tt><newline>
<p>
<tt>#define YY_INITIAL_VALUE( Value )</tt><newline>
<p>
<tt>#define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN</tt><newline>
<p>
<tt>#define YY_IGNORE_MAYBE_UNINITIALIZED_END</tt><newline>
<p>
<tt>#define YYSTACK_ALLOC YYMALLOC</tt><newline>
<p>
<tt>#define YYSTACK_FREE YYFREE</tt><newline>
<p>
<tt>#define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM</tt><newline>
<p>
<tt>#define YYMALLOC xmalloc</tt><newline>
<p>
<tt>#define YYFREE xfree</tt><newline>
<p>
<tt>#define YYSTACK_GAP_MAXIMUM</tt><newline>
<p>
<tt>#define YYSTACK_BYTES( N )</tt><newline>
<p>
<tt>#define YYCOPY_NEEDED 1</tt><newline>
<p>
<tt>#define YYSTACK_RELOCATE( Stack_alloc, Stack )</tt><newline>
<p>
<tt>#define YYCOPY( Dst, Src, Count )</tt><newline>
<p>
<tt>#define YYFINAL 104</tt><newline>
<p>
<tt>#define YYLAST 887</tt><newline>
<p>
<tt>#define YYNTOKENS 71</tt><newline>
<p>
<tt>#define YYNNTS 37</tt><newline>
<p>
<tt>#define YYNRULES 177</tt><newline>
<p>
<tt>#define YYNSTATES 273</tt><newline>
<p>
<tt>#define YYUNDEFTOK 2</tt><newline>
<p>
<tt>#define YYMAXUTOK 301</tt><newline>
<p>
<tt>#define YYTRANSLATE( YYX )</tt><newline>
<p>
<tt>#define YYPACT_NINF -110</tt><newline>
<p>
<tt>#define yypact_value_is_default( Yystate )</tt><newline>
<p>
<tt>#define YYTABLE_NINF -158</tt><newline>
<p>
<tt>#define yytable_value_is_error( Yytable_value )</tt><newline>
<p>
<tt>#define yyerrok</tt><newline>
<p>
<tt>#define yyclearin</tt><newline>
<p>
<tt>#define YYEMPTY -2</tt><newline>
<p>
<tt>#define YYEOF 0</tt><newline>
<p>
<tt>#define YYACCEPT</tt><newline>
<p>
<tt>#define YYABORT</tt><newline>
<p>
<tt>#define YYERROR</tt><newline>
<p>
<tt>#define YYRECOVERING</tt><newline>
<p>
<tt>#define YYBACKUP( Token, Value )</tt><newline>
<p>
<tt>#define YYTERROR 1</tt><newline>
<p>
<tt>#define YYERRCODE 256</tt><newline>
<p>
<tt>#define YYDPRINTF( Args )</tt><newline>
<p>
<tt>#define YY_LOCATION_PRINT( File, Loc )</tt><newline>
<p>
<tt>#define YY_SYMBOL_PRINT( Title, Type, Value, Location )</tt><newline>
<p>
<tt>#define YY_STACK_PRINT( Bottom, Top )</tt><newline>
<p>
<tt>#define YY_REDUCE_PRINT( Rule )</tt><newline>
<p>
<tt>#define YYINITDEPTH 200</tt><newline>
<p>
<tt>#define YYMAXDEPTH 10000</tt><newline>
<p>
<tt>#define YYPOPSTACK( N )</tt><newline>

<sect1>Type enum yytokentype

<p>
<itemize>
<item><tt>enum yytokentype</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>INT;</tt><newline>
<item><tt>FLOAT;</tt><newline>
<item><tt>STRING;</tt><newline>
<item><tt>OBJC_NSSTRING;</tt><newline>
<item><tt>OBJC_SELECTOR;</tt><newline>
<item><tt>OBJC_CLASSNAME;</tt><newline>
<item><tt>NAME;</tt><newline>
<item><tt>TYPENAME;</tt><newline>
<item><tt>NAME_OR_INT;</tt><newline>
<item><tt>STRUCT;</tt><newline>
<item><tt>CLASS;</tt><newline>
<item><tt>UNION;</tt><newline>
<item><tt>ENUM;</tt><newline>
<item><tt>SIZEOF;</tt><newline>
<item><tt>UNSIGNED;</tt><newline>
<item><tt>COLONCOLON;</tt><newline>
<item><tt>TEMPLATE;</tt><newline>
<item><tt>ERROR;</tt><newline>
<item><tt>SIGNED_KEYWORD;</tt><newline>
<item><tt>LONG;</tt><newline>
<item><tt>SHORT;</tt><newline>
<item><tt>INT_KEYWORD;</tt><newline>
<item><tt>CONST_KEYWORD;</tt><newline>
<item><tt>VOLATILE_KEYWORD;</tt><newline>
<item><tt>DOUBLE_KEYWORD;</tt><newline>
<item><tt>VARIABLE;</tt><newline>
<item><tt>ASSIGN_MODIFY;</tt><newline>
<item><tt>TRUEKEYWORD;</tt><newline>
<item><tt>FALSEKEYWORD;</tt><newline>
<item><tt>ABOVE_COMMA;</tt><newline>
<item><tt>OROR;</tt><newline>
<item><tt>ANDAND;</tt><newline>
<item><tt>EQUAL;</tt><newline>
<item><tt>NOTEQUAL;</tt><newline>
<item><tt>LEQ;</tt><newline>
<item><tt>GEQ;</tt><newline>
<item><tt>LSH;</tt><newline>
<item><tt>RSH;</tt><newline>
<item><tt>UNARY;</tt><newline>
<item><tt>INCREMENT;</tt><newline>
<item><tt>DECREMENT;</tt><newline>
<item><tt>ARROW;</tt><newline>
<item><tt>BLOCKNAME;</tt><newline>
<item><tt>FILENAME;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type union YYSTYPE

<p>
<itemize>
<item><tt>union YYSTYPE</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>long lval;</tt><newline>
<item><tt>struct</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>long val;</tt><newline>
<item><tt>struct type* type;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>typed_val_int;</tt><newline>
<item><tt>struct</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>DOUBLEST dval;</tt><newline>
<item><tt>struct type* type;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>typed_val_float;</tt><newline>
<item><tt>struct symbol* sym;</tt><newline>
<item><tt>struct type* tval;</tt><newline>
<item><tt>struct stoken sval;</tt><newline>
<item><tt>struct ttype tsym;</tt><newline>
<item><tt>struct symtoken ssym;</tt><newline>
<item><tt>int voidval;</tt><newline>
<item><tt>struct block* bval;</tt><newline>
<item><tt>enum exp_opcode opcode;</tt><newline>
<item><tt>struct internalvar* ivar;</tt><newline>
<item><tt>struct objc_class_str oclass;</tt><newline>
<item><tt>struct type** tvec;</tt><newline>
<item><tt>int* ivec;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Typedef YYSTYPE

<p>
<tt>typedef union YYSTYPE YYSTYPE</tt><newline>
<descrip>
<tag>See:</tag>
<itemize>
<item>Type union YYSTYPE
</itemize>
</descrip>

<sect1>Typedef yytype_uint8

<p>
<tt>typedef unsigned char yytype_uint8</tt><newline>

<sect1>Typedef yytype_int8

<p>
<tt>typedef signed char yytype_int8</tt><newline>

<sect1>Typedef yytype_uint16

<p>
<tt>typedef unsigned short int yytype_uint16</tt><newline>

<sect1>Typedef yytype_int16

<p>
<tt>typedef short int yytype_int16</tt><newline>

<sect1>Type union yyalloc

<p>
<itemize>
<item><tt>union yyalloc</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>yytype_int16 yyss_alloc;</tt><newline>
<item><tt>YYSTYPE yyvs_alloc;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct token

<p>
<itemize>
<item><tt>struct token</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const char* coperator;</tt><newline>
<item><tt>int token;</tt><newline>
<item><tt>enum exp_opcode opcode;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable c_debug

<p>
<tt>int c_debug</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>c-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>yydestruct()  :  c-exp.c
</itemize>
</descrip>

<sect1>Global Variable c_lval

<p>
<tt>YYSTYPE c_lval</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>c-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
<item>c_parse()  :  c-exp.c
</itemize>
</descrip>

<sect1>Global Variable c_char

<p>
<tt>int c_char</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>c-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
</itemize>
</descrip>

<sect1>Global Variable c_nerrs

<p>
<tt>int c_nerrs</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>c-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>square_bracket_seen</bf><newline>
<tt>static int square_bracket_seen</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_lex()
</itemize>
</descrip>
<p>
<bf>yytranslate</bf><newline>
<tt>static const yytype_uint8 yytranslate[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_parse()
</itemize>
</descrip>
<p>
<bf>yyrline</bf><newline>
<tt>static const yytype_uint16 yyrline[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>yy_reduce_print()
</itemize>
</descrip>
<p>
<bf>yytname</bf><newline>
<tt>static const char* const yytname[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>yy_symbol_print()
</itemize>
</descrip>
<p>
<bf>c_pact</bf><newline>
<tt>static const yytype_int16 c_pact[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_parse()
</itemize>
</descrip>
<p>
<bf>yydefact</bf><newline>
<tt>static const yytype_uint8 yydefact[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_parse()
</itemize>
</descrip>
<p>
<bf>yypgoto</bf><newline>
<tt>static const yytype_int16 yypgoto[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_parse()
</itemize>
</descrip>
<p>
<bf>yydefgoto</bf><newline>
<tt>static const yytype_int16 yydefgoto[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_parse()
</itemize>
</descrip>
<p>
<bf>c_yytable</bf><newline>
<tt>static const yytype_int16 c_yytable[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_parse()
</itemize>
</descrip>
<p>
<bf>c_yycheck</bf><newline>
<tt>static const yytype_int16 c_yycheck[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_parse()
</itemize>
</descrip>
<p>
<bf>yystos</bf><newline>
<tt>static const yytype_uint8 yystos[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_parse()
<item>yy_reduce_print()
</itemize>
</descrip>
<p>
<bf>c_r1</bf><newline>
<tt>static const yytype_uint8 c_r1[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_parse()
</itemize>
</descrip>
<p>
<bf>c_r2</bf><newline>
<tt>static const yytype_uint8 c_r2[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_parse()
<item>yy_reduce_print()
</itemize>
</descrip>
<p>
<bf>tokentab3</bf><newline>
<tt>static const struct token tokentab3[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_lex()
</itemize>
</descrip>
<p>
<bf>tokentab2</bf><newline>
<tt>static const struct token tokentab2[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_lex()
</itemize>
</descrip>

<sect1>Global Function c_error()

<p><tt>void c_error ( const char* msg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c-lang.c
<item>scm-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>lexptr  :  parse.c
<item>prev_lexptr  :  parse.c
</itemize>
</descrip>

<sect1>Global Function c_parse()

<p><tt>int c_parse ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_msglist()  :  objc-lang.c
<item>c_error()  :  c-exp.c
<item>c_lex()  :  c-exp.c
<item>check_typedef()  :  gdbtypes.c
<item>contained_in()  :  block.c
<item>copy_name()  :  parse.c
<item>cp_lookup_nested_type()  :  cp-namespace.c
<item>destructor_name_p()  :  valops.c
<item>end_arglist()  :  parse.c
<item>end_msglist()  :  objc-lang.c
<item>error()  :  utils.c
<item>follow_types()  :  parse.c
<item>get_builtin_type()  :  gdbtypes.c
<item>have_full_symbols()  :  objfiles.c
<item>have_partial_symbols()  :  objfiles.c
<item>lookup_enum()  :  gdbtypes.c
<item>lookup_function_type()  :  gdbtypes.c
<item>lookup_member_type()  :  gdbtypes.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_objc_class()  :  objc-lang.c
<item>lookup_signed_typename()  :  gdbtypes.c
<item>lookup_struct()  :  gdbtypes.c
<item>lookup_symbol()  :  symtab.c
<item>lookup_template_type()  :  gdbtypes.c
<item>lookup_union()  :  gdbtypes.c
<item>lookup_unsigned_typename()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>parse_number()  :  c-exp.c
<item>parser_fprintf()  :  parse.c
<item>push_type()  :  parse.c
<item>push_type_address_space()  :  parse.c
<item>push_type_int()  :  parse.c
<item>start_arglist()  :  parse.c
<item>start_msglist()  :  objc-lang.c
<item>symbol_read_needs_frame()  :  findvar.c
<item>write_exp_elt_block()  :  parse.c
<item>write_exp_elt_dblcst()  :  parse.c
<item>write_exp_elt_longcst()  :  parse.c
<item>write_exp_elt_opcode()  :  parse.c
<item>write_exp_elt_sym()  :  parse.c
<item>write_exp_elt_type()  :  parse.c
<item>write_exp_msymbol()  :  parse.c
<item>write_exp_string()  :  parse.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>yy_reduce_print()  :  c-exp.c
<item>yy_stack_print()  :  c-exp.c
<item>yy_symbol_print()  :  c-exp.c
<item>yydestruct()  :  c-exp.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_memcpy(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_preprocess_and_parse()  :  c-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>arglist_len  :  parse.c
<item>block_found  :  symtab.c
<item>builtin_type_void_data_ptr  :  gdbtypes.c
<item>c_char  :  c-exp.c
<item>c_debug  :  c-exp.c
<item>c_lval  :  c-exp.c
<item>c_nerrs  :  c-exp.c
<item>c_pact  :  c-exp.c
<item>c_r1  :  c-exp.c
<item>c_r2  :  c-exp.c
<item>c_yycheck  :  c-exp.c
<item>c_yytable  :  c-exp.c
<item>current_gdbarch  :  gdbarch.c
<item>current_language  :  language.c
<item>expression_context_block  :  parse.c
<item>innermost_block  :  parse.c
<item>yydefact  :  c-exp.c
<item>yydefgoto  :  c-exp.c
<item>yypgoto  :  c-exp.c
<item>yystos  :  c-exp.c
<item>yytranslate  :  c-exp.c
</itemize>
</descrip>

<sect1>Local Function c_lex()

<p><tt>static int c_lex ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>copy_name()  :  parse.c
<item>error()  :  utils.c
<item>find_template_name_end()  :  parse.c
<item>finished_macro_expansion()  :  c-lang.c
<item>get_builtin_type()  :  gdbtypes.c
<item>host_char_to_target()  :  charset.c
<item>language_lookup_primitive_type_by_name()  :  language.c
<item>lookup_objc_class()  :  objc-lang.c
<item>lookup_struct_typedef()  :  objc-lang.c
<item>lookup_symbol()  :  symtab.c
<item>lookup_symtab()  :  symtab.c
<item>macro_expand_next()  :  macroexp.c
<item>parse_escape()  :  utils.c
<item>parse_nested_classes_for_hpacc()  :  parse.c
<item>parse_number()  :  c-exp.c
<item>scan_macro_expansion()  :  c-lang.c
<item>scanning_macro_expansion()  :  c-lang.c
<item>should_lookup_objc_class()  :  objc-lang.c
<item>skip_quoted()  :  completer.c
<item>target_charset()  :  charset.c
<item>write_dollar_variable()  :  parse.c
<item>xrealloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), isdigit(), ishexnumber(), strchr(), strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>c_lval  :  c-exp.c
<item>comma_terminates  :  parse.c
<item>current_gdbarch  :  gdbarch.c
<item>current_language  :  language.c
<item>expression_context_block  :  parse.c
<item>expression_macro_lookup_baton  :  c-lang.c
<item>expression_macro_lookup_func  :  c-lang.c
<item>input_radix  :  valprint.c
<item>lexptr  :  parse.c
<item>paren_depth  :  parse.c
<item>prev_lexptr  :  parse.c
<item>square_bracket_seen  :  c-exp.c
<item>tokentab2  :  c-exp.c
<item>tokentab3  :  c-exp.c
</itemize>
</descrip>

<sect1>Local Function parse_number()

<p><tt>static int parse_number ( char* p, int len, int parsed_float, YYSTYPE* putithere )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>gdbarch_int_bit()  :  gdbarch.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>gdbarch_long_long_bit()  :  gdbarch.c
<item>get_builtin_type()  :  gdbtypes.c
<item>sscanf(), tolower()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
<item>c_parse()  :  c-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>input_radix  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function yy_reduce_print()

<p><tt>static void yy_reduce_print ( yytype_int16* yyssp, YYSTYPE* yyvsp, int c_rule )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>parser_fprintf()  :  parse.c
<item>yy_symbol_print()  :  c-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>c_r2  :  c-exp.c
<item>yyrline  :  c-exp.c
<item>yystos  :  c-exp.c
</itemize>
</descrip>

<sect1>Local Function yy_stack_print()

<p><tt>static void yy_stack_print ( yytype_int16* yybottom, yytype_int16* yytop )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>parser_fprintf()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
</itemize>
</descrip>

<sect1>Local Function yy_symbol_print()

<p><tt>static void yy_symbol_print ( FILE* yyoutput, int yytype, YYSTYPE const* const yyvaluep )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>parser_fprintf()  :  parse.c
<item>yy_symbol_value_print()  :  c-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>yy_reduce_print()  :  c-exp.c
<item>yydestruct()  :  c-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yytname  :  c-exp.c
</itemize>
</descrip>

<sect1>Local Function yy_symbol_value_print()

<p><tt>static void yy_symbol_value_print ( FILE* yyoutput, int yytype, YYSTYPE const* const yyvaluep )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>yy_symbol_print()  :  c-exp.c
</itemize>
</descrip>

<sect1>Local Function yydestruct()

<p><tt>static void yydestruct ( const char* yymsg, int yytype, YYSTYPE* yyvaluep )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>parser_fprintf()  :  parse.c
<item>yy_symbol_print()  :  c-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>c_debug  :  c-exp.c
</itemize>
</descrip>

</article>
