<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF symfile.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for symfile.c of gdb.cxref.
<author>cxref

<sect>File symfile.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>simple_overlay_update()  :  symfile.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/bfdlink.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;source.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;complaints.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<item><tt>#include &quot;target.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/filenames.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/hashtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb-stabs.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;completer.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;bcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/hashtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../readline/readline.h&quot;</tt>
<itemize>
<item><tt>#include &lt;../readline/rlstdc.h&gt;</tt>
<item><tt>#include &lt;../readline/rltypedefs.h&gt;</tt>
<item><tt>#include &lt;../readline/keymaps.h&gt;</tt>
<item><tt>#include &lt;../readline/tilde.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;observer.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/libbfd.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/hashtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objc-lang.h&quot;</tt>
<itemize>
<item><tt>#include &lt;Availability.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;exec.h&quot;</tt>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;macosx/macosx-nat-inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-nat-threads.h&quot;</tt>
<itemize>
<item><tt>#include &lt;pthread.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-sigthread.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-mutils.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;target.h&quot;</tt>
<item><tt>#include &quot;inferior.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-utils.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
</itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-threads.h&quot;</tt>
<item><tt>#include &lt;sys/wait.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-excthread.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-mutils.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-threads.h&quot;</tt>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;mach/thread_status.h&gt;</tt>
<item><tt>#include &lt;sys/wait.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-dyld.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-mutils.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-threads.h&quot;</tt>
<item><tt>#include &lt;mach/machine.h&gt;</tt>
<item><tt>#include &lt;mach-o/loader.h&gt;</tt>
<item><tt>#include &quot;macosx/macosx-nat-dyld-info.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/machine.h&gt;</tt>
<item><tt>#include &lt;mach-o/loader.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-dyld-path.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-dyld-info.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;target.h&quot;</tt>
<item><tt>#include &quot;checkpoint.h&quot;</tt>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;macosx/macosx-nat-utils.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/mach-o.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &lt;mach-o/loader.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;osabi.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;fcntl.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_stat.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;sys/stat.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;time.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;libgen.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;sys/mman.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;macosx/macosx-nat-dyld.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;macosx/macosx-nat-dyld-process.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
</itemize>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define O_BINARY 0</tt><newline>
<p>
<tt>#define LDSYMOFF( p )</tt><newline>
<p>
<tt>#define LDSYMLEN( p )</tt><newline>
<p>
<tt>#define SYMLOC( p )</tt><newline>
<p>
<tt>#define SYMBOL_SIZE( p )</tt><newline>
<p>
<tt>#define SYMBOL_OFFSET( p )</tt><newline>
<p>
<tt>#define STRING_OFFSET( p )</tt><newline>
<p>
<tt>#define FILE_STRING_OFFSET( p )</tt><newline>
<p>
<tt>#define SYMBOL_PREFIX( p )</tt><newline>
<p>
<tt>#define DEBUG_SUBDIRECTORY &quot;.debug&quot;</tt><newline>
<p>
<tt>#define TARGET_LONG_BYTES</tt><newline>

<sect1>Type struct place_section_arg

<p>
<itemize>
<item><tt>struct place_section_arg</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct section_offsets* offsets;</tt><newline>
<item><tt>CORE_ADDR lowest;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dbxread_symloc

<p>
<itemize>
<item><tt>struct dbxread_symloc</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int ldsymoff;</tt><newline>
<item><tt>int ldsymlen;</tt><newline>
<item><tt>int symbol_size;</tt><newline>
<item><tt>int symbol_offset;</tt><newline>
<item><tt>int string_offset;</tt><newline>
<item><tt>int file_string_offset;</tt><newline>
<item><tt>const char* prefix;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct load_section_data

<p>
<itemize>
<item><tt>struct load_section_data</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>unsigned long load_offset;</tt><newline>
<item><tt>unsigned long write_count;</tt><newline>
<item><tt>unsigned long data_count;</tt><newline>
<item><tt>bfd_size_type total_size;</tt><newline>
<item><tt>const char* section_name;</tt><newline>
<item><tt>unsigned long section_sent;</tt><newline>
<item><tt>unsigned long section_size;</tt><newline>
<item><tt>CORE_ADDR lma;</tt><newline>
<item><tt>gdb_byte* buffer;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct sect_opt

<p>
<itemize>
<item><tt>struct sect_opt</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const char* name;</tt><newline>
<item><tt>char* value;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Typedef filename_language

<p>
<tt>typedef struct {...} filename_language</tt><newline>
<itemize>
<item><tt>struct</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>char* ext;</tt><newline>
<item><tt>enum language lang;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type enum ovly_index

<p>
<itemize>
<item><tt>enum ovly_index</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>VMA;</tt><newline>
<item><tt>SIZE;</tt><newline>
<item><tt>LMA;</tt><newline>
<item><tt>MAPPED;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct symbol_file_info

<p>
<itemize>
<item><tt>struct symbol_file_info</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>bfd* abfd;</tt><newline>
<item><tt>int from_tty;</tt><newline>
<item><tt>struct section_addr_info* addrs;</tt><newline>
<item><tt>struct section_offsets* offsets;</tt><newline>
<item><tt>int num_offsets;</tt><newline>
<item><tt>int mainline;</tt><newline>
<item><tt>int flags;</tt><newline>
<item><tt>int symflags;</tt><newline>
<item><tt>CORE_ADDR mapaddr;</tt><newline>
<item><tt>const char* prefix;</tt><newline>
<item><tt>struct objfile* result;</tt><newline>
<item><tt>char* kext_bundle;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct bfd_file_info

<p>
<itemize>
<item><tt>struct bfd_file_info</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const char* filename;</tt><newline>
<item><tt>int mainline;</tt><newline>
<item><tt>enum gdb_osabi osabi;</tt><newline>
<item><tt>bfd* result;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable currently_reading_symtab

<p>
<tt>int currently_reading_symtab</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bcache.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>charset.c
<item>cli-out.c
<item>coff-pe-read.c
<item>coffread.c
<item>complaints.c
<item>completer.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>demangle.c
<item>dictionary.c
<item>disasm.c
<item>doublest.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>environ.c
<item>eval.c
<item>event-loop.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>interps.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod-cisco.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macrocmd.c
<item>macroexp.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>observer.c
<item>osabi.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>reggroups.c
<item>remote-fileio.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>ser-base.c
<item>ser-unix.c
<item>serial.c
<item>solib-null.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>ui-file.c
<item>ui-out.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>decrement_reading_symtab()  :  symfile.c
<item>psymtab_to_symtab()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Variable deprecated_pre_add_symbol_hook

<p>
<tt>void (*deprecated_pre_add_symbol_hook)(const char*)</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bcache.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>charset.c
<item>cli-out.c
<item>coff-pe-read.c
<item>coffread.c
<item>complaints.c
<item>completer.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>demangle.c
<item>dictionary.c
<item>disasm.c
<item>doublest.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>environ.c
<item>eval.c
<item>event-loop.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>interps.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod-cisco.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macrocmd.c
<item>macroexp.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>observer.c
<item>osabi.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>reggroups.c
<item>remote-fileio.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>ser-base.c
<item>ser-unix.c
<item>serial.c
<item>solib-null.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>ui-file.c
<item>ui-out.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Variable deprecated_post_add_symbol_hook

<p>
<tt>void (*deprecated_post_add_symbol_hook)(void)</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bcache.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>charset.c
<item>cli-out.c
<item>coff-pe-read.c
<item>coffread.c
<item>complaints.c
<item>completer.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>demangle.c
<item>dictionary.c
<item>disasm.c
<item>doublest.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>environ.c
<item>eval.c
<item>event-loop.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>interps.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod-cisco.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macrocmd.c
<item>macroexp.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>observer.c
<item>osabi.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>reggroups.c
<item>remote-fileio.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>ser-base.c
<item>ser-unix.c
<item>serial.c
<item>solib-null.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>ui-file.c
<item>ui-out.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Variable deprecated_show_load_progress

<p>
<tt>void (*deprecated_show_load_progress)(const char* section,unsigned long section_sent,unsigned long section_size,unsigned long total_sent,unsigned long total_size)</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bcache.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>charset.c
<item>cli-out.c
<item>coff-pe-read.c
<item>coffread.c
<item>complaints.c
<item>completer.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>demangle.c
<item>dictionary.c
<item>disasm.c
<item>doublest.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>environ.c
<item>eval.c
<item>event-loop.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>interps.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod-cisco.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macrocmd.c
<item>macroexp.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>observer.c
<item>osabi.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>reggroups.c
<item>remote-fileio.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>ser-base.c
<item>ser-unix.c
<item>serial.c
<item>solib-null.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>ui-file.c
<item>ui-out.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>load_progress()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Variable deprecated_ui_load_progress_hook

<p>
<tt>int (*deprecated_ui_load_progress_hook)(const char* section,unsigned long num)</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bcache.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>charset.c
<item>cli-out.c
<item>coff-pe-read.c
<item>coffread.c
<item>complaints.c
<item>completer.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>demangle.c
<item>dictionary.c
<item>disasm.c
<item>doublest.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>environ.c
<item>eval.c
<item>event-loop.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>interps.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod-cisco.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macrocmd.c
<item>macroexp.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>observer.c
<item>osabi.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>reggroups.c
<item>remote-fileio.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>ser-base.c
<item>ser-unix.c
<item>serial.c
<item>solib-null.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>ui-file.c
<item>ui-out.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>load_progress()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Variable deprecated_target_new_objfile_hook

<p>
<tt>void (*deprecated_target_new_objfile_hook)(struct objfile*)</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>ada-typeprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>c-typeprint.c
<item>c-valprint.c
<item>coffread.c
<item>corefile.c
<item>cp-valprint.c
<item>dbxread.c
<item>disasm.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>eval.c
<item>event-top.c
<item>expprint.c
<item>f-typeprint.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>kod.c
<item>language.c
<item>m2-typeprint.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>memattr.c
<item>objc-lang.c
<item>objfiles.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>tramp-frame.c
<item>typeprint.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_remote()  :  remote.c
<item>clear_symtab_users()  :  symfile.c
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Variable auto_solib_add

<p>
<tt>int auto_solib_add</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ax-gdb.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-namespace.c
<item>cp-support.c
<item>dbxread.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>f-exp.c
<item>findvar.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>linespec.c
<item>m2-exp.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>parse.c
<item>printcmd.c
<item>remote.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>tramp-frame.c
<item>utils.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_solib()  :  solib.c
<item>attach_command()  :  infcmd.c
<item>handle_inferior_event()  :  infrun.c
<item>reload_shared_libraries()  :  solib.c
<item>remote_macosx_complete_create_or_attach()  :  remote.c
<item>remote_macosx_open()  :  remote.c
</itemize>
</descrip>

<sect1>Global Variable auto_solib_limit

<p>
<tt>int auto_solib_limit</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ax-gdb.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-namespace.c
<item>cp-support.c
<item>dbxread.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>f-exp.c
<item>findvar.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>linespec.c
<item>m2-exp.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>parse.c
<item>printcmd.c
<item>remote.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>tramp-frame.c
<item>utils.c
<item>varobj.c
</itemize>
</descrip>

<sect1>Global Variable overlay_debugging

<p>
<tt>enum overlay_debugging_state overlay_debugging</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ax-gdb.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-namespace.c
<item>cp-support.c
<item>dbxread.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>f-exp.c
<item>findvar.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>linespec.c
<item>m2-exp.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>parse.c
<item>printcmd.c
<item>remote.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>tramp-frame.c
<item>utils.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>agent_command()  :  ax-gdb.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>breakpoint_here_p()  :  breakpoint.c
<item>breakpoint_inserted_here_p()  :  breakpoint.c
<item>breakpoint_thread_match()  :  breakpoint.c
<item>build_address_symbolic()  :  printcmd.c
<item>check_duplicates()  :  breakpoint.c
<item>create_overlay_event_breakpoint()  :  breakpoint.c
<item>describe_other_breakpoints()  :  breakpoint.c
<item>find_pc_mapped_section()  :  symfile.c
<item>find_pc_overlay()  :  symfile.c
<item>insert_bp_location()  :  breakpoint.c
<item>list_overlays_command()  :  symfile.c
<item>map_overlay_command()  :  symfile.c
<item>overlay_auto_command()  :  symfile.c
<item>overlay_is_mapped()  :  symfile.c
<item>overlay_manual_command()  :  symfile.c
<item>overlay_mapped_address()  :  symfile.c
<item>overlay_off_command()  :  symfile.c
<item>overlay_unmapped_address()  :  symfile.c
<item>pc_in_mapped_range()  :  symfile.c
<item>pc_in_unmapped_range()  :  symfile.c
<item>read_var_value()  :  findvar.c
<item>remove_breakpoint()  :  breakpoint.c
<item>section_is_mapped()  :  symfile.c
<item>section_is_overlay()  :  symfile.c
<item>software_breakpoint_inserted_here_p()  :  breakpoint.c
<item>symbol_overlayed_address()  :  symfile.c
<item>unmap_overlay_command()  :  symfile.c
<item>write_exp_msymbol()  :  parse.c
</itemize>
</descrip>

<sect1>Global Variable overlay_cache_invalid

<p>
<tt>int overlay_cache_invalid</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ax-gdb.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-namespace.c
<item>cp-support.c
<item>dbxread.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>f-exp.c
<item>findvar.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>linespec.c
<item>m2-exp.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>parse.c
<item>printcmd.c
<item>remote.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>tramp-frame.c
<item>utils.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>fetch_inferior_event()  :  infrun.c
<item>load_command()  :  symfile.c
<item>overlay_is_mapped()  :  symfile.c
<item>prepare_to_wait()  :  infrun.c
<item>wait_for_inferior()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Variable readnow_symbol_files

<p>
<tt>int readnow_symbol_files</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>event-top.c
<item>frame.c
<item>infcmd.c
<item>infrun.c
<item>interps.c
<item>main.c
<item>objc-exp.c
<item>p-exp.c
<item>source.c
<item>symfile.c
<item>top.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>captured_main()  :  main.c
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Variable symbol_reloading

<p>
<tt>int symbol_reloading</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Variable target_overlay_update

<p>
<tt>void (*target_overlay_update)(struct obj_section*)</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>overlay_is_mapped()  :  symfile.c
<item>overlay_load_command()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Variable overlaylist

<p>
<tt>struct cmd_list_element* overlaylist</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
<item>overlay_command()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>mmap_symbol_files_flag</bf><newline>
<tt>static int mmap_symbol_files_flag</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()
<item>symfile_bfd_open()
</itemize>
</descrip>
<p>
<bf>already_found_debug_file</bf><newline>
<tt>static const char* already_found_debug_file</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_dsym_command()
<item>find_separate_debug_file()
</itemize>
</descrip>
<p>
<bf>kext_symbol_file_path</bf><newline>
<tt>static char* kext_symbol_file_path</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()
<item>find_kext_files_by_bundle()
</itemize>
</descrip>
<p>
<bf>symtab_fns</bf><newline>
<tt>static struct sym_fns* symtab_fns</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_symtab_fns()
<item>find_sym_fns()
</itemize>
</descrip>
<p>
<bf>debug_file_directory</bf><newline>
<tt>static char* debug_file_directory</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()
</itemize>
</descrip>
<p>
<bf>download_write_size</bf><newline>
<tt>static int download_write_size</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()
</itemize>
</descrip>
<p>
<bf>validate_download</bf><newline>
<tt>static int validate_download</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>load_progress()
</itemize>
</descrip>
<p>
<bf>filename_language_table</bf><newline>
<tt>static filename_language* filename_language_table</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_filename_language()
<item>deduce_language_from_filename()
<item>info_ext_lang_command()
<item>init_filename_language_table()
<item>set_ext_lang_command()
</itemize>
</descrip>
<p>
<bf>fl_table_size</bf><newline>
<tt>static int fl_table_size</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_filename_language()
<item>init_filename_language_table()
</itemize>
</descrip>
<p>
<bf>fl_table_next</bf><newline>
<tt>static int fl_table_next</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_filename_language()
<item>deduce_language_from_filename()
<item>info_ext_lang_command()
<item>init_filename_language_table()
<item>set_ext_lang_command()
</itemize>
</descrip>
<p>
<bf>ext_args</bf><newline>
<tt>static char* ext_args</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()
<item>set_ext_lang_command()
</itemize>
</descrip>
<p>
<bf>cache_ovly_table</bf><newline>
<tt>static unsigned (*cache_ovly_table)[4]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>simple_free_overlay_table()
<item>simple_overlay_update()
<item>simple_overlay_update_1()
<item>simple_read_overlay_table()
</itemize>
</descrip>
<p>
<bf>cache_novlys</bf><newline>
<tt>static unsigned cache_novlys</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>simple_free_overlay_table()
<item>simple_overlay_update()
<item>simple_overlay_update_1()
<item>simple_read_overlay_table()
</itemize>
</descrip>
<p>
<bf>cache_ovly_table_base</bf><newline>
<tt>static CORE_ADDR cache_ovly_table_base</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>simple_free_overlay_table()
<item>simple_overlay_update()
<item>simple_overlay_update_1()
<item>simple_read_overlay_table()
</itemize>
</descrip>

<sect1>Global Function _initialize_symfile()

<p><tt>void _initialize_symfile ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>init_filename_language_table()  :  symfile.c
<item>warning()  :  utils.c
<item>add_alias_cmd(), add_cmd(), add_com_alias(), add_info(), add_prefix_cmd(), add_setshow_boolean_cmd(), add_setshow_integer_cmd(), add_setshow_optional_filename_cmd(), add_setshow_string_noescape_cmd(), set_cmd_completer(), xstrdup()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>add_dsym_command()  :  symfile.c
<item>add_kext_command()  :  symfile.c
<item>add_shared_symbol_files_command()  :  symfile.c
<item>add_symbol_file_command()  :  symfile.c
<item>filename_completer()  :  completer.c
<item>info_ext_lang_command()  :  symfile.c
<item>list_overlays_command()  :  symfile.c
<item>load_command()  :  symfile.c
<item>map_overlay_command()  :  symfile.c
<item>overlay_auto_command()  :  symfile.c
<item>overlay_command()  :  symfile.c
<item>overlay_load_command()  :  symfile.c
<item>overlay_manual_command()  :  symfile.c
<item>overlay_off_command()  :  symfile.c
<item>remove_symbol_file_command()  :  symfile.c
<item>reread_symbols_command()  :  symfile.c
<item>set_ext_lang_command()  :  symfile.c
<item>show_debug_file_directory()  :  symfile.c
<item>show_download_write_size()  :  symfile.c
<item>show_ext_args()  :  symfile.c
<item>show_symbol_reloading()  :  symfile.c
<item>symbol_file_command()  :  symfile.c
<item>unmap_overlay_command()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_file_directory  :  symfile.c
<item>download_write_size  :  symfile.c
<item>ext_args  :  symfile.c
<item>kext_symbol_file_path  :  symfile.c
<item>mmap_symbol_files_flag  :  symfile.c
<item>overlaylist  :  symfile.c
<item>symbol_reloading  :  symfile.c
<item>cmdlist, setlist, showlist
</itemize>
</descrip>

<sect1>Global Function add_psymbol_to_list()

<p><tt>const struct partial_symbol* add_psymbol_to_list ( const char* name, int namelength, domain_enum domain, enum address_class addrclass, struct psymbol_allocation_list* list, long val, CORE_ADDR coreaddr, enum language language, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_bcache()  :  bcache.c
<item>extend_psymbol_list()  :  symmisc.c
<item>symbol_set_names()  :  symtab.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_enum_psymbol()  :  dwarfread.c
<item>add_partial_symbol()  :  dwarf2read.c
<item>dwarf2_scan_inlined_section_for_psymbols()  :  dwarf2read.c
<item>dwarf2_scan_pubtype_for_psymbols()  :  dwarf2read.c
<item>handle_psymbol_enumerators()  :  mdebugread.c
<item>load_partial_dies()  :  dwarf2read.c
<item>parse_partial_symbols()  :  mdebugread.c
<item>read_dbx_symtab()  :  dbxread.c
<item>replace_psymbols_with_correct_psymbols()  :  symfile.c
<item>scan_partial_inlined_function_symbols()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function add_psymbol_with_dem_name_to_list()

<p><tt>void add_psymbol_with_dem_name_to_list ( char* name, int namelength, char* dem_name, int dem_namelength, domain_enum domain, enum address_class addrclass, struct psymbol_allocation_list* list, long val, CORE_ADDR coreaddr, enum language language, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_bcache()  :  bcache.c
<item>extend_psymbol_list()  :  symmisc.c
<item>internal_error()  :  utils.c
<item>symbol_init_language_specific()  :  symtab.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
</descrip>

<sect1>Global Function add_symtab_fns()

<p><tt>void add_symtab_fns ( struct sym_fns* sf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_coffread()  :  coffread.c
<item>_initialize_dbxread()  :  dbxread.c
<item>_initialize_elfread()  :  elfread.c
<item>_initialize_mipsread()  :  mipsread.c
<item>_initialize_nlmread()  :  nlmread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symtab_fns  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function alloc_section_addr_info()

<p><tt>struct section_addr_info* alloc_section_addr_info ( size_t num_sections )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_symbol_file_command()  :  symfile.c
<item>build_section_addr_info_from_section_table()  :  symfile.c
<item>copy_section_addr_info()  :  symfile.c
<item>symbol_file_add_from_memory()  :  symfile-mem.c
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
<item>syms_from_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function allocate_psymtab()

<p><tt>struct partial_symtab* allocate_psymtab ( const char* filename, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>obsavestring()  :  symfile.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_create_include_psymtab()  :  dwarf2read.c
<item>end_psymtab()  :  dbxread.c
<item>new_psymtab()  :  mdebugread.c
<item>start_psymtab_common()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function allocate_symtab()

<p><tt>struct symtab* allocate_symtab ( const char* filename, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deduce_language_from_filename()  :  symfile.c
<item>obsavestring()  :  symfile.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>end_symtab()  :  buildsym.c
<item>get_java_class_symtab()  :  jv-lang.c
<item>initialize_namespace_symtab()  :  cp-namespace.c
<item>new_symtab()  :  mdebugread.c
</itemize>
</descrip>

<sect1>Global Function append_psymbols_as_msymbols()

<p><tt>void append_psymbols_as_msymbols ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_objfile_prefix()  :  symfile.c
<item>do_cleanups()  :  utils.c
<item>executable_objfile()  :  objfiles.c
<item>find_section_for_addr()  :  symfile.c
<item>init_minimal_symbol_collection()  :  minsyms.c
<item>install_minimal_symbols()  :  minsyms.c
<item>internal_error()  :  utils.c
<item>lookup_minimal_symbol_by_pc_section_from_objfile()  :  minsyms.c
<item>make_cleanup_discard_minimal_symbols()  :  minsyms.c
<item>partial_symbol_special_info()  :  objfiles.c
<item>prim_record_minimal_symbol_and_info()  :  minsyms.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function build_section_addr_info_from_section_table()

<p><tt>struct section_addr_info* build_section_addr_info_from_section_table ( const struct section_table* start, const struct section_table* end )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_section_addr_info()  :  symfile.c
<item>internal_error()  :  utils.c
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>symbol_add_stub()  :  solib.c
</itemize>
</descrip>

<sect1>Global Function clear_symtab_users()

<p><tt>void clear_symtab_users ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_current_source_symtab_and_line()  :  source.c
<item>clear_displays()  :  printcmd.c
<item>clear_internalvars()  :  value.c
<item>clear_pc_function_cache()  :  blockframe.c
<item>clear_value_history()  :  value.c
<item>set_default_breakpoint()  :  breakpoint.c
<item>deprecated_target_new_objfile_hook()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>clear_symtab_users_cleanup()  :  symfile.c
<item>free_all_objfiles()  :  objfiles.c
<item>new_symfile_objfile()  :  symfile.c
<item>remove_symbol_file_command()  :  symfile.c
<item>reread_symbols()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>deprecated_target_new_objfile_hook  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function convert_sect_addrs_to_offsets_via_on_disk_file()

<p><tt>struct section_offsets* convert_sect_addrs_to_offsets_via_on_disk_file ( struct section_addr_info* sect_addrs, const char* file, int* num_offsets )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>gdbarch_osabi()  :  gdbarch.c
<item>make_cleanup_bfd_close()  :  utils.c
<item>symfile_bfd_open_safe()  :  symfile.c
<item>xmalloc()  :  utils.c
<item>file_exists_p(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_kext_command()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function copy_section_addr_info()

<p><tt>struct section_addr_info* copy_section_addr_info ( struct section_addr_info* addrs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_section_addr_info()  :  symfile.c
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function deduce_language_from_filename()

<p><tt>enum language deduce_language_from_filename ( const char* filename )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strcmp(), strrchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>allocate_symtab()  :  symfile.c
<item>parse_partial_symbols()  :  mdebugread.c
<item>patch_subfile_names()  :  buildsym.c
<item>read_dbx_symtab()  :  dbxread.c
<item>set_cu_language()  :  dwarfread.c
<item>set_initial_language()  :  symfile.c
<item>start_psymtab()  :  dbxread.c
<item>start_subfile()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>filename_language_table  :  symfile.c
<item>fl_table_next  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function default_symfile_offsets()

<p><tt>void default_symfile_offsets ( struct objfile* objfile, struct section_addr_info* addrs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>init_objfile_sect_indices()  :  symfile.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), bfd_map_over_sections()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>coffread.c
<item>dbxread.c
<item>elfread.c
<item>mipsread.c
<item>nlmread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>place_section()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function discard_psymtab()

<p><tt>void discard_psymtab ( struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>end_psymtab()  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Function find_lowest_section()

<p><tt>void find_lowest_section ( bfd* abfd, asection* sect, void* obj )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>syms_from_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function find_objfile()

<p><tt>struct objfile* find_objfile ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>warning()  :  utils.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remove_symbol_file_command()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function find_pc_mapped_section()

<p><tt>asection* find_pc_mapped_section ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>overlay_is_mapped()  :  symfile.c
<item>pc_in_mapped_range()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>block_for_pc()  :  block.c
<item>blockvector_for_pc()  :  block.c
<item>find_pc_function()  :  blockframe.c
<item>find_pc_function_no_inlined()  :  blockframe.c
<item>find_pc_psymbol()  :  symtab.c
<item>find_pc_psymtab()  :  symtab.c
<item>find_pc_section()  :  objfiles.c
<item>find_pc_symtab()  :  symtab.c
<item>get_frame_function_inlined()  :  blockframe.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cached_mapped_section  :  symtab.c
<item>last_mapped_section_lookup_pc  :  symtab.c
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function find_pc_overlay()

<p><tt>asection* find_pc_overlay ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>overlay_is_mapped()  :  symfile.c
<item>pc_in_mapped_range()  :  symfile.c
<item>pc_in_unmapped_range()  :  symfile.c
<item>section_is_overlay()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>build_address_symbolic()  :  printcmd.c
<item>create_internal_breakpoint()  :  breakpoint.c
<item>decode_indirect()  :  linespec.c
<item>find_pc_line()  :  symtab.c
<item>find_pc_partial_function_impl()  :  blockframe.c
<item>hand_function_call()  :  infcall.c
<item>handle_inferior_event()  :  infrun.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>insert_step_resume_breakpoint_at_frame()  :  infrun.c
<item>parse_breakpoint_sals()  :  breakpoint.c
<item>step_into_function()  :  infrun.c
<item>update_inlined_function_line_table_entry()  :  symtab.c
<item>update_tmp_frame_stack()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cached_overlay_section  :  symtab.c
<item>last_overlay_section_lookup_pc  :  symtab.c
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function free_named_symtabs()

<p><tt>int free_named_symtabs ( char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cashier_psymtab()  :  symfile.c
<item>lookup_partial_symtab()  :  symtab.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_end_symtab()  :  coffread.c
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
<item>end_psymtab()  :  dbxread.c
<item>scan_compilation_units()  :  dwarfread.c
</itemize>
</descrip>

<sect1>Global Function free_section_addr_info()

<p><tt>void free_section_addr_info ( struct section_addr_info* sap )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_free_section_addr_info()  :  utils.c
<item>symbol_add_stub()  :  solib.c
</itemize>
</descrip>

<sect1>Global Function generic_load()

<p><tt>void generic_load ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_bfd_close()  :  utils.c
<item>paddr_nz()  :  utils.c
<item>perror_with_name()  :  utils.c
<item>print_transfer_performance()  :  symfile.c
<item>ui_out_field_fmt()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>write_pc()  :  regcache.c
<item>xmalloc()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), bfd_check_format(), bfd_errmsg(), bfd_get_error(), bfd_map_over_sections(), bfd_openr(), gettimeofday(), strchr(), strlen(), strtoul(), xstrdup()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>init_remote_async_ops()  :  remote.c
<item>init_remote_ops()  :  remote.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>add_section_size_callback()  :  symfile.c
<item>load_section_callback()  :  symfile.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>gnutarget  :  corefile.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function get_section_index()

<p><tt>int get_section_index ( struct objfile* objfile, const char* section_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bfd_get_section_by_name()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_partial_symbols()  :  mdebugread.c
<item>record_minimal_symbol()  :  mdebugread.c
</itemize>
</descrip>

<sect1>Global Function init_psymbol_list()

<p><tt>void init_psymbol_list ( struct objfile* objfile, int total_symbols )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symfile_read()  :  coffread.c
<item>dbx_symfile_read()  :  dbxread.c
<item>dwarf2_build_psymtabs()  :  dwarf2read.c
<item>dwarf_build_psymtabs()  :  dwarfread.c
<item>elf_symfile_read()  :  elfread.c
</itemize>
</descrip>

<sect1>Global Function list_overlays_command()

<p><tt>void list_overlays_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_print_address_numeric()  :  printcmd.c
<item>internal_error()  :  utils.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>overlay_is_mapped()  :  symfile.c
<item>printf_filtered()  :  utils.c
<item>puts_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function map_overlay_command()

<p><tt>void map_overlay_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>printf_unfiltered()  :  utils.c
<item>section_is_overlay()  :  symfile.c
<item>sections_overlap()  :  symfile.c
<item>strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>info_verbose  :  top.c
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function new_symfile_objfile()

<p><tt>void new_symfile_objfile ( struct objfile* objfile, int mainline, int verbo )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_re_set()  :  breakpoint.c
<item>clear_complaints()  :  complaints.c
<item>clear_symtab_users()  :  symfile.c
<item>macosx_init_dyld_symfile()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
<item>symfile_objfile  :  objfiles.c
<item>exec_bfd
</itemize>
</descrip>

<sect1>Global Function obconcat()

<p><tt>char* obconcat ( struct obstack* obstackp, const char* s1, const char* s2, const char* s3 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>__builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), _obstack_newchunk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>define_symbol()  :  stabsread.c
<item>enum_type()  :  dwarfread.c
<item>parse_symbol()  :  mdebugread.c
<item>read_cpp_abbrev()  :  stabsread.c
<item>read_member_functions()  :  stabsread.c
<item>struct_type()  :  dwarfread.c
<item>typename_concat()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function obsavestring()

<p><tt>char* obsavestring ( const char* ptr, int size, struct obstack* obstackp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_decode_symbol()  :  ada-lang.c
<item>allocate_psymtab()  :  symfile.c
<item>allocate_symtab()  :  symfile.c
<item>check_one_possible_namespace_symbol()  :  cp-namespace.c
<item>coff_read_enum_type()  :  coffread.c
<item>coff_read_struct_type()  :  coffread.c
<item>common_block_start()  :  stabsread.c
<item>cp_copy_usings()  :  cp-namespace.c
<item>cp_set_block_scope()  :  cp-namespace.c
<item>define_symbol()  :  stabsread.c
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
<item>elf_symtab_read()  :  elfread.c
<item>end_symtab()  :  buildsym.c
<item>enum_type()  :  dwarfread.c
<item>guess_structure_name()  :  dwarf2read.c
<item>init_type()  :  gdbtypes.c
<item>name_lookup()  :  ada-exp.c
<item>new_symtab()  :  mdebugread.c
<item>parse_symbol()  :  mdebugread.c
<item>parse_type()  :  mdebugread.c
<item>patch_block_stabs()  :  stabsread.c
<item>read_dbx_symtab()  :  dbxread.c
<item>read_enum_type()  :  stabsread.c
<item>read_member_functions()  :  stabsread.c
<item>read_one_struct_field()  :  stabsread.c
<item>read_structure_type()  :  dwarf2read.c
<item>struct_type()  :  dwarfread.c
<item>symbol_init_demangled_name()  :  symtab.c
<item>write_var_from_name()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function open_bfd_matching_arch()

<p><tt>bfd* open_bfd_matching_arch ( bfd* archive_bfd, bfd_format expected_format, enum gdb_osabi osabi )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_lookup_osabi()  :  osabi.c
<item>gdbarch_lookup_osabi_from_bfd()  :  osabi.c
<item>gdbarch_osabi()  :  gdbarch.c
<item>bfd_check_format(), bfd_openr_next_archived_file()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>open_bfd_from_oso()  :  dbxread.c
<item>reread_symbols_for_objfile()  :  symfile.c
<item>symfile_bfd_open()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function overlay_mapped_address()

<p><tt>CORE_ADDR overlay_mapped_address ( CORE_ADDR pc, asection* section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>pc_in_unmapped_range()  :  symfile.c
<item>section_is_overlay()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>build_address_symbolic()  :  printcmd.c
<item>find_function_start_sal()  :  symtab.c
<item>find_pc_line()  :  symtab.c
<item>find_pc_partial_function_impl()  :  blockframe.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>sym_info()  :  printcmd.c
<item>update_inlined_function_line_table_entry()  :  symtab.c
<item>update_tmp_frame_stack()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function overlay_unmapped_address()

<p><tt>CORE_ADDR overlay_unmapped_address ( CORE_ADDR pc, asection* section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>pc_in_mapped_range()  :  symfile.c
<item>section_is_overlay()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>address_info()  :  printcmd.c
<item>find_function_start_sal()  :  symtab.c
<item>find_pc_partial_function_impl()  :  blockframe.c
<item>insert_bp_location()  :  breakpoint.c
<item>remove_breakpoint()  :  breakpoint.c
<item>symbol_overlayed_address()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function pc_in_mapped_range()

<p><tt>CORE_ADDR pc_in_mapped_range ( CORE_ADDR pc, asection* section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>section_is_overlay()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_pc_mapped_section()  :  symfile.c
<item>find_pc_overlay()  :  symfile.c
<item>overlay_unmapped_address()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function pc_in_unmapped_range()

<p><tt>CORE_ADDR pc_in_unmapped_range ( CORE_ADDR pc, asection* section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>section_is_overlay()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>build_address_symbolic()  :  printcmd.c
<item>find_pc_line()  :  symtab.c
<item>find_pc_overlay()  :  symfile.c
<item>find_pc_partial_function_impl()  :  blockframe.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>overlay_mapped_address()  :  symfile.c
<item>sym_info()  :  printcmd.c
<item>update_inlined_function_line_table_entry()  :  symtab.c
<item>update_tmp_frame_stack()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function place_section()

<p><tt>void place_section ( bfd* abfd, asection* sect, void* obj )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>exec_set_section_address()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>default_symfile_offsets()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function print_transfer_performance()

<p><tt>void print_transfer_performance ( struct ui_file* stream, unsigned long data_count, unsigned long write_count, const struct timeval* start_time, const struct timeval* end_time )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ui_out_field_fmt()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>generic_load()  :  symfile.c
<item>report_transfer_performance()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function psymtab_to_symtab()

<p><tt>struct symtab* psymtab_to_symtab ( struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>start_timer()  :  maint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol_list()  :  ada-lang.c
<item>backtrace_command_1()  :  stack.c
<item>basic_lookup_transparent_type()  :  symtab.c
<item>find_pc_partial_function_impl()  :  blockframe.c
<item>find_pc_sect_symtab()  :  symtab.c
<item>lookup_symbol_aux_psymtabs()  :  symtab.c
<item>lookup_symtab()  :  symtab.c
<item>lookup_symtab_all()  :  symtab.c
<item>maintenance_check_symtabs()  :  symmisc.c
<item>read_in_psymtabs()  :  cp-support.c
<item>search_symbols()  :  symtab.c
<item>select_source_symtab()  :  source.c
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>decrement_reading_symtab()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>currently_reading_symtab  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function replace_psymbols_with_correct_psymbols()

<p><tt>void replace_psymbols_with_correct_psymbols ( struct objfile* exe_obj )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_psymbol_to_list()  :  symfile.c
<item>internal_error()  :  utils.c
<item>psymtab_get_first()  :  objfiles.c
<item>psymtab_get_next()  :  objfiles.c
<item>start_psymtab_common()  :  symfile.c
<item>symtab_clear_cached_lookup_values()  :  symtab.c
<item>tell_breakpoints_objfile_changed()  :  breakpoint.c
<item>tell_objc_msgsend_cacher_objfile_changed()  :  objc-lang.c
<item>_obstack_newchunk(), strlen(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dwarf2_kext_psymtab_to_symtab()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function report_transfer_performance()

<p><tt>void report_transfer_performance ( unsigned long data_count, time_t start_time, time_t end_time )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>print_transfer_performance()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

<sect1>Global Function reread_symbols()

<p><tt>void reread_symbols ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_symtab_users()  :  symfile.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>observer_notify_executable_changed()  :  observer.c
<item>reread_symbols_for_objfile()  :  symfile.c
<item>warning()  :  utils.c
<item>bfd_get_mtime(), stat()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>attach_command()  :  infcmd.c
<item>remote_open_1()  :  remote.c
<item>reread_symbols_command()  :  symfile.c
<item>run_command_1()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function reread_symbols_for_objfile()

<p><tt>int reread_symbols_for_objfile ( struct objfile* objfile, long new_modtime, enum gdb_osabi osabi, struct objfile** next )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bcache_xfree()  :  bcache.c
<item>bcache_xmalloc()  :  bcache.c
<item>breakpoint_re_set()  :  breakpoint.c
<item>build_objfile_section_table()  :  objfiles.c
<item>clear_complaints()  :  complaints.c
<item>clear_objfile_data()  :  objfiles.c
<item>discard_cleanups()  :  utils.c
<item>equivalence_table_delete()  :  symmisc.c
<item>error()  :  utils.c
<item>find_libobjc_objfile()  :  objc-lang.c
<item>free_objfile()  :  objfiles.c
<item>init_entry_point_info()  :  objfiles.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_free_objfile()  :  objfiles.c
<item>objc_init_runtime_version()  :  objc-lang.c
<item>objc_init_trampoline_observer()  :  objc-lang.c
<item>objfile_delete_from_ordered_sections()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>objfile_relocate()  :  objfiles.c
<item>open_bfd_matching_arch()  :  symfile.c
<item>printf_unfiltered()  :  utils.c
<item>reinit_frame_cache()  :  frame.c
<item>remove_target_sections()  :  target/target.c
<item>reread_separate_symbols()  :  symfile.c
<item>symtab_clear_cached_lookup_values()  :  symtab.c
<item>tell_breakpoints_objfile_changed()  :  breakpoint.c
<item>tell_objc_msgsend_cacher_objfile_changed()  :  objc-lang.c
<item>terminate_minimal_symbol_table()  :  objfiles.c
<item>warning()  :  utils.c
<item>xfree()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk(), _obstack_begin(), _obstack_newchunk(), bfd_check_format(), bfd_close(), bfd_errmsg(), bfd_get_error(), bfd_get_mtime(), bfd_openr(), htab_delete(), stat(), strcmp(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>reread_symbols()  :  symfile.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>clear_symtab_users_cleanup()  :  symfile.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>obstack_free()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gnutarget  :  corefile.c
<item>symfile_complaints  :  complaints.c
<item>symfile_objfile  :  objfiles.c
<item>exec_bfd
</itemize>
</descrip>

<sect1>Global Function section_is_mapped()

<p><tt>int section_is_mapped ( asection* section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>overlay_is_mapped()  :  symfile.c
<item>section_is_overlay()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
<item>breakpoint_here_p()  :  breakpoint.c
<item>breakpoint_inserted_here_p()  :  breakpoint.c
<item>breakpoint_thread_match()  :  breakpoint.c
<item>find_function_start_sal()  :  symtab.c
<item>insert_bp_location()  :  breakpoint.c
<item>jump_command()  :  infcmd.c
<item>software_breakpoint_inserted_here_p()  :  breakpoint.c
<item>sym_info()  :  printcmd.c
<item>symbol_overlayed_address()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function section_is_overlay()

<p><tt>int section_is_overlay ( asection* section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>address_info()  :  printcmd.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>breakpoint_here_p()  :  breakpoint.c
<item>breakpoint_inserted_here_p()  :  breakpoint.c
<item>breakpoint_thread_match()  :  breakpoint.c
<item>clear_command()  :  breakpoint.c
<item>find_function_start_sal()  :  symtab.c
<item>find_pc_overlay()  :  symfile.c
<item>insert_bp_location()  :  breakpoint.c
<item>jump_command()  :  infcmd.c
<item>map_overlay_command()  :  symfile.c
<item>overlay_invalidate_all()  :  symfile.c
<item>overlay_is_mapped()  :  symfile.c
<item>overlay_mapped_address()  :  symfile.c
<item>overlay_unmapped_address()  :  symfile.c
<item>pc_in_mapped_range()  :  symfile.c
<item>pc_in_unmapped_range()  :  symfile.c
<item>remove_breakpoint()  :  breakpoint.c
<item>section_is_mapped()  :  symfile.c
<item>simple_overlay_update()  :  symfile.c
<item>software_breakpoint_inserted_here_p()  :  breakpoint.c
<item>sym_info()  :  printcmd.c
<item>symbol_overlayed_address()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function sort_pst_symbols()

<p><tt>void sort_pst_symbols ( struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>qsort()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
<item>end_psymtab()  :  dbxread.c
<item>scan_compilation_units()  :  dwarfread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>compare_psymbols()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function start_psymtab_common()

<p><tt>struct partial_symtab* start_psymtab_common ( struct objfile* objfile, struct section_offsets* section_offsets, const char* filename, CORE_ADDR textlow, struct partial_symbol** global_syms, struct partial_symbol** static_syms )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_psymtab()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
<item>parse_partial_symbols()  :  mdebugread.c
<item>replace_psymbols_with_correct_psymbols()  :  symfile.c
<item>scan_compilation_units()  :  dwarfread.c
<item>start_psymtab()  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Function symbol_file_add()

<p><tt>struct objfile* symbol_file_add ( const char* name, int from_tty, struct section_addr_info* addrs, int mainline, int flags )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>symbol_file_add_name_with_addrs_or_offsets()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>symbol_add_stub()  :  solib.c
</itemize>
</descrip>

<sect1>Global Function symbol_file_add_bfd_helper()

<p><tt>int symbol_file_add_bfd_helper ( void* v )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>symbol_file_add_with_addrs_or_offsets()  :  symfile.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>symbol_file_add_bfd_safe()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function symbol_file_add_bfd_safe()

<p><tt>struct objfile* symbol_file_add_bfd_safe ( bfd* abfd, int from_tty, struct section_addr_info* addrs, struct section_offsets* offsets, int mainline, int flags, int symflags, CORE_ADDR mapaddr, const char* prefix, char* kext_bundle )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objfile_keeps_section()  :  objfiles.c
<item>catch_errors()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>symbol_file_add_bfd_helper()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function symbol_file_add_bfd_using_objfile()

<p><tt>struct objfile* symbol_file_add_bfd_using_objfile ( struct objfile* objfile, bfd* abfd, int from_tty, struct section_addr_info* addrs, struct section_offsets* offsets, int mainline, int flags, int symflags, CORE_ADDR mapaddr, const char* prefix )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function symbol_file_add_from_bfd()

<p><tt>struct objfile* symbol_file_add_from_bfd ( bfd* abfd, int from_tty, struct section_addr_info* addrs, int mainline, int flags )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>symbol_file_add_with_addrs_or_offsets()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>symbol_file_add_from_memory()  :  symfile-mem.c
</itemize>
</descrip>

<sect1>Global Function symbol_file_add_main()

<p><tt>void symbol_file_add_main ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>symbol_file_add_main_1()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>attach_command()  :  infcmd.c
<item>follow_exec()  :  infrun.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>captured_main()  :  main.c
</itemize>
</descrip>

<sect1>Global Function symbol_file_add_name_with_addrs_or_offsets()

<p><tt>struct objfile* symbol_file_add_name_with_addrs_or_offsets ( const char* name, int from_tty, struct section_addr_info* addrs, struct section_offsets* offsets, int num_offsets, int mainline, int flags, int symflags, CORE_ADDR mapaddr, const char* prefix, char* kext_bundle )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>symbol_file_add_with_addrs_or_offsets()  :  symfile.c
<item>symfile_bfd_open()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_kext_command()  :  symfile.c
<item>add_symbol_file_command()  :  symfile.c
<item>symbol_file_add()  :  symfile.c
<item>symbol_file_add_main_1()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function symbol_file_add_using_objfile()

<p><tt>struct objfile* symbol_file_add_using_objfile ( struct objfile* in_objfile, const char* name, int from_tty, struct section_addr_info* addrs, int mainline, int flags )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>symbol_file_add_name_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function symbol_file_add_with_addrs_or_offsets_using_objfile()

<p><tt>struct objfile* symbol_file_add_with_addrs_or_offsets_using_objfile ( struct objfile* in_objfile, bfd* abfd, int from_tty, struct section_addr_info* addrs, struct section_offsets* offsets, int num_offsets, int mainline, int flags, int symflags, CORE_ADDR mapaddr, const char* prefix, char* not_loaded_kext_bundle )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_section_addr_info()  :  symfile.c
<item>allocate_objfile()  :  objfiles.c
<item>allocate_objfile_using_objfile()  :  objfiles.c
<item>append_psymbols_as_msymbols()  :  symfile.c
<item>check_bfd_for_matching_uuid()  :  symfile.c
<item>copy_section_addr_info()  :  symfile.c
<item>discard_cleanups()  :  utils.c
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>find_separate_debug_file()  :  symfile.c
<item>gdb_flush()  :  ui-file.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_bfd_close()  :  utils.c
<item>make_cleanup_free_section_addr_info()  :  utils.c
<item>new_symfile_objfile()  :  symfile.c
<item>printf_unfiltered()  :  utils.c
<item>psymtab_get_first()  :  objfiles.c
<item>psymtab_get_next()  :  objfiles.c
<item>psymtab_to_symtab()  :  symfile.c
<item>put_objfile_before()  :  objfiles.c
<item>query()  :  utils.c
<item>replace_psymbols_with_correct_psymbols()  :  symfile.c
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
<item>symfile_bfd_open_safe()  :  symfile.c
<item>syms_from_objfile()  :  symfile.c
<item>warning()  :  utils.c
<item>wrap_here()  :  utils.c
<item>xfree()  :  utils.c
<item>bfd_cache_close_all(), bfd_close(), deprecated_post_add_symbol_hook(), deprecated_pre_add_symbol_hook(), deprecated_target_new_objfile_hook(), macho_calculate_offsets_for_dsym(), macosx_get_osabi_from_dyld_entry(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>symbol_file_add_bfd_using_objfile()  :  symfile.c
<item>symbol_file_add_name_with_addrs_or_offsets_using_objfile()  :  symfile.c
<item>symbol_file_add_with_addrs_or_offsets()  :  symfile.c
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>deprecated_post_add_symbol_hook  :  symfile.c
<item>deprecated_pre_add_symbol_hook  :  symfile.c
<item>deprecated_target_new_objfile_hook  :  symfile.c
<item>gdb_stdout  :  main.c
<item>info_verbose  :  top.c
<item>readnow_symbol_files  :  symfile.c
<item>symfile_objfile  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function symbol_file_clear()

<p><tt>void symbol_file_clear ( int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>free_objfile()  :  objfiles.c
<item>printf_unfiltered()  :  utils.c
<item>query()  :  utils.c
<item>symtab_clear_cached_lookup_values()  :  symtab.c
<item>macosx_init_dyld_symfile(), state_change_hook()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>symbol_file_command()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>state_change_hook  :  top.c
<item>symfile_objfile  :  objfiles.c
<item>exec_bfd
</itemize>
</descrip>

<sect1>Global Function symbol_file_command()

<p><tt>void symbol_file_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>dont_repeat()  :  top.c
<item>error()  :  utils.c
<item>make_cleanup_freeargv()  :  utils.c
<item>nomem()  :  utils.c
<item>symbol_file_add_main_1()  :  symfile.c
<item>symbol_file_clear()  :  symfile.c
<item>buildargv(), state_change_hook(), strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>state_change_hook  :  top.c
</itemize>
</descrip>

<sect1>Global Function symbol_overlayed_address()

<p><tt>CORE_ADDR symbol_overlayed_address ( CORE_ADDR address, asection* section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>overlay_unmapped_address()  :  symfile.c
<item>section_is_mapped()  :  symfile.c
<item>section_is_overlay()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_var_value()  :  findvar.c
<item>write_exp_msymbol()  :  parse.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function symfile_bfd_open()

<p><tt>bfd* symfile_bfd_open ( const char* name, int mainline, enum gdb_osabi osabi )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>open_bfd_matching_arch()  :  symfile.c
<item>openp()  :  source.c
<item>perror_with_name()  :  utils.c
<item>xfree()  :  utils.c
<item>bfd_check_format(), bfd_close(), bfd_errmsg(), bfd_fopen(), bfd_get_error(), bfd_mmap_file(), close(), getenv(), macosx_filename_in_bundle(), tilde_expand()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_kext_psymtab_to_symtab()  :  dwarf2read.c
<item>find_kext_files_by_symfile()  :  symfile.c
<item>get_binary_file_uuids()  :  utils.c
<item>reread_separate_symbols()  :  symfile.c
<item>symbol_file_add_name_with_addrs_or_offsets()  :  symfile.c
<item>symbol_file_add_name_with_addrs_or_offsets_using_objfile()  :  symfile.c
<item>symfile_bfd_open_helper()  :  symfile.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gnutarget  :  corefile.c
<item>mmap_symbol_files_flag  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function symfile_bfd_open_helper()

<p><tt>int symfile_bfd_open_helper ( void* v )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>symfile_bfd_open()  :  symfile.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>symfile_bfd_open_safe()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function symfile_bfd_open_safe()

<p><tt>bfd* symfile_bfd_open_safe ( const char* filename, int mainline, enum gdb_osabi osabi )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>catch_errors()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>convert_sect_addrs_to_offsets_via_on_disk_file()  :  symfile.c
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>symfile_bfd_open_helper()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function symfile_relocate_debug_section()

<p><tt>bfd_byte* symfile_relocate_debug_section ( bfd* abfd, asection* sectp, bfd_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bfd_map_over_sections(), bfd_simple_get_relocated_section_contents()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dbx_psymtab_to_symtab()  :  dbxread.c
<item>dwarf2_read_section()  :  dwarf2read.c
<item>elfstab_build_psymtabs()  :  dbxread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>symfile_dummy_outputs()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function syms_from_objfile()

<p><tt>void syms_from_objfile ( struct objfile* objfile, struct section_addr_info* addrs, struct section_offsets* offsets, int num_offsets, int mainline, int verbo )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_section_addr_info()  :  symfile.c
<item>clear_complaints()  :  complaints.c
<item>discard_cleanups()  :  utils.c
<item>find_sym_fns()  :  symfile.c
<item>free_objfile()  :  objfiles.c
<item>init_entry_point_info()  :  objfiles.c
<item>init_objfile_sect_indices()  :  symfile.c
<item>internal_error()  :  utils.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_free_objfile()  :  objfiles.c
<item>objfile_add_to_ordered_sections()  :  objfiles.c
<item>objfile_delete_from_ordered_sections()  :  objfiles.c
<item>objfile_section_offset()  :  objfiles.c
<item>paddr()  :  utils.c
<item>printf_filtered()  :  utils.c
<item>warning()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), _obstack_newchunk(), bfd_get_section_by_name(), bfd_map_over_sections(), macosx_init_dyld_symfile(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>clear_symtab_users_cleanup()  :  symfile.c
<item>find_lowest_section()  :  symfile.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_char  :  gdbtypes.c
<item>builtin_type_void  :  gdbtypes.c
<item>symfile_complaints  :  complaints.c
<item>symfile_objfile  :  objfiles.c
<item>exec_bfd
</itemize>
</descrip>

<sect1>Global Function unmap_overlay_command()

<p><tt>void unmap_overlay_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function add_dsym_command()

<p><tt>static void add_dsym_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_freeargv()  :  utils.c
<item>make_cleanup_ui_out_tuple_begin_end()  :  ui-out.c
<item>safe_strerror()  :  utils.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>warning()  :  utils.c
<item>__error(), buildargv(), dyld_objfile_set_load_state(), exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), macosx_find_objfile_matching_dsym_in_bundle(), sigsetjmp(), stat(), tilde_expand(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_symbol_file_command()  :  symfile.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>already_found_debug_file  :  symfile.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function add_filename_language()

<p><tt>static void add_filename_language ( const char* ext, enum language lang )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>init_filename_language_table()  :  symfile.c
<item>set_ext_lang_command()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>filename_language_table  :  symfile.c
<item>fl_table_next  :  symfile.c
<item>fl_table_size  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function add_kext_command()

<p><tt>static void add_kext_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_update()  :  breakpoint.c
<item>convert_sect_addrs_to_offsets_via_on_disk_file()  :  symfile.c
<item>do_cleanups()  :  utils.c
<item>dont_repeat()  :  top.c
<item>error()  :  utils.c
<item>find_kext_files_by_bundle()  :  symfile.c
<item>find_kext_files_by_symfile()  :  symfile.c
<item>find_kext_loadaddrs_from_kernel()  :  symfile.c
<item>gdbarch_bfd_arch_info()  :  gdbarch.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_free_section_addr_info()  :  utils.c
<item>make_cleanup_freeargv()  :  utils.c
<item>nomem()  :  utils.c
<item>printf_filtered()  :  utils.c
<item>reinit_frame_cache()  :  frame.c
<item>symbol_file_add_name_with_addrs_or_offsets()  :  symfile.c
<item>update_current_target()  :  target/target.c
<item>warning()  :  utils.c
<item>xfree()  :  utils.c
<item>bfd_default_compatible(), bfd_get_arch_info(), buildargv(), file_exists_p(), get_section_addrs_of_macho_on_disk(), strlen(), strncmp(), strrchr(), update_section_tables(), xstrdup()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>null_cleanup()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>kernel_slide
</itemize>
</descrip>

<sect1>Local Function add_objfile_prefix()

<p><tt>static const char* add_objfile_prefix ( struct objfile* objfile, const char* name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>__builtin___snprintf_chk(), __builtin_object_size(), _obstack_newchunk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>append_psymbols_as_msymbols()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function add_section_size_callback()

<p><tt>static void add_section_size_callback ( bfd* abfd, asection* asec, void* data )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>generic_load()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function add_shared_symbol_files_command()

<p><tt>static void add_shared_symbol_files_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function add_symbol_file_command()

<p><tt>static void add_symbol_file_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_dsym_command()  :  symfile.c
<item>alloc_section_addr_info()  :  symfile.c
<item>do_cleanups()  :  utils.c
<item>dont_repeat()  :  top.c
<item>error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_freeargv()  :  utils.c
<item>nomem()  :  utils.c
<item>paddr_nz()  :  utils.c
<item>parse_and_eval_address()  :  eval.c
<item>printf_filtered()  :  utils.c
<item>printf_unfiltered()  :  utils.c
<item>query()  :  utils.c
<item>re_enable_breakpoints_in_shlibs()  :  breakpoint.c
<item>reinit_frame_cache()  :  frame.c
<item>symbol_file_add_name_with_addrs_or_offsets()  :  symfile.c
<item>update_current_target()  :  target/target.c
<item>warning()  :  utils.c
<item>xmalloc()  :  utils.c
<item>buildargv(), strcmp(), strstr(), tilde_expand(), update_section_tables(), xstrdup()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>null_cleanup()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function cashier_psymtab()

<p><tt>static void cashier_psymtab ( struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cashier_psymtab()  :  symfile.c
<item>internal_error()  :  utils.c
<item>psymtab_get_first()  :  objfiles.c
<item>psymtab_get_next()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cashier_psymtab()  :  symfile.c
<item>free_named_symtabs()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function check_bfd_for_matching_uuid()

<p><tt>static int check_bfd_for_matching_uuid ( bfd* exe_bfd, bfd* dbg_bfd )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>make_cleanup_ui_out_notify_begin_end()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
<item>warning()  :  utils.c
<item>bfd_mach_o_get_uuid(), memcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>reread_separate_symbols()  :  symfile.c
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function clear_symtab_users_cleanup()

<p><tt>static void clear_symtab_users_cleanup ( void* ignore )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_symtab_users()  :  symfile.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>reread_symbols_for_objfile()  :  symfile.c
<item>syms_from_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function compare_psymbols()

<p><tt>static int compare_psymbols ( const void* s1p, const void* s2p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strcmp_iw_ordered()  :  utils.c
<item>symbol_search_name()  :  symtab.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>sort_pst_symbols()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function decrement_reading_symtab()

<p><tt>static void decrement_reading_symtab ( void* dummy )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>psymtab_to_symtab()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>currently_reading_symtab  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function find_kext_files_by_bundle()

<p><tt>static void find_kext_files_by_bundle ( const char* filename, char** kextload_symbol_filename, char** kext_bundle_executable_filename )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>get_kext_bundle_ident_and_binary_path()  :  symfile.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), dirname(), file_exists_p(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_kext_command()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>kext_symbol_file_path  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function find_kext_files_by_symfile()

<p><tt>static void find_kext_files_by_symfile ( const char* filename, char** kext_bundle_executable_filename )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>puuid()  :  utils.c
<item>symfile_bfd_open()  :  symfile.c
<item>warning()  :  utils.c
<item>bfd_close(), bfd_mach_o_get_uuid(), macosx_locate_kext_executable_by_symfile(), strrchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_kext_command()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function find_kext_loadaddrs_from_kernel()

<p><tt>static struct section_addr_info* find_kext_loadaddrs_from_kernel ( const char* filename, char** kext_bundle_executable_filename )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>find_objfile_by_uuid()  :  objfiles.c
<item>get_binary_file_uuids()  :  utils.c
<item>get_kext_bundle_ident_and_binary_path()  :  symfile.c
<item>make_cleanup()  :  utils.c
<item>macosx_get_kext_sect_addrs_from_kernel()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_kext_command()  :  symfile.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_uuids_array()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function find_section_for_addr()

<p><tt>static struct obj_section* find_section_for_addr ( struct objfile* objfile, CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>append_psymbols_as_msymbols()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function find_separate_debug_file()

<p><tt>static char* find_separate_debug_file ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>macosx_locate_dsym(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>reread_separate_symbols()  :  symfile.c
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>already_found_debug_file  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function find_sym_fns()

<p><tt>static void find_sym_fns ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>syms_from_objfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symtab_fns  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function get_kext_bundle_ident_and_binary_path()

<p><tt>static void get_kext_bundle_ident_and_binary_path ( const char* filename, const char** kext_bundle_filename, char** kext_bundle_executable_filename, const char** bundle_identifier_name_from_plist )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), dirname(), file_exists_p(), macosx_kext_info(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_kext_files_by_bundle()  :  symfile.c
<item>find_kext_loadaddrs_from_kernel()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function info_ext_lang_command()

<p><tt>static void info_ext_lang_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>language_str()  :  language.c
<item>printf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>filename_language_table  :  symfile.c
<item>fl_table_next  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function init_filename_language_table()

<p><tt>static void init_filename_language_table ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_filename_language()  :  symfile.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>filename_language_table  :  symfile.c
<item>fl_table_next  :  symfile.c
<item>fl_table_size  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function init_objfile_sect_indices()

<p><tt>static void init_objfile_sect_indices ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>bfd_get_section_by_name(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>default_symfile_offsets()  :  symfile.c
<item>syms_from_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function load_command()

<p><tt>static void load_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_exec_file()  :  corefile.c
<item>target_load()  :  target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>overlay_cache_invalid  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function load_progress()

<p><tt>static void load_progress ( unsigned long bytes, void* untyped_arg )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>paddr()  :  utils.c
<item>target_read_memory()  :  target/target.c
<item>xmalloc()  :  utils.c
<item>deprecated_show_load_progress(), deprecated_ui_load_progress_hook(), memcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>load_section_callback()  :  symfile.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>deprecated_show_load_progress  :  symfile.c
<item>deprecated_ui_load_progress_hook  :  symfile.c
<item>quit_flag  :  utils.c
<item>validate_download  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function load_section_callback()

<p><tt>static void load_section_callback ( bfd* abfd, asection* asec, void* data )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>paddr_nz()  :  utils.c
<item>target_write_with_progress()  :  target/target.c
<item>ui_out_message()  :  ui-out.c
<item>xmalloc()  :  utils.c
<item>bfd_get_section_contents()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>generic_load()  :  symfile.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>load_progress()  :  symfile.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function overlay_auto_command()

<p><tt>static void overlay_auto_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>enable_overlay_breakpoints()  :  breakpoint.c
<item>printf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>info_verbose  :  top.c
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function overlay_command()

<p><tt>static void overlay_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>printf_unfiltered()  :  utils.c
<item>help_list()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>overlaylist  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function overlay_invalidate_all()

<p><tt>static void overlay_invalidate_all ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>section_is_overlay()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>overlay_is_mapped()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function overlay_is_mapped()

<p><tt>static int overlay_is_mapped ( struct obj_section* osect )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>overlay_invalidate_all()  :  symfile.c
<item>section_is_overlay()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_pc_mapped_section()  :  symfile.c
<item>find_pc_overlay()  :  symfile.c
<item>list_overlays_command()  :  symfile.c
<item>section_is_mapped()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>overlay_cache_invalid  :  symfile.c
<item>overlay_debugging  :  symfile.c
<item>target_overlay_update  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function overlay_load_command()

<p><tt>static void overlay_load_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>target_overlay_update  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function overlay_manual_command()

<p><tt>static void overlay_manual_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>disable_overlay_breakpoints()  :  breakpoint.c
<item>printf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>info_verbose  :  top.c
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function overlay_off_command()

<p><tt>static void overlay_off_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>disable_overlay_breakpoints()  :  breakpoint.c
<item>printf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>info_verbose  :  top.c
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function read_target_long_array()

<p><tt>static void read_target_long_array ( CORE_ADDR memaddr, unsigned int* myaddr, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_unsigned_integer()  :  findvar.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>read_memory()  :  corefile.c
<item>warning()  :  utils.c
<item>__builtin_alloca()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>simple_overlay_update_1()  :  symfile.c
<item>simple_read_overlay_table()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function remove_symbol_file_command()

<p><tt>static void remove_symbol_file_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>clear_symtab_users()  :  symfile.c
<item>dont_repeat()  :  top.c
<item>error()  :  utils.c
<item>find_objfile()  :  symfile.c
<item>free_objfile()  :  objfiles.c
<item>make_cleanup()  :  utils.c
<item>reinit_frame_cache()  :  frame.c
<item>symtab_clear_cached_lookup_values()  :  symtab.c
<item>tell_breakpoints_objfile_changed()  :  breakpoint.c
<item>tell_objc_msgsend_cacher_objfile_changed()  :  objc-lang.c
<item>tilde_expand()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function reread_separate_symbols()

<p><tt>static void reread_separate_symbols ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_bfd_for_matching_uuid()  :  symfile.c
<item>find_separate_debug_file()  :  symfile.c
<item>free_objfile()  :  objfiles.c
<item>put_objfile_before()  :  objfiles.c
<item>symbol_file_add_with_addrs_or_offsets()  :  symfile.c
<item>symfile_bfd_open()  :  symfile.c
<item>xfree()  :  utils.c
<item>bfd_close(), macho_calculate_offsets_for_dsym(), macosx_get_osabi_from_dyld_entry(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>reread_symbols_for_objfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>info_verbose  :  top.c
</itemize>
</descrip>

<sect1>Local Function reread_symbols_command()

<p><tt>static void reread_symbols_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>reread_symbols()  :  symfile.c
<item>warning()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function sections_overlap()

<p><tt>static int sections_overlap ( asection* a, asection* b )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>map_overlay_command()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function set_ext_lang_command()

<p><tt>static void set_ext_lang_command ( const char* args, int from_tty, struct cmd_list_element* e )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>add_filename_language()  :  symfile.c
<item>error()  :  utils.c
<item>language_enum()  :  language.c
<item>xfree()  :  utils.c
<item>isspace(), strcmp(), xstrdup()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ext_args  :  symfile.c
<item>filename_language_table  :  symfile.c
<item>fl_table_next  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function set_initial_language()

<p><tt>static void set_initial_language ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deduce_language_from_filename()  :  symfile.c
<item>find_main_psymtab()  :  symtab.c
<item>set_language()  :  language.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>symbol_file_add_main_1()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
<item>expected_language  :  language.c
</itemize>
</descrip>

<sect1>Local Function show_debug_file_directory()

<p><tt>static void show_debug_file_directory ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function show_download_write_size()

<p><tt>static void show_download_write_size ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function show_ext_args()

<p><tt>static void show_ext_args ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function show_symbol_reloading()

<p><tt>static void show_symbol_reloading ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_symfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function simple_free_overlay_table()

<p><tt>static void simple_free_overlay_table ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>simple_read_overlay_table()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cache_novlys  :  symfile.c
<item>cache_ovly_table  :  symfile.c
<item>cache_ovly_table_base  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function simple_overlay_update()

<p><tt>static void simple_overlay_update ( struct obj_section* osect )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>lookup_minimal_symbol()  :  minsyms.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>section_is_overlay()  :  symfile.c
<item>simple_overlay_update_1()  :  symfile.c
<item>simple_read_overlay_table()  :  symfile.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cache_novlys  :  symfile.c
<item>cache_ovly_table  :  symfile.c
<item>cache_ovly_table_base  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function simple_overlay_update_1()

<p><tt>static int simple_overlay_update_1 ( struct obj_section* osect )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_long_bit()  :  gdbarch.c
<item>read_target_long_array()  :  symfile.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>simple_overlay_update()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cache_novlys  :  symfile.c
<item>cache_ovly_table  :  symfile.c
<item>cache_ovly_table_base  :  symfile.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function simple_read_overlay_table()

<p><tt>static int simple_read_overlay_table ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>read_memory_integer()  :  corefile.c
<item>read_target_long_array()  :  symfile.c
<item>simple_free_overlay_table()  :  symfile.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>simple_overlay_update()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cache_novlys  :  symfile.c
<item>cache_ovly_table  :  symfile.c
<item>cache_ovly_table_base  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function symbol_file_add_main_1()

<p><tt>static void symbol_file_add_main_1 ( const char* args, int from_tty, int flags )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>reinit_frame_cache()  :  frame.c
<item>set_initial_language()  :  symfile.c
<item>symbol_file_add_name_with_addrs_or_offsets()  :  symfile.c
<item>dyld_default_load_flag(), dyld_minimal_load_flag(), dyld_objfile_entry_clear()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>symbol_file_add_main()  :  symfile.c
<item>symbol_file_command()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function symbol_file_add_name_with_addrs_or_offsets_using_objfile()

<p><tt>static struct objfile* symbol_file_add_name_with_addrs_or_offsets_using_objfile ( struct objfile* in_objfile, const char* name, int from_tty, struct section_addr_info* addrs, struct section_offsets* offsets, int num_offsets, int mainline, int flags, int symflags, CORE_ADDR mapaddr, const char* prefix, char* kext_bundle )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
<item>symfile_bfd_open()  :  symfile.c
<item>macosx_get_osabi_from_dyld_entry()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>symbol_file_add_using_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function symbol_file_add_with_addrs_or_offsets()

<p><tt>static struct objfile* symbol_file_add_with_addrs_or_offsets ( bfd* abfd, int from_tty, struct section_addr_info* addrs, struct section_offsets* offsets, int num_offsets, int mainline, int flags, int symflags, CORE_ADDR mapaddr, const char* prefix, char* kext_bundle )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>reread_separate_symbols()  :  symfile.c
<item>symbol_file_add_bfd_helper()  :  symfile.c
<item>symbol_file_add_from_bfd()  :  symfile.c
<item>symbol_file_add_name_with_addrs_or_offsets()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function symfile_dummy_outputs()

<p><tt>static void symfile_dummy_outputs ( bfd* abfd, asection* sectp, void* dummy )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>symfile_relocate_debug_section()  :  symfile.c
</itemize>
</descrip>

</article>
