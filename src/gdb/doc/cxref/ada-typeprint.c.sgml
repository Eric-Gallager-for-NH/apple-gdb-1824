<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF ada-typeprint.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for ada-typeprint.c of gdb.cxref.
<author>cxref

<sect>File ada-typeprint.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;c-lang.h&quot;</tt>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;macroexp.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;typeprint.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;ada-lang.h&quot;</tt>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;errno.h&gt;</tt>
</itemize>

<sect1>Local Variables

<p>
<bf>name_buffer</bf><newline>
<tt>static char* name_buffer</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>decoded_type_name()
</itemize>
</descrip>
<p>
<bf>name_buffer_len</bf><newline>
<tt>static size_t name_buffer_len</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>decoded_type_name()
</itemize>
</descrip>

<sect1>Global Function ada_print_type()

<p><tt>void ada_print_type ( struct type* type0, const char* varstring, struct ui_file* stream, int show, int level )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_aligned_type()  :  ada-lang.c
<item>ada_check_typedef()  :  ada-lang.c
<item>ada_get_base_type()  :  ada-lang.c
<item>ada_is_aligner_type()  :  ada-lang.c
<item>ada_is_array_descriptor_type()  :  ada-lang.c
<item>ada_is_bogus_array_descriptor()  :  ada-lang.c
<item>ada_is_fixed_point_type()  :  ada-lang.c
<item>ada_is_modular_type()  :  ada-lang.c
<item>ada_is_packed_array_type()  :  ada-lang.c
<item>ada_is_range_type_name()  :  ada-lang.c
<item>ada_is_vax_floating_type()  :  ada-lang.c
<item>ada_modulus()  :  ada-lang.c
<item>ada_name_prefix_len()  :  ada-lang.c
<item>ada_print_type()  :  ada-typeprint.c
<item>ada_type_name()  :  ada-lang.c
<item>c_print_type()  :  c-typeprint.c
<item>decoded_type_name()  :  ada-typeprint.c
<item>fprintf_filtered()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>print_array_type()  :  ada-typeprint.c
<item>print_enum_type()  :  ada-typeprint.c
<item>print_fixed_point_type()  :  ada-typeprint.c
<item>print_func_type()  :  ada-typeprint.c
<item>print_range()  :  ada-typeprint.c
<item>print_range_type_named()  :  ada-typeprint.c
<item>print_record_type()  :  ada-typeprint.c
<item>print_unchecked_union_type()  :  ada-typeprint.c
<item>print_vax_floating_point_type()  :  ada-typeprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
<item>print_array_type()  :  ada-typeprint.c
<item>print_func_type()  :  ada-typeprint.c
<item>print_record_field_types()  :  ada-typeprint.c
<item>print_unchecked_union_type()  :  ada-typeprint.c
<item>user_select_syms()  :  ada-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
</descrip>

<sect1>Global Function ada_typedef_print()

<p><tt>void ada_typedef_print ( struct type* the_type, struct symbol* newsym, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-typeprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_name_prefix_len()  :  ada-lang.c
<item>fprintf_filtered()  :  utils.c
<item>symbol_natural_name()  :  symtab.c
<item>type_print()  :  typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle  :  utils.c
</itemize>
</descrip>

<sect1>Local Function decoded_type_name()

<p><tt>static char* decoded_type_name ( struct type* the_type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_type_name()  :  ada-lang.c
<item>xrealloc()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), islower(), strlen(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
<item>print_record_type()  :  ada-typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>name_buffer  :  ada-typeprint.c
<item>name_buffer_len  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Local Function print_array_type()

<p><tt>static void print_array_type ( struct type* type, struct ui_file* stream, int show, int level )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-typeprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_array_arity()  :  ada-lang.c
<item>ada_array_element_type()  :  ada-lang.c
<item>ada_coerce_to_simple_array_type()  :  ada-lang.c
<item>ada_find_parallel_type()  :  ada-lang.c
<item>ada_is_packed_array_type()  :  ada-lang.c
<item>ada_is_simple_array_type()  :  ada-lang.c
<item>ada_print_type()  :  ada-typeprint.c
<item>fprintf_filtered()  :  utils.c
<item>print_range()  :  ada-typeprint.c
<item>print_range_type_named()  :  ada-typeprint.c
<item>wrap_here()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Local Function print_choices()

<p><tt>static void print_choices ( struct type* type, int field_num, struct ui_file* stream, struct type* val_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-typeprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_print_scalar()  :  ada-valprint.c
<item>ada_scan_number()  :  ada-lang.c
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_variant_clauses()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Local Function print_dynamic_range_bound()

<p><tt>static void print_dynamic_range_bound ( struct type* type, const char* name, int name_len, const char* suffix, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-typeprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_print_scalar()  :  ada-valprint.c
<item>fprintf_filtered()  :  utils.c
<item>get_int_var_value()  :  ada-lang.c
<item>grow_vect()  :  ada-lang.c
<item>internal_error()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin___strncpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), __inline_strncpy_chk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_range_type_named()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Local Function print_enum_type()

<p><tt>static void print_enum_type ( struct type* type, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_enum_name()  :  ada-lang.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>quit()  :  utils.c
<item>wrap_here()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Local Function print_fixed_point_type()

<p><tt>static void print_fixed_point_type ( struct type* type, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_delta()  :  ada-lang.c
<item>ada_fixed_to_float()  :  ada-lang.c
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Local Function print_func_type()

<p><tt>static void print_func_type ( struct type* type, struct ui_file* stream, const char* name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>wrap_here()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Local Function print_range()

<p><tt>static void print_range ( struct type* the_type, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-typeprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_name_prefix_len()  :  ada-lang.c
<item>ada_print_scalar()  :  ada-valprint.c
<item>fprintf_filtered()  :  utils.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
<item>print_array_type()  :  ada-typeprint.c
<item>print_range_type_named()  :  ada-typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function print_range_bound()

<p><tt>static void print_range_bound ( struct type* type, char* bounds, int* n, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-typeprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_print_scalar()  :  ada-valprint.c
<item>ada_scan_number()  :  ada-lang.c
<item>fprintf_filtered()  :  utils.c
<item>strlen(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_range_type_named()  :  ada-typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_long  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function print_range_type_named()

<p><tt>static void print_range_type_named ( const char* name, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-typeprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_find_any_type()  :  ada-lang.c
<item>fprintf_filtered()  :  utils.c
<item>print_dynamic_range_bound()  :  ada-typeprint.c
<item>print_range()  :  ada-typeprint.c
<item>print_range_bound()  :  ada-typeprint.c
<item>strchr(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
<item>print_array_type()  :  ada-typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function print_record_field_types()

<p><tt>static int print_record_field_types ( struct type* type, struct type* outer_type, struct ui_file* stream, int show, int level )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-typeprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_is_ignored_field()  :  ada-lang.c
<item>ada_is_parent_field()  :  ada-lang.c
<item>ada_is_variant_part()  :  ada-lang.c
<item>ada_is_wrapper_field()  :  ada-lang.c
<item>ada_print_type()  :  ada-typeprint.c
<item>fprintf_filtered()  :  utils.c
<item>print_record_field_types()  :  ada-typeprint.c
<item>print_variant_part()  :  ada-typeprint.c
<item>quit()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_record_field_types()  :  ada-typeprint.c
<item>print_record_type()  :  ada-typeprint.c
<item>print_variant_clauses()  :  ada-typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Local Function print_record_type()

<p><tt>static void print_record_type ( struct type* type0, struct ui_file* stream, int show, int level )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_find_parallel_type()  :  ada-lang.c
<item>ada_is_tagged_type()  :  ada-lang.c
<item>ada_parent_type()  :  ada-lang.c
<item>ada_type_name()  :  ada-lang.c
<item>decoded_type_name()  :  ada-typeprint.c
<item>fprintf_filtered()  :  utils.c
<item>print_record_field_types()  :  ada-typeprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Local Function print_unchecked_union_type()

<p><tt>static void print_unchecked_union_type ( struct type* type, struct ui_file* stream, int show, int level )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Local Function print_variant_clauses()

<p><tt>static void print_variant_clauses ( struct type* type, int field_num, struct type* outer_type, struct ui_file* stream, int show, int level )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_find_parallel_type()  :  ada-lang.c
<item>ada_variant_discrim_type()  :  ada-lang.c
<item>fprintf_filtered()  :  utils.c
<item>print_choices()  :  ada-typeprint.c
<item>print_record_field_types()  :  ada-typeprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_variant_part()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Local Function print_variant_part()

<p><tt>static void print_variant_part ( struct type* type, int field_num, struct type* outer_type, struct ui_file* stream, int show, int level )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_variant_discrim_name()  :  ada-lang.c
<item>fprintf_filtered()  :  utils.c
<item>print_variant_clauses()  :  ada-typeprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_record_field_types()  :  ada-typeprint.c
</itemize>
</descrip>

<sect1>Local Function print_vax_floating_point_type()

<p><tt>static void print_vax_floating_point_type ( struct type* type, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ada_vax_float_type_suffix()  :  ada-lang.c
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
</itemize>
</descrip>

</article>
