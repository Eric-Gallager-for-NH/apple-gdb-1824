{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF corefile.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File corefile.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <fcntl.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/dis-asm.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_stat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/stat.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "completer.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objc-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <Availability.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exceptions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <setjmp.h>\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define __4_12_OR_LATER__ 1\par}
{\s5\f1\fs20\ql\sb50\sa50 #define IT_IS_TESTED 1\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Typedef hook_type\par}
{\s5\f1\fs20\ql\sb50\sa50 typedef void (*hook_type)(const char*)\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct captured_read_memory_integer_arguments\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct captured_read_memory_integer_arguments}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR memaddr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int len;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int signedp;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 union}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 long sresult;}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 unsigned long uresult;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 result;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable deprecated_exec_file_display_hook\par}
{\s5\f1\fs20\ql\sb50\sa50 void (*deprecated_exec_file_display_hook)(const char* filename)\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell hpacc-abi.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
Used in:\cell specify_exec_file_hook()\cell corefile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable core_bfd\par}
{\s5\f1\fs20\ql\sb50\sa50 bfd* core_bfd\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell hpacc-abi.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
Used in:\cell add_vsyscall_page()\cell symfile-mem.c\cell\row
\cell maintenance_info_sections()\cell maint.c\cell\row
\cell validate_files()\cell corefile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable gnutarget\par}
{\s5\f1\fs20\ql\sb50\sa50 char* gnutarget\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell hpacc-abi.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
Used in:\cell generic_load()\cell symfile.c\cell\row
\cell open_bfd_from_oso()\cell dbxread.c\cell\row
\cell reread_symbols_for_objfile()\cell symfile.c\cell\row
\cell set_gnutarget_command()\cell corefile.c\cell\row
\cell solib_map_sections()\cell solib.c\cell\row
\cell symfile_bfd_open()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable exec_file_extra_hooks\par}
{\s5\f1\fs20\ql\sb50\sa50 static hook_type* exec_file_extra_hooks\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell call_extra_exec_file_hooks()\cell\cell\row
\cell specify_exec_file_hook()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable exec_file_hook_count\par}
{\s5\f1\fs20\ql\sb50\sa50 static int exec_file_hook_count\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell call_extra_exec_file_hooks()\cell\cell\row
\cell specify_exec_file_hook()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable gnutarget_string\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* gnutarget_string\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_core()\cell\cell\row
\cell set_gnutarget()\cell\cell\row
\cell set_gnutarget_command()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_core()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_core ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell corefile.c\cell\cell\row
Calls: \cell set_gnutarget()\cell corefile.c\cell\row
\cell  add_cmd(), add_setshow_string_noescape_cmd(), getenv(), set_cmd_completer()\cell\cell\row
Refs Func:\cell core_file_command()\cell corefile.c\cell\row
\cell filename_completer()\cell completer.c\cell\row
\cell set_gnutarget_command()\cell corefile.c\cell\row
\cell show_gnutarget_string()\cell corefile.c\cell\row
Refs Var:\cell gnutarget_string\cell corefile.c\cell\row
\cell  cmdlist, setlist, showlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function close_exec_file()\par}
{\s5\f1\fs20\ql\sb50\sa50 void close_exec_file ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function core_file_attach()\par}
{\s5\f1\fs20\ql\sb50\sa50 void core_file_attach ( const char* filename, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell find_core_target()\cell target/target.c\cell\row
Called by:\cell core_file_command()\cell corefile.c\cell\row
Used in:\cell captured_main()\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function core_file_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 void core_file_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell core_file_attach()\cell corefile.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell dont_repeat()\cell top.c\cell\row
\cell error()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup_freeargv()\cell utils.c\cell\row
\cell nomem()\cell utils.c\cell\row
\cell  buildargv()\cell\cell\row
Used in:\cell _initialize_core()\cell corefile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function generic_search()\par}
{\s5\f1\fs20\ql\sb50\sa50 void generic_search ( int len, char* data, char* mask, CORE_ADDR startaddr, int increment, CORE_ADDR lorange, CORE_ADDR hirange, CORE_ADDR* addr_found, char* data_found )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell read_memory()\cell corefile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_exec_file()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* get_exec_file ( int err )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Called by:\cell attach_command()\cell infcmd.c\cell\row
\cell load_command()\cell symfile.c\cell\row
\cell run_command_1()\cell infcmd.c\cell\row
Refs Var:\cell  exec_bfd\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function memory_error()\par}
{\s5\f1\fs20\ql\sb50\sa50 void memory_error ( int status, CORE_ADDR memaddr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell error_stream()\cell utils.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell make_cleanup_ui_file_delete()\cell utils.c\cell\row
\cell mem_fileopen()\cell ui-file.c\cell\row
\cell phex_nz()\cell utils.c\cell\row
\cell safe_strerror()\cell utils.c\cell\row
Called by:\cell dis_asm_memory_error()\cell disasm.c\cell\row
\cell dis_asm_memory_error_noprint()\cell target/target.c\cell\row
\cell get_target_memory()\cell target/target.c\cell\row
\cell read_memory()\cell corefile.c\cell\row
\cell write_memory()\cell corefile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function read_memory()\par}
{\s5\f1\fs20\ql\sb50\sa50 void read_memory ( CORE_ADDR memaddr, gdb_byte* myaddr, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell memory_error()\cell corefile.c\cell\row
\cell target_read_memory()\cell target/target.c\cell\row
Called by:\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell dwarf2_evaluate_loc_desc()\cell dwarf2loc.c\cell\row
\cell dwarf2_frame_prev_register()\cell dwarf2-frame.c\cell\row
\cell dwarf_expr_read_mem()\cell dwarf2loc.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell generic_search()\cell corefile.c\cell\row
\cell get_frame_memory()\cell frame.c\cell\row
\cell get_java_utf8_name()\cell jv-lang.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell pascal_val_print()\cell p-valprint.c\cell\row
\cell print_object_command()\cell objc-lang.c\cell\row
\cell printf_command()\cell printcmd.c\cell\row
\cell read_mem()\cell dwarf2-frame.c\cell\row
\cell read_memory_integer()\cell corefile.c\cell\row
\cell read_memory_string()\cell corefile.c\cell\row
\cell read_memory_typed_address()\cell corefile.c\cell\row
\cell read_memory_unsigned_integer()\cell corefile.c\cell\row
\cell read_target_long_array()\cell symfile.c\cell\row
\cell scm_get_field()\cell scm-lang.c\cell\row
\cell scm_scmval_print()\cell scm-valprint.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_at()\cell valops.c\cell\row
\cell value_fetch_lazy()\cell valops.c\cell\row
\cell value_repeat()\cell valops.c\cell\row
\cell x86_frame_prev_register()\cell target/x86-shared-tdep.c\cell\row
\cell x86_frame_this_id()\cell target/x86-shared-tdep.c\cell\row
\cell x86_quickie_analyze_prologue()\cell target/x86-shared-tdep.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function read_memory_integer()\par}
{\s5\f1\fs20\ql\sb50\sa50 long read_memory_integer ( CORE_ADDR memaddr, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell extract_signed_integer()\cell findvar.c\cell\row
\cell read_memory()\cell corefile.c\cell\row
Called by:\cell do_captured_read_memory_integer()\cell corefile.c\cell\row
\cell f77_get_dynamic_lowerbound()\cell f-valprint.c\cell\row
\cell f77_get_dynamic_upperbound()\cell f-valprint.c\cell\row
\cell get_frame_memory_signed()\cell frame.c\cell\row
\cell print_frame_nameless_args()\cell stack.c\cell\row
\cell simple_read_overlay_table()\cell symfile.c\cell\row
\cell x86_cxx_virtual_override_thunk_trampline()\cell target/x86-shared-tdep.c\cell\row
\cell x86_sub_esp_pattern_p()\cell target/x86-shared-tdep.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function read_memory_string()\par}
{\s5\f1\fs20\ql\sb50\sa50 void read_memory_string ( CORE_ADDR memaddr, char* buffer, int max_len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell read_memory()\cell corefile.c\cell\row
Called by:\cell ada_tag_name_1()\cell ada-lang.c\cell\row
\cell find_implementation_from_class()\cell objc-lang.c\cell\row
\cell hpacc_value_rtti_type()\cell hpacc-abi.c\cell\row
\cell new_objc_runtime_get_classname()\cell objc-lang.c\cell\row
\cell objc_target_type_from_object()\cell objc-lang.c\cell\row
\cell resolve_newruntime_objc_msgsend()\cell objc-lang.c\cell\row
\cell resolve_newruntime_objc_msgsendsuper()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function read_memory_typed_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR read_memory_typed_address ( CORE_ADDR addr, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell extract_typed_address()\cell findvar.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell read_memory()\cell corefile.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
Called by:\cell f77_get_dynamic_lowerbound()\cell f-valprint.c\cell\row
\cell f77_get_dynamic_upperbound()\cell f-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function read_memory_unsigned_integer()\par}
{\s5\f1\fs20\ql\sb50\sa50 unsigned long read_memory_unsigned_integer ( CORE_ADDR memaddr, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell read_memory()\cell corefile.c\cell\row
Called by:\cell do_captured_read_memory_integer()\cell corefile.c\cell\row
\cell find_implementation_from_class()\cell objc-lang.c\cell\row
\cell get_frame_memory_unsigned()\cell frame.c\cell\row
\cell objc_init_trampoline_observer()\cell objc-lang.c\cell\row
\cell objc_read_trampoline_region()\cell objc-lang.c\cell\row
\cell objc_target_type_from_object()\cell objc-lang.c\cell\row
\cell read_objc_class()\cell objc-lang.c\cell\row
\cell read_objc_method()\cell objc-lang.c\cell\row
\cell read_objc_method_list_nmethods()\cell objc-lang.c\cell\row
\cell read_objc_super()\cell objc-lang.c\cell\row
\cell resolve_newruntime_objc_msgsend()\cell objc-lang.c\cell\row
\cell resolve_newruntime_objc_msgsendsuper()\cell objc-lang.c\cell\row
\cell x86_analyze_prologue()\cell target/x86-shared-tdep.c\cell\row
\cell x86_blocks_context_var_copy_pattern_p()\cell target/x86-shared-tdep.c\cell\row
\cell x86_cxx_virtual_override_thunk_trampline()\cell target/x86-shared-tdep.c\cell\row
\cell x86_frame_prev_register()\cell target/x86-shared-tdep.c\cell\row
\cell x86_jump_insn_p()\cell target/x86-shared-tdep.c\cell\row
\cell x86_mov_esp_ebp_pattern_p()\cell target/x86-shared-tdep.c\cell\row
\cell x86_mov_func_arg_to_reg_p()\cell target/x86-shared-tdep.c\cell\row
\cell x86_mov_reg_to_local_stack_frame_p()\cell target/x86-shared-tdep.c\cell\row
\cell x86_picbase_setup_pattern_p()\cell target/x86-shared-tdep.c\cell\row
\cell x86_pop_p()\cell target/x86-shared-tdep.c\cell\row
\cell x86_push_ebp_pattern_p()\cell target/x86-shared-tdep.c\cell\row
\cell x86_push_reg_p()\cell target/x86-shared-tdep.c\cell\row
\cell x86_ret_pattern_p()\cell target/x86-shared-tdep.c\cell\row
\cell x86_sub_esp_pattern_p()\cell target/x86-shared-tdep.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function reopen_exec_file()\par}
{\s5\f1\fs20\ql\sb50\sa50 void reopen_exec_file ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell make_cleanup()\cell utils.c\cell\row
\cell safe_strerror()\cell utils.c\cell\row
\cell symtab_clear_cached_lookup_values()\cell symtab.c\cell\row
\cell tell_breakpoints_objfile_changed()\cell breakpoint.c\cell\row
\cell tell_objc_msgsend_cacher_objfile_changed()\cell objc-lang.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  __error(), bfd_get_mtime(), exec_open(), stat(), strcmp(), xstrdup()\cell\cell\row
Called by:\cell attach_command()\cell infcmd.c\cell\row
\cell generic_mourn_inferior()\cell target/target.c\cell\row
\cell remote_open_1()\cell remote.c\cell\row
\cell run_command_1()\cell infcmd.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell gdb_quitting\cell top.c\cell\row
\cell  exec_bfd\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function safe_read_memory_integer()\par}
{\s5\f1\fs20\ql\sb50\sa50 int safe_read_memory_integer ( CORE_ADDR memaddr, int len, long* return_value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell  catch_errors()\cell\cell\row
Refs Func:\cell do_captured_read_memory_integer()\cell corefile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function safe_read_memory_unsigned_integer()\par}
{\s5\f1\fs20\ql\sb50\sa50 int safe_read_memory_unsigned_integer ( CORE_ADDR memaddr, int len, unsigned long* return_value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell  catch_errors()\cell\cell\row
Called by:\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
\cell x86_frame_this_id()\cell target/x86-shared-tdep.c\cell\row
\cell x86_quickie_analyze_prologue()\cell target/x86-shared-tdep.c\cell\row
Refs Func:\cell do_captured_read_memory_integer()\cell corefile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gnutarget()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gnutarget ( const char* newtarget )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell savestring()\cell utils.c\cell\row
\cell set_gnutarget_command()\cell corefile.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell _initialize_core()\cell corefile.c\cell\row
Refs Var:\cell gnutarget_string\cell corefile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function specify_exec_file_hook()\par}
{\s5\f1\fs20\ql\sb50\sa50 void specify_exec_file_hook ( void (*hook)(const char*) )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
Refs Func:\cell call_extra_exec_file_hooks()\cell corefile.c\cell\row
Refs Var:\cell deprecated_exec_file_display_hook\cell corefile.c\cell\row
\cell exec_file_extra_hooks\cell corefile.c\cell\row
\cell exec_file_hook_count\cell corefile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function validate_files()\par}
{\s5\f1\fs20\ql\sb50\sa50 void validate_files ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell warning()\cell utils.c\cell\row
\cell  bfd_get_mtime(), core_file_matches_executable_p()\cell\cell\row
Refs Var:\cell core_bfd\cell corefile.c\cell\row
\cell  exec_bfd\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_memory()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_memory ( CORE_ADDR memaddr, const bfd_byte* myaddr, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell memory_error()\cell corefile.c\cell\row
\cell target_write_memory()\cell target/target.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell allocate_string_in_inferior()\cell valops.c\cell\row
\cell ensure_lval()\cell ada-lang.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell put_frame_register()\cell frame.c\cell\row
\cell scm_evaluate_string()\cell scm-lang.c\cell\row
\cell scm_lookup_name()\cell scm-lang.c\cell\row
\cell value_array()\cell valops.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell write_memory_signed_integer()\cell corefile.c\cell\row
\cell write_memory_unsigned_integer()\cell corefile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_memory_signed_integer()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_memory_signed_integer ( CORE_ADDR addr, int len, long value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell store_signed_integer()\cell findvar.c\cell\row
\cell write_memory()\cell corefile.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_memory_unsigned_integer()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_memory_unsigned_integer ( CORE_ADDR addr, int len, unsigned long value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell store_unsigned_integer()\cell findvar.c\cell\row
\cell write_memory()\cell corefile.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function call_extra_exec_file_hooks()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void call_extra_exec_file_hooks ( const char* filename )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell corefile.c\cell\cell\row
Used in:\cell specify_exec_file_hook()\cell corefile.c\cell\row
Refs Var:\cell exec_file_extra_hooks\cell corefile.c\cell\row
\cell exec_file_hook_count\cell corefile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_captured_read_memory_integer()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int do_captured_read_memory_integer ( void* data )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell read_memory_integer()\cell corefile.c\cell\row
\cell read_memory_unsigned_integer()\cell corefile.c\cell\row
Used in:\cell safe_read_memory_integer()\cell corefile.c\cell\row
\cell safe_read_memory_unsigned_integer()\cell corefile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_gnutarget_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_gnutarget_command ( const char* ignore, int from_tty, struct cmd_list_element* c )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell corefile.c\cell\cell\row
Calls: \cell  strcmp()\cell\cell\row
Called by:\cell set_gnutarget()\cell corefile.c\cell\row
Used in:\cell _initialize_core()\cell corefile.c\cell\row
Refs Var:\cell gnutarget\cell corefile.c\cell\row
\cell gnutarget_string\cell corefile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_gnutarget_string()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_gnutarget_string ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_core()\cell corefile.c\cell\row
\intbl0
}
