<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF jv-exp.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for jv-exp.c of gdb.cxref.
<author>cxref

<sect>File jv-exp.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;parser-defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;jv-lang.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;completer.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define YYBISON 1</tt><newline>
<p>
<tt>#define YYBISON_VERSION &quot;3.3.2&quot;</tt><newline>
<p>
<tt>#define YYSKELETON_NAME &quot;yacc.c&quot;</tt><newline>
<p>
<tt>#define YYPURE 0</tt><newline>
<p>
<tt>#define YYPUSH 0</tt><newline>
<p>
<tt>#define YYPULL 1</tt><newline>
<p>
<tt>#define yymaxdepth java_maxdepth</tt><newline>
<p>
<tt>#define yyparse java_parse</tt><newline>
<p>
<tt>#define yylex java_lex</tt><newline>
<p>
<tt>#define yyerror java_error</tt><newline>
<p>
<tt>#define yylval java_lval</tt><newline>
<p>
<tt>#define yychar java_char</tt><newline>
<p>
<tt>#define yydebug java_debug</tt><newline>
<p>
<tt>#define yypact java_pact</tt><newline>
<p>
<tt>#define yyr1 java_r1</tt><newline>
<p>
<tt>#define yyr2 java_r2</tt><newline>
<p>
<tt>#define yydef java_def</tt><newline>
<p>
<tt>#define yychk java_chk</tt><newline>
<p>
<tt>#define yypgo java_pgo</tt><newline>
<p>
<tt>#define yyact java_act</tt><newline>
<p>
<tt>#define yyexca java_exca</tt><newline>
<p>
<tt>#define yyerrflag java_errflag</tt><newline>
<p>
<tt>#define yynerrs java_nerrs</tt><newline>
<p>
<tt>#define yyps java_ps</tt><newline>
<p>
<tt>#define yypv java_pv</tt><newline>
<p>
<tt>#define yys java_s</tt><newline>
<p>
<tt>#define yy_yys java_yys</tt><newline>
<p>
<tt>#define yystate java_state</tt><newline>
<p>
<tt>#define yytmp java_tmp</tt><newline>
<p>
<tt>#define yyv java_v</tt><newline>
<p>
<tt>#define yy_yyv java_yyv</tt><newline>
<p>
<tt>#define yyval java_val</tt><newline>
<p>
<tt>#define yylloc java_lloc</tt><newline>
<p>
<tt>#define yyreds java_reds</tt><newline>
<p>
<tt>#define yytoks java_toks</tt><newline>
<p>
<tt>#define yyname java_name</tt><newline>
<p>
<tt>#define yyrule java_rule</tt><newline>
<p>
<tt>#define yylhs java_yylhs</tt><newline>
<p>
<tt>#define yylen java_yylen</tt><newline>
<p>
<tt>#define yydefred java_yydefred</tt><newline>
<p>
<tt>#define yydgoto java_yydgoto</tt><newline>
<p>
<tt>#define yysindex java_yysindex</tt><newline>
<p>
<tt>#define yyrindex java_yyrindex</tt><newline>
<p>
<tt>#define yygindex java_yygindex</tt><newline>
<p>
<tt>#define yytable java_yytable</tt><newline>
<p>
<tt>#define yycheck java_yycheck</tt><newline>
<p>
<tt>#define YYDEBUG 1</tt><newline>
<p>
<tt>#define YYFPRINTF parser_fprintf</tt><newline>
<p>
<tt>#define YY_NULLPTR</tt><newline>
<p>
<tt>#define YYERROR_VERBOSE 0</tt><newline>
<p>
<tt>#define YY_YY_Y_TAB_H_INCLUDED</tt><newline>
<p>
<tt>#define YYTOKENTYPE</tt><newline>
<p>
<tt>#define YYSTYPE_IS_TRIVIAL 1</tt><newline>
<p>
<tt>#define YYSTYPE_IS_DECLARED 1</tt><newline>
<p>
<tt>#define YYSIZE_T __SIZE_TYPE__</tt><newline>
<p>
<tt>#define YYSIZE_MAXIMUM</tt><newline>
<p>
<tt>#define YY_( Msgid )</tt><newline>
<p>
<tt>#define YY_ATTRIBUTE( Spec )</tt><newline>
<p>
<tt>#define YY_ATTRIBUTE_PURE</tt><newline>
<p>
<tt>#define YY_ATTRIBUTE_UNUSED</tt><newline>
<p>
<tt>#define YYUSE( E )</tt><newline>
<p>
<tt>#define YY_INITIAL_VALUE( Value )</tt><newline>
<p>
<tt>#define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN</tt><newline>
<p>
<tt>#define YY_IGNORE_MAYBE_UNINITIALIZED_END</tt><newline>
<p>
<tt>#define YYSTACK_ALLOC YYMALLOC</tt><newline>
<p>
<tt>#define YYSTACK_FREE YYFREE</tt><newline>
<p>
<tt>#define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM</tt><newline>
<p>
<tt>#define YYMALLOC xmalloc</tt><newline>
<p>
<tt>#define YYFREE xfree</tt><newline>
<p>
<tt>#define YYSTACK_GAP_MAXIMUM</tt><newline>
<p>
<tt>#define YYSTACK_BYTES( N )</tt><newline>
<p>
<tt>#define YYCOPY_NEEDED 1</tt><newline>
<p>
<tt>#define YYSTACK_RELOCATE( Stack_alloc, Stack )</tt><newline>
<p>
<tt>#define YYCOPY( Dst, Src, Count )</tt><newline>
<p>
<tt>#define YYFINAL 98</tt><newline>
<p>
<tt>#define YYLAST 373</tt><newline>
<p>
<tt>#define YYNTOKENS 56</tt><newline>
<p>
<tt>#define YYNNTS 58</tt><newline>
<p>
<tt>#define YYNRULES 133</tt><newline>
<p>
<tt>#define YYNSTATES 209</tt><newline>
<p>
<tt>#define YYUNDEFTOK 2</tt><newline>
<p>
<tt>#define YYMAXUTOK 287</tt><newline>
<p>
<tt>#define YYTRANSLATE( YYX )</tt><newline>
<p>
<tt>#define YYPACT_NINF -145</tt><newline>
<p>
<tt>#define yypact_value_is_default( Yystate )</tt><newline>
<p>
<tt>#define YYTABLE_NINF -133</tt><newline>
<p>
<tt>#define yytable_value_is_error( Yytable_value )</tt><newline>
<p>
<tt>#define yyerrok</tt><newline>
<p>
<tt>#define yyclearin</tt><newline>
<p>
<tt>#define YYEMPTY -2</tt><newline>
<p>
<tt>#define YYEOF 0</tt><newline>
<p>
<tt>#define YYACCEPT</tt><newline>
<p>
<tt>#define YYABORT</tt><newline>
<p>
<tt>#define YYERROR</tt><newline>
<p>
<tt>#define YYRECOVERING</tt><newline>
<p>
<tt>#define YYBACKUP( Token, Value )</tt><newline>
<p>
<tt>#define YYTERROR 1</tt><newline>
<p>
<tt>#define YYERRCODE 256</tt><newline>
<p>
<tt>#define YYDPRINTF( Args )</tt><newline>
<p>
<tt>#define YY_LOCATION_PRINT( File, Loc )</tt><newline>
<p>
<tt>#define YY_SYMBOL_PRINT( Title, Type, Value, Location )</tt><newline>
<p>
<tt>#define YY_STACK_PRINT( Bottom, Top )</tt><newline>
<p>
<tt>#define YY_REDUCE_PRINT( Rule )</tt><newline>
<p>
<tt>#define YYINITDEPTH 200</tt><newline>
<p>
<tt>#define YYMAXDEPTH 10000</tt><newline>
<p>
<tt>#define YYPOPSTACK( N )</tt><newline>

<sect1>Type enum yytokentype

<p>
<itemize>
<item><tt>enum yytokentype</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>INTEGER_LITERAL;</tt><newline>
<item><tt>FLOATING_POINT_LITERAL;</tt><newline>
<item><tt>IDENTIFIER;</tt><newline>
<item><tt>STRING_LITERAL;</tt><newline>
<item><tt>BOOLEAN_LITERAL;</tt><newline>
<item><tt>TYPENAME;</tt><newline>
<item><tt>NAME_OR_INT;</tt><newline>
<item><tt>ERROR;</tt><newline>
<item><tt>LONG;</tt><newline>
<item><tt>SHORT;</tt><newline>
<item><tt>BYTE;</tt><newline>
<item><tt>INT;</tt><newline>
<item><tt>CHAR;</tt><newline>
<item><tt>BOOLEAN;</tt><newline>
<item><tt>DOUBLE;</tt><newline>
<item><tt>FLOAT;</tt><newline>
<item><tt>VARIABLE;</tt><newline>
<item><tt>ASSIGN_MODIFY;</tt><newline>
<item><tt>SUPER;</tt><newline>
<item><tt>NEW;</tt><newline>
<item><tt>OROR;</tt><newline>
<item><tt>ANDAND;</tt><newline>
<item><tt>EQUAL;</tt><newline>
<item><tt>NOTEQUAL;</tt><newline>
<item><tt>LEQ;</tt><newline>
<item><tt>GEQ;</tt><newline>
<item><tt>LSH;</tt><newline>
<item><tt>RSH;</tt><newline>
<item><tt>INCREMENT;</tt><newline>
<item><tt>DECREMENT;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type union YYSTYPE

<p>
<itemize>
<item><tt>union YYSTYPE</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>long lval;</tt><newline>
<item><tt>struct</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>long val;</tt><newline>
<item><tt>struct type* type;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>typed_val_int;</tt><newline>
<item><tt>struct</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>DOUBLEST dval;</tt><newline>
<item><tt>struct type* type;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>typed_val_float;</tt><newline>
<item><tt>struct symbol* sym;</tt><newline>
<item><tt>struct type* tval;</tt><newline>
<item><tt>struct stoken sval;</tt><newline>
<item><tt>struct ttype tsym;</tt><newline>
<item><tt>struct symtoken ssym;</tt><newline>
<item><tt>struct block* bval;</tt><newline>
<item><tt>enum exp_opcode opcode;</tt><newline>
<item><tt>struct internalvar* ivar;</tt><newline>
<item><tt>int* ivec;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Typedef YYSTYPE

<p>
<tt>typedef union YYSTYPE YYSTYPE</tt><newline>
<descrip>
<tag>See:</tag>
<itemize>
<item>Type union YYSTYPE
</itemize>
</descrip>

<sect1>Typedef yytype_uint8

<p>
<tt>typedef unsigned char yytype_uint8</tt><newline>

<sect1>Typedef yytype_int8

<p>
<tt>typedef signed char yytype_int8</tt><newline>

<sect1>Typedef yytype_uint16

<p>
<tt>typedef unsigned short yytype_uint16</tt><newline>

<sect1>Typedef yytype_int16

<p>
<tt>typedef short yytype_int16</tt><newline>

<sect1>Type union yyalloc

<p>
<itemize>
<item><tt>union yyalloc</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>yytype_int16 yyss_alloc;</tt><newline>
<item><tt>YYSTYPE yyvs_alloc;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct token

<p>
<itemize>
<item><tt>struct token</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const char* joperator;</tt><newline>
<item><tt>int token;</tt><newline>
<item><tt>enum exp_opcode opcode;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable java_debug

<p>
<tt>int java_debug</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>jv-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>java_parse()  :  jv-exp.c
<item>yydestruct()  :  jv-exp.c
</itemize>
</descrip>

<sect1>Global Variable java_lval

<p>
<tt>YYSTYPE java_lval</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>jv-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>java_lex()  :  jv-exp.c
<item>java_parse()  :  jv-exp.c
</itemize>
</descrip>

<sect1>Global Variable java_char

<p>
<tt>int java_char</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>jv-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>java_parse()  :  jv-exp.c
</itemize>
</descrip>

<sect1>Global Variable java_nerrs

<p>
<tt>int java_nerrs</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>jv-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>java_parse()  :  jv-exp.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>yytranslate</bf><newline>
<tt>static const yytype_uint8 yytranslate[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>java_parse()
</itemize>
</descrip>
<p>
<bf>yyrline</bf><newline>
<tt>static const yytype_uint16 yyrline[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>yy_reduce_print()
</itemize>
</descrip>
<p>
<bf>yytname</bf><newline>
<tt>static const char* const yytname[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>yy_symbol_print()
</itemize>
</descrip>
<p>
<bf>java_pact</bf><newline>
<tt>static const yytype_int16 java_pact[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>java_parse()
</itemize>
</descrip>
<p>
<bf>yydefact</bf><newline>
<tt>static const yytype_uint8 yydefact[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>java_parse()
</itemize>
</descrip>
<p>
<bf>yypgoto</bf><newline>
<tt>static const yytype_int16 yypgoto[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>java_parse()
</itemize>
</descrip>
<p>
<bf>yydefgoto</bf><newline>
<tt>static const yytype_int16 yydefgoto[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>java_parse()
</itemize>
</descrip>
<p>
<bf>java_yytable</bf><newline>
<tt>static const yytype_int16 java_yytable[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>java_parse()
</itemize>
</descrip>
<p>
<bf>java_yycheck</bf><newline>
<tt>static const yytype_int16 java_yycheck[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>java_parse()
</itemize>
</descrip>
<p>
<bf>yystos</bf><newline>
<tt>static const yytype_uint8 yystos[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>java_parse()
<item>yy_reduce_print()
</itemize>
</descrip>
<p>
<bf>java_r1</bf><newline>
<tt>static const yytype_uint8 java_r1[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>java_parse()
</itemize>
</descrip>
<p>
<bf>java_r2</bf><newline>
<tt>static const yytype_uint8 java_r2[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>java_parse()
<item>yy_reduce_print()
</itemize>
</descrip>
<p>
<bf>tokentab3</bf><newline>
<tt>static const struct token tokentab3[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>java_lex()
</itemize>
</descrip>
<p>
<bf>tokentab2</bf><newline>
<tt>static const struct token tokentab2[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>java_lex()
</itemize>
</descrip>

<sect1>Global Function java_error()

<p><tt>void java_error ( const char* msg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_parse()  :  jv-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>lexptr  :  parse.c
<item>prev_lexptr  :  parse.c
</itemize>
</descrip>

<sect1>Global Function java_parse()

<p><tt>int java_parse ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>copy_exp()  :  jv-exp.c
<item>end_arglist()  :  parse.c
<item>error()  :  utils.c
<item>insert_exp()  :  jv-exp.c
<item>internal_error()  :  utils.c
<item>java_array_type()  :  jv-lang.c
<item>java_error()  :  jv-exp.c
<item>java_lex()  :  jv-exp.c
<item>java_type_from_name()  :  jv-exp.c
<item>length_of_subexp()  :  parse.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>make_cleanup()  :  utils.c
<item>parse_number()  :  jv-exp.c
<item>parser_fprintf()  :  parse.c
<item>push_expression_name()  :  jv-exp.c
<item>push_fieldnames()  :  jv-exp.c
<item>start_arglist()  :  parse.c
<item>write_exp_elt_dblcst()  :  parse.c
<item>write_exp_elt_longcst()  :  parse.c
<item>write_exp_elt_opcode()  :  parse.c
<item>write_exp_elt_type()  :  parse.c
<item>write_exp_string()  :  parse.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>yy_reduce_print()  :  jv-exp.c
<item>yy_stack_print()  :  jv-exp.c
<item>yy_symbol_print()  :  jv-exp.c
<item>yydestruct()  :  jv-exp.c
<item>__builtin___snprintf_chk(), __builtin_memcpy(), __builtin_object_size()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>arglist_len  :  parse.c
<item>expout  :  parse.c
<item>expout_ptr  :  parse.c
<item>java_boolean_type  :  jv-lang.c
<item>java_byte_type  :  jv-lang.c
<item>java_char  :  jv-exp.c
<item>java_char_type  :  jv-lang.c
<item>java_debug  :  jv-exp.c
<item>java_double_type  :  jv-lang.c
<item>java_float_type  :  jv-lang.c
<item>java_int_type  :  jv-lang.c
<item>java_long_type  :  jv-lang.c
<item>java_lval  :  jv-exp.c
<item>java_nerrs  :  jv-exp.c
<item>java_pact  :  jv-exp.c
<item>java_r1  :  jv-exp.c
<item>java_r2  :  jv-exp.c
<item>java_short_type  :  jv-lang.c
<item>java_yycheck  :  jv-exp.c
<item>java_yytable  :  jv-exp.c
<item>yydefact  :  jv-exp.c
<item>yydefgoto  :  jv-exp.c
<item>yypgoto  :  jv-exp.c
<item>yystos  :  jv-exp.c
<item>yytranslate  :  jv-exp.c
</itemize>
</descrip>

<sect1>Local Function copy_exp()

<p><tt>static struct expression* copy_exp ( struct expression* expr, int endpos )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>length_of_subexp()  :  parse.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_parse()  :  jv-exp.c
</itemize>
</descrip>

<sect1>Local Function insert_exp()

<p><tt>static void insert_exp ( int pos, struct expression* newexpr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_parse()  :  jv-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>expout  :  parse.c
<item>expout_ptr  :  parse.c
<item>expout_size  :  parse.c
</itemize>
</descrip>

<sect1>Local Function java_lex()

<p><tt>static int java_lex ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>parse_escape()  :  cp-name-parser.c
<item>parse_number()  :  jv-exp.c
<item>skip_quoted()  :  completer.c
<item>write_dollar_variable()  :  parse.c
<item>xrealloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_parse()  :  jv-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>comma_terminates  :  parse.c
<item>input_radix  :  valprint.c
<item>java_char_type  :  jv-lang.c
<item>java_lval  :  jv-exp.c
<item>lexptr  :  parse.c
<item>paren_depth  :  parse.c
<item>prev_lexptr  :  parse.c
<item>tokentab2  :  jv-exp.c
<item>tokentab3  :  jv-exp.c
</itemize>
</descrip>

<sect1>Local Function java_type_from_name()

<p><tt>static struct type* java_type_from_name ( struct stoken name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>copy_name()  :  parse.c
<item>error()  :  utils.c
<item>java_lookup_class()  :  jv-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_parse()  :  jv-exp.c
</itemize>
</descrip>

<sect1>Local Function parse_number()

<p><tt>static int parse_number ( char* p, int len, int parsed_float, YYSTYPE* putithere )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>isdigit(), sscanf(), tolower()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_lex()  :  jv-exp.c
<item>java_parse()  :  jv-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_double  :  gdbtypes.c
<item>builtin_type_float  :  gdbtypes.c
<item>builtin_type_uint64  :  gdbtypes.c
<item>input_radix  :  valprint.c
<item>java_int_type  :  jv-lang.c
<item>java_long_type  :  jv-lang.c
</itemize>
</descrip>

<sect1>Local Function push_expression_name()

<p><tt>static void push_expression_name ( struct stoken name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>copy_name()  :  parse.c
<item>error()  :  utils.c
<item>have_full_symbols()  :  objfiles.c
<item>have_partial_symbols()  :  objfiles.c
<item>java_lookup_class()  :  jv-lang.c
<item>lookup_function_type()  :  gdbtypes.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>push_qualified_expression_name()  :  jv-exp.c
<item>push_variable()  :  jv-exp.c
<item>write_exp_elt_opcode()  :  parse.c
<item>write_exp_elt_type()  :  parse.c
<item>write_exp_msymbol()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_parse()  :  jv-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function push_fieldnames()

<p><tt>static void push_fieldnames ( struct stoken name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>write_exp_elt_opcode()  :  parse.c
<item>write_exp_string()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_parse()  :  jv-exp.c
<item>push_qualified_expression_name()  :  jv-exp.c
</itemize>
</descrip>

<sect1>Local Function push_qualified_expression_name()

<p><tt>static void push_qualified_expression_name ( struct stoken name, int dot_index )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>copy_name()  :  parse.c
<item>error()  :  utils.c
<item>java_lookup_class()  :  jv-lang.c
<item>push_fieldnames()  :  jv-exp.c
<item>push_variable()  :  jv-exp.c
<item>write_exp_elt_opcode()  :  parse.c
<item>write_exp_elt_type()  :  parse.c
<item>write_exp_string()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>push_expression_name()  :  jv-exp.c
</itemize>
</descrip>

<sect1>Local Function push_variable()

<p><tt>static int push_variable ( struct stoken name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>contained_in()  :  block.c
<item>copy_name()  :  parse.c
<item>lookup_symbol()  :  symtab.c
<item>symbol_read_needs_frame()  :  findvar.c
<item>write_exp_elt_block()  :  parse.c
<item>write_exp_elt_opcode()  :  parse.c
<item>write_exp_elt_sym()  :  parse.c
<item>write_exp_string()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>push_expression_name()  :  jv-exp.c
<item>push_qualified_expression_name()  :  jv-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>block_found  :  symtab.c
<item>expression_context_block  :  parse.c
<item>innermost_block  :  parse.c
</itemize>
</descrip>

<sect1>Local Function yy_reduce_print()

<p><tt>static void yy_reduce_print ( yytype_int16* yyssp, YYSTYPE* yyvsp, int java_rule )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>parser_fprintf()  :  parse.c
<item>yy_symbol_print()  :  jv-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_parse()  :  jv-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>java_r2  :  jv-exp.c
<item>yyrline  :  jv-exp.c
<item>yystos  :  jv-exp.c
</itemize>
</descrip>

<sect1>Local Function yy_stack_print()

<p><tt>static void yy_stack_print ( yytype_int16* yybottom, yytype_int16* yytop )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>parser_fprintf()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_parse()  :  jv-exp.c
</itemize>
</descrip>

<sect1>Local Function yy_symbol_print()

<p><tt>static void yy_symbol_print ( FILE* yyo, int yytype, YYSTYPE const* const yyvaluep )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>parser_fprintf()  :  parse.c
<item>yy_symbol_value_print()  :  jv-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_parse()  :  jv-exp.c
<item>yy_reduce_print()  :  jv-exp.c
<item>yydestruct()  :  jv-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yytname  :  jv-exp.c
</itemize>
</descrip>

<sect1>Local Function yy_symbol_value_print()

<p><tt>static void yy_symbol_value_print ( FILE* yyo, int yytype, YYSTYPE const* const yyvaluep )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>yy_symbol_print()  :  jv-exp.c
</itemize>
</descrip>

<sect1>Local Function yydestruct()

<p><tt>static void yydestruct ( const char* yymsg, int yytype, YYSTYPE* yyvaluep )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>parser_fprintf()  :  parse.c
<item>yy_symbol_print()  :  jv-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_parse()  :  jv-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>java_debug  :  jv-exp.c
</itemize>
</descrip>

</article>
