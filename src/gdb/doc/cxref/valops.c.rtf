{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF valops.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File valops.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/demangle.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "regcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "cp-abi.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exceptions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <setjmp.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dictionary.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbthread.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "cp-support.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "observer.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-infthread.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-infthread.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define STRING_HASH_TABLE_SIZE 2039\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type enum oload_classification\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum oload_classification}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 STANDARD;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 NON_STANDARD;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 INCOMPATIBLE;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct string_in_child\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct string_in_child}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* str;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int len;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR addr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct string_in_child* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct thread_is_safe_args\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct thread_is_safe_args}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct thread_info* tp;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 regex_t* unsafe_functions;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int npatterns;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int stack_depth;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int unsafe_p;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable overload_resolution\par}
{\s5\f1\fs20\ql\sb50\sa50 int overload_resolution\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell eval.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell _initialize_valops()\cell valops.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep External Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable overload_debug\par}
{\s5\f1\fs20\ql\sb50\sa50 extern int overload_debug\par}
\trowd\trgaph120\cellx1440\cellx5220
\intbl\plain
Defined in:\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep External Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable msym_text_symbol_type\par}
{\s5\f1\fs20\ql\sb50\sa50 extern struct type* msym_text_symbol_type\par}
\trowd\trgaph120\cellx1440\cellx5220
\intbl\plain
Defined in:\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep External Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable msym_data_symbol_type\par}
{\s5\f1\fs20\ql\sb50\sa50 extern struct type* msym_data_symbol_type\par}
\trowd\trgaph120\cellx1440\cellx5220
\intbl\plain
Defined in:\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep External Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable msym_unknown_symbol_type\par}
{\s5\f1\fs20\ql\sb50\sa50 extern struct type* msym_unknown_symbol_type\par}
\trowd\trgaph120\cellx1440\cellx5220
\intbl\plain
Defined in:\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep External Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable symbol_generation\par}
{\s5\f1\fs20\ql\sb50\sa50 extern unsigned int symbol_generation\par}
\trowd\trgaph120\cellx1440\cellx5220
\intbl\plain
Defined in:\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable string_table\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct string_in_child* string_table[2039]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell allocate_string_in_inferior()\cell\cell\row
\cell value_clear_inferior_string_pool()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_valops()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_valops ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell valops.c\cell\cell\row
Calls: \cell  add_setshow_boolean_cmd()\cell\cell\row
Refs Func:\cell show_overload_resolution()\cell valops.c\cell\row
Refs Var:\cell overload_resolution\cell valops.c\cell\row
\cell  setlist, showlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function allocate_space_in_inferior_malloc()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR allocate_space_in_inferior_malloc ( int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell call_function_by_hand()\cell infcall.c\cell\row
\cell create_cached_function()\cell value.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gdbarch_name_of_malloc()\cell gdbarch.c\cell\row
\cell lookup_cached_function()\cell value.c\cell\row
\cell make_cleanup_set_restore_unwind_on_signal()\cell infcall.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_logical_not()\cell valarith.c\cell\row
Used in:\cell update_current_target()\cell target/target.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell builtin_type_voidptrfuncptr\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function check_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 int check_field ( struct value* arg1, const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_field_in()\cell valops.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_array()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell lookup_symbol_aux()\cell symtab.c\cell\row
Refs Var:\cell info_verbose\cell top.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function check_safe_call()\par}
{\s5\f1\fs20\ql\sb50\sa50 int check_safe_call ( regex_t unsafe_functions[], int npatterns, int stack_depth, enum check_which_threads which_threads )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell deprecated_safe_get_selected_frame()\cell frame.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell frame_find_by_id()\cell frame.c\cell\row
\cell frame_id_eq()\cell frame.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell iterate_over_threads()\cell thread.c\cell\row
\cell make_cleanup_restore_current_thread()\cell thread.c\cell\row
\cell safe_check_is_thread_unsafe()\cell valops.c\cell\row
\cell scheduler_lock_on_p()\cell infrun.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  macosx_prune_threads()\cell\cell\row
Refs Func:\cell safe_check_is_thread_unsafe()\cell valops.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\cell null_frame_id\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function destructor_name_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int destructor_name_p ( const char* name, const struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell type_name_no_tag()\cell gdbtypes.c\cell\row
\cell  strchr(), strlen(), strncmp()\cell\cell\row
Called by:\cell c_parse()\cell c-exp.c\cell\row
\cell check_field_in()\cell valops.c\cell\row
\cell collect_methods()\cell linespec.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
\cell value_struct_elt_for_reference()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_function_in_inferior()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* find_function_in_inferior ( const char* name, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell func_sym_is_inlined_function()\cell inlining.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell lookup_symbol_all()\cell symtab.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_of_variable()\cell valops.c\cell\row
Called by:\cell lookup_cached_function()\cell value.c\cell\row
\cell print_object_command()\cell objc-lang.c\cell\row
\cell scm_evaluate_string()\cell scm-lang.c\cell\row
\cell scm_lookup_name()\cell scm-lang.c\cell\row
\cell value_nsstring()\cell objc-lang.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell msym_text_symbol_type\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_overload_match()\par}
{\s5\f1\fs20\ql\sb50\sa50 int find_overload_match ( struct type** arg_types, int nargs, char* name, int method, int lax, struct value** objp, struct symbol* fsym, struct value** valp, struct symbol** symp, int* staticp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell classify_oload_match()\cell valops.c\cell\row
\cell cp_func_name()\cell cp-support.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_oload_champ()\cell valops.c\cell\row
\cell find_oload_champ_namespace()\cell valops.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell oload_method_static()\cell valops.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_find_oload_method_list()\cell valops.c\cell\row
\cell value_fn_field()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell value_virtual_fn_field()\cell cp-abi.c\cell\row
\cell warning()\cell utils.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_rt_vbase_offset()\par}
{\s5\f1\fs20\ql\sb50\sa50 void find_rt_vbase_offset ( struct type* type, struct type* basetype, const gdb_byte* valaddr, int offset, int* boffset_p, int* skip_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell find_rt_vbase_offset()\cell valops.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_at()\cell valops.c\cell\row
\cell virtual_base_index_skip_primaries()\cell gdbtypes.c\cell\row
\cell virtual_base_list_length_skip_primaries()\cell gdbtypes.c\cell\row
Called by:\cell cp_print_value()\cell cp-valprint.c\cell\row
\cell find_method_list()\cell valops.c\cell\row
\cell find_rt_vbase_offset()\cell valops.c\cell\row
\cell search_struct_method()\cell valops.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_addr()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_addr ( struct value* arg1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell deprecated_set_value_type()\cell value.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell set_value_pointed_to_offset()\cell value.c\cell\row
\cell value_change_enclosing_type()\cell value.c\cell\row
\cell value_coerce_function()\cell valops.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_embedded_offset()\cell value.c\cell\row
\cell value_enclosing_type()\cell value.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell c_val_print()\cell c-valprint.c\cell\row
\cell convert_actual()\cell ada-lang.c\cell\row
\cell evaluate_subexp_for_address()\cell eval.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell find_function_addr()\cell infcall.c\cell\row
\cell find_overload_match()\cell valops.c\cell\row
\cell gnuv2_virtual_fn_field()\cell gnu-v2-abi.c\cell\row
\cell gnuv3_virtual_fn_field()\cell gnu-v3-abi.c\cell\row
\cell java_print_value_fields()\cell jv-valprint.c\cell\row
\cell make_array_descriptor()\cell ada-lang.c\cell\row
\cell typecmp()\cell valops.c\cell\row
\cell value_arg_coerce()\cell infcall.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_fn_field()\cell value.c\cell\row
\cell value_x_binop()\cell valarith.c\cell\row
\cell value_x_unop()\cell valarith.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_aggregate_elt()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_aggregate_elt ( struct type* curtype, char* name, enum noside noside )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell value_namespace_elt()\cell valops.c\cell\row
\cell value_struct_elt_for_reference()\cell valops.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_allocate_space_in_inferior()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_allocate_space_in_inferior ( int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell value_from_longest()\cell value.c\cell\row
Called by:\cell scm_evaluate_string()\cell scm-lang.c\cell\row
\cell scm_lookup_name()\cell scm-lang.c\cell\row
Refs Var:\cell builtin_type_void_data_ptr\cell gdbtypes.c\cell\row
\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_array()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_array ( int lowbound, int highbound, struct value** elemvec )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_space_in_inferior()\cell valops.c\cell\row
\cell allocate_value()\cell value.c\cell\row
\cell create_array_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_at_lazy()\cell valops.c\cell\row
\cell value_contents_all()\cell value.c\cell\row
\cell value_contents_all_raw()\cell value.c\cell\row
\cell value_enclosing_type()\cell value.c\cell\row
\cell write_memory()\cell corefile.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell current_language\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_assign()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_assign ( struct value* toval, struct value* fromval )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_array()\cell value.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell deprecated_set_value_type()\cell value.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_frame_id_hack()\cell value.c\cell\row
\cell deprecated_value_internalvar_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell deprecated_value_modifiable()\cell value.c\cell\row
\cell deprecated_value_regnum_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell frame_find_by_id()\cell frame.c\cell\row
\cell frame_register_read()\cell frame.c\cell\row
\cell frame_relative_level()\cell frame.c\cell\row
\cell gdbarch_convert_register_p()\cell gdbarch.c\cell\row
\cell gdbarch_value_to_register()\cell gdbarch.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell modify_field()\cell value.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell observer_notify_target_changed()\cell observer.c\cell\row
\cell put_frame_register()\cell frame.c\cell\row
\cell read_memory()\cell corefile.c\cell\row
\cell register_size()\cell regcache.c\cell\row
\cell reinit_frame_cache()\cell frame.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell set_internalvar()\cell value.c\cell\row
\cell set_internalvar_component()\cell value.c\cell\row
\cell set_value_embedded_offset()\cell value.c\cell\row
\cell set_value_pointed_to_offset()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_bitpos()\cell value.c\cell\row
\cell value_bitsize()\cell value.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_change_enclosing_type()\cell value.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_embedded_offset()\cell value.c\cell\row
\cell value_enclosing_type()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_pointed_to_offset()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell write_memory()\cell corefile.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), deprecated_memory_changed_hook(), deprecated_register_changed_hook(), exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()\cell\cell\row
Called by:\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell gdb_value_assign()\cell wrapper.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell deprecated_memory_changed_hook\cell top.c\cell\row
\cell deprecated_register_changed_hook\cell top.c\cell\row
\cell deprecated_selected_frame\cell frame.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_at()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_at ( struct type* type, CORE_ADDR addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell read_memory()\cell corefile.c\cell\row
\cell value_contents_all_raw()\cell value.c\cell\row
Called by:\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell c_val_print()\cell c-valprint.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell f_val_print()\cell f-valprint.c\cell\row
\cell find_rt_vbase_offset()\cell valops.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell hpacc_value_rtti_type()\cell hpacc-abi.c\cell\row
\cell hpacc_virtual_fn_field()\cell hpacc-abi.c\cell\row
\cell java_class_from_object()\cell jv-lang.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell pascal_val_print()\cell p-valprint.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell value_static_field()\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_at_lazy()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_at_lazy ( struct type* type, CORE_ADDR addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell set_value_lazy()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell do_examine()\cell printcmd.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell gnuv3_baseclass_offset()\cell gnu-v3-abi.c\cell\row
\cell gnuv3_rtti_type()\cell gnu-v3-abi.c\cell\row
\cell gnuv3_virtual_fn_field()\cell gnu-v3-abi.c\cell\row
\cell print_subexp_standard()\cell expprint.c\cell\row
\cell value_array()\cell valops.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_full_object()\cell valops.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_string()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_bitstring()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_bitstring ( char* ptr, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell create_set_type()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_cast()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_cast ( struct type* type, struct value* arg2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell deprecated_set_value_type()\cell value.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
Called by:\cell ada_coerce_to_simple_array_ptr()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell ada_value_ptr_subscript()\cell ada-lang.c\cell\row
\cell ada_value_slice()\cell ada-lang.c\cell\row
\cell cast_to_fixed()\cell ada-lang.c\cell\row
\cell coerce_enum()\cell value.c\cell\row
\cell cplus_value_of_child()\cell varobj.c\cell\row
\cell evaluate_struct_tuple()\cell eval.c\cell\row
\cell evaluate_subexp_for_address()\cell eval.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell evaluate_subexp_with_coercion()\cell eval.c\cell\row
\cell gdb_value_cast()\cell wrapper.c\cell\row
\cell get_closure_implementation_fn()\cell gdbtypes.c\cell\row
\cell gnuv2_value_rtti_type()\cell gnu-v2-abi.c\cell\row
\cell gnuv2_virtual_fn_field()\cell gnu-v2-abi.c\cell\row
\cell gnuv3_rtti_type()\cell gnu-v3-abi.c\cell\row
\cell gnuv3_virtual_fn_field()\cell gnu-v3-abi.c\cell\row
\cell hpacc_virtual_fn_field()\cell hpacc-abi.c\cell\row
\cell print_object_command()\cell objc-lang.c\cell\row
\cell return_command()\cell stack.c\cell\row
\cell thin_data_pntr()\cell ada-lang.c\cell\row
\cell value_arg_coerce()\cell infcall.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_fn_field()\cell value.c\cell\row
\cell value_literal_complex()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_clear_inferior_string_pool()\par}
{\s5\f1\fs20\ql\sb50\sa50 void value_clear_inferior_string_pool ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
Called by:\cell generic_mourn_inferior()\cell target/target.c\cell\row
Refs Var:\cell string_table\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_coerce_array()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_coerce_array ( struct value* arg1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell coerce_array()\cell value.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell lookup_child_selector_nocache()\cell objc-lang.c\cell\row
\cell lookup_objc_class()\cell objc-lang.c\cell\row
\cell typecmp()\cell valops.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_nsstring()\cell objc-lang.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_coerce_function()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_coerce_function ( struct value* arg1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell coerce_array()\cell value.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_fetch_lazy()\par}
{\s5\f1\fs20\ql\sb50\sa50 int value_fetch_lazy ( struct value* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell deprecated_value_address_hack()\cell value.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell read_memory()\cell corefile.c\cell\row
\cell set_value_lazy()\cell value.c\cell\row
\cell value_contents_all_raw()\cell value.c\cell\row
\cell value_enclosing_type()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
Called by:\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell cp_print_hpacc_virtual_table_entries()\cell cp-valprint.c\cell\row
\cell do_enable_breakpoint()\cell breakpoint.c\cell\row
\cell gdb_value_fetch_lazy()\cell wrapper.c\cell\row
\cell gnuv2_virtual_fn_field()\cell gnu-v2-abi.c\cell\row
\cell record_latest_value()\cell value.c\cell\row
\cell return_command()\cell stack.c\cell\row
\cell set_internalvar()\cell value.c\cell\row
\cell value_contents_all()\cell value.c\cell\row
\cell value_contents_writeable()\cell value.c\cell\row
\cell value_of_internalvar()\cell value.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_find_oload_method_list()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct fn_field* value_find_oload_method_list ( struct value** argp, char* method, int offset, int* num_fns, struct type** basetype, int* boffset )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_array()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_method_list()\cell valops.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell find_overload_match()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_full_object()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_full_object ( struct value* volatile argp, struct type* rtype, int xfull, int xtop, int xusing_enc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell deprecated_set_value_type()\cell value.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell set_value_embedded_offset()\cell value.c\cell\row
\cell value_at_lazy()\cell valops.c\cell\row
\cell value_change_enclosing_type()\cell value.c\cell\row
\cell value_embedded_offset()\cell value.c\cell\row
\cell value_enclosing_type()\cell value.c\cell\row
\cell value_rtti_type()\cell cp-abi.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()\cell\cell\row
Called by:\cell c_value_print()\cell c-valprint.c\cell\row
\cell value_ind()\cell valops.c\cell\row
Refs Var:\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_ind()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_ind ( struct value* arg1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_array()\cell value.c\cell\row
\cell deprecated_set_value_type()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell set_value_embedded_offset()\cell value.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_at_lazy()\cell valops.c\cell\row
\cell value_change_enclosing_type()\cell value.c\cell\row
\cell value_enclosing_type()\cell value.c\cell\row
\cell value_full_object()\cell valops.c\cell\row
\cell value_pointed_to_offset()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_coerce_to_simple_array()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell ada_value_ind()\cell ada-lang.c\cell\row
\cell ada_value_ptr_subscript()\cell ada-lang.c\cell\row
\cell ada_value_struct_elt()\cell ada-lang.c\cell\row
\cell cp_print_hpacc_virtual_table_entries()\cell cp-valprint.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell gdb_value_ind()\cell wrapper.c\cell\row
\cell get_closure_implementation_fn()\cell gdbtypes.c\cell\row
\cell gnuv2_virtual_fn_field()\cell gnu-v2-abi.c\cell\row
\cell java_link_class_type()\cell jv-lang.c\cell\row
\cell scm_lookup_name()\cell scm-lang.c\cell\row
\cell type_from_class()\cell jv-lang.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_find_oload_method_list()\cell valops.c\cell\row
\cell value_fn_field()\cell value.c\cell\row
\cell value_rtti_target_type()\cell valops.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\cell varobj_value_struct_elt_by_index()\cell varobj.c\cell\row
\cell x_command()\cell printcmd.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_literal_complex()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_literal_complex ( struct value* arg1, struct value* arg2, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell cast_into_complex()\cell valops.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_of_local()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_of_local ( const char* name, int complain )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell dict_empty()\cell dictionary.c\cell\row
\cell error()\cell utils.c\cell\row
\cell get_frame_function()\cell blockframe.c\cell\row
\cell lookup_block_symbol()\cell symtab.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell value_of_this()\cell valops.c\cell\row
Refs Var:\cell deprecated_selected_frame\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_of_this()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_of_this ( int complain )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell get_frame_function()\cell blockframe.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell value_of_local()\cell valops.c\cell\row
Called by:\cell pascal_parse()\cell p-exp.c\cell\row
Used in:\cell c-lang.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_of_variable()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_of_variable ( struct symbol* var, struct block* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell block_innermost_frame()\cell blockframe.c\cell\row
\cell error()\cell utils.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell symbol_read_needs_frame()\cell findvar.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell find_function_in_inferior()\cell valops.c\cell\row
\cell get_var_value()\cell ada-lang.c\cell\row
\cell scm_lookup_name()\cell scm-lang.c\cell\row
\cell value_maybe_namespace_elt()\cell valops.c\cell\row
Refs Var:\cell demangle\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_repeat()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_repeat ( struct value* arg1, int count )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_repeat_value()\cell value.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell read_memory()\cell corefile.c\cell\row
\cell value_contents_all_raw()\cell value.c\cell\row
\cell value_enclosing_type()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_rtti_target_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* value_rtti_target_type ( struct value* v, int* full, int* top, int* using_enc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell value_ind()\cell valops.c\cell\row
\cell value_rtti_type()\cell cp-abi.c\cell\row
Called by:\cell c_value_print()\cell c-valprint.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell safe_value_rtti_target_type()\cell varobj.c\cell\row
\cell whatis_exp()\cell typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_slice()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_slice ( struct value* array, int lowbound, int length )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell create_array_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell create_set_type()\cell gdbtypes.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_frame_id_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell get_discrete_bounds()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell set_value_lazy()\cell value.c\cell\row
\cell set_value_offset()\cell value.c\cell\row
\cell value_bit_index()\cell valarith.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell value_contents_writeable()\cell value.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell value_zero()\cell valops.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell ada_value_slice()\cell ada-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_string()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_string ( const char* ptr, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_string_in_inferior()\cell valops.c\cell\row
\cell allocate_value()\cell value.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell create_string_type()\cell gdbtypes.c\cell\row
\cell value_at_lazy()\cell valops.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell lookup_child_selector_nocache()\cell objc-lang.c\cell\row
\cell lookup_objc_class()\cell objc-lang.c\cell\row
\cell value_concat()\cell valarith.c\cell\row
\cell value_nsstring()\cell objc-lang.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell current_language\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_struct_elt()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_struct_elt ( struct value** argp, struct value** args, const char* name, int* static_memfuncp, const char* err )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_array()\cell value.c\cell\row
\cell destructor_name_p()\cell valops.c\cell\row
\cell error()\cell utils.c\cell\row
\cell get_destructor_fn_field()\cell gdbtypes.c\cell\row
\cell search_struct_field()\cell valops.c\cell\row
\cell search_struct_method()\cell valops.c\cell\row
\cell value_fn_field()\cell value.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell desc_bounds()\cell ada-lang.c\cell\row
\cell desc_data()\cell ada-lang.c\cell\row
\cell desc_one_bound()\cell ada-lang.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell gdb_value_struct_elt()\cell wrapper.c\cell\row
\cell get_closure_implementation_fn()\cell gdbtypes.c\cell\row
\cell get_java_utf8_name()\cell jv-lang.c\cell\row
\cell java_class_from_object()\cell jv-lang.c\cell\row
\cell java_class_is_primitive()\cell jv-lang.c\cell\row
\cell java_link_class_type()\cell jv-lang.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell type_from_class()\cell jv-lang.c\cell\row
\cell unwrap_value()\cell ada-lang.c\cell\row
\cell value_x_binop()\cell valarith.c\cell\row
\cell value_x_unop()\cell valarith.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_zero()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_zero ( struct type* type, enum lval_type lv )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell cast_into_complex()\cell valops.c\cell\row
\cell evaluate_subexp_for_address()\cell eval.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_slice()\cell valops.c\cell\row
\cell value_x_binop()\cell valarith.c\cell\row
\cell value_x_unop()\cell valarith.c\cell\row
\cell varobj_get_dynamic_type()\cell varobj.c\cell\row
\cell varobj_get_type_internal()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function allocate_space_in_inferior()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR allocate_space_in_inferior ( int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell valops.c\cell\cell\row
Called by:\cell allocate_string_in_inferior()\cell valops.c\cell\row
\cell value_array()\cell valops.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function allocate_string_in_inferior()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR allocate_string_in_inferior ( const char* str, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell allocate_space_in_inferior()\cell valops.c\cell\row
\cell inferior_string_hash()\cell valops.c\cell\row
\cell write_memory()\cell corefile.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), memcmp()\cell\cell\row
Called by:\cell value_string()\cell valops.c\cell\row
Refs Var:\cell string_table\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cast_into_complex()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* cast_into_complex ( struct type* type, struct value* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell valops.c\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell value_literal_complex()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell value_zero()\cell valops.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell value_cast_1()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function check_field_in()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int check_field_in ( struct type* type, const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell valops.c\cell\cell\row
Calls: \cell check_field_in()\cell valops.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell destructor_name_p()\cell valops.c\cell\row
\cell get_destructor_fn_field()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell strcmp_iw()\cell utils.c\cell\row
Called by:\cell check_field()\cell valops.c\cell\row
\cell check_field_in()\cell valops.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function classify_oload_match()\par}
{\s5\f1\fs20\ql\sb50\sa50 static enum oload_classification classify_oload_match ( struct badness_vector* oload_champ_bv, int nargs, int static_offset )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell valops.c\cell\cell\row
Called by:\cell find_oload_champ_namespace_loop()\cell valops.c\cell\row
\cell find_overload_match()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_check_is_thread_unsafe()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int do_check_is_thread_unsafe ( void* argptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell find_pc_partial_function()\cell blockframe.c\cell\row
\cell frame_relative_level()\cell frame.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell get_frame_pc()\cell frame.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
\cell make_cleanup_ui_out_tuple_begin_end()\cell ui-out.c\cell\row
\cell pid_to_thread_id()\cell thread.c\cell\row
\cell switch_to_thread()\cell thread.c\cell\row
\cell ui_out_field_fmt()\cell ui-out.c\cell\row
\cell ui_out_field_int()\cell ui-out.c\cell\row
\cell ui_out_text()\cell ui-out.c\cell\row
\cell  regexec(), strlen()\cell\cell\row
Used in:\cell safe_check_is_thread_unsafe()\cell valops.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_method_list()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct fn_field* find_method_list ( struct value** argp, char* method, int offset, struct type* type, int* num_fns, struct type** basetype, int* boffset )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell valops.c\cell\cell\row
Calls: \cell baseclass_offset()\cell cp-abi.c\cell\row
\cell check_stub_method_group()\cell gdbtypes.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_method_list()\cell valops.c\cell\row
\cell find_rt_vbase_offset()\cell valops.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell strcmp_iw()\cell utils.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_contents_all()\cell value.c\cell\row
\cell value_embedded_offset()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
Called by:\cell find_method_list()\cell valops.c\cell\row
\cell value_find_oload_method_list()\cell valops.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_oload_champ()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int find_oload_champ ( struct type** arg_types, int nargs, int method, int num_fns, struct fn_field* fns_ptr, struct symbol** oload_syms, struct badness_vector** oload_champ_bv )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell valops.c\cell\cell\row
Calls: \cell compare_badness()\cell gdbtypes.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell oload_method_static()\cell valops.c\cell\row
\cell rank_function()\cell gdbtypes.c\cell\row
\cell symbol_demangled_name()\cell symtab.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell find_oload_champ_namespace_loop()\cell valops.c\cell\row
\cell find_overload_match()\cell valops.c\cell\row
Refs Var:\cell gdb_stderr\cell main.c\cell\row
\cell overload_debug\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_oload_champ_namespace()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int find_oload_champ_namespace ( struct type** arg_types, int nargs, const char* func_name, const char* qualified_name, struct symbol*** oload_syms, struct badness_vector** oload_champ_bv )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell valops.c\cell\cell\row
Calls: \cell find_oload_champ_namespace_loop()\cell valops.c\cell\row
Called by:\cell find_overload_match()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_oload_champ_namespace_loop()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int find_oload_champ_namespace_loop ( struct type** arg_types, int nargs, const char* func_name, const char* qualified_name, int namespace_len, struct symbol*** oload_syms, struct badness_vector** oload_champ_bv, int* oload_champ )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell valops.c\cell\cell\row
Calls: \cell classify_oload_match()\cell valops.c\cell\row
\cell cp_find_first_component()\cell cp-support.c\cell\row
\cell discard_cleanups()\cell utils.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell find_oload_champ()\cell valops.c\cell\row
\cell find_oload_champ_namespace_loop()\cell valops.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_symbol_overload_list()\cell cp-support.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  __builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strncpy_chk()\cell\cell\row
Called by:\cell find_oload_champ_namespace()\cell valops.c\cell\row
\cell find_oload_champ_namespace_loop()\cell valops.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function inferior_string_hash()\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned int inferior_string_hash ( const char* string, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell allocate_string_in_inferior()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function oload_method_static()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int oload_method_static ( int method, struct fn_field* fns_ptr, int index )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell valops.c\cell\cell\row
Called by:\cell find_oload_champ()\cell valops.c\cell\row
\cell find_overload_match()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function safe_check_is_thread_unsafe()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int safe_check_is_thread_unsafe ( struct thread_info* tp, void* data )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell make_cleanup_restore_current_thread()\cell thread.c\cell\row
\cell  catch_errors()\cell\cell\row
Called by:\cell check_safe_call()\cell valops.c\cell\row
Used in:\cell check_safe_call()\cell valops.c\cell\row
Refs Func:\cell do_check_is_thread_unsafe()\cell valops.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function search_struct_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* search_struct_field ( const char* name, struct value* arg1, int offset, struct type* type, int looking_for_baseclass )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell valops.c\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell baseclass_offset()\cell cp-abi.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_frame_id_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell search_struct_field()\cell valops.c\cell\row
\cell set_value_lazy()\cell value.c\cell\row
\cell set_value_offset()\cell value.c\cell\row
\cell strcmp_iw()\cell utils.c\cell\row
\cell target_read_memory()\cell target/target.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
\cell value_static_field()\cell value.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell search_struct_field()\cell valops.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function search_struct_method()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* search_struct_method ( const char* name, struct value** arg1p, struct value** args, int offset, int* static_memfuncp, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell valops.c\cell\cell\row
Calls: \cell baseclass_offset()\cell cp-abi.c\cell\row
\cell check_stub_method_group()\cell gdbtypes.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_rt_vbase_offset()\cell valops.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell search_struct_method()\cell valops.c\cell\row
\cell strcmp_iw()\cell utils.c\cell\row
\cell target_read_memory()\cell target/target.c\cell\row
\cell typecmp()\cell valops.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_contents_all()\cell value.c\cell\row
\cell value_embedded_offset()\cell value.c\cell\row
\cell value_fn_field()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_virtual_fn_field()\cell cp-abi.c\cell\row
\cell  __builtin_alloca(), cplus_demangle_opname(), strncmp()\cell\cell\row
Called by:\cell search_struct_method()\cell valops.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_overload_resolution()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_overload_resolution ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_valops()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function typecmp()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int typecmp ( int staticp, int varargs, int nargs, struct field t1[], struct value* t2[] )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell valops.c\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_coerce_array()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell search_struct_method()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function value_cast_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* value_cast_1 ( struct type* type, struct value* arg2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell cast_into_complex()\cell valops.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell create_array_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell deprecated_set_value_type()\cell value.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell gdbarch_addr_bit()\cell gdbarch.c\cell\row
\cell get_discrete_bounds()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell search_struct_field()\cell valops.c\cell\row
\cell set_value_pointed_to_offset()\cell value.c\cell\row
\cell type_name_no_tag()\cell gdbtypes.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_as_double()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_at_lazy()\cell valops.c\cell\row
\cell value_change_enclosing_type()\cell value.c\cell\row
\cell value_coerce_array()\cell valops.c\cell\row
\cell value_coerce_function()\cell valops.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_embedded_offset()\cell value.c\cell\row
\cell value_from_double()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_logical_not()\cell valarith.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell value_zero()\cell valops.c\cell\row
\cell warning()\cell utils.c\cell\row
Called by:\cell value_cast()\cell valops.c\cell\row
Refs Var:\cell builtin_type_void\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_language\cell language.c\cell\row
\cell deprecated_hp_som_som_object_present\cell symtab.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function value_maybe_namespace_elt()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* value_maybe_namespace_elt ( const struct type* curtype, char* name, enum noside noside )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell valops.c\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell cp_lookup_symbol_namespace()\cell cp-namespace.c\cell\row
\cell get_selected_block()\cell stack.c\cell\row
\cell value_of_variable()\cell valops.c\cell\row
Called by:\cell value_namespace_elt()\cell valops.c\cell\row
\cell value_struct_elt_for_reference()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function value_namespace_elt()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* value_namespace_elt ( const struct type* curtype, char* name, enum noside noside )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell valops.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell value_maybe_namespace_elt()\cell valops.c\cell\row
Called by:\cell value_aggregate_elt()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function value_struct_elt_for_reference()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* value_struct_elt_for_reference ( struct type* domain, int offset, struct type* curtype, char* name, struct type* intype, enum noside noside )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell valops.c\cell\cell\row
Calls: \cell check_stub_method_group()\cell gdbtypes.c\cell\row
\cell destructor_name_p()\cell valops.c\cell\row
\cell error()\cell utils.c\cell\row
\cell lookup_member_type()\cell gdbtypes.c\cell\row
\cell lookup_reference_type()\cell gdbtypes.c\cell\row
\cell lookup_symbol()\cell symtab.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_maybe_namespace_elt()\cell valops.c\cell\row
\cell value_static_field()\cell value.c\cell\row
\cell value_struct_elt_for_reference()\cell valops.c\cell\row
\cell  cplus_demangle_opname(), strcmp(), strncmp()\cell\cell\row
Called by:\cell value_aggregate_elt()\cell valops.c\cell\row
\cell value_struct_elt_for_reference()\cell valops.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
}
