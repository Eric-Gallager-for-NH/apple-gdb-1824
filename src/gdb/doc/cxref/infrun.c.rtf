{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF infrun.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File infrun.c\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Refs Var:\cell follow_fork_mode_child\cell infrun.c\cell\row
\cell follow_fork_mode_parent\cell infrun.c\cell\row
\cell schedlock_off\cell infrun.c\cell\row
\cell schedlock_on\cell infrun.c\cell\row
\cell schedlock_step\cell infrun.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <ctype.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exceptions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <setjmp.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_wait.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/wait.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "cli/cli-script.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbthread.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "annotate.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "top.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inf-loop.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "event-top.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "regcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "observer.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "solib.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "mi/mi-common.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-dyld.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-mutils.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-utils.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-threads.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <pthread.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <mach/machine.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <mach-o/loader.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-dyld-info.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <mach/machine.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <mach-o/loader.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-dyld-path.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "checkpoint.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define TARGET_DISABLE_HW_WATCHPOINTS( pid )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define TARGET_ENABLE_HW_WATCHPOINTS( pid )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define MAY_FOLLOW_EXEC 0\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SKIP_PERMANENT_BREAKPOINT default_skip_permanent_breakpoint\par}
{\s5\f1\fs20\ql\sb50\sa50 #define HAVE_STEPPABLE_WATCHPOINT 0\par}
{\s5\f1\fs20\ql\sb50\sa50 #define CANNOT_STEP_HW_WATCHPOINTS 0\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SET_SIGS( nsigs, sigs, flags )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define UNSET_SIGS( nsigs, sigs, flags )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define RESUME_ALL\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type enum infwait_states\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum infwait_states}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 infwait_normal_state;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 infwait_thread_hop_state;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 infwait_nonstep_watch_state;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type enum inferior_stop_reason\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum inferior_stop_reason}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 STOP_UNKNOWN;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 END_STEPPING_RANGE;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 BREAKPOINT_HIT;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 SIGNAL_EXITED;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 EXITED;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 SIGNAL_RECEIVED;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct execution_control_state\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct execution_control_state}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct target_waitstatus ws;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct target_waitstatus* wp;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int another_trap;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int random_signal;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR stop_func_start;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR stop_func_end;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* stop_func_name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct symtab_and_line sal;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int current_line;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct symtab* current_symtab;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int handling_longjmp;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 ptid_t ptid;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 ptid_t saved_inferior_ptid;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int step_after_step_resume_breakpoint;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int stepping_through_solib_after_catch;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bpstat stepping_through_solib_catchpoints;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int enable_hw_watchpoints_after_wait;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int new_thread_event;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct target_waitstatus tmpstatus;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum infwait_states infwait_state;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 ptid_t waiton_ptid;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int wait_some_more;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct inferior_status\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct inferior_status}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 ptid_t stop_ptid;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum target_signal stop_signal;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR stop_pc;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bpstat stop_bpstat;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int stop_step;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int stop_stack_dummy;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int stopped_by_random_signal;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int trap_expected;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR step_range_start;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR step_range_end;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct address_range_list* stepping_ranges;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct frame_id step_frame_id;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum step_over_calls_kind step_over_calls;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR step_resume_break_address;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int stop_after_trap;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int stop_soon;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct regcache* stop_registers;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct regcache* registers;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct frame_id selected_frame_id;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int breakpoint_proceeded;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int restore_stack_info;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int proceed_to_finish;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 void* tdep_inferior_status;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable minus_one_ptid\par}
{\s5\f1\fs20\ql\sb50\sa50 ptid_t minus_one_ptid\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell _initialize_infrun()\cell infrun.c\cell\row
\cell do_reset_hand_call_ptid()\cell infcall.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell init_wait_for_inferior()\cell infrun.c\cell\row
\cell prepare_to_proceed()\cell infrun.c\cell\row
\cell resume()\cell infrun.c\cell\row
\cell set_schedlock_helper()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable null_ptid\par}
{\s5\f1\fs20\ql\sb50\sa50 ptid_t null_ptid\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell _initialize_inflow()\cell inflow.c\cell\row
\cell _initialize_infrun()\cell infrun.c\cell\row
\cell generic_mourn_inferior()\cell target/target.c\cell\row
\cell kill_command()\cell inflow.c\cell\row
\cell kill_if_already_running()\cell infcmd.c\cell\row
\cell nosupport_runtime()\cell target/target.c\cell\row
\cell quit_confirm()\cell top.c\cell\row
\cell quit_target()\cell top.c\cell\row
\cell remote_macosx_open()\cell remote.c\cell\row
\cell remote_open_1()\cell remote.c\cell\row
\cell remote_start_remote()\cell remote.c\cell\row
\cell run_command_1()\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable sync_execution\par}
{\s5\f1\fs20\ql\sb50\sa50 int sync_execution\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell complete_execution()\cell inf-loop.c\cell\row
\cell display_gdb_prompt()\cell event-top.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell inferior_event_handler()\cell inf-loop.c\cell\row
\cell remote_async_terminal_inferior()\cell remote.c\cell\row
\cell remote_async_terminal_ours()\cell remote.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable inferior_ignoring_startup_exec_events\par}
{\s5\f1\fs20\ql\sb50\sa50 int inferior_ignoring_startup_exec_events\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valops.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable inferior_ignoring_leading_exec_events\par}
{\s5\f1\fs20\ql\sb50\sa50 int inferior_ignoring_leading_exec_events\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell handle_inferior_event()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable step_stop_if_no_debug\par}
{\s5\f1\fs20\ql\sb50\sa50 int step_stop_if_no_debug\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell _initialize_infrun()\cell infrun.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell step_once()\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable stop_soon\par}
{\s5\f1\fs20\ql\sb50\sa50 enum stop_kind stop_soon\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell clear_proceed_status()\cell infrun.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell restore_inferior_status()\cell infrun.c\cell\row
\cell save_inferior_status()\cell infrun.c\cell\row
\cell start_remote()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable proceed_from_hand_call\par}
{\s5\f1\fs20\ql\sb50\sa50 int proceed_from_hand_call\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell do_unset_proceed_from_hand_call()\cell infcall.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell keep_going()\cell infrun.c\cell\row
\cell prepare_to_proceed()\cell infrun.c\cell\row
\cell proceed()\cell infrun.c\cell\row
\cell run_command_1()\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable proceed_to_finish\par}
{\s5\f1\fs20\ql\sb50\sa50 int proceed_to_finish\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell clear_proceed_status()\cell infrun.c\cell\row
\cell finish_command()\cell infcmd.c\cell\row
\cell finish_inlined_subroutine_command()\cell infcmd.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell restore_inferior_status()\cell infrun.c\cell\row
\cell save_inferior_status()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable stop_registers\par}
{\s5\f1\fs20\ql\sb50\sa50 struct regcache* stop_registers\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell _initialize_infrun()\cell infrun.c\cell\row
\cell build_infrun()\cell infrun.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell print_return_value()\cell infcmd.c\cell\row
\cell restore_inferior_status()\cell infrun.c\cell\row
\cell save_inferior_status()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable debug_handcall_setup\par}
{\s5\f1\fs20\ql\sb50\sa50 int debug_handcall_setup\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell _initialize_infrun()\cell infrun.c\cell\row
\cell discard_hand_call_cleanups()\cell utils.c\cell\row
\cell do_end_debugger_mode()\cell objc-lang.c\cell\row
\cell do_hand_call_cleanups()\cell utils.c\cell\row
\cell do_reset_debug_mode_flag()\cell objc-lang.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell objc_setup_safe_print()\cell objc-lang.c\cell\row
\cell set_scheduler_locking_mode()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable currently_inside_optimized_code\par}
{\s5\f1\fs20\ql\sb50\sa50 int currently_inside_optimized_code\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell event-top.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell interps.c\cell\cell\row
\cell main.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell source.c\cell\cell\row
\cell top.c\cell\cell\row
Used in:\cell adjust_prompts_for_optimized_code()\cell event-top.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell set_async_prompt()\cell event-top.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable stop_after_trap\par}
{\s5\f1\fs20\ql\sb50\sa50 int stop_after_trap\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell infrun.c\cell\cell\row
Used in:\cell clear_proceed_status()\cell infrun.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell proceed()\cell infrun.c\cell\row
\cell restore_inferior_status()\cell infrun.c\cell\row
\cell save_inferior_status()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable async_ecss\par}
{\s5\f1\fs20\ql\sb50\sa50 struct execution_control_state async_ecss\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell infrun.c\cell\cell\row
Used in:\cell fetch_inferior_event()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable async_ecs\par}
{\s5\f1\fs20\ql\sb50\sa50 struct execution_control_state* async_ecs\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell infrun.c\cell\cell\row
Used in:\cell fetch_inferior_event()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable stepped_after_stopped_by_watchpoint\par}
{\s5\f1\fs20\ql\sb50\sa50 int stepped_after_stopped_by_watchpoint\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell infrun.c\cell\cell\row
\cell remote.c\cell\cell\row
Used in:\cell handle_inferior_event()\cell infrun.c\cell\row
\cell remote_stopped_data_address()\cell remote.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable previous_inferior_ptid\par}
{\s5\f1\fs20\ql\sb50\sa50 static ptid_t previous_inferior_ptid\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell fetch_inferior_event()\cell\cell\row
\cell normal_stop()\cell\cell\row
\cell wait_for_inferior()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable may_follow_exec\par}
{\s5\f1\fs20\ql\sb50\sa50 static int may_follow_exec\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell follow_exec()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable debug_infrun\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_infrun\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_infrun()\cell\cell\row
\cell handle_inferior_event()\cell\cell\row
\cell insert_step_resume_breakpoint_at_frame()\cell\cell\row
\cell prepare_to_wait()\cell\cell\row
\cell proceed()\cell\cell\row
\cell resume()\cell\cell\row
\cell stop_stepping()\cell\cell\row
\cell wait_for_inferior()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable signal_stop\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned char* signal_stop\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell allocate_signal_set()\cell\cell\row
\cell handle_command()\cell\cell\row
\cell handle_inferior_event()\cell\cell\row
\cell print_stop_reason()\cell\cell\row
\cell set_minimal_signal_handling()\cell\cell\row
\cell sig_print_info()\cell\cell\row
\cell signal_stop_state()\cell\cell\row
\cell signal_stop_update()\cell\cell\row
\cell xdb_handle_command()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable signal_print\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned char* signal_print\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell allocate_signal_set()\cell\cell\row
\cell handle_command()\cell\cell\row
\cell handle_inferior_event()\cell\cell\row
\cell set_minimal_signal_handling()\cell\cell\row
\cell sig_print_info()\cell\cell\row
\cell signal_print_state()\cell\cell\row
\cell signal_print_update()\cell\cell\row
\cell xdb_handle_command()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable signal_program\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned char* signal_program\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell allocate_signal_set()\cell\cell\row
\cell handle_command()\cell\cell\row
\cell handle_inferior_event()\cell\cell\row
\cell keep_going()\cell\cell\row
\cell proceed()\cell\cell\row
\cell set_minimal_signal_handling()\cell\cell\row
\cell sig_print_info()\cell\cell\row
\cell signal_pass_state()\cell\cell\row
\cell signal_pass_update()\cell\cell\row
\cell xdb_handle_command()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable stop_command\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct cmd_list_element* stop_command\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_infrun()\cell\cell\row
\cell normal_stop()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable breakpoints_inserted\par}
{\s5\f1\fs20\ql\sb50\sa50 static int breakpoints_inserted\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell handle_inferior_event()\cell\cell\row
\cell init_wait_for_inferior()\cell\cell\row
\cell insert_step_resume_breakpoint_at_sal()\cell\cell\row
\cell keep_going()\cell\cell\row
\cell normal_stop()\cell\cell\row
\cell proceed()\cell\cell\row
\cell resume()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable step_start_function\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* step_start_function\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell normal_stop()\cell\cell\row
\cell proceed()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable trap_expected\par}
{\s5\f1\fs20\ql\sb50\sa50 static int trap_expected\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell clear_proceed_status()\cell\cell\row
\cell context_switch()\cell\cell\row
\cell currently_stepping()\cell\cell\row
\cell handle_inferior_event()\cell\cell\row
\cell keep_going()\cell\cell\row
\cell proceed()\cell\cell\row
\cell restore_inferior_status()\cell\cell\row
\cell save_inferior_status()\cell\cell\row
\cell start_remote()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable stop_on_solib_events\par}
{\s5\f1\fs20\ql\sb50\sa50 static int stop_on_solib_events\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_infrun()\cell\cell\row
\cell handle_inferior_event()\cell\cell\row
\cell normal_stop()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable solib_step_bp\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct breakpoint* solib_step_bp\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell handle_inferior_event()\cell\cell\row
\cell normal_stop()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable solib_finish_bp\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct breakpoint* solib_finish_bp\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell handle_inferior_event()\cell\cell\row
\cell normal_stop()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable breakpoints_failed\par}
{\s5\f1\fs20\ql\sb50\sa50 static int breakpoints_failed\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell handle_inferior_event()\cell\cell\row
\cell keep_going()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable stop_print_frame\par}
{\s5\f1\fs20\ql\sb50\sa50 static int stop_print_frame\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell handle_inferior_event()\cell\cell\row
\cell normal_stop()\cell\cell\row
\cell rollback_stop()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable step_resume_breakpoint\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct breakpoint* step_resume_breakpoint\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell context_switch()\cell\cell\row
\cell currently_stepping()\cell\cell\row
\cell fetch_inferior_event()\cell\cell\row
\cell follow_exec()\cell\cell\row
\cell follow_inferior_reset_breakpoints()\cell\cell\row
\cell handle_inferior_event()\cell\cell\row
\cell hide_step_resume_breakpoint()\cell\cell\row
\cell insert_step_resume_breakpoint_at_sal()\cell\cell\row
\cell restore_step_resume_breakpoint()\cell\cell\row
\cell wait_for_inferior()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable target_last_wait_ptid\par}
{\s5\f1\fs20\ql\sb50\sa50 static ptid_t target_last_wait_ptid\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_infrun()\cell\cell\row
\cell get_last_target_status()\cell\cell\row
\cell handle_inferior_event()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable target_last_waitstatus\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct target_waitstatus target_last_waitstatus\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell get_last_target_status()\cell\cell\row
\cell handle_inferior_event()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable pending_follow\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct \{...\} pending_follow\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell handle_inferior_event()\cell\cell\row
\cell init_wait_for_inferior()\cell\cell\row
\cell resume()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable follow_fork_mode_child\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char follow_fork_mode_child[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell infrun.c\cell\cell\row
\cell follow_fork()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable follow_fork_mode_parent\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char follow_fork_mode_parent[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell infrun.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable follow_fork_mode_kind_names\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* follow_fork_mode_kind_names[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_infrun()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable follow_fork_mode_string\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* follow_fork_mode_string\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_infrun()\cell\cell\row
\cell follow_fork()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable singlestep_breakpoints_inserted_p\par}
{\s5\f1\fs20\ql\sb50\sa50 static int singlestep_breakpoints_inserted_p\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell adjust_pc_after_break()\cell\cell\row
\cell handle_inferior_event()\cell\cell\row
\cell resume()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable singlestep_ptid\par}
{\s5\f1\fs20\ql\sb50\sa50 static ptid_t singlestep_ptid\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell handle_inferior_event()\cell\cell\row
\cell resume()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable saved_singlestep_ptid\par}
{\s5\f1\fs20\ql\sb50\sa50 static ptid_t saved_singlestep_ptid\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell handle_inferior_event()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable stepping_past_singlestep_breakpoint\par}
{\s5\f1\fs20\ql\sb50\sa50 static int stepping_past_singlestep_breakpoint\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell handle_inferior_event()\cell\cell\row
\cell init_wait_for_inferior()\cell\cell\row
\cell resume()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable schedlock_off\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char schedlock_off[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell infrun.c\cell\cell\row
\cell set_schedlock_helper()\cell\cell\row
\cell set_scheduler_locking_mode()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable schedlock_on\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char schedlock_on[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell infrun.c\cell\cell\row
\cell handle_inferior_event()\cell\cell\row
\cell resume()\cell\cell\row
\cell scheduler_lock_on_p()\cell\cell\row
\cell set_schedlock_helper()\cell\cell\row
\cell set_scheduler_locking_mode()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable schedlock_step\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char schedlock_step[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell infrun.c\cell\cell\row
\cell resume()\cell\cell\row
\cell scheduler_lock_on_p()\cell\cell\row
\cell set_scheduler_locking_mode()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable scheduler_enums\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* scheduler_enums[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_infrun()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable scheduler_mode\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* scheduler_mode\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_infrun()\cell\cell\row
\cell handle_inferior_event()\cell\cell\row
\cell resume()\cell\cell\row
\cell scheduler_lock_on_p()\cell\cell\row
\cell set_schedlock_helper()\cell\cell\row
\cell set_scheduler_locking_mode()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable scheduler_lock_ptid\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct ptid scheduler_lock_ptid\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell get_scheduler_lock_ptid()\cell\cell\row
\cell init_wait_for_inferior()\cell\cell\row
\cell resume()\cell\cell\row
\cell scheduler_run_this_ptid()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable prev_pc\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR prev_pc\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell adjust_pc_after_break()\cell\cell\row
\cell context_switch()\cell\cell\row
\cell handle_inferior_event()\cell\cell\row
\cell init_execution_control_state()\cell\cell\row
\cell init_wait_for_inferior()\cell\cell\row
\cell keep_going()\cell\cell\row
\cell proceed()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable suppress_hook_stop_p\par}
{\s5\f1\fs20\ql\sb50\sa50 static void* suppress_hook_stop_p\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell do_cleanup_suppress_hook_stop()\cell\cell\row
\cell hook_stop_stub()\cell\cell\row
\cell make_cleanup_suppress_hook_stop()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable minimal_signal_handling\par}
{\s5\f1\fs20\ql\sb50\sa50 static int minimal_signal_handling\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_infrun()\cell\cell\row
\cell set_minimal_signal_handling()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable minimal_signal_stop\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned char* minimal_signal_stop\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_infrun()\cell\cell\row
\cell set_minimal_signal_handling()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable minimal_signal_print\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned char* minimal_signal_print\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_infrun()\cell\cell\row
\cell set_minimal_signal_handling()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable minimal_signal_program\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned char* minimal_signal_program\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_infrun()\cell\cell\row
\cell set_minimal_signal_handling()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable full_signal_stop\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned char* full_signal_stop\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_infrun()\cell\cell\row
\cell set_minimal_signal_handling()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable full_signal_print\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned char* full_signal_print\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_infrun()\cell\cell\row
\cell set_minimal_signal_handling()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable full_signal_program\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned char* full_signal_program\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_infrun()\cell\cell\row
\cell set_minimal_signal_handling()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_infrun()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_infrun ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell allocate_signal_set()\cell infrun.c\cell\row
\cell deprecated_register_gdbarch_swap()\cell gdbarch.c\cell\row
\cell ptid_build()\cell infrun.c\cell\row
\cell scheduler_run_this_ptid()\cell infrun.c\cell\row
\cell set_minimal_signal_handling()\cell infrun.c\cell\row
\cell  add_cmd(), add_com(), add_info(), add_info_alias(), add_setshow_boolean_cmd(), add_setshow_enum_cmd(), add_setshow_zinteger_cmd()\cell\cell\row
Refs Func:\cell build_infrun()\cell infrun.c\cell\row
\cell handle_command()\cell infrun.c\cell\row
\cell set_minimal_signal_handling()\cell infrun.c\cell\row
\cell set_schedlock_func()\cell infrun.c\cell\row
\cell show_debug_infrun()\cell infrun.c\cell\row
\cell show_follow_fork_mode_string()\cell infrun.c\cell\row
\cell show_scheduler_mode()\cell infrun.c\cell\row
\cell show_step_stop_if_no_debug()\cell infrun.c\cell\row
\cell show_stop_on_solib_events()\cell infrun.c\cell\row
\cell signals_info()\cell infrun.c\cell\row
\cell xdb_handle_command()\cell infrun.c\cell\row
\cell  not_just_help_class_command()\cell\cell\row
Refs Var:\cell dbx_commands\cell main.c\cell\row
\cell debug_handcall_setup\cell infrun.c\cell\row
\cell debug_infrun\cell infrun.c\cell\row
\cell follow_fork_mode_kind_names\cell infrun.c\cell\row
\cell follow_fork_mode_string\cell infrun.c\cell\row
\cell full_signal_print\cell infrun.c\cell\row
\cell full_signal_program\cell infrun.c\cell\row
\cell full_signal_stop\cell infrun.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell minimal_signal_handling\cell infrun.c\cell\row
\cell minimal_signal_print\cell infrun.c\cell\row
\cell minimal_signal_program\cell infrun.c\cell\row
\cell minimal_signal_stop\cell infrun.c\cell\row
\cell minus_one_ptid\cell infrun.c\cell\row
\cell null_ptid\cell infrun.c\cell\row
\cell scheduler_enums\cell infrun.c\cell\row
\cell scheduler_mode\cell infrun.c\cell\row
\cell step_stop_if_no_debug\cell infrun.c\cell\row
\cell stop_command\cell infrun.c\cell\row
\cell stop_on_solib_events\cell infrun.c\cell\row
\cell stop_registers\cell infrun.c\cell\row
\cell target_last_wait_ptid\cell infrun.c\cell\row
\cell xdb_commands\cell main.c\cell\row
\cell  cmdlist, setdebuglist, setlist, showdebuglist, showlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function clear_proceed_status()\par}
{\s5\f1\fs20\ql\sb50\sa50 void clear_proceed_status ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell bpstat_clear()\cell breakpoint.c\cell\row
Called by:\cell attach_command()\cell infcmd.c\cell\row
\cell continue_command()\cell infcmd.c\cell\row
\cell extended_remote_async_create_inferior()\cell remote.c\cell\row
\cell extended_remote_create_inferior()\cell remote.c\cell\row
\cell finish_command()\cell infcmd.c\cell\row
\cell finish_inlined_subroutine_command()\cell infcmd.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell init_wait_for_inferior()\cell infrun.c\cell\row
\cell jump_command()\cell infcmd.c\cell\row
\cell re_exec_1()\cell infcmd.c\cell\row
\cell re_exec_once()\cell infcmd.c\cell\row
\cell signal_command()\cell infcmd.c\cell\row
\cell step_1_inlining()\cell infcmd.c\cell\row
\cell step_1_no_inlining()\cell infcmd.c\cell\row
\cell step_once()\cell infcmd.c\cell\row
\cell until_break_command()\cell breakpoint.c\cell\row
\cell until_next_command()\cell infcmd.c\cell\row
Refs Var:\cell breakpoint_proceeded\cell infcmd.c\cell\row
\cell finishing_inlined_subroutine\cell infcmd.c\cell\row
\cell null_frame_id\cell frame.c\cell\row
\cell proceed_to_finish\cell infrun.c\cell\row
\cell step_frame_id\cell infcmd.c\cell\row
\cell step_over_calls\cell infcmd.c\cell\row
\cell step_range_end\cell infcmd.c\cell\row
\cell step_range_start\cell infcmd.c\cell\row
\cell stepping_over_inlined_subroutine\cell infcmd.c\cell\row
\cell stepping_ranges\cell infcmd.c\cell\row
\cell stop_after_trap\cell infrun.c\cell\row
\cell stop_bpstat\cell infcmd.c\cell\row
\cell stop_soon\cell infrun.c\cell\row
\cell trap_expected\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function discard_inferior_status()\par}
{\s5\f1\fs20\ql\sb50\sa50 void discard_inferior_status ( struct inferior_status* inf_status )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell bpstat_clear()\cell breakpoint.c\cell\row
\cell regcache_xfree()\cell regcache.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function fetch_inferior_event()\par}
{\s5\f1\fs20\ql\sb50\sa50 void fetch_inferior_event ( void* client_data )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell do_exec_cleanups()\cell utils.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell inferior_event_handler()\cell inf-loop.c\cell\row
\cell init_execution_control_state()\cell infrun.c\cell\row
\cell make_exec_cleanup()\cell utils.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell registers_changed()\cell regcache.c\cell\row
\cell  deprecated_target_wait_hook()\cell\cell\row
Called by:\cell fetch_inferior_event_wrapper()\cell inf-loop.c\cell\row
\cell inferior_event_handler()\cell inf-loop.c\cell\row
Refs Func:\cell delete_step_resume_breakpoint()\cell thread.c\cell\row
Refs Var:\cell async_ecs\cell infrun.c\cell\row
\cell async_ecss\cell infrun.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell deprecated_target_wait_hook\cell top.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell overlay_cache_invalid\cell symfile.c\cell\row
\cell previous_inferior_ptid\cell infrun.c\cell\row
\cell step_multi\cell infcmd.c\cell\row
\cell step_resume_breakpoint\cell infrun.c\cell\row
\cell stop_step\cell infcmd.c\cell\row
\cell target_executing\cell top.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function follow_inferior_reset_breakpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 void follow_inferior_reset_breakpoints ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell breakpoint_re_set()\cell breakpoint.c\cell\row
\cell breakpoint_re_set_thread()\cell breakpoint.c\cell\row
\cell insert_breakpoints()\cell breakpoint.c\cell\row
Refs Var:\cell step_resume_breakpoint\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_last_target_status()\par}
{\s5\f1\fs20\ql\sb50\sa50 void get_last_target_status ( ptid_t* ptidp, struct target_waitstatus* status )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Called by:\cell inferior_has_execd()\cell infrun.c\cell\row
\cell inferior_has_forked()\cell infrun.c\cell\row
\cell inferior_has_vforked()\cell infrun.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell prepare_to_proceed()\cell infrun.c\cell\row
Refs Var:\cell target_last_wait_ptid\cell infrun.c\cell\row
\cell target_last_waitstatus\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_scheduler_lock_ptid()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct ptid get_scheduler_lock_ptid ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Refs Var:\cell scheduler_lock_ptid\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function handle_inferior_event()\par}
{\s5\f1\fs20\ql\sb50\sa50 void handle_inferior_event ( struct execution_control_state* ecs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell add_thread()\cell thread.c\cell\row
\cell adjust_pc_after_break()\cell infrun.c\cell\row
\cell async_disable_stdin()\cell event-top.c\cell\row
\cell at_inlined_call_site_p()\cell inlining.c\cell\row
\cell bpstat_clear()\cell breakpoint.c\cell\row
\cell bpstat_copy()\cell breakpoint.c\cell\row
\cell bpstat_find_step_resume_breakpoint()\cell breakpoint.c\cell\row
\cell bpstat_get_triggered_catchpoints()\cell breakpoint.c\cell\row
\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell bpstat_what_to_do()\cell breakpoint.c\cell\row
\cell breakpoint_here_p()\cell breakpoint.c\cell\row
\cell breakpoint_thread_match()\cell breakpoint.c\cell\row
\cell context_switch()\cell infrun.c\cell\row
\cell current_inlined_subroutine_call_stack_start_pc()\cell inlining.c\cell\row
\cell currently_stepping()\cell infrun.c\cell\row
\cell delete_step_resume_breakpoint()\cell thread.c\cell\row
\cell disable_longjmp_breakpoint()\cell breakpoint.c\cell\row
\cell find_finish_breakpoint()\cell breakpoint.c\cell\row
\cell find_pc_line()\cell symtab.c\cell\row
\cell find_pc_overlay()\cell symfile.c\cell\row
\cell find_pc_partial_function()\cell blockframe.c\cell\row
\cell flush_cached_frames()\cell frame.c\cell\row
\cell follow_exec()\cell infrun.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell frame_id_eq()\cell frame.c\cell\row
\cell frame_id_inner()\cell frame.c\cell\row
\cell frame_unwind_id()\cell frame.c\cell\row
\cell gdb_flush()\cell ui-file.c\cell\row
\cell gdbarch_deprecated_function_start_offset()\cell gdbarch.c\cell\row
\cell gdbarch_get_longjmp_target()\cell gdbarch.c\cell\row
\cell gdbarch_get_longjmp_target_p()\cell gdbarch.c\cell\row
\cell gdbarch_have_nonsteppable_watchpoint()\cell gdbarch.c\cell\row
\cell gdbarch_in_solib_return_trampoline()\cell gdbarch.c\cell\row
\cell gdbarch_single_step_through_delay()\cell gdbarch.c\cell\row
\cell gdbarch_single_step_through_delay_p()\cell gdbarch.c\cell\row
\cell gdbarch_skip_solib_resolver()\cell gdbarch.c\cell\row
\cell gdbarch_skip_trampoline_code()\cell gdbarch.c\cell\row
\cell gdbarch_software_single_step()\cell gdbarch.c\cell\row
\cell gdbarch_software_single_step_p()\cell gdbarch.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell get_frame_type()\cell frame.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
\cell in_prologue()\cell symtab.c\cell\row
\cell in_solib_dynsym_resolve_code()\cell solib.c\cell\row
\cell in_thread_list()\cell thread.c\cell\row
\cell init_sal()\cell symtab.c\cell\row
\cell inlined_function_call_stack_pc()\cell inlining.c\cell\row
\cell inlined_function_update_call_stack()\cell inlining.c\cell\row
\cell insert_breakpoints()\cell breakpoint.c\cell\row
\cell insert_step_resume_breakpoint_at_frame()\cell infrun.c\cell\row
\cell insert_step_resume_breakpoint_at_sal()\cell infrun.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell is_at_stepping_ranges_end()\cell inlining.c\cell\row
\cell is_within_stepping_ranges()\cell inlining.c\cell\row
\cell keep_going()\cell infrun.c\cell\row
\cell length_of_this_instruction()\cell target/target.c\cell\row
\cell lookup_internalvar()\cell value.c\cell\row
\cell paddr()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell pc_set_load_state()\cell objfiles.c\cell\row
\cell pid_to_ptid()\cell infrun.c\cell\row
\cell pid_to_thread_id()\cell thread.c\cell\row
\cell prepare_to_wait()\cell infrun.c\cell\row
\cell print_stop_reason()\cell infrun.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell ptid_equal()\cell infrun.c\cell\row
\cell ptid_get_pid()\cell infrun.c\cell\row
\cell re_enable_breakpoints_in_shlibs()\cell breakpoint.c\cell\row
\cell read_pc()\cell regcache.c\cell\row
\cell read_pc_pid()\cell regcache.c\cell\row
\cell registers_changed()\cell regcache.c\cell\row
\cell remove_breakpoints()\cell breakpoint.c\cell\row
\cell resume()\cell infrun.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell set_breakpoint_sal()\cell breakpoint.c\cell\row
\cell set_internalvar()\cell value.c\cell\row
\cell set_longjmp_resume_breakpoint()\cell breakpoint.c\cell\row
\cell skip_language_trampoline()\cell language.c\cell\row
\cell step_into_function()\cell infrun.c\cell\row
\cell stop_stepping()\cell infrun.c\cell\row
\cell ui_out_is_mi_like_p()\cell ui-out.c\cell\row
\cell ui_out_text()\cell ui-out.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell write_pc_pid()\cell regcache.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin___snprintf_chk(), __builtin_object_size(), __inline_memset_chk(), dcache_invalidate(), deprecated_context_hook(), exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), macosx_pid_or_tid_to_str(), macosx_print_extra_stop_info(), macosx_solib_add(), sigsetjmp(), state_change_hook(), strlen(), xstrdup()\cell\cell\row
Called by:\cell fetch_inferior_event()\cell infrun.c\cell\row
\cell wait_for_inferior()\cell infrun.c\cell\row
Refs Var:\cell auto_solib_add\cell symfile.c\cell\row
\cell breakpoints_failed\cell infrun.c\cell\row
\cell breakpoints_inserted\cell infrun.c\cell\row
\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell debug_infrun\cell infrun.c\cell\row
\cell deprecated_context_hook\cell top.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell inferior_ignoring_leading_exec_events\cell infrun.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell minus_one_ptid\cell infrun.c\cell\row
\cell null_frame_id\cell frame.c\cell\row
\cell pending_follow\cell infrun.c\cell\row
\cell prev_pc\cell infrun.c\cell\row
\cell saved_singlestep_ptid\cell infrun.c\cell\row
\cell schedlock_on\cell infrun.c\cell\row
\cell scheduler_mode\cell infrun.c\cell\row
\cell signal_print\cell infrun.c\cell\row
\cell signal_program\cell infrun.c\cell\row
\cell signal_stop\cell infrun.c\cell\row
\cell singlestep_breakpoints_inserted_p\cell infrun.c\cell\row
\cell singlestep_ptid\cell infrun.c\cell\row
\cell solib_finish_bp\cell infrun.c\cell\row
\cell solib_step_bp\cell infrun.c\cell\row
\cell state_change_hook\cell top.c\cell\row
\cell step_frame_id\cell infcmd.c\cell\row
\cell step_over_calls\cell infcmd.c\cell\row
\cell step_range_end\cell infcmd.c\cell\row
\cell step_range_start\cell infcmd.c\cell\row
\cell step_resume_breakpoint\cell infrun.c\cell\row
\cell step_stop_if_no_debug\cell infrun.c\cell\row
\cell stepped_after_stopped_by_watchpoint\cell infrun.c\cell\row
\cell stepping_over_inlined_subroutine\cell infcmd.c\cell\row
\cell stepping_past_singlestep_breakpoint\cell infrun.c\cell\row
\cell stepping_ranges\cell infcmd.c\cell\row
\cell stop_after_trap\cell infrun.c\cell\row
\cell stop_bpstat\cell infcmd.c\cell\row
\cell stop_on_solib_events\cell infrun.c\cell\row
\cell stop_pc\cell infcmd.c\cell\row
\cell stop_print_frame\cell infrun.c\cell\row
\cell stop_signal\cell infcmd.c\cell\row
\cell stop_soon\cell infrun.c\cell\row
\cell stop_stack_dummy\cell infcmd.c\cell\row
\cell stop_step\cell infcmd.c\cell\row
\cell stopped_by_random_signal\cell infcmd.c\cell\row
\cell sync_execution\cell infrun.c\cell\row
\cell target_dcache\cell target/target.c\cell\row
\cell target_last_wait_ptid\cell infrun.c\cell\row
\cell target_last_waitstatus\cell infrun.c\cell\row
\cell trap_expected\cell infrun.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function hide_step_resume_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct breakpoint* hide_step_resume_breakpoint ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Called by:\cell do_end_debugger_mode()\cell objc-lang.c\cell\row
Refs Var:\cell step_resume_breakpoint\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function inferior_has_execd()\par}
{\s5\f1\fs20\ql\sb50\sa50 int inferior_has_execd ( int pid, char** execd_pathname )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell get_last_target_status()\cell infrun.c\cell\row
\cell ptid_get_pid()\cell infrun.c\cell\row
\cell  xstrdup()\cell\cell\row
Called by:\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function inferior_has_forked()\par}
{\s5\f1\fs20\ql\sb50\sa50 int inferior_has_forked ( int pid, int* child_pid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell get_last_target_status()\cell infrun.c\cell\row
\cell ptid_get_pid()\cell infrun.c\cell\row
Called by:\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function inferior_has_vforked()\par}
{\s5\f1\fs20\ql\sb50\sa50 int inferior_has_vforked ( int pid, int* child_pid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell get_last_target_status()\cell infrun.c\cell\row
\cell ptid_get_pid()\cell infrun.c\cell\row
Called by:\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function init_execution_control_state()\par}
{\s5\f1\fs20\ql\sb50\sa50 void init_execution_control_state ( struct execution_control_state* ecs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell find_pc_line()\cell symtab.c\cell\row
\cell pid_to_ptid()\cell infrun.c\cell\row
Called by:\cell fetch_inferior_event()\cell infrun.c\cell\row
\cell wait_for_inferior()\cell infrun.c\cell\row
Refs Var:\cell prev_pc\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function init_wait_for_inferior()\par}
{\s5\f1\fs20\ql\sb50\sa50 void init_wait_for_inferior ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell breakpoint_init_inferior()\cell breakpoint.c\cell\row
\cell clear_proceed_status()\cell infrun.c\cell\row
Called by:\cell attach_command()\cell infcmd.c\cell\row
\cell kill_if_already_running()\cell infcmd.c\cell\row
\cell start_remote()\cell infrun.c\cell\row
Refs Var:\cell breakpoints_inserted\cell infrun.c\cell\row
\cell minus_one_ptid\cell infrun.c\cell\row
\cell pending_follow\cell infrun.c\cell\row
\cell prev_pc\cell infrun.c\cell\row
\cell scheduler_lock_ptid\cell infrun.c\cell\row
\cell stepping_past_singlestep_breakpoint\cell infrun.c\cell\row
\cell stop_signal\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function insert_step_resume_breakpoint_at_sal()\par}
{\s5\f1\fs20\ql\sb50\sa50 void insert_step_resume_breakpoint_at_sal ( struct symtab_and_line sr_sal, struct frame_id sr_id )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell adjust_current_inlined_subroutine_stack_position()\cell inlining.c\cell\row
\cell inlined_function_end_of_inlined_code_p()\cell inlining.c\cell\row
\cell insert_breakpoints()\cell breakpoint.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell set_momentary_breakpoint()\cell breakpoint.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
\cell insert_step_resume_breakpoint_at_frame()\cell infrun.c\cell\row
\cell step_into_function()\cell infrun.c\cell\row
Refs Var:\cell breakpoints_inserted\cell infrun.c\cell\row
\cell step_resume_breakpoint\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function make_cleanup_restore_inferior_status()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct cleanup* make_cleanup_restore_inferior_status ( struct inferior_status* inf_status )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell make_cleanup()\cell utils.c\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
Refs Func:\cell do_restore_inferior_status_cleanup()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function make_cleanup_suppress_hook_stop()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct cleanup* make_cleanup_suppress_hook_stop ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell make_cleanup()\cell utils.c\cell\row
Called by:\cell parse_exp_in_context()\cell parse.c\cell\row
Refs Func:\cell do_cleanup_suppress_hook_stop()\cell infrun.c\cell\row
Refs Var:\cell suppress_hook_stop_p\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function normal_stop()\par}
{\s5\f1\fs20\ql\sb50\sa50 void normal_stop ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell bpstat_num()\cell breakpoint.c\cell\row
\cell bpstat_print()\cell breakpoint.c\cell\row
\cell breakpoint_auto_delete()\cell breakpoint.c\cell\row
\cell clear_inlined_subroutine_print_frames()\cell inlining.c\cell\row
\cell current_inlined_subroutine_call_stack_start_pc()\cell inlining.c\cell\row
\cell deprecated_update_frame_pc_hack()\cell frame.c\cell\row
\cell disable_current_display()\cell printcmd.c\cell\row
\cell do_displays()\cell printcmd.c\cell\row
\cell find_pc_function()\cell blockframe.c\cell\row
\cell find_pc_function_no_inlined()\cell blockframe.c\cell\row
\cell frame_id_eq()\cell frame.c\cell\row
\cell frame_pop()\cell frame.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell get_frame_type()\cell frame.c\cell\row
\cell get_last_target_status()\cell infrun.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell inlined_function_call_stack_pc()\cell inlining.c\cell\row
\cell inlined_function_update_call_stack()\cell inlining.c\cell\row
\cell inlined_subroutine_restore_after_dummy_call()\cell inlining.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell observer_notify_normal_stop()\cell observer.c\cell\row
\cell pid_to_thread_id()\cell thread.c\cell\row
\cell print_stack_frame()\cell stack.c\cell\row
\cell print_stop_reason()\cell infrun.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell ptid_equal()\cell infrun.c\cell\row
\cell ptid_get_pid()\cell infrun.c\cell\row
\cell read_pc()\cell regcache.c\cell\row
\cell regcache_cpy()\cell regcache.c\cell\row
\cell remove_breakpoints()\cell breakpoint.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell ui_out_is_mi_like_p()\cell ui-out.c\cell\row
\cell ui_out_print_annotation_int()\cell ui-out.c\cell\row
\cell ui_out_print_annotation_string()\cell ui-out.c\cell\row
\cell  annotate_stopped(), catch_errors(), macosx_pid_or_tid_to_str(), maybe_create_checkpoint(), stack_changed_hook(), state_change_hook(), strncmp()\cell\cell\row
Called by:\cell attach_command()\cell infcmd.c\cell\row
\cell fetch_inferior_event()\cell infrun.c\cell\row
\cell proceed()\cell infrun.c\cell\row
\cell resume_cleanups()\cell infrun.c\cell\row
\cell rollback_stop()\cell infrun.c\cell\row
\cell start_remote()\cell infrun.c\cell\row
Refs Func:\cell hook_stop_stub()\cell infrun.c\cell\row
Refs Var:\cell breakpoints_inserted\cell infrun.c\cell\row
\cell current_regcache\cell regcache.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell currently_inside_optimized_code\cell infrun.c\cell\row
\cell deprecated_selected_frame\cell frame.c\cell\row
\cell dwarf2_inform_debugging_optimized_code\cell dwarf2read.c\cell\row
\cell finishing_inlined_subroutine\cell infcmd.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell interpreter_p\cell main.c\cell\row
\cell previous_inferior_ptid\cell infrun.c\cell\row
\cell proceed_to_finish\cell infrun.c\cell\row
\cell solib_finish_bp\cell infrun.c\cell\row
\cell solib_step_bp\cell infrun.c\cell\row
\cell stack_changed_hook\cell top.c\cell\row
\cell state_change_hook\cell top.c\cell\row
\cell step_frame_id\cell infcmd.c\cell\row
\cell step_multi\cell infcmd.c\cell\row
\cell step_start_function\cell infrun.c\cell\row
\cell stop_bpstat\cell infcmd.c\cell\row
\cell stop_command\cell infrun.c\cell\row
\cell stop_on_solib_events\cell infrun.c\cell\row
\cell stop_pc\cell infcmd.c\cell\row
\cell stop_print_frame\cell infrun.c\cell\row
\cell stop_registers\cell infrun.c\cell\row
\cell stop_stack_dummy\cell infcmd.c\cell\row
\cell stop_step\cell infcmd.c\cell\row
\cell stopped_by_random_signal\cell infcmd.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\cell  auto_checkpointing\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function pid_to_ptid()\par}
{\s5\f1\fs20\ql\sb50\sa50 ptid_t pid_to_ptid ( int pid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell ptid_build()\cell infrun.c\cell\row
Called by:\cell _initialize_regcache()\cell regcache.c\cell\row
\cell detach_breakpoints()\cell breakpoint.c\cell\row
\cell follow_exec()\cell infrun.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell init_execution_control_state()\cell infrun.c\cell\row
\cell prepare_to_wait()\cell infrun.c\cell\row
\cell reattach_breakpoints()\cell breakpoint.c\cell\row
\cell registers_changed()\cell regcache.c\cell\row
\cell remote_current_thread()\cell remote.c\cell\row
\cell resume()\cell infrun.c\cell\row
\cell thread_alive()\cell thread.c\cell\row
\cell thread_id_to_pid()\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function proceed()\par}
{\s5\f1\fs20\ql\sb50\sa50 void proceed ( CORE_ADDR addr, enum target_signal siggnal, int step )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell bpstat_should_step()\cell breakpoint.c\cell\row
\cell breakpoint_here_p()\cell breakpoint.c\cell\row
\cell do_hand_call_cleanups()\cell utils.c\cell\row
\cell find_pc_function()\cell blockframe.c\cell\row
\cell find_pc_partial_function_no_inlined()\cell blockframe.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell gdb_flush()\cell ui-file.c\cell\row
\cell gdbarch_single_step_through_delay()\cell gdbarch.c\cell\row
\cell gdbarch_single_step_through_delay_p()\cell gdbarch.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell insert_breakpoints()\cell breakpoint.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell prepare_to_proceed()\cell infrun.c\cell\row
\cell read_pc()\cell regcache.c\cell\row
\cell resume()\cell infrun.c\cell\row
\cell wait_for_inferior()\cell infrun.c\cell\row
\cell write_pc()\cell regcache.c\cell\row
\cell  annotate_starting()\cell\cell\row
Called by:\cell continue_command()\cell infcmd.c\cell\row
\cell extended_remote_async_create_inferior()\cell remote.c\cell\row
\cell extended_remote_create_inferior()\cell remote.c\cell\row
\cell finish_command()\cell infcmd.c\cell\row
\cell finish_inlined_subroutine_command()\cell infcmd.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell jump_command()\cell infcmd.c\cell\row
\cell re_exec_1()\cell infcmd.c\cell\row
\cell re_exec_once()\cell infcmd.c\cell\row
\cell signal_command()\cell infcmd.c\cell\row
\cell step_1_inlining()\cell infcmd.c\cell\row
\cell step_1_no_inlining()\cell infcmd.c\cell\row
\cell step_once()\cell infcmd.c\cell\row
\cell until_break_command()\cell breakpoint.c\cell\row
\cell until_next_command()\cell infcmd.c\cell\row
Refs Var:\cell breakpoints_inserted\cell infrun.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell debug_infrun\cell infrun.c\cell\row
\cell gdb_override_async\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell prev_pc\cell infrun.c\cell\row
\cell proceed_from_hand_call\cell infrun.c\cell\row
\cell signal_program\cell infrun.c\cell\row
\cell step_start_function\cell infrun.c\cell\row
\cell stop_after_trap\cell infrun.c\cell\row
\cell stop_pc\cell infcmd.c\cell\row
\cell stop_signal\cell infcmd.c\cell\row
\cell target_executing\cell top.c\cell\row
\cell trap_expected\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ptid_build()\par}
{\s5\f1\fs20\ql\sb50\sa50 ptid_t ptid_build ( int pid, long lwp, long tid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Called by:\cell _initialize_infrun()\cell infrun.c\cell\row
\cell pid_to_ptid()\cell infrun.c\cell\row
\cell record_currthread()\cell remote.c\cell\row
\cell remote_async_wait()\cell remote.c\cell\row
\cell remote_newthread_step()\cell remote.c\cell\row
\cell remote_open_1()\cell remote.c\cell\row
\cell remote_threads_info()\cell remote.c\cell\row
\cell remote_wait()\cell remote.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ptid_equal()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ptid_equal ( ptid_t ptid1, ptid_t ptid2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Called by:\cell delete_thread()\cell thread.c\cell\row
\cell dummy_frame_push()\cell dummy-frame.c\cell\row
\cell find_thread_pid()\cell thread.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell in_thread_list()\cell thread.c\cell\row
\cell info_threads_command()\cell thread.c\cell\row
\cell kill_command()\cell inflow.c\cell\row
\cell kill_if_already_running()\cell infcmd.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell nosupport_runtime()\cell target/target.c\cell\row
\cell pid_to_thread_id()\cell thread.c\cell\row
\cell prepare_to_proceed()\cell infrun.c\cell\row
\cell quit_confirm()\cell top.c\cell\row
\cell quit_target()\cell top.c\cell\row
\cell read_register_pid()\cell regcache.c\cell\row
\cell regcache_raw_read()\cell regcache.c\cell\row
\cell regcache_raw_supply()\cell regcache.c\cell\row
\cell regcache_raw_write()\cell regcache.c\cell\row
\cell remote_macosx_open()\cell remote.c\cell\row
\cell remote_open_1()\cell remote.c\cell\row
\cell remote_start_remote()\cell remote.c\cell\row
\cell restore_current_thread()\cell thread.c\cell\row
\cell resume()\cell infrun.c\cell\row
\cell run_command_1()\cell infcmd.c\cell\row
\cell switch_to_thread()\cell thread.c\cell\row
\cell write_register_pid()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ptid_get_lwp()\par}
{\s5\f1\fs20\ql\sb50\sa50 long ptid_get_lwp ( ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ptid_get_pid()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ptid_get_pid ( ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Called by:\cell attach_command()\cell infcmd.c\cell\row
\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell debug_to_notice_signals()\cell target/target.c\cell\row
\cell debug_to_pid_to_str()\cell target/target.c\cell\row
\cell debug_to_post_startup_inferior()\cell target/target.c\cell\row
\cell debug_to_resume()\cell target/target.c\cell\row
\cell debug_to_thread_alive()\cell target/target.c\cell\row
\cell debug_to_wait()\cell target/target.c\cell\row
\cell detach_breakpoints()\cell breakpoint.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell handle_sigio()\cell inflow.c\cell\row
\cell inferior_has_execd()\cell infrun.c\cell\row
\cell inferior_has_forked()\cell infrun.c\cell\row
\cell inferior_has_vforked()\cell infrun.c\cell\row
\cell insert_catchpoint()\cell breakpoint.c\cell\row
\cell lookup_child_selector()\cell objc-lang.c\cell\row
\cell normal_pid_to_str()\cell target/target.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell pass_signal()\cell inflow.c\cell\row
\cell pid_info()\cell infcmd.c\cell\row
\cell reinit_frame_cache()\cell frame.c\cell\row
\cell remote_fetch_registers()\cell remote.c\cell\row
\cell remote_find_new_threads()\cell remote.c\cell\row
\cell remote_get_thread_local_address()\cell remote.c\cell\row
\cell remote_pid_to_str()\cell remote.c\cell\row
\cell remote_resume()\cell remote.c\cell\row
\cell remote_store_registers()\cell remote.c\cell\row
\cell remote_thread_alive()\cell remote.c\cell\row
\cell remote_threads_extra_info()\cell remote.c\cell\row
\cell remote_vcont_resume()\cell remote.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\cell terminal_init_inferior()\cell inflow.c\cell\row
\cell thread_alive()\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ptid_get_tid()\par}
{\s5\f1\fs20\ql\sb50\sa50 long ptid_get_tid ( ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function restore_inferior_status()\par}
{\s5\f1\fs20\ql\sb50\sa50 void restore_inferior_status ( struct inferior_status* inf_status )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell bpstat_clear()\cell breakpoint.c\cell\row
\cell flush_inlined_subroutine_frames()\cell inlining.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell inlined_subroutine_restore_after_dummy_call()\cell inlining.c\cell\row
\cell regcache_cpy()\cell regcache.c\cell\row
\cell regcache_xfree()\cell regcache.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  catch_errors()\cell\cell\row
Called by:\cell do_restore_inferior_status_cleanup()\cell infrun.c\cell\row
Refs Func:\cell restore_selected_frame()\cell infrun.c\cell\row
Refs Var:\cell breakpoint_proceeded\cell infcmd.c\cell\row
\cell current_regcache\cell regcache.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell proceed_to_finish\cell infrun.c\cell\row
\cell step_frame_id\cell infcmd.c\cell\row
\cell step_over_calls\cell infcmd.c\cell\row
\cell step_range_end\cell infcmd.c\cell\row
\cell step_range_start\cell infcmd.c\cell\row
\cell stepping_ranges\cell infcmd.c\cell\row
\cell stop_after_trap\cell infrun.c\cell\row
\cell stop_bpstat\cell infcmd.c\cell\row
\cell stop_pc\cell infcmd.c\cell\row
\cell stop_registers\cell infrun.c\cell\row
\cell stop_signal\cell infcmd.c\cell\row
\cell stop_soon\cell infrun.c\cell\row
\cell stop_stack_dummy\cell infcmd.c\cell\row
\cell stop_step\cell infcmd.c\cell\row
\cell stopped_by_random_signal\cell infcmd.c\cell\row
\cell trap_expected\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function restore_step_resume_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void restore_step_resume_breakpoint ( struct breakpoint* bp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell do_end_debugger_mode()\cell objc-lang.c\cell\row
Refs Var:\cell step_resume_breakpoint\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function resume()\par}
{\s5\f1\fs20\ql\sb50\sa50 void resume ( int step, enum target_signal sig )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell breakpoint_here_p()\cell breakpoint.c\cell\row
\cell discard_cleanups()\cell utils.c\cell\row
\cell follow_fork()\cell infrun.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell gdbarch_cannot_step_breakpoint()\cell gdbarch.c\cell\row
\cell gdbarch_software_single_step()\cell gdbarch.c\cell\row
\cell gdbarch_software_single_step_p()\cell gdbarch.c\cell\row
\cell in_thread_list()\cell thread.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell pid_to_ptid()\cell infrun.c\cell\row
\cell ptid_equal()\cell infrun.c\cell\row
\cell quit()\cell utils.c\cell\row
\cell read_pc()\cell regcache.c\cell\row
\cell remove_hw_watchpoints()\cell breakpoint.c\cell\row
\cell scheduler_run_this_ptid()\cell infrun.c\cell\row
\cell  dcache_invalidate()\cell\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
\cell keep_going()\cell infrun.c\cell\row
\cell proceed()\cell infrun.c\cell\row
Refs Func:\cell default_skip_permanent_breakpoint()\cell infrun.c\cell\row
\cell resume_cleanups()\cell infrun.c\cell\row
Refs Var:\cell breakpoints_inserted\cell infrun.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell debug_infrun\cell infrun.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell minus_one_ptid\cell infrun.c\cell\row
\cell pending_follow\cell infrun.c\cell\row
\cell quit_flag\cell utils.c\cell\row
\cell schedlock_on\cell infrun.c\cell\row
\cell schedlock_step\cell infrun.c\cell\row
\cell scheduler_lock_ptid\cell infrun.c\cell\row
\cell scheduler_mode\cell infrun.c\cell\row
\cell singlestep_breakpoints_inserted_p\cell infrun.c\cell\row
\cell singlestep_ptid\cell infrun.c\cell\row
\cell stepping_past_singlestep_breakpoint\cell infrun.c\cell\row
\cell target_dcache\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function rollback_stop()\par}
{\s5\f1\fs20\ql\sb50\sa50 void rollback_stop ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell normal_stop()\cell infrun.c\cell\row
Refs Var:\cell stop_print_frame\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function save_inferior_ptid()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct cleanup* save_inferior_ptid ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell make_cleanup()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell detach_breakpoints()\cell breakpoint.c\cell\row
\cell reattach_breakpoints()\cell breakpoint.c\cell\row
Refs Func:\cell restore_inferior_ptid()\cell infrun.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function save_inferior_status()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct inferior_status* save_inferior_status ( int restore_stack_info )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell bpstat_copy()\cell breakpoint.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell inlined_subroutine_save_before_dummy_call()\cell inlining.c\cell\row
\cell regcache_dup()\cell regcache.c\cell\row
\cell regcache_dup_no_passthrough()\cell regcache.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell breakpoint_proceeded\cell infcmd.c\cell\row
\cell current_regcache\cell regcache.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell proceed_to_finish\cell infrun.c\cell\row
\cell step_frame_id\cell infcmd.c\cell\row
\cell step_over_calls\cell infcmd.c\cell\row
\cell step_range_end\cell infcmd.c\cell\row
\cell step_range_start\cell infcmd.c\cell\row
\cell stepping_ranges\cell infcmd.c\cell\row
\cell stop_after_trap\cell infrun.c\cell\row
\cell stop_bpstat\cell infcmd.c\cell\row
\cell stop_pc\cell infcmd.c\cell\row
\cell stop_registers\cell infrun.c\cell\row
\cell stop_signal\cell infcmd.c\cell\row
\cell stop_soon\cell infrun.c\cell\row
\cell stop_stack_dummy\cell infcmd.c\cell\row
\cell stop_step\cell infcmd.c\cell\row
\cell stopped_by_random_signal\cell infcmd.c\cell\row
\cell trap_expected\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function scheduler_lock_on_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int scheduler_lock_on_p ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Called by:\cell check_safe_call()\cell valops.c\cell\row
\cell objc_setup_safe_print()\cell objc-lang.c\cell\row
\cell print_object_command()\cell objc-lang.c\cell\row
\cell switch_to_thread()\cell thread.c\cell\row
Refs Var:\cell schedlock_on\cell infrun.c\cell\row
\cell schedlock_step\cell infrun.c\cell\row
\cell scheduler_mode\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function scheduler_run_this_ptid()\par}
{\s5\f1\fs20\ql\sb50\sa50 void scheduler_run_this_ptid ( struct ptid this_ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Called by:\cell _initialize_infrun()\cell infrun.c\cell\row
\cell resume()\cell infrun.c\cell\row
\cell set_schedlock_helper()\cell infrun.c\cell\row
\cell switch_to_thread()\cell thread.c\cell\row
Refs Var:\cell scheduler_lock_ptid\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_scheduler_locking_mode()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum scheduler_locking_mode set_scheduler_locking_mode ( enum scheduler_locking_mode new_mode )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell set_schedlock_helper()\cell infrun.c\cell\row
Called by:\cell do_set_schedlock_mode()\cell utils.c\cell\row
\cell make_cleanup_set_restore_scheduler_locking_mode()\cell utils.c\cell\row
Refs Var:\cell debug_handcall_setup\cell infrun.c\cell\row
\cell schedlock_off\cell infrun.c\cell\row
\cell schedlock_on\cell infrun.c\cell\row
\cell schedlock_step\cell infrun.c\cell\row
\cell scheduler_mode\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function signal_pass_state()\par}
{\s5\f1\fs20\ql\sb50\sa50 int signal_pass_state ( int signo )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Refs Var:\cell signal_program\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function signal_pass_update()\par}
{\s5\f1\fs20\ql\sb50\sa50 int signal_pass_update ( int signo, int state )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Refs Var:\cell signal_program\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function signal_print_state()\par}
{\s5\f1\fs20\ql\sb50\sa50 int signal_print_state ( int signo )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Refs Var:\cell signal_print\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function signal_print_update()\par}
{\s5\f1\fs20\ql\sb50\sa50 int signal_print_update ( int signo, int state )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Refs Var:\cell signal_print\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function signal_stop_state()\par}
{\s5\f1\fs20\ql\sb50\sa50 int signal_stop_state ( int signo )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Refs Var:\cell signal_stop\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function signal_stop_update()\par}
{\s5\f1\fs20\ql\sb50\sa50 int signal_stop_update ( int signo, int state )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Refs Var:\cell signal_stop\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function start_remote()\par}
{\s5\f1\fs20\ql\sb50\sa50 void start_remote ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell init_thread_list()\cell thread.c\cell\row
\cell init_wait_for_inferior()\cell infrun.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell wait_for_inferior()\cell infrun.c\cell\row
Called by:\cell remote_start_remote_dummy()\cell remote.c\cell\row
Refs Var:\cell stop_soon\cell infrun.c\cell\row
\cell trap_expected\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function wait_for_inferior()\par}
{\s5\f1\fs20\ql\sb50\sa50 void wait_for_inferior ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell init_execution_control_state()\cell infrun.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell registers_changed()\cell regcache.c\cell\row
\cell  deprecated_target_wait_hook()\cell\cell\row
Called by:\cell proceed()\cell infrun.c\cell\row
\cell start_remote()\cell infrun.c\cell\row
Refs Func:\cell delete_step_resume_breakpoint()\cell thread.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell debug_infrun\cell infrun.c\cell\row
\cell deprecated_target_wait_hook\cell top.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell overlay_cache_invalid\cell symfile.c\cell\row
\cell previous_inferior_ptid\cell infrun.c\cell\row
\cell step_resume_breakpoint\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_inferior_status_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_inferior_status_register ( struct inferior_status* inf_status, int regno, long val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell regcache_raw_write()\cell regcache.c\cell\row
\cell register_size()\cell regcache.c\cell\row
\cell store_signed_integer()\cell findvar.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function adjust_pc_after_break()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void adjust_pc_after_break ( struct execution_control_state* ecs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell currently_stepping()\cell infrun.c\cell\row
\cell gdbarch_decr_pc_after_break()\cell gdbarch.c\cell\row
\cell gdbarch_software_single_step_p()\cell gdbarch.c\cell\row
\cell read_pc_pid()\cell regcache.c\cell\row
\cell software_breakpoint_inserted_here_p()\cell breakpoint.c\cell\row
\cell write_pc_pid()\cell regcache.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell prev_pc\cell infrun.c\cell\row
\cell singlestep_breakpoints_inserted_p\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function allocate_signal_set()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int allocate_signal_set ( unsigned char** stop, unsigned char** print, unsigned char** program )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell _initialize_infrun()\cell infrun.c\cell\row
Refs Var:\cell signal_print\cell infrun.c\cell\row
\cell signal_program\cell infrun.c\cell\row
\cell signal_stop\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function build_infrun()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void build_infrun ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell regcache_xmalloc()\cell regcache.c\cell\row
Used in:\cell _initialize_infrun()\cell infrun.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell stop_registers\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function context_switch()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void context_switch ( struct execution_control_state* ecs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell in_thread_list()\cell thread.c\cell\row
\cell load_infrun_state()\cell thread.c\cell\row
\cell save_infrun_state()\cell thread.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\cell prev_pc\cell infrun.c\cell\row
\cell step_frame_id\cell infcmd.c\cell\row
\cell step_range_end\cell infcmd.c\cell\row
\cell step_range_start\cell infcmd.c\cell\row
\cell step_resume_breakpoint\cell infrun.c\cell\row
\cell stepping_ranges\cell infcmd.c\cell\row
\cell trap_expected\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function currently_stepping()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int currently_stepping ( struct execution_control_state* ecs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell bpstat_should_step()\cell breakpoint.c\cell\row
Called by:\cell adjust_pc_after_break()\cell infrun.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell keep_going()\cell infrun.c\cell\row
Refs Var:\cell step_range_end\cell infcmd.c\cell\row
\cell step_resume_breakpoint\cell infrun.c\cell\row
\cell trap_expected\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function default_skip_permanent_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void default_skip_permanent_breakpoint ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
Used in:\cell resume()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_cleanup_suppress_hook_stop()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_cleanup_suppress_hook_stop ( void* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell make_cleanup_suppress_hook_stop()\cell infrun.c\cell\row
Refs Var:\cell suppress_hook_stop_p\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_restore_inferior_status_cleanup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_restore_inferior_status_cleanup ( void* sts )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell restore_inferior_status()\cell infrun.c\cell\row
Used in:\cell make_cleanup_restore_inferior_status()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function follow_exec()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void follow_exec ( int pid, char* execd_pathname )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
\cell find_run_target()\cell target/target.c\cell\row
\cell gdb_flush()\cell ui-file.c\cell\row
\cell insert_breakpoints()\cell breakpoint.c\cell\row
\cell pid_to_ptid()\cell infrun.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell push_target()\cell target/target.c\cell\row
\cell solib_create_inferior_hook()\cell solib.c\cell\row
\cell symbol_file_add_main()\cell symfile.c\cell\row
\cell update_breakpoints_after_exec()\cell breakpoint.c\cell\row
\cell  exec_file_attach()\cell\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell finishing_inlined_subroutine\cell infcmd.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell may_follow_exec\cell infrun.c\cell\row
\cell step_range_end\cell infcmd.c\cell\row
\cell step_range_start\cell infcmd.c\cell\row
\cell step_resume_breakpoint\cell infrun.c\cell\row
\cell stepping_over_inlined_subroutine\cell infcmd.c\cell\row
\cell stepping_ranges\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function follow_fork()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int follow_fork ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Called by:\cell resume()\cell infrun.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell follow_fork_mode_child\cell infrun.c\cell\row
\cell follow_fork_mode_string\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function handle_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void handle_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gdb_flush()\cell ui-file.c\cell\row
\cell make_cleanup_freeargv()\cell utils.c\cell\row
\cell nomem()\cell utils.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell query()\cell utils.c\cell\row
\cell sig_print_header()\cell infrun.c\cell\row
\cell sig_print_info()\cell infrun.c\cell\row
\cell  __builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memset_chk(), atoi(), buildargv(), error_no_arg(), isdigit(), strlen(), strncmp(), target_signal_from_command(), target_signal_from_name(), target_signal_to_name()\cell\cell\row
Called by:\cell xdb_handle_command()\cell infrun.c\cell\row
Used in:\cell _initialize_infrun()\cell infrun.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell signal_print\cell infrun.c\cell\row
\cell signal_program\cell infrun.c\cell\row
\cell signal_stop\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function hook_stop_stub()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int hook_stop_stub ( void* cmd )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell  execute_cmd_pre_hook()\cell\cell\row
Used in:\cell normal_stop()\cell infrun.c\cell\row
Refs Var:\cell suppress_hook_stop_p\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function insert_step_resume_breakpoint_at_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void insert_step_resume_breakpoint_at_frame ( struct frame_info* return_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell find_pc_overlay()\cell symfile.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell gdbarch_addr_bits_remove()\cell gdbarch.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell get_frame_pc()\cell frame.c\cell\row
\cell init_sal()\cell symtab.c\cell\row
\cell insert_step_resume_breakpoint_at_sal()\cell infrun.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell debug_infrun\cell infrun.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell step_frame_id\cell infcmd.c\cell\row
\cell stepping_over_inlined_subroutine\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function keep_going()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void keep_going ( struct execution_control_state* ecs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell currently_stepping()\cell infrun.c\cell\row
\cell do_hand_call_cleanups()\cell utils.c\cell\row
\cell insert_breakpoints()\cell breakpoint.c\cell\row
\cell prepare_to_wait()\cell infrun.c\cell\row
\cell read_pc()\cell regcache.c\cell\row
\cell resume()\cell infrun.c\cell\row
\cell stop_stepping()\cell infrun.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
\cell step_into_function()\cell infrun.c\cell\row
Refs Var:\cell breakpoints_failed\cell infrun.c\cell\row
\cell breakpoints_inserted\cell infrun.c\cell\row
\cell prev_pc\cell infrun.c\cell\row
\cell proceed_from_hand_call\cell infrun.c\cell\row
\cell signal_program\cell infrun.c\cell\row
\cell stop_signal\cell infcmd.c\cell\row
\cell trap_expected\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function prepare_to_proceed()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int prepare_to_proceed ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell breakpoint_here_p()\cell breakpoint.c\cell\row
\cell flush_cached_frames()\cell frame.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell get_last_target_status()\cell infrun.c\cell\row
\cell inlined_function_call_stack_pc()\cell inlining.c\cell\row
\cell inlined_function_update_call_stack()\cell inlining.c\cell\row
\cell ptid_equal()\cell infrun.c\cell\row
\cell read_pc()\cell regcache.c\cell\row
\cell read_pc_pid()\cell regcache.c\cell\row
\cell registers_changed()\cell regcache.c\cell\row
\cell select_frame()\cell frame.c\cell\row
Called by:\cell proceed()\cell infrun.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\cell minus_one_ptid\cell infrun.c\cell\row
\cell proceed_from_hand_call\cell infrun.c\cell\row
\cell stop_pc\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function prepare_to_wait()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void prepare_to_wait ( struct execution_control_state* ecs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell pid_to_ptid()\cell infrun.c\cell\row
\cell registers_changed()\cell regcache.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
\cell keep_going()\cell infrun.c\cell\row
Refs Var:\cell debug_infrun\cell infrun.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell overlay_cache_invalid\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_stop_reason()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_stop_reason ( enum inferior_stop_reason stop_reason, int stop_info )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup_ui_out_notify_begin_end()\cell ui-out.c\cell\row
\cell ui_out_field_fmt()\cell ui-out.c\cell\row
\cell ui_out_is_mi_like_p()\cell ui-out.c\cell\row
\cell ui_out_print_annotation_string()\cell ui-out.c\cell\row
\cell ui_out_text()\cell ui-out.c\cell\row
\cell  annotate_exited(), annotate_signal(), annotate_signal_name(), annotate_signal_name_end(), annotate_signal_string(), annotate_signal_string_end(), annotate_signalled(), async_reason_lookup(), target_signal_to_name(), target_signal_to_string()\cell\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell step_into_function()\cell infrun.c\cell\row
Refs Var:\cell finishing_inlined_subroutine\cell infcmd.c\cell\row
\cell signal_stop\cell infrun.c\cell\row
\cell step_multi\cell infcmd.c\cell\row
\cell stop_step\cell infcmd.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function restore_inferior_ptid()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void restore_inferior_ptid ( void* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xfree()\cell utils.c\cell\row
Used in:\cell save_inferior_ptid()\cell infrun.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function restore_selected_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int restore_selected_frame ( void* args )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell frame_find_by_id()\cell frame.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell warning()\cell utils.c\cell\row
Used in:\cell restore_inferior_status()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resume_cleanups()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void resume_cleanups ( void* ignore )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell normal_stop()\cell infrun.c\cell\row
Used in:\cell resume()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_minimal_signal_handling()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_minimal_signal_handling ( const char* args, int from_tty, struct cmd_list_element* c )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell _initialize_infrun()\cell infrun.c\cell\row
Used in:\cell _initialize_infrun()\cell infrun.c\cell\row
Refs Var:\cell full_signal_print\cell infrun.c\cell\row
\cell full_signal_program\cell infrun.c\cell\row
\cell full_signal_stop\cell infrun.c\cell\row
\cell minimal_signal_handling\cell infrun.c\cell\row
\cell minimal_signal_print\cell infrun.c\cell\row
\cell minimal_signal_program\cell infrun.c\cell\row
\cell minimal_signal_stop\cell infrun.c\cell\row
\cell signal_print\cell infrun.c\cell\row
\cell signal_program\cell infrun.c\cell\row
\cell signal_stop\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_schedlock_func()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_schedlock_func ( const char* args, int from_tty, struct cmd_list_element* c )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell set_schedlock_helper()\cell infrun.c\cell\row
Used in:\cell _initialize_infrun()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_schedlock_helper()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_schedlock_helper ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
\cell scheduler_run_this_ptid()\cell infrun.c\cell\row
Called by:\cell set_schedlock_func()\cell infrun.c\cell\row
\cell set_scheduler_locking_mode()\cell infrun.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell minus_one_ptid\cell infrun.c\cell\row
\cell schedlock_off\cell infrun.c\cell\row
\cell schedlock_on\cell infrun.c\cell\row
\cell scheduler_mode\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_debug_infrun()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_debug_infrun ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_infrun()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_follow_fork_mode_string()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_follow_fork_mode_string ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_infrun()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_scheduler_mode()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_scheduler_mode ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_infrun()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_step_stop_if_no_debug()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_step_stop_if_no_debug ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_infrun()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_stop_on_solib_events()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_stop_on_solib_events ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_infrun()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function sig_print_header()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void sig_print_header ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell printf_filtered()\cell utils.c\cell\row
Called by:\cell handle_command()\cell infrun.c\cell\row
\cell signals_info()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function sig_print_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void sig_print_info ( enum target_signal oursig )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell printf_filtered()\cell utils.c\cell\row
\cell  strlen(), target_signal_to_name(), target_signal_to_string()\cell\cell\row
Called by:\cell handle_command()\cell infrun.c\cell\row
\cell signals_info()\cell infrun.c\cell\row
Refs Var:\cell signal_print\cell infrun.c\cell\row
\cell signal_program\cell infrun.c\cell\row
\cell signal_stop\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function signals_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void signals_info ( const char* signum_exp, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell parse_and_eval_long()\cell eval.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell quit()\cell utils.c\cell\row
\cell sig_print_header()\cell infrun.c\cell\row
\cell sig_print_info()\cell infrun.c\cell\row
\cell  target_signal_from_command(), target_signal_from_name()\cell\cell\row
Used in:\cell _initialize_infrun()\cell infrun.c\cell\row
Refs Var:\cell quit_flag\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function step_into_function()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void step_into_function ( struct execution_control_state* ecs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell find_pc_line()\cell symtab.c\cell\row
\cell find_pc_overlay()\cell symfile.c\cell\row
\cell find_pc_symtab()\cell symtab.c\cell\row
\cell gdbarch_adjust_breakpoint_address()\cell gdbarch.c\cell\row
\cell gdbarch_adjust_breakpoint_address_p()\cell gdbarch.c\cell\row
\cell gdbarch_skip_prologue()\cell gdbarch.c\cell\row
\cell init_sal()\cell symtab.c\cell\row
\cell insert_step_resume_breakpoint_at_sal()\cell infrun.c\cell\row
\cell keep_going()\cell infrun.c\cell\row
\cell print_stop_reason()\cell infrun.c\cell\row
\cell skip_language_trampoline()\cell language.c\cell\row
\cell stop_stepping()\cell infrun.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell null_frame_id\cell frame.c\cell\row
\cell step_range_end\cell infcmd.c\cell\row
\cell step_range_start\cell infcmd.c\cell\row
\cell stop_pc\cell infcmd.c\cell\row
\cell stop_step\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function stop_stepping()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void stop_stepping ( struct execution_control_state* ecs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
\cell keep_going()\cell infrun.c\cell\row
\cell step_into_function()\cell infrun.c\cell\row
Refs Var:\cell debug_infrun\cell infrun.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function xdb_handle_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void xdb_handle_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infrun.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell handle_command()\cell infrun.c\cell\row
\cell make_cleanup_freeargv()\cell utils.c\cell\row
\cell nomem()\cell utils.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin___snprintf_chk(), __builtin_object_size(), __inline_memset_chk(), buildargv(), strcmp(), strlen(), target_signal_from_name()\cell\cell\row
Used in:\cell _initialize_infrun()\cell infrun.c\cell\row
Refs Var:\cell signal_print\cell infrun.c\cell\row
\cell signal_program\cell infrun.c\cell\row
\cell signal_stop\cell infrun.c\cell\row
\intbl0
}
