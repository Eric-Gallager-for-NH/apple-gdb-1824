{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF minsyms.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File minsyms.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <ctype.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/demangle.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "cp-abi.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define BUNCH_SIZE 127\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct msym_bunch\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct msym_bunch}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct msym_bunch* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct minimal_symbol contents[127];}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable msym_bunch\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct msym_bunch* msym_bunch\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell do_discard_minimal_symbols_cleanup()\cell\cell\row
\cell init_minimal_symbol_collection()\cell\cell\row
\cell install_minimal_symbols()\cell\cell\row
\cell prim_record_minimal_symbol_and_info()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable msym_bunch_index\par}
{\s5\f1\fs20\ql\sb50\sa50 static int msym_bunch_index\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell init_minimal_symbol_collection()\cell\cell\row
\cell install_minimal_symbols()\cell\cell\row
\cell prim_record_minimal_symbol_and_info()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable bunches_seen\par}
{\s5\f1\fs20\ql\sb50\sa50 static int bunches_seen\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell prim_record_minimal_symbol_and_info()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable msym_count\par}
{\s5\f1\fs20\ql\sb50\sa50 static int msym_count\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell init_minimal_symbol_collection()\cell\cell\row
\cell install_minimal_symbols()\cell\cell\row
\cell prim_record_minimal_symbol_and_info()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function add_minsym_to_hash_table()\par}
{\s5\f1\fs20\ql\sb50\sa50 void add_minsym_to_hash_table ( struct minimal_symbol* sym, struct minimal_symbol** table )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell msymbol_hash()\cell minsyms.c\cell\row
Called by:\cell build_minimal_symbol_hash_tables()\cell minsyms.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_solib_trampoline_target()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR find_solib_trampoline_target ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell lookup_solib_trampoline_symbol_by_pc()\cell minsyms.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell  strcmp()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function init_minimal_symbol_collection()\par}
{\s5\f1\fs20\ql\sb50\sa50 void init_minimal_symbol_collection ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Called by:\cell append_psymbols_as_msymbols()\cell symfile.c\cell\row
\cell coff_symfile_read()\cell coffread.c\cell\row
\cell dbx_symfile_read()\cell dbxread.c\cell\row
\cell elf_symfile_read()\cell elfread.c\cell\row
\cell elfmdebug_build_psymtabs()\cell mdebugread.c\cell\row
\cell mipscoff_symfile_read()\cell mipsread.c\cell\row
\cell nlm_symfile_read()\cell nlmread.c\cell\row
Refs Var:\cell msym_bunch\cell minsyms.c\cell\row
\cell msym_bunch_index\cell minsyms.c\cell\row
\cell msym_count\cell minsyms.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function install_minimal_symbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 void install_minimal_symbols ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell build_minimal_symbol_hash_tables()\cell minsyms.c\cell\row
\cell compact_minimal_symbols()\cell minsyms.c\cell\row
\cell cp_abi_is_auto_p()\cell cp-abi.c\cell\row
\cell equivalence_table_build()\cell symmisc.c\cell\row
\cell set_cp_abi_as_auto_default()\cell cp-abi.c\cell\row
\cell symbol_demangled_name()\cell symtab.c\cell\row
\cell symbol_init_language_specific()\cell symtab.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), _obstack_newchunk(), qsort()\cell\cell\row
Called by:\cell append_psymbols_as_msymbols()\cell symfile.c\cell\row
\cell coff_symfile_read()\cell coffread.c\cell\row
\cell dbx_symfile_read()\cell dbxread.c\cell\row
\cell elf_symfile_read()\cell elfread.c\cell\row
\cell elfmdebug_build_psymtabs()\cell mdebugread.c\cell\row
\cell mipscoff_symfile_read()\cell mipsread.c\cell\row
\cell nlm_symfile_read()\cell nlmread.c\cell\row
Refs Func:\cell compare_minimal_symbols()\cell minsyms.c\cell\row
Refs Var:\cell msym_bunch\cell minsyms.c\cell\row
\cell msym_bunch_index\cell minsyms.c\cell\row
\cell msym_count\cell minsyms.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function lookup_minimal_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct minimal_symbol* lookup_minimal_symbol ( const char* name, const char* sfile, struct objfile* objf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell msymbol_hash()\cell minsyms.c\cell\row
\cell msymbol_hash_iw()\cell minsyms.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell strcmp_iw()\cell utils.c\cell\row
\cell symbol_demangled_name()\cell symtab.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  strcmp(), strrchr()\cell\cell\row
Called by:\cell ada_main_name()\cell ada-lang.c\cell\row
\cell ada_update_initial_language()\cell ada-lang.c\cell\row
\cell add_kext_command()\cell symfile.c\cell\row
\cell addr_inside_main_func()\cell blockframe.c\cell\row
\cell address_info()\cell printcmd.c\cell\row
\cell c_parse()\cell c-exp.c\cell\row
\cell convert_oso_map_to_final_map()\cell dwarf2read.c\cell\row
\cell create_kext_addr_map()\cell dwarf2read.c\cell\row
\cell create_objc_hook_breakpoint()\cell breakpoint.c\cell\row
\cell decode_dollar()\cell linespec.c\cell\row
\cell decode_variable()\cell linespec.c\cell\row
\cell end_psymtab()\cell dbxread.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell find_function_in_inferior()\cell valops.c\cell\row
\cell find_imps()\cell objc-lang.c\cell\row
\cell find_objc_msgsend()\cell objc-lang.c\cell\row
\cell find_stab_function_addr()\cell dbxread.c\cell\row
\cell fixup_section()\cell symtab.c\cell\row
\cell gen_var_ref()\cell ax-gdb.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell inside_main_func()\cell frame.c\cell\row
\cell lookup_child_selector_nocache()\cell objc-lang.c\cell\row
\cell lookup_objc_class()\cell objc-lang.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell new_objc_runtime_class_getClass()\cell objc-lang.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell new_objc_runtime_get_classname()\cell objc-lang.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell objc_init_trampoline_observer()\cell objc-lang.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell objc_runtime_lock_taken_p()\cell objc-lang.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
\cell print_object_command()\cell objc-lang.c\cell\row
\cell push_expression_name()\cell jv-exp.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell remote_check_symbols()\cell remote.c\cell\row
\cell scope_info()\cell tracepoint.c\cell\row
\cell simple_overlay_update()\cell symfile.c\cell\row
\cell simple_read_overlay_table()\cell symfile.c\cell\row
\cell value_fn_field()\cell value.c\cell\row
\cell value_nsstring()\cell objc-lang.c\cell\row
\cell value_static_field()\cell value.c\cell\row
\cell write_dollar_variable()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function lookup_minimal_symbol_all()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct minimal_symbol* lookup_minimal_symbol_all ( const char* name, const char* sfile, struct objfile* objf, struct symbol_search** sym_list )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell msymbol_hash()\cell minsyms.c\cell\row
\cell msymbol_hash_iw()\cell minsyms.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell strcmp_iw()\cell utils.c\cell\row
\cell symbol_demangled_name()\cell symtab.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  strcmp(), strrchr()\cell\cell\row
Called by:\cell decode_all_variables()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function lookup_minimal_symbol_by_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct minimal_symbol* lookup_minimal_symbol_by_pc ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell lookup_minimal_symbol_by_pc_section()\cell minsyms.c\cell\row
Called by:\cell c_val_print()\cell c-valprint.c\cell\row
\cell find_pc_sect_line()\cell symtab.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell get_pc_function_start()\cell blockframe.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
\cell gnuv2_value_rtti_type()\cell gnu-v2-abi.c\cell\row
\cell gnuv3_rtti_type()\cell gnu-v3-abi.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell info_common_command()\cell f-valprint.c\cell\row
\cell lookup_solib_trampoline_symbol_by_pc()\cell minsyms.c\cell\row
\cell maintenance_translate_address()\cell maint.c\cell\row
\cell pascal_val_print()\cell p-valprint.c\cell\row
\cell print_frame()\cell stack.c\cell\row
\cell resolve_sal_pc()\cell breakpoint.c\cell\row
\cell until_next_command()\cell infcmd.c\cell\row
\cell x86_cxx_virtual_override_thunk_trampline()\cell target/x86-shared-tdep.c\cell\row
\cell x86_frame_this_id()\cell target/x86-shared-tdep.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function lookup_minimal_symbol_by_pc_section()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct minimal_symbol* lookup_minimal_symbol_by_pc_section ( CORE_ADDR pc, asection* section )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell find_pc_sect_in_ordered_sections()\cell objfiles.c\cell\row
\cell find_pc_section()\cell objfiles.c\cell\row
\cell lookup_minimal_symbol_by_pc_section_from_objfile()\cell minsyms.c\cell\row
Called by:\cell build_address_symbolic()\cell printcmd.c\cell\row
\cell find_pc_partial_function_impl()\cell blockframe.c\cell\row
\cell find_pc_sect_psymtab()\cell symtab.c\cell\row
\cell find_pc_sect_symtab()\cell symtab.c\cell\row
\cell lookup_minimal_symbol_by_pc()\cell minsyms.c\cell\row
\cell maintenance_translate_address()\cell maint.c\cell\row
\cell sym_info()\cell printcmd.c\cell\row
Refs Var:\cell object_files\cell objfiles.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function lookup_minimal_symbol_by_pc_section_from_objfile()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct minimal_symbol* lookup_minimal_symbol_by_pc_section_from_objfile ( CORE_ADDR pc, asection* section, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell warning()\cell utils.c\cell\row
Called by:\cell append_psymbols_as_msymbols()\cell symfile.c\cell\row
\cell convert_oso_map_to_final_map()\cell dwarf2read.c\cell\row
\cell create_kext_addr_map()\cell dwarf2read.c\cell\row
\cell lookup_minimal_symbol_by_pc_section()\cell minsyms.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function lookup_minimal_symbol_solib_trampoline()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct minimal_symbol* lookup_minimal_symbol_solib_trampoline ( const char* name, struct objfile* objf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell msymbol_hash()\cell minsyms.c\cell\row
\cell  strcmp()\cell\cell\row
Refs Var:\cell object_files\cell objfiles.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function lookup_minimal_symbol_text()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct minimal_symbol* lookup_minimal_symbol_text ( const char* name, struct objfile* objf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell msymbol_hash()\cell minsyms.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell create_longjmp_breakpoint()\cell breakpoint.c\cell\row
\cell create_overlay_event_breakpoint()\cell breakpoint.c\cell\row
\cell find_pc_sect_line()\cell symtab.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function lookup_solib_trampoline_symbol_by_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct minimal_symbol* lookup_solib_trampoline_symbol_by_pc ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell lookup_minimal_symbol_by_pc()\cell minsyms.c\cell\row
Called by:\cell find_solib_trampoline_target()\cell minsyms.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function make_cleanup_discard_minimal_symbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct cleanup* make_cleanup_discard_minimal_symbols ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell make_cleanup()\cell utils.c\cell\row
Called by:\cell append_psymbols_as_msymbols()\cell symfile.c\cell\row
\cell coff_symfile_read()\cell coffread.c\cell\row
\cell dbx_symfile_read()\cell dbxread.c\cell\row
\cell elf_symfile_read()\cell elfread.c\cell\row
\cell elfmdebug_build_psymtabs()\cell mdebugread.c\cell\row
\cell mipscoff_symfile_read()\cell mipsread.c\cell\row
\cell nlm_symfile_read()\cell nlmread.c\cell\row
Refs Func:\cell do_discard_minimal_symbols_cleanup()\cell minsyms.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function msymbol_hash()\par}
{\s5\f1\fs20\ql\sb50\sa50 unsigned int msymbol_hash ( const char* string )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Called by:\cell add_bincl_to_list()\cell dbxread.c\cell\row
\cell add_minsym_to_hash_table()\cell minsyms.c\cell\row
\cell equivalence_table_add()\cell symmisc.c\cell\row
\cell find_corresponding_bincl_psymtab()\cell dbxread.c\cell\row
\cell find_equivalent_msymbol()\cell symmisc.c\cell\row
\cell gnu_v3_update_exception_catchpoints()\cell breakpoint.c\cell\row
\cell lookup_child_selector()\cell objc-lang.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_minimal_symbol_all()\cell minsyms.c\cell\row
\cell lookup_minimal_symbol_solib_trampoline()\cell minsyms.c\cell\row
\cell lookup_minimal_symbol_text()\cell minsyms.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function msymbol_hash_iw()\par}
{\s5\f1\fs20\ql\sb50\sa50 unsigned int msymbol_hash_iw ( const char* string )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell  isspace()\cell\cell\row
Called by:\cell add_minsym_to_demangled_hash_table()\cell minsyms.c\cell\row
\cell insert_symbol_hashed()\cell dictionary.c\cell\row
\cell iter_name_first_hashed()\cell dictionary.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_minimal_symbol_all()\cell minsyms.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function msymbols_sort()\par}
{\s5\f1\fs20\ql\sb50\sa50 void msymbols_sort ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell build_minimal_symbol_hash_tables()\cell minsyms.c\cell\row
\cell equivalence_table_build()\cell symmisc.c\cell\row
\cell equivalence_table_delete()\cell symmisc.c\cell\row
\cell  qsort()\cell\cell\row
Called by:\cell objfile_relocate()\cell objfiles.c\cell\row
Refs Func:\cell compare_minimal_symbols()\cell minsyms.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function prim_record_minimal_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 void prim_record_minimal_symbol ( const char* name, CORE_ADDR address, enum minimal_symbol_type ms_type, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell executable_objfile()\cell objfiles.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell prim_record_minimal_symbol_and_info()\cell minsyms.c\cell\row
Called by:\cell add_partial_symbol()\cell dwarf2read.c\cell\row
\cell add_pe_exported_sym()\cell coff-pe-read.c\cell\row
\cell nlm_symtab_read()\cell nlmread.c\cell\row
\cell read_alphacoff_dynamic_symtab()\cell mipsread.c\cell\row
\cell read_dbx_dynamic_symtab()\cell dbxread.c\cell\row
\cell record_minimal_symbol()\cell coffread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function prim_record_minimal_symbol_and_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct minimal_symbol* prim_record_minimal_symbol_and_info ( const char* name, const CORE_ADDR address, const enum minimal_symbol_type ms_type, const char* info, const int section, const asection* bfd_section, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell get_symbol_leading_char()\cell minsyms.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell symbol_init_language_specific()\cell symtab.c\cell\row
\cell symbol_set_names()\cell symtab.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  strcmp(), strlen(), strncmp()\cell\cell\row
Called by:\cell append_psymbols_as_msymbols()\cell symfile.c\cell\row
\cell coff_symtab_read()\cell coffread.c\cell\row
\cell parse_partial_symbols()\cell mdebugread.c\cell\row
\cell prim_record_minimal_symbol()\cell minsyms.c\cell\row
\cell record_minimal_symbol()\cell mdebugread.c\cell\row
Refs Var:\cell bunches_seen\cell minsyms.c\cell\row
\cell msym_bunch\cell minsyms.c\cell\row
\cell msym_bunch_index\cell minsyms.c\cell\row
\cell msym_count\cell minsyms.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_minsym_to_demangled_hash_table()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_minsym_to_demangled_hash_table ( struct minimal_symbol* sym, struct minimal_symbol** table )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell msymbol_hash_iw()\cell minsyms.c\cell\row
\cell symbol_demangled_name()\cell symtab.c\cell\row
Called by:\cell build_minimal_symbol_hash_tables()\cell minsyms.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function build_minimal_symbol_hash_tables()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void build_minimal_symbol_hash_tables ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell add_minsym_to_demangled_hash_table()\cell minsyms.c\cell\row
\cell add_minsym_to_hash_table()\cell minsyms.c\cell\row
\cell symbol_search_name()\cell symtab.c\cell\row
Called by:\cell install_minimal_symbols()\cell minsyms.c\cell\row
\cell msymbols_sort()\cell minsyms.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function compact_minimal_symbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int compact_minimal_symbols ( struct minimal_symbol* msymbol, int mcount, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  strcmp()\cell\cell\row
Called by:\cell install_minimal_symbols()\cell minsyms.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function compare_minimal_symbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int compare_minimal_symbols ( const void* fn1p, const void* fn2p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  strcmp()\cell\cell\row
Used in:\cell install_minimal_symbols()\cell minsyms.c\cell\row
\cell msymbols_sort()\cell minsyms.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_discard_minimal_symbols_cleanup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_discard_minimal_symbols_cleanup ( void* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xfree()\cell utils.c\cell\row
Used in:\cell make_cleanup_discard_minimal_symbols()\cell minsyms.c\cell\row
Refs Var:\cell msym_bunch\cell minsyms.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_symbol_leading_char()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int get_symbol_leading_char ( bfd* abfd )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell minsyms.c\cell\cell\row
Called by:\cell prim_record_minimal_symbol_and_info()\cell minsyms.c\cell\row
Refs Var:\cell symfile_objfile\cell objfiles.c\cell\row
\intbl0
}
