/Developer/Applications/Xcode.app/Contents/PlugIns/GDBMIDebugging.xcplugin/Contents/Resources/PBGDBIntrospectionSupport.A.dylib:
(__TEXT,__text) section
_Xcode_dataFormattersMajorVersion:
00000000000010a8	pushq	%rbp
00000000000010a9	movq	%rsp,%rbp
00000000000010ac	movl	$0x00000003,%eax
00000000000010b1	leave
00000000000010b2	ret
_Xcode_dataFormattersMinorVersion:
00000000000010b3	pushq	%rbp
00000000000010b4	movq	%rsp,%rbp
00000000000010b7	movl	$0x00000002,%eax
00000000000010bc	leave
00000000000010bd	ret
__pbxgdb_set_trace:
00000000000010be	pushq	%rbp
00000000000010bf	movq	%rsp,%rbp
00000000000010c2	movl	%edi,0x000030e8(%rip)
00000000000010c8	leave
00000000000010c9	ret
__pbxgdb_shlib_state_changed:
00000000000010ca	pushq	%rbp
00000000000010cb	movq	%rsp,%rbp
00000000000010ce	movl	$__mh_dylib_header,0x000031b8(%rip)
00000000000010d8	leave
00000000000010d9	ret
_pbxgdb_cf_introspect_dont_raise_exception:
00000000000010da	pushq	%rbp
00000000000010db	movq	%rsp,%rbp
00000000000010de	leave
00000000000010df	ret
__pbxgdb_objc_class_name_max_length:
00000000000010e0	pushq	%rbp
00000000000010e1	movq	%rsp,%rbp
00000000000010e4	movq	0x00002f2d(%rip),%rax
00000000000010eb	movq	(%rax),%rax
00000000000010ee	leave
00000000000010ef	ret
_Xcode_CFError:
00000000000010f0	pushq	%rbp
00000000000010f1	movq	%rsp,%rbp
00000000000010f4	movq	%rsi,%rdx
00000000000010f7	leaq	0x00001dda(%rip),%rsi
00000000000010fe	xorl	%eax,%eax
0000000000001100	movq	0x00002ff1(%rip),%r11
0000000000001107	leave
0000000000001108	jmp	*%r11
_Xcode_dataFormattersSupportUnicharXcode_CF:
000000000000110b	pushq	%rbp
000000000000110c	movq	%rsp,%rbp
000000000000110f	movl	$0x00000001,%eax
0000000000001114	leave
0000000000001115	ret
_pbxgdb_trace:
0000000000001116	pushq	%rbp
0000000000001117	movq	%rsp,%rbp
000000000000111a	subq	$0x000000d0,%rsp
0000000000001121	movq	%rsi,0xffffff58(%rbp)
0000000000001128	movq	%rdx,0xffffff60(%rbp)
000000000000112f	movq	%rcx,0xffffff68(%rbp)
0000000000001136	movq	%r8,0xffffff70(%rbp)
000000000000113d	movq	%r9,0xffffff78(%rbp)
0000000000001144	movzbl	%al,%edx
0000000000001147	leaq	__mh_dylib_header(,%rdx,4),%rax
000000000000114f	leaq	0x00000029(%rip),%rdx
0000000000001156	subq	%rax,%rdx
0000000000001159	leaq	0xff(%rbp),%rax
000000000000115d	jmp	*%rdx
000000000000115f	movaps	%xmm7,0xf1(%rax)
0000000000001163	movaps	%xmm6,0xe1(%rax)
0000000000001167	movaps	%xmm5,0xd1(%rax)
000000000000116b	movaps	%xmm4,0xc1(%rax)
000000000000116f	movaps	%xmm3,0xb1(%rax)
0000000000001173	movaps	%xmm2,0xa1(%rax)
0000000000001177	movaps	%xmm1,0x91(%rax)
000000000000117b	movaps	%xmm0,0x81(%rax)
000000000000117f	movl	0x0000302b(%rip),%eax
0000000000001185	testl	%eax,%eax
0000000000001187	je	0x000011cf
0000000000001189	leaq	0xffffff30(%rbp),%rdx
0000000000001190	movl	$0x00000008,0xffffff30(%rbp)
000000000000119a	movl	$0x00000030,0xffffff34(%rbp)
00000000000011a4	leaq	0x10(%rbp),%rax
00000000000011a8	movq	%rax,0xffffff38(%rbp)
00000000000011af	leaq	0xffffff50(%rbp),%rax
00000000000011b6	movq	%rax,0xffffff40(%rbp)
00000000000011bd	movq	%rdi,%rsi
00000000000011c0	movq	0x00002e41(%rip),%rax
00000000000011c7	movq	(%rax),%rdi
00000000000011ca	callq	0x00002ec4	; symbol stub for: _vfprintf
00000000000011cf	leave
00000000000011d0	ret
__pbxgdb_buffer_for_id:
00000000000011d1	pushq	%rbp
00000000000011d2	movq	%rsp,%rbp
00000000000011d5	movq	%rbx,0xd8(%rbp)
00000000000011d9	movq	%r12,0xe0(%rbp)
00000000000011dd	movq	%r13,0xe8(%rbp)
00000000000011e1	movq	%r14,0xf0(%rbp)
00000000000011e5	movq	%r15,0xf8(%rbp)
00000000000011e9	subq	$0x30,%rsp
00000000000011ed	movl	%edi,%r13d
00000000000011f0	movl	%esi,%r15d
00000000000011f3	movl	%edi,%eax
00000000000011f5	sarl	$0x04,%eax
00000000000011f8	movq	%rax,%r14
00000000000011fb	andl	$0x0f,%r14d
00000000000011ff	leaq	0x00002f1a(%rip),%rax
0000000000001206	movq	(%rax,%r14,8),%r12
000000000000120a	movl	%esi,%edx
000000000000120c	movl	%edi,%esi
000000000000120e	leaq	0x00001ceb(%rip),%rdi
0000000000001215	xorl	%eax,%eax
0000000000001217	callq	_pbxgdb_trace
000000000000121c	testl	%r13d,%r13d
000000000000121f	jne	0x00001228
0000000000001221	jmp	0x00001269
0000000000001223	movq	0x08(%r12),%r12
0000000000001228	testq	%r12,%r12
000000000000122b	je	0x00001269
000000000000122d	cmpl	%r13d,(%r12)
0000000000001231	jne	0x00001223
0000000000001233	movl	0x04(%r12),%esi
0000000000001238	cmpl	%esi,%r15d
000000000000123b	jle	0x000012ae
000000000000123d	leaq	0x00001cdc(%rip),%rdi
0000000000001244	xorl	%eax,%eax
0000000000001246	callq	_pbxgdb_trace
000000000000124b	movq	0x10(%r12),%rdi
0000000000001250	callq	0x00002e9a	; symbol stub for: _free
0000000000001255	movslq	%r15d,%rdi
0000000000001258	callq	0x00002ea6	; symbol stub for: _malloc
000000000000125d	movq	%rax,0x10(%r12)
0000000000001262	movl	%r15d,0x04(%r12)
0000000000001267	jmp	0x000012ae
0000000000001269	leaq	0x00001cd8(%rip),%rdi
0000000000001270	xorl	%eax,%eax
0000000000001272	callq	_pbxgdb_trace
0000000000001277	movslq	%r15d,%rbx
000000000000127a	leaq	0x17(%rbx),%rdi
000000000000127e	callq	0x00002ea6	; symbol stub for: _malloc
0000000000001283	movq	%rax,%r12
0000000000001286	movl	%r13d,(%rax)
0000000000001289	movl	%r15d,0x04(%rax)
000000000000128d	movq	%rbx,%rdi
0000000000001290	callq	0x00002ea6	; symbol stub for: _malloc
0000000000001295	movq	%rax,0x10(%r12)
000000000000129a	leaq	0x00002e7f(%rip),%rdx
00000000000012a1	movq	(%rdx,%r14,8),%rax
00000000000012a5	movq	%rax,0x08(%r12)
00000000000012aa	movq	%r12,(%rdx,%r14,8)
00000000000012ae	movq	0x10(%r12),%rsi
00000000000012b3	leaq	0x00001c80(%rip),%rdi
00000000000012ba	xorl	%eax,%eax
00000000000012bc	callq	_pbxgdb_trace
00000000000012c1	movslq	0x04(%r12),%rdx
00000000000012c6	movq	0x10(%r12),%rdi
00000000000012cb	xorl	%esi,%esi
00000000000012cd	callq	0x00002eac	; symbol stub for: _memset
00000000000012d2	movq	0x10(%r12),%rax
00000000000012d7	movq	0xd8(%rbp),%rbx
00000000000012db	movq	0xe0(%rbp),%r12
00000000000012df	movq	0xe8(%rbp),%r13
00000000000012e3	movq	0xf0(%rbp),%r14
00000000000012e7	movq	0xf8(%rbp),%r15
00000000000012eb	leave
00000000000012ec	ret
__Xcode_wcharPointerForCount:
00000000000012ed	pushq	%rbp
00000000000012ee	movq	%rsp,%rbp
00000000000012f1	movq	%rbx,0xe0(%rbp)
00000000000012f5	movq	%r12,0xe8(%rbp)
00000000000012f9	movq	%r13,0xf0(%rbp)
00000000000012fd	movq	%r14,0xf8(%rbp)
0000000000001301	subq	$0x20,%rsp
0000000000001305	movq	%rdi,%r13
0000000000001308	movl	%esi,%r14d
000000000000130b	movq	%rdx,%rbx
000000000000130e	xorl	%r12d,%r12d
0000000000001311	testq	%rdi,%rdi
0000000000001314	je	0x0000136f
0000000000001316	movl	%edx,%esi
0000000000001318	movl	%r14d,%edi
000000000000131b	callq	__pbxgdb_buffer_for_id
0000000000001320	testq	%rax,%rax
0000000000001323	je	0x00001345
0000000000001325	movq	%rax,%r12
0000000000001328	movq	%rbx,%rdx
000000000000132b	movq	%r13,%rsi
000000000000132e	movq	%rax,%rdi
0000000000001331	callq	0x00002ed0	; symbol stub for: _wcstombs
0000000000001336	cdqe
0000000000001338	cmpq	%rbx,%rax
000000000000133b	jne	0x0000136f
000000000000133d	movb	$__mh_dylib_header,0x63(%r12)
0000000000001343	jmp	0x0000136f
0000000000001345	leaq	0x00001c0d(%rip),%rsi
000000000000134c	movl	%r14d,%edi
000000000000134f	xorl	%eax,%eax
0000000000001351	movq	0x00002d90(%rip),%r11
0000000000001358	movq	(%rsp),%rbx
000000000000135c	movq	0x08(%rsp),%r12
0000000000001361	movq	0x10(%rsp),%r13
0000000000001366	movq	0x18(%rsp),%r14
000000000000136b	leave
000000000000136c	jmp	*%r11
000000000000136f	movq	%r12,%rax
0000000000001372	movq	(%rsp),%rbx
0000000000001376	movq	0x08(%rsp),%r12
000000000000137b	movq	0x10(%rsp),%r13
0000000000001380	movq	0x18(%rsp),%r14
0000000000001385	leave
0000000000001386	ret
_Xcode_wcharSummary:
0000000000001387	pushq	%rbp
0000000000001388	movq	%rsp,%rbp
000000000000138b	subq	$0x10,%rsp
000000000000138f	movl	%edi,0xfc(%rbp)
0000000000001392	leaq	0xfc(%rbp),%rdi
0000000000001396	movl	$0x00000002,%edx
000000000000139b	callq	__Xcode_wcharPointerForCount
00000000000013a0	leave
00000000000013a1	ret
_Xcode_wcharPointerSummary:
00000000000013a2	pushq	%rbp
00000000000013a3	movq	%rsp,%rbp
00000000000013a6	movl	$0x00000064,%edx
00000000000013ab	leave
00000000000013ac	jmp	__Xcode_wcharPointerForCount
__pbxgdb_free_buffers_for_ids:
00000000000013b1	pushq	%rbp
00000000000013b2	movq	%rsp,%rbp
00000000000013b5	pushq	%r15
00000000000013b7	pushq	%r14
00000000000013b9	pushq	%r13
00000000000013bb	pushq	%r12
00000000000013bd	pushq	%rbx
00000000000013be	subq	$0x000000d8,%rsp
00000000000013c5	movq	%rsi,0xffffff28(%rbp)
00000000000013cc	movq	%rdx,0xffffff30(%rbp)
00000000000013d3	movq	%rcx,0xffffff38(%rbp)
00000000000013da	movq	%r8,0xffffff40(%rbp)
00000000000013e1	movq	%r9,0xffffff48(%rbp)
00000000000013e8	movl	%edi,%r14d
00000000000013eb	movl	%edi,%esi
00000000000013ed	leaq	0x00001b7c(%rip),%rdi
00000000000013f4	xorl	%eax,%eax
00000000000013f6	callq	_pbxgdb_trace
00000000000013fb	movl	$0x00000008,0xffffff00(%rbp)
0000000000001405	leaq	0x10(%rbp),%rax
0000000000001409	movq	%rax,0xffffff08(%rbp)
0000000000001410	leaq	0xffffff20(%rbp),%rax
0000000000001417	movq	%rax,0xffffff10(%rbp)
000000000000141e	xorl	%r13d,%r13d
0000000000001421	leaq	0x00002cf8(%rip),%r15
0000000000001428	jmp	0x000014bd
000000000000142d	movl	0xffffff00(%rbp),%eax
0000000000001433	cmpl	$0x30,%eax
0000000000001436	jae	0x0000144c
0000000000001438	movl	%eax,%edx
000000000000143a	addq	0xffffff10(%rbp),%rdx
0000000000001441	addl	$0x08,%eax
0000000000001444	movl	%eax,0xffffff00(%rbp)
000000000000144a	jmp	0x0000145e
000000000000144c	movq	0xffffff08(%rbp),%rdx
0000000000001453	leaq	0x08(%rdx),%rax
0000000000001457	movq	%rax,0xffffff08(%rbp)
000000000000145e	movl	(%rdx),%esi
0000000000001460	movl	%esi,%eax
0000000000001462	sarl	$0x04,%eax
0000000000001465	andl	$0x0f,%eax
0000000000001468	leaq	(%r15,%rax,8),%r12
000000000000146c	movq	(%r12),%rbx
0000000000001470	jmp	0x0000147a
0000000000001472	leaq	0x08(%rbx),%r12
0000000000001476	movq	0x08(%rbx),%rbx
000000000000147a	testq	%rbx,%rbx
000000000000147d	je	0x000014ac
000000000000147f	cmpl	%esi,(%rbx)
0000000000001481	jne	0x00001472
0000000000001483	leaq	0x00001b0d(%rip),%rdi
000000000000148a	xorl	%eax,%eax
000000000000148c	callq	_pbxgdb_trace
0000000000001491	movq	0x08(%rbx),%rax
0000000000001495	movq	%rax,(%r12)
0000000000001499	movq	0x10(%rbx),%rdi
000000000000149d	callq	0x00002e9a	; symbol stub for: _free
00000000000014a2	movq	%rbx,%rdi
00000000000014a5	callq	0x00002e9a	; symbol stub for: _free
00000000000014aa	jmp	0x000014ba
00000000000014ac	leaq	0x00001ae8(%rip),%rdi
00000000000014b3	xorl	%eax,%eax
00000000000014b5	callq	_pbxgdb_trace
00000000000014ba	incl	%r13d
00000000000014bd	cmpl	%r14d,%r13d
00000000000014c0	jl	0x0000142d
00000000000014c6	leaq	0x00001ae3(%rip),%rdi
00000000000014cd	xorl	%eax,%eax
00000000000014cf	callq	_pbxgdb_trace
00000000000014d4	addq	$0x000000d8,%rsp
00000000000014db	popq	%rbx
00000000000014dc	popq	%r12
00000000000014de	popq	%r13
00000000000014e0	popq	%r14
00000000000014e2	popq	%r15
00000000000014e4	leave
00000000000014e5	ret
_load_cf_functions:
00000000000014e6	pushq	%rbp
00000000000014e7	movq	%rsp,%rbp
00000000000014ea	pushq	%rbx
00000000000014eb	subq	$0x08,%rsp
00000000000014ef	movq	0x00002d1a(%rip),%rbx
00000000000014f6	movl	$0x00000010,%esi
00000000000014fb	leaq	0x00001ab6(%rip),%rdi
0000000000001502	callq	0x00002e8e	; symbol stub for: _dlopen
0000000000001507	movq	%rax,%rdx
000000000000150a	movq	$0xfffffffe,%rax
0000000000001511	testq	%rdx,%rdx
0000000000001514	cmovneq	%rdx,%rax
0000000000001518	movq	%rax,0x00002cf1(%rip)
000000000000151f	movq	%rax,%rdx
0000000000001522	cmpq	%rbx,%rax
0000000000001525	je	0x00001820
000000000000152b	leaq	0x00001ac9(%rip),%rsi
0000000000001532	movq	%rax,%rdi
0000000000001535	callq	0x00002e94	; symbol stub for: _dlsym
000000000000153a	movq	%rax,0x00002cd7(%rip)
0000000000001541	movq	0x00002cc8(%rip),%rdi
0000000000001548	leaq	0x00001ac2(%rip),%rsi
000000000000154f	callq	0x00002e94	; symbol stub for: _dlsym
0000000000001554	movq	%rax,0x00002cc5(%rip)
000000000000155b	movq	0x00002cae(%rip),%rdi
0000000000001562	leaq	0x00001aba(%rip),%rsi
0000000000001569	callq	0x00002e94	; symbol stub for: _dlsym
000000000000156e	movq	%rax,0x00002c43(%rip)
0000000000001575	movq	0x00002c94(%rip),%rdi
000000000000157c	leaq	0x00001aac(%rip),%rsi
0000000000001583	callq	0x00002e94	; symbol stub for: _dlsym
0000000000001588	movq	%rax,0x00002c31(%rip)
000000000000158f	movq	0x00002c7a(%rip),%rdi
0000000000001596	leaq	0x00001aa4(%rip),%rsi
000000000000159d	callq	0x00002e94	; symbol stub for: _dlsym
00000000000015a2	movq	%rax,0x00002c5f(%rip)
00000000000015a9	movq	0x00002c60(%rip),%rdi
00000000000015b0	leaq	0x00001a94(%rip),%rsi
00000000000015b7	callq	0x00002e94	; symbol stub for: _dlsym
00000000000015bc	movq	%rax,0x00002c65(%rip)
00000000000015c3	movq	0x00002c46(%rip),%rdi
00000000000015ca	leaq	0x00001a88(%rip),%rsi
00000000000015d1	callq	0x00002e94	; symbol stub for: _dlsym
00000000000015d6	movq	%rax,0x00002c53(%rip)
00000000000015dd	movq	0x00002c2c(%rip),%rdi
00000000000015e4	leaq	0x00001a89(%rip),%rsi
00000000000015eb	callq	0x00002e94	; symbol stub for: _dlsym
00000000000015f0	movq	%rax,0x00002c41(%rip)
00000000000015f7	movq	0x00002c12(%rip),%rdi
00000000000015fe	leaq	0x00001a84(%rip),%rsi
0000000000001605	callq	0x00002e94	; symbol stub for: _dlsym
000000000000160a	movq	%rax,0x00002bdf(%rip)
0000000000001611	movq	0x00002bf8(%rip),%rdi
0000000000001618	leaq	0x00001a81(%rip),%rsi
000000000000161f	callq	0x00002e94	; symbol stub for: _dlsym
0000000000001624	movq	%rax,0x00002c15(%rip)
000000000000162b	movq	0x00002bde(%rip),%rdi
0000000000001632	leaq	0x00001a86(%rip),%rsi
0000000000001639	callq	0x00002e94	; symbol stub for: _dlsym
000000000000163e	movq	%rax,0x00002c03(%rip)
0000000000001645	movq	0x00002bc4(%rip),%rdi
000000000000164c	leaq	0x00001a85(%rip),%rsi
0000000000001653	callq	0x00002e94	; symbol stub for: _dlsym
0000000000001658	movq	%rax,0x00002b89(%rip)
000000000000165f	movq	0x00002baa(%rip),%rdi
0000000000001666	leaq	0x00001a80(%rip),%rsi
000000000000166d	callq	0x00002e94	; symbol stub for: _dlsym
0000000000001672	movq	%rax,0x00002bd7(%rip)
0000000000001679	movq	0x00002b90(%rip),%rdi
0000000000001680	leaq	0x00001a77(%rip),%rsi
0000000000001687	callq	0x00002e94	; symbol stub for: _dlsym
000000000000168c	movq	%rax,0x00002b65(%rip)
0000000000001693	movq	0x00002b76(%rip),%rdi
000000000000169a	leaq	0x00001970(%rip),%rsi
00000000000016a1	callq	0x00002e94	; symbol stub for: _dlsym
00000000000016a6	movq	%rax,0x00002b73(%rip)
00000000000016ad	movq	0x00002b5c(%rip),%rdi
00000000000016b4	leaq	0x00001a52(%rip),%rsi
00000000000016bb	callq	0x00002e94	; symbol stub for: _dlsym
00000000000016c0	movq	%rax,0x00002b09(%rip)
00000000000016c7	movq	0x00002b42(%rip),%rdi
00000000000016ce	leaq	0x0000195a(%rip),%rsi
00000000000016d5	callq	0x00002e94	; symbol stub for: _dlsym
00000000000016da	movq	%rax,0x00002adf(%rip)
00000000000016e1	movq	0x00002b28(%rip),%rdi
00000000000016e8	leaq	0x00001a2f(%rip),%rsi
00000000000016ef	callq	0x00002e94	; symbol stub for: _dlsym
00000000000016f4	movq	%rax,0x00002add(%rip)
00000000000016fb	movq	0x00002b0e(%rip),%rdi
0000000000001702	leaq	0x00001a24(%rip),%rsi
0000000000001709	callq	0x00002e94	; symbol stub for: _dlsym
000000000000170e	movq	%rax,0x00002acb(%rip)
0000000000001715	movq	0x00002af4(%rip),%rdi
000000000000171c	leaq	0x00001a20(%rip),%rsi
0000000000001723	callq	0x00002e94	; symbol stub for: _dlsym
0000000000001728	movq	%rax,0x00002b29(%rip)
000000000000172f	movq	0x00002ada(%rip),%rdi
0000000000001736	leaq	0x00001a1a(%rip),%rsi
000000000000173d	callq	0x00002e94	; symbol stub for: _dlsym
0000000000001742	movq	%rax,0x00002b17(%rip)
0000000000001749	movq	0x00002ac0(%rip),%rdi
0000000000001750	leaq	0x00001a10(%rip),%rsi
0000000000001757	callq	0x00002e94	; symbol stub for: _dlsym
000000000000175c	movq	%rax,0x00002b05(%rip)
0000000000001763	movq	0x00002aa6(%rip),%rdi
000000000000176a	leaq	0x000018b2(%rip),%rsi
0000000000001771	callq	0x00002e94	; symbol stub for: _dlsym
0000000000001776	movq	%rax,0x00002a3b(%rip)
000000000000177d	movq	0x00002a8c(%rip),%rdi
0000000000001784	leaq	0x000019ea(%rip),%rsi
000000000000178b	callq	0x00002e94	; symbol stub for: _dlsym
0000000000001790	movq	%rax,0x00002ad9(%rip)
0000000000001797	movq	0x00002a72(%rip),%rdi
000000000000179e	leaq	0x000019e6(%rip),%rsi
00000000000017a5	callq	0x00002e94	; symbol stub for: _dlsym
00000000000017aa	movq	%rax,0x00002a4f(%rip)
00000000000017b1	movq	0x00002a58(%rip),%rdi
00000000000017b8	leaq	0x000019e0(%rip),%rsi
00000000000017bf	callq	0x00002e94	; symbol stub for: _dlsym
00000000000017c4	movq	%rax,0x00002aad(%rip)
00000000000017cb	movq	0x00002a3e(%rip),%rdi
00000000000017d2	leaq	0x000019db(%rip),%rsi
00000000000017d9	callq	0x00002e94	; symbol stub for: _dlsym
00000000000017de	movq	%rax,0x00002a9b(%rip)
00000000000017e5	movq	0x00002a24(%rip),%rdi
00000000000017ec	leaq	0x000019da(%rip),%rsi
00000000000017f3	callq	0x00002e94	; symbol stub for: _dlsym
00000000000017f8	movq	%rax,0x00002a89(%rip)
00000000000017ff	movq	0x00002a0a(%rip),%rdi
0000000000001806	leaq	0x000019d0(%rip),%rsi
000000000000180d	callq	0x00002e94	; symbol stub for: _dlsym
0000000000001812	movq	%rax,0x000029af(%rip)
0000000000001819	movq	0x000029f0(%rip),%rdx
0000000000001820	leaq	0xff(%rdx),%rax
0000000000001824	cmpq	$0xfb,%rax
0000000000001828	ja	0x00001838
000000000000182a	movq	%rdx,%rdi
000000000000182d	addq	$0x08,%rsp
0000000000001831	popq	%rbx
0000000000001832	leave
0000000000001833	jmp	0x00002e82	; symbol stub for: _dlclose
0000000000001838	addq	$0x08,%rsp
000000000000183c	popq	%rbx
000000000000183d	leave
000000000000183e	ret
_Xcode_CFStringSummary:
000000000000183f	pushq	%rbp
0000000000001840	movq	%rsp,%rbp
0000000000001843	movq	%rbx,0xd8(%rbp)
0000000000001847	movq	%r12,0xe0(%rbp)
000000000000184b	movq	%r13,0xe8(%rbp)
000000000000184f	movq	%r14,0xf0(%rbp)
0000000000001853	movq	%r15,0xf8(%rbp)
0000000000001857	subq	$0x40,%rsp
000000000000185b	movq	%rdi,%r12
000000000000185e	movl	%esi,%r13d
0000000000001861	xorl	%ebx,%ebx
0000000000001863	testq	%rdi,%rdi
0000000000001866	je	0x000019b1
000000000000186c	leaq	0x0000197a(%rip),%rsi
0000000000001873	cmpq	$0x00000fff,%rdi
000000000000187a	jbe	0x0000198d
0000000000001880	cmpq	$__mh_dylib_header,0x00002980(%rip)
0000000000001888	jne	0x000018b9
000000000000188a	movq	0x0000297f(%rip),%rax
0000000000001891	testq	%rax,%rax
0000000000001894	je	0x0000189c
0000000000001896	cmpq	$0xfe,%rax
000000000000189a	jne	0x000018ad
000000000000189c	xorl	%eax,%eax
000000000000189e	callq	_load_cf_functions
00000000000018a3	cmpq	$__mh_dylib_header,0x0000295d(%rip)
00000000000018ab	jne	0x000018b9
00000000000018ad	movq	0x000027f4(%rip),%rsi
00000000000018b4	jmp	0x0000198d
00000000000018b9	movq	%r12,%rdi
00000000000018bc	call	*0x000028f6(%rip)
00000000000018c2	movq	%rax,%rbx
00000000000018c5	call	*0x000028f5(%rip)
00000000000018cb	leaq	0x00001938(%rip),%rsi
00000000000018d2	cmpq	%rax,%rbx
00000000000018d5	jne	0x0000198d
00000000000018db	movq	%r12,%rdi
00000000000018de	call	*0x0000293c(%rip)
00000000000018e4	movq	%rax,%r14
00000000000018e7	cmpq	$0x61,%rax
00000000000018eb	jle	0x000018fb
00000000000018ed	movl	$0x00000001,%r15d
00000000000018f3	movl	$0x00000061,%r14d
00000000000018f9	jmp	0x00001908
00000000000018fb	cmpq	$0xff,%rax
00000000000018ff	jle	0x00001986
0000000000001905	xorl	%r15d,%r15d
0000000000001908	movl	$0x000000c8,%esi
000000000000190d	movl	%r13d,%edi
0000000000001910	callq	__pbxgdb_buffer_for_id
0000000000001915	movq	%rax,%rbx
0000000000001918	testq	%rax,%rax
000000000000191b	je	0x000019b1
0000000000001921	movq	%r14,0xc8(%rbp)
0000000000001925	movq	$__mh_dylib_header,0xc0(%rbp)
000000000000192d	movq	%rax,%rcx
0000000000001930	xorl	%esi,%esi
0000000000001932	movq	%r14,%rdx
0000000000001935	movq	%r12,%rdi
0000000000001938	call	*0x000028da(%rip)
000000000000193e	decl	%r15d
0000000000001941	jne	0x00001964
0000000000001943	leaq	(%r14,%r14),%rax
0000000000001947	movw	$__mh_dylib_header,0x06(%rbx,%rax)
000000000000194e	movw	$0x002e,(%rbx,%rax)
0000000000001954	movw	$0x002e,0x02(%rbx,%rax)
000000000000195b	movw	$0x002e,0x04(%rbx,%rax)
0000000000001962	jmp	0x000019b1
0000000000001964	leaq	(%r14,%r14),%rax
0000000000001968	movw	$__mh_dylib_header,(%rbx,%r14,2)
000000000000196f	movw	$__mh_dylib_header,0x02(%rax,%rbx)
0000000000001976	movw	$__mh_dylib_header,0x04(%rax,%rbx)
000000000000197d	movw	$__mh_dylib_header,0x06(%rax,%rbx)
0000000000001984	jmp	0x000019b1
0000000000001986	leaq	0x00001872(%rip),%rsi
000000000000198d	movl	%r13d,%edi
0000000000001990	xorl	%eax,%eax
0000000000001992	movq	0x0000275f(%rip),%r11
0000000000001999	movq	0xd8(%rbp),%rbx
000000000000199d	movq	0xe0(%rbp),%r12
00000000000019a1	movq	0xe8(%rbp),%r13
00000000000019a5	movq	0xf0(%rbp),%r14
00000000000019a9	movq	0xf8(%rbp),%r15
00000000000019ad	leave
00000000000019ae	jmp	*%r11
00000000000019b1	movq	%rbx,%rax
00000000000019b4	movq	0xd8(%rbp),%rbx
00000000000019b8	movq	0xe0(%rbp),%r12
00000000000019bc	movq	0xe8(%rbp),%r13
00000000000019c0	movq	0xf0(%rbp),%r14
00000000000019c4	movq	0xf8(%rbp),%r15
00000000000019c8	leave
00000000000019c9	ret
__pbxgdb_insert_plugin:
00000000000019ca	pushq	%rbp
00000000000019cb	movq	%rsp,%rbp
00000000000019ce	movl	$0x00000005,%esi
00000000000019d3	callq	0x00002e8e	; symbol stub for: _dlopen
00000000000019d8	testq	%rax,%rax
00000000000019db	je	0x00001a06
00000000000019dd	leaq	0x00001842(%rip),%rsi
00000000000019e4	movq	%rax,%rdi
00000000000019e7	callq	0x00002e94	; symbol stub for: _dlsym
00000000000019ec	leaq	0x0000184d(%rip),%rdx
00000000000019f3	testq	%rax,%rax
00000000000019f6	je	0x00001a0c
00000000000019f8	leaq	0x000026e1(%rip),%rdx
00000000000019ff	movq	%rdx,(%rax)
0000000000001a02	xorl	%edx,%edx
0000000000001a04	jmp	0x00001a0c
0000000000001a06	leave
0000000000001a07	jmp	0x00002e88	; symbol stub for: _dlerror
0000000000001a0c	movq	%rdx,%rax
0000000000001a0f	leave
0000000000001a10	ret
__pbxgdb_vunicharmsg:
0000000000001a11	pushq	%rbp
0000000000001a12	movq	%rsp,%rbp
0000000000001a15	pushq	%r14
0000000000001a17	pushq	%r13
0000000000001a19	pushq	%r12
0000000000001a1b	pushq	%rbx
0000000000001a1c	subq	$0x70,%rsp
0000000000001a20	movl	%edi,%ebx
0000000000001a22	movq	%rdx,%rcx
0000000000001a25	movq	0x000025d4(%rip),%r14
0000000000001a2c	movq	(%r14),%rax
0000000000001a2f	movq	%rax,0xd8(%rbp)
0000000000001a33	xorl	%eax,%eax
0000000000001a35	leaq	0xffffff70(%rbp),%rdi
0000000000001a3c	movq	%rsi,%rdx
0000000000001a3f	movl	$0x00000064,%esi
0000000000001a44	callq	0x00002eca	; symbol stub for: _vsnprintf
0000000000001a49	movl	%eax,%r12d
0000000000001a4c	leal	0x04(%r12),%eax
0000000000001a51	leaq	(%rax,%rax),%r13
0000000000001a55	movl	%r13d,%esi
0000000000001a58	movl	%ebx,%edi
0000000000001a5a	callq	__pbxgdb_buffer_for_id
0000000000001a5f	movq	%rax,%rbx
0000000000001a62	movq	%r13,%rdx
0000000000001a65	xorl	%esi,%esi
0000000000001a67	movq	%rax,%rdi
0000000000001a6a	callq	0x00002eac	; symbol stub for: _memset
0000000000001a6f	movslq	%r12d,%rdx
0000000000001a72	leaq	(%rdx,%rdx),%rax
0000000000001a76	movw	$__mh_dylib_header,(%rbx,%rdx,2)
0000000000001a7c	movw	$__mh_dylib_header,0x02(%rbx,%rax)
0000000000001a83	movw	$__mh_dylib_header,0x04(%rbx,%rax)
0000000000001a8a	movw	$__mh_dylib_header,0x06(%rbx,%rax)
0000000000001a91	leal	0xff(%r12),%eax
0000000000001a96	cdqe
0000000000001a98	leaq	(%rbx,%rax,2),%rdx
0000000000001a9c	jmp	0x00001ab1
0000000000001a9e	decl	%r12d
0000000000001aa1	movslq	%r12d,%rax
0000000000001aa4	movsbw	0xffffff70(%rbp,%rax),%ax
0000000000001aad	movw	%ax,0x02(%rdx)
0000000000001ab1	subq	$0x02,%rdx
0000000000001ab5	testl	%r12d,%r12d
0000000000001ab8	jg	0x00001a9e
0000000000001aba	movq	%rbx,%rax
0000000000001abd	movq	0xd8(%rbp),%rdx
0000000000001ac1	xorq	(%r14),%rdx
0000000000001ac4	je	0x00001acb
0000000000001ac6	callq	0x00002e7c	; symbol stub for: ___stack_chk_fail
0000000000001acb	addq	$0x70,%rsp
0000000000001acf	popq	%rbx
0000000000001ad0	popq	%r12
0000000000001ad2	popq	%r13
0000000000001ad4	popq	%r14
0000000000001ad6	leave
0000000000001ad7	ret
__pbxgdb_unicharmsg:
0000000000001ad8	pushq	%rbp
0000000000001ad9	movq	%rsp,%rbp
0000000000001adc	subq	$0x000000d0,%rsp
0000000000001ae3	movq	%rdx,0xffffff60(%rbp)
0000000000001aea	movq	%rcx,0xffffff68(%rbp)
0000000000001af1	movq	%r8,0xffffff70(%rbp)
0000000000001af8	movq	%r9,0xffffff78(%rbp)
0000000000001aff	movzbl	%al,%edx
0000000000001b02	leaq	__mh_dylib_header(,%rdx,4),%rax
0000000000001b0a	leaq	0x00000029(%rip),%rdx
0000000000001b11	subq	%rax,%rdx
0000000000001b14	leaq	0xff(%rbp),%rax
0000000000001b18	jmp	*%rdx
0000000000001b1a	movaps	%xmm7,0xf1(%rax)
0000000000001b1e	movaps	%xmm6,0xe1(%rax)
0000000000001b22	movaps	%xmm5,0xd1(%rax)
0000000000001b26	movaps	%xmm4,0xc1(%rax)
0000000000001b2a	movaps	%xmm3,0xb1(%rax)
0000000000001b2e	movaps	%xmm2,0xa1(%rax)
0000000000001b32	movaps	%xmm1,0x91(%rax)
0000000000001b36	movaps	%xmm0,0x81(%rax)
0000000000001b3a	leaq	0xffffff30(%rbp),%rdx
0000000000001b41	movl	$0x00000010,0xffffff30(%rbp)
0000000000001b4b	movl	$0x00000030,0xffffff34(%rbp)
0000000000001b55	leaq	0x10(%rbp),%rax
0000000000001b59	movq	%rax,0xffffff38(%rbp)
0000000000001b60	leaq	0xffffff50(%rbp),%rax
0000000000001b67	movq	%rax,0xffffff40(%rbp)
0000000000001b6e	callq	__pbxgdb_vunicharmsg
0000000000001b73	leave
0000000000001b74	ret
__pbxgdb_vmsg:
0000000000001b75	pushq	%rbp
0000000000001b76	movq	%rsp,%rbp
0000000000001b79	movq	%rbx,0xd8(%rbp)
0000000000001b7d	movq	%r12,0xe0(%rbp)
0000000000001b81	movq	%r13,0xe8(%rbp)
0000000000001b85	movq	%r14,0xf0(%rbp)
0000000000001b89	movq	%r15,0xf8(%rbp)
0000000000001b8d	subq	$0x30,%rsp
0000000000001b91	movl	%edi,%ebx
0000000000001b93	movq	%rsi,%r15
0000000000001b96	movq	%rdx,%r14
0000000000001b99	movl	%edi,%eax
0000000000001b9b	sarl	$0x04,%eax
0000000000001b9e	andl	$0x0f,%eax
0000000000001ba1	leaq	0x00002578(%rip),%rdx
0000000000001ba8	movq	(%rdx,%rax,8),%rax
0000000000001bac	jmp	0x00001bb2
0000000000001bae	movq	0x08(%rax),%rax
0000000000001bb2	testq	%rax,%rax
0000000000001bb5	je	0x00001bc5
0000000000001bb7	cmpl	%ebx,(%rax)
0000000000001bb9	jne	0x00001bae
0000000000001bbb	movq	0x10(%rax),%r13
0000000000001bbf	movl	0x04(%rax),%r12d
0000000000001bc3	jmp	0x00001bda
0000000000001bc5	movl	$0x00000030,%esi
0000000000001bca	movl	%ebx,%edi
0000000000001bcc	callq	__pbxgdb_buffer_for_id
0000000000001bd1	movq	%rax,%r13
0000000000001bd4	movl	$0x00000030,%r12d
0000000000001bda	movslq	%r12d,%rsi
0000000000001bdd	movq	%r14,%rcx
0000000000001be0	movq	%r15,%rdx
0000000000001be3	movq	%r13,%rdi
0000000000001be6	callq	0x00002eca	; symbol stub for: _vsnprintf
0000000000001beb	cmpl	%eax,%r12d
0000000000001bee	jg	0x00001c12
0000000000001bf0	leal	0x01(%rax),%r12d
0000000000001bf4	movl	%r12d,%esi
0000000000001bf7	movl	%ebx,%edi
0000000000001bf9	callq	__pbxgdb_buffer_for_id
0000000000001bfe	movq	%rax,%r13
0000000000001c01	movslq	%r12d,%rsi
0000000000001c04	movq	%r14,%rcx
0000000000001c07	movq	%r15,%rdx
0000000000001c0a	movq	%rax,%rdi
0000000000001c0d	callq	0x00002eca	; symbol stub for: _vsnprintf
0000000000001c12	movq	%r13,%rax
0000000000001c15	movq	0xd8(%rbp),%rbx
0000000000001c19	movq	0xe0(%rbp),%r12
0000000000001c1d	movq	0xe8(%rbp),%r13
0000000000001c21	movq	0xf0(%rbp),%r14
0000000000001c25	movq	0xf8(%rbp),%r15
0000000000001c29	leave
0000000000001c2a	ret
__pbxgdb_msg:
0000000000001c2b	pushq	%rbp
0000000000001c2c	movq	%rsp,%rbp
0000000000001c2f	subq	$0x000000d0,%rsp
0000000000001c36	movq	%rdx,0xffffff60(%rbp)
0000000000001c3d	movq	%rcx,0xffffff68(%rbp)
0000000000001c44	movq	%r8,0xffffff70(%rbp)
0000000000001c4b	movq	%r9,0xffffff78(%rbp)
0000000000001c52	movzbl	%al,%edx
0000000000001c55	leaq	__mh_dylib_header(,%rdx,4),%rax
0000000000001c5d	leaq	0x00000029(%rip),%rdx
0000000000001c64	subq	%rax,%rdx
0000000000001c67	leaq	0xff(%rbp),%rax
0000000000001c6b	jmp	*%rdx
0000000000001c6d	movaps	%xmm7,0xf1(%rax)
0000000000001c71	movaps	%xmm6,0xe1(%rax)
0000000000001c75	movaps	%xmm5,0xd1(%rax)
0000000000001c79	movaps	%xmm4,0xc1(%rax)
0000000000001c7d	movaps	%xmm3,0xb1(%rax)
0000000000001c81	movaps	%xmm2,0xa1(%rax)
0000000000001c85	movaps	%xmm1,0x91(%rax)
0000000000001c89	movaps	%xmm0,0x81(%rax)
0000000000001c8d	leaq	0xffffff30(%rbp),%rdx
0000000000001c94	movl	$0x00000010,0xffffff30(%rbp)
0000000000001c9e	movl	$0x00000030,0xffffff34(%rbp)
0000000000001ca8	leaq	0x10(%rbp),%rax
0000000000001cac	movq	%rax,0xffffff38(%rbp)
0000000000001cb3	leaq	0xffffff50(%rbp),%rax
0000000000001cba	movq	%rax,0xffffff40(%rbp)
0000000000001cc1	callq	__pbxgdb_vmsg
0000000000001cc6	leave
0000000000001cc7	ret
_pbxgdb_initialize:
0000000000001cc8	pushq	%rbp
0000000000001cc9	movq	%rsp,%rbp
0000000000001ccc	pushq	%r12
0000000000001cce	pushq	%rbx
0000000000001ccf	movl	0x000025bb(%rip),%edx
0000000000001cd5	testl	%edx,%edx
0000000000001cd7	jne	0x00001e45
0000000000001cdd	leaq	0x000018ff(%rip),%rsi
0000000000001ce4	leaq	0x00001592(%rip),%rdi
0000000000001ceb	xorl	%eax,%eax
0000000000001ced	callq	_pbxgdb_trace
0000000000001cf2	movq	0x0000259f(%rip),%rbx
0000000000001cf9	movl	$0x00000010,%esi
0000000000001cfe	leaq	0x0000157e(%rip),%rdi
0000000000001d05	callq	0x00002e8e	; symbol stub for: _dlopen
0000000000001d0a	movq	$0xfffffffe,%r12
0000000000001d11	testq	%rax,%rax
0000000000001d14	movq	%r12,%rdi
0000000000001d17	cmovneq	%rax,%rdi
0000000000001d1b	movq	%rdi,0x00002576(%rip)
0000000000001d22	cmpq	%rbx,%rdi
0000000000001d25	je	0x00001d88
0000000000001d27	leaq	0x0000156e(%rip),%rsi
0000000000001d2e	callq	0x00002e94	; symbol stub for: _dlsym
0000000000001d33	movq	%rax,0x00002566(%rip)
0000000000001d3a	movq	0x00002557(%rip),%rdi
0000000000001d41	leaq	0x00001565(%rip),%rsi
0000000000001d48	callq	0x00002e94	; symbol stub for: _dlsym
0000000000001d4d	movq	%rax,0x00002554(%rip)
0000000000001d54	movq	0x0000253d(%rip),%rdi
0000000000001d5b	leaq	0x0000155f(%rip),%rsi
0000000000001d62	callq	0x00002e94	; symbol stub for: _dlsym
0000000000001d67	movq	%rax,0x00002542(%rip)
0000000000001d6e	movq	0x00002523(%rip),%rdi
0000000000001d75	leaq	0x00001553(%rip),%rsi
0000000000001d7c	callq	0x00002e94	; symbol stub for: _dlsym
0000000000001d81	movq	%rax,0x00002530(%rip)
0000000000001d88	xorl	%eax,%eax
0000000000001d8a	callq	_load_cf_functions
0000000000001d8f	movq	0x0000252a(%rip),%rbx
0000000000001d96	movl	$0x00000010,%esi
0000000000001d9b	leaq	0x00001546(%rip),%rdi
0000000000001da2	callq	0x00002e8e	; symbol stub for: _dlopen
0000000000001da7	testq	%rax,%rax
0000000000001daa	movq	%r12,%rdi
0000000000001dad	cmovneq	%rax,%rdi
0000000000001db1	movq	%rdi,0x00002508(%rip)
0000000000001db8	cmpq	%rbx,%rdi
0000000000001dbb	je	0x00001dea
0000000000001dbd	leaq	0x0000155f(%rip),%rsi
0000000000001dc4	callq	0x00002e94	; symbol stub for: _dlsym
0000000000001dc9	movq	%rax,0x000024f8(%rip)
0000000000001dd0	movq	0x000024e9(%rip),%rdi
0000000000001dd7	leaq	0x00001558(%rip),%rsi
0000000000001dde	callq	0x00002e94	; symbol stub for: _dlsym
0000000000001de3	movq	%rax,0x000024e6(%rip)
0000000000001dea	cmpq	$__mh_dylib_header,0x0000242e(%rip)
0000000000001df2	je	0x00001e0f
0000000000001df4	cmpq	$__mh_dylib_header,0x0000241c(%rip)
0000000000001dfc	je	0x00001e0f
0000000000001dfe	movl	$0x000000c8,%edi
0000000000001e03	callq	0x00002ea6	; symbol stub for: _malloc
0000000000001e08	movq	%rax,0x000024c9(%rip)
0000000000001e0f	movq	0x000024aa(%rip),%rdi
0000000000001e16	leaq	0xff(%rdi),%rax
0000000000001e1a	cmpq	$0xfb,%rax
0000000000001e1e	ja	0x00001e25
0000000000001e20	callq	0x00002e82	; symbol stub for: _dlclose
0000000000001e25	movq	0x0000246c(%rip),%rdi
0000000000001e2c	leaq	0xff(%rdi),%rax
0000000000001e30	cmpq	$0xfb,%rax
0000000000001e34	ja	0x00001e3b
0000000000001e36	callq	0x00002e82	; symbol stub for: _dlclose
0000000000001e3b	movl	$0x00000001,0x0000244b(%rip)
0000000000001e45	popq	%rbx
0000000000001e46	popq	%r12
0000000000001e48	leave
0000000000001e49	ret
__pbxgdb_dump_class_list_buffer:
0000000000001e4a	pushq	%rbp
0000000000001e4b	movq	%rsp,%rbp
0000000000001e4e	pushq	%r14
0000000000001e50	pushq	%r13
0000000000001e52	pushq	%r12
0000000000001e54	pushq	%rbx
0000000000001e55	movq	%rdi,%rbx
0000000000001e58	xorl	%eax,%eax
0000000000001e5a	callq	_pbxgdb_initialize
0000000000001e5f	movq	(%rbx),%r14
0000000000001e62	leaq	0x08(%rbx),%r13
0000000000001e66	movl	%r14d,%esi
0000000000001e69	leaq	0x000014dc(%rip),%rdi
0000000000001e70	xorl	%eax,%eax
0000000000001e72	callq	0x00002eb2	; symbol stub for: _printf
0000000000001e77	movq	%r13,%r12
0000000000001e7a	jmp	0x00001e9e
0000000000001e7c	movq	%r12,%rsi
0000000000001e7f	leaq	0x000014da(%rip),%rdi
0000000000001e86	xorl	%eax,%eax
0000000000001e88	callq	0x00002eb2	; symbol stub for: _printf
0000000000001e8d	leaq	0x01(%r12),%rbx
0000000000001e92	movq	%r12,%rdi
0000000000001e95	callq	0x00002ebe	; symbol stub for: _strlen
0000000000001e9a	leaq	(%rbx,%rax),%r12
0000000000001e9e	movq	%r12,%rax
0000000000001ea1	subq	%r13,%rax
0000000000001ea4	cmpq	%rax,%r14
0000000000001ea7	ja	0x00001e7c
0000000000001ea9	popq	%rbx
0000000000001eaa	popq	%r12
0000000000001eac	popq	%r13
0000000000001eae	popq	%r14
0000000000001eb0	leave
0000000000001eb1	ret
__pbxgdb_objc_validate_class:
0000000000001eb2	pushq	%rbp
0000000000001eb3	movq	%rsp,%rbp
0000000000001eb6	pushq	%rbx
0000000000001eb7	subq	$0x08,%rsp
0000000000001ebb	movq	%rdi,%rbx
0000000000001ebe	movq	%rdi,%rdx
0000000000001ec1	leaq	0x00001756(%rip),%rsi
0000000000001ec8	leaq	0x00001496(%rip),%rdi
0000000000001ecf	xorl	%eax,%eax
0000000000001ed1	callq	_pbxgdb_trace
0000000000001ed6	testq	%rbx,%rbx
0000000000001ed9	je	0x00001f13
0000000000001edb	xorl	%eax,%eax
0000000000001edd	callq	_pbxgdb_initialize
0000000000001ee2	movq	0x000023cf(%rip),%rax
0000000000001ee9	testq	%rax,%rax
0000000000001eec	je	0x00001f13
0000000000001eee	movq	%rbx,%rdi
0000000000001ef1	call	*%rax
0000000000001ef3	testq	%rax,%rax
0000000000001ef6	je	0x00001f13
0000000000001ef8	movq	0x000023b1(%rip),%rdx
0000000000001eff	testq	%rdx,%rdx
0000000000001f02	je	0x00001f13
0000000000001f04	movq	%rax,%rdi
0000000000001f07	movq	%rdx,%r11
0000000000001f0a	addq	$0x08,%rsp
0000000000001f0e	popq	%rbx
0000000000001f0f	leave
0000000000001f10	jmp	*%r11
0000000000001f13	xorl	%eax,%eax
0000000000001f15	addq	$0x08,%rsp
0000000000001f19	popq	%rbx
0000000000001f1a	leave
0000000000001f1b	ret
_CoreFoundationTypeRefIsValid:
0000000000001f1c	pushq	%rbp
0000000000001f1d	movq	%rsp,%rbp
0000000000001f20	pushq	%rbx
0000000000001f21	subq	$0x58,%rsp
0000000000001f25	movq	%rdi,%rbx
0000000000001f28	testq	%rdi,%rdi
0000000000001f2b	je	0x00001fc2
0000000000001f31	movl	$0x00000008,%ecx
0000000000001f36	movq	%rdi,%rdx
0000000000001f39	leaq	0x00001686(%rip),%rsi
0000000000001f40	leaq	0x00001430(%rip),%rdi
0000000000001f47	xorl	%eax,%eax
0000000000001f49	callq	_pbxgdb_trace
0000000000001f4e	movq	0x000020bb(%rip),%rax
0000000000001f55	movl	(%rax),%edi
0000000000001f57	movq	%rbx,0xe0(%rbp)
0000000000001f5b	movl	$0x00000400,0xec(%rbp)
0000000000001f62	movl	$0x0000000c,0xe8(%rbp)
0000000000001f69	leaq	0xec(%rbp),%rcx
0000000000001f6d	leaq	0xd8(%rbp),%rdx
0000000000001f71	leaq	0xe0(%rbp),%rsi
0000000000001f75	leaq	0xe8(%rbp),%r9
0000000000001f79	leaq	0xa0(%rbp),%r8
0000000000001f7d	callq	0x00002ea0	; symbol stub for: _mach_vm_region_recurse
0000000000001f82	movl	%eax,%ecx
0000000000001f84	testl	%eax,%eax
0000000000001f86	jne	0x00001fa6
0000000000001f88	movq	0xe0(%rbp),%rdx
0000000000001f8c	cmpq	%rdx,%rbx
0000000000001f8f	jb	0x00001fa6
0000000000001f91	leaq	0x08(%rbx),%rax
0000000000001f95	addq	0xd8(%rbp),%rdx
0000000000001f99	cmpq	%rdx,%rax
0000000000001f9c	ja	0x00001fa6
0000000000001f9e	testb	$0x01,0xa0(%rbp)
0000000000001fa2	je	0x00001fc2
0000000000001fa4	jmp	0x00001fb8
0000000000001fa6	movl	%ecx,%esi
0000000000001fa8	leaq	0x000013e9(%rip),%rdi
0000000000001faf	xorl	%eax,%eax
0000000000001fb1	callq	_pbxgdb_trace
0000000000001fb6	jmp	0x00001fc2
0000000000001fb8	movq	(%rbx),%rdi
0000000000001fbb	callq	__pbxgdb_objc_validate_class
0000000000001fc0	jmp	0x00001fc4
0000000000001fc2	xorl	%eax,%eax
0000000000001fc4	addq	$0x58,%rsp
0000000000001fc8	popq	%rbx
0000000000001fc9	leave
0000000000001fca	ret
__pbxgdb_objc_compute_super_class_list:
0000000000001fcb	pushq	%rbp
0000000000001fcc	movq	%rsp,%rbp
0000000000001fcf	pushq	%r15
0000000000001fd1	pushq	%r14
0000000000001fd3	pushq	%r13
0000000000001fd5	pushq	%r12
0000000000001fd7	pushq	%rbx
0000000000001fd8	subq	$0x08,%rsp
0000000000001fdc	movq	%rdi,%r15
0000000000001fdf	movq	%rdi,%rdx
0000000000001fe2	leaq	0x0000160f(%rip),%rsi
0000000000001fe9	leaq	0x00001375(%rip),%rdi
0000000000001ff0	xorl	%eax,%eax
0000000000001ff2	callq	_pbxgdb_trace
0000000000001ff7	xorl	%eax,%eax
0000000000001ff9	callq	_pbxgdb_initialize
0000000000001ffe	movq	(%r15),%rbx
0000000000002001	xorl	%r14d,%r14d
0000000000002004	jmp	0x0000203f
0000000000002006	movq	%rbx,%rdi
0000000000002009	callq	__pbxgdb_objc_validate_class
000000000000200e	testq	%rax,%rax
0000000000002011	je	0x00002118
0000000000002017	movq	%rax,%rdi
000000000000201a	callq	0x00002ebe	; symbol stub for: _strlen
000000000000201f	movq	%rax,%r12
0000000000002022	movq	0x0000227f(%rip),%rax
0000000000002029	testq	%rax,%rax
000000000000202c	jne	0x00002032
000000000000202e	xorl	%ebx,%ebx
0000000000002030	jmp	0x0000203a
0000000000002032	movq	%rbx,%rdi
0000000000002035	call	*%rax
0000000000002037	movq	%rax,%rbx
000000000000203a	leaq	0x01(%r14,%r12),%r14
000000000000203f	testq	%rbx,%rbx
0000000000002042	jne	0x00002006
0000000000002044	leaq	0x08(%r14),%rbx
0000000000002048	cmpq	0x00002291(%rip),%rbx
000000000000204f	jbe	0x0000208d
0000000000002051	movq	0x00002290(%rip),%rdi
0000000000002058	testq	%rdi,%rdi
000000000000205b	je	0x00002062
000000000000205d	callq	0x00002e9a	; symbol stub for: _free
0000000000002062	movq	%rbx,%rdi
0000000000002065	callq	0x00002ea6	; symbol stub for: _malloc
000000000000206a	movq	%rax,0x00002277(%rip)
0000000000002071	testq	%rax,%rax
0000000000002074	jne	0x00002086
0000000000002076	movq	$__mh_dylib_header,0x0000225f(%rip)
0000000000002081	jmp	0x00002118
0000000000002086	movq	%rbx,0x00002253(%rip)
000000000000208d	movq	0x00002254(%rip),%rax
0000000000002094	movq	%r14,(%rax)
0000000000002097	leaq	0x08(%rax),%rbx
000000000000209b	movq	(%r15),%r13
000000000000209e	jmp	0x000020e6
00000000000020a0	movq	0x00002209(%rip),%rax
00000000000020a7	testq	%rax,%rax
00000000000020aa	je	0x000020d2
00000000000020ac	movq	%r13,%rdi
00000000000020af	call	*%rax
00000000000020b1	movq	%rax,%r12
00000000000020b4	testq	%rax,%rax
00000000000020b7	je	0x000020d2
00000000000020b9	movq	%rax,%rsi
00000000000020bc	movq	%rbx,%rdi
00000000000020bf	callq	0x00002eb8	; symbol stub for: _strcpy
00000000000020c4	incq	%rbx
00000000000020c7	movq	%r12,%rdi
00000000000020ca	callq	0x00002ebe	; symbol stub for: _strlen
00000000000020cf	addq	%rax,%rbx
00000000000020d2	movq	0x000021cf(%rip),%rax
00000000000020d9	testq	%rax,%rax
00000000000020dc	je	0x000020eb
00000000000020de	movq	%r13,%rdi
00000000000020e1	call	*%rax
00000000000020e3	movq	%rax,%r13
00000000000020e6	testq	%r13,%r13
00000000000020e9	jne	0x000020a0
00000000000020eb	movq	0x000021f6(%rip),%r8
00000000000020f2	addq	$0x08,%r8
00000000000020f6	movq	%r14,%rcx
00000000000020f9	movq	%r15,%rdx
00000000000020fc	leaq	0x000014f5(%rip),%rsi
0000000000002103	leaq	0x000012d0(%rip),%rdi
000000000000210a	xorl	%eax,%eax
000000000000210c	callq	_pbxgdb_trace
0000000000002111	movq	0x000021d0(%rip),%rax
0000000000002118	addq	$0x08,%rsp
000000000000211c	popq	%rbx
000000000000211d	popq	%r12
000000000000211f	popq	%r13
0000000000002121	popq	%r14
0000000000002123	popq	%r15
0000000000002125	leave
0000000000002126	ret
__pbxgdb_objc_dynamic_type:
0000000000002127	pushq	%rbp
0000000000002128	movq	%rsp,%rbp
000000000000212b	movq	%rbx,0xf0(%rbp)
000000000000212f	movq	%r12,0xf8(%rbp)
0000000000002133	subq	$0x10,%rsp
0000000000002137	movq	%rdi,%rbx
000000000000213a	movl	0x00002068(%rip),%esi
0000000000002140	movq	%rdi,%rdx
0000000000002143	leaq	0x000012a6(%rip),%rdi
000000000000214a	xorl	%eax,%eax
000000000000214c	callq	_pbxgdb_trace
0000000000002151	incl	0x00002051(%rip)
0000000000002157	movq	(%rbx),%rdi
000000000000215a	callq	__pbxgdb_objc_validate_class
000000000000215f	movq	%rax,%r12
0000000000002162	movl	0x00002040(%rip),%esi
0000000000002168	movq	%rbx,%rdx
000000000000216b	leaq	0x0000127e(%rip),%rdi
0000000000002172	xorl	%eax,%eax
0000000000002174	callq	_pbxgdb_trace
0000000000002179	movq	%r12,%rax
000000000000217c	movq	(%rsp),%rbx
0000000000002180	movq	0x08(%rsp),%r12
0000000000002185	leave
0000000000002186	ret
__pbxgdb_cf_introspect_string_buffer:
0000000000002187	pushq	%rbp
0000000000002188	movq	%rsp,%rbp
000000000000218b	xorl	%eax,%eax
000000000000218d	callq	_pbxgdb_initialize
0000000000002192	cmpq	$__mh_dylib_header,0x00002086(%rip)
000000000000219a	je	0x000021b2
000000000000219c	cmpq	$__mh_dylib_header,0x00002074(%rip)
00000000000021a4	je	0x000021b2
00000000000021a6	movq	0x0000212b(%rip),%rax
00000000000021ad	testq	%rax,%rax
00000000000021b0	jne	0x000021b4
00000000000021b2	xorl	%eax,%eax
00000000000021b4	leave
00000000000021b5	ret
__pbxgdb_cf_introspect_string:
00000000000021b6	pushq	%rbp
00000000000021b7	movq	%rsp,%rbp
00000000000021ba	movq	%rbx,0xe8(%rbp)
00000000000021be	movq	%r12,0xf0(%rbp)
00000000000021c2	movq	%r13,0xf8(%rbp)
00000000000021c6	subq	$0x30,%rsp
00000000000021ca	movq	%rdi,%r12
00000000000021cd	xorl	%eax,%eax
00000000000021cf	callq	_pbxgdb_initialize
00000000000021d4	movq	0x00001fdd(%rip),%rax
00000000000021db	testq	%rax,%rax
00000000000021de	je	0x000022ae
00000000000021e4	cmpq	$__mh_dylib_header,0x00001fd4(%rip)
00000000000021ec	je	0x000022ae
00000000000021f2	movq	%r12,%rdi
00000000000021f5	call	*%rax
00000000000021f7	movq	%rax,%rbx
00000000000021fa	call	*0x00001fc0(%rip)
0000000000002200	cmpq	%rax,%rbx
0000000000002203	jne	0x000022ae
0000000000002209	movq	0x000020b8(%rip),%rdx
0000000000002210	testq	%rdx,%rdx
0000000000002213	je	0x00002235
0000000000002215	cmpq	$__mh_dylib_header,0x000020b3(%rip)
000000000000221d	je	0x00002235
000000000000221f	xorl	%eax,%eax
0000000000002221	call	*%rdx
0000000000002223	movq	%rax,%r13
0000000000002226	leaq	0xffffeead(%rip),%rdi
000000000000222d	call	*0x0000209d(%rip)
0000000000002233	jmp	0x00002238
0000000000002235	xorl	%r13d,%r13d
0000000000002238	testq	%r12,%r12
000000000000223b	je	0x0000228c
000000000000223d	movq	0x00001fdc(%rip),%rax
0000000000002244	testq	%rax,%rax
0000000000002247	je	0x0000228c
0000000000002249	cmpq	$__mh_dylib_header,0x00001fc7(%rip)
0000000000002251	je	0x0000228c
0000000000002253	movq	%r12,%rdi
0000000000002256	call	*%rax
0000000000002258	movl	%eax,%ebx
000000000000225a	movl	$0x00000063,%edx
000000000000225f	cmpl	$0x62,%eax
0000000000002262	jg	0x0000226c
0000000000002264	movslq	%eax,%rdx
0000000000002267	testq	%rdx,%rdx
000000000000226a	jle	0x00002291
000000000000226c	movq	0x00002065(%rip),%rcx
0000000000002273	movq	%rdx,0xd8(%rbp)
0000000000002277	movq	$__mh_dylib_header,0xd0(%rbp)
000000000000227f	xorl	%esi,%esi
0000000000002281	movq	%r12,%rdi
0000000000002284	call	*0x00001f8e(%rip)
000000000000228a	jmp	0x00002291
000000000000228c	movl	$0xffffffff,%ebx
0000000000002291	cmpq	$__mh_dylib_header,0x0000202f(%rip)
0000000000002299	je	0x000022b3
000000000000229b	movq	0x0000202e(%rip),%rax
00000000000022a2	testq	%rax,%rax
00000000000022a5	je	0x000022b3
00000000000022a7	movq	%r13,%rdi
00000000000022aa	call	*%rax
00000000000022ac	jmp	0x000022b3
00000000000022ae	movl	$0xffffffff,%ebx
00000000000022b3	movl	%ebx,%eax
00000000000022b5	movq	0xe8(%rbp),%rbx
00000000000022b9	movq	0xf0(%rbp),%r12
00000000000022bd	movq	0xf8(%rbp),%r13
00000000000022c1	leave
00000000000022c2	ret
_Xcode_CFGregorianDateSummary:
00000000000022c3	pushq	%rbp
00000000000022c4	movq	%rsp,%rbp
00000000000022c7	movq	%rbx,0xd8(%rbp)
00000000000022cb	movq	%r12,0xe0(%rbp)
00000000000022cf	movq	%r13,0xe8(%rbp)
00000000000022d3	movq	%r14,0xf0(%rbp)
00000000000022d7	movq	%r15,0xf8(%rbp)
00000000000022db	subq	$0x60,%rsp
00000000000022df	movsd	%xmm0,0xb8(%rbp)
00000000000022e4	movl	%esi,0xb4(%rbp)
00000000000022e7	movq	%rdi,0xc0(%rbp)
00000000000022eb	movsd	%xmm0,0xc8(%rbp)
00000000000022f0	movzbl	0xc4(%rbp),%r13d
00000000000022f5	movzbl	0xc5(%rbp),%r12d
00000000000022fa	movl	0xc0(%rbp),%r15d
00000000000022fe	movzbl	0xc6(%rbp),%r14d
0000000000002303	movzbl	0xc7(%rbp),%ebx
0000000000002307	cmpq	$__mh_dylib_header,0x00001ef9(%rip)
000000000000230f	jne	0x0000235f
0000000000002311	movq	0x00001ef8(%rip),%rax
0000000000002318	testq	%rax,%rax
000000000000231b	je	0x00002323
000000000000231d	cmpq	$0xfe,%rax
0000000000002321	jne	0x00002334
0000000000002323	xorl	%eax,%eax
0000000000002325	callq	_load_cf_functions
000000000000232a	cmpq	$__mh_dylib_header,0x00001ed6(%rip)
0000000000002332	jne	0x0000235f
0000000000002334	movq	0x00001d6d(%rip),%rsi
000000000000233b	movl	0xb4(%rbp),%edi
000000000000233e	xorl	%eax,%eax
0000000000002340	movq	0x00001db1(%rip),%r11
0000000000002347	movq	0xd8(%rbp),%rbx
000000000000234b	movq	0xe0(%rbp),%r12
000000000000234f	movq	0xe8(%rbp),%r13
0000000000002353	movq	0xf0(%rbp),%r14
0000000000002357	movq	0xf8(%rbp),%r15
000000000000235b	leave
000000000000235c	jmp	*%r11
000000000000235f	movsbl	%ah,%ecx
0000000000002363	movsbl	%ch,%edx
0000000000002367	movsbl	%bl,%eax
000000000000236a	movl	%eax,(%rsp)
000000000000236d	movsd	0xb8(%rbp),%xmm0
0000000000002372	movsbl	%dh,%r9d
0000000000002376	movl	%r15d,%r8d
0000000000002379	leaq	0x00001097(%rip),%rsi
0000000000002380	movl	0xb4(%rbp),%edi
0000000000002383	movl	$0x00000001,%eax
0000000000002388	call	*0x00001d6a(%rip)
000000000000238e	movq	0xd8(%rbp),%rbx
0000000000002392	movq	0xe0(%rbp),%r12
0000000000002396	movq	0xe8(%rbp),%r13
000000000000239a	movq	0xf0(%rbp),%r14
000000000000239e	movq	0xf8(%rbp),%r15
00000000000023a2	leave
00000000000023a3	ret
_Xcode_CFAbsoluteTimeSummary:
00000000000023a4	pushq	%rbp
00000000000023a5	movq	%rsp,%rbp
00000000000023a8	movq	%rbx,0xf0(%rbp)
00000000000023ac	movq	%r12,0xf8(%rbp)
00000000000023b0	subq	$0x40,%rsp
00000000000023b4	movsd	%xmm0,0xc8(%rbp)
00000000000023b9	movl	%edi,%r12d
00000000000023bc	cmpq	$__mh_dylib_header,0x00001e44(%rip)
00000000000023c4	jne	0x00002408
00000000000023c6	movq	0x00001e43(%rip),%rax
00000000000023cd	testq	%rax,%rax
00000000000023d0	je	0x000023d8
00000000000023d2	cmpq	$0xfe,%rax
00000000000023d6	jne	0x000023e9
00000000000023d8	xorl	%eax,%eax
00000000000023da	callq	_load_cf_functions
00000000000023df	cmpq	$__mh_dylib_header,0x00001e21(%rip)
00000000000023e7	jne	0x00002408
00000000000023e9	movq	0x00001cb8(%rip),%rsi
00000000000023f0	movl	%r12d,%edi
00000000000023f3	xorl	%eax,%eax
00000000000023f5	movq	0x00001cfc(%rip),%r11
00000000000023fc	movq	0xf0(%rbp),%rbx
0000000000002400	movq	0xf8(%rbp),%r12
0000000000002404	leave
0000000000002405	jmp	*%r11
0000000000002408	call	*0x00001e62(%rip)
000000000000240e	movq	%rax,%rbx
0000000000002411	movq	%rax,%rdi
0000000000002414	movsd	0xc8(%rbp),%xmm0
0000000000002419	call	*0x00001e21(%rip)
000000000000241f	movq	%rax,0xd0(%rbp)
0000000000002423	movsd	%xmm0,0xd8(%rbp)
0000000000002428	movq	%rax,0xe0(%rbp)
000000000000242c	movq	0xd8(%rbp),%rax
0000000000002430	movq	%rax,0xe8(%rbp)
0000000000002434	movq	%rbx,%rdi
0000000000002437	call	*0x00001dcb(%rip)
000000000000243d	movq	0xe0(%rbp),%rdi
0000000000002441	movl	%r12d,%esi
0000000000002444	movsd	0xe8(%rbp),%xmm0
0000000000002449	movq	0xf0(%rbp),%rbx
000000000000244d	movq	0xf8(%rbp),%r12
0000000000002451	leave
0000000000002452	jmp	_Xcode_CFGregorianDateSummary
_Xcode_CFTimeZoneSummary:
0000000000002457	pushq	%rbp
0000000000002458	movq	%rsp,%rbp
000000000000245b	movq	%rbx,0xe0(%rbp)
000000000000245f	movq	%r12,0xe8(%rbp)
0000000000002463	movq	%r13,0xf0(%rbp)
0000000000002467	movq	%r14,0xf8(%rbp)
000000000000246b	subq	$0x20,%rsp
000000000000246f	movq	%rdi,%r12
0000000000002472	movl	%esi,%r13d
0000000000002475	xorl	%r14d,%r14d
0000000000002478	testq	%rdi,%rdi
000000000000247b	je	0x00002526
0000000000002481	cmpq	$__mh_dylib_header,0x00001d7f(%rip)
0000000000002489	jne	0x000024b7
000000000000248b	movq	0x00001d7e(%rip),%rax
0000000000002492	testq	%rax,%rax
0000000000002495	je	0x0000249d
0000000000002497	cmpq	$0xfe,%rax
000000000000249b	jne	0x000024ae
000000000000249d	xorl	%eax,%eax
000000000000249f	callq	_load_cf_functions
00000000000024a4	cmpq	$__mh_dylib_header,0x00001d5c(%rip)
00000000000024ac	jne	0x000024b7
00000000000024ae	movq	0x00001bf3(%rip),%rsi
00000000000024b5	jmp	0x00002503
00000000000024b7	movq	%r12,%rdi
00000000000024ba	call	*0x00001cf8(%rip)
00000000000024c0	movq	%rax,%rbx
00000000000024c3	call	*0x00001d37(%rip)
00000000000024c9	leaq	0x00000f59(%rip),%rsi
00000000000024d0	cmpq	%rax,%rbx
00000000000024d3	jne	0x00002503
00000000000024d5	movq	0x00001d54(%rip),%rbx
00000000000024dc	call	*0x00001d9e(%rip)
00000000000024e2	movq	%r12,%rdi
00000000000024e5	call	*%rbx
00000000000024e7	movq	%rax,%rbx
00000000000024ea	movl	%r13d,%esi
00000000000024ed	movq	%rax,%rdi
00000000000024f0	callq	_Xcode_CFStringSummary
00000000000024f5	movq	%rax,%r14
00000000000024f8	movq	%rbx,%rdi
00000000000024fb	call	*0x00001d07(%rip)
0000000000002501	jmp	0x00002526
0000000000002503	movl	%r13d,%edi
0000000000002506	xorl	%eax,%eax
0000000000002508	movq	0x00001be9(%rip),%r11
000000000000250f	movq	(%rsp),%rbx
0000000000002513	movq	0x08(%rsp),%r12
0000000000002518	movq	0x10(%rsp),%r13
000000000000251d	movq	0x18(%rsp),%r14
0000000000002522	leave
0000000000002523	jmp	*%r11
0000000000002526	movq	%r14,%rax
0000000000002529	movq	(%rsp),%rbx
000000000000252d	movq	0x08(%rsp),%r12
0000000000002532	movq	0x10(%rsp),%r13
0000000000002537	movq	0x18(%rsp),%r14
000000000000253c	leave
000000000000253d	ret
_Xcode_CFSetSummary:
000000000000253e	pushq	%rbp
000000000000253f	movq	%rsp,%rbp
0000000000002542	movq	%rbx,0xe8(%rbp)
0000000000002546	movq	%r12,0xf0(%rbp)
000000000000254a	movq	%r13,0xf8(%rbp)
000000000000254e	subq	$0x20,%rsp
0000000000002552	movq	%rdi,%r12
0000000000002555	movl	%esi,%r13d
0000000000002558	testq	%rdi,%rdi
000000000000255b	je	0x0000260f
0000000000002561	cmpq	$__mh_dylib_header,0x00001c9f(%rip)
0000000000002569	jne	0x00002597
000000000000256b	movq	0x00001c9e(%rip),%rax
0000000000002572	testq	%rax,%rax
0000000000002575	je	0x0000257d
0000000000002577	cmpq	$0xfe,%rax
000000000000257b	jne	0x0000258e
000000000000257d	xorl	%eax,%eax
000000000000257f	callq	_load_cf_functions
0000000000002584	cmpq	$__mh_dylib_header,0x00001c7c(%rip)
000000000000258c	jne	0x00002597
000000000000258e	movq	0x00001b13(%rip),%rsi
0000000000002595	jmp	0x000025f3
0000000000002597	movq	%r12,%rdi
000000000000259a	call	*0x00001c18(%rip)
00000000000025a0	movq	%rax,%rbx
00000000000025a3	call	*0x00001c4f(%rip)
00000000000025a9	leaq	0x00000e97(%rip),%rsi
00000000000025b0	cmpq	%rax,%rbx
00000000000025b3	jne	0x000025f3
00000000000025b5	movq	%r12,%rdi
00000000000025b8	call	*0x00001c6a(%rip)
00000000000025be	cmpq	$0x01,%rax
00000000000025c2	jne	0x000025cd
00000000000025c4	movq	0x00001ae5(%rip),%rsi
00000000000025cb	jmp	0x000025f3
00000000000025cd	movq	0x00001ae4(%rip),%rsi
00000000000025d4	movq	%rax,%rdx
00000000000025d7	movl	%r13d,%edi
00000000000025da	xorl	%eax,%eax
00000000000025dc	movq	0x00001b15(%rip),%r11
00000000000025e3	movq	0xe8(%rbp),%rbx
00000000000025e7	movq	0xf0(%rbp),%r12
00000000000025eb	movq	0xf8(%rbp),%r13
00000000000025ef	leave
00000000000025f0	jmp	*%r11
00000000000025f3	movl	%r13d,%edi
00000000000025f6	xorl	%eax,%eax
00000000000025f8	movq	0x00001af9(%rip),%r11
00000000000025ff	movq	0xe8(%rbp),%rbx
0000000000002603	movq	0xf0(%rbp),%r12
0000000000002607	movq	0xf8(%rbp),%r13
000000000000260b	leave
000000000000260c	jmp	*%r11
000000000000260f	xorl	%eax,%eax
0000000000002611	movq	0xe8(%rbp),%rbx
0000000000002615	movq	0xf0(%rbp),%r12
0000000000002619	movq	0xf8(%rbp),%r13
000000000000261d	leave
000000000000261e	ret
_Xcode_CFDictionarySummary:
000000000000261f	pushq	%rbp
0000000000002620	movq	%rsp,%rbp
0000000000002623	movq	%rbx,0xe8(%rbp)
0000000000002627	movq	%r12,0xf0(%rbp)
000000000000262b	movq	%r13,0xf8(%rbp)
000000000000262f	subq	$0x20,%rsp
0000000000002633	movq	%rdi,%r12
0000000000002636	movl	%esi,%r13d
0000000000002639	testq	%rdi,%rdi
000000000000263c	je	0x000026f0
0000000000002642	cmpq	$__mh_dylib_header,0x00001bbe(%rip)
000000000000264a	jne	0x00002678
000000000000264c	movq	0x00001bbd(%rip),%rax
0000000000002653	testq	%rax,%rax
0000000000002656	je	0x0000265e
0000000000002658	cmpq	$0xfe,%rax
000000000000265c	jne	0x0000266f
000000000000265e	xorl	%eax,%eax
0000000000002660	callq	_load_cf_functions
0000000000002665	cmpq	$__mh_dylib_header,0x00001b9b(%rip)
000000000000266d	jne	0x00002678
000000000000266f	movq	0x00001a32(%rip),%rsi
0000000000002676	jmp	0x000026d4
0000000000002678	movq	%r12,%rdi
000000000000267b	call	*0x00001b37(%rip)
0000000000002681	movq	%rax,%rbx
0000000000002684	call	*0x00001b66(%rip)
000000000000268a	leaq	0x00000dcf(%rip),%rsi
0000000000002691	cmpq	%rax,%rbx
0000000000002694	jne	0x000026d4
0000000000002696	movq	%r12,%rdi
0000000000002699	call	*0x00001b99(%rip)
000000000000269f	cmpq	$0x01,%rax
00000000000026a3	jne	0x000026ae
00000000000026a5	movq	0x00001a14(%rip),%rsi
00000000000026ac	jmp	0x000026d4
00000000000026ae	movq	0x00001a13(%rip),%rsi
00000000000026b5	movq	%rax,%rdx
00000000000026b8	movl	%r13d,%edi
00000000000026bb	xorl	%eax,%eax
00000000000026bd	movq	0x00001a34(%rip),%r11
00000000000026c4	movq	0xe8(%rbp),%rbx
00000000000026c8	movq	0xf0(%rbp),%r12
00000000000026cc	movq	0xf8(%rbp),%r13
00000000000026d0	leave
00000000000026d1	jmp	*%r11
00000000000026d4	movl	%r13d,%edi
00000000000026d7	xorl	%eax,%eax
00000000000026d9	movq	0x00001a18(%rip),%r11
00000000000026e0	movq	0xe8(%rbp),%rbx
00000000000026e4	movq	0xf0(%rbp),%r12
00000000000026e8	movq	0xf8(%rbp),%r13
00000000000026ec	leave
00000000000026ed	jmp	*%r11
00000000000026f0	xorl	%eax,%eax
00000000000026f2	movq	0xe8(%rbp),%rbx
00000000000026f6	movq	0xf0(%rbp),%r12
00000000000026fa	movq	0xf8(%rbp),%r13
00000000000026fe	leave
00000000000026ff	ret
_Xcode_CFBitVectorSummary:
0000000000002700	pushq	%rbp
0000000000002701	movq	%rsp,%rbp
0000000000002704	movq	%rbx,0xd8(%rbp)
0000000000002708	movq	%r12,0xe0(%rbp)
000000000000270c	movq	%r13,0xe8(%rbp)
0000000000002710	movq	%r14,0xf0(%rbp)
0000000000002714	movq	%r15,0xf8(%rbp)
0000000000002718	subq	$0x40,%rsp
000000000000271c	movq	%rdi,%r15
000000000000271f	movl	%esi,0xcc(%rbp)
0000000000002722	xorl	%eax,%eax
0000000000002724	testq	%rdi,%rdi
0000000000002727	je	0x00002876
000000000000272d	cmpq	$__mh_dylib_header,0x00001ad3(%rip)
0000000000002735	jne	0x00002766
0000000000002737	movq	0x00001ad2(%rip),%rax
000000000000273e	testq	%rax,%rax
0000000000002741	je	0x00002749
0000000000002743	cmpq	$0xfe,%rax
0000000000002747	jne	0x0000275a
0000000000002749	xorl	%eax,%eax
000000000000274b	callq	_load_cf_functions
0000000000002750	cmpq	$__mh_dylib_header,0x00001ab0(%rip)
0000000000002758	jne	0x00002766
000000000000275a	movq	0x00001947(%rip),%rsi
0000000000002761	jmp	0x00002852
0000000000002766	movq	%r15,%rdi
0000000000002769	call	*0x00001a49(%rip)
000000000000276f	movq	%rax,%rbx
0000000000002772	call	*0x00001a70(%rip)
0000000000002778	leaq	0x00000d19(%rip),%rsi
000000000000277f	cmpq	%rax,%rbx
0000000000002782	jne	0x00002852
0000000000002788	movq	%r15,%rdi
000000000000278b	call	*0x00001ac7(%rip)
0000000000002791	movq	%rax,%r13
0000000000002794	sarq	$0x3f,%rax
0000000000002798	shrq	$0x3e,%rax
000000000000279c	leaq	__mh_dylib_header(%r13,%rax),%rdx
00000000000027a1	andl	$0x03,%edx
00000000000027a4	subq	%rax,%rdx
00000000000027a7	leaq	0x01(%r13,%rdx),%rsi
00000000000027ac	addq	%rsi,%rsi
00000000000027af	movl	0xcc(%rbp),%edi
00000000000027b2	call	*0x00001928(%rip)
00000000000027b8	movq	%rax,%r14
00000000000027bb	xorl	%ebx,%ebx
00000000000027bd	xorl	%r12d,%r12d
00000000000027c0	testq	%rax,%rax
00000000000027c3	jne	0x0000280c
00000000000027c5	jmp	0x00002820
00000000000027c7	movq	%r13,%rax
00000000000027ca	subq	%r12,%rax
00000000000027cd	testb	$0x03,%al
00000000000027cf	jne	0x000027e1
00000000000027d1	testl	%ebx,%ebx
00000000000027d3	jle	0x000027e1
00000000000027d5	movslq	%ebx,%rax
00000000000027d8	movw	$0x0020,(%r14,%rax,2)
00000000000027df	incl	%ebx
00000000000027e1	movq	%r12,%rsi
00000000000027e4	movq	%r15,%rdi
00000000000027e7	call	*0x00001a5b(%rip)
00000000000027ed	testl	%eax,%eax
00000000000027ef	je	0x000027fd
00000000000027f1	movslq	%ebx,%rax
00000000000027f4	movw	$0x0031,(%r14,%rax,2)
00000000000027fb	jmp	0x00002807
00000000000027fd	movslq	%ebx,%rax
0000000000002800	movw	$0x0030,(%r14,%rax,2)
0000000000002807	incl	%ebx
0000000000002809	incq	%r12
000000000000280c	cmpq	%r12,%r13
000000000000280f	jg	0x000027c7
0000000000002811	movslq	%ebx,%rax
0000000000002814	movw	$__mh_dylib_header,(%r14,%rax,2)
000000000000281b	movq	%r14,%rax
000000000000281e	jmp	0x00002876
0000000000002820	leaq	0x00000c59(%rip),%rdx
0000000000002827	leaq	0x000006aa(%rip),%rsi
000000000000282e	movl	0xcc(%rbp),%edi
0000000000002831	xorl	%eax,%eax
0000000000002833	movq	0x000018be(%rip),%r11
000000000000283a	movq	0xd8(%rbp),%rbx
000000000000283e	movq	0xe0(%rbp),%r12
0000000000002842	movq	0xe8(%rbp),%r13
0000000000002846	movq	0xf0(%rbp),%r14
000000000000284a	movq	0xf8(%rbp),%r15
000000000000284e	leave
000000000000284f	jmp	*%r11
0000000000002852	movl	0xcc(%rbp),%edi
0000000000002855	xorl	%eax,%eax
0000000000002857	movq	0x0000189a(%rip),%r11
000000000000285e	movq	0xd8(%rbp),%rbx
0000000000002862	movq	0xe0(%rbp),%r12
0000000000002866	movq	0xe8(%rbp),%r13
000000000000286a	movq	0xf0(%rbp),%r14
000000000000286e	movq	0xf8(%rbp),%r15
0000000000002872	leave
0000000000002873	jmp	*%r11
0000000000002876	movq	0xd8(%rbp),%rbx
000000000000287a	movq	0xe0(%rbp),%r12
000000000000287e	movq	0xe8(%rbp),%r13
0000000000002882	movq	0xf0(%rbp),%r14
0000000000002886	movq	0xf8(%rbp),%r15
000000000000288a	leave
000000000000288b	ret
_Xcode_CFBinaryHeapSummary:
000000000000288c	pushq	%rbp
000000000000288d	movq	%rsp,%rbp
0000000000002890	movq	%rbx,0xe8(%rbp)
0000000000002894	movq	%r12,0xf0(%rbp)
0000000000002898	movq	%r13,0xf8(%rbp)
000000000000289c	subq	$0x20,%rsp
00000000000028a0	movq	%rdi,%r12
00000000000028a3	movl	%esi,%r13d
00000000000028a6	testq	%rdi,%rdi
00000000000028a9	je	0x0000295d
00000000000028af	cmpq	$__mh_dylib_header,0x00001951(%rip)
00000000000028b7	jne	0x000028e5
00000000000028b9	movq	0x00001950(%rip),%rax
00000000000028c0	testq	%rax,%rax
00000000000028c3	je	0x000028cb
00000000000028c5	cmpq	$0xfe,%rax
00000000000028c9	jne	0x000028dc
00000000000028cb	xorl	%eax,%eax
00000000000028cd	callq	_load_cf_functions
00000000000028d2	cmpq	$__mh_dylib_header,0x0000192e(%rip)
00000000000028da	jne	0x000028e5
00000000000028dc	movq	0x000017c5(%rip),%rsi
00000000000028e3	jmp	0x00002941
00000000000028e5	movq	%r12,%rdi
00000000000028e8	call	*0x000018ca(%rip)
00000000000028ee	movq	%rax,%rbx
00000000000028f1	call	*0x000018e9(%rip)
00000000000028f7	leaq	0x00000bba(%rip),%rsi
00000000000028fe	cmpq	%rax,%rbx
0000000000002901	jne	0x00002941
0000000000002903	movq	%r12,%rdi
0000000000002906	call	*0x0000196c(%rip)
000000000000290c	cmpq	$0x01,%rax
0000000000002910	jne	0x0000291b
0000000000002912	movq	0x00001797(%rip),%rsi
0000000000002919	jmp	0x00002941
000000000000291b	movq	0x00001796(%rip),%rsi
0000000000002922	movq	%rax,%rdx
0000000000002925	movl	%r13d,%edi
0000000000002928	xorl	%eax,%eax
000000000000292a	movq	0x000017c7(%rip),%r11
0000000000002931	movq	0xe8(%rbp),%rbx
0000000000002935	movq	0xf0(%rbp),%r12
0000000000002939	movq	0xf8(%rbp),%r13
000000000000293d	leave
000000000000293e	jmp	*%r11
0000000000002941	movl	%r13d,%edi
0000000000002944	xorl	%eax,%eax
0000000000002946	movq	0x000017ab(%rip),%r11
000000000000294d	movq	0xe8(%rbp),%rbx
0000000000002951	movq	0xf0(%rbp),%r12
0000000000002955	movq	0xf8(%rbp),%r13
0000000000002959	leave
000000000000295a	jmp	*%r11
000000000000295d	xorl	%eax,%eax
000000000000295f	movq	0xe8(%rbp),%rbx
0000000000002963	movq	0xf0(%rbp),%r12
0000000000002967	movq	0xf8(%rbp),%r13
000000000000296b	leave
000000000000296c	ret
_Xcode_CFBagSummary:
000000000000296d	pushq	%rbp
000000000000296e	movq	%rsp,%rbp
0000000000002971	movq	%rbx,0xe8(%rbp)
0000000000002975	movq	%r12,0xf0(%rbp)
0000000000002979	movq	%r13,0xf8(%rbp)
000000000000297d	subq	$0x20,%rsp
0000000000002981	movq	%rdi,%r12
0000000000002984	movl	%esi,%r13d
0000000000002987	testq	%rdi,%rdi
000000000000298a	je	0x00002a3e
0000000000002990	cmpq	$__mh_dylib_header,0x00001870(%rip)
0000000000002998	jne	0x000029c6
000000000000299a	movq	0x0000186f(%rip),%rax
00000000000029a1	testq	%rax,%rax
00000000000029a4	je	0x000029ac
00000000000029a6	cmpq	$0xfe,%rax
00000000000029aa	jne	0x000029bd
00000000000029ac	xorl	%eax,%eax
00000000000029ae	callq	_load_cf_functions
00000000000029b3	cmpq	$__mh_dylib_header,0x0000184d(%rip)
00000000000029bb	jne	0x000029c6
00000000000029bd	movq	0x000016e4(%rip),%rsi
00000000000029c4	jmp	0x00002a22
00000000000029c6	movq	%r12,%rdi
00000000000029c9	call	*0x000017e9(%rip)
00000000000029cf	movq	%rax,%rbx
00000000000029d2	call	*0x00001800(%rip)
00000000000029d8	leaq	0x00000af9(%rip),%rsi
00000000000029df	cmpq	%rax,%rbx
00000000000029e2	jne	0x00002a22
00000000000029e4	movq	%r12,%rdi
00000000000029e7	call	*0x0000187b(%rip)
00000000000029ed	cmpq	$0x01,%rax
00000000000029f1	jne	0x000029fc
00000000000029f3	movq	0x000016b6(%rip),%rsi
00000000000029fa	jmp	0x00002a22
00000000000029fc	movq	0x000016b5(%rip),%rsi
0000000000002a03	movq	%rax,%rdx
0000000000002a06	movl	%r13d,%edi
0000000000002a09	xorl	%eax,%eax
0000000000002a0b	movq	0x000016e6(%rip),%r11
0000000000002a12	movq	0xe8(%rbp),%rbx
0000000000002a16	movq	0xf0(%rbp),%r12
0000000000002a1a	movq	0xf8(%rbp),%r13
0000000000002a1e	leave
0000000000002a1f	jmp	*%r11
0000000000002a22	movl	%r13d,%edi
0000000000002a25	xorl	%eax,%eax
0000000000002a27	movq	0x000016ca(%rip),%r11
0000000000002a2e	movq	0xe8(%rbp),%rbx
0000000000002a32	movq	0xf0(%rbp),%r12
0000000000002a36	movq	0xf8(%rbp),%r13
0000000000002a3a	leave
0000000000002a3b	jmp	*%r11
0000000000002a3e	xorl	%eax,%eax
0000000000002a40	movq	0xe8(%rbp),%rbx
0000000000002a44	movq	0xf0(%rbp),%r12
0000000000002a48	movq	0xf8(%rbp),%r13
0000000000002a4c	leave
0000000000002a4d	ret
_Xcode_CFArraySummary:
0000000000002a4e	pushq	%rbp
0000000000002a4f	movq	%rsp,%rbp
0000000000002a52	movq	%rbx,0xe8(%rbp)
0000000000002a56	movq	%r12,0xf0(%rbp)
0000000000002a5a	movq	%r13,0xf8(%rbp)
0000000000002a5e	subq	$0x20,%rsp
0000000000002a62	movq	%rdi,%r12
0000000000002a65	movl	%esi,%r13d
0000000000002a68	testq	%rdi,%rdi
0000000000002a6b	je	0x00002b1f
0000000000002a71	cmpq	$__mh_dylib_header,0x0000178f(%rip)
0000000000002a79	jne	0x00002aa7
0000000000002a7b	movq	0x0000178e(%rip),%rax
0000000000002a82	testq	%rax,%rax
0000000000002a85	je	0x00002a8d
0000000000002a87	cmpq	$0xfe,%rax
0000000000002a8b	jne	0x00002a9e
0000000000002a8d	xorl	%eax,%eax
0000000000002a8f	callq	_load_cf_functions
0000000000002a94	cmpq	$__mh_dylib_header,0x0000176c(%rip)
0000000000002a9c	jne	0x00002aa7
0000000000002a9e	movq	0x00001603(%rip),%rsi
0000000000002aa5	jmp	0x00002b03
0000000000002aa7	movq	%r12,%rdi
0000000000002aaa	call	*0x00001708(%rip)
0000000000002ab0	movq	%rax,%rbx
0000000000002ab3	call	*0x00001717(%rip)
0000000000002ab9	leaq	0x00000a31(%rip),%rsi
0000000000002ac0	cmpq	%rax,%rbx
0000000000002ac3	jne	0x00002b03
0000000000002ac5	movq	%r12,%rdi
0000000000002ac8	call	*0x00001792(%rip)
0000000000002ace	cmpq	$0x01,%rax
0000000000002ad2	jne	0x00002add
0000000000002ad4	movq	0x000015d5(%rip),%rsi
0000000000002adb	jmp	0x00002b03
0000000000002add	movq	0x000015d4(%rip),%rsi
0000000000002ae4	movq	%rax,%rdx
0000000000002ae7	movl	%r13d,%edi
0000000000002aea	xorl	%eax,%eax
0000000000002aec	movq	0x00001605(%rip),%r11
0000000000002af3	movq	0xe8(%rbp),%rbx
0000000000002af7	movq	0xf0(%rbp),%r12
0000000000002afb	movq	0xf8(%rbp),%r13
0000000000002aff	leave
0000000000002b00	jmp	*%r11
0000000000002b03	movl	%r13d,%edi
0000000000002b06	xorl	%eax,%eax
0000000000002b08	movq	0x000015e9(%rip),%r11
0000000000002b0f	movq	0xe8(%rbp),%rbx
0000000000002b13	movq	0xf0(%rbp),%r12
0000000000002b17	movq	0xf8(%rbp),%r13
0000000000002b1b	leave
0000000000002b1c	jmp	*%r11
0000000000002b1f	xorl	%eax,%eax
0000000000002b21	movq	0xe8(%rbp),%rbx
0000000000002b25	movq	0xf0(%rbp),%r12
0000000000002b29	movq	0xf8(%rbp),%r13
0000000000002b2d	leave
0000000000002b2e	ret
_Xcode_CFDataSummary:
0000000000002b2f	pushq	%rbp
0000000000002b30	movq	%rsp,%rbp
0000000000002b33	movq	%rbx,0xe8(%rbp)
0000000000002b37	movq	%r12,0xf0(%rbp)
0000000000002b3b	movq	%r13,0xf8(%rbp)
0000000000002b3f	subq	$0x20,%rsp
0000000000002b43	movq	%rdi,%r12
0000000000002b46	movl	%esi,%r13d
0000000000002b49	testq	%rdi,%rdi
0000000000002b4c	je	0x00002bfe
0000000000002b52	cmpq	$__mh_dylib_header,0x000016ae(%rip)
0000000000002b5a	jne	0x00002b88
0000000000002b5c	movq	0x000016ad(%rip),%rax
0000000000002b63	testq	%rax,%rax
0000000000002b66	je	0x00002b6e
0000000000002b68	cmpq	$0xfe,%rax
0000000000002b6c	jne	0x00002b7f
0000000000002b6e	xorl	%eax,%eax
0000000000002b70	callq	_load_cf_functions
0000000000002b75	cmpq	$__mh_dylib_header,0x0000168b(%rip)
0000000000002b7d	jne	0x00002b88
0000000000002b7f	movq	0x00001522(%rip),%rsi
0000000000002b86	jmp	0x00002be2
0000000000002b88	movq	%r12,%rdi
0000000000002b8b	call	*0x00001627(%rip)
0000000000002b91	movq	%rax,%rbx
0000000000002b94	call	*0x0000162e(%rip)
0000000000002b9a	leaq	0x0000097b(%rip),%rsi
0000000000002ba1	cmpq	%rax,%rbx
0000000000002ba4	jne	0x00002be2
0000000000002ba6	movq	%r12,%rdi
0000000000002ba9	call	*0x000016d9(%rip)
0000000000002baf	leaq	0x00000956(%rip),%rsi
0000000000002bb6	cmpq	$0x01,%rax
0000000000002bba	je	0x00002be2
0000000000002bbc	movq	%rax,%rdx
0000000000002bbf	leaq	0x0000094d(%rip),%rsi
0000000000002bc6	movl	%r13d,%edi
0000000000002bc9	xorl	%eax,%eax
0000000000002bcb	movq	0x00001526(%rip),%r11
0000000000002bd2	movq	0xe8(%rbp),%rbx
0000000000002bd6	movq	0xf0(%rbp),%r12
0000000000002bda	movq	0xf8(%rbp),%r13
0000000000002bde	leave
0000000000002bdf	jmp	*%r11
0000000000002be2	movl	%r13d,%edi
0000000000002be5	xorl	%eax,%eax
0000000000002be7	movq	0x0000150a(%rip),%r11
0000000000002bee	movq	0xe8(%rbp),%rbx
0000000000002bf2	movq	0xf0(%rbp),%r12
0000000000002bf6	movq	0xf8(%rbp),%r13
0000000000002bfa	leave
0000000000002bfb	jmp	*%r11
0000000000002bfe	xorl	%eax,%eax
0000000000002c00	movq	0xe8(%rbp),%rbx
0000000000002c04	movq	0xf0(%rbp),%r12
0000000000002c08	movq	0xf8(%rbp),%r13
0000000000002c0c	leave
0000000000002c0d	ret
_Xcode_CFTypeRefSummary:
0000000000002c0e	pushq	%rbp
0000000000002c0f	movq	%rsp,%rbp
0000000000002c12	movq	%rbx,0xe0(%rbp)
0000000000002c16	movq	%r12,0xe8(%rbp)
0000000000002c1a	movq	%r13,0xf0(%rbp)
0000000000002c1e	movq	%r14,0xf8(%rbp)
0000000000002c22	subq	$0x20,%rsp
0000000000002c26	movq	%rdi,%r12
0000000000002c29	movl	%esi,%r13d
0000000000002c2c	testq	%rdi,%rdi
0000000000002c2f	je	0x00002e65
0000000000002c35	cmpq	$__mh_dylib_header,0x000015cb(%rip)
0000000000002c3d	jne	0x00002c6e
0000000000002c3f	movq	0x000015ca(%rip),%rax
0000000000002c46	testq	%rax,%rax
0000000000002c49	je	0x00002c51
0000000000002c4b	cmpq	$0xfe,%rax
0000000000002c4f	jne	0x00002c62
0000000000002c51	xorl	%eax,%eax
0000000000002c53	callq	_load_cf_functions
0000000000002c58	cmpq	$__mh_dylib_header,0x000015a8(%rip)
0000000000002c60	jne	0x00002c6e
0000000000002c62	movq	0x0000143f(%rip),%rsi
0000000000002c69	jmp	0x00002e42
0000000000002c6e	movq	%r12,%rdi
0000000000002c71	callq	_CoreFoundationTypeRefIsValid
0000000000002c76	movq	%rax,%r14
0000000000002c79	testq	%rax,%rax
0000000000002c7c	je	0x00002e3b
0000000000002c82	movq	%r12,%rdi
0000000000002c85	call	*0x0000152d(%rip)
0000000000002c8b	movq	%rax,%rbx
0000000000002c8e	call	*0x0000152c(%rip)
0000000000002c94	cmpq	%rax,%rbx
0000000000002c97	jne	0x00002cb8
0000000000002c99	movl	%r13d,%esi
0000000000002c9c	movq	%r12,%rdi
0000000000002c9f	movq	(%rsp),%rbx
0000000000002ca3	movq	0x08(%rsp),%r12
0000000000002ca8	movq	0x10(%rsp),%r13
0000000000002cad	movq	0x18(%rsp),%r14
0000000000002cb2	leave
0000000000002cb3	jmp	_Xcode_CFStringSummary
0000000000002cb8	call	*0x0000150a(%rip)
0000000000002cbe	cmpq	%rax,%rbx
0000000000002cc1	jne	0x00002ce2
0000000000002cc3	movl	%r13d,%esi
0000000000002cc6	movq	%r12,%rdi
0000000000002cc9	movq	(%rsp),%rbx
0000000000002ccd	movq	0x08(%rsp),%r12
0000000000002cd2	movq	0x10(%rsp),%r13
0000000000002cd7	movq	0x18(%rsp),%r14
0000000000002cdc	leave
0000000000002cdd	jmp	_Xcode_CFDataSummary
0000000000002ce2	call	*0x000014e8(%rip)
0000000000002ce8	cmpq	%rax,%rbx
0000000000002ceb	jne	0x00002d0c
0000000000002ced	movl	%r13d,%esi
0000000000002cf0	movq	%r12,%rdi
0000000000002cf3	movq	(%rsp),%rbx
0000000000002cf7	movq	0x08(%rsp),%r12
0000000000002cfc	movq	0x10(%rsp),%r13
0000000000002d01	movq	0x18(%rsp),%r14
0000000000002d06	leave
0000000000002d07	jmp	_Xcode_CFArraySummary
0000000000002d0c	call	*0x000014c6(%rip)
0000000000002d12	cmpq	%rax,%rbx
0000000000002d15	jne	0x00002d36
0000000000002d17	movl	%r13d,%esi
0000000000002d1a	movq	%r12,%rdi
0000000000002d1d	movq	(%rsp),%rbx
0000000000002d21	movq	0x08(%rsp),%r12
0000000000002d26	movq	0x10(%rsp),%r13
0000000000002d2b	movq	0x18(%rsp),%r14
0000000000002d30	leave
0000000000002d31	jmp	_Xcode_CFBagSummary
0000000000002d36	call	*0x000014a4(%rip)
0000000000002d3c	cmpq	%rax,%rbx
0000000000002d3f	jne	0x00002d60
0000000000002d41	movl	%r13d,%esi
0000000000002d44	movq	%r12,%rdi
0000000000002d47	movq	(%rsp),%rbx
0000000000002d4b	movq	0x08(%rsp),%r12
0000000000002d50	movq	0x10(%rsp),%r13
0000000000002d55	movq	0x18(%rsp),%r14
0000000000002d5a	leave
0000000000002d5b	jmp	_Xcode_CFBinaryHeapSummary
0000000000002d60	call	*0x00001482(%rip)
0000000000002d66	cmpq	%rax,%rbx
0000000000002d69	jne	0x00002d8a
0000000000002d6b	movl	%r13d,%esi
0000000000002d6e	movq	%r12,%rdi
0000000000002d71	movq	(%rsp),%rbx
0000000000002d75	movq	0x08(%rsp),%r12
0000000000002d7a	movq	0x10(%rsp),%r13
0000000000002d7f	movq	0x18(%rsp),%r14
0000000000002d84	leave
0000000000002d85	jmp	_Xcode_CFBitVectorSummary
0000000000002d8a	call	*0x00001460(%rip)
0000000000002d90	cmpq	%rax,%rbx
0000000000002d93	jne	0x00002db4
0000000000002d95	movl	%r13d,%esi
0000000000002d98	movq	%r12,%rdi
0000000000002d9b	movq	(%rsp),%rbx
0000000000002d9f	movq	0x08(%rsp),%r12
0000000000002da4	movq	0x10(%rsp),%r13
0000000000002da9	movq	0x18(%rsp),%r14
0000000000002dae	leave
0000000000002daf	jmp	_Xcode_CFDictionarySummary
0000000000002db4	call	*0x0000143e(%rip)
0000000000002dba	cmpq	%rax,%rbx
0000000000002dbd	jne	0x00002dde
0000000000002dbf	movl	%r13d,%esi
0000000000002dc2	movq	%r12,%rdi
0000000000002dc5	movq	(%rsp),%rbx
0000000000002dc9	movq	0x08(%rsp),%r12
0000000000002dce	movq	0x10(%rsp),%r13
0000000000002dd3	movq	0x18(%rsp),%r14
0000000000002dd8	leave
0000000000002dd9	jmp	_Xcode_CFSetSummary
0000000000002dde	call	*0x0000141c(%rip)
0000000000002de4	cmpq	%rax,%rbx
0000000000002de7	jne	0x00002e08
0000000000002de9	movl	%r13d,%esi
0000000000002dec	movq	%r12,%rdi
0000000000002def	movq	(%rsp),%rbx
0000000000002df3	movq	0x08(%rsp),%r12
0000000000002df8	movq	0x10(%rsp),%r13
0000000000002dfd	movq	0x18(%rsp),%r14
0000000000002e02	leave
0000000000002e03	jmp	_Xcode_CFTimeZoneSummary
0000000000002e08	cmpb	$__mh_dylib_header,(%r14)
0000000000002e0c	je	0x00002e3b
0000000000002e0e	movq	%r14,%rdx
0000000000002e11	leaq	0x0000071e(%rip),%rsi
0000000000002e18	movl	%r13d,%edi
0000000000002e1b	xorl	%eax,%eax
0000000000002e1d	movq	0x000012d4(%rip),%r11
0000000000002e24	movq	(%rsp),%rbx
0000000000002e28	movq	0x08(%rsp),%r12
0000000000002e2d	movq	0x10(%rsp),%r13
0000000000002e32	movq	0x18(%rsp),%r14
0000000000002e37	leave
0000000000002e38	jmp	*%r11
0000000000002e3b	leaq	0x0000070f(%rip),%rsi
0000000000002e42	movl	%r13d,%edi
0000000000002e45	xorl	%eax,%eax
0000000000002e47	movq	0x000012aa(%rip),%r11
0000000000002e4e	movq	(%rsp),%rbx
0000000000002e52	movq	0x08(%rsp),%r12
0000000000002e57	movq	0x10(%rsp),%r13
0000000000002e5c	movq	0x18(%rsp),%r14
0000000000002e61	leave
0000000000002e62	jmp	*%r11
0000000000002e65	xorl	%eax,%eax
0000000000002e67	movq	(%rsp),%rbx
0000000000002e6b	movq	0x08(%rsp),%r12
0000000000002e70	movq	0x10(%rsp),%r13
0000000000002e75	movq	0x18(%rsp),%r14
0000000000002e7a	leave
0000000000002e7b	ret
