<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF varobj.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for varobj.c of gdb.cxref.
<author>cxref

<sect>File varobj.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>c_make_name_of_child()  :  varobj.c
<item>c_number_of_children()  :  varobj.c
<item>c_path_expr_of_child()  :  varobj.c
<item>c_type_of_child()  :  varobj.c
<item>c_value_of_child()  :  varobj.c
<item>c_value_of_root()  :  varobj.c
<item>c_value_of_variable()  :  varobj.c
<item>c_variable_editable()  :  varobj.c
<item>cplus_make_name_of_child()  :  varobj.c
<item>cplus_number_of_children()  :  varobj.c
<item>cplus_path_expr_of_child()  :  varobj.c
<item>cplus_type_of_child()  :  varobj.c
<item>cplus_value_of_child()  :  varobj.c
<item>cplus_value_of_root()  :  varobj.c
<item>cplus_value_of_variable()  :  varobj.c
<item>cplus_variable_editable()  :  varobj.c
<item>java_make_name_of_child()  :  varobj.c
<item>java_number_of_children()  :  varobj.c
<item>java_path_expr_of_child()  :  varobj.c
<item>java_type_of_child()  :  varobj.c
<item>java_value_of_child()  :  varobj.c
<item>java_value_of_root()  :  varobj.c
<item>java_value_of_variable()  :  varobj.c
<item>java_variable_editable()  :  varobj.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;cp-abi.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;wrapper.h&quot;</tt>
<itemize>
<item><tt>#include &quot;gdb.h&quot;</tt>
<item><tt>#include &quot;varobj.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;math.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;varobj.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;parser-defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define VAROBJ_TABLE_SIZE 227</tt><newline>
<p>
<tt>#define CPLUS_FAKE_CHILD( x )</tt><newline>

<sect1>Type struct varobj_root

<p>
<itemize>
<item><tt>struct varobj_root</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct expression* exp;</tt><newline>
<item><tt>struct block* valid_block;</tt><newline>
<item><tt>struct frame_id frame;</tt><newline>
<item><tt>int use_selected_frame;</tt><newline>
<item><tt>int in_scope;</tt><newline>
<item><tt>struct language_specific* lang;</tt><newline>
<item><tt>struct varobj* rootvar;</tt><newline>
<item><tt>struct varobj_root* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type enum varobj_join_type

<p>
<itemize>
<item><tt>enum varobj_join_type</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>VAROBJ_AS_DUNNO;</tt><newline>
<item><tt>VAROBJ_AS_STRUCT;</tt><newline>
<item><tt>VAROBJ_AS_PTR_TO_SCALAR;</tt><newline>
<item><tt>VAROBJ_AS_PTR_TO_STRUCT;</tt><newline>
<item><tt>VAROBJ_AS_ARRAY;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct varobj

<p>
<itemize>
<item><tt>struct varobj</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>char* name;</tt><newline>
<item><tt>char* path_expr;</tt><newline>
<item><tt>enum varobj_join_type join_in_expr;</tt><newline>
<item><tt>int elide_in_expr;</tt><newline>
<item><tt>char* obj_name;</tt><newline>
<item><tt>int index;</tt><newline>
<item><tt>struct type* type;</tt><newline>
<item><tt>struct type* dynamic_type;</tt><newline>
<item><tt>char* dynamic_type_name;</tt><newline>
<item><tt>struct value* value;</tt><newline>
<item><tt>int error;</tt><newline>
<item><tt>int num_children;</tt><newline>
<item><tt>struct varobj* parent;</tt><newline>
<item><tt>struct varobj_child* children;</tt><newline>
<item><tt>int fake_child;</tt><newline>
<item><tt>struct varobj_root* root;</tt><newline>
<item><tt>enum varobj_display_formats format;</tt><newline>
<item><tt>int updated;</tt><newline>
<item><tt>struct objfile_hitlist* hitlist;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct varobj_child

<p>
<itemize>
<item><tt>struct varobj_child</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct varobj* child;</tt><newline>
<item><tt>struct varobj_child* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct vstack

<p>
<itemize>
<item><tt>struct vstack</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct varobj* var;</tt><newline>
<item><tt>struct vstack* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct cpstack

<p>
<itemize>
<item><tt>struct cpstack</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>char* name;</tt><newline>
<item><tt>struct cpstack* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct vlist

<p>
<itemize>
<item><tt>struct vlist</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct varobj* var;</tt><newline>
<item><tt>struct vlist* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct varobj_changelist_elem

<p>
<itemize>
<item><tt>struct varobj_changelist_elem</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct varobj* var;</tt><newline>
<item><tt>enum varobj_type_change type_changed;</tt><newline>
<item><tt>struct varobj_changelist_elem* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct varobj_changelist

<p>
<itemize>
<item><tt>struct varobj_changelist</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct varobj_changelist_elem* tail;</tt><newline>
<item><tt>struct varobj_changelist_elem* head;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct language_specific

<p>
<itemize>
<item><tt>struct language_specific</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>enum varobj_languages language;</tt><newline>
<item><tt>int (*number_of_children)(struct varobj* parent);</tt><newline>
<item><tt>const char* (*make_name_of_child)(struct varobj* parent,int index);</tt><newline>
<item><tt>char* (*path_expr_of_child)(struct varobj* parent,int index);</tt><newline>
<item><tt>struct value* (*value_of_root)(struct varobj** root_handle,enum varobj_type_change* type_changed);</tt><newline>
<item><tt>struct value* (*value_of_child)(struct varobj* parent,int index,int* lookup_dynamic_type);</tt><newline>
<item><tt>struct type* (*type_of_child)(struct varobj* parent,int index);</tt><newline>
<item><tt>int (*variable_editable)(struct varobj* var);</tt><newline>
<item><tt>char* (*value_of_variable)(struct varobj* var);</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type enum vsections

<p>
<itemize>
<item><tt>enum vsections</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>v_public;</tt><newline>
<item><tt>v_private;</tt><newline>
<item><tt>v_protected;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable varobj_format_string

<p>
<tt>const char* varobj_format_string[]</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
<item>gdbtypes.c
<item>objfiles.c
<item>thread.c
<item>varobj.c
<item>wrapper.c
</itemize>
</descrip>

<sect1>Global Variable varobj_language_string

<p>
<tt>const char* varobj_language_string[]</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
<item>gdbtypes.c
<item>objfiles.c
<item>thread.c
<item>varobj.c
<item>wrapper.c
</itemize>
</descrip>

<sect1>Global Variable varobjdebug

<p>
<tt>int varobjdebug</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_varobj()  :  varobj.c
<item>uninstall_variable()  :  varobj.c
<item>varobj_update()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Variable varobj_runs_all_threads

<p>
<tt>int varobj_runs_all_threads</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_varobj()  :  varobj.c
<item>varobj_create()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>varobj_use_dynamic_type</bf><newline>
<tt>static int varobj_use_dynamic_type</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_varobj()
<item>c_value_of_root()
<item>cplus_path_expr_of_child()
<item>get_type()
<item>path_expr_of_root()
<item>value_of_child()
<item>varobj_create()
</itemize>
</descrip>
<p>
<bf>languages</bf><newline>
<tt>static struct language_specific languages[vlang_end][sizeof(struct language_specific)]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>varobj_create()
</itemize>
</descrip>
<p>
<bf>format_code</bf><newline>
<tt>static int format_code[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_value_of_variable()
</itemize>
</descrip>
<p>
<bf>rootlist</bf><newline>
<tt>static struct varobj_root* rootlist</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>install_variable()
<item>uninstall_variable()
<item>varobj_list()
</itemize>
</descrip>
<p>
<bf>rootcount</bf><newline>
<tt>static int rootcount</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>install_variable()
<item>uninstall_variable()
<item>varobj_list()
</itemize>
</descrip>
<p>
<bf>varobj_table</bf><newline>
<tt>static struct vlist** varobj_table</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_varobj()
<item>install_variable()
<item>uninstall_variable()
<item>varobj_get_handle()
</itemize>
</descrip>

<sect1>Global Function _initialize_varobj()

<p><tt>void _initialize_varobj ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), add_setshow_boolean_cmd(), add_setshow_zinteger_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>show_varobjdebug()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>varobj_runs_all_threads  :  varobj.c
<item>varobj_table  :  varobj.c
<item>varobj_use_dynamic_type  :  varobj.c
<item>varobjdebug  :  varobj.c
<item>setdebuglist, setlist, showdebuglist, showlist
</itemize>
</descrip>

<sect1>Global Function varobj_changelist_pop()

<p><tt>struct varobj* varobj_changelist_pop ( struct varobj_changelist* changelist, enum varobj_type_change* type_changed )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
</descrip>

<sect1>Global Function varobj_create()

<p><tt>struct varobj* varobj_create ( char* objname, const char* expression, CORE_ADDR frame, struct block* block, enum varobj_type type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>discard_cleanups()  :  utils.c
<item>do_cleanups()  :  utils.c
<item>find_frame_addr_in_frame_chain()  :  varobj.c
<item>frame_find_by_id()  :  frame.c
<item>frame_id_p()  :  frame.c
<item>free_current_contents()  :  utils.c
<item>gdb_value_fetch_lazy()  :  wrapper.c
<item>get_frame_block()  :  blockframe.c
<item>get_frame_id()  :  frame.c
<item>get_frame_pc()  :  frame.c
<item>get_join_type()  :  varobj.c
<item>get_selected_frame()  :  frame.c
<item>install_variable()  :  varobj.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_free_variable()  :  varobj.c
<item>make_cleanup_objfile_init_clear_hitlist()  :  objfiles.c
<item>make_cleanup_set_restore_scheduler_locking_mode()  :  utils.c
<item>new_root_variable()  :  varobj.c
<item>objfile_detach_hitlist()  :  objfiles.c
<item>release_value()  :  value.c
<item>savestring()  :  utils.c
<item>select_frame()  :  frame.c
<item>value_lazy()  :  value.c
<item>value_type()  :  value.c
<item>variable_default_display()  :  varobj.c
<item>variable_language()  :  varobj.c
<item>varobj_evaluate_expression()  :  varobj.c
<item>varobj_evaluate_type()  :  varobj.c
<item>varobj_fixup_value()  :  varobj.c
<item>varobj_parse_exp_1()  :  varobj.c
<item>varobj_pc_in_valid_block_p()  :  varobj.c
<item>warning()  :  utils.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_of_root()  :  varobj.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>null_cleanup()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>block_found  :  symtab.c
<item>deprecated_selected_frame  :  frame.c
<item>innermost_block  :  parse.c
<item>languages  :  varobj.c
<item>null_frame_id  :  frame.c
<item>varobj_runs_all_threads  :  varobj.c
<item>varobj_use_dynamic_type  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function varobj_delete()

<p><tt>int varobj_delete ( struct varobj* var, char*** dellist, int only_children )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cppop()  :  varobj.c
<item>cppush()  :  varobj.c
<item>delete_variable()  :  varobj.c
<item>warning()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_value_of_root()  :  varobj.c
<item>value_of_root()  :  varobj.c
<item>varobj_delete_objfiles_vars()  :  varobj.c
<item>varobj_update()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function varobj_delete_objfiles_vars()

<p><tt>void varobj_delete_objfiles_vars ( struct objfile* ofile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>make_cleanup_ui_out_notify_begin_end()  :  ui-out.c
<item>objfile_on_hitlist_p()  :  objfiles.c
<item>ui_out_field_string()  :  ui-out.c
<item>varobj_delete()  :  varobj.c
<item>varobj_list()  :  varobj.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_objfile_internal()  :  objfiles.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function varobj_evaluate_type()

<p><tt>int varobj_evaluate_type ( struct expression* exp, struct value** value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>gdb_evaluate_type()  :  wrapper.c
<item>make_cleanup_set_restore_print_closure()  :  eval.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_create()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function varobj_gen_name()

<p><tt>char* varobj_gen_name ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xstrprintf()  :  utils.c
</itemize>
</descrip>

<sect1>Global Function varobj_get_attributes()

<p><tt>int varobj_get_attributes ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>variable_editable()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function varobj_get_display_format()

<p><tt>enum varobj_display_formats varobj_get_display_format ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
</descrip>

<sect1>Global Function varobj_get_dynamic_type()

<p><tt>char* varobj_get_dynamic_type ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>type_sprint()  :  typeprint.c
<item>value_type()  :  value.c
<item>value_zero()  :  valops.c
<item>xstrdup()
</itemize>
</descrip>

<sect1>Global Function varobj_get_expression()

<p><tt>char* varobj_get_expression ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>name_of_variable()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function varobj_get_gdb_type()

<p><tt>struct type* varobj_get_gdb_type ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
</descrip>

<sect1>Global Function varobj_get_handle()

<p><tt>struct varobj* varobj_get_handle ( char* objname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>strcmp()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>varobj_table  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function varobj_get_language()

<p><tt>enum varobj_languages varobj_get_language ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>variable_language()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function varobj_get_num_children()

<p><tt>int varobj_get_num_children ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>number_of_children()  :  varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_value_of_variable()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function varobj_get_objname()

<p><tt>char* varobj_get_objname ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
</descrip>

<sect1>Global Function varobj_get_path_expr()

<p><tt>char* varobj_get_path_expr ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>path_expr_of_variable()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function varobj_get_resolved_type()

<p><tt>char* varobj_get_resolved_type ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>varobj_get_type_internal()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function varobj_get_type()

<p><tt>char* varobj_get_type ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>varobj_get_type_internal()  :  varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_type_is_equal_p()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function varobj_get_type_internal()

<p><tt>char* varobj_get_type_internal ( struct varobj* var, int check_typedef_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>remove_all_typedefs()  :  gdbtypes.c
<item>savestring()  :  utils.c
<item>type_sprint()  :  typeprint.c
<item>value_type()  :  value.c
<item>value_zero()  :  valops.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_get_resolved_type()  :  varobj.c
<item>varobj_get_type()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function varobj_get_type_struct()

<p><tt>struct type* varobj_get_type_struct ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_type()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function varobj_get_valid_block()

<p><tt>void varobj_get_valid_block ( struct varobj* var, CORE_ADDR* start, CORE_ADDR* end )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
</descrip>

<sect1>Global Function varobj_get_value()

<p><tt>char* varobj_get_value ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>my_value_of_variable()  :  varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdb_varobj_get_value()  :  wrapper.c
</itemize>
</descrip>

<sect1>Global Function varobj_in_scope_p()

<p><tt>int varobj_in_scope_p ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
</descrip>

<sect1>Global Function varobj_is_fake_child()

<p><tt>int varobj_is_fake_child ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
</descrip>

<sect1>Global Function varobj_list()

<p><tt>int varobj_list ( struct varobj*** varlist )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>warning()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_delete_objfiles_vars()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>rootcount  :  varobj.c
<item>rootlist  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function varobj_list_children()

<p><tt>int varobj_list_children ( struct varobj* var, struct varobj*** childlist )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>child_exists()  :  varobj.c
<item>create_child()  :  varobj.c
<item>make_name_of_child()  :  varobj.c
<item>number_of_children()  :  varobj.c
<item>xmalloc()  :  utils.c
</itemize>
</descrip>

<sect1>Global Function varobj_parse_exp_1()

<p><tt>int varobj_parse_exp_1 ( const char** stringptr, struct block* block, int comma, struct expression** expression )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>gdb_parse_exp_1()  :  wrapper.c
<item>make_cleanup_set_restore_print_closure()  :  eval.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_create()  :  varobj.c
<item>varobj_set_value()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function varobj_pc_in_valid_block_p()

<p><tt>int varobj_pc_in_valid_block_p ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_contains_pc()  :  block.c
<item>frame_find_by_id()  :  frame.c
<item>frame_relative_level()  :  frame.c
<item>get_frame_pc()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_of_root()  :  varobj.c
<item>varobj_create()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function varobj_set_display_format()

<p><tt>enum varobj_display_formats varobj_set_display_format ( struct varobj* var, enum varobj_display_formats format )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>variable_default_display()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function varobj_set_value()

<p><tt>int varobj_set_value ( struct varobj* var, char* expression )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>gdb_value_assign()  :  wrapper.c
<item>make_cleanup_set_restore_scheduler_locking_mode()  :  utils.c
<item>my_value_equal()  :  varobj.c
<item>release_value()  :  value.c
<item>value_free()  :  value.c
<item>variable_editable()  :  varobj.c
<item>varobj_evaluate_expression()  :  varobj.c
<item>varobj_parse_exp_1()  :  varobj.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>input_radix  :  valprint.c
</itemize>
</descrip>

<sect1>Global Function varobj_type_is_equal_p()

<p><tt>int varobj_type_is_equal_p ( struct varobj* old_var, struct varobj* new_var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>varobj_get_type()  :  varobj.c
<item>xfree()  :  utils.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_of_root()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function varobj_update()

<p><tt>int varobj_update ( struct varobj** varp, struct varobj_changelist** changelist )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>frame_find_by_id()  :  frame.c
<item>gdb_value_fetch_lazy()  :  wrapper.c
<item>get_frame_id()  :  frame.c
<item>my_value_equal()  :  varobj.c
<item>select_frame()  :  frame.c
<item>value_free()  :  value.c
<item>value_lazy()  :  value.c
<item>value_of_child()  :  varobj.c
<item>value_of_root()  :  varobj.c
<item>varobj_add_to_changelist()  :  varobj.c
<item>varobj_changelist_init()  :  varobj.c
<item>varobj_delete()  :  varobj.c
<item>varobj_value_is_changeable_p()  :  varobj.c
<item>vpop()  :  varobj.c
<item>vpush()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>deprecated_selected_frame  :  frame.c
<item>gdb_stdlog  :  main.c
<item>varobjdebug  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function c_make_name_of_child()

<p><tt>static const char* c_make_name_of_child ( struct varobj* parent, int index )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_target_type()  :  varobj.c
<item>get_type()  :  varobj.c
<item>internal_error()  :  utils.c
<item>savestring()  :  utils.c
<item>xstrprintf()  :  utils.c
<item>strlen(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cplus_make_name_of_child()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
</descrip>

<sect1>Local Function c_number_of_children()

<p><tt>static int c_number_of_children ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_target_type()  :  varobj.c
<item>get_type()  :  varobj.c
<item>internal_error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cplus_number_of_children()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
</descrip>

<sect1>Local Function c_path_expr_of_child()

<p><tt>static char* c_path_expr_of_child ( struct varobj* parent, int index )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>child_exists()  :  varobj.c
<item>error()  :  utils.c
<item>internal_error()  :  utils.c
<item>name_of_variable()  :  varobj.c
<item>path_expr_of_variable()  :  varobj.c
<item>xmalloc()  :  utils.c
<item>__builtin___snprintf_chk(), __builtin_object_size(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cplus_path_expr_of_child()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
</descrip>

<sect1>Local Function c_type_of_child()

<p><tt>static struct type* c_type_of_child ( struct varobj* parent, int index )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>child_exists()  :  varobj.c
<item>error()  :  utils.c
<item>get_target_type()  :  varobj.c
<item>get_type()  :  varobj.c
<item>internal_error()  :  utils.c
<item>name_of_variable()  :  varobj.c
<item>varobj_lookup_struct_elt_type_by_index()  :  varobj.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cplus_type_of_child()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
</descrip>

<sect1>Local Function c_value_of_child()

<p><tt>static struct value* c_value_of_child ( struct varobj* parent, int index, int* lookup_dynamic_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>child_exists()  :  varobj.c
<item>coerce_ref()  :  value.c
<item>error()  :  utils.c
<item>gdb_value_ind()  :  wrapper.c
<item>gdb_value_subscript()  :  wrapper.c
<item>get_target_type()  :  varobj.c
<item>get_type()  :  varobj.c
<item>internal_error()  :  utils.c
<item>name_of_variable()  :  varobj.c
<item>release_value()  :  value.c
<item>value_copy()  :  value.c
<item>value_from_longest()  :  value.c
<item>varobj_value_struct_elt_by_index()  :  varobj.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cplus_value_of_child()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function c_value_of_root()

<p><tt>static struct value* c_value_of_root ( struct varobj** var_handle, enum varobj_type_change* type_changed )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>frame_find_by_id()  :  frame.c
<item>gdb_value_fetch_lazy()  :  wrapper.c
<item>make_cleanup_set_restore_scheduler_locking_mode()  :  utils.c
<item>number_of_children()  :  varobj.c
<item>reinit_frame_cache()  :  frame.c
<item>release_value()  :  value.c
<item>select_frame()  :  frame.c
<item>value_lazy()  :  value.c
<item>varobj_delete()  :  varobj.c
<item>varobj_evaluate_expression()  :  varobj.c
<item>varobj_fixup_value()  :  varobj.c
<item>xfree()  :  utils.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cplus_value_of_root()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>varobj_use_dynamic_type  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function c_value_of_variable()

<p><tt>static char* c_value_of_variable ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>common_val_print()  :  valprint.c
<item>do_cleanups()  :  utils.c
<item>gdb_value_fetch_lazy()  :  wrapper.c
<item>get_type()  :  varobj.c
<item>internal_error()  :  utils.c
<item>make_cleanup_ui_file_delete()  :  utils.c
<item>mem_fileopen()  :  ui-file.c
<item>ui_file_xstrdup()  :  ui-file.c
<item>value_lazy()  :  value.c
<item>varobj_get_num_children()  :  varobj.c
<item>xstrprintf()  :  utils.c
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cplus_value_of_variable()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>format_code  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function c_variable_editable()

<p><tt>static int c_variable_editable ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_type()  :  varobj.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cplus_variable_editable()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
</descrip>

<sect1>Local Function child_exists()

<p><tt>static struct varobj* child_exists ( struct varobj* var, int index )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_path_expr_of_child()  :  varobj.c
<item>c_type_of_child()  :  varobj.c
<item>c_value_of_child()  :  varobj.c
<item>cplus_path_expr_of_child()  :  varobj.c
<item>cplus_value_of_child()  :  varobj.c
<item>value_of_child()  :  varobj.c
<item>varobj_list_children()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function cplus_class_num_children()

<p><tt>static void cplus_class_num_children ( struct type* type, int children[3] )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cplus_make_name_of_child()  :  varobj.c
<item>cplus_number_of_children()  :  varobj.c
<item>cplus_path_expr_of_child()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function cplus_make_name_of_child()

<p><tt>static const char* cplus_make_name_of_child ( struct varobj* parent, int index )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>c_make_name_of_child()  :  varobj.c
<item>cplus_class_num_children()  :  varobj.c
<item>get_type_deref()  :  varobj.c
<item>internal_error()  :  utils.c
<item>savestring()  :  utils.c
<item>varobj_get_type_index_from_fake_child()  :  varobj.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_make_name_of_child()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function cplus_number_of_children()

<p><tt>static int cplus_number_of_children ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>c_number_of_children()  :  varobj.c
<item>cplus_class_num_children()  :  varobj.c
<item>get_type_deref()  :  varobj.c
<item>name_of_variable()  :  varobj.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_number_of_children()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function cplus_path_expr_of_child()

<p><tt>static char* cplus_path_expr_of_child ( struct varobj* parent, int index )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>c_path_expr_of_child()  :  varobj.c
<item>child_exists()  :  varobj.c
<item>cplus_class_num_children()  :  varobj.c
<item>cplus_real_type_index_for_fake_child_index()  :  varobj.c
<item>error()  :  utils.c
<item>get_type_deref()  :  varobj.c
<item>name_of_variable()  :  varobj.c
<item>path_expr_of_variable()  :  varobj.c
<item>warning()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___snprintf_chk(), __builtin_object_size(), strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_path_expr_of_child()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
<item>varobj_use_dynamic_type  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function cplus_real_type_index_for_fake_child_index()

<p><tt>static int cplus_real_type_index_for_fake_child_index ( struct type* type, enum vsections prot, int num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cplus_path_expr_of_child()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function cplus_type_of_child()

<p><tt>static struct type* cplus_type_of_child ( struct varobj* parent, int index )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>c_type_of_child()  :  varobj.c
<item>get_type_deref()  :  varobj.c
<item>internal_error()  :  utils.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>lookup_reference_type()  :  gdbtypes.c
<item>varobj_lookup_struct_elt_type_by_index()  :  varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_type_of_child()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function cplus_value_of_child()

<p><tt>static struct value* cplus_value_of_child ( struct varobj* parent, int index, int* lookup_dynamic_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>c_value_of_child()  :  varobj.c
<item>child_exists()  :  varobj.c
<item>error()  :  utils.c
<item>get_type_deref()  :  varobj.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>lookup_reference_type()  :  gdbtypes.c
<item>release_value()  :  value.c
<item>value_cast()  :  valops.c
<item>value_copy()  :  value.c
<item>value_free()  :  value.c
<item>value_type()  :  value.c
<item>varobj_value_struct_elt_by_index()  :  varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_value_of_child()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function cplus_value_of_root()

<p><tt>static struct value* cplus_value_of_root ( struct varobj** var_handle, enum varobj_type_change* type_changed )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>c_value_of_root()  :  varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_value_of_root()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
</descrip>

<sect1>Local Function cplus_value_of_variable()

<p><tt>static char* cplus_value_of_variable ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>c_value_of_variable()  :  varobj.c
<item>internal_error()  :  utils.c
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_value_of_variable()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
</descrip>

<sect1>Local Function cplus_variable_editable()

<p><tt>static int cplus_variable_editable ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>c_variable_editable()  :  varobj.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_variable_editable()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
</descrip>

<sect1>Local Function cppop()

<p><tt>static char* cppop ( struct cpstack** pstack )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_delete()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function cppush()

<p><tt>static void cppush ( struct cpstack** pstack, char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>delete_variable_1()  :  varobj.c
<item>varobj_delete()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function create_child()

<p><tt>static struct varobj* create_child ( struct varobj* parent, int index, const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_join_type()  :  varobj.c
<item>get_target_type()  :  varobj.c
<item>install_variable()  :  varobj.c
<item>new_variable()  :  varobj.c
<item>save_child_in_parent()  :  varobj.c
<item>type_of_child()  :  varobj.c
<item>value_of_child()  :  varobj.c
<item>variable_language()  :  varobj.c
<item>xstrprintf()  :  utils.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_list_children()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function delete_variable()

<p><tt>static int delete_variable ( struct cpstack** resultp, struct varobj* var, int only_children_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>delete_variable_1()  :  varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_delete()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function delete_variable_1()

<p><tt>static void delete_variable_1 ( struct cpstack** resultp, int* delcountp, struct varobj* var, int only_children_p, int remove_from_parent_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cppush()  :  varobj.c
<item>delete_variable_1()  :  varobj.c
<item>free_variable()  :  varobj.c
<item>remove_child_from_parent()  :  varobj.c
<item>uninstall_variable()  :  varobj.c
<item>xfree()  :  utils.c
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>delete_variable()  :  varobj.c
<item>delete_variable_1()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function do_free_variable_cleanup()

<p><tt>static void do_free_variable_cleanup ( void* var )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>free_variable()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_free_variable()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function find_frame_addr_in_frame_chain()

<p><tt>static struct frame_info* find_frame_addr_in_frame_chain ( CORE_ADDR frame_addr )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>get_frame_base_address()  :  frame.c
<item>get_prev_frame()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_create()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function free_variable()

<p><tt>static void free_variable ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
<item>is_root_p()  :  varobj.c
<item>value_free()  :  value.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>delete_variable_1()  :  varobj.c
<item>do_free_variable_cleanup()  :  varobj.c
<item>value_of_root()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function get_join_type()

<p><tt>static enum varobj_join_type get_join_type ( struct type* in_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>get_target_type()  :  varobj.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_child()  :  varobj.c
<item>varobj_create()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function get_target_type()

<p><tt>static struct type* get_target_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_make_name_of_child()  :  varobj.c
<item>c_number_of_children()  :  varobj.c
<item>c_type_of_child()  :  varobj.c
<item>c_value_of_child()  :  varobj.c
<item>create_child()  :  varobj.c
<item>get_join_type()  :  varobj.c
<item>get_type_deref()  :  varobj.c
<item>varobj_fixup_value()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function get_type()

<p><tt>static struct type* get_type ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_make_name_of_child()  :  varobj.c
<item>c_number_of_children()  :  varobj.c
<item>c_type_of_child()  :  varobj.c
<item>c_value_of_child()  :  varobj.c
<item>c_value_of_variable()  :  varobj.c
<item>c_variable_editable()  :  varobj.c
<item>get_type_deref()  :  varobj.c
<item>value_of_root()  :  varobj.c
<item>varobj_get_type_struct()  :  varobj.c
<item>varobj_lookup_struct_elt_type_by_index()  :  varobj.c
<item>varobj_value_is_changeable_p()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>varobj_use_dynamic_type  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function get_type_deref()

<p><tt>static struct type* get_type_deref ( struct varobj* var, int* was_ptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_target_type()  :  varobj.c
<item>get_type()  :  varobj.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cplus_make_name_of_child()  :  varobj.c
<item>cplus_number_of_children()  :  varobj.c
<item>cplus_path_expr_of_child()  :  varobj.c
<item>cplus_type_of_child()  :  varobj.c
<item>cplus_value_of_child()  :  varobj.c
<item>path_expr_of_root()  :  varobj.c
<item>varobj_get_type_index_from_fake_child()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function install_variable()

<p><tt>static int install_variable ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>is_root_p()  :  varobj.c
<item>xmalloc()  :  utils.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_child()  :  varobj.c
<item>value_of_root()  :  varobj.c
<item>varobj_create()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>rootcount  :  varobj.c
<item>rootlist  :  varobj.c
<item>varobj_table  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function is_root_p()

<p><tt>static int is_root_p ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_variable()  :  varobj.c
<item>install_variable()  :  varobj.c
<item>path_expr_of_variable()  :  varobj.c
<item>uninstall_variable()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function java_make_name_of_child()

<p><tt>static const char* java_make_name_of_child ( struct varobj* parent, int index )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cplus_make_name_of_child()  :  varobj.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
</descrip>

<sect1>Local Function java_number_of_children()

<p><tt>static int java_number_of_children ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cplus_number_of_children()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
</descrip>

<sect1>Local Function java_path_expr_of_child()

<p><tt>static char* java_path_expr_of_child ( struct varobj* parent, int index )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cplus_path_expr_of_child()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
</descrip>

<sect1>Local Function java_type_of_child()

<p><tt>static struct type* java_type_of_child ( struct varobj* parent, int index )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cplus_type_of_child()  :  varobj.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
</descrip>

<sect1>Local Function java_value_of_child()

<p><tt>static struct value* java_value_of_child ( struct varobj* parent, int index, int* lookup_dynamic_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cplus_value_of_child()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
</descrip>

<sect1>Local Function java_value_of_root()

<p><tt>static struct value* java_value_of_root ( struct varobj** var_handle, enum varobj_type_change* type_changed )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cplus_value_of_root()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
</descrip>

<sect1>Local Function java_value_of_variable()

<p><tt>static char* java_value_of_variable ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cplus_value_of_variable()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
</descrip>

<sect1>Local Function java_variable_editable()

<p><tt>static int java_variable_editable ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cplus_variable_editable()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>varobj.c
</itemize>
</descrip>

<sect1>Local Function make_cleanup_free_variable()

<p><tt>static struct cleanup* make_cleanup_free_variable ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_create()  :  varobj.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_free_variable_cleanup()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function make_name_of_child()

<p><tt>static const char* make_name_of_child ( struct varobj* var, int index )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_list_children()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function my_value_equal()

<p><tt>static int my_value_equal ( struct value* val1, struct value* volatile val2, int* error2 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdb_value_equal()  :  wrapper.c
<item>internal_error()  :  utils.c
<item>value_lazy()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_set_value()  :  varobj.c
<item>varobj_update()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function my_value_of_variable()

<p><tt>static char* my_value_of_variable ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_get_value()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function name_of_variable()

<p><tt>static char* name_of_variable ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_path_expr_of_child()  :  varobj.c
<item>c_type_of_child()  :  varobj.c
<item>c_value_of_child()  :  varobj.c
<item>cplus_number_of_children()  :  varobj.c
<item>cplus_path_expr_of_child()  :  varobj.c
<item>value_of_root()  :  varobj.c
<item>varobj_get_expression()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function new_root_variable()

<p><tt>static struct varobj* new_root_variable ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>new_variable()  :  varobj.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_create()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>null_frame_id  :  frame.c
</itemize>
</descrip>

<sect1>Local Function new_variable()

<p><tt>static struct varobj* new_variable ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_child()  :  varobj.c
<item>new_root_variable()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function number_of_children()

<p><tt>static int number_of_children ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_value_of_root()  :  varobj.c
<item>varobj_get_num_children()  :  varobj.c
<item>varobj_list_children()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function path_expr_of_child()

<p><tt>static char* path_expr_of_child ( struct varobj* var, int index )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>path_expr_of_variable()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function path_expr_of_root()

<p><tt>static char* path_expr_of_root ( struct varobj* var )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>get_type_deref()  :  varobj.c
<item>internal_error()  :  utils.c
<item>warning()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___snprintf_chk(), __builtin_object_size(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>path_expr_of_variable()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>varobj_use_dynamic_type  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function path_expr_of_variable()

<p><tt>static char* path_expr_of_variable ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>is_root_p()  :  varobj.c
<item>path_expr_of_child()  :  varobj.c
<item>path_expr_of_root()  :  varobj.c
<item>path_expr_of_variable()  :  varobj.c
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_path_expr_of_child()  :  varobj.c
<item>cplus_path_expr_of_child()  :  varobj.c
<item>path_expr_of_variable()  :  varobj.c
<item>varobj_get_path_expr()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function remove_child_from_parent()

<p><tt>static void remove_child_from_parent ( struct varobj* parent, struct varobj* child )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>delete_variable_1()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function safe_value_rtti_target_type()

<p><tt>static struct type* safe_value_rtti_target_type ( struct value* val, int* full, int* top, int* using_enc )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ui_file_new()  :  ui-file.c
<item>value_rtti_target_type()  :  valops.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_fixup_value()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stderr  :  main.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function save_child_in_parent()

<p><tt>static void save_child_in_parent ( struct varobj* parent, struct varobj* child )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_child()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function show_varobjdebug()

<p><tt>static void show_varobjdebug ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_varobj()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function type_of_child()

<p><tt>static struct type* type_of_child ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_child()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function uninstall_variable()

<p><tt>static void uninstall_variable ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>is_root_p()  :  varobj.c
<item>warning()  :  utils.c
<item>xfree()  :  utils.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>delete_variable_1()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>rootcount  :  varobj.c
<item>rootlist  :  varobj.c
<item>varobj_table  :  varobj.c
<item>varobjdebug  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function value_of_child()

<p><tt>static struct value* value_of_child ( struct varobj* parent, int index, enum varobj_type_change* type_changed )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>child_exists()  :  varobj.c
<item>error()  :  utils.c
<item>gdb_value_fetch_lazy()  :  wrapper.c
<item>release_value()  :  value.c
<item>value_free()  :  value.c
<item>value_lazy()  :  value.c
<item>varobj_fixup_value()  :  varobj.c
<item>xfree()  :  utils.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_child()  :  varobj.c
<item>varobj_update()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>varobj_use_dynamic_type  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function value_of_root()

<p><tt>static struct value* value_of_root ( struct varobj** var_handle, enum varobj_type_change* type_changed )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_id_eq()  :  frame.c
<item>free_variable()  :  varobj.c
<item>get_type()  :  varobj.c
<item>install_variable()  :  varobj.c
<item>name_of_variable()  :  varobj.c
<item>savestring()  :  utils.c
<item>varobj_create()  :  varobj.c
<item>varobj_delete()  :  varobj.c
<item>varobj_pc_in_valid_block_p()  :  varobj.c
<item>varobj_type_is_equal_p()  :  varobj.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_update()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function variable_default_display()

<p><tt>static enum varobj_display_formats variable_default_display ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_create()  :  varobj.c
<item>varobj_set_display_format()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function variable_editable()

<p><tt>static int variable_editable ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_get_attributes()  :  varobj.c
<item>varobj_set_value()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function variable_language()

<p><tt>static enum varobj_languages variable_language ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_child()  :  varobj.c
<item>varobj_create()  :  varobj.c
<item>varobj_get_language()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function varobj_add_to_changelist()

<p><tt>static void varobj_add_to_changelist ( struct varobj_changelist* changelist, struct varobj* var, enum varobj_type_change type_changed )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_update()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function varobj_changelist_init()

<p><tt>static struct varobj_changelist* varobj_changelist_init ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_update()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function varobj_evaluate_expression()

<p><tt>static int varobj_evaluate_expression ( struct expression* exp, struct value** value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>gdb_evaluate_expression()  :  wrapper.c
<item>make_cleanup_set_restore_print_closure()  :  eval.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_value_of_root()  :  varobj.c
<item>varobj_create()  :  varobj.c
<item>varobj_set_value()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function varobj_fixup_value()

<p><tt>static struct value* varobj_fixup_value ( struct value* in_value, int use_dynamic_type, struct block* block, struct type** dynamic_type_handle, char** dynamic_type_name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_set_value_type()  :  value.c
<item>gdb_value_cast()  :  wrapper.c
<item>get_closure_dynamic_type()  :  gdbtypes.c
<item>get_target_type()  :  varobj.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>lookup_reference_type()  :  gdbtypes.c
<item>safe_value_objc_target_type()  :  wrapper.c
<item>safe_value_rtti_target_type()  :  varobj.c
<item>value_copy()  :  value.c
<item>value_type()  :  value.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memmove_chk(), __builtin___strcpy_chk(), __builtin_object_size(), __inline_memmove_chk(), __inline_strcpy_chk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_value_of_root()  :  varobj.c
<item>value_of_child()  :  varobj.c
<item>varobj_create()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function varobj_get_type_index_from_fake_child()

<p><tt>static int varobj_get_type_index_from_fake_child ( struct varobj* parent, int index )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_type_deref()  :  varobj.c
<item>internal_error()  :  utils.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cplus_make_name_of_child()  :  varobj.c
<item>varobj_lookup_struct_elt_type_by_index()  :  varobj.c
<item>varobj_value_struct_elt_by_index()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function varobj_lookup_struct_elt_type_by_index()

<p><tt>static struct type* varobj_lookup_struct_elt_type_by_index ( struct varobj* parent, int index )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>error()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>get_type()  :  varobj.c
<item>make_cleanup()  :  utils.c
<item>type_sprint()  :  typeprint.c
<item>varobj_get_type_index_from_fake_child()  :  varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_type_of_child()  :  varobj.c
<item>cplus_type_of_child()  :  varobj.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

<sect1>Local Function varobj_value_is_changeable_p()

<p><tt>static int varobj_value_is_changeable_p ( struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_type()  :  varobj.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_update()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function varobj_value_struct_elt_by_index()

<p><tt>static int varobj_value_struct_elt_by_index ( struct varobj* parent, volatile int iindex, struct value** ret_val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>coerce_array()  :  value.c
<item>error()  :  utils.c
<item>value_ind()  :  valops.c
<item>value_primitive_field()  :  value.c
<item>value_static_field()  :  value.c
<item>value_type()  :  value.c
<item>varobj_get_type_index_from_fake_child()  :  varobj.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_value_of_child()  :  varobj.c
<item>cplus_value_of_child()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function vpop()

<p><tt>static struct varobj* vpop ( struct vstack** pstack )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_update()  :  varobj.c
</itemize>
</descrip>

<sect1>Local Function vpush()

<p><tt>static void vpush ( struct vstack** pstack, struct varobj* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>varobj.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_update()  :  varobj.c
</itemize>
</descrip>

</article>
