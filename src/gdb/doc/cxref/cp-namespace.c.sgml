<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF cp-namespace.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for cp-namespace.c of gdb.cxref.
<author>cxref

<sect>File cp-namespace.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;cp-support.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;dictionary.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define ANONYMOUS_NAMESPACE_LEN 21</tt><newline>

<sect1>Global Variable processing_has_namespace_info

<p>
<tt>unsigned char processing_has_namespace_info</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>block.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dwarf2read.c
<item>eval.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>p-valprint.c
<item>stabsread.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cp_initialize_namespace()  :  cp-namespace.c
<item>cp_scan_for_anonymous_namespaces()  :  cp-namespace.c
<item>cp_set_block_scope()  :  cp-namespace.c
<item>determine_class_name()  :  dwarf2read.c
<item>new_symbol()  :  dwarf2read.c
<item>process_die()  :  dwarf2read.c
<item>read_enumeration_type()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Variable processing_current_prefix

<p>
<tt>const char* processing_current_prefix</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>block.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dwarf2read.c
<item>eval.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>p-valprint.c
<item>stabsread.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cp_set_block_scope()  :  cp-namespace.c
<item>determine_class_name()  :  dwarf2read.c
<item>determine_prefix()  :  dwarf2read.c
<item>new_symbol()  :  dwarf2read.c
<item>process_full_comp_unit()  :  dwarf2read.c
<item>process_structure_scope()  :  dwarf2read.c
<item>read_enumeration_type()  :  dwarf2read.c
<item>read_func_scope()  :  dwarf2read.c
<item>read_namespace()  :  dwarf2read.c
<item>read_structure_type()  :  dwarf2read.c
<item>read_type_die()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>using_list</bf><newline>
<tt>static struct using_direct* using_list</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cp_add_using_directive()
<item>cp_finalize_namespace()
<item>cp_initialize_namespace()
</itemize>
</descrip>

<sect1>Global Function _initialize_cp_namespace()

<p><tt>void _initialize_cp_namespace ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-namespace.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>maintenance_cplus_namespace()  :  cp-namespace.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>maint_cplus_cmd_list  :  cp-support.c
</itemize>
</descrip>

<sect1>Global Function cp_add_using_directive()

<p><tt>void cp_add_using_directive ( const char* name, unsigned int outer_length, unsigned int inner_length )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cp_add_using()  :  cp-namespace.c
<item>strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_scan_for_anonymous_namespaces()  :  cp-namespace.c
<item>read_namespace()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>using_list  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Global Function cp_check_possible_namespace_symbols()

<p><tt>void cp_check_possible_namespace_symbols ( const char* name, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_possible_namespace_symbols_loop()  :  cp-namespace.c
<item>cp_find_first_component()  :  cp-support.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_partial_symbol()  :  dwarf2read.c
<item>scan_partial_inlined_function_symbols()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function cp_finalize_namespace()

<p><tt>void cp_finalize_namespace ( struct block* static_block, struct obstack* obstack )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_set_using()  :  block.c
<item>cp_copy_usings()  :  cp-namespace.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>end_symtab()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>using_list  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Global Function cp_initialize_namespace()

<p><tt>void cp_initialize_namespace ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>start_symtab()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>processing_has_namespace_info  :  cp-namespace.c
<item>using_list  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Global Function cp_is_anonymous()

<p><tt>int cp_is_anonymous ( const char* cp_namespace )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_lookup_symbol_namespace()  :  cp-namespace.c
<item>cp_scan_for_anonymous_namespaces()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Global Function cp_lookup_nested_type()

<p><tt>struct type* cp_lookup_nested_type ( struct type* parent_type, const char* nested_name, const struct block* block )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cp_lookup_symbol_namespace()  :  cp-namespace.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
</itemize>
</descrip>

<sect1>Global Function cp_lookup_symbol_namespace()

<p><tt>struct symbol* cp_lookup_symbol_namespace ( const char* symnamespace, const char* name, const char* linkage_name, const struct block* block, const domain_enum domain, struct symtab** symtab )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_using()  :  block.c
<item>cp_is_anonymous()  :  cp-namespace.c
<item>cp_lookup_symbol_namespace()  :  cp-namespace.c
<item>lookup_symbol_file()  :  cp-namespace.c
<item>__builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_lookup_nested_type()  :  cp-namespace.c
<item>cp_lookup_symbol_namespace()  :  cp-namespace.c
<item>lookup_namespace_scope()  :  cp-namespace.c
<item>value_maybe_namespace_elt()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function cp_lookup_symbol_nonlocal()

<p><tt>struct symbol* cp_lookup_symbol_nonlocal ( const char* name, const char* linkage_name, const struct block* block, const domain_enum domain, struct symtab** symtab )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_scope()  :  block.c
<item>lookup_namespace_scope()  :  cp-namespace.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c-lang.c
</itemize>
</descrip>

<sect1>Global Function cp_lookup_transparent_type()

<p><tt>struct type* cp_lookup_transparent_type ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>basic_lookup_transparent_type()  :  symtab.c
<item>block_scope()  :  block.c
<item>cp_lookup_transparent_type_loop()  :  cp-namespace.c
<item>get_selected_block()  :  stack.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c-lang.c
</itemize>
</descrip>

<sect1>Global Function cp_scan_for_anonymous_namespaces()

<p><tt>void cp_scan_for_anonymous_namespaces ( const struct symbol* symbol )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cp_add_using_directive()  :  cp-namespace.c
<item>cp_find_first_component()  :  cp-support.c
<item>cp_is_anonymous()  :  cp-namespace.c
<item>strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_symbol_to_list()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>processing_has_namespace_info  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Global Function cp_set_block_scope()

<p><tt>void cp_set_block_scope ( const struct symbol* symbol, struct block* block, struct obstack* obstack )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_set_scope()  :  block.c
<item>cp_entire_prefix_len()  :  cp-support.c
<item>obsavestring()  :  symfile.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>finish_block()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>processing_current_prefix  :  cp-namespace.c
<item>processing_has_namespace_info  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function check_one_possible_namespace_symbol()

<p><tt>static int check_one_possible_namespace_symbol ( const char* name, int len, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-namespace.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dict_add_symbol()  :  dictionary.c
<item>get_possible_namespace_block()  :  cp-namespace.c
<item>init_type()  :  gdbtypes.c
<item>lookup_block_symbol()  :  symtab.c
<item>obsavestring()  :  symfile.c
<item>symbol_set_names()  :  symtab.c
<item>__builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>check_possible_namespace_symbols_loop()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function check_possible_namespace_symbols_loop()

<p><tt>static int check_possible_namespace_symbols_loop ( const char* name, int len, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-namespace.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_one_possible_namespace_symbol()  :  cp-namespace.c
<item>check_possible_namespace_symbols_loop()  :  cp-namespace.c
<item>cp_find_first_component()  :  cp-support.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>check_possible_namespace_symbols_loop()  :  cp-namespace.c
<item>cp_check_possible_namespace_symbols()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function cp_add_using()

<p><tt>static struct using_direct* cp_add_using ( const char* name, unsigned int inner_len, unsigned int outer_len, struct using_direct* next )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-namespace.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>savestring()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_add_using_directive()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function cp_copy_usings()

<p><tt>static struct using_direct* cp_copy_usings ( struct using_direct* usingd, struct obstack* obstack )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-namespace.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cp_copy_usings()  :  cp-namespace.c
<item>obsavestring()  :  symfile.c
<item>xfree()  :  utils.c
<item>_obstack_newchunk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_copy_usings()  :  cp-namespace.c
<item>cp_finalize_namespace()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function cp_lookup_transparent_type_loop()

<p><tt>static struct type* cp_lookup_transparent_type_loop ( const char* name, const char* scope, int length )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-namespace.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>basic_lookup_transparent_type()  :  symtab.c
<item>cp_find_first_component()  :  cp-support.c
<item>cp_lookup_transparent_type_loop()  :  cp-namespace.c
<item>__builtin___strcpy_chk(), __builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcpy_chk(), __inline_strncpy_chk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_lookup_transparent_type()  :  cp-namespace.c
<item>cp_lookup_transparent_type_loop()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function free_namespace_block()

<p><tt>static void free_namespace_block ( struct symtab* symtab )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-namespace.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dict_free()  :  dictionary.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>initialize_namespace_symtab()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function get_possible_namespace_block()

<p><tt>static struct block* get_possible_namespace_block ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-namespace.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>initialize_namespace_symtab()  :  cp-namespace.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>check_one_possible_namespace_symbol()  :  cp-namespace.c
<item>lookup_possible_namespace_symbol()  :  cp-namespace.c
<item>maintenance_cplus_namespace()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function initialize_namespace_symtab()

<p><tt>static void initialize_namespace_symtab ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-namespace.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_block()  :  block.c
<item>allocate_symtab()  :  symfile.c
<item>dict_create_hashed_expandable()  :  dictionary.c
<item>dict_create_linear()  :  dictionary.c
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_possible_namespace_block()  :  cp-namespace.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_namespace_block()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function lookup_namespace_scope()

<p><tt>static struct symbol* lookup_namespace_scope ( const char* name, const char* linkage_name, const struct block* block, const domain_enum domain, struct symtab** symtab, const char* scope, int scope_len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-namespace.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cp_find_first_component()  :  cp-support.c
<item>cp_lookup_symbol_namespace()  :  cp-namespace.c
<item>internal_error()  :  utils.c
<item>lookup_namespace_scope()  :  cp-namespace.c
<item>__builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strncpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_lookup_symbol_nonlocal()  :  cp-namespace.c
<item>lookup_namespace_scope()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function lookup_possible_namespace_symbol()

<p><tt>static struct symbol* lookup_possible_namespace_symbol ( const char* name, struct symtab** symtab )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-namespace.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_possible_namespace_block()  :  cp-namespace.c
<item>lookup_block_symbol()  :  symtab.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>lookup_symbol_file()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function lookup_symbol_file()

<p><tt>static struct symbol* lookup_symbol_file ( const char* name, const char* linkage_name, const struct block* block, const domain_enum domain, struct symtab** symtab, int anonymous_namespace )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-namespace.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_global_block()  :  block.c
<item>lookup_possible_namespace_symbol()  :  cp-namespace.c
<item>lookup_symbol_aux_block()  :  symtab.c
<item>lookup_symbol_global()  :  symtab.c
<item>lookup_symbol_static()  :  symtab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_lookup_symbol_namespace()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Local Function maintenance_cplus_namespace()

<p><tt>static void maintenance_cplus_namespace ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-namespace.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dict_iterator_first()  :  dictionary.c
<item>dict_iterator_next()  :  dictionary.c
<item>get_possible_namespace_block()  :  cp-namespace.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>printf_unfiltered()  :  utils.c
<item>symbol_natural_name()  :  symtab.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_cp_namespace()  :  cp-namespace.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle  :  utils.c
</itemize>
</descrip>

</article>
