{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF ax-gdb.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File ax-gdb.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "ax.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "ax-gdb.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "regcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable trace_kludge\par}
{\s5\f1\fs20\ql\sb50\sa50 static int trace_kludge\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell expr_to_agent()\cell\cell\row
\cell gen_bitfield_ref()\cell\cell\row
\cell gen_fetch()\cell\cell\row
\cell gen_trace_for_expr()\cell\cell\row
\cell gen_traced_pop()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_ax_gdb()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_ax_gdb ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell  add_cmd()\cell\cell\row
Refs Func:\cell agent_command()\cell ax-gdb.c\cell\row
Refs Var:\cell  maintenancelist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function expr_to_agent()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct agent_expr* expr_to_agent ( struct expression* expr, struct axs_value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.h\cell\cell\row
Calls: \cell discard_cleanups()\cell utils.c\cell\row
\cell gen_expr()\cell ax-gdb.c\cell\row
\cell make_cleanup_free_agent_expr()\cell ax-general.c\cell\row
\cell new_agent_expr()\cell ax-general.c\cell\row
Refs Var:\cell trace_kludge\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gen_trace_for_expr()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct agent_expr* gen_trace_for_expr ( CORE_ADDR scope, struct expression* expr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.h\cell\cell\row
Calls: \cell ax_simple()\cell ax-general.c\cell\row
\cell discard_cleanups()\cell utils.c\cell\row
\cell gen_expr()\cell ax-gdb.c\cell\row
\cell gen_traced_pop()\cell ax-gdb.c\cell\row
\cell make_cleanup_free_agent_expr()\cell ax-general.c\cell\row
\cell new_agent_expr()\cell ax-general.c\cell\row
Called by:\cell agent_command()\cell ax-gdb.c\cell\row
\cell encode_actions()\cell tracepoint.c\cell\row
\cell validate_actionline()\cell tracepoint.c\cell\row
Refs Var:\cell trace_kludge\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function agent_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void agent_command ( const char* exp, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_print()\cell ax-general.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell dont_repeat()\cell top.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gen_trace_for_expr()\cell ax-gdb.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell get_frame_pc()\cell frame.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_free_agent_expr()\cell ax-general.c\cell\row
\cell parse_expression()\cell parse.c\cell\row
\cell  error_no_arg()\cell\cell\row
Used in:\cell _initialize_ax_gdb()\cell ax-gdb.c\cell\row
Refs Func:\cell free_current_contents()\cell utils.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\cell innermost_block\cell parse.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function const_expr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* const_expr ( union exp_element** pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell const_expr()\cell ax-gdb.c\cell\row
\cell const_var_ref()\cell ax-gdb.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_neg()\cell valarith.c\cell\row
Called by:\cell const_expr()\cell ax-gdb.c\cell\row
\cell gen_repeat()\cell ax-gdb.c\cell\row
\cell maybe_const_expr()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function const_var_ref()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* const_var_ref ( struct symbol* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell value_from_longest()\cell value.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
Called by:\cell const_expr()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int find_field ( struct type* type, char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell gen_struct_ref()\cell ax-gdb.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_add()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_add ( struct agent_expr* ax, struct axs_value* value, struct axs_value* value1, struct axs_value* value2, const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_simple()\cell ax-general.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gen_extend()\cell ax-gdb.c\cell\row
\cell gen_scale()\cell ax-gdb.c\cell\row
Called by:\cell gen_expr()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_address_of()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_address_of ( struct agent_expr* ax, struct axs_value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
Called by:\cell gen_expr()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_binop()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_binop ( struct agent_expr* ax, struct axs_value* value, struct axs_value* value1, struct axs_value* value2, enum agent_op op, enum agent_op op_unsigned, int may_carry, const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_simple()\cell ax-general.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gen_extend()\cell ax-gdb.c\cell\row
Called by:\cell gen_expr()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_bitfield_ref()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_bitfield_ref ( struct agent_expr* ax, struct axs_value* value, struct type* type, int start, int end )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_simple()\cell ax-general.c\cell\row
\cell ax_trace_quick()\cell ax-general.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell gen_left_shift()\cell ax-gdb.c\cell\row
\cell gen_offset()\cell ax-gdb.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell gen_struct_ref()\cell ax-gdb.c\cell\row
Refs Func:\cell ax_ext()\cell ax-general.c\cell\row
\cell ax_zero_ext()\cell ax-general.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell trace_kludge\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_cast()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_cast ( struct agent_expr* ax, struct axs_value* value, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gen_conversion()\cell ax-gdb.c\cell\row
\cell require_rvalue()\cell ax-gdb.c\cell\row
Called by:\cell gen_expr()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_complement()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_complement ( struct agent_expr* ax, struct axs_value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_simple()\cell ax-general.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gen_extend()\cell ax-gdb.c\cell\row
\cell gen_integral_promotions()\cell ax-gdb.c\cell\row
\cell gen_usual_unary()\cell ax-gdb.c\cell\row
Called by:\cell gen_expr()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_conversion()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_conversion ( struct agent_expr* ax, struct type* from, struct type* to )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell gen_extend()\cell ax-gdb.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell gen_cast()\cell ax-gdb.c\cell\row
\cell gen_integral_promotions()\cell ax-gdb.c\cell\row
\cell gen_usual_arithmetic()\cell ax-gdb.c\cell\row
\cell is_nontrivial_conversion()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_deref()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_deref ( struct agent_expr* ax, struct axs_value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell gen_expr()\cell ax-gdb.c\cell\row
\cell gen_struct_ref()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_expr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_expr ( union exp_element** pc, struct agent_expr* ax, struct axs_value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_const_l()\cell ax-general.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gen_add()\cell ax-gdb.c\cell\row
\cell gen_address_of()\cell ax-gdb.c\cell\row
\cell gen_binop()\cell ax-gdb.c\cell\row
\cell gen_cast()\cell ax-gdb.c\cell\row
\cell gen_complement()\cell ax-gdb.c\cell\row
\cell gen_deref()\cell ax-gdb.c\cell\row
\cell gen_expr()\cell ax-gdb.c\cell\row
\cell gen_int_literal()\cell ax-gdb.c\cell\row
\cell gen_logical_not()\cell ax-gdb.c\cell\row
\cell gen_repeat()\cell ax-gdb.c\cell\row
\cell gen_sizeof()\cell ax-gdb.c\cell\row
\cell gen_struct_ref()\cell ax-gdb.c\cell\row
\cell gen_sub()\cell ax-gdb.c\cell\row
\cell gen_traced_pop()\cell ax-gdb.c\cell\row
\cell gen_usual_arithmetic()\cell ax-gdb.c\cell\row
\cell gen_usual_unary()\cell ax-gdb.c\cell\row
\cell gen_var_ref()\cell ax-gdb.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell maybe_const_expr()\cell ax-gdb.c\cell\row
\cell register_type()\cell regcache.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell expr_to_agent()\cell ax-gdb.c\cell\row
\cell gen_expr()\cell ax-gdb.c\cell\row
\cell gen_repeat()\cell ax-gdb.c\cell\row
\cell gen_sizeof()\cell ax-gdb.c\cell\row
\cell gen_trace_for_expr()\cell ax-gdb.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_extend()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_extend ( struct agent_expr* ax, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell gen_add()\cell ax-gdb.c\cell\row
\cell gen_binop()\cell ax-gdb.c\cell\row
\cell gen_complement()\cell ax-gdb.c\cell\row
\cell gen_conversion()\cell ax-gdb.c\cell\row
\cell gen_sub()\cell ax-gdb.c\cell\row
\cell require_rvalue()\cell ax-gdb.c\cell\row
Refs Func:\cell ax_ext()\cell ax-general.c\cell\row
\cell ax_zero_ext()\cell ax-general.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_fetch()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_fetch ( struct agent_expr* ax, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_simple()\cell ax-general.c\cell\row
\cell ax_trace_quick()\cell ax-general.c\cell\row
\cell gen_sign_extend()\cell ax-gdb.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell gen_var_ref()\cell ax-gdb.c\cell\row
\cell require_rvalue()\cell ax-gdb.c\cell\row
Refs Var:\cell trace_kludge\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_frame_args_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_frame_args_address ( struct agent_expr* ax )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_reg()\cell ax-general.c\cell\row
\cell gdbarch_virtual_frame_pointer()\cell gdbarch.c\cell\row
\cell gen_offset()\cell ax-gdb.c\cell\row
Called by:\cell gen_var_ref()\cell ax-gdb.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_frame_locals_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_frame_locals_address ( struct agent_expr* ax )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_reg()\cell ax-general.c\cell\row
\cell gdbarch_virtual_frame_pointer()\cell gdbarch.c\cell\row
\cell gen_offset()\cell ax-gdb.c\cell\row
Called by:\cell gen_var_ref()\cell ax-gdb.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_int_literal()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_int_literal ( struct agent_expr* ax, struct axs_value* value, long k, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_const_l()\cell ax-general.c\cell\row
Called by:\cell gen_expr()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_integral_promotions()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_integral_promotions ( struct agent_expr* ax, struct axs_value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell gen_conversion()\cell ax-gdb.c\cell\row
\cell type_wider_than()\cell ax-gdb.c\cell\row
Called by:\cell gen_complement()\cell ax-gdb.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell builtin_type_unsigned_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_left_shift()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_left_shift ( struct agent_expr* ax, int distance )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_const_l()\cell ax-general.c\cell\row
\cell ax_simple()\cell ax-general.c\cell\row
Called by:\cell gen_bitfield_ref()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_logical_not()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_logical_not ( struct agent_expr* ax, struct axs_value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_simple()\cell ax-general.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gen_usual_unary()\cell ax-gdb.c\cell\row
Called by:\cell gen_expr()\cell ax-gdb.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_offset()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_offset ( struct agent_expr* ax, int offset )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_const_l()\cell ax-general.c\cell\row
\cell ax_simple()\cell ax-general.c\cell\row
Called by:\cell gen_bitfield_ref()\cell ax-gdb.c\cell\row
\cell gen_frame_args_address()\cell ax-gdb.c\cell\row
\cell gen_frame_locals_address()\cell ax-gdb.c\cell\row
\cell gen_struct_ref()\cell ax-gdb.c\cell\row
\cell gen_sym_offset()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_repeat()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_repeat ( union exp_element** pc, struct agent_expr* ax, struct axs_value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell const_expr()\cell ax-gdb.c\cell\row
\cell create_array_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gen_expr()\cell ax-gdb.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell gen_expr()\cell ax-gdb.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_scale()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_scale ( struct agent_expr* ax, enum agent_op op, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_const_l()\cell ax-general.c\cell\row
\cell ax_simple()\cell ax-general.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell gen_add()\cell ax-gdb.c\cell\row
\cell gen_sub()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_sign_extend()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_sign_extend ( struct agent_expr* ax, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_ext()\cell ax-general.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell gen_fetch()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_sizeof()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_sizeof ( union exp_element** pc, struct agent_expr* ax, struct axs_value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_const_l()\cell ax-general.c\cell\row
\cell gen_expr()\cell ax-gdb.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell gen_expr()\cell ax-gdb.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_struct_ref()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_struct_ref ( struct agent_expr* ax, struct axs_value* value, char* field, const char* operator_name, const char* operand_name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_field()\cell ax-gdb.c\cell\row
\cell gen_bitfield_ref()\cell ax-gdb.c\cell\row
\cell gen_deref()\cell ax-gdb.c\cell\row
\cell gen_offset()\cell ax-gdb.c\cell\row
\cell gen_usual_unary()\cell ax-gdb.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
Called by:\cell gen_expr()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_sub()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_sub ( struct agent_expr* ax, struct axs_value* value, struct axs_value* value1, struct axs_value* value2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_simple()\cell ax-general.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gen_extend()\cell ax-gdb.c\cell\row
\cell gen_scale()\cell ax-gdb.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell gen_expr()\cell ax-gdb.c\cell\row
Refs Var:\cell builtin_type_long\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_sym_offset()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_sym_offset ( struct agent_expr* ax, struct symbol* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell gen_offset()\cell ax-gdb.c\cell\row
Called by:\cell gen_var_ref()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_traced_pop()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_traced_pop ( struct agent_expr* ax, struct axs_value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_const_l()\cell ax-general.c\cell\row
\cell ax_reg()\cell ax-general.c\cell\row
\cell ax_simple()\cell ax-general.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell gen_expr()\cell ax-gdb.c\cell\row
\cell gen_trace_for_expr()\cell ax-gdb.c\cell\row
Refs Var:\cell trace_kludge\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_usual_arithmetic()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_usual_arithmetic ( struct agent_expr* ax, struct axs_value* value1, struct axs_value* value2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_simple()\cell ax-general.c\cell\row
\cell gen_conversion()\cell ax-gdb.c\cell\row
\cell is_nontrivial_conversion()\cell ax-gdb.c\cell\row
\cell max_type()\cell ax-gdb.c\cell\row
Called by:\cell gen_expr()\cell ax-gdb.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_usual_unary()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_usual_unary ( struct agent_expr* ax, struct axs_value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell require_rvalue()\cell ax-gdb.c\cell\row
Called by:\cell gen_complement()\cell ax-gdb.c\cell\row
\cell gen_expr()\cell ax-gdb.c\cell\row
\cell gen_logical_not()\cell ax-gdb.c\cell\row
\cell gen_struct_ref()\cell ax-gdb.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gen_var_ref()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void gen_var_ref ( struct agent_expr* ax, struct axs_value* value, struct symbol* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_const_l()\cell ax-general.c\cell\row
\cell ax_reg()\cell ax-general.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gen_fetch()\cell ax-gdb.c\cell\row
\cell gen_frame_args_address()\cell ax-gdb.c\cell\row
\cell gen_frame_locals_address()\cell ax-gdb.c\cell\row
\cell gen_sym_offset()\cell ax-gdb.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
Called by:\cell gen_expr()\cell ax-gdb.c\cell\row
Refs Var:\cell builtin_type_void\cell gdbtypes.c\cell\row
\cell demangle\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_nontrivial_conversion()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int is_nontrivial_conversion ( struct type* from, struct type* to )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell free_agent_expr()\cell ax-general.c\cell\row
\cell gen_conversion()\cell ax-gdb.c\cell\row
\cell new_agent_expr()\cell ax-general.c\cell\row
Called by:\cell gen_usual_arithmetic()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function max_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* max_type ( struct type* type1, struct type* type2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell type_wider_than()\cell ax-gdb.c\cell\row
Called by:\cell gen_usual_arithmetic()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function maybe_const_expr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* maybe_const_expr ( union exp_element** pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell const_expr()\cell ax-gdb.c\cell\row
Called by:\cell gen_expr()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function require_rvalue()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void require_rvalue ( struct agent_expr* ax, struct axs_value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell ax_reg()\cell ax-general.c\cell\row
\cell gen_extend()\cell ax-gdb.c\cell\row
\cell gen_fetch()\cell ax-gdb.c\cell\row
Called by:\cell gen_cast()\cell ax-gdb.c\cell\row
\cell gen_usual_unary()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function type_wider_than()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int type_wider_than ( struct type* type1, struct type* type2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-gdb.c\cell\cell\row
Calls: \cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell gen_integral_promotions()\cell ax-gdb.c\cell\row
\cell max_type()\cell ax-gdb.c\cell\row
\intbl0
}
