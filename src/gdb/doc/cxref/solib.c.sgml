<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF solib.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for solib.c of gdb.cxref.
<author>cxref

<sect>File solib.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;fcntl.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;environ.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;completer.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/filenames.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/hashtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;exec.h&quot;</tt>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;solist.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;observer.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../readline/readline.h&quot;</tt>
<itemize>
<item><tt>#include &lt;../readline/rlstdc.h&gt;</tt>
<item><tt>#include &lt;../readline/rltypedefs.h&gt;</tt>
<item><tt>#include &lt;../readline/keymaps.h&gt;</tt>
<item><tt>#include &lt;../readline/tilde.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;solib.h&quot;</tt>
</itemize>

<sect1>Global Variable current_target_so_ops

<p>
<tt>struct target_so_ops* current_target_so_ops</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
<item>solib-null.c
<item>solib.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_null_solib()  :  solib-null.c
<item>solib_init()  :  solib.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>solib_data</bf><newline>
<tt>static struct gdbarch_data* solib_data</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_solib()
<item>solib_ops()
</itemize>
</descrip>
<p>
<bf>so_list_head</bf><newline>
<tt>static struct so_list* so_list_head</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>clear_solib()
<item>info_sharedlibrary_command()
<item>master_so_list()
<item>solib_add()
<item>solib_address()
<item>update_solib_list()
</itemize>
</descrip>
<p>
<bf>solib_cleanup_queued</bf><newline>
<tt>static int solib_cleanup_queued</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>do_clear_solib()
<item>update_solib_list()
</itemize>
</descrip>
<p>
<bf>solib_absolute_prefix</bf><newline>
<tt>static char* solib_absolute_prefix</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_solib()
<item>solib_open()
</itemize>
</descrip>
<p>
<bf>solib_search_path</bf><newline>
<tt>static char* solib_search_path</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_solib()
<item>solib_open()
</itemize>
</descrip>

<sect1>Global Function _initialize_solib()

<p><tt>void _initialize_solib ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>solib.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_data_register_pre_init()  :  gdbarch.c
<item>add_com(), add_info(), add_setshow_boolean_cmd(), add_setshow_filename_cmd(), add_setshow_optional_filename_cmd(), xstrdup()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>info_sharedlibrary_command()  :  solib.c
<item>no_shared_libraries()  :  solib.c
<item>reload_shared_libraries()  :  solib.c
<item>sharedlibrary_command()  :  solib.c
<item>show_auto_solib_add()  :  solib.c
<item>show_solib_search_path()  :  solib.c
<item>solib_init()  :  solib.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>auto_solib_add  :  symfile.c
<item>gdb_sysroot  :  main.c
<item>solib_absolute_prefix  :  solib.c
<item>solib_data  :  solib.c
<item>solib_search_path  :  solib.c
<item>setlist, showlist
</itemize>
</descrip>

<sect1>Global Function clear_solib()

<p><tt>void clear_solib ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>disable_breakpoints_in_shlibs()  :  breakpoint.c
<item>free_so()  :  solib.c
<item>remove_target_sections()  :  target/target.c
<item>solib_ops()  :  solib.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>attach_command()  :  infcmd.c
<item>do_clear_solib()  :  solib.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>so_list_head  :  solib.c
<item>exec_bfd
</itemize>
</descrip>

<sect1>Global Function free_so()

<p><tt>void free_so ( struct so_list* so )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>solist.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>solib_ops()  :  solib.c
<item>warning()  :  utils.c
<item>xfree()  :  utils.c
<item>bfd_close(), bfd_errmsg(), bfd_get_error()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>clear_solib()  :  solib.c
<item>update_solib_list()  :  solib.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function in_solib_dynsym_resolve_code()

<p><tt>int in_solib_dynsym_resolve_code ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>solib.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>solib_ops()  :  solib.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function master_so_list()

<p><tt>struct so_list* master_so_list ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>solist.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>so_list_head  :  solib.c
</itemize>
</descrip>

<sect1>Global Function no_shared_libraries()

<p><tt>void no_shared_libraries ( const char* ignored, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>solib.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_clear_solib()  :  solib.c
<item>objfile_purge_solibs()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>reload_shared_libraries()  :  solib.c
<item>remote_open_1()  :  remote.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_solib()  :  solib.c
</itemize>
</descrip>

<sect1>Global Function solib_add()

<p><tt>int solib_add ( const char* pattern, int from_tty, struct target_ops* target, int readsyms )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>solib.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>printf_unfiltered()  :  utils.c
<item>re_comp()  :  utils.c
<item>re_exec()  :  utils.c
<item>reinit_frame_cache()  :  frame.c
<item>solib_ops()  :  solib.c
<item>solib_read_symbols()  :  solib.c
<item>update_solib_list()  :  solib.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>reload_shared_libraries()  :  solib.c
<item>sharedlibrary_command()  :  solib.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>so_list_head  :  solib.c
</itemize>
</descrip>

<sect1>Global Function solib_address()

<p><tt>char* solib_address ( CORE_ADDR address )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>solib.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>so_list_head  :  solib.c
</itemize>
</descrip>

<sect1>Global Function solib_create_inferior_hook()

<p><tt>void solib_create_inferior_hook ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>solib_ops()  :  solib.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>follow_exec()  :  infrun.c
<item>remote_open_1()  :  remote.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function solib_open()

<p><tt>int solib_open ( char* in_pathname, char** found_pathname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>solist.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_in_environ()  :  environ.c
<item>openp()  :  source.c
<item>solib_ops()  :  solib.c
<item>__builtin___strcat_chk(), __builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcat_chk(), __inline_strncpy_chk(), lbasename(), open(), strlen(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>solib_map_sections()  :  solib.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>inferior_environ  :  infcmd.c
<item>solib_absolute_prefix  :  solib.c
<item>solib_search_path  :  solib.c
</itemize>
</descrip>

<sect1>Global Function solib_read_symbols()

<p><tt>int solib_read_symbols ( struct so_list* so, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>solib.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>printf_unfiltered()  :  utils.c
<item>catch_errors()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>solib_add()  :  solib.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>symbol_add_stub()  :  solib.c
</itemize>
</descrip>

<sect1>Local Function do_clear_solib()

<p><tt>static void do_clear_solib ( void* dummy )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>solib.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_solib()  :  solib.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>no_shared_libraries()  :  solib.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>update_solib_list()  :  solib.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>solib_cleanup_queued  :  solib.c
</itemize>
</descrip>

<sect1>Local Function info_sharedlibrary_command()

<p><tt>static void info_sharedlibrary_command ( const char* ignore, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_ptr_bit()  :  gdbarch.c
<item>hex_string_custom()  :  utils.c
<item>internal_error()  :  utils.c
<item>printf_unfiltered()  :  utils.c
<item>update_solib_list()  :  solib.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_solib()  :  solib.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>so_list_head  :  solib.c
</itemize>
</descrip>

<sect1>Local Function reload_shared_libraries()

<p><tt>static void reload_shared_libraries ( const char* ignored, int from_tty, struct cmd_list_element* e )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>no_shared_libraries()  :  solib.c
<item>solib_add()  :  solib.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_solib()  :  solib.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>auto_solib_add  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function sharedlibrary_command()

<p><tt>static void sharedlibrary_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>dont_repeat()  :  top.c
<item>solib_add()  :  solib.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_solib()  :  solib.c
</itemize>
</descrip>

<sect1>Local Function show_auto_solib_add()

<p><tt>static void show_auto_solib_add ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_solib()  :  solib.c
</itemize>
</descrip>

<sect1>Local Function show_solib_search_path()

<p><tt>static void show_solib_search_path ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_solib()  :  solib.c
</itemize>
</descrip>

<sect1>Local Function solib_init()

<p><tt>static void* solib_init ( struct obstack* obstack )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_solib()  :  solib.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target_so_ops  :  solib.c
</itemize>
</descrip>

<sect1>Local Function solib_map_sections()

<p><tt>static int solib_map_sections ( void* arg )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>perror_with_name()  :  utils.c
<item>solib_open()  :  solib.c
<item>solib_ops()  :  solib.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), bfd_check_format(), bfd_errmsg(), bfd_fopen(), bfd_get_error(), build_section_table(), close(), strcmp(), strlen(), tilde_expand()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>update_solib_list()  :  solib.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>gnutarget  :  corefile.c
</itemize>
</descrip>

<sect1>Local Function solib_ops()

<p><tt>static struct target_so_ops* solib_ops ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>new_gdbarch_data()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>clear_solib()  :  solib.c
<item>free_so()  :  solib.c
<item>in_solib_dynsym_resolve_code()  :  solib.c
<item>solib_add()  :  solib.c
<item>solib_create_inferior_hook()  :  solib.c
<item>solib_map_sections()  :  solib.c
<item>solib_open()  :  solib.c
<item>update_solib_list()  :  solib.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>solib_data  :  solib.c
</itemize>
</descrip>

<sect1>Local Function symbol_add_stub()

<p><tt>static int symbol_add_stub ( void* arg )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>build_section_addr_info_from_section_table()  :  symfile.c
<item>free_section_addr_info()  :  symfile.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>symbol_file_add()  :  symfile.c
<item>strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>solib_read_symbols()  :  solib.c
</itemize>
</descrip>

<sect1>Local Function update_solib_list()

<p><tt>static void update_solib_list ( int from_tty, struct target_ops* target )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>free_objfile()  :  objfiles.c
<item>free_so()  :  solib.c
<item>make_run_cleanup()  :  utils.c
<item>observer_notify_solib_loaded()  :  observer.c
<item>observer_notify_solib_unloaded()  :  observer.c
<item>remove_target_sections()  :  target/target.c
<item>solib_ops()  :  solib.c
<item>target_resize_to_sections()  :  target/target.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), catch_errors(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>info_sharedlibrary_command()  :  solib.c
<item>solib_add()  :  solib.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_clear_solib()  :  solib.c
<item>solib_map_sections()  :  solib.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>attach_flag  :  target/target.c
<item>current_gdbarch  :  gdbarch.c
<item>so_list_head  :  solib.c
<item>solib_cleanup_queued  :  solib.c
<item>symfile_objfile  :  objfiles.c
</itemize>
</descrip>

</article>
