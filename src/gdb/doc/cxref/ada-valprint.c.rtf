{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF ada-valprint.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File ada-valprint.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <ctype.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/demangle.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "valprint.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "annotate.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "ada-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "c-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "macroexp.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "infcall.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exceptions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <setjmp.h>\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct ada_val_print_args\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct ada_val_print_args}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct type* type;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const gdb_byte* valaddr0;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int embedded_offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR address;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct ui_file* stream;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int format;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int deref_ref;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int recurse;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum val_prettyprint pretty;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_emit_char()\par}
{\s5\f1\fs20\ql\sb50\sa50 void ada_emit_char ( int c, struct ui_file* stream, int quoter, int type_len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
\cell  isascii(), isprint()\cell\cell\row
Called by:\cell ada_printchar()\cell ada-valprint.c\cell\row
\cell emit_char()\cell ada-lang.c\cell\row
\cell printstr()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_print_scalar()\par}
{\s5\f1\fs20\ql\sb50\sa50 void ada_print_scalar ( struct type* type, long val, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_enum_name()\cell ada-lang.c\cell\row
\cell ada_print_scalar()\cell ada-valprint.c\cell\row
\cell error()\cell utils.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell gdb_flush()\cell ui-file.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell print_longest()\cell valprint.c\cell\row
\cell warning()\cell utils.c\cell\row
Called by:\cell ada_print_scalar()\cell ada-valprint.c\cell\row
\cell print_choices()\cell ada-typeprint.c\cell\row
\cell print_dynamic_range_bound()\cell ada-typeprint.c\cell\row
\cell print_optional_low_bound()\cell ada-valprint.c\cell\row
\cell print_range()\cell ada-typeprint.c\cell\row
\cell print_range_bound()\cell ada-typeprint.c\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_printchar()\par}
{\s5\f1\fs20\ql\sb50\sa50 void ada_printchar ( int c, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_emit_char()\cell ada-valprint.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
Called by:\cell ada_val_print_1()\cell ada-valprint.c\cell\row
Used in:\cell ada-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_printstr()\par}
{\s5\f1\fs20\ql\sb50\sa50 void ada_printstr ( struct ui_file* stream, const gdb_byte* string, unsigned int length, int width, int force_ellipses )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell printstr()\cell ada-valprint.c\cell\row
Used in:\cell ada-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_val_print()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_val_print ( struct type* type, const gdb_byte* valaddr0, int embedded_offset, CORE_ADDR address, struct ui_file* stream, int format, int deref_ref, int recurse, enum val_prettyprint pretty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell  catch_errors()\cell\cell\row
Called by:\cell print_field_values()\cell ada-valprint.c\cell\row
Used in:\cell ada-lang.c\cell\cell\row
Refs Func:\cell ada_val_print_stub()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_value_print()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_value_print ( struct value* val0, struct ui_file* stream, int format, enum val_prettyprint pretty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_is_array_descriptor_type()\cell ada-lang.c\cell\row
\cell ada_is_bogus_array_descriptor()\cell ada-lang.c\cell\row
\cell ada_to_fixed_type()\cell ada-lang.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell type_print()\cell typeprint.c\cell\row
\cell val_print()\cell valprint.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_from_contents_and_address()\cell ada-lang.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Used in:\cell ada-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_print_floating()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void ada_print_floating ( const gdb_byte* valaddr, struct type* type, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell make_cleanup_ui_file_delete()\cell utils.c\cell\row
\cell mem_fileopen()\cell ui-file.c\cell\row
\cell print_floating()\cell valprint.c\cell\row
\cell ui_file_put()\cell ui-file.c\cell\row
\cell  __builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), strchr(), strlen(), strstr()\cell\cell\row
Called by:\cell ada_val_print_1()\cell ada-valprint.c\cell\row
Refs Func:\cell ui_memcpy()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_val_print_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int ada_val_print_1 ( struct type* type, const gdb_byte* valaddr0, int embedded_offset, CORE_ADDR address, struct ui_file* stream, int format, int deref_ref, int recurse, enum val_prettyprint pretty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-valprint.c\cell\cell\row
Calls: \cell ada_aligned_value_addr()\cell ada-lang.c\cell\row
\cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_coerce_to_simple_array_ptr()\cell ada-lang.c\cell\row
\cell ada_enum_name()\cell ada-lang.c\cell\row
\cell ada_fixed_to_float()\cell ada-lang.c\cell\row
\cell ada_is_array_descriptor_type()\cell ada-lang.c\cell\row
\cell ada_is_bogus_array_descriptor()\cell ada-lang.c\cell\row
\cell ada_is_character_type()\cell ada-lang.c\cell\row
\cell ada_is_fixed_point_type()\cell ada-lang.c\cell\row
\cell ada_is_packed_array_type()\cell ada-lang.c\cell\row
\cell ada_is_string_type()\cell ada-lang.c\cell\row
\cell ada_is_system_address_type()\cell ada-lang.c\cell\row
\cell ada_is_tag_type()\cell ada-lang.c\cell\row
\cell ada_is_vax_floating_type()\cell ada-lang.c\cell\row
\cell ada_print_floating()\cell ada-valprint.c\cell\row
\cell ada_printchar()\cell ada-valprint.c\cell\row
\cell ada_tag_name()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell ada_value_ind()\cell ada-lang.c\cell\row
\cell ada_vax_float_print_function()\cell ada-lang.c\cell\row
\cell c_val_print()\cell c-valprint.c\cell\row
\cell call_function_by_hand()\cell infcall.c\cell\row
\cell char_at()\cell ada-valprint.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell create_array_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell deprecated_print_address_numeric()\cell printcmd.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell extract_typed_address()\cell findvar.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell gdb_flush()\cell ui-file.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell make_pointer_type()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell print_longest()\cell valprint.c\cell\row
\cell print_optional_low_bound()\cell ada-valprint.c\cell\row
\cell print_record()\cell ada-valprint.c\cell\row
\cell print_scalar_formatted()\cell printcmd.c\cell\row
\cell print_spaces_filtered()\cell utils.c\cell\row
\cell printable_val_type()\cell ada-valprint.c\cell\row
\cell printstr()\cell ada-valprint.c\cell\row
\cell quit()\cell utils.c\cell\row
\cell type_print()\cell typeprint.c\cell\row
\cell unpack_long()\cell value.c\cell\row
\cell unpack_pointer()\cell value.c\cell\row
\cell val_print()\cell valprint.c\cell\row
\cell val_print_array_elements()\cell valprint.c\cell\row
\cell val_print_packed_array_elements()\cell ada-valprint.c\cell\row
\cell val_print_type_code_int()\cell valprint.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_free_to_mark()\cell value.c\cell\row
\cell value_from_contents_and_address()\cell ada-lang.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_mark()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell ada_val_print_stub()\cell ada-valprint.c\cell\row
Refs Var:\cell builtin_type_char\cell gdbtypes.c\cell\row
\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell builtin_type_void\cell gdbtypes.c\cell\row
\cell builtin_type_void_data_ptr\cell gdbtypes.c\cell\row
\cell output_format\cell valprint.c\cell\row
\cell prettyprint_arrays\cell valprint.c\cell\row
\cell print_max\cell valprint.c\cell\row
\cell quit_flag\cell utils.c\cell\row
\cell stop_print_at_null\cell valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_val_print_stub()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int ada_val_print_stub ( void* args0 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-valprint.c\cell\cell\row
Calls: \cell ada_val_print_1()\cell ada-valprint.c\cell\row
Used in:\cell ada_val_print()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function adjust_type_signedness()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void adjust_type_signedness ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-valprint.c\cell\cell\row
Called by:\cell print_field_values()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function char_at()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int char_at ( const gdb_byte* string, int i, int type_len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell extract_unsigned_integer()\cell findvar.c\cell\row
Called by:\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell printstr()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_field_values()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int print_field_values ( struct type* type, const gdb_byte* valaddr, struct ui_file* stream, int format, int recurse, enum val_prettyprint pretty, int comma_needed, struct type* outer_type, const gdb_byte* outer_valaddr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-valprint.c\cell\cell\row
Calls: \cell ada_is_ignored_field()\cell ada-lang.c\cell\row
\cell ada_is_variant_part()\cell ada-lang.c\cell\row
\cell ada_is_wrapper_field()\cell ada-lang.c\cell\row
\cell ada_name_prefix_len()\cell ada-lang.c\cell\row
\cell ada_val_print()\cell ada-valprint.c\cell\row
\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell adjust_type_signedness()\cell ada-valprint.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell fprintf_symbol_filtered()\cell utils.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell n_spaces()\cell utils.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell print_field_values()\cell ada-valprint.c\cell\row
\cell print_spaces_filtered()\cell utils.c\cell\row
\cell print_variant_part()\cell ada-valprint.c\cell\row
\cell val_print()\cell valprint.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell wrap_here()\cell utils.c\cell\row
\cell  annotate_field_begin(), annotate_field_end(), annotate_field_name_end(), annotate_field_value()\cell\cell\row
Called by:\cell print_field_values()\cell ada-valprint.c\cell\row
\cell print_record()\cell ada-valprint.c\cell\row
\cell print_variant_part()\cell ada-valprint.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\cell inspect_it\cell printcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_optional_low_bound()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int print_optional_low_bound ( struct ui_file* stream, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_print_scalar()\cell ada-valprint.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
Called by:\cell ada_val_print_1()\cell ada-valprint.c\cell\row
Refs Var:\cell builtin_type_long\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_record()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_record ( struct type* type, const gdb_byte* valaddr, struct ui_file* stream, int format, int recurse, enum val_prettyprint pretty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-valprint.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell print_field_values()\cell ada-valprint.c\cell\row
\cell print_spaces_filtered()\cell utils.c\cell\row
Called by:\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_variant_part()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int print_variant_part ( struct type* type, int field_num, const gdb_byte* valaddr, struct ui_file* stream, int format, int recurse, enum val_prettyprint pretty, int comma_needed, struct type* outer_type, const gdb_byte* outer_valaddr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_which_variant_applies()\cell ada-lang.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell print_field_values()\cell ada-valprint.c\cell\row
Called by:\cell print_field_values()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function printable_val_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* printable_val_type ( struct type* type, const gdb_byte* valaddr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_aligned_type()\cell ada-lang.c\cell\row
\cell ada_to_fixed_type()\cell ada-lang.c\cell\row
Called by:\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function printstr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void printstr ( struct ui_file* stream, const gdb_byte* string, unsigned int length, int force_ellipses, int type_len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_emit_char()\cell ada-valprint.c\cell\row
\cell char_at()\cell ada-valprint.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell quit()\cell utils.c\cell\row
Called by:\cell ada_printstr()\cell ada-valprint.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
Refs Var:\cell inspect_it\cell printcmd.c\cell\row
\cell print_max\cell valprint.c\cell\row
\cell quit_flag\cell utils.c\cell\row
\cell repeat_count_threshold\cell valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ui_memcpy()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void ui_memcpy ( void* dest, const char* buffer, long len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Used in:\cell ada_print_floating()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function val_print_packed_array_elements()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void val_print_packed_array_elements ( struct type* type, const gdb_byte* valaddr, int bitoffset, struct ui_file* stream, int format, int recurse, enum val_prettyprint pretty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell get_discrete_bounds()\cell gdbtypes.c\cell\row
\cell n_spaces()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell print_spaces_filtered()\cell utils.c\cell\row
\cell val_print()\cell valprint.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_free_to_mark()\cell value.c\cell\row
\cell value_mark()\cell value.c\cell\row
\cell wrap_here()\cell utils.c\cell\row
\cell  annotate_array_section_begin(), annotate_array_section_end(), annotate_elt(), annotate_elt_rep(), annotate_elt_rep_end(), memcmp()\cell\cell\row
Called by:\cell ada_val_print_1()\cell ada-valprint.c\cell\row
Refs Var:\cell prettyprint_arrays\cell valprint.c\cell\row
\cell print_max\cell valprint.c\cell\row
\cell repeat_count_threshold\cell valprint.c\cell\row
\intbl0
}
