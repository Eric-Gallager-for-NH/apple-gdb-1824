<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF objc-lang.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for objc-lang.c of gdb.cxref.
<author>cxref

<sect>File objc-lang.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>basic_lookup_symbol_nonlocal()  :  symtab.c
<item>basic_lookup_transparent_type()  :  symtab.c
<item>c_print_type()  :  c-typeprint.c
<item>c_val_print()  :  c-valprint.c
<item>c_value_print()  :  c-valprint.c
<item>default_word_break_characters()  :  language.c
<item>null_post_parser()  :  parse.c
<item>objc_create_fundamental_type()  :  objc-lang.c
<item>objc_demangle()  :  objc-lang.c
<item>objc_emit_char()  :  objc-lang.c
<item>objc_error()  :  objc-exp.c
<item>objc_parse()  :  objc-exp.c
<item>objc_printchar()  :  objc-lang.c
<item>objc_printstr()  :  objc-lang.c
<item>objc_skip_trampoline()  :  objc-lang.c
<item>objcplus_demangle()  :  objc-lang.c
<item>resolve_msgsend()  :  objc-lang.c
<item>resolve_msgsend_fixedup()  :  objc-lang.c
<item>resolve_msgsend_fixup()  :  objc-lang.c
<item>resolve_msgsend_stret()  :  objc-lang.c
<item>resolve_msgsend_stret_fixedup()  :  objc-lang.c
<item>resolve_msgsend_stret_fixup()  :  objc-lang.c
<item>resolve_msgsend_super()  :  objc-lang.c
<item>resolve_msgsend_super_stret()  :  objc-lang.c
<item>resolve_msgsendsuper2()  :  objc-lang.c
<item>resolve_msgsendsuper2_fixedup()  :  objc-lang.c
<item>resolve_msgsendsuper2_fixup()  :  objc-lang.c
<item>resolve_msgsendsuper2_stret()  :  objc-lang.c
<item>resolve_msgsendsuper2_stret_fixedup()  :  objc-lang.c
<item>resolve_msgsendsuper2_stret_fixup()  :  objc-lang.c
<item>value_of_this()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_char  :  gdbtypes.c
<item>builtin_type_complex  :  gdbtypes.c
<item>builtin_type_double  :  gdbtypes.c
<item>builtin_type_double_complex  :  gdbtypes.c
<item>builtin_type_float  :  gdbtypes.c
<item>builtin_type_int  :  gdbtypes.c
<item>builtin_type_long  :  gdbtypes.c
<item>builtin_type_long_double  :  gdbtypes.c
<item>builtin_type_long_long  :  gdbtypes.c
<item>builtin_type_short  :  gdbtypes.c
<item>builtin_type_signed_char  :  gdbtypes.c
<item>builtin_type_unsigned_char  :  gdbtypes.c
<item>builtin_type_unsigned_int  :  gdbtypes.c
<item>builtin_type_unsigned_long  :  gdbtypes.c
<item>builtin_type_unsigned_long_long  :  gdbtypes.c
<item>builtin_type_unsigned_short  :  gdbtypes.c
<item>builtin_type_void  :  gdbtypes.c
<item>exp_descriptor_standard  :  parse.c
<item>objc_builtin_types  :  objc-lang.c
<item>objc_op_print_tab  :  objc-lang.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;parser-defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;c-lang.h&quot;</tt>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
<item><tt>#include &quot;macroexp.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objc-lang.h&quot;</tt>
<itemize>
<item><tt>#include &lt;Availability.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;complaints.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;regcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;infcall.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;valprint.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;osabi.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;cli-out.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define OBJC_FETCH_POINTER_ARGUMENT( argi )</tt><newline>
<p>
<tt>#define TARGET_ADDRESS_BYTES</tt><newline>
<p>
<tt>#define SELECTOR_HASH_SIZE 127</tt><newline>
<p>
<tt>#define OBJC_TRAMPOLINE_MESSAGE</tt><newline>
<p>
<tt>#define OBJC_TRAMPOLINE_STRET</tt><newline>
<p>
<tt>#define OBJC_TRAMPOLINE_VTABLE</tt><newline>
<p>
<tt>#define nmethcalls</tt><newline>
<p>
<tt>#define GC_IGNORED_SELECTOR_LE 0xfffeb010</tt><newline>
<p>
<tt>#define CLS_NO_METHOD_ARRAY 0x4000</tt><newline>
<p>
<tt>#define CLS_META 0x2L</tt><newline>
<p>
<tt>#define IVAR_OFFSET_PREFIX &quot;OBJC_IVAR_&dollar;_&quot;</tt><newline>
<p>
<tt>#define LOCKS_DEBUGGING 0</tt><newline>

<sect1>Type struct objc_object

<p>
<itemize>
<item><tt>struct objc_object</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>CORE_ADDR isa;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct objc_class

<p>
<itemize>
<item><tt>struct objc_class</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>CORE_ADDR isa;</tt><newline>
<item><tt>CORE_ADDR super_class;</tt><newline>
<item><tt>CORE_ADDR name;</tt><newline>
<item><tt>long version;</tt><newline>
<item><tt>long info;</tt><newline>
<item><tt>long instance_size;</tt><newline>
<item><tt>CORE_ADDR ivars;</tt><newline>
<item><tt>CORE_ADDR methods;</tt><newline>
<item><tt>CORE_ADDR cache;</tt><newline>
<item><tt>CORE_ADDR protocols;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct objc_super

<p>
<itemize>
<item><tt>struct objc_super</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>CORE_ADDR receiver;</tt><newline>
<item><tt>CORE_ADDR objc_class;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct objc_method

<p>
<itemize>
<item><tt>struct objc_method</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>CORE_ADDR name;</tt><newline>
<item><tt>CORE_ADDR types;</tt><newline>
<item><tt>CORE_ADDR imp;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type enum debug_modes

<p>
<itemize>
<item><tt>enum debug_modes</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>debug_mode_not_checked;</tt><newline>
<item><tt>debug_mode_okay;</tt><newline>
<item><tt>debug_mode_failed;</tt><newline>
<item><tt>debug_mode_overridden;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct selector_entry

<p>
<itemize>
<item><tt>struct selector_entry</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>char* name;</tt><newline>
<item><tt>CORE_ADDR val;</tt><newline>
<item><tt>struct selector_entry* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct objc_trampoline_record

<p>
<itemize>
<item><tt>struct objc_trampoline_record</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>CORE_ADDR start_addr;</tt><newline>
<item><tt>uint64_t flags;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct objc_trampoline_region

<p>
<itemize>
<item><tt>struct objc_trampoline_region</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>CORE_ADDR next_region_start;</tt><newline>
<item><tt>CORE_ADDR trampoline_start;</tt><newline>
<item><tt>CORE_ADDR trampoline_end;</tt><newline>
<item><tt>struct objc_trampoline_region* next;</tt><newline>
<item><tt>int num_records;</tt><newline>
<item><tt>struct objc_trampoline_record records[];</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct objc_trampolines

<p>
<itemize>
<item><tt>struct objc_trampolines</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int initialized;</tt><newline>
<item><tt>CORE_ADDR gdb_objc_trampoline_addr;</tt><newline>
<item><tt>struct breakpoint* update_bpt;</tt><newline>
<item><tt>struct objc_trampoline_region* head;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct selname

<p>
<itemize>
<item><tt>struct selname</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct selname* next;</tt><newline>
<item><tt>char* msglist_sel;</tt><newline>
<item><tt>int msglist_len;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct objc_methcall

<p>
<itemize>
<item><tt>struct objc_methcall</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const char* name;</tt><newline>
<item><tt>int (*stop_at)(CORE_ADDR,CORE_ADDR*);</tt><newline>
<item><tt>CORE_ADDR begin;</tt><newline>
<item><tt>CORE_ADDR end;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct objc_submethod_helper_data

<p>
<itemize>
<item><tt>struct objc_submethod_helper_data</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int (*f)(CORE_ADDR,CORE_ADDR*);</tt><newline>
<item><tt>CORE_ADDR pc;</tt><newline>
<item><tt>CORE_ADDR* new_pc;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable lookup_objc_class_p

<p>
<tt>int lookup_objc_class_p</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
<item>c-exp.c
<item>corefile.c
<item>dwarf2read.c
<item>eval.c
<item>infcall.c
<item>linespec.c
<item>maint.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>printcmd.c
<item>remote.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_objc_lang()  :  objc-lang.c
<item>should_lookup_objc_class()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Variable po_and_print_run_all_threads

<p>
<tt>int po_and_print_run_all_threads</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_objc_lang()  :  objc-lang.c
<item>objc_setup_safe_print()  :  objc-lang.c
<item>print_object_command()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Variable let_po_run_all_threads

<p>
<tt>int let_po_run_all_threads</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_objc_lang()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Variable objc_builtin_types

<p>
<tt>struct type** const objc_builtin_types[]</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
</descrip>

<sect1>Global Variable objc_language_defn

<p>
<tt>const struct language_defn objc_language_defn</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_objc_language()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Variable objcplus_language_defn

<p>
<tt>const struct language_defn objcplus_language_defn</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_objc_language()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>debug_objc</bf><newline>
<tt>static int debug_objc</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_objc_lang()
<item>find_implementation()
<item>find_implementation_from_class()
<item>get_class_address_from_object()
<item>new_objc_runtime_class_getClass()
<item>new_objc_runtime_find_impl()
<item>read_objc_object()
</itemize>
</descrip>
<p>
<bf>debug_mode_set_p</bf><newline>
<tt>static enum debug_modes debug_mode_set_p</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>do_end_debugger_mode()
<item>do_reset_debug_mode_flag()
<item>make_cleanup_set_restore_debugger_mode()
<item>reinitialize_objc()
</itemize>
</descrip>
<p>
<bf>debug_mode_set_reason</bf><newline>
<tt>static enum objc_debugger_mode_result debug_mode_set_reason</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>do_end_debugger_mode()
<item>do_reset_debug_mode_flag()
<item>make_cleanup_set_restore_debugger_mode()
<item>reinitialize_objc()
</itemize>
</descrip>
<p>
<bf>objc_class_method_limit</bf><newline>
<tt>static unsigned int objc_class_method_limit</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_objc_language()
<item>find_implementation_from_class()
</itemize>
</descrip>
<p>
<bf>objc_runtime_version_user_override</bf><newline>
<tt>static int objc_runtime_version_user_override</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_objc_lang()
<item>new_objc_runtime_internals()
</itemize>
</descrip>
<p>
<bf>objc_runtime_version</bf><newline>
<tt>static int objc_runtime_version</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>new_objc_runtime_internals()
<item>objc_init_runtime_version()
</itemize>
</descrip>
<p>
<bf>implementation_tree</bf><newline>
<tt>static struct rb_tree_node* implementation_tree</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_implementation_to_cache()
<item>lookup_implementation_in_cache()
<item>objc_clear_caches()
</itemize>
</descrip>
<p>
<bf>real_class_tree</bf><newline>
<tt>static struct rb_tree_node* real_class_tree</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_class_to_cache()
<item>class_valid_p()
<item>lookup_real_class_in_cache()
<item>objc_clear_caches()
</itemize>
</descrip>
<p>
<bf>classname_tree</bf><newline>
<tt>static struct rb_tree_node* classname_tree</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_classname_to_cache()
<item>lookup_classname_in_cache()
<item>objc_clear_caches()
</itemize>
</descrip>
<p>
<bf>cached_objc_objfile</bf><newline>
<tt>static struct objfile* cached_objc_objfile</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>find_libobjc_objfile()
<item>reinitialize_objc()
<item>tell_objc_msgsend_cacher_objfile_changed()
</itemize>
</descrip>
<p>
<bf>objc_library_name</bf><newline>
<tt>static const char* objc_library_name</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>find_libobjc_objfile()
<item>tell_objc_msgsend_cacher_objfile_changed()
</itemize>
</descrip>
<p>
<bf>selector_hash</bf><newline>
<tt>static struct selector_entry* selector_hash[127]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>lookup_child_selector()
<item>reset_child_selector_cache()
</itemize>
</descrip>
<p>
<bf>selector_hash_generation</bf><newline>
<tt>static int selector_hash_generation</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>lookup_child_selector()
</itemize>
</descrip>
<p>
<bf>objc_trampolines</bf><newline>
<tt>static struct objc_trampolines objc_trampolines</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>objc_clear_trampoline_data()
<item>objc_handle_update()
<item>objc_init_trampoline_observer()
<item>pc_in_objc_trampoline_p()
</itemize>
</descrip>
<p>
<bf>objc_op_print_tab</bf><newline>
<tt>static const struct op_print objc_op_print_tab[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
</descrip>
<p>
<bf>msglist_len</bf><newline>
<tt>static size_t msglist_len</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_msglist()
<item>end_msglist()
<item>start_msglist()
</itemize>
</descrip>
<p>
<bf>selname_chain</bf><newline>
<tt>static struct selname* selname_chain</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>end_msglist()
<item>start_msglist()
</itemize>
</descrip>
<p>
<bf>msglist_sel</bf><newline>
<tt>static char* msglist_sel</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_msglist()
<item>end_msglist()
<item>start_msglist()
</itemize>
</descrip>
<p>
<bf>methcalls</bf><newline>
<tt>static struct objc_methcall methcalls[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>find_objc_msgcall()
<item>find_objc_msgsend()
</itemize>
</descrip>
<p>
<bf>cached_objc_msgsend_table_is_valid</bf><newline>
<tt>static int cached_objc_msgsend_table_is_valid</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>find_objc_msgsend()
<item>tell_objc_msgsend_cacher_objfile_changed()
</itemize>
</descrip>
<p>
<bf>bits_per_byte</bf><newline>
<tt>static int bits_per_byte</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>objc_fixup_ivar_offset()
</itemize>
</descrip>
<p>
<bf>first_bitfield_index</bf><newline>
<tt>static int first_bitfield_index</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>objc_fixup_class_length()
<item>objc_fixup_ivar_offset()
</itemize>
</descrip>
<p>
<bf>first_bitfield_offset</bf><newline>
<tt>static int first_bitfield_offset</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>objc_fixup_class_length()
<item>objc_fixup_ivar_offset()
</itemize>
</descrip>
<p>
<bf>spinlock_lock_is_present</bf><newline>
<tt>static int spinlock_lock_is_present</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_set_restore_debugger_mode()
</itemize>
</descrip>
<p>
<bf>malloc_lock_is_present</bf><newline>
<tt>static int malloc_lock_is_present</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_set_restore_debugger_mode()
</itemize>
</descrip>
<p>
<bf>debug_mode_timer</bf><newline>
<tt>static int debug_mode_timer</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>do_end_debugger_mode()
<item>make_cleanup_set_restore_debugger_mode()
</itemize>
</descrip>
<p>
<bf>debugger_mode_fail_breakpoint</bf><newline>
<tt>static struct breakpoint* debugger_mode_fail_breakpoint</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>init_debugger_mode_fail_notification()
<item>objc_pc_at_fail_point()
</itemize>
</descrip>
<p>
<bf>objc_exception_throw_breakpoint</bf><newline>
<tt>static struct breakpoint* objc_exception_throw_breakpoint</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>do_cleanup_objc_exception_breakpoint()
<item>is_objc_exception_throw_breakpoint()
<item>make_cleanup_init_objc_exception_catcher()
<item>objc_pc_at_fail_point()
</itemize>
</descrip>
<p>
<bf>use_non_blocking_mode</bf><newline>
<tt>static int use_non_blocking_mode</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_objc_lang()
<item>objc_runtime_check_enabled_p()
</itemize>
</descrip>

<sect1>Global Function _initialize_objc_lang()

<p><tt>void _initialize_objc_lang ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_setshow_boolean_cmd(), add_setshow_zinteger_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>set_non_blocking_mode_func()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_objc  :  objc-lang.c
<item>let_po_run_all_threads  :  objc-lang.c
<item>lookup_objc_class_p  :  objc-lang.c
<item>objc_runtime_version_user_override  :  objc-lang.c
<item>po_and_print_run_all_threads  :  objc-lang.c
<item>use_non_blocking_mode  :  objc-lang.c
<item>setdebuglist, setlist, showdebuglist, showlist
</itemize>
</descrip>

<sect1>Global Function _initialize_objc_language()

<p><tt>void _initialize_objc_language ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_language()  :  language.c
<item>add_com(), add_com_alias(), add_info(), add_setshow_uinteger_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>classes_info()  :  objc-lang.c
<item>print_object_command()  :  objc-lang.c
<item>selectors_info()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>objc_class_method_limit  :  objc-lang.c
<item>objc_language_defn  :  objc-lang.c
<item>objcplus_language_defn  :  objc-lang.c
<item>setlist, showlist
</itemize>
</descrip>

<sect1>Global Function add_msglist()

<p><tt>void add_msglist ( struct stoken* str, int addcolon )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin___strncat_chk(), __builtin_object_size(), __inline_strcpy_chk(), __inline_strncat_chk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>objc_parse()  :  objc-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>msglist_len  :  objc-lang.c
<item>msglist_sel  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function end_msglist()

<p><tt>int end_msglist ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>lookup_child_selector()  :  objc-lang.c
<item>write_exp_elt_longcst()  :  parse.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>objc_parse()  :  objc-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>msglist_len  :  objc-lang.c
<item>msglist_sel  :  objc-lang.c
<item>selname_chain  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function find_implementation()

<p><tt>CORE_ADDR find_implementation ( CORE_ADDR object, CORE_ADDR sel, int stret )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_implementation_to_cache()  :  objc-lang.c
<item>do_cleanups()  :  utils.c
<item>find_implementation_from_class()  :  objc-lang.c
<item>fprintf_unfiltered()  :  utils.c
<item>get_class_address_from_object()  :  objc-lang.c
<item>lookup_implementation_in_cache()  :  objc-lang.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>new_objc_runtime_internals()  :  objc-lang.c
<item>paddr_nz()  :  utils.c
<item>read_objc_object()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
<item>resolve_msgsend()  :  objc-lang.c
<item>resolve_msgsend_stret()  :  objc-lang.c
<item>resolve_newruntime_objc_msgsend()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_objc  :  objc-lang.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Global Function find_imps()

<p><tt>char* find_imps ( struct symtab* symtab, struct block* block, const char* method, struct symbol** syms, unsigned int* nsym, unsigned int* ndebug )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_methods()  :  objc-lang.c
<item>internal_error()  :  utils.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_symbol()  :  symtab.c
<item>parse_method()  :  objc-lang.c
<item>parse_selector()  :  objc-lang.c
<item>__builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcpy_chk(), qsort(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_objc()  :  linespec.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>compare_classes()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function find_libobjc_objfile()

<p><tt>struct objfile* find_libobjc_objfile ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>executable_objfile()  :  objfiles.c
<item>find_objfile_by_name()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>objc_init_runtime_version()  :  objc-lang.c
<item>objc_init_trampoline_observer()  :  objc-lang.c
<item>reread_symbols_for_objfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cached_objc_objfile  :  objc-lang.c
<item>objc_library_name  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function find_objc_msgcall()

<p><tt>int find_objc_msgcall ( CORE_ADDR pc, CORE_ADDR* new_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_objc_msgcall_submethod()  :  objc-lang.c
<item>find_objc_msgsend()  :  objc-lang.c
<item>pc_in_objc_trampoline_p()  :  objc-lang.c
<item>resolve_msgsend_fixedup()  :  objc-lang.c
<item>resolve_msgsend_stret_fixedup()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>objc_skip_trampoline()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>methcalls  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function is_objc_exception_throw_breakpoint()

<p><tt>int is_objc_exception_throw_breakpoint ( struct breakpoint* b )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>disable_user_breakpoints_before_operation()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>objc_exception_throw_breakpoint  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function lookup_child_selector()

<p><tt>CORE_ADDR lookup_child_selector ( const char* selname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>lookup_child_selector_nocache()  :  objc-lang.c
<item>msymbol_hash()  :  minsyms.c
<item>ptid_get_pid()  :  infrun.c
<item>reset_child_selector_cache()  :  objc-lang.c
<item>xmalloc()  :  utils.c
<item>strcmp(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>end_msglist()  :  objc-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>get_class_address_from_object()  :  objc-lang.c
<item>resolve_newruntime_objc_msgsend()  :  objc-lang.c
<item>resolve_newruntime_objc_msgsendsuper()  :  objc-lang.c
<item>value_nsstring()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
<item>selector_hash  :  objc-lang.c
<item>selector_hash_generation  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function lookup_child_selector_nocache()

<p><tt>CORE_ADDR lookup_child_selector_nocache ( const char* selname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>call_function_by_hand()  :  infcall.c
<item>complaint()  :  complaints.c
<item>create_cached_function()  :  value.c
<item>lookup_cached_function()  :  value.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>value_as_long()  :  value.c
<item>value_coerce_array()  :  valops.c
<item>value_string()  :  valops.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>lookup_child_selector()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_voidptrfuncptr  :  gdbtypes.c
<item>current_target  :  target/target.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Global Function lookup_objc_class()

<p><tt>CORE_ADDR lookup_objc_class ( const char* classname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>call_function_by_hand()  :  infcall.c
<item>create_cached_function()  :  value.c
<item>do_cleanups()  :  utils.c
<item>lookup_cached_function()  :  value.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>make_cleanup_set_restore_scheduler_locking_mode()  :  utils.c
<item>value_as_address()  :  value.c
<item>value_coerce_array()  :  valops.c
<item>value_string()  :  valops.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
<item>c_parse()  :  c-exp.c
<item>find_implementation_from_class()  :  objc-lang.c
<item>objc_lex()  :  objc-exp.c
<item>objc_parse()  :  objc-exp.c
<item>value_nsstring()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_voidptrfuncptr  :  gdbtypes.c
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function lookup_struct_typedef()

<p><tt>struct symbol* lookup_struct_typedef ( const char* name, struct block* block, int noerr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>lookup_symbol()  :  symtab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
<item>objc_lex()  :  objc-exp.c
<item>value_nsstring()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_init_objc_exception_catcher()

<p><tt>struct cleanup* make_cleanup_init_objc_exception_catcher ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_objc_hook_breakpoint()  :  breakpoint.c
<item>do_cleanups()  :  utils.c
<item>enable_breakpoint()  :  breakpoint.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_ui_out_suppress_output()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_cleanup_objc_exception_breakpoint()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>objc_exception_throw_breakpoint  :  objc-lang.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_set_restore_debugger_mode()

<p><tt>enum objc_debugger_mode_result make_cleanup_set_restore_debugger_mode ( struct cleanup** cleanup, int level )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>call_function_by_hand()  :  infcall.c
<item>create_cached_function()  :  value.c
<item>do_cleanups()  :  utils.c
<item>do_hand_call_cleanups()  :  utils.c
<item>find_libobjc_objfile()  :  objc-lang.c
<item>fprintf_filtered()  :  utils.c
<item>fprintf_unfiltered()  :  utils.c
<item>init_debugger_mode_fail_notification()  :  objc-lang.c
<item>internal_error()  :  utils.c
<item>lookup_cached_function()  :  value.c
<item>lookup_function_type()  :  gdbtypes.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_enable_disable_bpts_during_operation()  :  breakpoint.c
<item>make_cleanup_set_restore_scheduler_locking_mode()  :  utils.c
<item>make_cleanup_set_restore_unwind_on_signal()  :  infcall.c
<item>make_hand_call_cleanup()  :  utils.c
<item>objc_runtime_check_enabled_p()  :  objc-lang.c
<item>release_value()  :  value.c
<item>start_timer()  :  maint.c
<item>value_as_long()  :  value.c
<item>value_from_longest()  :  value.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp(), throw_exception()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_implementation()  :  objc-lang.c
<item>get_class_address_from_object()  :  objc-lang.c
<item>hand_function_call()  :  infcall.c
<item>lookup_objc_class()  :  objc-lang.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>new_objc_runtime_get_classname()  :  objc-lang.c
<item>objc_setup_safe_print()  :  objc-lang.c
<item>print_object_command()  :  objc-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_end_debugger_mode()  :  objc-lang.c
<item>do_reset_debug_mode_flag()  :  objc-lang.c
<item>null_cleanup()  :  utils.c
<item>value_free()  :  value.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>builtin_type_voidptrfuncptr  :  gdbtypes.c
<item>current_target  :  target/target.c
<item>debug_handcall_setup  :  infrun.c
<item>debug_mode_set_p  :  objc-lang.c
<item>debug_mode_set_reason  :  objc-lang.c
<item>debug_mode_timer  :  objc-lang.c
<item>gdb_stdout  :  main.c
<item>maint_use_timers  :  maint.c
<item>malloc_lock_is_present  :  objc-lang.c
<item>spinlock_lock_is_present  :  objc-lang.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function new_objc_runtime_internals()

<p><tt>int new_objc_runtime_internals ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_long_bit()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_implementation()  :  objc-lang.c
<item>find_implementation_from_class()  :  objc-lang.c
<item>objc_invalidate_objc_class()  :  objc-lang.c
<item>objc_target_type_from_object()  :  objc-lang.c
<item>read_objc_object()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>objc_runtime_version  :  objc-lang.c
<item>objc_runtime_version_user_override  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function objc_check_safe_to_run_all_threads()

<p><tt>int objc_check_safe_to_run_all_threads ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>objc_setup_safe_print()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function objc_clear_caches()

<p><tt>void objc_clear_caches ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_rb_tree_data()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>reinitialize_objc()  :  objc-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>classname_tree  :  objc-lang.c
<item>implementation_tree  :  objc-lang.c
<item>real_class_tree  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function objc_demangle()

<p><tt>char* objc_demangle ( const char* mangled, int options )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), strchr(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>maintenance_demangle()  :  maint.c
<item>objcplus_demangle()  :  objc-lang.c
<item>symbol_find_demangled_name()  :  symtab.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
</descrip>

<sect1>Global Function objc_fixup_class_length()

<p><tt>int objc_fixup_class_length ( const struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbtypes.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objc_fixup_ivar_offset()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_print_type()  :  ada-typeprint.c
<item>ada_template_to_fixed_record_type_1()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_value_assign()  :  ada-lang.c
<item>ada_value_binop()  :  ada-lang.c
<item>ada_value_equal()  :  ada-lang.c
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>ada_value_print()  :  ada-valprint.c
<item>ada_value_slice_ptr()  :  ada-lang.c
<item>address_to_signed_pointer()  :  findvar.c
<item>adjust_field_bitsize()  :  stabsread.c
<item>allocate_value()  :  value.c
<item>append_composite_type_field()  :  gdbtypes.c
<item>basic_lookup_transparent_type()  :  symtab.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>build_gdb_vtable_type()  :  gnu-v3-abi.c
<item>c_number_of_children()  :  varobj.c
<item>c_parse()  :  c-exp.c
<item>c_type_print_base()  :  c-typeprint.c
<item>c_type_print_varspec_suffix()  :  c-typeprint.c
<item>c_val_print()  :  c-valprint.c
<item>can_use_hardware_watchpoint()  :  breakpoint.c
<item>cast_into_complex()  :  valops.c
<item>check_field_in()  :  valops.c
<item>check_size()  :  ada-lang.c
<item>check_typedef()  :  gdbtypes.c
<item>cleanup_undefined_arrays()  :  gdbtypes.c
<item>coerce_for_assign()  :  ada-lang.c
<item>coerce_unspec_val_to_type()  :  ada-lang.c
<item>collect_symbol()  :  tracepoint.c
<item>convert_actual()  :  ada-lang.c
<item>convert_typed_floating()  :  doublest.c
<item>cp_print_value()  :  cp-valprint.c
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
<item>dbx_fixup_variants()  :  stabsread.c
<item>decode_frame_entry_1()  :  dwarf2-frame.c
<item>decode_packed_array()  :  ada-lang.c
<item>default_region_size_ok_for_hw_watchpoint()  :  target/target.c
<item>define_symbol()  :  stabsread.c
<item>desc_bound_bitsize()  :  ada-lang.c
<item>desc_bounds()  :  ada-lang.c
<item>dwarf2_add_field()  :  dwarf2read.c
<item>dwarf2_const_value()  :  dwarf2read.c
<item>encode_actions()  :  tracepoint.c
<item>ensure_lval()  :  ada-lang.c
<item>evaluate_struct_tuple()  :  eval.c
<item>evaluate_subexp_for_sizeof()  :  eval.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>extract_typed_floating()  :  doublest.c
<item>f77_create_arrayprint_offset_tbl()  :  f-valprint.c
<item>f77_get_dynamic_length_of_aggregate()  :  f-valprint.c
<item>f_parse()  :  f-exp.c
<item>f_type_print_base()  :  f-typeprint.c
<item>f_val_print()  :  f-valprint.c
<item>fat_pntr_bounds_bitsize()  :  ada-lang.c
<item>fat_pntr_data_bitsize()  :  ada-lang.c
<item>find_function_addr()  :  infcall.c
<item>find_size_for_pointer_math()  :  valarith.c
<item>floatformat_from_type()  :  doublest.c
<item>gen_conversion()  :  ax-gdb.c
<item>gen_extend()  :  ax-gdb.c
<item>gen_fetch()  :  ax-gdb.c
<item>gen_scale()  :  ax-gdb.c
<item>gen_sign_extend()  :  ax-gdb.c
<item>gen_sizeof()  :  ax-gdb.c
<item>gen_sub()  :  ax-gdb.c
<item>gen_traced_pop()  :  ax-gdb.c
<item>generic_register_size()  :  arch-utils.c
<item>generic_use_struct_convention()  :  value.c
<item>get_discrete_bounds()  :  gdbtypes.c
<item>get_java_object_header_size()  :  jv-lang.c
<item>get_java_utf8_name()  :  jv-lang.c
<item>gnuv2_value_rtti_type()  :  gnu-v2-abi.c
<item>gnuv3_baseclass_offset()  :  gnu-v3-abi.c
<item>gnuv3_rtti_type()  :  gnu-v3-abi.c
<item>hand_function_call()  :  infcall.c
<item>hpacc_value_rtti_type()  :  hpacc-abi.c
<item>init_array_element()  :  eval.c
<item>init_regcache_descr()  :  regcache.c
<item>insert_bp_location()  :  breakpoint.c
<item>is_pascal_string_type()  :  p-lang.c
<item>java_class_from_object()  :  jv-lang.c
<item>java_link_class_type()  :  jv-lang.c
<item>java_val_print()  :  jv-valprint.c
<item>java_value_print()  :  jv-valprint.c
<item>legacy_store_return_value()  :  arch-utils.c
<item>m2_parse()  :  m2-exp.c
<item>make_cvr_type()  :  gdbtypes.c
<item>make_qualified_type()  :  gdbtypes.c
<item>max_of_type()  :  ada-lang.c
<item>min_of_type()  :  ada-lang.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>objc_parse()  :  objc-exp.c
<item>pack_long()  :  value.c
<item>parse_symbol()  :  mdebugread.c
<item>pascal_object_print_value()  :  p-valprint.c
<item>pascal_parse()  :  p-exp.c
<item>pascal_type_print_varspec_prefix()  :  p-typeprint.c
<item>pascal_val_print()  :  p-valprint.c
<item>patch_opaque_types()  :  coffread.c
<item>patch_type()  :  coffread.c
<item>print_equivalent_f77_float_type()  :  f-typeprint.c
<item>print_floating()  :  valprint.c
<item>print_floating_in_hex()  :  valprint.c
<item>print_formatted()  :  printcmd.c
<item>print_frame_args()  :  stack.c
<item>print_scalar_formatted()  :  printcmd.c
<item>print_symbol()  :  symmisc.c
<item>printf_command()  :  printcmd.c
<item>process_coff_symbol()  :  coffread.c
<item>rank_one_type()  :  gdbtypes.c
<item>read_memory_typed_address()  :  corefile.c
<item>read_tag_pointer_type()  :  dwarf2read.c
<item>read_var_value()  :  findvar.c
<item>recursive_dump_type()  :  gdbtypes.c
<item>remove_breakpoint()  :  breakpoint.c
<item>replace_type()  :  gdbtypes.c
<item>scm_get_field()  :  scm-lang.c
<item>scm_ipruk()  :  scm-valprint.c
<item>scm_lreadr()  :  scm-exp.c
<item>scm_unpack()  :  scm-lang.c
<item>scm_val_print()  :  scm-valprint.c
<item>scope_info()  :  tracepoint.c
<item>search_struct_field()  :  valops.c
<item>search_struct_method()  :  valops.c
<item>set_internalvar_component()  :  value.c
<item>signed_pointer_to_address()  :  findvar.c
<item>size_of_encoded_value()  :  dwarf2-frame.c
<item>store_typed_floating()  :  doublest.c
<item>struct_type()  :  dwarfread.c
<item>to_fixed_array_type()  :  ada-lang.c
<item>to_record_with_fixed_variant_part()  :  ada-lang.c
<item>type_wider_than()  :  ax-gdb.c
<item>unpack_double()  :  value.c
<item>unpack_long()  :  value.c
<item>unsigned_address_to_pointer()  :  findvar.c
<item>unsigned_pointer_to_address()  :  findvar.c
<item>upgrade_type()  :  mdebugread.c
<item>val_elt_addr()  :  valprint.c
<item>val_print_array_elements()  :  valprint.c
<item>val_print_packed_array_elements()  :  ada-valprint.c
<item>val_print_type_code_int()  :  valprint.c
<item>value_arg_coerce()  :  infcall.c
<item>value_array()  :  valops.c
<item>value_assign()  :  valops.c
<item>value_at()  :  valops.c
<item>value_binop()  :  valarith.c
<item>value_bitstring()  :  valops.c
<item>value_cast_1()  :  valops.c
<item>value_change_enclosing_type()  :  value.c
<item>value_complement()  :  valarith.c
<item>value_concat()  :  valarith.c
<item>value_contents_equal()  :  value.c
<item>value_copy()  :  value.c
<item>value_equal()  :  valarith.c
<item>value_fetch_lazy()  :  valops.c
<item>value_from_contents_and_address()  :  ada-lang.c
<item>value_from_longest()  :  value.c
<item>value_from_register()  :  findvar.c
<item>value_literal_complex()  :  valops.c
<item>value_logical_not()  :  valarith.c
<item>value_neg()  :  valarith.c
<item>value_of_builtin_frame_fp_reg()  :  std-regs.c
<item>value_of_builtin_frame_pc_reg()  :  std-regs.c
<item>value_of_builtin_frame_reg()  :  std-regs.c
<item>value_pos()  :  valarith.c
<item>value_primitive_field()  :  value.c
<item>value_repeat()  :  valops.c
<item>value_slice()  :  valops.c
<item>value_strcmp()  :  valarith.c
<item>value_sub()  :  valarith.c
<item>value_subscripted_rvalue()  :  valarith.c
<item>watchpoint_equal()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>first_bitfield_index  :  objc-lang.c
<item>first_bitfield_offset  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function objc_fixup_ivar_offset()

<p><tt>int objc_fixup_ivar_offset ( const struct type* type, int ivar )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbtypes.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>do_cleanups()  :  utils.c
<item>fprintf_unfiltered()  :  utils.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>make_cleanup()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>paddr_nz()  :  utils.c
<item>safe_read_memory_unsigned_integer()  :  corefile.c
<item>warning()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___snprintf_chk(), __builtin_object_size(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_aligned_value_addr()  :  ada-lang.c
<item>ada_lookup_struct_elt_type()  :  ada-lang.c
<item>ada_print_scalar()  :  ada-valprint.c
<item>ada_search_struct_field()  :  ada-lang.c
<item>ada_template_to_fixed_record_type_1()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_value_primitive_field()  :  ada-lang.c
<item>c_type_print_base()  :  c-typeprint.c
<item>c_val_print()  :  c-valprint.c
<item>check_typedef()  :  gdbtypes.c
<item>convert_char_literal()  :  ada-exp.c
<item>cp_print_class_member()  :  cp-valprint.c
<item>cp_print_value_fields()  :  cp-valprint.c
<item>desc_bound_bitpos()  :  ada-lang.c
<item>discrete_type_low_bound()  :  ada-lang.c
<item>evaluate_struct_tuple()  :  eval.c
<item>fat_pntr_bounds_bitpos()  :  ada-lang.c
<item>fat_pntr_data_bitpos()  :  ada-lang.c
<item>find_method_list()  :  valops.c
<item>find_struct_field()  :  ada-lang.c
<item>gen_struct_ref()  :  ax-gdb.c
<item>get_discrete_bounds()  :  gdbtypes.c
<item>gnuv2_baseclass_offset()  :  gnu-v2-abi.c
<item>gnuv2_value_rtti_type()  :  gnu-v2-abi.c
<item>gnuv3_baseclass_offset()  :  gnu-v3-abi.c
<item>is_pascal_string_type()  :  p-lang.c
<item>java_print_value_fields()  :  jv-valprint.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>pascal_object_print_class_member()  :  p-valprint.c
<item>pascal_object_print_value_fields()  :  p-valprint.c
<item>pascal_type_print_base()  :  p-typeprint.c
<item>pascal_val_print()  :  p-valprint.c
<item>pos_atr()  :  ada-lang.c
<item>print_enum_type()  :  ada-typeprint.c
<item>print_field_values()  :  ada-valprint.c
<item>print_optional_low_bound()  :  ada-valprint.c
<item>print_range()  :  ada-typeprint.c
<item>print_type_scalar()  :  typeprint.c
<item>print_variant_part()  :  ada-valprint.c
<item>recursive_dump_type()  :  gdbtypes.c
<item>search_struct_field()  :  valops.c
<item>search_struct_method()  :  valops.c
<item>to_record_with_fixed_variant_part()  :  ada-lang.c
<item>unpack_field_as_long()  :  value.c
<item>value_primitive_field()  :  value.c
<item>value_struct_elt_for_reference()  :  valops.c
<item>value_val_atr()  :  ada-lang.c
<item>vtable_address_point_offset()  :  gnu-v3-abi.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bits_per_byte  :  objc-lang.c
<item>cplus_struct_default  :  gdbtypes.c
<item>first_bitfield_index  :  objc-lang.c
<item>first_bitfield_offset  :  objc-lang.c
<item>gdb_stdlog  :  main.c
<item>info_verbose  :  top.c
</itemize>
</descrip>

<sect1>Global Function objc_handle_update()

<p><tt>int objc_handle_update ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_fetch_pointer_argument()  :  gdbarch.c
<item>get_current_frame()  :  frame.c
<item>objc_read_trampoline_region()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void_func_ptr  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
<item>objc_trampolines  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function objc_init_runtime_version()

<p><tt>void objc_init_runtime_version ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_libobjc_objfile()  :  objc-lang.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>reread_symbols_for_objfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>objc_runtime_version  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function objc_init_trampoline_observer()

<p><tt>void objc_init_trampoline_observer ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_solib_event_breakpoint()  :  breakpoint.c
<item>find_libobjc_objfile()  :  objc-lang.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>objc_clear_trampoline_data()  :  objc-lang.c
<item>objc_read_trampoline_region()  :  objc-lang.c
<item>objfile_set_load_state()  :  objfiles.c
<item>printf_filtered()  :  utils.c
<item>read_memory_unsigned_integer()  :  corefile.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>reread_symbols_for_objfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>info_verbose  :  top.c
<item>objc_trampolines  :  objc-lang.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function objc_invalidate_objc_class()

<p><tt>void objc_invalidate_objc_class ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>new_objc_runtime_internals()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_structure_type()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function objc_pc_at_fail_point()

<p><tt>enum objc_handcall_fail_reasons objc_pc_at_fail_point ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debugger_mode_fail_breakpoint  :  objc-lang.c
<item>objc_exception_throw_breakpoint  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function objc_runtime_check_enabled_p()

<p><tt>int objc_runtime_check_enabled_p ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>objc_setup_safe_print()  :  objc-lang.c
<item>set_non_blocking_mode_func()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>use_non_blocking_mode  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function objc_runtime_lock_taken_p()

<p><tt>int objc_runtime_lock_taken_p ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>call_function_by_hand()  :  infcall.c
<item>create_cached_function()  :  value.c
<item>lookup_cached_function()  :  value.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>value_as_long()  :  value.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_voidptrfuncptr  :  gdbtypes.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function objc_setup_safe_print()

<p><tt>int objc_setup_safe_print ( struct cleanup** cleanup )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cli_out_new()  :  cli-out.c
<item>do_cleanups()  :  utils.c
<item>fprintf_unfiltered()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>make_cleanup_set_restore_scheduler_locking_mode()  :  utils.c
<item>objc_check_safe_to_run_all_threads()  :  objc-lang.c
<item>objc_runtime_check_enabled_p()  :  objc-lang.c
<item>scheduler_lock_on_p()  :  infrun.c
<item>ui_file_data()  :  ui-file.c
<item>ui_file_rewind()  :  ui-file.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>init_remote_macosx_ops()  :  remote.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>null_cleanup()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_handcall_setup  :  infrun.c
<item>gdb_null  :  main.c
<item>gdb_stdout  :  main.c
<item>info_verbose  :  top.c
<item>po_and_print_run_all_threads  :  objc-lang.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function objc_target_type_from_object()

<p><tt>struct type* objc_target_type_from_object ( CORE_ADDR object_addr, struct block* block, int addrsize, char** class_name_ptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_classname_to_cache()  :  objc-lang.c
<item>get_class_address_from_object()  :  objc-lang.c
<item>lookup_classname_in_cache()  :  objc-lang.c
<item>lookup_symbol()  :  symtab.c
<item>new_objc_runtime_get_classname()  :  objc-lang.c
<item>new_objc_runtime_internals()  :  objc-lang.c
<item>read_memory_string()  :  corefile.c
<item>read_memory_unsigned_integer()  :  corefile.c
<item>warning()  :  utils.c
<item>isalnum(), isalpha(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_objc_target_type()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function objcplus_demangle()

<p><tt>char* objcplus_demangle ( const char* mangled, int options )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objc_demangle()  :  objc-lang.c
<item>cplus_demangle()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>maintenance_demangle()  :  maint.c
<item>symbol_find_demangled_name()  :  symtab.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
</descrip>

<sect1>Global Function parse_method()

<p><tt>char* parse_method ( char* method, char* type, char** class_str, char** category, char** selector )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>isalnum(), isspace()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_imps()  :  objc-lang.c
<item>find_methods()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function parse_selector()

<p><tt>char* parse_selector ( char* method, char** selector )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>isalnum(), isspace()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_imps()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function pc_in_objc_trampoline_p()

<p><tt>int pc_in_objc_trampoline_p ( CORE_ADDR pc, uint32_t* flags )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_objc_msgcall()  :  objc-lang.c
<item>x86_frame_cache()  :  target/x86-shared-tdep.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>objc_trampolines  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function reinitialize_objc()

<p><tt>void reinitialize_objc ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objc_clear_caches()  :  objc-lang.c
<item>objc_clear_trampoline_data()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>generic_mourn_inferior()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cached_objc_objfile  :  objc-lang.c
<item>debug_mode_set_p  :  objc-lang.c
<item>debug_mode_set_reason  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function should_lookup_objc_class()

<p><tt>int should_lookup_objc_class ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>lookup_objc_class_p  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function start_msglist()

<p><tt>void start_msglist ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>objc_parse()  :  objc-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>msglist_len  :  objc-lang.c
<item>msglist_sel  :  objc-lang.c
<item>selname_chain  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function tell_objc_msgsend_cacher_objfile_changed()

<p><tt>void tell_objc_msgsend_cacher_objfile_changed ( struct objfile* obj )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objc_clear_trampoline_data()  :  objc-lang.c
<item>strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remove_symbol_file_command()  :  symfile.c
<item>reopen_exec_file()  :  corefile.c
<item>replace_psymbols_with_correct_psymbols()  :  symfile.c
<item>reread_symbols_for_objfile()  :  symfile.c
<item>slide_objfile()  :  objfiles.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cached_objc_msgsend_table_is_valid  :  objc-lang.c
<item>cached_objc_objfile  :  objc-lang.c
<item>objc_library_name  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function value_nsstring()

<p><tt>struct value* value_nsstring ( char* ptr, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_type()  :  gdbtypes.c
<item>call_function_by_hand()  :  infcall.c
<item>error()  :  utils.c
<item>find_function_in_inferior()  :  valops.c
<item>lookup_child_selector()  :  objc-lang.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_objc_class()  :  objc-lang.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>lookup_struct_typedef()  :  objc-lang.c
<item>make_function_type()  :  gdbtypes.c
<item>value_coerce_array()  :  valops.c
<item>value_from_longest()  :  value.c
<item>value_string()  :  valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_long  :  gdbtypes.c
<item>builtin_type_void  :  gdbtypes.c
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function value_objc_target_type()

<p><tt>struct type* value_objc_target_type ( struct value* val, struct block* block, char** dynamic_type_handle )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>objc_target_type_from_object()  :  objc-lang.c
<item>strcmp_iw()  :  utils.c
<item>value_as_address()  :  value.c
<item>value_type()  :  value.c
<item>xfree()  :  utils.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>safe_value_objc_target_type()  :  wrapper.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function add_class_to_cache()

<p><tt>static struct rb_tree_node* add_class_to_cache ( CORE_ADDR objc_class )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>rb_tree_find_node()  :  dwarf2read.c
<item>rb_tree_insert()  :  dwarf2read.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_real_class_to_cache()  :  objc-lang.c
<item>new_objc_runtime_class_getClass()  :  objc-lang.c
<item>read_objc_object()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>real_class_tree  :  objc-lang.c
</itemize>
</descrip>

<sect1>Local Function add_classname_to_cache()

<p><tt>static void add_classname_to_cache ( CORE_ADDR objc_class, char* classname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>rb_tree_insert()  :  dwarf2read.c
<item>xmalloc()  :  utils.c
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>objc_target_type_from_object()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>classname_tree  :  objc-lang.c
</itemize>
</descrip>

<sect1>Local Function add_implementation_to_cache()

<p><tt>static void add_implementation_to_cache ( CORE_ADDR objc_class, CORE_ADDR sel, CORE_ADDR implementation )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>rb_tree_insert()  :  dwarf2read.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_implementation()  :  objc-lang.c
<item>find_implementation_from_class()  :  objc-lang.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>implementation_tree  :  objc-lang.c
</itemize>
</descrip>

<sect1>Local Function add_real_class_to_cache()

<p><tt>static void add_real_class_to_cache ( CORE_ADDR objc_class, CORE_ADDR real_class )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_class_to_cache()  :  objc-lang.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_class_address_from_object()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Local Function class_valid_p()

<p><tt>static int class_valid_p ( CORE_ADDR objc_class )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>rb_tree_find_node()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>new_objc_runtime_class_getClass()  :  objc-lang.c
<item>read_objc_object()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>real_class_tree  :  objc-lang.c
</itemize>
</descrip>

<sect1>Local Function classes_info()

<p><tt>static void classes_info ( const char* regexp, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>begin_line()  :  utils.c
<item>error()  :  utils.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>printf_filtered()  :  utils.c
<item>puts_filtered_tabular()  :  utils.c
<item>quit()  :  utils.c
<item>re_comp()  :  utils.c
<item>re_exec()  :  utils.c
<item>specialcmp()  :  objc-lang.c
<item>symbol_natural_name()  :  symtab.c
<item>__builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), qsort(), strchr(), strlen()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_objc_language()  :  objc-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>compare_classes()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Local Function compare_classes()

<p><tt>static int compare_classes ( const void* a, const void* b )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>specialcmp()  :  objc-lang.c
<item>symbol_natural_name()  :  symtab.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>classes_info()  :  objc-lang.c
<item>find_imps()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle  :  utils.c
</itemize>
</descrip>

<sect1>Local Function compare_selectors()

<p><tt>static int compare_selectors ( const void* a, const void* b )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>specialcmp()  :  objc-lang.c
<item>symbol_natural_name()  :  symtab.c
<item>strchr()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>selectors_info()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle  :  utils.c
</itemize>
</descrip>

<sect1>Local Function do_cleanup_objc_exception_breakpoint()

<p><tt>static void do_cleanup_objc_exception_breakpoint ( void* unused )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>delete_breakpoint()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_init_objc_exception_catcher()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>objc_exception_throw_breakpoint  :  objc-lang.c
</itemize>
</descrip>

<sect1>Local Function do_end_debugger_mode()

<p><tt>static void do_end_debugger_mode ( void* arg )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>call_function_by_hand()  :  infcall.c
<item>do_cleanups()  :  utils.c
<item>fprintf_unfiltered()  :  utils.c
<item>hide_step_resume_breakpoint()  :  infrun.c
<item>internal_error()  :  utils.c
<item>lookup_cached_function()  :  value.c
<item>make_cleanup_enable_disable_bpts_during_operation()  :  breakpoint.c
<item>make_cleanup_set_restore_scheduler_locking_mode()  :  utils.c
<item>make_cleanup_set_restore_unwind_on_signal()  :  infcall.c
<item>restore_step_resume_breakpoint()  :  infrun.c
<item>start_timer()  :  maint.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp(), throw_exception()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>debug_handcall_setup  :  infrun.c
<item>debug_mode_set_p  :  objc-lang.c
<item>debug_mode_set_reason  :  objc-lang.c
<item>debug_mode_timer  :  objc-lang.c
<item>gdb_stdout  :  main.c
<item>maint_use_timers  :  maint.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function do_reset_debug_mode_flag()

<p><tt>static void do_reset_debug_mode_flag ( void* unused )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_handcall_setup  :  infrun.c
<item>debug_mode_set_p  :  objc-lang.c
<item>debug_mode_set_reason  :  objc-lang.c
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

<sect1>Local Function find_implementation_from_class()

<p><tt>static CORE_ADDR find_implementation_from_class ( CORE_ADDR objc_class, CORE_ADDR sel )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>add_implementation_to_cache()  :  objc-lang.c
<item>fprintf_unfiltered()  :  utils.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>lookup_implementation_in_cache()  :  objc-lang.c
<item>lookup_objc_class()  :  objc-lang.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>new_objc_runtime_internals()  :  objc-lang.c
<item>paddr_nz()  :  utils.c
<item>printf_filtered()  :  utils.c
<item>printf_unfiltered()  :  utils.c
<item>read_memory_string()  :  corefile.c
<item>read_memory_unsigned_integer()  :  corefile.c
<item>read_objc_class()  :  objc-lang.c
<item>read_objc_method_list_method()  :  objc-lang.c
<item>read_objc_method_list_nmethods()  :  objc-lang.c
<item>warning()  :  utils.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), isprint(), sigsetjmp(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_implementation()  :  objc-lang.c
<item>resolve_msgsend_super()  :  objc-lang.c
<item>resolve_msgsend_super_stret()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>debug_objc  :  objc-lang.c
<item>gdb_stdlog  :  main.c
<item>info_verbose  :  top.c
<item>objc_class_method_limit  :  objc-lang.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function find_methods()

<p><tt>static void find_methods ( struct symtab* symtab, char type, const char* class_str, const char* category, const char* selector, struct symbol** syms, unsigned int* nsym, unsigned int* ndebug )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_contains_pc()  :  block.c
<item>do_cleanups()  :  utils.c
<item>find_pc_sect_function()  :  blockframe.c
<item>internal_error()  :  utils.c
<item>make_cleanup_restrict_to_objfile()  :  objfiles.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>parse_method()  :  objc-lang.c
<item>quit()  :  utils.c
<item>symbol_natural_name()  :  symtab.c
<item>warning()  :  utils.c
<item>xrealloc()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_imps()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Local Function find_objc_msgcall_submethod()

<p><tt>static int find_objc_msgcall_submethod ( int (*f)(CORE_ADDR,CORE_ADDR*), CORE_ADDR pc, CORE_ADDR* new_pc )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>catch_errors()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_objc_msgcall()  :  objc-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>find_objc_msgcall_submethod_helper()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Local Function find_objc_msgcall_submethod_helper()

<p><tt>static int find_objc_msgcall_submethod_helper ( void* arg )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>find_objc_msgcall_submethod()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Local Function find_objc_msgsend()

<p><tt>static void find_objc_msgsend ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>find_pc_partial_function_no_inlined()  :  blockframe.c
<item>lookup_minimal_symbol()  :  minsyms.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_objc_msgcall()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cached_objc_msgsend_table_is_valid  :  objc-lang.c
<item>methcalls  :  objc-lang.c
</itemize>
</descrip>

<sect1>Local Function free_rb_tree_data()

<p><tt>static void free_rb_tree_data ( struct rb_tree_node* root, void (*free_fn)(void*) )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>free_rb_tree_data()  :  objc-lang.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_rb_tree_data()  :  objc-lang.c
<item>objc_clear_caches()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Local Function get_class_address_from_object()

<p><tt>static CORE_ADDR get_class_address_from_object ( CORE_ADDR object_addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_real_class_to_cache()  :  objc-lang.c
<item>call_function_by_hand()  :  infcall.c
<item>do_cleanups()  :  utils.c
<item>fprintf_unfiltered()  :  utils.c
<item>gdbarch_addr_bits_remove()  :  gdbarch.c
<item>lookup_child_selector()  :  objc-lang.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>lookup_real_class_in_cache()  :  objc-lang.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>make_cleanup_set_restore_scheduler_locking_mode()  :  utils.c
<item>make_cleanup_set_restore_unwind_on_signal()  :  infcall.c
<item>make_cleanup_ui_out_suppress_output()  :  utils.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>paddr_nz()  :  utils.c
<item>read_objc_object()  :  objc-lang.c
<item>value_as_address()  :  value.c
<item>value_from_pointer()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_implementation()  :  objc-lang.c
<item>objc_target_type_from_object()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void_data_ptr  :  gdbtypes.c
<item>builtin_type_voidptrfuncptr  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
<item>current_target  :  target/target.c
<item>debug_objc  :  objc-lang.c
<item>gdb_stdlog  :  main.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function init_debugger_mode_fail_notification()

<p><tt>static int init_debugger_mode_fail_notification ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>create_objc_hook_breakpoint()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debugger_mode_fail_breakpoint  :  objc-lang.c
</itemize>
</descrip>

<sect1>Local Function lookup_classname_in_cache()

<p><tt>static char* lookup_classname_in_cache ( CORE_ADDR objc_class )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>rb_tree_find_node_all_keys()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>objc_target_type_from_object()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>classname_tree  :  objc-lang.c
</itemize>
</descrip>

<sect1>Local Function lookup_implementation_in_cache()

<p><tt>static CORE_ADDR lookup_implementation_in_cache ( CORE_ADDR objc_class, CORE_ADDR sel )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>rb_tree_find_node_all_keys()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_implementation()  :  objc-lang.c
<item>find_implementation_from_class()  :  objc-lang.c
<item>resolve_newruntime_objc_msgsendsuper()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>implementation_tree  :  objc-lang.c
</itemize>
</descrip>

<sect1>Local Function lookup_real_class_in_cache()

<p><tt>static CORE_ADDR lookup_real_class_in_cache ( CORE_ADDR objc_class )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>rb_tree_find_node()  :  dwarf2read.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_class_address_from_object()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>real_class_tree  :  objc-lang.c
</itemize>
</descrip>

<sect1>Local Function new_objc_runtime_class_getClass()

<p><tt>static CORE_ADDR new_objc_runtime_class_getClass ( struct value* infargs )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>add_class_to_cache()  :  objc-lang.c
<item>call_function_by_hand()  :  infcall.c
<item>class_valid_p()  :  objc-lang.c
<item>create_cached_function()  :  value.c
<item>fprintf_unfiltered()  :  utils.c
<item>hand_function_call_timeout_p()  :  infcall.c
<item>lookup_cached_function()  :  value.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>paddr_nz()  :  utils.c
<item>set_hand_function_call_timeout()  :  infcall.c
<item>value_as_address()  :  value.c
<item>warning()  :  utils.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>new_objc_runtime_get_classname()  :  objc-lang.c
<item>read_objc_object()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_voidptrfuncptr  :  gdbtypes.c
<item>debug_objc  :  objc-lang.c
<item>gdb_stdlog  :  main.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function new_objc_runtime_find_impl()

<p><tt>static CORE_ADDR new_objc_runtime_find_impl ( CORE_ADDR objc_class, CORE_ADDR sel, int stret )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>add_implementation_to_cache()  :  objc-lang.c
<item>call_function_by_hand()  :  infcall.c
<item>create_cached_function()  :  value.c
<item>do_cleanups()  :  utils.c
<item>find_pc_partial_function_no_inlined()  :  blockframe.c
<item>fprintf_unfiltered()  :  utils.c
<item>gdbarch_addr_bits_remove()  :  gdbarch.c
<item>lookup_cached_function()  :  value.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>make_cleanup_set_restore_scheduler_locking_mode()  :  utils.c
<item>make_cleanup_set_restore_unwind_on_signal()  :  infcall.c
<item>make_cleanup_ui_out_suppress_output()  :  utils.c
<item>new_objc_runtime_class_getClass()  :  objc-lang.c
<item>paddr_nz()  :  utils.c
<item>release_value()  :  value.c
<item>value_as_address()  :  value.c
<item>value_from_pointer()  :  value.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_implementation()  :  objc-lang.c
<item>find_implementation_from_class()  :  objc-lang.c
<item>get_class_address_from_object()  :  objc-lang.c
<item>resolve_newruntime_objc_msgsendsuper()  :  objc-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>value_free()  :  value.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void_data_ptr  :  gdbtypes.c
<item>builtin_type_voidptrfuncptr  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
<item>current_target  :  target/target.c
<item>debug_objc  :  objc-lang.c
<item>gdb_stdlog  :  main.c
<item>gdb_stdout  :  main.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function new_objc_runtime_get_classname()

<p><tt>static int new_objc_runtime_get_classname ( CORE_ADDR objc_class, char* class_name, int size )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>call_function_by_hand()  :  infcall.c
<item>create_cached_function()  :  value.c
<item>do_cleanups()  :  utils.c
<item>lookup_cached_function()  :  value.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>make_cleanup_set_restore_scheduler_locking_mode()  :  utils.c
<item>make_cleanup_set_restore_unwind_on_signal()  :  infcall.c
<item>make_cleanup_ui_out_suppress_output()  :  utils.c
<item>new_objc_runtime_class_getClass()  :  objc-lang.c
<item>read_memory_string()  :  corefile.c
<item>release_value()  :  value.c
<item>value_as_address()  :  value.c
<item>value_from_pointer()  :  value.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>objc_target_type_from_object()  :  objc-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>value_free()  :  value.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void_data_ptr  :  gdbtypes.c
<item>builtin_type_voidptrfuncptr  :  gdbtypes.c
<item>current_target  :  target/target.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function objc_clear_trampoline_data()

<p><tt>static void objc_clear_trampoline_data ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>delete_breakpoint()  :  breakpoint.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>objc_init_trampoline_observer()  :  objc-lang.c
<item>reinitialize_objc()  :  objc-lang.c
<item>tell_objc_msgsend_cacher_objfile_changed()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>objc_trampolines  :  objc-lang.c
</itemize>
</descrip>

<sect1>Local Function objc_create_fundamental_type()

<p><tt>static struct type* objc_create_fundamental_type ( struct objfile* objfile, int c_typeid )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_double_bit()  :  gdbarch.c
<item>gdbarch_float_bit()  :  gdbarch.c
<item>gdbarch_int_bit()  :  gdbarch.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>gdbarch_long_double_bit()  :  gdbarch.c
<item>gdbarch_long_long_bit()  :  gdbarch.c
<item>gdbarch_short_bit()  :  gdbarch.c
<item>init_type()  :  gdbtypes.c
<item>warning()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function objc_emit_char()

<p><tt>static void objc_emit_char ( int c, struct ui_file* stream, int quoter )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>objc_printchar()  :  objc-lang.c
<item>objc_printstr()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>sevenbit_strings  :  utils.c
</itemize>
</descrip>

<sect1>Local Function objc_printchar()

<p><tt>static void objc_printchar ( int c, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fputs_filtered()  :  utils.c
<item>objc_emit_char()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>objc_printstr()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
</descrip>

<sect1>Local Function objc_printstr()

<p><tt>static void objc_printstr ( struct ui_file* stream, const gdb_byte* string, unsigned int length, int width, int force_ellipses )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>objc_emit_char()  :  objc-lang.c
<item>objc_printchar()  :  objc-lang.c
<item>quit()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inspect_it  :  printcmd.c
<item>print_max  :  valprint.c
<item>quit_flag  :  utils.c
<item>repeat_count_threshold  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function objc_read_trampoline_region()

<p><tt>static struct objc_trampoline_region* objc_read_trampoline_region ( CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>discard_cleanups()  :  utils.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>read_memory_unsigned_integer()  :  corefile.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>objc_handle_update()  :  objc-lang.c
<item>objc_init_trampoline_observer()  :  objc-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function objc_skip_trampoline()

<p><tt>static CORE_ADDR objc_skip_trampoline ( CORE_ADDR stop_pc )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>find_objc_msgcall()  :  objc-lang.c
<item>gdbarch_skip_trampoline_code()  :  gdbarch.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function print_object_command()

<p><tt>static void print_object_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>call_function_by_hand()  :  infcall.c
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>find_function_in_inferior()  :  valops.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_typename()  :  gdbtypes.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>make_cleanup_set_restore_unwind_on_signal()  :  infcall.c
<item>paddr_nz()  :  utils.c
<item>parse_expression()  :  parse.c
<item>printf_filtered()  :  utils.c
<item>quit()  :  utils.c
<item>read_memory()  :  corefile.c
<item>read_objc_object()  :  objc-lang.c
<item>scheduler_lock_on_p()  :  infrun.c
<item>value_as_address()  :  value.c
<item>value_cast()  :  valops.c
<item>value_type()  :  value.c
<item>warning()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_objc_language()  :  objc-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void_data_ptr  :  gdbtypes.c
<item>builtin_type_voidptrfuncptr  :  gdbtypes.c
<item>current_target  :  target/target.c
<item>innermost_block  :  parse.c
<item>po_and_print_run_all_threads  :  objc-lang.c
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Local Function read_objc_class()

<p><tt>static void read_objc_class ( CORE_ADDR addr, struct objc_class* inf_objc_class )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_long_bit()  :  gdbarch.c
<item>read_memory_unsigned_integer()  :  corefile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_implementation_from_class()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function read_objc_method()

<p><tt>static void read_objc_method ( CORE_ADDR addr, struct objc_method* method )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_long_bit()  :  gdbarch.c
<item>read_memory_unsigned_integer()  :  corefile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_objc_method_list_method()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function read_objc_method_list_method()

<p><tt>static void read_objc_method_list_method ( CORE_ADDR addr, unsigned long num, struct objc_method* method )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_long_bit()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>read_objc_method()  :  objc-lang.c
<item>read_objc_method_list_nmethods()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_implementation_from_class()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function read_objc_method_list_nmethods()

<p><tt>static unsigned long read_objc_method_list_nmethods ( CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_long_bit()  :  gdbarch.c
<item>read_memory_unsigned_integer()  :  corefile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_implementation_from_class()  :  objc-lang.c
<item>read_objc_method_list_method()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function read_objc_object()

<p><tt>static void read_objc_object ( CORE_ADDR addr, struct objc_object* object )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_class_to_cache()  :  objc-lang.c
<item>call_function_by_hand()  :  infcall.c
<item>class_valid_p()  :  objc-lang.c
<item>create_cached_function()  :  value.c
<item>do_cleanups()  :  utils.c
<item>fprintf_unfiltered()  :  utils.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>hand_function_call_timeout_p()  :  infcall.c
<item>lookup_cached_function()  :  value.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>make_cleanup_set_restore_unwind_on_signal()  :  infcall.c
<item>make_cleanup_ui_out_suppress_output()  :  utils.c
<item>new_objc_runtime_class_getClass()  :  objc-lang.c
<item>new_objc_runtime_internals()  :  objc-lang.c
<item>paddr_nz()  :  utils.c
<item>safe_read_memory_unsigned_integer()  :  corefile.c
<item>set_hand_function_call_timeout()  :  infcall.c
<item>ui_file_rewind()  :  ui-file.c
<item>value_as_address()  :  value.c
<item>value_from_pointer()  :  value.c
<item>warning()  :  utils.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_implementation()  :  objc-lang.c
<item>get_class_address_from_object()  :  objc-lang.c
<item>print_object_command()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void_data_ptr  :  gdbtypes.c
<item>builtin_type_voidptrfuncptr  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
<item>debug_objc  :  objc-lang.c
<item>gdb_null  :  main.c
<item>gdb_stderr  :  main.c
<item>gdb_stdlog  :  main.c
<item>info_verbose  :  top.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function read_objc_super()

<p><tt>static void read_objc_super ( CORE_ADDR addr, struct objc_super* super )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_long_bit()  :  gdbarch.c
<item>read_memory_unsigned_integer()  :  corefile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>resolve_msgsend_super()  :  objc-lang.c
<item>resolve_msgsend_super_stret()  :  objc-lang.c
<item>resolve_newruntime_objc_msgsendsuper()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function reset_child_selector_cache()

<p><tt>static void reset_child_selector_cache ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>lookup_child_selector()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>selector_hash  :  objc-lang.c
</itemize>
</descrip>

<sect1>Local Function resolve_msgsend()

<p><tt>static int resolve_msgsend ( CORE_ADDR pc, CORE_ADDR* new_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_implementation()  :  objc-lang.c
<item>gdbarch_fetch_pointer_argument()  :  gdbarch.c
<item>get_current_frame()  :  frame.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void_func_ptr  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function resolve_msgsend_fixedup()

<p><tt>static int resolve_msgsend_fixedup ( CORE_ADDR pc, CORE_ADDR* new_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>resolve_newruntime_objc_msgsend()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_objc_msgcall()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
</descrip>

<sect1>Local Function resolve_msgsend_fixup()

<p><tt>static int resolve_msgsend_fixup ( CORE_ADDR pc, CORE_ADDR* new_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>resolve_newruntime_objc_msgsend()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
</descrip>

<sect1>Local Function resolve_msgsend_stret()

<p><tt>static int resolve_msgsend_stret ( CORE_ADDR pc, CORE_ADDR* new_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_implementation()  :  objc-lang.c
<item>gdbarch_fetch_pointer_argument()  :  gdbarch.c
<item>get_current_frame()  :  frame.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void_func_ptr  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function resolve_msgsend_stret_fixedup()

<p><tt>static int resolve_msgsend_stret_fixedup ( CORE_ADDR pc, CORE_ADDR* new_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>resolve_newruntime_objc_msgsend()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_objc_msgcall()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
</descrip>

<sect1>Local Function resolve_msgsend_stret_fixup()

<p><tt>static int resolve_msgsend_stret_fixup ( CORE_ADDR pc, CORE_ADDR* new_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>resolve_newruntime_objc_msgsend()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
</descrip>

<sect1>Local Function resolve_msgsend_super()

<p><tt>static int resolve_msgsend_super ( CORE_ADDR pc, CORE_ADDR* new_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_implementation_from_class()  :  objc-lang.c
<item>gdbarch_fetch_pointer_argument()  :  gdbarch.c
<item>get_current_frame()  :  frame.c
<item>read_objc_super()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void_func_ptr  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function resolve_msgsend_super_stret()

<p><tt>static int resolve_msgsend_super_stret ( CORE_ADDR pc, CORE_ADDR* new_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_implementation_from_class()  :  objc-lang.c
<item>gdbarch_fetch_pointer_argument()  :  gdbarch.c
<item>get_current_frame()  :  frame.c
<item>read_objc_super()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void_func_ptr  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function resolve_msgsendsuper2()

<p><tt>static int resolve_msgsendsuper2 ( CORE_ADDR pc, CORE_ADDR* new_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>resolve_newruntime_objc_msgsendsuper()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
</descrip>

<sect1>Local Function resolve_msgsendsuper2_fixedup()

<p><tt>static int resolve_msgsendsuper2_fixedup ( CORE_ADDR pc, CORE_ADDR* new_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>resolve_newruntime_objc_msgsendsuper()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
</descrip>

<sect1>Local Function resolve_msgsendsuper2_fixup()

<p><tt>static int resolve_msgsendsuper2_fixup ( CORE_ADDR pc, CORE_ADDR* new_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>resolve_newruntime_objc_msgsendsuper()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
</descrip>

<sect1>Local Function resolve_msgsendsuper2_stret()

<p><tt>static int resolve_msgsendsuper2_stret ( CORE_ADDR pc, CORE_ADDR* new_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>resolve_newruntime_objc_msgsendsuper()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
</descrip>

<sect1>Local Function resolve_msgsendsuper2_stret_fixedup()

<p><tt>static int resolve_msgsendsuper2_stret_fixedup ( CORE_ADDR pc, CORE_ADDR* new_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>resolve_newruntime_objc_msgsendsuper()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
</descrip>

<sect1>Local Function resolve_msgsendsuper2_stret_fixup()

<p><tt>static int resolve_msgsendsuper2_stret_fixup ( CORE_ADDR pc, CORE_ADDR* new_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>resolve_newruntime_objc_msgsendsuper()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>objc-lang.c
</itemize>
</descrip>

<sect1>Local Function resolve_newruntime_objc_msgsend()

<p><tt>static int resolve_newruntime_objc_msgsend ( CORE_ADDR pc, CORE_ADDR* new_pc, int fixedup, int stret )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>find_implementation()  :  objc-lang.c
<item>gdbarch_fetch_pointer_argument()  :  gdbarch.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>get_current_frame()  :  frame.c
<item>lookup_child_selector()  :  objc-lang.c
<item>read_memory_string()  :  corefile.c
<item>read_memory_unsigned_integer()  :  corefile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>resolve_msgsend_fixedup()  :  objc-lang.c
<item>resolve_msgsend_fixup()  :  objc-lang.c
<item>resolve_msgsend_stret_fixedup()  :  objc-lang.c
<item>resolve_msgsend_stret_fixup()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void_func_ptr  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function resolve_newruntime_objc_msgsendsuper()

<p><tt>static int resolve_newruntime_objc_msgsendsuper ( CORE_ADDR pc, CORE_ADDR* new_pc, int fixedup, int stret )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_fetch_pointer_argument()  :  gdbarch.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>get_current_frame()  :  frame.c
<item>lookup_child_selector()  :  objc-lang.c
<item>lookup_implementation_in_cache()  :  objc-lang.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>read_memory_string()  :  corefile.c
<item>read_memory_unsigned_integer()  :  corefile.c
<item>read_objc_super()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>resolve_msgsendsuper2()  :  objc-lang.c
<item>resolve_msgsendsuper2_fixedup()  :  objc-lang.c
<item>resolve_msgsendsuper2_fixup()  :  objc-lang.c
<item>resolve_msgsendsuper2_stret()  :  objc-lang.c
<item>resolve_msgsendsuper2_stret_fixedup()  :  objc-lang.c
<item>resolve_msgsendsuper2_stret_fixup()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void_func_ptr  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function selectors_info()

<p><tt>static void selectors_info ( const char* regexp, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>begin_line()  :  utils.c
<item>error()  :  utils.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>printf_filtered()  :  utils.c
<item>puts_filtered_tabular()  :  utils.c
<item>quit()  :  utils.c
<item>re_comp()  :  utils.c
<item>re_exec()  :  utils.c
<item>specialcmp()  :  objc-lang.c
<item>symbol_natural_name()  :  symtab.c
<item>__builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), qsort(), strchr(), strlen()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_objc_language()  :  objc-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>compare_selectors()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Local Function set_non_blocking_mode_func()

<p><tt>static void set_non_blocking_mode_func ( const char* args, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>do_hand_call_cleanups()  :  utils.c
<item>objc_runtime_check_enabled_p()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_objc_lang()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Local Function specialcmp()

<p><tt>static int specialcmp ( const char* a, const char* b )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>classes_info()  :  objc-lang.c
<item>compare_classes()  :  objc-lang.c
<item>compare_selectors()  :  objc-lang.c
<item>selectors_info()  :  objc-lang.c
</itemize>
</descrip>

</article>
