<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF dbxread.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for dbxread.c of gdb.cxref.
<author>cxref

<sect>File dbxread.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>dbx_new_init()  :  dbxread.c
<item>dbx_symfile_finish()  :  dbxread.c
<item>dbx_symfile_init()  :  dbxread.c
<item>dbx_symfile_read()  :  dbxread.c
<item>default_symfile_offsets()  :  symfile.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;fcntl.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_stat.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;sys/stat.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/libaout.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/bfdlink.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;buildsym.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;stabsread.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb-stabs.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;complaints.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;cp-abi.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/mach-o.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &lt;mach-o/loader.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;macosx/macosx-nat-dyld.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-mutils.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;target.h&quot;</tt>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<item><tt>#include &quot;target.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-utils.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
</itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-threads.h&quot;</tt>
<itemize>
<item><tt>#include &lt;pthread.h&gt;</tt>
</itemize>
<item><tt>#include &lt;mach/machine.h&gt;</tt>
<item><tt>#include &lt;mach-o/loader.h&gt;</tt>
<item><tt>#include &quot;macosx/macosx-nat-dyld-info.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/machine.h&gt;</tt>
<item><tt>#include &lt;mach-o/loader.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-dyld-path.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/aout/aout64.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/aout/stab_gnu.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/aout/stab.def&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;AvailabilityMacros.h&gt;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define LDSYMOFF( p )</tt><newline>
<p>
<tt>#define LDSYMLEN( p )</tt><newline>
<p>
<tt>#define SYMLOC( p )</tt><newline>
<p>
<tt>#define SYMBOL_SIZE( p )</tt><newline>
<p>
<tt>#define SYMBOL_OFFSET( p )</tt><newline>
<p>
<tt>#define STRING_OFFSET( p )</tt><newline>
<p>
<tt>#define FILE_STRING_OFFSET( p )</tt><newline>
<p>
<tt>#define SYMBOL_PREFIX( p )</tt><newline>
<p>
<tt>#define DBX_STRINGTAB_SIZE_SIZE</tt><newline>
<p>
<tt>#define STRING_TABLE_OFFSET</tt><newline>
<p>
<tt>#define SYMBOL_TABLE_OFFSET</tt><newline>
<p>
<tt>#define PEEK_SYMBOL( intern, sect_p, abfd )</tt><newline>
<p>
<tt>#define NEXT_SYMBOL( intern, sect_p, abfd )</tt><newline>
<p>
<tt>#define bincl_hash msymbol_hash</tt><newline>
<p>
<tt>#define PUBTYPE_ARCHIVES_CHUNK 10</tt><newline>
<p>
<tt>#define VARIABLES_INSIDE_BLOCK( desc, gcc_p )</tt><newline>
<p>
<tt>#define COFF_STABS_SYMBOL_SIZE 12</tt><newline>
<p>
<tt>#define ELF_STABS_SYMBOL_SIZE 12</tt><newline>

<sect1>Type struct symloc

<p>
<itemize>
<item><tt>struct symloc</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int ldsymoff;</tt><newline>
<item><tt>int ldsymlen;</tt><newline>
<item><tt>int symbol_size;</tt><newline>
<item><tt>int symbol_offset;</tt><newline>
<item><tt>int string_offset;</tt><newline>
<item><tt>int file_string_offset;</tt><newline>
<item><tt>const char* prefix;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct header_file_location

<p>
<itemize>
<item><tt>struct header_file_location</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const char* name;</tt><newline>
<item><tt>unsigned long hash;</tt><newline>
<item><tt>int instance;</tt><newline>
<item><tt>struct partial_symtab* pst;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct partial_symtab_list

<p>
<itemize>
<item><tt>struct partial_symtab_list</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct partial_symtab_list* next;</tt><newline>
<item><tt>struct partial_symtab* pst;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct oso_data_cleanup

<p>
<itemize>
<item><tt>struct oso_data_cleanup</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>bfd_window stab_window;</tt><newline>
<item><tt>bfd_window strtab_window;</tt><newline>
<item><tt>bfd_byte** stab_data_handle;</tt><newline>
<item><tt>char** strtab_data_handle;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Local Variables

<p>
<bf>read_type_psym_p</bf><newline>
<tt>static int read_type_psym_p</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_dbxread()
<item>read_dbx_symtab()
</itemize>
</descrip>
<p>
<bf>end_fun_absolute_p</bf><newline>
<tt>static int end_fun_absolute_p</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_dbxread()
<item>process_one_symbol()
<item>read_dbx_symtab()
</itemize>
</descrip>
<p>
<bf>psymtab_language</bf><newline>
<tt>static enum language psymtab_language</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>read_dbx_symtab()
<item>start_psymtab()
</itemize>
</descrip>
<p>
<bf>processing_objfile</bf><newline>
<tt>static struct objfile* processing_objfile</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dbx_next_symbol_text()
<item>oso_scan_partial_symtab()
<item>read_dbx_symtab()
<item>read_ofile_symtab()
<item>read_ofile_symtab_from_oso()
<item>read_oso_nlists()
<item>stabs_seek()
</itemize>
</descrip>
<p>
<bf>symbol_size</bf><newline>
<tt>static unsigned symbol_size</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dbx_next_symbol_text()
<item>dbx_psymtab_to_symtab_1()
<item>dbx_symfile_read()
<item>fill_symbuf()
<item>oso_scan_partial_symtab()
<item>read_dbx_symtab()
<item>read_ofile_symtab()
<item>read_ofile_symtab_from_oso()
<item>read_oso_nlists()
<item>stabs_seek()
<item>start_psymtab()
</itemize>
</descrip>
<p>
<bf>symbol_table_offset</bf><newline>
<tt>static unsigned symbol_table_offset</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dbx_symfile_read()
<item>fill_symbuf()
<item>start_psymtab()
</itemize>
</descrip>
<p>
<bf>string_table_offset</bf><newline>
<tt>static unsigned string_table_offset</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>start_psymtab()
</itemize>
</descrip>
<p>
<bf>file_string_table_offset</bf><newline>
<tt>static unsigned int file_string_table_offset</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dbx_next_symbol_text()
<item>dbx_psymtab_to_symtab_1()
<item>read_dbx_symtab()
<item>set_namestring_1()
<item>start_psymtab()
</itemize>
</descrip>
<p>
<bf>next_file_string_table_offset</bf><newline>
<tt>static unsigned int next_file_string_table_offset</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>read_dbx_symtab()
</itemize>
</descrip>
<p>
<bf>symfile_relocatable</bf><newline>
<tt>static int symfile_relocatable</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dbx_symfile_read()
<item>process_one_symbol()
</itemize>
</descrip>
<p>
<bf>block_address_function_relative</bf><newline>
<tt>static int block_address_function_relative</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dbx_symfile_read()
<item>process_one_symbol()
</itemize>
</descrip>
<p>
<bf>lowest_text_address</bf><newline>
<tt>static CORE_ADDR lowest_text_address</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>read_dbx_symtab()
<item>record_minimal_symbol()
</itemize>
</descrip>
<p>
<bf>has_line_numbers</bf><newline>
<tt>static int has_line_numbers</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>end_psymtab()
<item>read_dbx_symtab()
</itemize>
</descrip>
<p>
<bf>bincl_list</bf><newline>
<tt>static struct header_file_location* bincl_list</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_bincl_to_list()
<item>find_corresponding_bincl_psymtab()
<item>free_bincl_list()
<item>init_bincl_list()
</itemize>
</descrip>
<p>
<bf>next_bincl</bf><newline>
<tt>static struct header_file_location* next_bincl</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_bincl_to_list()
<item>find_corresponding_bincl_psymtab()
<item>init_bincl_list()
</itemize>
</descrip>
<p>
<bf>bincls_allocated</bf><newline>
<tt>static int bincls_allocated</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_bincl_to_list()
<item>free_bincl_list()
<item>init_bincl_list()
</itemize>
</descrip>
<p>
<bf>dbx_minsyms_recorded</bf><newline>
<tt>static unsigned long dbx_minsyms_recorded</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>record_minimal_symbol()
</itemize>
</descrip>
<p>
<bf>symbuf</bf><newline>
<tt>static unsigned char* symbuf</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dbx_next_symbol_text()
<item>fill_symbuf()
<item>oso_scan_partial_symtab()
<item>read_dbx_symtab()
<item>read_ofile_symtab()
<item>read_ofile_symtab_from_oso()
<item>read_oso_nlists()
</itemize>
</descrip>
<p>
<bf>symbuf_size</bf><newline>
<tt>static size_t symbuf_size</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>fill_symbuf()
</itemize>
</descrip>
<p>
<bf>symbuf_idx</bf><newline>
<tt>static int symbuf_idx</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dbx_next_symbol_text()
<item>fill_symbuf()
<item>oso_scan_partial_symtab()
<item>read_dbx_symtab()
<item>read_ofile_symtab()
<item>read_ofile_symtab_from_oso()
<item>read_oso_nlists()
<item>stabs_seek()
</itemize>
</descrip>
<p>
<bf>symbuf_end</bf><newline>
<tt>static int symbuf_end</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dbx_next_symbol_text()
<item>fill_symbuf()
<item>oso_scan_partial_symtab()
<item>read_dbx_symtab()
<item>read_ofile_symtab()
<item>read_ofile_symtab_from_oso()
<item>read_oso_nlists()
</itemize>
</descrip>
<p>
<bf>last_function_name</bf><newline>
<tt>static const char* last_function_name</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>end_psymtab()
<item>read_dbx_symtab()
</itemize>
</descrip>
<p>
<bf>stringtab_global</bf><newline>
<tt>static char* stringtab_global</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dbx_next_symbol_text()
<item>read_dbx_symtab()
<item>read_ofile_symtab()
<item>read_ofile_symtab_from_oso()
</itemize>
</descrip>
<p>
<bf>symbuf_sections</bf><newline>
<tt>static struct stab_section_list* symbuf_sections</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coffstab_build_psymtabs()
<item>fill_symbuf()
</itemize>
</descrip>
<p>
<bf>symbuf_left</bf><newline>
<tt>static unsigned int symbuf_left</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coffstab_build_psymtabs()
<item>elfstab_build_psymtabs()
<item>fill_symbuf()
<item>oso_scan_partial_symtab()
<item>read_ofile_symtab()
<item>read_ofile_symtab_from_oso()
<item>read_oso_nlists()
</itemize>
</descrip>
<p>
<bf>symbuf_read</bf><newline>
<tt>static unsigned int symbuf_read</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coffstab_build_psymtabs()
<item>elfstab_build_psymtabs()
<item>fill_symbuf()
<item>oso_scan_partial_symtab()
<item>read_ofile_symtab()
<item>read_ofile_symtab_from_oso()
<item>read_oso_nlists()
</itemize>
</descrip>
<p>
<bf>stabs_data</bf><newline>
<tt>static bfd_byte* stabs_data</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dbx_next_symbol_text()
<item>dbx_psymtab_to_symtab()
<item>elfstab_build_psymtabs()
<item>fill_symbuf()
<item>oso_scan_partial_symtab()
<item>read_dbx_symtab()
<item>read_ofile_symtab()
<item>read_ofile_symtab_from_oso()
<item>read_oso_nlists()
<item>stabs_seek()
</itemize>
</descrip>
<p>
<bf>oso_pst_num_allocated</bf><newline>
<tt>static int oso_pst_num_allocated</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_oso_pst_to_list()
<item>end_oso_pst_list()
</itemize>
</descrip>
<p>
<bf>oso_pst_num_used</bf><newline>
<tt>static int oso_pst_num_used</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_oso_pst_to_list()
<item>end_oso_pst_list()
</itemize>
</descrip>
<p>
<bf>pubtype_bfd_array</bf><newline>
<tt>static struct bfd** pubtype_bfd_array</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_to_containing_archive_cache()
<item>clear_containing_archive_cache()
<item>find_in_containing_archive_cache()
</itemize>
</descrip>
<p>
<bf>num_archives_for_pubtypes</bf><newline>
<tt>static int num_archives_for_pubtypes</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_to_containing_archive_cache()
<item>clear_containing_archive_cache()
<item>find_in_containing_archive_cache()
</itemize>
</descrip>
<p>
<bf>max_num_archives_for_pubtypes</bf><newline>
<tt>static int max_num_archives_for_pubtypes</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_to_containing_archive_cache()
</itemize>
</descrip>
<p>
<bf>aout_sym_fns</bf><newline>
<tt>static struct sym_fns aout_sym_fns</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_dbxread()
</itemize>
</descrip>

<sect1>Global Function _initialize_dbxread()

<p><tt>void _initialize_dbxread ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_symtab_fns()  :  symfile.c
<item>add_setshow_boolean_cmd()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>aout_sym_fns  :  dbxread.c
<item>end_fun_absolute_p  :  dbxread.c
<item>read_type_psym_p  :  dbxread.c
<item>setlist, showlist
</itemize>
</descrip>

<sect1>Global Function add_dyld_shared_cache_local_symbols()

<p><tt>void add_dyld_shared_cache_local_symbols ( struct objfile* objfile, uint8_t* nlist_records_base, int nlist_records_count, int nlist_record_size, char* strings_base, CORE_ADDR slide, int mainline )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
</descrip>

<sect1>Global Function add_oso_pst_to_list()

<p><tt>void add_oso_pst_to_list ( struct oso_pst_list* list, struct partial_symtab* pst, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>end_oso_pst_list()  :  dbxread.c
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>oso_pst_num_allocated  :  dbxread.c
<item>oso_pst_num_used  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Function clear_containing_archive_cache()

<p><tt>void clear_containing_archive_cache ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>close_containing_archive_and_contents()  :  dbxread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dbx_psymtab_to_symtab_1()  :  dbxread.c
<item>dwarf2_debug_map_psymtab_to_symtab()  :  dwarf2read.c
<item>open_bfd_from_oso()  :  dbxread.c
<item>oso_scan_partial_symtab()  :  dbxread.c
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>num_archives_for_pubtypes  :  dbxread.c
<item>pubtype_bfd_array  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Function close_bfd_or_archive()

<p><tt>void close_bfd_or_archive ( bfd* abfd )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>close_containing_archive_and_contents()  :  dbxread.c
<item>bfd_close()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_debug_map_psymtab_to_symtab()  :  dwarf2read.c
<item>dwarf2_scan_inlined_section_for_psymbols()  :  dwarf2read.c
<item>dwarf2_scan_pubtype_for_psymbols()  :  dwarf2read.c
<item>open_bfd_from_oso()  :  dbxread.c
<item>oso_scan_partial_symtab()  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Function coffstab_build_psymtabs()

<p><tt>void coffstab_build_psymtabs ( struct objfile* objfile, int mainline, CORE_ADDR textaddr, unsigned int textsize, struct stab_section_list* stabsects, file_ptr stabstroffset, unsigned int stabstrsize )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>buildsym_new_init()  :  buildsym.c
<item>dbx_symfile_read()  :  dbxread.c
<item>error()  :  utils.c
<item>free_header_files()  :  dbxread.c
<item>init_header_files()  :  dbxread.c
<item>internal_error()  :  utils.c
<item>perror_with_name()  :  utils.c
<item>stabsread_new_init()  :  stabsread.c
<item>warning()  :  utils.c
<item>_obstack_newchunk(), bfd_bread(), bfd_get_size(), bfd_seek()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symfile_read()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>processing_acc_compilation  :  buildsym.c
<item>symbuf_left  :  dbxread.c
<item>symbuf_read  :  dbxread.c
<item>symbuf_sections  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Function dbx_symfile_read()

<p><tt>void dbx_symfile_read ( struct objfile* objfile, int mainline )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>free_pending_blocks()  :  buildsym.c
<item>init_minimal_symbol_collection()  :  minsyms.c
<item>init_psymbol_list()  :  symfile.c
<item>install_minimal_symbols()  :  minsyms.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_discard_minimal_symbols()  :  minsyms.c
<item>objfile_contains_objc()  :  dbxread.c
<item>perror_with_name()  :  utils.c
<item>read_dbx_dynamic_symtab()  :  dbxread.c
<item>read_dbx_symtab()  :  dbxread.c
<item>start_timer()  :  maint.c
<item>bfd_seek(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coffstab_build_psymtabs()  :  dbxread.c
<item>elfstab_build_psymtabs()  :  dbxread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>really_free_pendings()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>block_address_function_relative  :  dbxread.c
<item>maint_use_timers  :  maint.c
<item>symbol_size  :  dbxread.c
<item>symbol_table_offset  :  dbxread.c
<item>symfile_relocatable  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Function elfstab_build_psymtabs()

<p><tt>void elfstab_build_psymtabs ( struct objfile* objfile, int mainline, asection* stabsect, file_ptr stabstroffset, unsigned int stabstrsize )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>buildsym_new_init()  :  buildsym.c
<item>dbx_symfile_read()  :  dbxread.c
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>find_text_range()  :  dbxread.c
<item>free_header_files()  :  dbxread.c
<item>init_header_files()  :  dbxread.c
<item>make_cleanup()  :  utils.c
<item>perror_with_name()  :  utils.c
<item>stabsread_new_init()  :  stabsread.c
<item>symfile_relocate_debug_section()  :  symfile.c
<item>warning()  :  utils.c
<item>_obstack_newchunk(), bfd_bread(), bfd_get_size(), bfd_seek()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>elf_symfile_read()  :  elfread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>processing_acc_compilation  :  buildsym.c
<item>stabs_data  :  dbxread.c
<item>symbuf_left  :  dbxread.c
<item>symbuf_read  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Function end_oso_pst_list()

<p><tt>void end_oso_pst_list ( struct oso_pst_list* list, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_oso_pst_to_list()  :  dbxread.c
<item>xfree()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>oso_pst_num_allocated  :  dbxread.c
<item>oso_pst_num_used  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Function end_psymtab()

<p><tt>struct partial_symtab* end_psymtab ( struct partial_symtab* pst, const char** include_list, int num_includes, int capping_symbol_offset, CORE_ADDR capping_text, struct partial_symtab** dependency_list, int number_dependencies, int textlow_not_set )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_psymtab()  :  symfile.c
<item>discard_psymtab()  :  symfile.c
<item>find_name_end()  :  stabsread.c
<item>free_named_symtabs()  :  symfile.c
<item>internal_error()  :  utils.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>psymtab_get_first()  :  objfiles.c
<item>psymtab_get_next()  :  objfiles.c
<item>sort_pst_symbols()  :  symfile.c
<item>__builtin___memcpy_chk(), __builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), __inline_strncpy_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_partial_symbols()  :  mdebugread.c
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>has_line_numbers  :  dbxread.c
<item>last_function_name  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Function free_header_files()

<p><tt>void free_header_files ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coffstab_build_psymtabs()  :  dbxread.c
<item>dbx_symfile_finish()  :  dbxread.c
<item>elfstab_build_psymtabs()  :  dbxread.c
<item>mdebug_build_psymtabs()  :  mdebugread.c
<item>stabsect_build_psymtabs()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>n_allocated_this_object_header_files  :  stabsread.c
<item>this_object_header_files  :  stabsread.c
</itemize>
</descrip>

<sect1>Global Function init_header_files()

<p><tt>void init_header_files ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coffstab_build_psymtabs()  :  dbxread.c
<item>dbx_new_init()  :  dbxread.c
<item>elfstab_build_psymtabs()  :  dbxread.c
<item>mdebug_build_psymtabs()  :  mdebugread.c
<item>stabsect_build_psymtabs()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>n_allocated_this_object_header_files  :  stabsread.c
<item>this_object_header_files  :  stabsread.c
</itemize>
</descrip>

<sect1>Global Function init_oso_pst_list()

<p><tt>struct oso_pst_list* init_oso_pst_list ( char* oso_name, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Function open_bfd_from_oso()

<p><tt>struct bfd* open_bfd_from_oso ( struct partial_symtab* pst, int* cached )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_to_containing_archive_cache()  :  dbxread.c
<item>clear_containing_archive_cache()  :  dbxread.c
<item>close_bfd_or_archive()  :  dbxread.c
<item>discard_cleanups()  :  utils.c
<item>do_cleanups()  :  utils.c
<item>find_in_containing_archive_cache()  :  dbxread.c
<item>make_cleanup()  :  utils.c
<item>open_bfd_matching_arch()  :  symfile.c
<item>parse_archive_name()  :  dbxread.c
<item>safe_strerror()  :  utils.c
<item>warning()  :  utils.c
<item>__error(), bfd_check_format(), bfd_get_mtime(), bfd_openr(), bfd_openr_next_archived_file(), macosx_get_osabi_from_dyld_entry(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dbx_psymtab_to_symtab_1()  :  dbxread.c
<item>dwarf2_debug_map_psymtab_to_symtab()  :  dwarf2read.c
<item>dwarf2_scan_inlined_section_for_psymbols()  :  dwarf2read.c
<item>dwarf2_scan_pubtype_for_psymbols()  :  dwarf2read.c
<item>oso_scan_partial_symtab()  :  dbxread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gnutarget  :  corefile.c
</itemize>
</descrip>

<sect1>Global Function oso_scan_partial_symtab()

<p><tt>void oso_scan_partial_symtab ( struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_bincl_to_list()  :  dbxread.c
<item>clear_containing_archive_cache()  :  dbxread.c
<item>close_bfd_or_archive()  :  dbxread.c
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>fill_symbuf()  :  dbxread.c
<item>find_corresponding_bincl_psymtab()  :  dbxread.c
<item>init_bincl_list()  :  dbxread.c
<item>make_cleanup_free_bincl_list()  :  dbxread.c
<item>open_bfd_from_oso()  :  dbxread.c
<item>set_namestring_1()  :  dbxread.c
<item>stabs_seek()  :  dbxread.c
<item>stabsect_read_strtab_from_oso()  :  dbxread.c
<item>warning()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), _obstack_newchunk(), bfd_check_format(), macosx_internalize_symbol(), strcmp(), strrchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dbx_psymtab_to_symtab_1()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>processing_objfile  :  dbxread.c
<item>stabs_data  :  dbxread.c
<item>symbol_size  :  dbxread.c
<item>symbuf  :  dbxread.c
<item>symbuf_end  :  dbxread.c
<item>symbuf_idx  :  dbxread.c
<item>symbuf_left  :  dbxread.c
<item>symbuf_read  :  dbxread.c
<item>symnum  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function parse_archive_name()

<p><tt>int parse_archive_name ( const char* oso_name, char** archive_name, char** module_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), strlen(), strrchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>open_bfd_from_oso()  :  dbxread.c
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Function process_one_symbol()

<p><tt>void process_one_symbol ( int type, int desc, CORE_ADDR valu, const char* name, const char* prefix, struct section_offsets* section_offsets, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_new_header_file()  :  dbxread.c
<item>add_old_header_file()  :  dbxread.c
<item>common_block_end()  :  stabsread.c
<item>common_block_start()  :  stabsread.c
<item>complaint()  :  complaints.c
<item>define_symbol()  :  stabsread.c
<item>end_stabs()  :  stabsread.c
<item>end_symtab()  :  buildsym.c
<item>executable_objfile()  :  objfiles.c
<item>find_name_end()  :  stabsread.c
<item>find_stab_function_addr()  :  dbxread.c
<item>finish_block()  :  buildsym.c
<item>gdbarch_smash_text_address()  :  gdbarch.c
<item>hex_string()  :  utils.c
<item>internal_error()  :  utils.c
<item>lbrac_mismatch_complaint()  :  dbxread.c
<item>patch_subfile_names()  :  buildsym.c
<item>pop_context()  :  buildsym.c
<item>pop_subfile()  :  buildsym.c
<item>push_context()  :  buildsym.c
<item>push_subfile()  :  buildsym.c
<item>read_so_stab_language_hint()  :  dbxread.c
<item>record_debugformat()  :  buildsym.c
<item>record_line()  :  buildsym.c
<item>ref_add()  :  stabsread.c
<item>ref_search()  :  stabsread.c
<item>set_demangling_style()  :  demangle.c
<item>set_main_name()  :  symtab.c
<item>start_stabs()  :  stabsread.c
<item>start_subfile()  :  buildsym.c
<item>start_symtab()  :  buildsym.c
<item>symbol_reference_defined()  :  stabsread.c
<item>unknown_symtype_complaint()  :  dbxread.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>psymtab_to_symtab_1()  :  mdebugread.c
<item>read_ofile_symtab()  :  dbxread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>block_address_function_relative  :  dbxread.c
<item>context_stack_depth  :  buildsym.c
<item>current_gdbarch  :  gdbarch.c
<item>current_subfile  :  buildsym.c
<item>end_fun_absolute_p  :  dbxread.c
<item>last_source_file  :  buildsym.c
<item>local_symbols  :  buildsym.c
<item>previous_stab_code  :  stabsread.c
<item>processing_gcc_compilation  :  buildsym.c
<item>symfile_complaints  :  complaints.c
<item>symfile_relocatable  :  dbxread.c
<item>symnum  :  buildsym.c
<item>within_function  :  buildsym.c
<item>current_demangling_style
</itemize>
</descrip>

<sect1>Global Function read_oso_nlists()

<p><tt>void read_oso_nlists ( bfd* oso_bfd, struct partial_symtab* pst, struct nlist_rec** nlists, int* nlists_count, char*** common_symnames, int* common_symnames_count )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>fill_symbuf()  :  dbxread.c
<item>set_namestring_1()  :  dbxread.c
<item>stabs_seek()  :  dbxread.c
<item>stabsect_read_strtab_from_oso()  :  dbxread.c
<item>warning()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>cplus_demangle_v3(), isalnum(), macosx_internalize_symbol(), macosx_record_symbols_from_sect_p(), strchr(), strstr(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_debug_map_psymtab_to_symtab()  :  dwarf2read.c
<item>dwarf2_kext_psymtab_to_symtab()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>processing_objfile  :  dbxread.c
<item>stabs_data  :  dbxread.c
<item>symbol_size  :  dbxread.c
<item>symbuf  :  dbxread.c
<item>symbuf_end  :  dbxread.c
<item>symbuf_idx  :  dbxread.c
<item>symbuf_left  :  dbxread.c
<item>symbuf_read  :  dbxread.c
<item>symnum  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function stabsect_build_psymtabs()

<p><tt>void stabsect_build_psymtabs ( struct objfile* objfile, int mainline, const char* stab_name, const char* stabstr_name, const char* text_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>buildsym_new_init()  :  buildsym.c
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>free_header_files()  :  dbxread.c
<item>init_header_files()  :  dbxread.c
<item>make_cleanup()  :  utils.c
<item>mem_disable_caching()  :  memattr.c
<item>perror_with_name()  :  utils.c
<item>stabsread_new_init()  :  stabsread.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), bfd_get_section_by_name(), bfd_get_section_contents(), bfd_get_size()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>nlm_symfile_read()  :  nlmread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>mem_enable_caching()  :  memattr.c
</itemize>
</descrip>

<sect1>Local Function add_bincl_to_list()

<p><tt>static void add_bincl_to_list ( struct partial_symtab* pst, const char* name, int instance )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>msymbol_hash()  :  minsyms.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>oso_scan_partial_symtab()  :  dbxread.c
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bincl_list  :  dbxread.c
<item>bincls_allocated  :  dbxread.c
<item>next_bincl  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function add_new_header_file()

<p><tt>static void add_new_header_file ( const char* name, int instance )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_this_object_header_file()  :  dbxread.c
<item>savestring()  :  utils.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_one_symbol()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_objfile  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function add_old_header_file()

<p><tt>static void add_old_header_file ( const char* name, int instance )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_this_object_header_file()  :  dbxread.c
<item>repeated_header_complaint()  :  dbxread.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_one_symbol()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_objfile  :  objfiles.c
<item>symnum  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function add_this_object_header_file()

<p><tt>static void add_this_object_header_file ( int i )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_new_header_file()  :  dbxread.c
<item>add_old_header_file()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>n_allocated_this_object_header_files  :  stabsread.c
<item>n_this_object_header_files  :  stabsread.c
<item>this_object_header_files  :  stabsread.c
</itemize>
</descrip>

<sect1>Local Function add_to_containing_archive_cache()

<p><tt>static void add_to_containing_archive_cache ( bfd* containing_archive )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>open_bfd_from_oso()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>max_num_archives_for_pubtypes  :  dbxread.c
<item>num_archives_for_pubtypes  :  dbxread.c
<item>pubtype_bfd_array  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function cleanup_oso_data()

<p><tt>static void cleanup_oso_data ( void* data )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
<item>bfd_free_window()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>stabsect_read_strtab_from_oso()  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function close_containing_archive_and_contents()

<p><tt>static void close_containing_archive_and_contents ( bfd* containing_archive )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>bfd_close()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>clear_containing_archive_cache()  :  dbxread.c
<item>close_bfd_or_archive()  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function dbx_new_init()

<p><tt>static void dbx_new_init ( struct objfile* ignore )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>buildsym_new_init()  :  buildsym.c
<item>init_header_files()  :  dbxread.c
<item>stabsread_new_init()  :  stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dbxread.c
</itemize>
</descrip>

<sect1>Local Function dbx_next_symbol_text()

<p><tt>static const char* dbx_next_symbol_text ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>fill_symbuf()  :  dbxread.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), macosx_internalize_symbol()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dbx_psymtab_to_symtab()  :  dbxread.c
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>file_string_table_offset  :  dbxread.c
<item>processing_objfile  :  dbxread.c
<item>stabs_data  :  dbxread.c
<item>stringtab_global  :  dbxread.c
<item>symbol_size  :  dbxread.c
<item>symbuf  :  dbxread.c
<item>symbuf_end  :  dbxread.c
<item>symbuf_idx  :  dbxread.c
<item>symfile_complaints  :  complaints.c
<item>symnum  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function dbx_psymtab_to_symtab()

<p><tt>static void dbx_psymtab_to_symtab ( struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dbx_psymtab_to_symtab_1()  :  dbxread.c
<item>do_cleanups()  :  utils.c
<item>fprintf_unfiltered()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>make_cleanup()  :  utils.c
<item>printf_filtered()  :  utils.c
<item>scan_file_globals()  :  stabsread.c
<item>symfile_relocate_debug_section()  :  symfile.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>start_psymtab()  :  dbxread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dbx_next_symbol_text()  :  dbxread.c
<item>free_current_contents()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stderr  :  main.c
<item>gdb_stdout  :  main.c
<item>info_verbose  :  top.c
<item>next_symbol_text_func  :  buildsym.c
<item>stabs_data  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function dbx_psymtab_to_symtab_1()

<p><tt>static void dbx_psymtab_to_symtab_1 ( struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>buildsym_init()  :  buildsym.c
<item>clear_containing_archive_cache()  :  dbxread.c
<item>dbx_psymtab_to_symtab_1()  :  dbxread.c
<item>do_cleanups()  :  utils.c
<item>fprintf_unfiltered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>make_cleanup()  :  utils.c
<item>open_bfd_from_oso()  :  dbxread.c
<item>oso_scan_partial_symtab()  :  dbxread.c
<item>printf_filtered()  :  utils.c
<item>read_ofile_symtab()  :  dbxread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
<item>stabsread_init()  :  stabsread.c
<item>warning()  :  utils.c
<item>wrap_here()  :  utils.c
<item>bfd_check_format(), bfd_close(), bfd_seek()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dbx_psymtab_to_symtab()  :  dbxread.c
<item>dbx_psymtab_to_symtab_1()  :  dbxread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>really_free_pendings()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>file_string_table_offset  :  dbxread.c
<item>gdb_stderr  :  main.c
<item>gdb_stdout  :  main.c
<item>info_verbose  :  top.c
<item>symbol_size  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function dbx_symfile_finish()

<p><tt>static void dbx_symfile_finish ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_header_files()  :  dbxread.c
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dbxread.c
</itemize>
</descrip>

<sect1>Local Function dbx_symfile_init()

<p><tt>static void dbx_symfile_init ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>perror_with_name()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), bfd_bread(), bfd_get_section_by_name(), bfd_get_size(), bfd_seek()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dbxread.c
</itemize>
</descrip>

<sect1>Local Function do_free_bincl_list_cleanup()

<p><tt>static void do_free_bincl_list_cleanup ( void* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>free_bincl_list()  :  dbxread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_free_bincl_list()  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function fill_symbuf()

<p><tt>static void fill_symbuf ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>mem_disable_caching()  :  memattr.c
<item>perror_with_name()  :  utils.c
<item>warning()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>bfd_bread(), bfd_seek()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dbx_next_symbol_text()  :  dbxread.c
<item>oso_scan_partial_symtab()  :  dbxread.c
<item>read_dbx_symtab()  :  dbxread.c
<item>read_ofile_symtab()  :  dbxread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
<item>read_oso_nlists()  :  dbxread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>mem_enable_caching()  :  memattr.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>stabs_data  :  dbxread.c
<item>symbol_size  :  dbxread.c
<item>symbol_table_offset  :  dbxread.c
<item>symbuf  :  dbxread.c
<item>symbuf_end  :  dbxread.c
<item>symbuf_idx  :  dbxread.c
<item>symbuf_left  :  dbxread.c
<item>symbuf_read  :  dbxread.c
<item>symbuf_sections  :  dbxread.c
<item>symbuf_size  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function find_corresponding_bincl_psymtab()

<p><tt>static struct partial_symtab* find_corresponding_bincl_psymtab ( const char* name, int instance )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>msymbol_hash()  :  minsyms.c
<item>repeated_header_complaint()  :  dbxread.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>oso_scan_partial_symtab()  :  dbxread.c
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bincl_list  :  dbxread.c
<item>next_bincl  :  dbxread.c
<item>symnum  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function find_in_containing_archive_cache()

<p><tt>static bfd* find_in_containing_archive_cache ( char* archive_name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>open_bfd_from_oso()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>num_archives_for_pubtypes  :  dbxread.c
<item>pubtype_bfd_array  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function find_stab_function_addr()

<p><tt>static CORE_ADDR find_stab_function_addr ( const char* namestring, const char* filename, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>__builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strncpy_chk(), strchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_one_symbol()  :  dbxread.c
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function find_text_range()

<p><tt>static void find_text_range ( bfd* sym_bfd, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>elfstab_build_psymtabs()  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function free_bincl_list()

<p><tt>static void free_bincl_list ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_free_bincl_list_cleanup()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bincl_list  :  dbxread.c
<item>bincls_allocated  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function function_outside_compilation_unit_complaint()

<p><tt>static void function_outside_compilation_unit_complaint ( const char* arg1 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function init_bincl_list()

<p><tt>static void init_bincl_list ( int number, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>oso_scan_partial_symtab()  :  dbxread.c
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bincl_list  :  dbxread.c
<item>bincls_allocated  :  dbxread.c
<item>next_bincl  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function lbrac_mismatch_complaint()

<p><tt>static void lbrac_mismatch_complaint ( int arg1 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_one_symbol()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function lookup_psymbol_from_namestring()

<p><tt>static struct partial_symbol* lookup_psymbol_from_namestring ( struct partial_symtab* pst, const char* namestring, enum domain_enum_tag domain )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>find_name_end()  :  stabsread.c
<item>lookup_partial_symbol()  :  symtab.c
<item>warning()  :  utils.c
<item>xfree()  :  utils.c
<item>__builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strncpy_chk(), cplus_demangle()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_ofile_symtab_from_oso()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function make_cleanup_free_bincl_list()

<p><tt>static struct cleanup* make_cleanup_free_bincl_list ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>oso_scan_partial_symtab()  :  dbxread.c
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_free_bincl_list_cleanup()  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function objfile_contains_objc()

<p><tt>static int objfile_contains_objc ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bfd_get_section_by_name()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dbx_symfile_read()  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function oso_statics_pop()

<p><tt>static struct oso_fun_list* oso_statics_pop ( struct oso_fun_list* list_ptr )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_ofile_symtab_from_oso()  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function read_dbx_dynamic_symtab()

<p><tt>static void read_dbx_dynamic_symtab ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>objfile_bss_section_offset()  :  objfiles.c
<item>objfile_data_section_offset()  :  objfiles.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>prim_record_minimal_symbol()  :  minsyms.c
<item>record_minimal_symbol()  :  dbxread.c
<item>xmalloc()  :  utils.c
<item>bfd_get_arch()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dbx_symfile_read()  :  dbxread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function read_dbx_symtab()

<p><tt>static void read_dbx_symtab ( struct objfile* objfile, int dbx_symcount )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_bincl_to_list()  :  dbxread.c
<item>add_oso_pst_to_list()  :  dbxread.c
<item>add_psymbol_to_list()  :  symfile.c
<item>clear_containing_archive_cache()  :  dbxread.c
<item>complaint()  :  complaints.c
<item>deduce_language_from_filename()  :  symfile.c
<item>do_cleanups()  :  utils.c
<item>dwarf2_scan_inlined_section_for_psymbols()  :  dwarf2read.c
<item>dwarf2_scan_pubtype_for_psymbols()  :  dwarf2read.c
<item>end_oso_pst_list()  :  dbxread.c
<item>end_psymtab()  :  dbxread.c
<item>error()  :  utils.c
<item>executable_objfile()  :  objfiles.c
<item>fill_symbuf()  :  dbxread.c
<item>find_corresponding_bincl_psymtab()  :  dbxread.c
<item>find_name_end()  :  stabsread.c
<item>find_stab_function_addr()  :  dbxread.c
<item>function_outside_compilation_unit_complaint()  :  dbxread.c
<item>hex_string()  :  utils.c
<item>init_bincl_list()  :  dbxread.c
<item>init_oso_pst_list()  :  dbxread.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_free_bincl_list()  :  dbxread.c
<item>objfile_bss_section_offset()  :  objfiles.c
<item>objfile_data_section_offset()  :  objfiles.c
<item>objfile_section_offset()  :  objfiles.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>obsavestring()  :  symfile.c
<item>parse_archive_name()  :  dbxread.c
<item>quit()  :  utils.c
<item>read_so_stab_language_hint()  :  dbxread.c
<item>record_minimal_symbol()  :  dbxread.c
<item>set_namestring()  :  dbxread.c
<item>start_psymtab()  :  dbxread.c
<item>unknown_symtype_complaint()  :  dbxread.c
<item>warning()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), __inline_strncpy_chk(), cplus_demangle_v3(), macosx_internalize_symbol(), macosx_record_symbols_from_sect_p(), stat(), strchr(), strcmp(), strlen(), strncmp(), strrchr(), strstr(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dbx_symfile_read()  :  dbxread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dbx_next_symbol_text()  :  dbxread.c
<item>dwarf2_debug_map_psymtab_to_symtab()  :  dwarf2read.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>end_fun_absolute_p  :  dbxread.c
<item>file_string_table_offset  :  dbxread.c
<item>has_line_numbers  :  dbxread.c
<item>last_function_name  :  dbxread.c
<item>last_source_file  :  buildsym.c
<item>lowest_text_address  :  dbxread.c
<item>next_file_string_table_offset  :  dbxread.c
<item>next_symbol_text_func  :  buildsym.c
<item>processing_acc_compilation  :  buildsym.c
<item>processing_gcc_compilation  :  buildsym.c
<item>processing_objfile  :  dbxread.c
<item>psymtab_language  :  dbxread.c
<item>quit_flag  :  utils.c
<item>read_type_psym_p  :  dbxread.c
<item>stabs_data  :  dbxread.c
<item>stringtab_global  :  dbxread.c
<item>symbol_size  :  dbxread.c
<item>symbuf  :  dbxread.c
<item>symbuf_end  :  dbxread.c
<item>symbuf_idx  :  dbxread.c
<item>symfile_complaints  :  complaints.c
<item>symnum  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function read_ofile_symtab()

<p><tt>static void read_ofile_symtab ( struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>end_stabs()  :  stabsread.c
<item>end_symtab()  :  buildsym.c
<item>error()  :  utils.c
<item>executable_objfile()  :  objfiles.c
<item>fill_symbuf()  :  dbxread.c
<item>internal_error()  :  utils.c
<item>process_one_symbol()  :  dbxread.c
<item>quit()  :  utils.c
<item>set_demangling_style()  :  demangle.c
<item>set_namestring()  :  dbxread.c
<item>stabs_seek()  :  dbxread.c
<item>macosx_internalize_symbol(), strcmp(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dbx_psymtab_to_symtab_1()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_objfile  :  objfiles.c
<item>last_source_file  :  buildsym.c
<item>last_source_start_addr  :  buildsym.c
<item>processing_acc_compilation  :  buildsym.c
<item>processing_gcc_compilation  :  buildsym.c
<item>processing_objfile  :  dbxread.c
<item>quit_flag  :  utils.c
<item>stabs_data  :  dbxread.c
<item>stringtab_global  :  dbxread.c
<item>subfile_stack  :  buildsym.c
<item>symbol_size  :  dbxread.c
<item>symbuf  :  dbxread.c
<item>symbuf_end  :  dbxread.c
<item>symbuf_idx  :  dbxread.c
<item>symbuf_left  :  dbxread.c
<item>symbuf_read  :  dbxread.c
<item>symnum  :  buildsym.c
<item>current_demangling_style
</itemize>
</descrip>

<sect1>Local Function read_ofile_symtab_from_oso()

<p><tt>static void read_ofile_symtab_from_oso ( struct partial_symtab* pst, struct bfd* oso_bfd )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>do_cleanups()  :  utils.c
<item>end_stabs()  :  stabsread.c
<item>end_symtab()  :  buildsym.c
<item>error()  :  utils.c
<item>executable_objfile()  :  objfiles.c
<item>fill_symbuf()  :  dbxread.c
<item>find_name_end()  :  stabsread.c
<item>internal_error()  :  utils.c
<item>lookup_psymbol_from_namestring()  :  dbxread.c
<item>objfile_data_section_offset()  :  objfiles.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>oso_statics_pop()  :  dbxread.c
<item>process_one_symbol()  :  dbxread.c
<item>process_symbol_types_only()  :  stabsread.c
<item>quit()  :  utils.c
<item>set_namestring_1()  :  dbxread.c
<item>stabs_seek()  :  dbxread.c
<item>stabsect_read_strtab_from_oso()  :  dbxread.c
<item>warning()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), macosx_internalize_symbol(), strcmp(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dbx_psymtab_to_symtab_1()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_objfile  :  objfiles.c
<item>last_source_file  :  buildsym.c
<item>last_source_start_addr  :  buildsym.c
<item>previous_stab_code  :  stabsread.c
<item>processing_gcc_compilation  :  buildsym.c
<item>processing_objfile  :  dbxread.c
<item>quit_flag  :  utils.c
<item>stabs_data  :  dbxread.c
<item>stringtab_global  :  dbxread.c
<item>subfile_stack  :  buildsym.c
<item>symbol_size  :  dbxread.c
<item>symbuf  :  dbxread.c
<item>symbuf_end  :  dbxread.c
<item>symbuf_idx  :  dbxread.c
<item>symbuf_left  :  dbxread.c
<item>symbuf_read  :  dbxread.c
<item>symfile_complaints  :  complaints.c
<item>symnum  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function read_so_stab_language_hint()

<p><tt>static enum language read_so_stab_language_hint ( short unsigned n_desc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_one_symbol()  :  dbxread.c
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function record_minimal_symbol()

<p><tt>static void record_minimal_symbol ( const char* name, CORE_ADDR address, int type, int16_t desc, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>executable_objfile()  :  objfiles.c
<item>gdbarch_dbx_make_msymbol_special()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>is_vtable_name()  :  cp-abi.c
<item>paddr()  :  utils.c
<item>prim_record_minimal_symbol_and_info()  :  minsyms.c
<item>printf_filtered()  :  utils.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_dbx_dynamic_symtab()  :  dbxread.c
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>dbx_minsyms_recorded  :  dbxread.c
<item>lowest_text_address  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function repeated_header_complaint()

<p><tt>static void repeated_header_complaint ( const char* arg1, int arg2 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_old_header_file()  :  dbxread.c
<item>find_corresponding_bincl_psymtab()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function set_namestring()

<p><tt>static const char* set_namestring ( struct objfile* objfile, struct internal_nlist nlist, const char* prefix )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>set_namestring_1()  :  dbxread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_dbx_symtab()  :  dbxread.c
<item>read_ofile_symtab()  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function set_namestring_1()

<p><tt>static const char* set_namestring_1 ( int strtab_size, char* strtab, char leading_char, struct internal_nlist nlist, const char* prefix )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>xrealloc()  :  utils.c
<item>__builtin___snprintf_chk(), __builtin_object_size(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>oso_scan_partial_symtab()  :  dbxread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
<item>read_oso_nlists()  :  dbxread.c
<item>set_namestring()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>file_string_table_offset  :  dbxread.c
<item>symfile_complaints  :  complaints.c
<item>symnum  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function stabs_seek()

<p><tt>static void stabs_seek ( int sym_offset )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>bfd_seek()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>oso_scan_partial_symtab()  :  dbxread.c
<item>read_ofile_symtab()  :  dbxread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
<item>read_oso_nlists()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>processing_objfile  :  dbxread.c
<item>stabs_data  :  dbxread.c
<item>symbol_size  :  dbxread.c
<item>symbuf_idx  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function stabsect_read_strtab_from_oso()

<p><tt>static struct cleanup* stabsect_read_strtab_from_oso ( struct bfd* oso_bfd, int* symcount, int* symsize, int* strtab_size, bfd_byte** stab_data_handle, char** strtab_data_handle )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>make_cleanup()  :  utils.c
<item>perror_with_name()  :  utils.c
<item>xmalloc()  :  utils.c
<item>bfd_get_section_by_name(), bfd_get_section_contents_in_window_with_mode(), bfd_init_window(), bfd_mach_o_version()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>oso_scan_partial_symtab()  :  dbxread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
<item>read_oso_nlists()  :  dbxread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>cleanup_oso_data()  :  dbxread.c
<item>null_cleanup()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function start_psymtab()

<p><tt>static struct partial_symtab* start_psymtab ( struct objfile* objfile, const char* filename, CORE_ADDR textlow, int ldsymoff, struct partial_symbol** global_syms, struct partial_symbol** static_syms, const char* prefix )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dbxread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deduce_language_from_filename()  :  symfile.c
<item>elfstab_offset_sections()  :  elfread.c
<item>start_psymtab_common()  :  symfile.c
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dbx_psymtab_to_symtab()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>file_string_table_offset  :  dbxread.c
<item>psymtab_language  :  dbxread.c
<item>string_table_offset  :  dbxread.c
<item>symbol_size  :  dbxread.c
<item>symbol_table_offset  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function unknown_symtype_complaint()

<p><tt>static void unknown_symtype_complaint ( const char* arg1 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_one_symbol()  :  dbxread.c
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

</article>
