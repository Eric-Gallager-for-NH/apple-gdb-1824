<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF eval.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for eval.c of gdb.cxref.
<author>cxref

<sect>File eval.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;f-lang.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;cp-abi.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;infcall.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;objc-lang.h&quot;</tt>
<itemize>
<item><tt>#include &lt;Availability.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;parser-defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;cp-support.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;math.h&gt;</tt>
</itemize>

<sect1>Global Variable print_closure

<p>
<tt>int print_closure</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>eval.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>do_restore_print_closure()  :  eval.c
<item>evaluate_subexp_standard()  :  eval.c
<item>make_cleanup_set_restore_print_closure()  :  eval.c
</itemize>
</descrip>

<sect1>External Variables

<p>
<bf>overload_resolution</bf><newline>
<tt>extern int overload_resolution</tt><newline>
<descrip>
<tag>Defined in:</tag>
<itemize>
<item>overload_resolution</itemize>
</descrip>
<p>
<bf>objectprint</bf><newline>
<tt>extern int objectprint</tt><newline>
<descrip>
<tag>Defined in:</tag>
<itemize>
<item>objectprint</itemize>
</descrip>

<sect1>Global Function calc_f77_array_dims()

<p><tt>int calc_f77_array_dims ( struct type* array_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>f-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
<item>f77_print_array()  :  f-valprint.c
</itemize>
</descrip>

<sect1>Global Function evaluate_expression()

<p><tt>struct value* evaluate_expression ( struct expression* exp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>evaluate_subexp()  :  eval.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_cond_eval()  :  breakpoint.c
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>do_enable_breakpoint()  :  breakpoint.c
<item>do_one_display()  :  printcmd.c
<item>encode_actions()  :  tracepoint.c
<item>gdb_evaluate_expression()  :  wrapper.c
<item>insert_bp_location()  :  breakpoint.c
<item>insert_breakpoints()  :  breakpoint.c
<item>invoke_block_command()  :  printcmd.c
<item>output_command()  :  printcmd.c
<item>parse_and_eval()  :  eval.c
<item>parse_and_eval_address()  :  eval.c
<item>parse_and_eval_address_1()  :  eval.c
<item>parse_and_eval_long()  :  eval.c
<item>parse_to_comma_and_eval()  :  eval.c
<item>print_command_1()  :  printcmd.c
<item>set_command()  :  printcmd.c
<item>watch_command_1()  :  breakpoint.c
<item>watchpoint_check()  :  breakpoint.c
<item>x_command()  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function evaluate_subexp_standard()

<p><tt>struct value* evaluate_subexp_standard ( struct type* expect_type, struct expression* exp, int* pos, enum noside noside )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>expression.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_value_history()  :  value.c
<item>allocate_repeat_value()  :  value.c
<item>allocate_value()  :  value.c
<item>binop_user_defined_p()  :  valarith.c
<item>block_for_pc()  :  block.c
<item>calc_f77_array_dims()  :  eval.c
<item>call_function_by_hand_expecting_type()  :  infcall.c
<item>check_typedef()  :  gdbtypes.c
<item>coerce_ref()  :  value.c
<item>create_cached_function()  :  value.c
<item>deprecated_set_value_type()  :  value.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>error()  :  utils.c
<item>evaluate_struct_tuple()  :  eval.c
<item>evaluate_subexp()  :  eval.c
<item>evaluate_subexp_for_address()  :  eval.c
<item>evaluate_subexp_for_sizeof()  :  eval.c
<item>evaluate_subexp_with_coercion()  :  eval.c
<item>f77_get_dynamic_lowerbound()  :  f-valprint.c
<item>f77_get_dynamic_upperbound()  :  f-valprint.c
<item>find_function_addr()  :  infcall.c
<item>find_implementation()  :  objc-lang.c
<item>find_overload_match()  :  valops.c
<item>find_pc_function()  :  blockframe.c
<item>frame_map_regnum_to_name()  :  frame.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>gdbarch_ptr_bit()  :  gdbarch.c
<item>get_closure_dynamic_type()  :  gdbtypes.c
<item>get_discrete_bounds()  :  gdbtypes.c
<item>get_selected_frame()  :  frame.c
<item>init_array_element()  :  eval.c
<item>internal_error()  :  utils.c
<item>lang_bool_type()  :  language.c
<item>longest_to_int()  :  valprint.c
<item>lookup_cached_function()  :  value.c
<item>lookup_child_selector()  :  objc-lang.c
<item>lookup_function_type()  :  gdbtypes.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>lookup_reference_type()  :  gdbtypes.c
<item>lookup_struct_elt_type()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>unop_user_defined_p()  :  valarith.c
<item>using_struct_return()  :  value.c
<item>value_add()  :  valarith.c
<item>value_addr()  :  valops.c
<item>value_aggregate_elt()  :  valops.c
<item>value_array()  :  valops.c
<item>value_as_address()  :  value.c
<item>value_as_long()  :  value.c
<item>value_assign()  :  valops.c
<item>value_at_lazy()  :  valops.c
<item>value_binop()  :  valarith.c
<item>value_bitstring()  :  valops.c
<item>value_cast()  :  valops.c
<item>value_coerce_array()  :  valops.c
<item>value_complement()  :  valarith.c
<item>value_concat()  :  valarith.c
<item>value_contents()  :  value.c
<item>value_contents_raw()  :  value.c
<item>value_embedded_offset()  :  value.c
<item>value_equal()  :  valarith.c
<item>value_from_double()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_from_pointer()  :  value.c
<item>value_in()  :  valarith.c
<item>value_ind()  :  valops.c
<item>value_less()  :  valarith.c
<item>value_literal_complex()  :  valops.c
<item>value_logical_not()  :  valarith.c
<item>value_neg()  :  valarith.c
<item>value_nsstring()  :  objc-lang.c
<item>value_of_internalvar()  :  value.c
<item>value_of_local()  :  valops.c
<item>value_of_register()  :  findvar.c
<item>value_of_variable()  :  valops.c
<item>value_offset()  :  value.c
<item>value_pos()  :  valarith.c
<item>value_repeat()  :  valops.c
<item>value_rtti_target_type()  :  valops.c
<item>value_slice()  :  valops.c
<item>value_string()  :  valops.c
<item>value_struct_elt()  :  valops.c
<item>value_sub()  :  valarith.c
<item>value_subscript()  :  valarith.c
<item>value_type()  :  value.c
<item>value_virtual_fn_field()  :  cp-abi.c
<item>value_x_binop()  :  valarith.c
<item>value_x_unop()  :  valarith.c
<item>value_zero()  :  valops.c
<item>warning()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin___memset_chk(), __builtin___strcpy_chk(), __builtin_alloca(), __builtin_huge_valf(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk(), __inline_strcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>evaluate_subexp_scm()  :  scm-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>parse.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_char  :  gdbtypes.c
<item>builtin_type_f_complex_s16  :  f-lang.c
<item>builtin_type_f_integer  :  f-lang.c
<item>builtin_type_int  :  gdbtypes.c
<item>builtin_type_long  :  gdbtypes.c
<item>builtin_type_void  :  gdbtypes.c
<item>builtin_type_void_data_ptr  :  gdbtypes.c
<item>builtin_type_void_func_ptr  :  gdbtypes.c
<item>cplus_struct_default  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
<item>deprecated_hp_som_som_object_present  :  symtab.c
<item>objectprint  :  cp-valprint.c
<item>overload_resolution  :  valops.c
<item>print_closure  :  eval.c
</itemize>
</descrip>

<sect1>Global Function evaluate_subexp_with_coercion()

<p><tt>struct value* evaluate_subexp_with_coercion ( struct expression* exp, int* pos, enum noside noside )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_innermost_frame()  :  blockframe.c
<item>check_typedef()  :  gdbtypes.c
<item>evaluate_subexp()  :  eval.c
<item>locate_var_value()  :  findvar.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>value_cast()  :  valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Global Function evaluate_type()

<p><tt>struct value* evaluate_type ( struct expression* exp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>evaluate_subexp()  :  eval.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdb_evaluate_type()  :  wrapper.c
<item>maintenance_print_type()  :  typeprint.c
<item>whatis_exp()  :  typeprint.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_set_restore_print_closure()

<p><tt>struct cleanup* make_cleanup_set_restore_print_closure ( int newval )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>invoke_block_command()  :  printcmd.c
<item>varobj_evaluate_expression()  :  varobj.c
<item>varobj_evaluate_type()  :  varobj.c
<item>varobj_parse_exp_1()  :  varobj.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_restore_print_closure()  :  eval.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>print_closure  :  eval.c
</itemize>
</descrip>

<sect1>Global Function parse_and_eval()

<p><tt>struct value* parse_and_eval ( const char* exp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>evaluate_expression()  :  eval.c
<item>make_cleanup()  :  utils.c
<item>parse_expression()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_captured_thread_select()  :  thread.c
<item>ignore_command()  :  breakpoint.c
<item>parse_frame_specification_1()  :  stack.c
<item>quit_force()  :  top.c
<item>return_command()  :  stack.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>innermost_block  :  parse.c
</itemize>
</descrip>

<sect1>Global Function parse_and_eval_address()

<p><tt>CORE_ADDR parse_and_eval_address ( const char* exp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>evaluate_expression()  :  eval.c
<item>make_cleanup()  :  utils.c
<item>parse_expression()  :  parse.c
<item>value_as_address()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_symbol_file_command()  :  symfile.c
<item>add_symbol_file_from_memory_command()  :  symfile-mem.c
<item>maintenance_translate_address()  :  maint.c
<item>mem_command()  :  memattr.c
<item>sym_info()  :  printcmd.c
<item>trace_find_outside_command()  :  tracepoint.c
<item>trace_find_pc_command()  :  tracepoint.c
<item>trace_find_range_command()  :  tracepoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>innermost_block  :  parse.c
</itemize>
</descrip>

<sect1>Global Function parse_and_eval_address_1()

<p><tt>CORE_ADDR parse_and_eval_address_1 ( const char** expptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>evaluate_expression()  :  eval.c
<item>make_cleanup()  :  utils.c
<item>parse_exp_1()  :  parse.c
<item>value_as_address()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_indirect()  :  linespec.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>innermost_block  :  parse.c
</itemize>
</descrip>

<sect1>Global Function parse_and_eval_long()

<p><tt>long parse_and_eval_long ( const char* exp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>evaluate_expression()  :  eval.c
<item>make_cleanup()  :  utils.c
<item>parse_expression()  :  parse.c
<item>value_as_long()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>backtrace_command_1()  :  stack.c
<item>breakpoints_info()  :  breakpoint.c
<item>continue_command()  :  infcmd.c
<item>down_silently_base()  :  stack.c
<item>maintenance_info_breakpoints()  :  breakpoint.c
<item>re_execute_command()  :  infcmd.c
<item>set_radix()  :  valprint.c
<item>show_commands()  :  top.c
<item>show_values()  :  value.c
<item>signal_command()  :  infcmd.c
<item>signals_info()  :  infrun.c
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
<item>trace_find_command()  :  tracepoint.c
<item>trace_find_tracepoint_command()  :  tracepoint.c
<item>tracepoints_info()  :  tracepoint.c
<item>up_silently_base()  :  stack.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>innermost_block  :  parse.c
</itemize>
</descrip>

<sect1>Global Function parse_and_eval_type()

<p><tt>struct type* parse_and_eval_type ( char* p, int length )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>parse_expression()  :  parse.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdb_parse_and_eval_type()  :  wrapper.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>innermost_block  :  parse.c
</itemize>
</descrip>

<sect1>Global Function parse_to_comma_and_eval()

<p><tt>struct value* parse_to_comma_and_eval ( const char** expp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>evaluate_expression()  :  eval.c
<item>make_cleanup()  :  utils.c
<item>parse_exp_1()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>printf_command()  :  printcmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>innermost_block  :  parse.c
</itemize>
</descrip>

<sect1>Local Function do_restore_print_closure()

<p><tt>static void do_restore_print_closure ( void* in_oldval )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_set_restore_print_closure()  :  eval.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>print_closure  :  eval.c
</itemize>
</descrip>

<sect1>Local Function evaluate_struct_tuple()

<p><tt>static struct value* evaluate_struct_tuple ( struct value* struct_val, struct expression* exp, int* pos, enum noside noside, int nargs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>eval.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>error()  :  utils.c
<item>evaluate_subexp()  :  eval.c
<item>get_label()  :  eval.c
<item>modify_field()  :  value.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>value_as_long()  :  value.c
<item>value_cast()  :  valops.c
<item>value_contents()  :  value.c
<item>value_contents_writeable()  :  value.c
<item>value_type()  :  value.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
</descrip>

<sect1>Local Function evaluate_subexp()

<p><tt>static struct value* evaluate_subexp ( struct type* expect_type, struct expression* exp, int* pos, enum noside noside )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>eval.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_expression()  :  eval.c
<item>evaluate_struct_tuple()  :  eval.c
<item>evaluate_subexp_for_address()  :  eval.c
<item>evaluate_subexp_for_sizeof()  :  eval.c
<item>evaluate_subexp_standard()  :  eval.c
<item>evaluate_subexp_with_coercion()  :  eval.c
<item>evaluate_type()  :  eval.c
<item>init_array_element()  :  eval.c
</itemize>
</descrip>

<sect1>Local Function evaluate_subexp_for_address()

<p><tt>static struct value* evaluate_subexp_for_address ( struct expression* exp, int* pos, enum noside noside )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>eval.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_innermost_frame()  :  blockframe.c
<item>deprecated_value_lval_hack()  :  value.c
<item>error()  :  utils.c
<item>evaluate_subexp()  :  eval.c
<item>locate_var_value()  :  findvar.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>value_addr()  :  valops.c
<item>value_cast()  :  valops.c
<item>value_type()  :  value.c
<item>value_zero()  :  valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
</descrip>

<sect1>Local Function evaluate_subexp_for_sizeof()

<p><tt>static struct value* evaluate_subexp_for_sizeof ( struct expression* exp, int* pos )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>eval.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>error()  :  utils.c
<item>evaluate_subexp()  :  eval.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_from_longest()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function get_label()

<p><tt>static char* get_label ( struct expression* exp, int* pos )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>eval.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>longest_to_int()  :  valprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_struct_tuple()  :  eval.c
</itemize>
</descrip>

<sect1>Local Function init_array_element()

<p><tt>static long init_array_element ( struct value* array, struct value* element, struct expression* exp, int* pos, enum noside noside, long low_bound, long high_bound )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>eval.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>evaluate_subexp()  :  eval.c
<item>init_array_element()  :  eval.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_as_long()  :  value.c
<item>value_contents()  :  value.c
<item>value_contents_raw()  :  value.c
<item>value_type()  :  value.c
<item>__builtin___memcpy_chk(), __builtin_huge_valf(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
<item>init_array_element()  :  eval.c
</itemize>
</descrip>

</article>
