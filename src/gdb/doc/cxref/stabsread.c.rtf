{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF stabsread.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File stabsread.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/aout/stab_gnu.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/aout/stab.def"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/libaout.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/bfdlink.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/aout/aout64.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-stabs.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "buildsym.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "complaints.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/demangle.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "cp-abi.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "cp-support.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <ctype.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "stabsread.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define EXTERN\par}
{\s5\f1\fs20\ql\sb50\sa50 #define STABS_CONTINUE( pp, objfile )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define VISIBILITY_PRIVATE '0'\par}
{\s5\f1\fs20\ql\sb50\sa50 #define VISIBILITY_PROTECTED '1'\par}
{\s5\f1\fs20\ql\sb50\sa50 #define VISIBILITY_PUBLIC '2'\par}
{\s5\f1\fs20\ql\sb50\sa50 #define VISIBILITY_IGNORE '9'\par}
{\s5\f1\fs20\ql\sb50\sa50 #define MAX_CHUNK_REFS 100\par}
{\s5\f1\fs20\ql\sb50\sa50 #define REF_CHUNK_SIZE\par}
{\s5\f1\fs20\ql\sb50\sa50 #define REF_MAP_SIZE( ref_chunk )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define NUMBER_RECOGNIZED 34\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct nextfield\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct nextfield}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct nextfield* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int visibility;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct field field;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct next_fnfieldlist\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct next_fnfieldlist}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct next_fnfieldlist* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct fn_fieldlist fn_fieldlist;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct field_info\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct field_info}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct nextfield* list;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct next_fnfieldlist* fnlist;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct ref_map\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct ref_map}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* stabs;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR value;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct symbol* sym;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct type_list\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct type_list}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct type* type;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct type_list* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct next_fnfield\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct next_fnfield}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct next_fnfield* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct fn_field fn_field;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable global_sym_chain\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* global_sym_chain[127]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Inc. from:\cell stabsread.h\cell\row
Visible in:\cell buildsym.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell stabsread.c\cell\cell\row
Used in:\cell common_block_end()\cell stabsread.c\cell\row
\cell define_symbol()\cell stabsread.c\cell\row
\cell parse_symbol()\cell mdebugread.c\cell\row
\cell scan_file_globals()\cell stabsread.c\cell\row
\cell stabsread_new_init()\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable global_stabs\par}
{\s5\f1\fs20\ql\sb50\sa50 struct pending_stabs* global_stabs\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Inc. from:\cell stabsread.h\cell\row
Visible in:\cell buildsym.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell stabsread.c\cell\cell\row
Used in:\cell finish_global_stabs()\cell stabsread.c\cell\row
\cell start_stabs()\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable previous_stab_code\par}
{\s5\f1\fs20\ql\sb50\sa50 int previous_stab_code\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Inc. from:\cell stabsread.h\cell\row
Visible in:\cell buildsym.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell stabsread.c\cell\cell\row
Used in:\cell end_stabs()\cell stabsread.c\cell\row
\cell process_one_symbol()\cell dbxread.c\cell\row
\cell psymtab_to_symtab_1()\cell mdebugread.c\cell\row
\cell read_ofile_symtab_from_oso()\cell dbxread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable this_object_header_files\par}
{\s5\f1\fs20\ql\sb50\sa50 int* this_object_header_files\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Inc. from:\cell stabsread.h\cell\row
Visible in:\cell buildsym.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell stabsread.c\cell\cell\row
Used in:\cell add_this_object_header_file()\cell dbxread.c\cell\row
\cell dbx_lookup_type()\cell stabsread.c\cell\row
\cell free_header_files()\cell dbxread.c\cell\row
\cell init_header_files()\cell dbxread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable n_this_object_header_files\par}
{\s5\f1\fs20\ql\sb50\sa50 int n_this_object_header_files\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Inc. from:\cell stabsread.h\cell\row
Visible in:\cell buildsym.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell stabsread.c\cell\cell\row
Used in:\cell add_this_object_header_file()\cell dbxread.c\cell\row
\cell dbx_lookup_type()\cell stabsread.c\cell\row
\cell start_stabs()\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable n_allocated_this_object_header_files\par}
{\s5\f1\fs20\ql\sb50\sa50 int n_allocated_this_object_header_files\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Inc. from:\cell stabsread.h\cell\row
Visible in:\cell buildsym.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell stabsread.c\cell\cell\row
Used in:\cell add_this_object_header_file()\cell dbxread.c\cell\row
\cell free_header_files()\cell dbxread.c\cell\row
\cell init_header_files()\cell dbxread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable stabsread_c_inited\par}
{\s5\f1\fs20\ql\sb50\sa50 int stabsread_c_inited\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell buildsym.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell stabsread.c\cell\cell\row
Used in:\cell stabsread_init()\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable vptr_name\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char vptr_name[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell read_cpp_abbrev()\cell\cell\row
\cell read_tilde_fields()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable vb_name\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char vb_name[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell read_cpp_abbrev()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable undef_types\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type** undef_types\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_stabsread()\cell\cell\row
\cell add_undefined_type()\cell\cell\row
\cell cleanup_undefined_types()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable undef_types_allocated\par}
{\s5\f1\fs20\ql\sb50\sa50 static int undef_types_allocated\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_stabsread()\cell\cell\row
\cell add_undefined_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable undef_types_length\par}
{\s5\f1\fs20\ql\sb50\sa50 static int undef_types_length\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_stabsread()\cell\cell\row
\cell add_undefined_type()\cell\cell\row
\cell cleanup_undefined_types()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable undef_fields\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct field** undef_fields\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_stabsread()\cell\cell\row
\cell add_undefined_field()\cell\cell\row
\cell cleanup_undefined_fields()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable undef_fields_allocated\par}
{\s5\f1\fs20\ql\sb50\sa50 static int undef_fields_allocated\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_stabsread()\cell\cell\row
\cell add_undefined_field()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable undef_fields_length\par}
{\s5\f1\fs20\ql\sb50\sa50 static int undef_fields_length\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_stabsread()\cell\cell\row
\cell add_undefined_field()\cell\cell\row
\cell cleanup_undefined_fields()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable current_symbol\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* current_symbol\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell define_symbol()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable ref_map\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct ref_map* ref_map\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell ref_add()\cell\cell\row
\cell ref_search()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable ref_count\par}
{\s5\f1\fs20\ql\sb50\sa50 static int ref_count\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell ref_add()\cell\cell\row
\cell ref_search()\cell\cell\row
\cell stabsread_clear_cache()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable ref_chunk\par}
{\s5\f1\fs20\ql\sb50\sa50 static int ref_chunk\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell ref_add()\cell\cell\row
\cell stabsread_clear_cache()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable common_block\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct pending* common_block\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell common_block_end()\cell\cell\row
\cell common_block_start()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable common_block_i\par}
{\s5\f1\fs20\ql\sb50\sa50 static int common_block_i\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell common_block_end()\cell\cell\row
\cell common_block_start()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable common_block_name\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* common_block_name\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell common_block_end()\cell\cell\row
\cell common_block_start()\cell\cell\row
\cell start_stabs()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_stabsread()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_stabsread ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
Refs Var:\cell undef_fields\cell stabsread.c\cell\row
\cell undef_fields_allocated\cell stabsread.c\cell\row
\cell undef_fields_length\cell stabsread.c\cell\row
\cell undef_types\cell stabsread.c\cell\row
\cell undef_types_allocated\cell stabsread.c\cell\row
\cell undef_types_length\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cleanup_undefined_fields()\par}
{\s5\f1\fs20\ql\sb50\sa50 void cleanup_undefined_fields ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.h\cell\cell\row
Calls: \cell adjust_field_bitsize()\cell stabsread.c\cell\row
Called by:\cell end_symtab()\cell buildsym.c\cell\row
Refs Var:\cell undef_fields\cell stabsread.c\cell\row
\cell undef_fields_length\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cleanup_undefined_types()\par}
{\s5\f1\fs20\ql\sb50\sa50 void cleanup_undefined_types ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.h\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell replace_type()\cell gdbtypes.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell end_symtab()\cell buildsym.c\cell\row
Refs Var:\cell file_symbols\cell buildsym.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\cell undef_types\cell stabsread.c\cell\row
\cell undef_types_length\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function common_block_end()\par}
{\s5\f1\fs20\ql\sb50\sa50 void common_block_end ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.h\cell\cell\row
Calls: \cell add_symbol_to_list()\cell buildsym.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell hashname()\cell buildsym.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell process_one_symbol()\cell dbxread.c\cell\row
Refs Var:\cell common_block\cell stabsread.c\cell\row
\cell common_block_i\cell stabsread.c\cell\row
\cell common_block_name\cell stabsread.c\cell\row
\cell global_sym_chain\cell stabsread.c\cell\row
\cell local_symbols\cell buildsym.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function common_block_start()\par}
{\s5\f1\fs20\ql\sb50\sa50 void common_block_start ( const char* name, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.h\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell process_one_symbol()\cell dbxread.c\cell\row
Refs Var:\cell common_block\cell stabsread.c\cell\row
\cell common_block_i\cell stabsread.c\cell\row
\cell common_block_name\cell stabsread.c\cell\row
\cell local_symbols\cell buildsym.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dbx_lookup_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type** dbx_lookup_type ( int typenums[2], struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.h\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell rs6000_builtin_type()\cell stabsread.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell dbx_alloc_type()\cell stabsread.c\cell\row
\cell dbx_fixup_type()\cell stabsread.c\cell\row
\cell read_range_type()\cell stabsread.c\cell\row
\cell read_type()\cell stabsread.c\cell\row
Refs Var:\cell current_objfile\cell objfiles.c\cell\row
\cell n_this_object_header_files\cell stabsread.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\cell symnum\cell buildsym.c\cell\row
\cell this_object_header_files\cell stabsread.c\cell\row
\cell type_vector\cell buildsym.c\cell\row
\cell type_vector_length\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function define_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* define_symbol ( CORE_ADDR valu, const char* string, const char* prefix, int desc, int type, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.h\cell\cell\row
Calls: \cell add_symbol_to_list()\cell buildsym.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell error_type()\cell stabsread.c\cell\row
\cell executable_objfile()\cell objfiles.c\cell\row
\cell find_name_end()\cell stabsread.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell gdbarch_int_bit()\cell gdbarch.c\cell\row
\cell gdbarch_long_double_bit()\cell gdbarch.c\cell\row
\cell gdbarch_long_double_format()\cell gdbarch.c\cell\row
\cell gdbarch_num_pseudo_regs()\cell gdbarch.c\cell\row
\cell gdbarch_num_regs()\cell gdbarch.c\cell\row
\cell gdbarch_sp_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_stab_reg_to_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_stabs_argument_has_addr()\cell gdbarch.c\cell\row
\cell hashname()\cell buildsym.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell is_cplus_marker()\cell demangle.c\cell\row
\cell lookup_function_type()\cell gdbtypes.c\cell\row
\cell lookup_fundamental_type()\cell gdbtypes.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell obconcat()\cell symfile.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell read_type()\cell stabsread.c\cell\row
\cell reg_value_complaint()\cell stabsread.c\cell\row
\cell store_typed_floating()\cell doublest.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell symbol_set_names()\cell symtab.c\cell\row
\cell type_name_no_tag()\cell gdbtypes.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), atof(), atoi(), isdigit(), strchr(), strcmp(), strlen()\cell\cell\row
Called by:\cell process_one_symbol()\cell dbxread.c\cell\row
\cell process_symbol_types_only()\cell stabsread.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell cplus_struct_default\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_subfile\cell buildsym.c\cell\row
\cell current_symbol\cell stabsread.c\cell\row
\cell demangle\cell utils.c\cell\row
\cell file_symbols\cell buildsym.c\cell\row
\cell global_sym_chain\cell stabsread.c\cell\row
\cell global_symbols\cell buildsym.c\cell\row
\cell local_symbols\cell buildsym.c\cell\row
\cell next_symbol_text_func\cell buildsym.c\cell\row
\cell processing_gcc_compilation\cell buildsym.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\cell within_function\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function end_stabs()\par}
{\s5\f1\fs20\ql\sb50\sa50 void end_stabs ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.h\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
Called by:\cell process_one_symbol()\cell dbxread.c\cell\row
\cell psymtab_to_symtab_1()\cell mdebugread.c\cell\row
\cell read_ofile_symtab()\cell dbxread.c\cell\row
\cell read_ofile_symtab_from_oso()\cell dbxread.c\cell\row
Refs Var:\cell previous_stab_code\cell stabsread.c\cell\row
\cell type_vector\cell buildsym.c\cell\row
\cell type_vector_length\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_name_end()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* find_name_end ( const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell  strchr()\cell\cell\row
Called by:\cell define_symbol()\cell stabsread.c\cell\row
\cell end_psymtab()\cell dbxread.c\cell\row
\cell lookup_psymbol_from_namestring()\cell dbxread.c\cell\row
\cell process_one_symbol()\cell dbxread.c\cell\row
\cell process_symbol_types_only()\cell stabsread.c\cell\row
\cell read_dbx_symtab()\cell dbxread.c\cell\row
\cell read_ofile_symtab_from_oso()\cell dbxread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function finish_global_stabs()\par}
{\s5\f1\fs20\ql\sb50\sa50 void finish_global_stabs ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.h\cell\cell\row
Calls: \cell patch_block_stabs()\cell stabsread.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell end_symtab()\cell buildsym.c\cell\row
Refs Var:\cell global_stabs\cell stabsread.c\cell\row
\cell global_symbols\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function process_symbol_types_only()\par}
{\s5\f1\fs20\ql\sb50\sa50 void process_symbol_types_only ( const char* string, const char* prefix, int desc, int type, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.h\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell define_symbol()\cell stabsread.c\cell\row
\cell find_name_end()\cell stabsread.c\cell\row
\cell read_type()\cell stabsread.c\cell\row
\cell  isdigit(), strchr()\cell\cell\row
Called by:\cell read_ofile_symtab_from_oso()\cell dbxread.c\cell\row
Refs Var:\cell next_symbol_text_func\cell buildsym.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ref_add()\par}
{\s5\f1\fs20\ql\sb50\sa50 void ref_add ( int refnum, struct symbol* sym, const char* stabs, CORE_ADDR value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.h\cell\cell\row
Calls: \cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell process_one_symbol()\cell dbxread.c\cell\row
Refs Var:\cell ref_chunk\cell stabsread.c\cell\row
\cell ref_count\cell stabsread.c\cell\row
\cell ref_map\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ref_search()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* ref_search ( int refnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.h\cell\cell\row
Called by:\cell process_one_symbol()\cell dbxread.c\cell\row
Refs Var:\cell ref_count\cell stabsread.c\cell\row
\cell ref_map\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function scan_file_globals()\par}
{\s5\f1\fs20\ql\sb50\sa50 void scan_file_globals ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell buildsym.h\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell fix_common_block()\cell stabsread.c\cell\row
\cell hashname()\cell buildsym.c\cell\row
\cell quit()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), strcmp()\cell\cell\row
Called by:\cell dbx_psymtab_to_symtab()\cell dbxread.c\cell\row
\cell mdebug_psymtab_to_symtab()\cell mdebugread.c\cell\row
Refs Var:\cell global_sym_chain\cell stabsread.c\cell\row
\cell quit_flag\cell utils.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\cell symfile_objfile\cell objfiles.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function stabsread_clear_cache()\par}
{\s5\f1\fs20\ql\sb50\sa50 void stabsread_clear_cache ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Called by:\cell coff_symfile_finish()\cell coffread.c\cell\row
Refs Var:\cell ref_chunk\cell stabsread.c\cell\row
\cell ref_count\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function stabsread_init()\par}
{\s5\f1\fs20\ql\sb50\sa50 void stabsread_init ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.h\cell\cell\row
Called by:\cell dbx_psymtab_to_symtab_1()\cell dbxread.c\cell\row
Refs Var:\cell stabsread_c_inited\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function stabsread_new_init()\par}
{\s5\f1\fs20\ql\sb50\sa50 void stabsread_new_init ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.h\cell\cell\row
Calls: \cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell coffstab_build_psymtabs()\cell dbxread.c\cell\row
\cell dbx_new_init()\cell dbxread.c\cell\row
\cell elf_new_init()\cell elfread.c\cell\row
\cell elfstab_build_psymtabs()\cell dbxread.c\cell\row
\cell mdebug_build_psymtabs()\cell mdebugread.c\cell\row
\cell mipscoff_new_init()\cell mipsread.c\cell\row
\cell nlm_new_init()\cell nlmread.c\cell\row
\cell stabsect_build_psymtabs()\cell dbxread.c\cell\row
Refs Var:\cell global_sym_chain\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function start_stabs()\par}
{\s5\f1\fs20\ql\sb50\sa50 void start_stabs ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.h\cell\cell\row
Called by:\cell process_one_symbol()\cell dbxread.c\cell\row
Refs Var:\cell common_block_name\cell stabsread.c\cell\row
\cell global_stabs\cell stabsread.c\cell\row
\cell n_this_object_header_files\cell stabsread.c\cell\row
\cell type_vector\cell buildsym.c\cell\row
\cell type_vector_length\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function symbol_reference_defined()\par}
{\s5\f1\fs20\ql\sb50\sa50 int symbol_reference_defined ( const char** string )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.h\cell\cell\row
Calls: \cell process_reference()\cell stabsread.c\cell\row
Called by:\cell process_one_symbol()\cell dbxread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_undefined_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_undefined_field ( struct field* field )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell xrealloc()\cell utils.c\cell\row
Called by:\cell attach_fields_to_type()\cell stabsread.c\cell\row
Refs Var:\cell undef_fields\cell stabsread.c\cell\row
\cell undef_fields_allocated\cell stabsread.c\cell\row
\cell undef_fields_length\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_undefined_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_undefined_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell xrealloc()\cell utils.c\cell\row
Called by:\cell read_type()\cell stabsread.c\cell\row
Refs Var:\cell undef_types\cell stabsread.c\cell\row
\cell undef_types_allocated\cell stabsread.c\cell\row
\cell undef_types_length\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function adjust_field_bitsize()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void adjust_field_bitsize ( struct field* field )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell gdbarch_int_bit()\cell gdbarch.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell cleanup_undefined_fields()\cell stabsread.c\cell\row
\cell read_one_struct_field()\cell stabsread.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function attach_fields_to_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int attach_fields_to_type ( struct field_info* fip, struct type* type, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell add_undefined_field()\cell stabsread.c\cell\row
\cell allocate_cplus_struct_type()\cell gdbtypes.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell read_struct_type()\cell stabsread.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function attach_fn_fields_to_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int attach_fn_fields_to_type ( struct field_info* fip, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Called by:\cell read_struct_type()\cell stabsread.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function complain_about_struct_wipeout()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void complain_about_struct_wipeout ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell read_struct_type()\cell stabsread.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dbx_alloc_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* dbx_alloc_type ( int typenums[2], struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell alloc_type()\cell gdbtypes.c\cell\row
\cell dbx_lookup_type()\cell stabsread.c\cell\row
Called by:\cell read_type()\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dbx_fixup_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* dbx_fixup_type ( int typenums[2], struct type* new_type, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell dbx_lookup_type()\cell stabsread.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell replace_type()\cell gdbtypes.c\cell\row
Called by:\cell read_type()\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dbx_fixup_variants()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dbx_fixup_variants ( struct type* real_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell read_type()\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function error_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* error_type ( const char** pp, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell define_symbol()\cell stabsread.c\cell\row
\cell read_array_type()\cell stabsread.c\cell\row
\cell read_enum_type()\cell stabsread.c\cell\row
\cell read_range_type()\cell stabsread.c\cell\row
\cell read_struct_type()\cell stabsread.c\cell\row
\cell read_sun_builtin_type()\cell stabsread.c\cell\row
\cell read_sun_floating_type()\cell stabsread.c\cell\row
\cell read_type()\cell stabsread.c\cell\row
Refs Var:\cell builtin_type_error\cell symtab.c\cell\row
\cell next_symbol_text_func\cell buildsym.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function fix_common_block()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void fix_common_block ( struct symbol* sym, int valu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Called by:\cell scan_file_globals()\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function invalid_cpp_abbrev_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void invalid_cpp_abbrev_complaint ( const char* arg1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell read_cpp_abbrev()\cell stabsread.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function patch_block_stabs()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void patch_block_stabs ( struct pending* symbols, struct pending_stabs* stabs, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell add_symbol_to_list()\cell buildsym.c\cell\row
\cell find_symbol_in_list()\cell buildsym.c\cell\row
\cell lookup_function_type()\cell gdbtypes.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell read_type()\cell stabsread.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strchr()\cell\cell\row
Called by:\cell finish_global_stabs()\cell stabsread.c\cell\row
Refs Var:\cell global_symbols\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function process_reference()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int process_reference ( const char** string )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell  isdigit()\cell\cell\row
Called by:\cell symbol_reference_defined()\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_args()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct field* read_args ( const char** pp, int end, struct objfile* objfile, int* nargsp, int* varargsp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell read_type()\cell stabsread.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell read_type()\cell stabsread.c\cell\row
Refs Var:\cell next_symbol_text_func\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_array_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* read_array_type ( const char** pp, struct type* type, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell create_array_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell error_type()\cell stabsread.c\cell\row
\cell read_huge_number()\cell stabsread.c\cell\row
\cell read_type()\cell stabsread.c\cell\row
Called by:\cell read_type()\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_baseclasses()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int read_baseclasses ( struct field_info* fip, const char** pp, struct type* type, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell allocate_cplus_struct_type()\cell gdbtypes.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell read_huge_number()\cell stabsread.c\cell\row
\cell read_type()\cell stabsread.c\cell\row
\cell type_name_no_tag()\cell gdbtypes.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell read_struct_type()\cell stabsread.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\cell next_symbol_text_func\cell buildsym.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_cpp_abbrev()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int read_cpp_abbrev ( struct field_info* fip, const char** pp, struct type* type, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell invalid_cpp_abbrev_complaint()\cell stabsread.c\cell\row
\cell obconcat()\cell symfile.c\cell\row
\cell read_huge_number()\cell stabsread.c\cell\row
\cell read_type()\cell stabsread.c\cell\row
\cell type_name_no_tag()\cell gdbtypes.c\cell\row
Called by:\cell read_struct_fields()\cell stabsread.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\cell symnum\cell buildsym.c\cell\row
\cell vb_name\cell stabsread.c\cell\row
\cell vptr_name\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_enum_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* read_enum_type ( const char** pp, struct type* type, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell add_symbol_to_list()\cell buildsym.c\cell\row
\cell error_type()\cell stabsread.c\cell\row
\cell gdbarch_int_bit()\cell gdbarch.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell read_huge_number()\cell stabsread.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell read_type()\cell stabsread.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_subfile\cell buildsym.c\cell\row
\cell file_symbols\cell buildsym.c\cell\row
\cell next_symbol_text_func\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_huge_number()\par}
{\s5\f1\fs20\ql\sb50\sa50 static long read_huge_number ( const char** pp, int end, int* bits, int twos_complement_bits )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Called by:\cell read_array_type()\cell stabsread.c\cell\row
\cell read_baseclasses()\cell stabsread.c\cell\row
\cell read_cpp_abbrev()\cell stabsread.c\cell\row
\cell read_enum_type()\cell stabsread.c\cell\row
\cell read_member_functions()\cell stabsread.c\cell\row
\cell read_one_struct_field()\cell stabsread.c\cell\row
\cell read_range_type()\cell stabsread.c\cell\row
\cell read_struct_type()\cell stabsread.c\cell\row
\cell read_sun_builtin_type()\cell stabsread.c\cell\row
\cell read_sun_floating_type()\cell stabsread.c\cell\row
\cell read_type_number()\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_member_functions()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int read_member_functions ( struct field_info* fip, const char** pp, struct type* type, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell allocate_cplus_struct_type()\cell gdbtypes.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell is_cplus_marker()\cell demangle.c\cell\row
\cell is_destructor_name()\cell cp-abi.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell obconcat()\cell symfile.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell read_huge_number()\cell stabsread.c\cell\row
\cell read_type()\cell stabsread.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), concat(), cplus_demangle_opname(), strcmp(), strlen(), strncmp()\cell\cell\row
Called by:\cell read_struct_type()\cell stabsread.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\cell next_symbol_text_func\cell buildsym.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_one_struct_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_one_struct_field ( struct field_info* fip, const char** pp, const char* p, struct type* type, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell adjust_field_bitsize()\cell stabsread.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell read_huge_number()\cell stabsread.c\cell\row
\cell read_type()\cell stabsread.c\cell\row
\cell stabs_general_complaint()\cell stabsread.c\cell\row
Called by:\cell read_struct_fields()\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_range_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* read_range_type ( const char** pp, int typenums[2], int type_size, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell dbx_lookup_type()\cell stabsread.c\cell\row
\cell error_type()\cell stabsread.c\cell\row
\cell gdbarch_int_bit()\cell gdbarch.c\cell\row
\cell gdbarch_long_long_bit()\cell gdbarch.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell read_huge_number()\cell stabsread.c\cell\row
\cell read_type()\cell stabsread.c\cell\row
\cell read_type_number()\cell stabsread.c\cell\row
Called by:\cell read_type()\cell stabsread.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_struct_fields()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int read_struct_fields ( struct field_info* fip, const char** pp, struct type* type, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell is_cplus_marker()\cell demangle.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell read_cpp_abbrev()\cell stabsread.c\cell\row
\cell read_one_struct_field()\cell stabsread.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell read_struct_type()\cell stabsread.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell next_symbol_text_func\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_struct_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* read_struct_type ( const char** pp, struct type* type, enum type_code type_code, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell attach_fields_to_type()\cell stabsread.c\cell\row
\cell attach_fn_fields_to_type()\cell stabsread.c\cell\row
\cell complain_about_struct_wipeout()\cell stabsread.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell error_type()\cell stabsread.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell read_baseclasses()\cell stabsread.c\cell\row
\cell read_huge_number()\cell stabsread.c\cell\row
\cell read_member_functions()\cell stabsread.c\cell\row
\cell read_struct_fields()\cell stabsread.c\cell\row
\cell read_tilde_fields()\cell stabsread.c\cell\row
Called by:\cell read_type()\cell stabsread.c\cell\row
Refs Func:\cell null_cleanup()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_sun_builtin_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* read_sun_builtin_type ( const char** pp, int typenums[2], struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell error_type()\cell stabsread.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell read_huge_number()\cell stabsread.c\cell\row
Called by:\cell read_type()\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_sun_floating_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* read_sun_floating_type ( const char** pp, int typenums[2], struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell error_type()\cell stabsread.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell read_huge_number()\cell stabsread.c\cell\row
Called by:\cell read_type()\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_tilde_fields()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int read_tilde_fields ( struct field_info* fip, const char** pp, struct type* type, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell is_cplus_marker()\cell demangle.c\cell\row
\cell read_type()\cell stabsread.c\cell\row
\cell  strncmp()\cell\cell\row
Called by:\cell read_struct_type()\cell stabsread.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\cell next_symbol_text_func\cell buildsym.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\cell vptr_name\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* read_type ( const char** pp, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell add_undefined_type()\cell stabsread.c\cell\row
\cell allocate_stub_method()\cell gdbtypes.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell create_set_type()\cell gdbtypes.c\cell\row
\cell dbx_alloc_type()\cell stabsread.c\cell\row
\cell dbx_fixup_type()\cell stabsread.c\cell\row
\cell dbx_fixup_variants()\cell stabsread.c\cell\row
\cell dbx_lookup_type()\cell stabsread.c\cell\row
\cell error_type()\cell stabsread.c\cell\row
\cell make_cvr_type()\cell gdbtypes.c\cell\row
\cell make_function_type()\cell gdbtypes.c\cell\row
\cell make_pointer_type()\cell gdbtypes.c\cell\row
\cell make_reference_type()\cell gdbtypes.c\cell\row
\cell read_args()\cell stabsread.c\cell\row
\cell read_array_type()\cell stabsread.c\cell\row
\cell read_enum_type()\cell stabsread.c\cell\row
\cell read_range_type()\cell stabsread.c\cell\row
\cell read_struct_type()\cell stabsread.c\cell\row
\cell read_sun_builtin_type()\cell stabsread.c\cell\row
\cell read_sun_floating_type()\cell stabsread.c\cell\row
\cell read_type()\cell stabsread.c\cell\row
\cell read_type_number()\cell stabsread.c\cell\row
\cell replace_type()\cell gdbtypes.c\cell\row
\cell smash_to_member_type()\cell gdbtypes.c\cell\row
\cell smash_to_method_type()\cell gdbtypes.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), atoi(), bfd_get_arch(), isdigit(), strchr(), strcmp()\cell\cell\row
Called by:\cell define_symbol()\cell stabsread.c\cell\row
\cell patch_block_stabs()\cell stabsread.c\cell\row
\cell process_symbol_types_only()\cell stabsread.c\cell\row
\cell read_args()\cell stabsread.c\cell\row
\cell read_array_type()\cell stabsread.c\cell\row
\cell read_baseclasses()\cell stabsread.c\cell\row
\cell read_cpp_abbrev()\cell stabsread.c\cell\row
\cell read_member_functions()\cell stabsread.c\cell\row
\cell read_one_struct_field()\cell stabsread.c\cell\row
\cell read_range_type()\cell stabsread.c\cell\row
\cell read_tilde_fields()\cell stabsread.c\cell\row
\cell read_type()\cell stabsread.c\cell\row
Refs Func:\cell  obstack_free()\cell\cell\row
Refs Var:\cell file_symbols\cell buildsym.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\cell symnum\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_type_number()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int read_type_number ( const char** pp, int* typenums )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell read_huge_number()\cell stabsread.c\cell\row
Called by:\cell read_range_type()\cell stabsread.c\cell\row
\cell read_type()\cell stabsread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function reg_value_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void reg_value_complaint ( int regnum, int num_regs, const char* sym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell define_symbol()\cell stabsread.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function rs6000_builtin_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* rs6000_builtin_type ( int typenum, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stabsread.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
Called by:\cell dbx_lookup_type()\cell stabsread.c\cell\row
Refs Var:\cell builtin_type_error\cell symtab.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function stabs_general_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void stabs_general_complaint ( const char* arg1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell read_one_struct_field()\cell stabsread.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
}
