<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF regcache.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for regcache.c of gdb.cxref.
<author>cxref

<sect>File regcache.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;regcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;reggroups.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;observer.h&quot;</tt>
</itemize>

<sect1>Type struct regcache_descr

<p>
<itemize>
<item><tt>struct regcache_descr</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct gdbarch* gdbarch;</tt><newline>
<item><tt>int nr_raw_registers;</tt><newline>
<item><tt>long sizeof_raw_registers;</tt><newline>
<item><tt>long sizeof_raw_register_valid_p;</tt><newline>
<item><tt>int nr_cooked_registers;</tt><newline>
<item><tt>long sizeof_cooked_registers;</tt><newline>
<item><tt>long sizeof_cooked_register_valid_p;</tt><newline>
<item><tt>long* register_offset;</tt><newline>
<item><tt>long* sizeof_register;</tt><newline>
<item><tt>struct type** register_type;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct regcache

<p>
<itemize>
<item><tt>struct regcache</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct regcache_descr* descr;</tt><newline>
<item><tt>gdb_byte* registers;</tt><newline>
<item><tt>gdb_byte* register_valid_p;</tt><newline>
<item><tt>int readonly_p;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Typedef regcache_read_ftype

<p>
<tt>typedef void ( regcache_read_ftype)(struct regcache* regcache,int regnum,void* buf)</tt><newline>

<sect1>Typedef regcache_write_ftype

<p>
<tt>typedef void ( regcache_write_ftype)(struct regcache* regcache,int regnum,const void* buf)</tt><newline>

<sect1>Type enum regcache_dump_what

<p>
<itemize>
<item><tt>enum regcache_dump_what</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>regcache_dump_none;</tt><newline>
<item><tt>regcache_dump_raw;</tt><newline>
<item><tt>regcache_dump_cooked;</tt><newline>
<item><tt>regcache_dump_groups;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable current_regcache

<p>
<tt>struct regcache* current_regcache</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>ax-gdb.c
<item>blockframe.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2loc.c
<item>findvar.c
<item>frame.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>objc-lang.c
<item>regcache.c
<item>reggroups.c
<item>remote.c
<item>sentinel-frame.c
<item>stack.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>tracepoint.c
<item>trad-frame.c
<item>valops.c
<item>value.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_regcache()  :  regcache.c
<item>build_regcache()  :  regcache.c
<item>create_new_frame()  :  frame.c
<item>deprecated_read_register_gen()  :  regcache.c
<item>deprecated_register_bytes()  :  regcache.c
<item>deprecated_write_register_gen()  :  regcache.c
<item>fetch_register_using_p()  :  remote.c
<item>frame_pop()  :  frame.c
<item>get_current_frame()  :  frame.c
<item>hand_function_call()  :  infcall.c
<item>legacy_store_return_value()  :  arch-utils.c
<item>normal_stop()  :  infrun.c
<item>put_frame_register()  :  frame.c
<item>regcache_cpy_no_passthrough()  :  regcache.c
<item>regcache_dup()  :  regcache.c
<item>regcache_dup_no_passthrough()  :  regcache.c
<item>regcache_print()  :  regcache.c
<item>regcache_raw_read()  :  regcache.c
<item>regcache_raw_supply()  :  regcache.c
<item>regcache_raw_write()  :  regcache.c
<item>register_cached()  :  regcache.c
<item>registers_changed()  :  regcache.c
<item>remote_async_wait()  :  remote.c
<item>remote_fetch_registers()  :  remote.c
<item>remote_prepare_to_store()  :  remote.c
<item>remote_store_registers()  :  remote.c
<item>remote_wait()  :  remote.c
<item>restore_inferior_status()  :  infrun.c
<item>return_command()  :  stack.c
<item>save_inferior_status()  :  infrun.c
<item>set_register_cached()  :  regcache.c
<item>store_register_using_P()  :  remote.c
</itemize>
</descrip>

<sect1>Global Variable regcache_descr_handle

<p>
<tt>struct gdbarch_data* regcache_descr_handle</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>regcache.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_regcache()  :  regcache.c
<item>regcache_descr()  :  regcache.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>registers_ptid</bf><newline>
<tt>static ptid_t registers_ptid</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_regcache()
<item>regcache_raw_read()
<item>regcache_raw_supply()
<item>regcache_raw_write()
<item>registers_changed()
</itemize>
</descrip>

<sect1>Global Function _initialize_regcache()

<p><tt>void _initialize_regcache ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_register_gdbarch_swap()  :  gdbarch.c
<item>gdbarch_data_register_post_init()  :  gdbarch.c
<item>observer_attach_target_changed()  :  observer.c
<item>pid_to_ptid()  :  infrun.c
<item>add_cmd(), add_com()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>build_regcache()  :  regcache.c
<item>init_regcache_descr()  :  regcache.c
<item>maintenance_print_cooked_registers()  :  regcache.c
<item>maintenance_print_raw_registers()  :  regcache.c
<item>maintenance_print_register_groups()  :  regcache.c
<item>maintenance_print_registers()  :  regcache.c
<item>reg_flush_command()  :  regcache.c
<item>regcache_observer_target_changed()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_regcache  :  regcache.c
<item>regcache_descr_handle  :  regcache.c
<item>registers_ptid  :  regcache.c
<item>maintenanceprintlist
</itemize>
</descrip>

<sect1>Global Function deprecated_grub_regcache_for_registers()

<p><tt>gdb_byte* deprecated_grub_regcache_for_registers ( struct regcache* regcache )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>legacy_extract_return_value()  :  arch-utils.c
</itemize>
</descrip>

<sect1>Global Function deprecated_read_register_bytes()

<p><tt>void deprecated_read_register_bytes ( int in_start, gdb_byte* in_buf, int in_len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_read_register_gen()  :  regcache.c
<item>gdbarch_deprecated_register_byte()  :  gdbarch.c
<item>gdbarch_num_pseudo_regs()  :  gdbarch.c
<item>gdbarch_num_regs()  :  gdbarch.c
<item>gdbarch_register_name()  :  gdbarch.c
<item>register_size()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function deprecated_read_register_gen()

<p><tt>void deprecated_read_register_gen ( int regnum, gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>regcache_cooked_read()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>debug_print_register()  :  target/target.c
<item>deprecated_read_register_bytes()  :  regcache.c
<item>deprecated_write_register_bytes()  :  regcache.c
<item>read_register()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_regcache  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function deprecated_register_bytes()

<p><tt>int deprecated_register_bytes ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_regcache  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function deprecated_registers_fetched()

<p><tt>void deprecated_registers_fetched ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_num_regs()  :  gdbarch.c
<item>set_register_cached()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function deprecated_write_register_bytes()

<p><tt>void deprecated_write_register_bytes ( int myregstart, gdb_byte* myaddr, int inlen )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_read_register_gen()  :  regcache.c
<item>deprecated_write_register_gen()  :  regcache.c
<item>gdbarch_deprecated_register_byte()  :  gdbarch.c
<item>gdbarch_num_pseudo_regs()  :  gdbarch.c
<item>gdbarch_num_regs()  :  gdbarch.c
<item>register_size()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function deprecated_write_register_gen()

<p><tt>void deprecated_write_register_gen ( int regnum, gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>regcache_cooked_write()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>deprecated_write_register_bytes()  :  regcache.c
<item>write_register()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_regcache  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function generic_target_write_pc()

<p><tt>void generic_target_write_pc ( CORE_ADDR pc, ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_pc_regnum()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>write_register_pid()  :  regcache.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function get_regcache_arch()

<p><tt>struct gdbarch* get_regcache_arch ( const struct regcache* regcache )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
</descrip>

<sect1>Global Function make_cleanup_regcache_xfree()

<p><tt>struct cleanup* make_cleanup_regcache_xfree ( struct regcache* regcache )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_pop()  :  frame.c
<item>frame_save_as_regcache()  :  frame.c
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_regcache_xfree()  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function read_pc()

<p><tt>CORE_ADDR read_pc ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>read_pc_pid()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>default_macro_scope()  :  macroscope.c
<item>finish_tfind_command()  :  tracepoint.c
<item>get_selected_block()  :  stack.c
<item>handle_inferior_event()  :  infrun.c
<item>keep_going()  :  infrun.c
<item>normal_stop()  :  infrun.c
<item>prepare_to_proceed()  :  infrun.c
<item>proceed()  :  infrun.c
<item>resume()  :  infrun.c
<item>switch_to_thread()  :  thread.c
<item>trace_dump_command()  :  tracepoint.c
<item>trace_find_pc_command()  :  tracepoint.c
<item>until_next_command()  :  infcmd.c
<item>watchpoint_check()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function read_pc_pid()

<p><tt>CORE_ADDR read_pc_pid ( ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_addr_bits_remove()  :  gdbarch.c
<item>gdbarch_pc_regnum()  :  gdbarch.c
<item>gdbarch_read_pc()  :  gdbarch.c
<item>gdbarch_read_pc_p()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>read_register_pid()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>adjust_pc_after_break()  :  infrun.c
<item>handle_inferior_event()  :  infrun.c
<item>prepare_to_proceed()  :  infrun.c
<item>read_pc()  :  regcache.c
<item>restore_thread_inlined_call_stack()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function read_register()

<p><tt>unsigned long read_register ( int regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_read_register_gen()  :  regcache.c
<item>extract_unsigned_integer()  :  findvar.c
<item>register_size()  :  regcache.c
<item>__builtin_alloca()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>debug_print_register()  :  target/target.c
<item>read_register_pid()  :  regcache.c
<item>read_sp()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function read_register_pid()

<p><tt>unsigned long read_register_pid ( int regnum, ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ptid_equal()  :  infrun.c
<item>read_register()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_pc_pid()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function read_sp()

<p><tt>CORE_ADDR read_sp ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_read_sp()  :  gdbarch.c
<item>gdbarch_read_sp_p()  :  gdbarch.c
<item>gdbarch_sp_regnum()  :  gdbarch.c
<item>gdbarch_unwind_sp_p()  :  gdbarch.c
<item>get_current_frame()  :  frame.c
<item>get_frame_sp()  :  frame.c
<item>internal_error()  :  utils.c
<item>read_register()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function regcache_compare()

<p><tt>int regcache_compare ( struct regcache* rc1, struct regcache* rc2 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>memcmp()
</itemize>
</descrip>

<sect1>Global Function regcache_cooked_read()

<p><tt>void regcache_cooked_read ( struct regcache* regcache, int regnum, gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_pseudo_register_read()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>regcache_raw_read()  :  regcache.c
<item>register_buffer()  :  regcache.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>deprecated_read_register_gen()  :  regcache.c
<item>do_cooked_read()  :  regcache.c
<item>dummy_frame_prev_register()  :  dummy-frame.c
<item>regcache_cooked_read_signed()  :  regcache.c
<item>regcache_cooked_read_unsigned()  :  regcache.c
<item>regcache_dump()  :  regcache.c
<item>sentinel_frame_prev_register()  :  sentinel-frame.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>regcache_cooked_read_part()  :  regcache.c
<item>regcache_cooked_write_part()  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function regcache_cooked_read_part()

<p><tt>void regcache_cooked_read_part ( struct regcache* regcache, int regnum, int offset, int len, gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>regcache_xfer_part()  :  regcache.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>regcache_cooked_read()  :  regcache.c
<item>regcache_cooked_write()  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function regcache_cooked_read_signed()

<p><tt>void regcache_cooked_read_signed ( struct regcache* regcache, int regnum, long* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_signed_integer()  :  findvar.c
<item>internal_error()  :  utils.c
<item>regcache_cooked_read()  :  regcache.c
<item>__builtin_alloca()
</itemize>
</descrip>

<sect1>Global Function regcache_cooked_read_unsigned()

<p><tt>void regcache_cooked_read_unsigned ( struct regcache* regcache, int regnum, unsigned long* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_unsigned_integer()  :  findvar.c
<item>internal_error()  :  utils.c
<item>regcache_cooked_read()  :  regcache.c
<item>__builtin_alloca()
</itemize>
</descrip>

<sect1>Global Function regcache_cooked_write()

<p><tt>void regcache_cooked_write ( struct regcache* regcache, int regnum, const gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_pseudo_register_write()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>regcache_raw_write()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>deprecated_write_register_gen()  :  regcache.c
<item>put_frame_register()  :  frame.c
<item>regcache_cooked_write_signed()  :  regcache.c
<item>regcache_cooked_write_unsigned()  :  regcache.c
<item>regcache_restore()  :  regcache.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>regcache_cooked_read_part()  :  regcache.c
<item>regcache_cooked_write_part()  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function regcache_cooked_write_part()

<p><tt>void regcache_cooked_write_part ( struct regcache* regcache, int regnum, int offset, int len, const gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>regcache_xfer_part()  :  regcache.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>regcache_cooked_read()  :  regcache.c
<item>regcache_cooked_write()  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function regcache_cooked_write_signed()

<p><tt>void regcache_cooked_write_signed ( struct regcache* regcache, int regnum, long val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>regcache_cooked_write()  :  regcache.c
<item>store_signed_integer()  :  findvar.c
<item>__builtin_alloca()
</itemize>
</descrip>

<sect1>Global Function regcache_cooked_write_unsigned()

<p><tt>void regcache_cooked_write_unsigned ( struct regcache* regcache, int regnum, unsigned long val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>regcache_cooked_write()  :  regcache.c
<item>store_unsigned_integer()  :  findvar.c
<item>__builtin_alloca()
</itemize>
</descrip>

<sect1>Global Function regcache_cpy()

<p><tt>void regcache_cpy ( struct regcache* dst, struct regcache* src )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>regcache_cpy_no_passthrough()  :  regcache.c
<item>regcache_restore()  :  regcache.c
<item>regcache_save()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_pop()  :  frame.c
<item>normal_stop()  :  infrun.c
<item>regcache_dup()  :  regcache.c
<item>restore_inferior_status()  :  infrun.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_cooked_read()  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function regcache_cpy_no_passthrough()

<p><tt>void regcache_cpy_no_passthrough ( struct regcache* dst, struct regcache* src )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
<item>regcache_cpy()  :  regcache.c
<item>regcache_dup_no_passthrough()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_regcache  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function regcache_dup()

<p><tt>struct regcache* regcache_dup ( struct regcache* src )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>regcache_cpy()  :  regcache.c
<item>regcache_xmalloc()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>save_inferior_status()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_regcache  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function regcache_dup_no_passthrough()

<p><tt>struct regcache* regcache_dup_no_passthrough ( struct regcache* src )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>regcache_cpy_no_passthrough()  :  regcache.c
<item>regcache_xmalloc()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>save_inferior_status()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_regcache  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function regcache_observer_target_changed()

<p><tt>void regcache_observer_target_changed ( struct target_ops* target )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>registers_changed()  :  regcache.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_regcache()  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function regcache_raw_collect()

<p><tt>void regcache_raw_collect ( const struct regcache* regcache, int regnum, void* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>register_buffer()  :  regcache.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remote_store_registers()  :  remote.c
<item>store_register_using_P()  :  remote.c
</itemize>
</descrip>

<sect1>Global Function regcache_raw_read()

<p><tt>void regcache_raw_read ( struct regcache* regcache, int regnum, gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>ptid_equal()  :  infrun.c
<item>register_buffer()  :  regcache.c
<item>register_cached()  :  regcache.c
<item>registers_changed()  :  regcache.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>regcache_cooked_read()  :  regcache.c
<item>regcache_dump()  :  regcache.c
<item>regcache_raw_read_signed()  :  regcache.c
<item>regcache_raw_read_unsigned()  :  regcache.c
<item>remote_prepare_to_store()  :  remote.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>regcache_raw_read_part()  :  regcache.c
<item>regcache_raw_write_part()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_regcache  :  regcache.c
<item>current_target  :  target/target.c
<item>inferior_ptid  :  infcmd.c
<item>registers_ptid  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function regcache_raw_read_part()

<p><tt>void regcache_raw_read_part ( struct regcache* regcache, int regnum, int offset, int len, gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>regcache_xfer_part()  :  regcache.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>regcache_raw_read()  :  regcache.c
<item>regcache_raw_write()  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function regcache_raw_read_signed()

<p><tt>void regcache_raw_read_signed ( struct regcache* regcache, int regnum, long* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_signed_integer()  :  findvar.c
<item>internal_error()  :  utils.c
<item>regcache_raw_read()  :  regcache.c
<item>__builtin_alloca()
</itemize>
</descrip>

<sect1>Global Function regcache_raw_read_unsigned()

<p><tt>void regcache_raw_read_unsigned ( struct regcache* regcache, int regnum, unsigned long* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_unsigned_integer()  :  findvar.c
<item>internal_error()  :  utils.c
<item>regcache_raw_read()  :  regcache.c
<item>__builtin_alloca()
</itemize>
</descrip>

<sect1>Global Function regcache_raw_supply()

<p><tt>void regcache_raw_supply ( struct regcache* regcache, int regnum, const void* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>ptid_equal()  :  infrun.c
<item>register_buffer()  :  regcache.c
<item>registers_changed()  :  regcache.c
<item>__builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>fetch_register_using_p()  :  remote.c
<item>remote_async_wait()  :  remote.c
<item>remote_fetch_registers()  :  remote.c
<item>remote_wait()  :  remote.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_regcache  :  regcache.c
<item>inferior_ptid  :  infcmd.c
<item>registers_ptid  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function regcache_raw_write()

<p><tt>void regcache_raw_write ( struct regcache* regcache, int regnum, const gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_cannot_store_register()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>ptid_equal()  :  infrun.c
<item>regcache_valid_p()  :  regcache.c
<item>register_buffer()  :  regcache.c
<item>registers_changed()  :  regcache.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), memcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>regcache_cooked_write()  :  regcache.c
<item>regcache_raw_write_signed()  :  regcache.c
<item>regcache_raw_write_unsigned()  :  regcache.c
<item>write_inferior_status_register()  :  infrun.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>regcache_raw_read_part()  :  regcache.c
<item>regcache_raw_write_part()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_regcache  :  regcache.c
<item>current_target  :  target/target.c
<item>inferior_ptid  :  infcmd.c
<item>registers_ptid  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function regcache_raw_write_part()

<p><tt>void regcache_raw_write_part ( struct regcache* regcache, int regnum, int offset, int len, const gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>regcache_xfer_part()  :  regcache.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>regcache_raw_read()  :  regcache.c
<item>regcache_raw_write()  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function regcache_raw_write_signed()

<p><tt>void regcache_raw_write_signed ( struct regcache* regcache, int regnum, long val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>regcache_raw_write()  :  regcache.c
<item>store_signed_integer()  :  findvar.c
<item>__builtin_alloca()
</itemize>
</descrip>

<sect1>Global Function regcache_raw_write_unsigned()

<p><tt>void regcache_raw_write_unsigned ( struct regcache* regcache, int regnum, unsigned long val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>regcache_raw_write()  :  regcache.c
<item>store_unsigned_integer()  :  findvar.c
<item>__builtin_alloca()
</itemize>
</descrip>

<sect1>Global Function regcache_restore()

<p><tt>void regcache_restore ( struct regcache* dst, regcache_cooked_read_ftype* cooked_read, void* cooked_read_context )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_register_reggroup_p()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>regcache_cooked_write()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>regcache_cpy()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>restore_reggroup  :  reggroups.c
</itemize>
</descrip>

<sect1>Global Function regcache_save()

<p><tt>void regcache_save ( struct regcache* dst, regcache_cooked_read_ftype* cooked_read, void* src )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_register_reggroup_p()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>register_buffer()  :  regcache.c
<item>register_size()  :  regcache.c
<item>__builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_save_as_regcache()  :  frame.c
<item>regcache_cpy()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>save_reggroup  :  reggroups.c
</itemize>
</descrip>

<sect1>Global Function regcache_valid_p()

<p><tt>int regcache_valid_p ( struct regcache* regcache, int regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>regcache_dump()  :  regcache.c
<item>regcache_raw_write()  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function regcache_xfree()

<p><tt>void regcache_xfree ( struct regcache* regcache )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>discard_inferior_status()  :  infrun.c
<item>do_regcache_xfree()  :  regcache.c
<item>dummy_frame_push()  :  dummy-frame.c
<item>restore_inferior_status()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function regcache_xmalloc()

<p><tt>struct regcache* regcache_xmalloc ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>regcache_descr()  :  regcache.c
<item>xcalloc()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>build_infrun()  :  infrun.c
<item>build_regcache()  :  regcache.c
<item>frame_save_as_regcache()  :  frame.c
<item>hand_function_call()  :  infcall.c
<item>regcache_dup()  :  regcache.c
<item>regcache_dup_no_passthrough()  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function register_cached()

<p><tt>int register_cached ( int regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_register_read()  :  frame.c
<item>regcache_raw_read()  :  regcache.c
<item>value_from_register()  :  findvar.c
<item>value_of_register()  :  findvar.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_regcache  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function register_offset_hack()

<p><tt>int register_offset_hack ( struct gdbarch* gdbarch, int regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>regcache_descr()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>sentinel_frame_prev_register()  :  sentinel-frame.c
</itemize>
</descrip>

<sect1>Global Function register_size()

<p><tt>int register_size ( struct gdbarch* gdbarch, int regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_num_pseudo_regs()  :  gdbarch.c
<item>gdbarch_num_regs()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>regcache_descr()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>collect_symbol()  :  tracepoint.c
<item>debug_print_register()  :  target/target.c
<item>default_print_registers_info()  :  infcmd.c
<item>deprecated_read_register_bytes()  :  regcache.c
<item>deprecated_write_register_bytes()  :  regcache.c
<item>dwarf2_frame_prev_register()  :  dwarf2-frame.c
<item>dwarf_expr_read_reg()  :  dwarf2loc.c
<item>execute_cfa_program()  :  dwarf2-frame.c
<item>frame_info()  :  stack.c
<item>frame_register_unwind()  :  frame.c
<item>frame_unwind_register_signed()  :  frame.c
<item>frame_unwind_register_unsigned()  :  frame.c
<item>frame_unwind_unsigned_register()  :  frame.c
<item>init_remote_state()  :  remote.c
<item>put_frame_register()  :  frame.c
<item>read_reg()  :  dwarf2-frame.c
<item>read_register()  :  regcache.c
<item>regcache_save()  :  regcache.c
<item>remote_async_wait()  :  remote.c
<item>remote_wait()  :  remote.c
<item>store_register_using_P()  :  remote.c
<item>trad_frame_get_prev_register()  :  trad-frame.c
<item>value_assign()  :  valops.c
<item>value_from_register()  :  findvar.c
<item>value_of_register()  :  findvar.c
<item>write_inferior_status_register()  :  infrun.c
<item>write_register()  :  regcache.c
<item>x86_frame_prev_register()  :  target/x86-shared-tdep.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function register_type()

<p><tt>struct type* register_type ( struct gdbarch* gdbarch, int regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>regcache_descr()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>default_print_registers_info()  :  infcmd.c
<item>default_register_reggroup_p()  :  reggroups.c
<item>dwarf2_frame_prev_register()  :  dwarf2-frame.c
<item>gen_expr()  :  ax-gdb.c
<item>regcache_dump()  :  regcache.c
<item>value_of_register()  :  findvar.c
</itemize>
</descrip>

<sect1>Global Function registers_changed()

<p><tt>void registers_changed ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>pid_to_ptid()  :  infrun.c
<item>set_register_cached()  :  regcache.c
<item>__builtin_alloca(), deprecated_registers_changed_hook()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>fetch_inferior_event()  :  infrun.c
<item>finish_tfind_command()  :  tracepoint.c
<item>generic_mourn_inferior()  :  target/target.c
<item>handle_inferior_event()  :  infrun.c
<item>prepare_to_proceed()  :  infrun.c
<item>prepare_to_wait()  :  infrun.c
<item>reg_flush_command()  :  regcache.c
<item>regcache_observer_target_changed()  :  regcache.c
<item>regcache_raw_read()  :  regcache.c
<item>regcache_raw_supply()  :  regcache.c
<item>regcache_raw_write()  :  regcache.c
<item>switch_to_thread()  :  thread.c
<item>wait_for_inferior()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_regcache  :  regcache.c
<item>deprecated_registers_changed_hook  :  top.c
<item>registers_ptid  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function set_register_cached()

<p><tt>void set_register_cached ( int regnum, int state )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>deprecated_registers_fetched()  :  regcache.c
<item>fetch_register_using_p()  :  remote.c
<item>registers_changed()  :  regcache.c
<item>remote_fetch_registers()  :  remote.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_regcache  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function write_pc()

<p><tt>void write_pc ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>write_pc_pid()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>generic_load()  :  symfile.c
<item>proceed()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function write_pc_pid()

<p><tt>void write_pc_pid ( CORE_ADDR pc, ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_write_pc()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>adjust_pc_after_break()  :  infrun.c
<item>handle_inferior_event()  :  infrun.c
<item>write_pc()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function write_register()

<p><tt>void write_register ( int regnum, long val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_write_register_gen()  :  regcache.c
<item>register_size()  :  regcache.c
<item>store_signed_integer()  :  findvar.c
<item>__builtin_alloca()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>write_register_pid()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function write_register_pid()

<p><tt>void write_register_pid ( int regnum, CORE_ADDR val, ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>regcache.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ptid_equal()  :  infrun.c
<item>write_register()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>generic_target_write_pc()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function build_regcache()

<p><tt>static void build_regcache ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>regcache_xmalloc()  :  regcache.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_regcache()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_regcache  :  regcache.c
</itemize>
</descrip>

<sect1>Local Function do_cooked_read()

<p><tt>static int do_cooked_read ( void* src, int regnum, gdb_byte* buf )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>regcache_cooked_read()  :  regcache.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>regcache_cpy()  :  regcache.c
</itemize>
</descrip>

<sect1>Local Function do_regcache_xfree()

<p><tt>static void do_regcache_xfree ( void* data )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>regcache_xfree()  :  regcache.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_regcache_xfree()  :  regcache.c
</itemize>
</descrip>

<sect1>Local Function dump_endian_bytes()

<p><tt>static void dump_endian_bytes ( struct ui_file* file, enum bfd_endian endian, const unsigned char* buf, long len )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>regcache_dump()  :  regcache.c
</itemize>
</descrip>

<sect1>Local Function init_regcache_descr()

<p><tt>static void* init_regcache_descr ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_num_pseudo_regs()  :  gdbarch.c
<item>gdbarch_num_regs()  :  gdbarch.c
<item>gdbarch_obstack_zalloc()  :  gdbarch.c
<item>gdbarch_register_type()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_regcache()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function maintenance_print_cooked_registers()

<p><tt>static void maintenance_print_cooked_registers ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>regcache_print()  :  regcache.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_regcache()  :  regcache.c
</itemize>
</descrip>

<sect1>Local Function maintenance_print_raw_registers()

<p><tt>static void maintenance_print_raw_registers ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>regcache_print()  :  regcache.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_regcache()  :  regcache.c
</itemize>
</descrip>

<sect1>Local Function maintenance_print_register_groups()

<p><tt>static void maintenance_print_register_groups ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>regcache_print()  :  regcache.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_regcache()  :  regcache.c
</itemize>
</descrip>

<sect1>Local Function maintenance_print_registers()

<p><tt>static void maintenance_print_registers ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>regcache_print()  :  regcache.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_regcache()  :  regcache.c
</itemize>
</descrip>

<sect1>Local Function reg_flush_command()

<p><tt>static void reg_flush_command ( const char* command, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>printf_filtered()  :  utils.c
<item>registers_changed()  :  regcache.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_regcache()  :  regcache.c
</itemize>
</descrip>

<sect1>Local Function regcache_descr()

<p><tt>static struct regcache_descr* regcache_descr ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>new_gdbarch_data()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>regcache_xmalloc()  :  regcache.c
<item>register_offset_hack()  :  regcache.c
<item>register_size()  :  regcache.c
<item>register_type()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>regcache_descr_handle  :  regcache.c
</itemize>
</descrip>

<sect1>Local Function regcache_dump()

<p><tt>static void regcache_dump ( struct regcache* regcache, struct ui_file* file, enum regcache_dump_what what_to_dump )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>dump_endian_bytes()  :  regcache.c
<item>fprintf_unfiltered()  :  utils.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>gdbarch_deprecated_register_byte()  :  gdbarch.c
<item>gdbarch_num_pseudo_regs()  :  gdbarch.c
<item>gdbarch_num_regs()  :  gdbarch.c
<item>gdbarch_register_name()  :  gdbarch.c
<item>gdbarch_register_reggroup_p()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>regcache_cooked_read()  :  regcache.c
<item>regcache_raw_read()  :  regcache.c
<item>regcache_valid_p()  :  regcache.c
<item>reggroup_name()  :  reggroups.c
<item>reggroup_next()  :  reggroups.c
<item>register_type()  :  regcache.c
<item>xstrprintf()  :  utils.c
<item>strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>regcache_print()  :  regcache.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>null_cleanup()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function regcache_print()

<p><tt>static void regcache_print ( const char* args, enum regcache_dump_what what_to_dump )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdb_fopen()  :  ui-file.c
<item>perror_with_name()  :  utils.c
<item>regcache_dump()  :  regcache.c
<item>ui_file_delete()  :  ui-file.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>maintenance_print_cooked_registers()  :  regcache.c
<item>maintenance_print_raw_registers()  :  regcache.c
<item>maintenance_print_register_groups()  :  regcache.c
<item>maintenance_print_registers()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_regcache  :  regcache.c
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

<sect1>Local Function regcache_xfer_part()

<p><tt>static void regcache_xfer_part ( struct regcache* regcache, int regnum, int offset, int len, void* in, const void* out, void (*read)(struct regcache* regcache,int regnum,gdb_byte* buf), void (*write)(struct regcache* regcache,int regnum,const gdb_byte* buf) )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>regcache_cooked_read_part()  :  regcache.c
<item>regcache_cooked_write_part()  :  regcache.c
<item>regcache_raw_read_part()  :  regcache.c
<item>regcache_raw_write_part()  :  regcache.c
</itemize>
</descrip>

<sect1>Local Function register_buffer()

<p><tt>static gdb_byte* register_buffer ( const struct regcache* regcache, int regnum )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>regcache_cooked_read()  :  regcache.c
<item>regcache_raw_collect()  :  regcache.c
<item>regcache_raw_read()  :  regcache.c
<item>regcache_raw_supply()  :  regcache.c
<item>regcache_raw_write()  :  regcache.c
<item>regcache_save()  :  regcache.c
</itemize>
</descrip>

</article>
