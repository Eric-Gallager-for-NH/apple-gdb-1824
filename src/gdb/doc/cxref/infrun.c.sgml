<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF infrun.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for infrun.c of gdb.cxref.
<author>cxref

<sect>File infrun.c
<descrip>
<tag>References Variables:</tag>
<itemize>
<item>follow_fork_mode_child  :  infrun.c
<item>follow_fork_mode_parent  :  infrun.c
<item>schedlock_off  :  infrun.c
<item>schedlock_on  :  infrun.c
<item>schedlock_step  :  infrun.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_wait.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/wait.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;cli/cli-script.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbthread.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;annotate.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;top.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;signal.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;inf-loop.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;event-top.h&quot;</tt>
<itemize>
<item><tt>#include &lt;signal.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;regcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;observer.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;solib.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;mi/mi-common.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;macosx/macosx-nat-dyld.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-mutils.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;target.h&quot;</tt>
<item><tt>#include &quot;inferior.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-utils.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
</itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-threads.h&quot;</tt>
<itemize>
<item><tt>#include &lt;pthread.h&gt;</tt>
</itemize>
<item><tt>#include &lt;mach/machine.h&gt;</tt>
<item><tt>#include &lt;mach-o/loader.h&gt;</tt>
<item><tt>#include &quot;macosx/macosx-nat-dyld-info.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/machine.h&gt;</tt>
<item><tt>#include &lt;mach-o/loader.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-dyld-path.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;checkpoint.h&quot;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define TARGET_DISABLE_HW_WATCHPOINTS( pid )</tt><newline>
<p>
<tt>#define TARGET_ENABLE_HW_WATCHPOINTS( pid )</tt><newline>
<p>
<tt>#define MAY_FOLLOW_EXEC 0</tt><newline>
<p>
<tt>#define SKIP_PERMANENT_BREAKPOINT default_skip_permanent_breakpoint</tt><newline>
<p>
<tt>#define HAVE_STEPPABLE_WATCHPOINT 0</tt><newline>
<p>
<tt>#define CANNOT_STEP_HW_WATCHPOINTS 0</tt><newline>
<p>
<tt>#define SET_SIGS( nsigs, sigs, flags )</tt><newline>
<p>
<tt>#define UNSET_SIGS( nsigs, sigs, flags )</tt><newline>
<p>
<tt>#define RESUME_ALL</tt><newline>

<sect1>Type enum infwait_states

<p>
<itemize>
<item><tt>enum infwait_states</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>infwait_normal_state;</tt><newline>
<item><tt>infwait_thread_hop_state;</tt><newline>
<item><tt>infwait_nonstep_watch_state;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type enum inferior_stop_reason

<p>
<itemize>
<item><tt>enum inferior_stop_reason</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>STOP_UNKNOWN;</tt><newline>
<item><tt>END_STEPPING_RANGE;</tt><newline>
<item><tt>BREAKPOINT_HIT;</tt><newline>
<item><tt>SIGNAL_EXITED;</tt><newline>
<item><tt>EXITED;</tt><newline>
<item><tt>SIGNAL_RECEIVED;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct execution_control_state

<p>
<itemize>
<item><tt>struct execution_control_state</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct target_waitstatus ws;</tt><newline>
<item><tt>struct target_waitstatus* wp;</tt><newline>
<item><tt>int another_trap;</tt><newline>
<item><tt>int random_signal;</tt><newline>
<item><tt>CORE_ADDR stop_func_start;</tt><newline>
<item><tt>CORE_ADDR stop_func_end;</tt><newline>
<item><tt>const char* stop_func_name;</tt><newline>
<item><tt>struct symtab_and_line sal;</tt><newline>
<item><tt>int current_line;</tt><newline>
<item><tt>struct symtab* current_symtab;</tt><newline>
<item><tt>int handling_longjmp;</tt><newline>
<item><tt>ptid_t ptid;</tt><newline>
<item><tt>ptid_t saved_inferior_ptid;</tt><newline>
<item><tt>int step_after_step_resume_breakpoint;</tt><newline>
<item><tt>int stepping_through_solib_after_catch;</tt><newline>
<item><tt>bpstat stepping_through_solib_catchpoints;</tt><newline>
<item><tt>int enable_hw_watchpoints_after_wait;</tt><newline>
<item><tt>int new_thread_event;</tt><newline>
<item><tt>struct target_waitstatus tmpstatus;</tt><newline>
<item><tt>enum infwait_states infwait_state;</tt><newline>
<item><tt>ptid_t waiton_ptid;</tt><newline>
<item><tt>int wait_some_more;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct inferior_status

<p>
<itemize>
<item><tt>struct inferior_status</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>ptid_t stop_ptid;</tt><newline>
<item><tt>enum target_signal stop_signal;</tt><newline>
<item><tt>CORE_ADDR stop_pc;</tt><newline>
<item><tt>bpstat stop_bpstat;</tt><newline>
<item><tt>int stop_step;</tt><newline>
<item><tt>int stop_stack_dummy;</tt><newline>
<item><tt>int stopped_by_random_signal;</tt><newline>
<item><tt>int trap_expected;</tt><newline>
<item><tt>CORE_ADDR step_range_start;</tt><newline>
<item><tt>CORE_ADDR step_range_end;</tt><newline>
<item><tt>struct address_range_list* stepping_ranges;</tt><newline>
<item><tt>struct frame_id step_frame_id;</tt><newline>
<item><tt>enum step_over_calls_kind step_over_calls;</tt><newline>
<item><tt>CORE_ADDR step_resume_break_address;</tt><newline>
<item><tt>int stop_after_trap;</tt><newline>
<item><tt>int stop_soon;</tt><newline>
<item><tt>struct regcache* stop_registers;</tt><newline>
<item><tt>struct regcache* registers;</tt><newline>
<item><tt>struct frame_id selected_frame_id;</tt><newline>
<item><tt>int breakpoint_proceeded;</tt><newline>
<item><tt>int restore_stack_info;</tt><newline>
<item><tt>int proceed_to_finish;</tt><newline>
<item><tt>void* tdep_inferior_status;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable minus_one_ptid

<p>
<tt>ptid_t minus_one_ptid</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
<item>do_reset_hand_call_ptid()  :  infcall.c
<item>hand_function_call()  :  infcall.c
<item>handle_inferior_event()  :  infrun.c
<item>init_wait_for_inferior()  :  infrun.c
<item>prepare_to_proceed()  :  infrun.c
<item>resume()  :  infrun.c
<item>set_schedlock_helper()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Variable null_ptid

<p>
<tt>ptid_t null_ptid</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_inflow()  :  inflow.c
<item>_initialize_infrun()  :  infrun.c
<item>generic_mourn_inferior()  :  target/target.c
<item>kill_command()  :  inflow.c
<item>kill_if_already_running()  :  infcmd.c
<item>nosupport_runtime()  :  target/target.c
<item>quit_confirm()  :  top.c
<item>quit_target()  :  top.c
<item>remote_macosx_open()  :  remote.c
<item>remote_open_1()  :  remote.c
<item>remote_start_remote()  :  remote.c
<item>run_command_1()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Variable sync_execution

<p>
<tt>int sync_execution</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>complete_execution()  :  inf-loop.c
<item>display_gdb_prompt()  :  event-top.c
<item>handle_inferior_event()  :  infrun.c
<item>inferior_event_handler()  :  inf-loop.c
<item>remote_async_terminal_inferior()  :  remote.c
<item>remote_async_terminal_ours()  :  remote.c
</itemize>
</descrip>

<sect1>Global Variable inferior_ignoring_startup_exec_events

<p>
<tt>int inferior_ignoring_startup_exec_events</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
</descrip>

<sect1>Global Variable inferior_ignoring_leading_exec_events

<p>
<tt>int inferior_ignoring_leading_exec_events</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Variable step_stop_if_no_debug

<p>
<tt>int step_stop_if_no_debug</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
<item>handle_inferior_event()  :  infrun.c
<item>step_once()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Variable stop_soon

<p>
<tt>enum stop_kind stop_soon</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>clear_proceed_status()  :  infrun.c
<item>handle_inferior_event()  :  infrun.c
<item>restore_inferior_status()  :  infrun.c
<item>save_inferior_status()  :  infrun.c
<item>start_remote()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Variable proceed_from_hand_call

<p>
<tt>int proceed_from_hand_call</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>do_unset_proceed_from_hand_call()  :  infcall.c
<item>hand_function_call()  :  infcall.c
<item>keep_going()  :  infrun.c
<item>prepare_to_proceed()  :  infrun.c
<item>proceed()  :  infrun.c
<item>run_command_1()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Variable proceed_to_finish

<p>
<tt>int proceed_to_finish</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>clear_proceed_status()  :  infrun.c
<item>finish_command()  :  infcmd.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>hand_function_call()  :  infcall.c
<item>normal_stop()  :  infrun.c
<item>restore_inferior_status()  :  infrun.c
<item>save_inferior_status()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Variable stop_registers

<p>
<tt>struct regcache* stop_registers</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
<item>build_infrun()  :  infrun.c
<item>hand_function_call()  :  infcall.c
<item>normal_stop()  :  infrun.c
<item>print_return_value()  :  infcmd.c
<item>restore_inferior_status()  :  infrun.c
<item>save_inferior_status()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Variable debug_handcall_setup

<p>
<tt>int debug_handcall_setup</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
<item>discard_hand_call_cleanups()  :  utils.c
<item>do_end_debugger_mode()  :  objc-lang.c
<item>do_hand_call_cleanups()  :  utils.c
<item>do_reset_debug_mode_flag()  :  objc-lang.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>objc_setup_safe_print()  :  objc-lang.c
<item>set_scheduler_locking_mode()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Variable currently_inside_optimized_code

<p>
<tt>int currently_inside_optimized_code</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>event-top.c
<item>frame.c
<item>infcmd.c
<item>infrun.c
<item>interps.c
<item>main.c
<item>objc-exp.c
<item>p-exp.c
<item>source.c
<item>top.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>adjust_prompts_for_optimized_code()  :  event-top.c
<item>normal_stop()  :  infrun.c
<item>select_frame()  :  frame.c
<item>set_async_prompt()  :  event-top.c
</itemize>
</descrip>

<sect1>Global Variable stop_after_trap

<p>
<tt>int stop_after_trap</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>clear_proceed_status()  :  infrun.c
<item>handle_inferior_event()  :  infrun.c
<item>proceed()  :  infrun.c
<item>restore_inferior_status()  :  infrun.c
<item>save_inferior_status()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Variable async_ecss

<p>
<tt>struct execution_control_state async_ecss</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>fetch_inferior_event()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Variable async_ecs

<p>
<tt>struct execution_control_state* async_ecs</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>fetch_inferior_event()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Variable stepped_after_stopped_by_watchpoint

<p>
<tt>int stepped_after_stopped_by_watchpoint</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>infrun.c
<item>remote.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>remote_stopped_data_address()  :  remote.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>previous_inferior_ptid</bf><newline>
<tt>static ptid_t previous_inferior_ptid</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>fetch_inferior_event()
<item>normal_stop()
<item>wait_for_inferior()
</itemize>
</descrip>
<p>
<bf>may_follow_exec</bf><newline>
<tt>static int may_follow_exec</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>follow_exec()
</itemize>
</descrip>
<p>
<bf>debug_infrun</bf><newline>
<tt>static int debug_infrun</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()
<item>handle_inferior_event()
<item>insert_step_resume_breakpoint_at_frame()
<item>prepare_to_wait()
<item>proceed()
<item>resume()
<item>stop_stepping()
<item>wait_for_inferior()
</itemize>
</descrip>
<p>
<bf>signal_stop</bf><newline>
<tt>static unsigned char* signal_stop</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>allocate_signal_set()
<item>handle_command()
<item>handle_inferior_event()
<item>print_stop_reason()
<item>set_minimal_signal_handling()
<item>sig_print_info()
<item>signal_stop_state()
<item>signal_stop_update()
<item>xdb_handle_command()
</itemize>
</descrip>
<p>
<bf>signal_print</bf><newline>
<tt>static unsigned char* signal_print</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>allocate_signal_set()
<item>handle_command()
<item>handle_inferior_event()
<item>set_minimal_signal_handling()
<item>sig_print_info()
<item>signal_print_state()
<item>signal_print_update()
<item>xdb_handle_command()
</itemize>
</descrip>
<p>
<bf>signal_program</bf><newline>
<tt>static unsigned char* signal_program</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>allocate_signal_set()
<item>handle_command()
<item>handle_inferior_event()
<item>keep_going()
<item>proceed()
<item>set_minimal_signal_handling()
<item>sig_print_info()
<item>signal_pass_state()
<item>signal_pass_update()
<item>xdb_handle_command()
</itemize>
</descrip>
<p>
<bf>stop_command</bf><newline>
<tt>static struct cmd_list_element* stop_command</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()
<item>normal_stop()
</itemize>
</descrip>
<p>
<bf>breakpoints_inserted</bf><newline>
<tt>static int breakpoints_inserted</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>handle_inferior_event()
<item>init_wait_for_inferior()
<item>insert_step_resume_breakpoint_at_sal()
<item>keep_going()
<item>normal_stop()
<item>proceed()
<item>resume()
</itemize>
</descrip>
<p>
<bf>step_start_function</bf><newline>
<tt>static struct symbol* step_start_function</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>normal_stop()
<item>proceed()
</itemize>
</descrip>
<p>
<bf>trap_expected</bf><newline>
<tt>static int trap_expected</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>clear_proceed_status()
<item>context_switch()
<item>currently_stepping()
<item>handle_inferior_event()
<item>keep_going()
<item>proceed()
<item>restore_inferior_status()
<item>save_inferior_status()
<item>start_remote()
</itemize>
</descrip>
<p>
<bf>stop_on_solib_events</bf><newline>
<tt>static int stop_on_solib_events</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()
<item>handle_inferior_event()
<item>normal_stop()
</itemize>
</descrip>
<p>
<bf>solib_step_bp</bf><newline>
<tt>static struct breakpoint* solib_step_bp</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>handle_inferior_event()
<item>normal_stop()
</itemize>
</descrip>
<p>
<bf>solib_finish_bp</bf><newline>
<tt>static struct breakpoint* solib_finish_bp</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>handle_inferior_event()
<item>normal_stop()
</itemize>
</descrip>
<p>
<bf>breakpoints_failed</bf><newline>
<tt>static int breakpoints_failed</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>handle_inferior_event()
<item>keep_going()
</itemize>
</descrip>
<p>
<bf>stop_print_frame</bf><newline>
<tt>static int stop_print_frame</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>handle_inferior_event()
<item>normal_stop()
<item>rollback_stop()
</itemize>
</descrip>
<p>
<bf>step_resume_breakpoint</bf><newline>
<tt>static struct breakpoint* step_resume_breakpoint</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>context_switch()
<item>currently_stepping()
<item>fetch_inferior_event()
<item>follow_exec()
<item>follow_inferior_reset_breakpoints()
<item>handle_inferior_event()
<item>hide_step_resume_breakpoint()
<item>insert_step_resume_breakpoint_at_sal()
<item>restore_step_resume_breakpoint()
<item>wait_for_inferior()
</itemize>
</descrip>
<p>
<bf>target_last_wait_ptid</bf><newline>
<tt>static ptid_t target_last_wait_ptid</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()
<item>get_last_target_status()
<item>handle_inferior_event()
</itemize>
</descrip>
<p>
<bf>target_last_waitstatus</bf><newline>
<tt>static struct target_waitstatus target_last_waitstatus</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>get_last_target_status()
<item>handle_inferior_event()
</itemize>
</descrip>
<p>
<bf>pending_follow</bf><newline>
<tt>static struct {...} pending_follow</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>handle_inferior_event()
<item>init_wait_for_inferior()
<item>resume()
</itemize>
</descrip>
<p>
<bf>follow_fork_mode_child</bf><newline>
<tt>static const char follow_fork_mode_child[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>infrun.c
<item>follow_fork()
</itemize>
</descrip>
<p>
<bf>follow_fork_mode_parent</bf><newline>
<tt>static const char follow_fork_mode_parent[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>infrun.c
</itemize>
</descrip>
<p>
<bf>follow_fork_mode_kind_names</bf><newline>
<tt>static const char* follow_fork_mode_kind_names[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()
</itemize>
</descrip>
<p>
<bf>follow_fork_mode_string</bf><newline>
<tt>static const char* follow_fork_mode_string</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()
<item>follow_fork()
</itemize>
</descrip>
<p>
<bf>singlestep_breakpoints_inserted_p</bf><newline>
<tt>static int singlestep_breakpoints_inserted_p</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>adjust_pc_after_break()
<item>handle_inferior_event()
<item>resume()
</itemize>
</descrip>
<p>
<bf>singlestep_ptid</bf><newline>
<tt>static ptid_t singlestep_ptid</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>handle_inferior_event()
<item>resume()
</itemize>
</descrip>
<p>
<bf>saved_singlestep_ptid</bf><newline>
<tt>static ptid_t saved_singlestep_ptid</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>handle_inferior_event()
</itemize>
</descrip>
<p>
<bf>stepping_past_singlestep_breakpoint</bf><newline>
<tt>static int stepping_past_singlestep_breakpoint</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>handle_inferior_event()
<item>init_wait_for_inferior()
<item>resume()
</itemize>
</descrip>
<p>
<bf>schedlock_off</bf><newline>
<tt>static const char schedlock_off[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>infrun.c
<item>set_schedlock_helper()
<item>set_scheduler_locking_mode()
</itemize>
</descrip>
<p>
<bf>schedlock_on</bf><newline>
<tt>static const char schedlock_on[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>infrun.c
<item>handle_inferior_event()
<item>resume()
<item>scheduler_lock_on_p()
<item>set_schedlock_helper()
<item>set_scheduler_locking_mode()
</itemize>
</descrip>
<p>
<bf>schedlock_step</bf><newline>
<tt>static const char schedlock_step[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>infrun.c
<item>resume()
<item>scheduler_lock_on_p()
<item>set_scheduler_locking_mode()
</itemize>
</descrip>
<p>
<bf>scheduler_enums</bf><newline>
<tt>static const char* scheduler_enums[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()
</itemize>
</descrip>
<p>
<bf>scheduler_mode</bf><newline>
<tt>static const char* scheduler_mode</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()
<item>handle_inferior_event()
<item>resume()
<item>scheduler_lock_on_p()
<item>set_schedlock_helper()
<item>set_scheduler_locking_mode()
</itemize>
</descrip>
<p>
<bf>scheduler_lock_ptid</bf><newline>
<tt>static struct ptid scheduler_lock_ptid</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>get_scheduler_lock_ptid()
<item>init_wait_for_inferior()
<item>resume()
<item>scheduler_run_this_ptid()
</itemize>
</descrip>
<p>
<bf>prev_pc</bf><newline>
<tt>static CORE_ADDR prev_pc</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>adjust_pc_after_break()
<item>context_switch()
<item>handle_inferior_event()
<item>init_execution_control_state()
<item>init_wait_for_inferior()
<item>keep_going()
<item>proceed()
</itemize>
</descrip>
<p>
<bf>suppress_hook_stop_p</bf><newline>
<tt>static void* suppress_hook_stop_p</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>do_cleanup_suppress_hook_stop()
<item>hook_stop_stub()
<item>make_cleanup_suppress_hook_stop()
</itemize>
</descrip>
<p>
<bf>minimal_signal_handling</bf><newline>
<tt>static int minimal_signal_handling</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()
<item>set_minimal_signal_handling()
</itemize>
</descrip>
<p>
<bf>minimal_signal_stop</bf><newline>
<tt>static unsigned char* minimal_signal_stop</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()
<item>set_minimal_signal_handling()
</itemize>
</descrip>
<p>
<bf>minimal_signal_print</bf><newline>
<tt>static unsigned char* minimal_signal_print</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()
<item>set_minimal_signal_handling()
</itemize>
</descrip>
<p>
<bf>minimal_signal_program</bf><newline>
<tt>static unsigned char* minimal_signal_program</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()
<item>set_minimal_signal_handling()
</itemize>
</descrip>
<p>
<bf>full_signal_stop</bf><newline>
<tt>static unsigned char* full_signal_stop</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()
<item>set_minimal_signal_handling()
</itemize>
</descrip>
<p>
<bf>full_signal_print</bf><newline>
<tt>static unsigned char* full_signal_print</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()
<item>set_minimal_signal_handling()
</itemize>
</descrip>
<p>
<bf>full_signal_program</bf><newline>
<tt>static unsigned char* full_signal_program</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()
<item>set_minimal_signal_handling()
</itemize>
</descrip>

<sect1>Global Function _initialize_infrun()

<p><tt>void _initialize_infrun ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_signal_set()  :  infrun.c
<item>deprecated_register_gdbarch_swap()  :  gdbarch.c
<item>ptid_build()  :  infrun.c
<item>scheduler_run_this_ptid()  :  infrun.c
<item>set_minimal_signal_handling()  :  infrun.c
<item>add_cmd(), add_com(), add_info(), add_info_alias(), add_setshow_boolean_cmd(), add_setshow_enum_cmd(), add_setshow_zinteger_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>build_infrun()  :  infrun.c
<item>handle_command()  :  infrun.c
<item>set_minimal_signal_handling()  :  infrun.c
<item>set_schedlock_func()  :  infrun.c
<item>show_debug_infrun()  :  infrun.c
<item>show_follow_fork_mode_string()  :  infrun.c
<item>show_scheduler_mode()  :  infrun.c
<item>show_step_stop_if_no_debug()  :  infrun.c
<item>show_stop_on_solib_events()  :  infrun.c
<item>signals_info()  :  infrun.c
<item>xdb_handle_command()  :  infrun.c
<item>not_just_help_class_command()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dbx_commands  :  main.c
<item>debug_handcall_setup  :  infrun.c
<item>debug_infrun  :  infrun.c
<item>follow_fork_mode_kind_names  :  infrun.c
<item>follow_fork_mode_string  :  infrun.c
<item>full_signal_print  :  infrun.c
<item>full_signal_program  :  infrun.c
<item>full_signal_stop  :  infrun.c
<item>inferior_ptid  :  infcmd.c
<item>minimal_signal_handling  :  infrun.c
<item>minimal_signal_print  :  infrun.c
<item>minimal_signal_program  :  infrun.c
<item>minimal_signal_stop  :  infrun.c
<item>minus_one_ptid  :  infrun.c
<item>null_ptid  :  infrun.c
<item>scheduler_enums  :  infrun.c
<item>scheduler_mode  :  infrun.c
<item>step_stop_if_no_debug  :  infrun.c
<item>stop_command  :  infrun.c
<item>stop_on_solib_events  :  infrun.c
<item>stop_registers  :  infrun.c
<item>target_last_wait_ptid  :  infrun.c
<item>xdb_commands  :  main.c
<item>cmdlist, setdebuglist, setlist, showdebuglist, showlist
</itemize>
</descrip>

<sect1>Global Function clear_proceed_status()

<p><tt>void clear_proceed_status ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bpstat_clear()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>attach_command()  :  infcmd.c
<item>continue_command()  :  infcmd.c
<item>extended_remote_async_create_inferior()  :  remote.c
<item>extended_remote_create_inferior()  :  remote.c
<item>finish_command()  :  infcmd.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>hand_function_call()  :  infcall.c
<item>init_wait_for_inferior()  :  infrun.c
<item>jump_command()  :  infcmd.c
<item>re_exec_1()  :  infcmd.c
<item>re_exec_once()  :  infcmd.c
<item>signal_command()  :  infcmd.c
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
<item>until_break_command()  :  breakpoint.c
<item>until_next_command()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_proceeded  :  infcmd.c
<item>finishing_inlined_subroutine  :  infcmd.c
<item>null_frame_id  :  frame.c
<item>proceed_to_finish  :  infrun.c
<item>step_frame_id  :  infcmd.c
<item>step_over_calls  :  infcmd.c
<item>step_range_end  :  infcmd.c
<item>step_range_start  :  infcmd.c
<item>stepping_over_inlined_subroutine  :  infcmd.c
<item>stepping_ranges  :  infcmd.c
<item>stop_after_trap  :  infrun.c
<item>stop_bpstat  :  infcmd.c
<item>stop_soon  :  infrun.c
<item>trap_expected  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function discard_inferior_status()

<p><tt>void discard_inferior_status ( struct inferior_status* inf_status )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bpstat_clear()  :  breakpoint.c
<item>regcache_xfree()  :  regcache.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function fetch_inferior_event()

<p><tt>void fetch_inferior_event ( void* client_data )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_exec_cleanups()  :  utils.c
<item>handle_inferior_event()  :  infrun.c
<item>inferior_event_handler()  :  inf-loop.c
<item>init_execution_control_state()  :  infrun.c
<item>make_exec_cleanup()  :  utils.c
<item>normal_stop()  :  infrun.c
<item>registers_changed()  :  regcache.c
<item>deprecated_target_wait_hook()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>fetch_inferior_event_wrapper()  :  inf-loop.c
<item>inferior_event_handler()  :  inf-loop.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>delete_step_resume_breakpoint()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>async_ecs  :  infrun.c
<item>async_ecss  :  infrun.c
<item>current_target  :  target/target.c
<item>deprecated_target_wait_hook  :  top.c
<item>inferior_ptid  :  infcmd.c
<item>overlay_cache_invalid  :  symfile.c
<item>previous_inferior_ptid  :  infrun.c
<item>step_multi  :  infcmd.c
<item>step_resume_breakpoint  :  infrun.c
<item>stop_step  :  infcmd.c
<item>target_executing  :  top.c
</itemize>
</descrip>

<sect1>Global Function follow_inferior_reset_breakpoints()

<p><tt>void follow_inferior_reset_breakpoints ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_re_set()  :  breakpoint.c
<item>breakpoint_re_set_thread()  :  breakpoint.c
<item>insert_breakpoints()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>step_resume_breakpoint  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function get_last_target_status()

<p><tt>void get_last_target_status ( ptid_t* ptidp, struct target_waitstatus* status )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>inferior_has_execd()  :  infrun.c
<item>inferior_has_forked()  :  infrun.c
<item>inferior_has_vforked()  :  infrun.c
<item>normal_stop()  :  infrun.c
<item>prepare_to_proceed()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>target_last_wait_ptid  :  infrun.c
<item>target_last_waitstatus  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function get_scheduler_lock_ptid()

<p><tt>struct ptid get_scheduler_lock_ptid ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>scheduler_lock_ptid  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function handle_inferior_event()

<p><tt>void handle_inferior_event ( struct execution_control_state* ecs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_thread()  :  thread.c
<item>adjust_pc_after_break()  :  infrun.c
<item>async_disable_stdin()  :  event-top.c
<item>at_inlined_call_site_p()  :  inlining.c
<item>bpstat_clear()  :  breakpoint.c
<item>bpstat_copy()  :  breakpoint.c
<item>bpstat_find_step_resume_breakpoint()  :  breakpoint.c
<item>bpstat_get_triggered_catchpoints()  :  breakpoint.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>bpstat_what_to_do()  :  breakpoint.c
<item>breakpoint_here_p()  :  breakpoint.c
<item>breakpoint_thread_match()  :  breakpoint.c
<item>context_switch()  :  infrun.c
<item>current_inlined_subroutine_call_stack_start_pc()  :  inlining.c
<item>currently_stepping()  :  infrun.c
<item>delete_step_resume_breakpoint()  :  thread.c
<item>disable_longjmp_breakpoint()  :  breakpoint.c
<item>find_finish_breakpoint()  :  breakpoint.c
<item>find_pc_line()  :  symtab.c
<item>find_pc_overlay()  :  symfile.c
<item>find_pc_partial_function()  :  blockframe.c
<item>flush_cached_frames()  :  frame.c
<item>follow_exec()  :  infrun.c
<item>fprintf_unfiltered()  :  utils.c
<item>frame_id_eq()  :  frame.c
<item>frame_id_inner()  :  frame.c
<item>frame_unwind_id()  :  frame.c
<item>gdb_flush()  :  ui-file.c
<item>gdbarch_deprecated_function_start_offset()  :  gdbarch.c
<item>gdbarch_get_longjmp_target()  :  gdbarch.c
<item>gdbarch_get_longjmp_target_p()  :  gdbarch.c
<item>gdbarch_have_nonsteppable_watchpoint()  :  gdbarch.c
<item>gdbarch_in_solib_return_trampoline()  :  gdbarch.c
<item>gdbarch_single_step_through_delay()  :  gdbarch.c
<item>gdbarch_single_step_through_delay_p()  :  gdbarch.c
<item>gdbarch_skip_solib_resolver()  :  gdbarch.c
<item>gdbarch_skip_trampoline_code()  :  gdbarch.c
<item>gdbarch_software_single_step()  :  gdbarch.c
<item>gdbarch_software_single_step_p()  :  gdbarch.c
<item>get_current_frame()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>get_frame_type()  :  frame.c
<item>get_prev_frame()  :  frame.c
<item>in_prologue()  :  symtab.c
<item>in_solib_dynsym_resolve_code()  :  solib.c
<item>in_thread_list()  :  thread.c
<item>init_sal()  :  symtab.c
<item>inlined_function_call_stack_pc()  :  inlining.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>insert_breakpoints()  :  breakpoint.c
<item>insert_step_resume_breakpoint_at_frame()  :  infrun.c
<item>insert_step_resume_breakpoint_at_sal()  :  infrun.c
<item>internal_error()  :  utils.c
<item>is_at_stepping_ranges_end()  :  inlining.c
<item>is_within_stepping_ranges()  :  inlining.c
<item>keep_going()  :  infrun.c
<item>length_of_this_instruction()  :  target/target.c
<item>lookup_internalvar()  :  value.c
<item>paddr()  :  utils.c
<item>paddr_nz()  :  utils.c
<item>pc_set_load_state()  :  objfiles.c
<item>pid_to_ptid()  :  infrun.c
<item>pid_to_thread_id()  :  thread.c
<item>prepare_to_wait()  :  infrun.c
<item>print_stop_reason()  :  infrun.c
<item>printf_filtered()  :  utils.c
<item>ptid_equal()  :  infrun.c
<item>ptid_get_pid()  :  infrun.c
<item>re_enable_breakpoints_in_shlibs()  :  breakpoint.c
<item>read_pc()  :  regcache.c
<item>read_pc_pid()  :  regcache.c
<item>registers_changed()  :  regcache.c
<item>remove_breakpoints()  :  breakpoint.c
<item>resume()  :  infrun.c
<item>savestring()  :  utils.c
<item>set_breakpoint_sal()  :  breakpoint.c
<item>set_internalvar()  :  value.c
<item>set_longjmp_resume_breakpoint()  :  breakpoint.c
<item>skip_language_trampoline()  :  language.c
<item>step_into_function()  :  infrun.c
<item>stop_stepping()  :  infrun.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>value_from_longest()  :  value.c
<item>warning()  :  utils.c
<item>write_pc_pid()  :  regcache.c
<item>xfree()  :  utils.c
<item>__builtin___memset_chk(), __builtin___snprintf_chk(), __builtin_object_size(), __inline_memset_chk(), dcache_invalidate(), deprecated_context_hook(), exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), macosx_pid_or_tid_to_str(), macosx_print_extra_stop_info(), macosx_solib_add(), sigsetjmp(), state_change_hook(), strlen(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>fetch_inferior_event()  :  infrun.c
<item>wait_for_inferior()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>auto_solib_add  :  symfile.c
<item>breakpoints_failed  :  infrun.c
<item>breakpoints_inserted  :  infrun.c
<item>builtin_type_int  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
<item>current_target  :  target/target.c
<item>debug_infrun  :  infrun.c
<item>deprecated_context_hook  :  top.c
<item>gdb_stdlog  :  main.c
<item>gdb_stdout  :  main.c
<item>inferior_ignoring_leading_exec_events  :  infrun.c
<item>inferior_ptid  :  infcmd.c
<item>minus_one_ptid  :  infrun.c
<item>null_frame_id  :  frame.c
<item>pending_follow  :  infrun.c
<item>prev_pc  :  infrun.c
<item>saved_singlestep_ptid  :  infrun.c
<item>schedlock_on  :  infrun.c
<item>scheduler_mode  :  infrun.c
<item>signal_print  :  infrun.c
<item>signal_program  :  infrun.c
<item>signal_stop  :  infrun.c
<item>singlestep_breakpoints_inserted_p  :  infrun.c
<item>singlestep_ptid  :  infrun.c
<item>solib_finish_bp  :  infrun.c
<item>solib_step_bp  :  infrun.c
<item>state_change_hook  :  top.c
<item>step_frame_id  :  infcmd.c
<item>step_over_calls  :  infcmd.c
<item>step_range_end  :  infcmd.c
<item>step_range_start  :  infcmd.c
<item>step_resume_breakpoint  :  infrun.c
<item>step_stop_if_no_debug  :  infrun.c
<item>stepped_after_stopped_by_watchpoint  :  infrun.c
<item>stepping_over_inlined_subroutine  :  infcmd.c
<item>stepping_past_singlestep_breakpoint  :  infrun.c
<item>stepping_ranges  :  infcmd.c
<item>stop_after_trap  :  infrun.c
<item>stop_bpstat  :  infcmd.c
<item>stop_on_solib_events  :  infrun.c
<item>stop_pc  :  infcmd.c
<item>stop_print_frame  :  infrun.c
<item>stop_signal  :  infcmd.c
<item>stop_soon  :  infrun.c
<item>stop_stack_dummy  :  infcmd.c
<item>stop_step  :  infcmd.c
<item>stopped_by_random_signal  :  infcmd.c
<item>sync_execution  :  infrun.c
<item>target_dcache  :  target/target.c
<item>target_last_wait_ptid  :  infrun.c
<item>target_last_waitstatus  :  infrun.c
<item>trap_expected  :  infrun.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function hide_step_resume_breakpoint()

<p><tt>struct breakpoint* hide_step_resume_breakpoint ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_end_debugger_mode()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>step_resume_breakpoint  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function inferior_has_execd()

<p><tt>int inferior_has_execd ( int pid, char** execd_pathname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_last_target_status()  :  infrun.c
<item>ptid_get_pid()  :  infrun.c
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function inferior_has_forked()

<p><tt>int inferior_has_forked ( int pid, int* child_pid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_last_target_status()  :  infrun.c
<item>ptid_get_pid()  :  infrun.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function inferior_has_vforked()

<p><tt>int inferior_has_vforked ( int pid, int* child_pid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_last_target_status()  :  infrun.c
<item>ptid_get_pid()  :  infrun.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function init_execution_control_state()

<p><tt>void init_execution_control_state ( struct execution_control_state* ecs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_line()  :  symtab.c
<item>pid_to_ptid()  :  infrun.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>fetch_inferior_event()  :  infrun.c
<item>wait_for_inferior()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>prev_pc  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function init_wait_for_inferior()

<p><tt>void init_wait_for_inferior ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_init_inferior()  :  breakpoint.c
<item>clear_proceed_status()  :  infrun.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>attach_command()  :  infcmd.c
<item>kill_if_already_running()  :  infcmd.c
<item>start_remote()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoints_inserted  :  infrun.c
<item>minus_one_ptid  :  infrun.c
<item>pending_follow  :  infrun.c
<item>prev_pc  :  infrun.c
<item>scheduler_lock_ptid  :  infrun.c
<item>stepping_past_singlestep_breakpoint  :  infrun.c
<item>stop_signal  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function insert_step_resume_breakpoint_at_sal()

<p><tt>void insert_step_resume_breakpoint_at_sal ( struct symtab_and_line sr_sal, struct frame_id sr_id )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>adjust_current_inlined_subroutine_stack_position()  :  inlining.c
<item>inlined_function_end_of_inlined_code_p()  :  inlining.c
<item>insert_breakpoints()  :  breakpoint.c
<item>internal_error()  :  utils.c
<item>set_momentary_breakpoint()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>insert_step_resume_breakpoint_at_frame()  :  infrun.c
<item>step_into_function()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoints_inserted  :  infrun.c
<item>step_resume_breakpoint  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_restore_inferior_status()

<p><tt>struct cleanup* make_cleanup_restore_inferior_status ( struct inferior_status* inf_status )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_restore_inferior_status_cleanup()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_suppress_hook_stop()

<p><tt>struct cleanup* make_cleanup_suppress_hook_stop ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_exp_in_context()  :  parse.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_cleanup_suppress_hook_stop()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>suppress_hook_stop_p  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function normal_stop()

<p><tt>void normal_stop ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bpstat_num()  :  breakpoint.c
<item>bpstat_print()  :  breakpoint.c
<item>breakpoint_auto_delete()  :  breakpoint.c
<item>clear_inlined_subroutine_print_frames()  :  inlining.c
<item>current_inlined_subroutine_call_stack_start_pc()  :  inlining.c
<item>deprecated_update_frame_pc_hack()  :  frame.c
<item>disable_current_display()  :  printcmd.c
<item>do_displays()  :  printcmd.c
<item>find_pc_function()  :  blockframe.c
<item>find_pc_function_no_inlined()  :  blockframe.c
<item>frame_id_eq()  :  frame.c
<item>frame_pop()  :  frame.c
<item>get_current_frame()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>get_frame_type()  :  frame.c
<item>get_last_target_status()  :  infrun.c
<item>get_prev_frame()  :  frame.c
<item>get_selected_frame()  :  frame.c
<item>inlined_function_call_stack_pc()  :  inlining.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>inlined_subroutine_restore_after_dummy_call()  :  inlining.c
<item>internal_error()  :  utils.c
<item>observer_notify_normal_stop()  :  observer.c
<item>pid_to_thread_id()  :  thread.c
<item>print_stack_frame()  :  stack.c
<item>print_stop_reason()  :  infrun.c
<item>printf_filtered()  :  utils.c
<item>ptid_equal()  :  infrun.c
<item>ptid_get_pid()  :  infrun.c
<item>read_pc()  :  regcache.c
<item>regcache_cpy()  :  regcache.c
<item>remove_breakpoints()  :  breakpoint.c
<item>select_frame()  :  frame.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
<item>ui_out_print_annotation_int()  :  ui-out.c
<item>ui_out_print_annotation_string()  :  ui-out.c
<item>annotate_stopped(), catch_errors(), macosx_pid_or_tid_to_str(), maybe_create_checkpoint(), stack_changed_hook(), state_change_hook(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>attach_command()  :  infcmd.c
<item>fetch_inferior_event()  :  infrun.c
<item>proceed()  :  infrun.c
<item>resume_cleanups()  :  infrun.c
<item>rollback_stop()  :  infrun.c
<item>start_remote()  :  infrun.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>hook_stop_stub()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoints_inserted  :  infrun.c
<item>current_regcache  :  regcache.c
<item>current_target  :  target/target.c
<item>currently_inside_optimized_code  :  infrun.c
<item>deprecated_selected_frame  :  frame.c
<item>dwarf2_inform_debugging_optimized_code  :  dwarf2read.c
<item>finishing_inlined_subroutine  :  infcmd.c
<item>inferior_ptid  :  infcmd.c
<item>interpreter_p  :  main.c
<item>previous_inferior_ptid  :  infrun.c
<item>proceed_to_finish  :  infrun.c
<item>solib_finish_bp  :  infrun.c
<item>solib_step_bp  :  infrun.c
<item>stack_changed_hook  :  top.c
<item>state_change_hook  :  top.c
<item>step_frame_id  :  infcmd.c
<item>step_multi  :  infcmd.c
<item>step_start_function  :  infrun.c
<item>stop_bpstat  :  infcmd.c
<item>stop_command  :  infrun.c
<item>stop_on_solib_events  :  infrun.c
<item>stop_pc  :  infcmd.c
<item>stop_print_frame  :  infrun.c
<item>stop_registers  :  infrun.c
<item>stop_stack_dummy  :  infcmd.c
<item>stop_step  :  infcmd.c
<item>stopped_by_random_signal  :  infcmd.c
<item>uiout  :  ui-out.c
<item>auto_checkpointing
</itemize>
</descrip>

<sect1>Global Function pid_to_ptid()

<p><tt>ptid_t pid_to_ptid ( int pid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ptid_build()  :  infrun.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_regcache()  :  regcache.c
<item>detach_breakpoints()  :  breakpoint.c
<item>follow_exec()  :  infrun.c
<item>handle_inferior_event()  :  infrun.c
<item>init_execution_control_state()  :  infrun.c
<item>prepare_to_wait()  :  infrun.c
<item>reattach_breakpoints()  :  breakpoint.c
<item>registers_changed()  :  regcache.c
<item>remote_current_thread()  :  remote.c
<item>resume()  :  infrun.c
<item>thread_alive()  :  thread.c
<item>thread_id_to_pid()  :  thread.c
</itemize>
</descrip>

<sect1>Global Function proceed()

<p><tt>void proceed ( CORE_ADDR addr, enum target_signal siggnal, int step )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bpstat_should_step()  :  breakpoint.c
<item>breakpoint_here_p()  :  breakpoint.c
<item>do_hand_call_cleanups()  :  utils.c
<item>find_pc_function()  :  blockframe.c
<item>find_pc_partial_function_no_inlined()  :  blockframe.c
<item>fprintf_unfiltered()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>gdbarch_single_step_through_delay()  :  gdbarch.c
<item>gdbarch_single_step_through_delay_p()  :  gdbarch.c
<item>get_current_frame()  :  frame.c
<item>insert_breakpoints()  :  breakpoint.c
<item>normal_stop()  :  infrun.c
<item>paddr_nz()  :  utils.c
<item>prepare_to_proceed()  :  infrun.c
<item>read_pc()  :  regcache.c
<item>resume()  :  infrun.c
<item>wait_for_inferior()  :  infrun.c
<item>write_pc()  :  regcache.c
<item>annotate_starting()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>continue_command()  :  infcmd.c
<item>extended_remote_async_create_inferior()  :  remote.c
<item>extended_remote_create_inferior()  :  remote.c
<item>finish_command()  :  infcmd.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>hand_function_call()  :  infcall.c
<item>jump_command()  :  infcmd.c
<item>re_exec_1()  :  infcmd.c
<item>re_exec_once()  :  infcmd.c
<item>signal_command()  :  infcmd.c
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
<item>until_break_command()  :  breakpoint.c
<item>until_next_command()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoints_inserted  :  infrun.c
<item>current_gdbarch  :  gdbarch.c
<item>current_target  :  target/target.c
<item>debug_infrun  :  infrun.c
<item>gdb_override_async  :  target/target.c
<item>gdb_stdlog  :  main.c
<item>gdb_stdout  :  main.c
<item>prev_pc  :  infrun.c
<item>proceed_from_hand_call  :  infrun.c
<item>signal_program  :  infrun.c
<item>step_start_function  :  infrun.c
<item>stop_after_trap  :  infrun.c
<item>stop_pc  :  infcmd.c
<item>stop_signal  :  infcmd.c
<item>target_executing  :  top.c
<item>trap_expected  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function ptid_build()

<p><tt>ptid_t ptid_build ( int pid, long lwp, long tid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
<item>pid_to_ptid()  :  infrun.c
<item>record_currthread()  :  remote.c
<item>remote_async_wait()  :  remote.c
<item>remote_newthread_step()  :  remote.c
<item>remote_open_1()  :  remote.c
<item>remote_threads_info()  :  remote.c
<item>remote_wait()  :  remote.c
</itemize>
</descrip>

<sect1>Global Function ptid_equal()

<p><tt>int ptid_equal ( ptid_t ptid1, ptid_t ptid2 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>delete_thread()  :  thread.c
<item>dummy_frame_push()  :  dummy-frame.c
<item>find_thread_pid()  :  thread.c
<item>handle_inferior_event()  :  infrun.c
<item>in_thread_list()  :  thread.c
<item>info_threads_command()  :  thread.c
<item>kill_command()  :  inflow.c
<item>kill_if_already_running()  :  infcmd.c
<item>normal_stop()  :  infrun.c
<item>nosupport_runtime()  :  target/target.c
<item>pid_to_thread_id()  :  thread.c
<item>prepare_to_proceed()  :  infrun.c
<item>quit_confirm()  :  top.c
<item>quit_target()  :  top.c
<item>read_register_pid()  :  regcache.c
<item>regcache_raw_read()  :  regcache.c
<item>regcache_raw_supply()  :  regcache.c
<item>regcache_raw_write()  :  regcache.c
<item>remote_macosx_open()  :  remote.c
<item>remote_open_1()  :  remote.c
<item>remote_start_remote()  :  remote.c
<item>restore_current_thread()  :  thread.c
<item>resume()  :  infrun.c
<item>run_command_1()  :  infcmd.c
<item>switch_to_thread()  :  thread.c
<item>write_register_pid()  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function ptid_get_lwp()

<p><tt>long ptid_get_lwp ( ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
</descrip>

<sect1>Global Function ptid_get_pid()

<p><tt>int ptid_get_pid ( ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>attach_command()  :  infcmd.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>debug_to_notice_signals()  :  target/target.c
<item>debug_to_pid_to_str()  :  target/target.c
<item>debug_to_post_startup_inferior()  :  target/target.c
<item>debug_to_resume()  :  target/target.c
<item>debug_to_thread_alive()  :  target/target.c
<item>debug_to_wait()  :  target/target.c
<item>detach_breakpoints()  :  breakpoint.c
<item>handle_inferior_event()  :  infrun.c
<item>handle_sigio()  :  inflow.c
<item>inferior_has_execd()  :  infrun.c
<item>inferior_has_forked()  :  infrun.c
<item>inferior_has_vforked()  :  infrun.c
<item>insert_catchpoint()  :  breakpoint.c
<item>lookup_child_selector()  :  objc-lang.c
<item>normal_pid_to_str()  :  target/target.c
<item>normal_stop()  :  infrun.c
<item>pass_signal()  :  inflow.c
<item>pid_info()  :  infcmd.c
<item>reinit_frame_cache()  :  frame.c
<item>remote_fetch_registers()  :  remote.c
<item>remote_find_new_threads()  :  remote.c
<item>remote_get_thread_local_address()  :  remote.c
<item>remote_pid_to_str()  :  remote.c
<item>remote_resume()  :  remote.c
<item>remote_store_registers()  :  remote.c
<item>remote_thread_alive()  :  remote.c
<item>remote_threads_extra_info()  :  remote.c
<item>remote_vcont_resume()  :  remote.c
<item>remove_breakpoint()  :  breakpoint.c
<item>terminal_init_inferior()  :  inflow.c
<item>thread_alive()  :  thread.c
</itemize>
</descrip>

<sect1>Global Function ptid_get_tid()

<p><tt>long ptid_get_tid ( ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
</descrip>

<sect1>Global Function restore_inferior_status()

<p><tt>void restore_inferior_status ( struct inferior_status* inf_status )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bpstat_clear()  :  breakpoint.c
<item>flush_inlined_subroutine_frames()  :  inlining.c
<item>get_current_frame()  :  frame.c
<item>inlined_subroutine_restore_after_dummy_call()  :  inlining.c
<item>regcache_cpy()  :  regcache.c
<item>regcache_xfree()  :  regcache.c
<item>select_frame()  :  frame.c
<item>xfree()  :  utils.c
<item>catch_errors()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_restore_inferior_status_cleanup()  :  infrun.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>restore_selected_frame()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_proceeded  :  infcmd.c
<item>current_regcache  :  regcache.c
<item>current_target  :  target/target.c
<item>inferior_ptid  :  infcmd.c
<item>proceed_to_finish  :  infrun.c
<item>step_frame_id  :  infcmd.c
<item>step_over_calls  :  infcmd.c
<item>step_range_end  :  infcmd.c
<item>step_range_start  :  infcmd.c
<item>stepping_ranges  :  infcmd.c
<item>stop_after_trap  :  infrun.c
<item>stop_bpstat  :  infcmd.c
<item>stop_pc  :  infcmd.c
<item>stop_registers  :  infrun.c
<item>stop_signal  :  infcmd.c
<item>stop_soon  :  infrun.c
<item>stop_stack_dummy  :  infcmd.c
<item>stop_step  :  infcmd.c
<item>stopped_by_random_signal  :  infcmd.c
<item>trap_expected  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function restore_step_resume_breakpoint()

<p><tt>void restore_step_resume_breakpoint ( struct breakpoint* bp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_end_debugger_mode()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>step_resume_breakpoint  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function resume()

<p><tt>void resume ( int step, enum target_signal sig )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_here_p()  :  breakpoint.c
<item>discard_cleanups()  :  utils.c
<item>follow_fork()  :  infrun.c
<item>fprintf_unfiltered()  :  utils.c
<item>gdbarch_cannot_step_breakpoint()  :  gdbarch.c
<item>gdbarch_software_single_step()  :  gdbarch.c
<item>gdbarch_software_single_step_p()  :  gdbarch.c
<item>in_thread_list()  :  thread.c
<item>make_cleanup()  :  utils.c
<item>pid_to_ptid()  :  infrun.c
<item>ptid_equal()  :  infrun.c
<item>quit()  :  utils.c
<item>read_pc()  :  regcache.c
<item>remove_hw_watchpoints()  :  breakpoint.c
<item>scheduler_run_this_ptid()  :  infrun.c
<item>dcache_invalidate()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>keep_going()  :  infrun.c
<item>proceed()  :  infrun.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>default_skip_permanent_breakpoint()  :  infrun.c
<item>resume_cleanups()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoints_inserted  :  infrun.c
<item>current_gdbarch  :  gdbarch.c
<item>current_target  :  target/target.c
<item>debug_infrun  :  infrun.c
<item>gdb_stdlog  :  main.c
<item>inferior_ptid  :  infcmd.c
<item>minus_one_ptid  :  infrun.c
<item>pending_follow  :  infrun.c
<item>quit_flag  :  utils.c
<item>schedlock_on  :  infrun.c
<item>schedlock_step  :  infrun.c
<item>scheduler_lock_ptid  :  infrun.c
<item>scheduler_mode  :  infrun.c
<item>singlestep_breakpoints_inserted_p  :  infrun.c
<item>singlestep_ptid  :  infrun.c
<item>stepping_past_singlestep_breakpoint  :  infrun.c
<item>target_dcache  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function rollback_stop()

<p><tt>void rollback_stop ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>normal_stop()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>stop_print_frame  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function save_inferior_ptid()

<p><tt>struct cleanup* save_inferior_ptid ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>detach_breakpoints()  :  breakpoint.c
<item>reattach_breakpoints()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>restore_inferior_ptid()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function save_inferior_status()

<p><tt>struct inferior_status* save_inferior_status ( int restore_stack_info )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bpstat_copy()  :  breakpoint.c
<item>get_frame_id()  :  frame.c
<item>get_selected_frame()  :  frame.c
<item>inlined_subroutine_save_before_dummy_call()  :  inlining.c
<item>regcache_dup()  :  regcache.c
<item>regcache_dup_no_passthrough()  :  regcache.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_proceeded  :  infcmd.c
<item>current_regcache  :  regcache.c
<item>current_target  :  target/target.c
<item>inferior_ptid  :  infcmd.c
<item>proceed_to_finish  :  infrun.c
<item>step_frame_id  :  infcmd.c
<item>step_over_calls  :  infcmd.c
<item>step_range_end  :  infcmd.c
<item>step_range_start  :  infcmd.c
<item>stepping_ranges  :  infcmd.c
<item>stop_after_trap  :  infrun.c
<item>stop_bpstat  :  infcmd.c
<item>stop_pc  :  infcmd.c
<item>stop_registers  :  infrun.c
<item>stop_signal  :  infcmd.c
<item>stop_soon  :  infrun.c
<item>stop_stack_dummy  :  infcmd.c
<item>stop_step  :  infcmd.c
<item>stopped_by_random_signal  :  infcmd.c
<item>trap_expected  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function scheduler_lock_on_p()

<p><tt>int scheduler_lock_on_p ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>check_safe_call()  :  valops.c
<item>objc_setup_safe_print()  :  objc-lang.c
<item>print_object_command()  :  objc-lang.c
<item>switch_to_thread()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>schedlock_on  :  infrun.c
<item>schedlock_step  :  infrun.c
<item>scheduler_mode  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function scheduler_run_this_ptid()

<p><tt>void scheduler_run_this_ptid ( struct ptid this_ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
<item>resume()  :  infrun.c
<item>set_schedlock_helper()  :  infrun.c
<item>switch_to_thread()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>scheduler_lock_ptid  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function set_scheduler_locking_mode()

<p><tt>enum scheduler_locking_mode set_scheduler_locking_mode ( enum scheduler_locking_mode new_mode )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>printf_unfiltered()  :  utils.c
<item>set_schedlock_helper()  :  infrun.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_set_schedlock_mode()  :  utils.c
<item>make_cleanup_set_restore_scheduler_locking_mode()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_handcall_setup  :  infrun.c
<item>schedlock_off  :  infrun.c
<item>schedlock_on  :  infrun.c
<item>schedlock_step  :  infrun.c
<item>scheduler_mode  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function signal_pass_state()

<p><tt>int signal_pass_state ( int signo )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>signal_program  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function signal_pass_update()

<p><tt>int signal_pass_update ( int signo, int state )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>signal_program  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function signal_print_state()

<p><tt>int signal_print_state ( int signo )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>signal_print  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function signal_print_update()

<p><tt>int signal_print_update ( int signo, int state )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>signal_print  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function signal_stop_state()

<p><tt>int signal_stop_state ( int signo )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>signal_stop  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function signal_stop_update()

<p><tt>int signal_stop_update ( int signo, int state )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>signal_stop  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function start_remote()

<p><tt>void start_remote ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>init_thread_list()  :  thread.c
<item>init_wait_for_inferior()  :  infrun.c
<item>normal_stop()  :  infrun.c
<item>wait_for_inferior()  :  infrun.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remote_start_remote_dummy()  :  remote.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>stop_soon  :  infrun.c
<item>trap_expected  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function wait_for_inferior()

<p><tt>void wait_for_inferior ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>fprintf_unfiltered()  :  utils.c
<item>handle_inferior_event()  :  infrun.c
<item>init_execution_control_state()  :  infrun.c
<item>make_cleanup()  :  utils.c
<item>registers_changed()  :  regcache.c
<item>deprecated_target_wait_hook()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>proceed()  :  infrun.c
<item>start_remote()  :  infrun.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>delete_step_resume_breakpoint()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>debug_infrun  :  infrun.c
<item>deprecated_target_wait_hook  :  top.c
<item>gdb_stdlog  :  main.c
<item>inferior_ptid  :  infcmd.c
<item>overlay_cache_invalid  :  symfile.c
<item>previous_inferior_ptid  :  infrun.c
<item>step_resume_breakpoint  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function write_inferior_status_register()

<p><tt>void write_inferior_status_register ( struct inferior_status* inf_status, int regno, long val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>regcache_raw_write()  :  regcache.c
<item>register_size()  :  regcache.c
<item>store_signed_integer()  :  findvar.c
<item>__builtin_alloca()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function adjust_pc_after_break()

<p><tt>static void adjust_pc_after_break ( struct execution_control_state* ecs )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>currently_stepping()  :  infrun.c
<item>gdbarch_decr_pc_after_break()  :  gdbarch.c
<item>gdbarch_software_single_step_p()  :  gdbarch.c
<item>read_pc_pid()  :  regcache.c
<item>software_breakpoint_inserted_here_p()  :  breakpoint.c
<item>write_pc_pid()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>prev_pc  :  infrun.c
<item>singlestep_breakpoints_inserted_p  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function allocate_signal_set()

<p><tt>static int allocate_signal_set ( unsigned char** stop, unsigned char** print, unsigned char** program )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>signal_print  :  infrun.c
<item>signal_program  :  infrun.c
<item>signal_stop  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function build_infrun()

<p><tt>static void build_infrun ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>regcache_xmalloc()  :  regcache.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>stop_registers  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function context_switch()

<p><tt>static void context_switch ( struct execution_control_state* ecs )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>in_thread_list()  :  thread.c
<item>load_infrun_state()  :  thread.c
<item>save_infrun_state()  :  thread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
<item>prev_pc  :  infrun.c
<item>step_frame_id  :  infcmd.c
<item>step_range_end  :  infcmd.c
<item>step_range_start  :  infcmd.c
<item>step_resume_breakpoint  :  infrun.c
<item>stepping_ranges  :  infcmd.c
<item>trap_expected  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function currently_stepping()

<p><tt>static int currently_stepping ( struct execution_control_state* ecs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bpstat_should_step()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>adjust_pc_after_break()  :  infrun.c
<item>handle_inferior_event()  :  infrun.c
<item>keep_going()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>step_range_end  :  infcmd.c
<item>step_resume_breakpoint  :  infrun.c
<item>trap_expected  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function default_skip_permanent_breakpoint()

<p><tt>static void default_skip_permanent_breakpoint ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>resume()  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function do_cleanup_suppress_hook_stop()

<p><tt>static void do_cleanup_suppress_hook_stop ( void* arg )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_suppress_hook_stop()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>suppress_hook_stop_p  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function do_restore_inferior_status_cleanup()

<p><tt>static void do_restore_inferior_status_cleanup ( void* sts )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>restore_inferior_status()  :  infrun.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_restore_inferior_status()  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function follow_exec()

<p><tt>static void follow_exec ( int pid, char* execd_pathname )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>find_run_target()  :  target/target.c
<item>gdb_flush()  :  ui-file.c
<item>insert_breakpoints()  :  breakpoint.c
<item>pid_to_ptid()  :  infrun.c
<item>printf_unfiltered()  :  utils.c
<item>push_target()  :  target/target.c
<item>solib_create_inferior_hook()  :  solib.c
<item>symbol_file_add_main()  :  symfile.c
<item>update_breakpoints_after_exec()  :  breakpoint.c
<item>exec_file_attach()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>finishing_inlined_subroutine  :  infcmd.c
<item>gdb_stdout  :  main.c
<item>inferior_ptid  :  infcmd.c
<item>may_follow_exec  :  infrun.c
<item>step_range_end  :  infcmd.c
<item>step_range_start  :  infcmd.c
<item>step_resume_breakpoint  :  infrun.c
<item>stepping_over_inlined_subroutine  :  infcmd.c
<item>stepping_ranges  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function follow_fork()

<p><tt>static int follow_fork ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>resume()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>follow_fork_mode_child  :  infrun.c
<item>follow_fork_mode_string  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function handle_command()

<p><tt>static void handle_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>make_cleanup_freeargv()  :  utils.c
<item>nomem()  :  utils.c
<item>printf_unfiltered()  :  utils.c
<item>query()  :  utils.c
<item>sig_print_header()  :  infrun.c
<item>sig_print_info()  :  infrun.c
<item>__builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memset_chk(), atoi(), buildargv(), error_no_arg(), isdigit(), strlen(), strncmp(), target_signal_from_command(), target_signal_from_name(), target_signal_to_name()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>xdb_handle_command()  :  infrun.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>gdb_stdout  :  main.c
<item>inferior_ptid  :  infcmd.c
<item>signal_print  :  infrun.c
<item>signal_program  :  infrun.c
<item>signal_stop  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function hook_stop_stub()

<p><tt>static int hook_stop_stub ( void* cmd )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>execute_cmd_pre_hook()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>normal_stop()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>suppress_hook_stop_p  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function insert_step_resume_breakpoint_at_frame()

<p><tt>static void insert_step_resume_breakpoint_at_frame ( struct frame_info* return_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_overlay()  :  symfile.c
<item>fprintf_unfiltered()  :  utils.c
<item>gdbarch_addr_bits_remove()  :  gdbarch.c
<item>get_frame_id()  :  frame.c
<item>get_frame_pc()  :  frame.c
<item>init_sal()  :  symtab.c
<item>insert_step_resume_breakpoint_at_sal()  :  infrun.c
<item>paddr_nz()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>debug_infrun  :  infrun.c
<item>gdb_stdlog  :  main.c
<item>step_frame_id  :  infcmd.c
<item>stepping_over_inlined_subroutine  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function keep_going()

<p><tt>static void keep_going ( struct execution_control_state* ecs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>currently_stepping()  :  infrun.c
<item>do_hand_call_cleanups()  :  utils.c
<item>insert_breakpoints()  :  breakpoint.c
<item>prepare_to_wait()  :  infrun.c
<item>read_pc()  :  regcache.c
<item>resume()  :  infrun.c
<item>stop_stepping()  :  infrun.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>step_into_function()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoints_failed  :  infrun.c
<item>breakpoints_inserted  :  infrun.c
<item>prev_pc  :  infrun.c
<item>proceed_from_hand_call  :  infrun.c
<item>signal_program  :  infrun.c
<item>stop_signal  :  infcmd.c
<item>trap_expected  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function prepare_to_proceed()

<p><tt>static int prepare_to_proceed ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_here_p()  :  breakpoint.c
<item>flush_cached_frames()  :  frame.c
<item>get_current_frame()  :  frame.c
<item>get_last_target_status()  :  infrun.c
<item>inlined_function_call_stack_pc()  :  inlining.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>ptid_equal()  :  infrun.c
<item>read_pc()  :  regcache.c
<item>read_pc_pid()  :  regcache.c
<item>registers_changed()  :  regcache.c
<item>select_frame()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>proceed()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
<item>minus_one_ptid  :  infrun.c
<item>proceed_from_hand_call  :  infrun.c
<item>stop_pc  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function prepare_to_wait()

<p><tt>static void prepare_to_wait ( struct execution_control_state* ecs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>pid_to_ptid()  :  infrun.c
<item>registers_changed()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>keep_going()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_infrun  :  infrun.c
<item>gdb_stdlog  :  main.c
<item>overlay_cache_invalid  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function print_stop_reason()

<p><tt>static void print_stop_reason ( enum inferior_stop_reason stop_reason, int stop_info )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>internal_error()  :  utils.c
<item>make_cleanup_ui_out_notify_begin_end()  :  ui-out.c
<item>ui_out_field_fmt()  :  ui-out.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
<item>ui_out_print_annotation_string()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>annotate_exited(), annotate_signal(), annotate_signal_name(), annotate_signal_name_end(), annotate_signal_string(), annotate_signal_string_end(), annotate_signalled(), async_reason_lookup(), target_signal_to_name(), target_signal_to_string()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>normal_stop()  :  infrun.c
<item>step_into_function()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>finishing_inlined_subroutine  :  infcmd.c
<item>signal_stop  :  infrun.c
<item>step_multi  :  infcmd.c
<item>stop_step  :  infcmd.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function restore_inferior_ptid()

<p><tt>static void restore_inferior_ptid ( void* arg )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>save_inferior_ptid()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function restore_selected_frame()

<p><tt>static int restore_selected_frame ( void* args )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_find_by_id()  :  frame.c
<item>select_frame()  :  frame.c
<item>warning()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>restore_inferior_status()  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function resume_cleanups()

<p><tt>static void resume_cleanups ( void* ignore )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>normal_stop()  :  infrun.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>resume()  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function set_minimal_signal_handling()

<p><tt>static void set_minimal_signal_handling ( const char* args, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>full_signal_print  :  infrun.c
<item>full_signal_program  :  infrun.c
<item>full_signal_stop  :  infrun.c
<item>minimal_signal_handling  :  infrun.c
<item>minimal_signal_print  :  infrun.c
<item>minimal_signal_program  :  infrun.c
<item>minimal_signal_stop  :  infrun.c
<item>signal_print  :  infrun.c
<item>signal_program  :  infrun.c
<item>signal_stop  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function set_schedlock_func()

<p><tt>static void set_schedlock_func ( const char* args, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>set_schedlock_helper()  :  infrun.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function set_schedlock_helper()

<p><tt>static void set_schedlock_helper ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>scheduler_run_this_ptid()  :  infrun.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_schedlock_func()  :  infrun.c
<item>set_scheduler_locking_mode()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>inferior_ptid  :  infcmd.c
<item>minus_one_ptid  :  infrun.c
<item>schedlock_off  :  infrun.c
<item>schedlock_on  :  infrun.c
<item>scheduler_mode  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function show_debug_infrun()

<p><tt>static void show_debug_infrun ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function show_follow_fork_mode_string()

<p><tt>static void show_follow_fork_mode_string ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function show_scheduler_mode()

<p><tt>static void show_scheduler_mode ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function show_step_stop_if_no_debug()

<p><tt>static void show_step_stop_if_no_debug ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function show_stop_on_solib_events()

<p><tt>static void show_stop_on_solib_events ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function sig_print_header()

<p><tt>static void sig_print_header ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>printf_filtered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_command()  :  infrun.c
<item>signals_info()  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function sig_print_info()

<p><tt>static void sig_print_info ( enum target_signal oursig )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>printf_filtered()  :  utils.c
<item>strlen(), target_signal_to_name(), target_signal_to_string()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_command()  :  infrun.c
<item>signals_info()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>signal_print  :  infrun.c
<item>signal_program  :  infrun.c
<item>signal_stop  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function signals_info()

<p><tt>static void signals_info ( const char* signum_exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>parse_and_eval_long()  :  eval.c
<item>printf_filtered()  :  utils.c
<item>quit()  :  utils.c
<item>sig_print_header()  :  infrun.c
<item>sig_print_info()  :  infrun.c
<item>target_signal_from_command(), target_signal_from_name()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Local Function step_into_function()

<p><tt>static void step_into_function ( struct execution_control_state* ecs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_line()  :  symtab.c
<item>find_pc_overlay()  :  symfile.c
<item>find_pc_symtab()  :  symtab.c
<item>gdbarch_adjust_breakpoint_address()  :  gdbarch.c
<item>gdbarch_adjust_breakpoint_address_p()  :  gdbarch.c
<item>gdbarch_skip_prologue()  :  gdbarch.c
<item>init_sal()  :  symtab.c
<item>insert_step_resume_breakpoint_at_sal()  :  infrun.c
<item>keep_going()  :  infrun.c
<item>print_stop_reason()  :  infrun.c
<item>skip_language_trampoline()  :  language.c
<item>stop_stepping()  :  infrun.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>null_frame_id  :  frame.c
<item>step_range_end  :  infcmd.c
<item>step_range_start  :  infcmd.c
<item>stop_pc  :  infcmd.c
<item>stop_step  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function stop_stepping()

<p><tt>static void stop_stepping ( struct execution_control_state* ecs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>keep_going()  :  infrun.c
<item>step_into_function()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_infrun  :  infrun.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function xdb_handle_command()

<p><tt>static void xdb_handle_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infrun.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>handle_command()  :  infrun.c
<item>make_cleanup_freeargv()  :  utils.c
<item>nomem()  :  utils.c
<item>printf_filtered()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin___snprintf_chk(), __builtin_object_size(), __inline_memset_chk(), buildargv(), strcmp(), strlen(), target_signal_from_name()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infrun()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>signal_print  :  infrun.c
<item>signal_program  :  infrun.c
<item>signal_stop  :  infrun.c
</itemize>
</descrip>

</article>
