{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF language.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File language.c\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Refs Func:\cell basic_lookup_symbol_nonlocal()\cell symtab.c\cell\row
\cell basic_lookup_transparent_type()\cell symtab.c\cell\row
\cell default_word_break_characters()\cell language.c\cell\row
\cell null_post_parser()\cell parse.c\cell\row
\cell unk_lang_class_name()\cell language.c\cell\row
\cell unk_lang_create_fundamental_type()\cell language.c\cell\row
\cell unk_lang_demangle()\cell language.c\cell\row
\cell unk_lang_emit_char()\cell language.c\cell\row
\cell unk_lang_error()\cell language.c\cell\row
\cell unk_lang_parser()\cell language.c\cell\row
\cell unk_lang_print_type()\cell language.c\cell\row
\cell unk_lang_printchar()\cell language.c\cell\row
\cell unk_lang_printstr()\cell language.c\cell\row
\cell unk_lang_trampoline()\cell language.c\cell\row
\cell unk_lang_val_print()\cell language.c\cell\row
\cell unk_lang_value_print()\cell language.c\cell\row
\cell unknown_language_arch_info()\cell language.c\cell\row
\cell value_of_this()\cell valops.c\cell\row
Refs Var:\cell exp_descriptor_standard\cell parse.c\cell\row
\cell unk_op_print_tab\cell language.c\cell\row
\cell unknown_language_defn\cell language.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <ctype.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "parser-defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "jv-lang.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/demangle.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DEFAULT_ALLOCSIZE 4\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct language_gdbarch\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct language_gdbarch}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct language_arch_info arch_info[nr_languages];}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable range_mode\par}
{\s5\f1\fs20\ql\sb50\sa50 enum range_mode range_mode\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell set_range_command()\cell language.c\cell\row
\cell set_range_str()\cell language.c\cell\row
\cell set_type_range_case()\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable range_check\par}
{\s5\f1\fs20\ql\sb50\sa50 enum range_check range_check\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell parse_number()\cell f-exp.c\cell\row
\cell range_error()\cell language.c\cell\row
\cell set_range_command()\cell language.c\cell\row
\cell set_range_str()\cell language.c\cell\row
\cell set_type_range_case()\cell language.c\cell\row
\cell show_range_command()\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable type_mode\par}
{\s5\f1\fs20\ql\sb50\sa50 enum type_mode type_mode\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell set_type_command()\cell language.c\cell\row
\cell set_type_range_case()\cell language.c\cell\row
\cell set_type_str()\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable type_check\par}
{\s5\f1\fs20\ql\sb50\sa50 enum type_check type_check\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell set_type_command()\cell language.c\cell\row
\cell set_type_range_case()\cell language.c\cell\row
\cell set_type_str()\cell language.c\cell\row
\cell show_type_command()\cell language.c\cell\row
\cell type_error()\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable case_mode\par}
{\s5\f1\fs20\ql\sb50\sa50 enum case_mode case_mode\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell set_case_command()\cell language.c\cell\row
\cell set_case_str()\cell language.c\cell\row
\cell set_type_range_case()\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable case_sensitivity\par}
{\s5\f1\fs20\ql\sb50\sa50 enum case_sensitivity case_sensitivity\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell lookup_symbol()\cell symtab.c\cell\row
\cell lookup_symbol_all()\cell symtab.c\cell\row
\cell set_case_command()\cell language.c\cell\row
\cell set_case_str()\cell language.c\cell\row
\cell set_type_range_case()\cell language.c\cell\row
\cell show_case_command()\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable current_language\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct language_defn* current_language\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell ada_print_scalar()\cell ada-valprint.c\cell\row
\cell ada_print_subexp()\cell ada-lang.c\cell\row
\cell address_info()\cell printcmd.c\cell\row
\cell allocate_repeat_value()\cell value.c\cell\row
\cell breakpoint_re_set_all()\cell breakpoint.c\cell\row
\cell c_lex()\cell c-exp.c\cell\row
\cell c_parse()\cell c-exp.c\cell\row
\cell c_printchar()\cell c-lang.c\cell\row
\cell c_printstr()\cell c-lang.c\cell\row
\cell c_type_print_args()\cell c-typeprint.c\cell\row
\cell c_type_print_varspec_suffix()\cell c-typeprint.c\cell\row
\cell c_val_print()\cell c-valprint.c\cell\row
\cell coerce_array()\cell value.c\cell\row
\cell complete_line()\cell completer.c\cell\row
\cell cp_print_value_fields()\cell cp-valprint.c\cell\row
\cell cp_type_print_method_args()\cell c-typeprint.c\cell\row
\cell create_string_type()\cell gdbtypes.c\cell\row
\cell evaluate_subexp_with_coercion()\cell eval.c\cell\row
\cell execute_command()\cell top.c\cell\row
\cell f_lex()\cell f-exp.c\cell\row
\cell f_printchar()\cell f-lang.c\cell\row
\cell f_printstr()\cell f-lang.c\cell\row
\cell f_val_print()\cell f-valprint.c\cell\row
\cell gdb_init()\cell top.c\cell\row
\cell java_val_print()\cell jv-valprint.c\cell\row
\cell lang_bool_type()\cell language.c\cell\row
\cell language_info()\cell language.c\cell\row
\cell language_lookup_primitive_type_by_name()\cell language.c\cell\row
\cell language_search_unquoted_string()\cell symtab.c\cell\row
\cell location_completer()\cell completer.c\cell\row
\cell lookup_fundamental_type()\cell gdbtypes.c\cell\row
\cell lookup_symbol()\cell symtab.c\cell\row
\cell lookup_symbol_all()\cell symtab.c\cell\row
\cell lookup_symbol_aux()\cell symtab.c\cell\row
\cell lookup_symbol_in_language()\cell ada-lang.c\cell\row
\cell lookup_transparent_type()\cell symtab.c\cell\row
\cell lookup_typename()\cell gdbtypes.c\cell\row
\cell m2_printchar()\cell m2-lang.c\cell\row
\cell m2_printstr()\cell m2-lang.c\cell\row
\cell maintenance_demangle()\cell maint.c\cell\row
\cell name_lookup()\cell ada-exp.c\cell\row
\cell objc_lex()\cell objc-exp.c\cell\row
\cell op_string()\cell expprint.c\cell\row
\cell parse_exp_in_context()\cell parse.c\cell\row
\cell pascal_lex()\cell p-exp.c\cell\row
\cell pascal_val_print()\cell p-valprint.c\cell\row
\cell print_char_chars_with_byte_order()\cell valprint.c\cell\row
\cell print_subexp_standard()\cell expprint.c\cell\row
\cell print_symbol()\cell symmisc.c\cell\row
\cell print_type_scalar()\cell typeprint.c\cell\row
\cell resolve_pending_breakpoint()\cell breakpoint.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell set_initial_language()\cell symfile.c\cell\row
\cell set_lang_str()\cell language.c\cell\row
\cell set_language()\cell language.c\cell\row
\cell set_language_command()\cell language.c\cell\row
\cell set_raw_breakpoint()\cell breakpoint.c\cell\row
\cell set_raw_tracepoint()\cell tracepoint.c\cell\row
\cell set_type_range_case()\cell language.c\cell\row
\cell show_case_command()\cell language.c\cell\row
\cell show_language_command()\cell language.c\cell\row
\cell show_range_command()\cell language.c\cell\row
\cell show_type_command()\cell language.c\cell\row
\cell skip_quoted_chars()\cell completer.c\cell\row
\cell type_char()\cell ada-exp.c\cell\row
\cell type_print()\cell typeprint.c\cell\row
\cell type_system_address()\cell ada-exp.c\cell\row
\cell typedef_print()\cell typeprint.c\cell\row
\cell unpack_long()\cell value.c\cell\row
\cell val_print()\cell valprint.c\cell\row
\cell val_print_string()\cell valprint.c\cell\row
\cell value_arg_coerce()\cell infcall.c\cell\row
\cell value_array()\cell valops.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_from_string()\cell value.c\cell\row
\cell value_of_this()\cell valops.c\cell\row
\cell value_print()\cell valprint.c\cell\row
\cell value_string()\cell valops.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable expected_language\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct language_defn* expected_language\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell execute_command()\cell top.c\cell\row
\cell gdb_init()\cell top.c\cell\row
\cell language_info()\cell language.c\cell\row
\cell set_initial_language()\cell symfile.c\cell\row
\cell set_language_command()\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable language_mode\par}
{\s5\f1\fs20\ql\sb50\sa50 enum language_mode language_mode\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell execute_command()\cell top.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell set_lang_str()\cell language.c\cell\row
\cell set_language_command()\cell language.c\cell\row
\cell show_language_command()\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable unknown_language_defn\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct language_defn unknown_language_defn\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell language.c\cell\cell\row
Used in:\cell language.c\cell\cell\row
\cell _initialize_language()\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable lang_frame_mismatch_warn\par}
{\s5\f1\fs20\ql\sb50\sa50 char lang_frame_mismatch_warn[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell language.c\cell\cell\row
\cell top.c\cell\cell\row
Used in:\cell execute_command()\cell top.c\cell\row
\cell show_language_command()\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable auto_language_defn\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct language_defn auto_language_defn\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell language.c\cell\cell\row
Used in:\cell _initialize_language()\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable local_language_defn\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct language_defn local_language_defn\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell language.c\cell\cell\row
Used in:\cell _initialize_language()\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable languages\par}
{\s5\f1\fs20\ql\sb50\sa50 static const struct language_defn** languages\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell add_language()\cell\cell\row
\cell language_def()\cell\cell\row
\cell language_enum()\cell\cell\row
\cell language_gdbarch_post_init()\cell\cell\row
\cell language_str()\cell\cell\row
\cell set_language()\cell\cell\row
\cell set_language_command()\cell\cell\row
\cell skip_language_trampoline()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable languages_size\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned languages_size\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell add_language()\cell\cell\row
\cell language_def()\cell\cell\row
\cell language_enum()\cell\cell\row
\cell language_gdbarch_post_init()\cell\cell\row
\cell language_str()\cell\cell\row
\cell set_language()\cell\cell\row
\cell set_language_command()\cell\cell\row
\cell skip_language_trampoline()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable languages_allocsize\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned languages_allocsize\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell add_language()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable language\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* language\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_language()\cell\cell\row
\cell language_info()\cell\cell\row
\cell set_lang_str()\cell\cell\row
\cell set_language_command()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable type\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* type\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_language()\cell\cell\row
\cell language_info()\cell\cell\row
\cell set_type_command()\cell\cell\row
\cell set_type_str()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable range\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* range\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_language()\cell\cell\row
\cell language_info()\cell\cell\row
\cell set_range_command()\cell\cell\row
\cell set_range_str()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable case_sensitive\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* case_sensitive\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_language()\cell\cell\row
\cell language_info()\cell\cell\row
\cell set_case_command()\cell\cell\row
\cell set_case_str()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable unk_op_print_tab\par}
{\s5\f1\fs20\ql\sb50\sa50 static const struct op_print unk_op_print_tab[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell language.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable language_gdbarch_data\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct gdbarch_data* language_gdbarch_data\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_language()\cell\cell\row
\cell language_lookup_primitive_type_by_name()\cell\cell\row
\cell language_string_char_type()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_language ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.c\cell\cell\row
Calls: \cell add_language()\cell language.c\cell\row
\cell gdbarch_data_register_post_init()\cell gdbarch.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell set_language()\cell language.c\cell\row
\cell  add_alias_cmd(), add_prefix_cmd(), add_setshow_string_noescape_cmd(), strlen()\cell\cell\row
Refs Func:\cell language_gdbarch_post_init()\cell language.c\cell\row
\cell set_case_command()\cell language.c\cell\row
\cell set_check()\cell language.c\cell\row
\cell set_language_command()\cell language.c\cell\row
\cell set_range_command()\cell language.c\cell\row
\cell set_type_command()\cell language.c\cell\row
\cell show_case_command()\cell language.c\cell\row
\cell show_check()\cell language.c\cell\row
\cell show_language_command()\cell language.c\cell\row
\cell show_range_command()\cell language.c\cell\row
\cell show_type_command()\cell language.c\cell\row
Refs Var:\cell auto_language_defn\cell language.c\cell\row
\cell case_sensitive\cell language.c\cell\row
\cell language\cell language.c\cell\row
\cell language_gdbarch_data\cell language.c\cell\row
\cell local_language_defn\cell language.c\cell\row
\cell range\cell language.c\cell\row
\cell type\cell language.c\cell\row
\cell unknown_language_defn\cell language.c\cell\row
\cell  setchecklist, setlist, showchecklist, showlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function add_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 void add_language ( const struct language_defn* lang )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
Called by:\cell _initialize_ada_language()\cell ada-lang.c\cell\row
\cell _initialize_c_language()\cell c-lang.c\cell\row
\cell _initialize_f_language()\cell f-lang.c\cell\row
\cell _initialize_java_language()\cell jv-lang.c\cell\row
\cell _initialize_language()\cell language.c\cell\row
\cell _initialize_m2_language()\cell m2-lang.c\cell\row
\cell _initialize_objc_language()\cell objc-lang.c\cell\row
\cell _initialize_pascal_language()\cell p-lang.c\cell\row
\cell _initialize_scheme_language()\cell scm-lang.c\cell\row
Refs Var:\cell gdb_stderr\cell main.c\cell\row
\cell languages\cell language.c\cell\row
\cell languages_allocsize\cell language.c\cell\row
\cell languages_size\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function default_word_break_characters()\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* default_word_break_characters ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.h\cell\cell\row
Called by:\cell init_main()\cell top.c\cell\row
Used in:\cell c-lang.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function lang_bool_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* lang_bool_type ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.h\cell\cell\row
Calls: \cell lookup_symbol()\cell symtab.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell value_in()\cell valarith.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
Refs Var:\cell builtin_type_bool\cell gdbtypes.c\cell\row
\cell builtin_type_f_logical_s2\cell f-lang.c\cell\row
\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell current_language\cell language.c\cell\row
\cell java_boolean_type\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function language_class_name_from_physname()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* language_class_name_from_physname ( const struct language_defn* current_language, const char* physname )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.h\cell\cell\row
Called by:\cell determine_class_name()\cell dwarf2read.c\cell\row
\cell guess_structure_name()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function language_def()\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct language_defn* language_def ( enum language lang )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.h\cell\cell\row
Called by:\cell fprintf_symbol_filtered()\cell utils.c\cell\row
\cell set_cu_language()\cell dwarf2read.c\cell\row
Refs Var:\cell languages\cell language.c\cell\row
\cell languages_size\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function language_demangle()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* language_demangle ( const struct language_defn* current_language, const char* mangled, int options )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.h\cell\cell\row
Called by:\cell fprintf_symbol_filtered()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function language_enum()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum language language_enum ( char* str )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.h\cell\cell\row
Calls: \cell  strcmp()\cell\cell\row
Called by:\cell set_ext_lang_command()\cell symfile.c\cell\row
Refs Var:\cell languages\cell language.c\cell\row
\cell languages_size\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function language_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 void language_info ( int quietly )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.h\cell\cell\row
Calls: \cell printf_unfiltered()\cell utils.c\cell\row
\cell show_case_command()\cell language.c\cell\row
\cell show_language_command()\cell language.c\cell\row
\cell show_range_command()\cell language.c\cell\row
\cell show_type_command()\cell language.c\cell\row
Called by:\cell execute_command()\cell top.c\cell\row
Refs Var:\cell case_sensitive\cell language.c\cell\row
\cell current_language\cell language.c\cell\row
\cell expected_language\cell language.c\cell\row
\cell language\cell language.c\cell\row
\cell range\cell language.c\cell\row
\cell type\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function language_lookup_primitive_type_by_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* language_lookup_primitive_type_by_name ( const struct language_defn* la, struct gdbarch* gdbarch, const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.h\cell\cell\row
Calls: \cell new_gdbarch_data()\cell gdbarch.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell c_lex()\cell c-exp.c\cell\row
\cell f_lex()\cell f-exp.c\cell\row
\cell lookup_typename()\cell gdbtypes.c\cell\row
\cell name_lookup()\cell ada-exp.c\cell\row
\cell objc_lex()\cell objc-exp.c\cell\row
\cell pascal_lex()\cell p-exp.c\cell\row
\cell type_system_address()\cell ada-exp.c\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\cell language_gdbarch_data\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function language_str()\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* language_str ( enum language lang )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.h\cell\cell\row
Called by:\cell dump_symtab_1()\cell symmisc.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell info_ext_lang_command()\cell symfile.c\cell\row
\cell source_info()\cell source.c\cell\row
Refs Var:\cell languages\cell language.c\cell\row
\cell languages_size\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function language_string_char_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* language_string_char_type ( const struct language_defn* la, struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.h\cell\cell\row
Calls: \cell new_gdbarch_data()\cell gdbarch.c\cell\row
Called by:\cell create_string_type()\cell gdbtypes.c\cell\row
\cell type_char()\cell ada-exp.c\cell\row
\cell value_from_string()\cell value.c\cell\row
Refs Var:\cell language_gdbarch_data\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function make_cleanup_restore_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct cleanup* make_cleanup_restore_language ( enum language new_lang )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.h\cell\cell\row
Calls: \cell make_cleanup()\cell utils.c\cell\row
\cell set_language()\cell language.c\cell\row
Called by:\cell find_methods()\cell linespec.c\cell\row
Refs Func:\cell do_set_language()\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function range_error()\par}
{\s5\f1\fs20\ql\sb50\sa50 void range_error ( const char* string, ... )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.h\cell\cell\row
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell verror()\cell utils.c\cell\row
\cell vfprintf_filtered()\cell utils.c\cell\row
\cell vwarning()\cell utils.c\cell\row
\cell  __builtin_va_end(), __builtin_va_start()\cell\cell\row
Called by:\cell parse_number()\cell f-exp.c\cell\row
Refs Var:\cell gdb_stderr\cell main.c\cell\row
\cell range_check\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum language set_language ( enum language lang )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.h\cell\cell\row
Calls: \cell set_lang_str()\cell language.c\cell\row
\cell set_type_range_case()\cell language.c\cell\row
Called by:\cell _initialize_language()\cell language.c\cell\row
\cell breakpoint_re_set_all()\cell breakpoint.c\cell\row
\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell do_restore_lang_radix_cleanup()\cell breakpoint.c\cell\row
\cell do_set_language()\cell language.c\cell\row
\cell dump_symtab()\cell symmisc.c\cell\row
\cell gdb_init()\cell top.c\cell\row
\cell lookup_symbol_in_language()\cell ada-lang.c\cell\row
\cell make_cleanup_restore_language()\cell language.c\cell\row
\cell resolve_pending_breakpoint()\cell breakpoint.c\cell\row
\cell restore_language()\cell ada-lang.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell set_initial_language()\cell symfile.c\cell\row
\cell set_language_command()\cell language.c\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\cell languages\cell language.c\cell\row
\cell languages_size\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function skip_language_trampoline()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR skip_language_trampoline ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.h\cell\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
\cell step_into_function()\cell infrun.c\cell\row
Refs Var:\cell languages\cell language.c\cell\row
\cell languages_size\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function type_error()\par}
{\s5\f1\fs20\ql\sb50\sa50 void type_error ( const char* string, ... )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.h\cell\cell\row
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell verror()\cell utils.c\cell\row
\cell vfprintf_filtered()\cell utils.c\cell\row
\cell vwarning()\cell utils.c\cell\row
\cell  __builtin_va_end(), __builtin_va_start()\cell\cell\row
Refs Var:\cell gdb_stderr\cell main.c\cell\row
\cell type_check\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_true()\par}
{\s5\f1\fs20\ql\sb50\sa50 int value_true ( struct value* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.h\cell\cell\row
Calls: \cell value_logical_not()\cell valarith.c\cell\row
Called by:\cell breakpoint_cond_eval()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_set_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_set_language ( void* in_language )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell set_language()\cell language.c\cell\row
Used in:\cell make_cleanup_restore_language()\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function language_gdbarch_post_init()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void* language_gdbarch_post_init ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_obstack_zalloc()\cell gdbarch.c\cell\row
Used in:\cell _initialize_language()\cell language.c\cell\row
Refs Var:\cell languages\cell language.c\cell\row
\cell languages_size\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_case_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_case_command ( const char* ignore, int from_tty, struct cmd_list_element* c )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell set_case_str()\cell language.c\cell\row
\cell set_type_range_case()\cell language.c\cell\row
\cell show_case_command()\cell language.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Used in:\cell _initialize_language()\cell language.c\cell\row
Refs Var:\cell case_mode\cell language.c\cell\row
\cell case_sensitive\cell language.c\cell\row
\cell case_sensitivity\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_case_str()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_case_str ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  concat()\cell\cell\row
Called by:\cell set_case_command()\cell language.c\cell\row
\cell set_type_range_case()\cell language.c\cell\row
Refs Var:\cell case_mode\cell language.c\cell\row
\cell case_sensitive\cell language.c\cell\row
\cell case_sensitivity\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_check()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_check ( const char* ignore, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.c\cell\cell\row
Calls: \cell printf_unfiltered()\cell utils.c\cell\row
\cell  help_list()\cell\cell\row
Used in:\cell _initialize_language()\cell language.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\cell  setchecklist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_lang_str()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_lang_str ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.c\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
\cell  concat()\cell\cell\row
Called by:\cell set_language()\cell language.c\cell\row
\cell set_language_command()\cell language.c\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\cell language\cell language.c\cell\row
\cell language_mode\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_language_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_language_command ( const char* ignore, int from_tty, struct cmd_list_element* c )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
\cell get_frame_language()\cell stack.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell set_lang_str()\cell language.c\cell\row
\cell set_language()\cell language.c\cell\row
\cell set_type_range_case()\cell language.c\cell\row
\cell  strcmp(), strlen(), toupper()\cell\cell\row
Used in:\cell _initialize_language()\cell language.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\cell expected_language\cell language.c\cell\row
\cell language\cell language.c\cell\row
\cell language_mode\cell language.c\cell\row
\cell languages\cell language.c\cell\row
\cell languages_size\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_range_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_range_command ( const char* ignore, int from_tty, struct cmd_list_element* c )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell set_range_str()\cell language.c\cell\row
\cell set_type_range_case()\cell language.c\cell\row
\cell show_range_command()\cell language.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Used in:\cell _initialize_language()\cell language.c\cell\row
Refs Var:\cell range\cell language.c\cell\row
\cell range_check\cell language.c\cell\row
\cell range_mode\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_range_str()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_range_str ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  concat()\cell\cell\row
Called by:\cell set_range_command()\cell language.c\cell\row
\cell set_type_range_case()\cell language.c\cell\row
Refs Var:\cell range\cell language.c\cell\row
\cell range_check\cell language.c\cell\row
\cell range_mode\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_type_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_type_command ( const char* ignore, int from_tty, struct cmd_list_element* c )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell set_type_range_case()\cell language.c\cell\row
\cell set_type_str()\cell language.c\cell\row
\cell show_type_command()\cell language.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Used in:\cell _initialize_language()\cell language.c\cell\row
Refs Var:\cell type\cell language.c\cell\row
\cell type_check\cell language.c\cell\row
\cell type_mode\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_type_range_case()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_type_range_case ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.c\cell\cell\row
Calls: \cell set_case_str()\cell language.c\cell\row
\cell set_range_str()\cell language.c\cell\row
\cell set_type_str()\cell language.c\cell\row
Called by:\cell set_case_command()\cell language.c\cell\row
\cell set_language()\cell language.c\cell\row
\cell set_language_command()\cell language.c\cell\row
\cell set_range_command()\cell language.c\cell\row
\cell set_type_command()\cell language.c\cell\row
Refs Var:\cell case_mode\cell language.c\cell\row
\cell case_sensitivity\cell language.c\cell\row
\cell current_language\cell language.c\cell\row
\cell range_check\cell language.c\cell\row
\cell range_mode\cell language.c\cell\row
\cell type_check\cell language.c\cell\row
\cell type_mode\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_type_str()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_type_str ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  concat()\cell\cell\row
Called by:\cell set_type_command()\cell language.c\cell\row
\cell set_type_range_case()\cell language.c\cell\row
Refs Var:\cell type\cell language.c\cell\row
\cell type_check\cell language.c\cell\row
\cell type_mode\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_case_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_case_command ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell printf_unfiltered()\cell utils.c\cell\row
\cell  deprecated_show_value_hack()\cell\cell\row
Called by:\cell language_info()\cell language.c\cell\row
\cell set_case_command()\cell language.c\cell\row
Used in:\cell _initialize_language()\cell language.c\cell\row
Refs Var:\cell case_sensitivity\cell language.c\cell\row
\cell current_language\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_check()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_check ( const char* ignore, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.c\cell\cell\row
Calls: \cell  cmd_show_list()\cell\cell\row
Used in:\cell _initialize_language()\cell language.c\cell\row
Refs Var:\cell  showchecklist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_language_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_language_command ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell get_frame_language()\cell stack.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell  deprecated_show_value_hack()\cell\cell\row
Called by:\cell language_info()\cell language.c\cell\row
Used in:\cell _initialize_language()\cell language.c\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\cell lang_frame_mismatch_warn\cell language.c\cell\row
\cell language_mode\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_range_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_range_command ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell printf_unfiltered()\cell utils.c\cell\row
\cell  deprecated_show_value_hack()\cell\cell\row
Called by:\cell language_info()\cell language.c\cell\row
\cell set_range_command()\cell language.c\cell\row
Used in:\cell _initialize_language()\cell language.c\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\cell range_check\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_type_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_type_command ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell printf_unfiltered()\cell utils.c\cell\row
\cell  deprecated_show_value_hack()\cell\cell\row
Called by:\cell language_info()\cell language.c\cell\row
\cell set_type_command()\cell language.c\cell\row
Used in:\cell _initialize_language()\cell language.c\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\cell type_check\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unk_lang_class_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* unk_lang_class_name ( const char* mangled )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell language.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unk_lang_create_fundamental_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* unk_lang_create_fundamental_type ( struct objfile* objfile, int unktypeid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Used in:\cell language.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unk_lang_demangle()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* unk_lang_demangle ( const char* mangled, int options )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  cplus_demangle()\cell\cell\row
Used in:\cell language.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unk_lang_emit_char()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void unk_lang_emit_char ( int c, struct ui_file* stream, int quoter )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Used in:\cell language.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unk_lang_error()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void unk_lang_error ( const char* msg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Used in:\cell language.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unk_lang_parser()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int unk_lang_parser ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.c\cell\cell\row
Used in:\cell language.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unk_lang_print_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void unk_lang_print_type ( struct type* type, const char* varstring, struct ui_file* stream, int show, int level )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Used in:\cell language.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unk_lang_printchar()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void unk_lang_printchar ( int c, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Used in:\cell language.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unk_lang_printstr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void unk_lang_printstr ( struct ui_file* stream, const gdb_byte* string, unsigned int length, int width, int force_ellipses )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
Used in:\cell language.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unk_lang_trampoline()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR unk_lang_trampoline ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.c\cell\cell\row
Used in:\cell language.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unk_lang_val_print()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int unk_lang_val_print ( struct type* type, const gdb_byte* valaddr, int embedded_offset, CORE_ADDR address, struct ui_file* stream, int format, int deref_ref, int recurse, enum val_prettyprint pretty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
Used in:\cell language.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unk_lang_value_print()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int unk_lang_value_print ( struct value* val, struct ui_file* stream, int format, enum val_prettyprint pretty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Used in:\cell language.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unknown_language_arch_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void unknown_language_arch_info ( struct gdbarch* gdbarch, struct language_arch_info* lai )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_obstack_zalloc()\cell gdbarch.c\cell\row
\cell get_builtin_type()\cell gdbtypes.c\cell\row
Used in:\cell language.c\cell\cell\row
\intbl0
}
