{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF ax-general.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File ax-general.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "ax.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <stdbool.h>\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable aop_map\par}
{\s5\f1\fs20\ql\sb50\sa50 struct aop_map aop_map[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ax-gdb.c\cell\cell\row
\cell ax-general.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
Used in:\cell ax_print()\cell ax-general.c\cell\row
\cell ax_reqs()\cell ax-general.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ax_const_d()\par}
{\s5\f1\fs20\ql\sb50\sa50 void ax_const_d ( struct agent_expr* x, long d )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ax_const_l()\par}
{\s5\f1\fs20\ql\sb50\sa50 void ax_const_l ( struct agent_expr* x, long l )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax.h\cell\cell\row
Calls: \cell append_const()\cell ax-general.c\cell\row
\cell ax_ext()\cell ax-general.c\cell\row
\cell ax_simple()\cell ax-general.c\cell\row
Called by:\cell dwarf2_tracepoint_var_ref()\cell dwarf2loc.c\cell\row
\cell gen_expr()\cell ax-gdb.c\cell\row
\cell gen_int_literal()\cell ax-gdb.c\cell\row
\cell gen_left_shift()\cell ax-gdb.c\cell\row
\cell gen_offset()\cell ax-gdb.c\cell\row
\cell gen_scale()\cell ax-gdb.c\cell\row
\cell gen_sizeof()\cell ax-gdb.c\cell\row
\cell gen_traced_pop()\cell ax-gdb.c\cell\row
\cell gen_var_ref()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ax_ext()\par}
{\s5\f1\fs20\ql\sb50\sa50 void ax_ext ( struct agent_expr* x, int n )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax.h\cell\cell\row
Calls: \cell generic_ext()\cell ax-general.c\cell\row
Called by:\cell ax_const_l()\cell ax-general.c\cell\row
\cell gen_sign_extend()\cell ax-gdb.c\cell\row
Used in:\cell gen_bitfield_ref()\cell ax-gdb.c\cell\row
\cell gen_extend()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ax_goto()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ax_goto ( struct agent_expr* x, enum agent_op op )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax.h\cell\cell\row
Calls: \cell grow_expr()\cell ax-general.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ax_label()\par}
{\s5\f1\fs20\ql\sb50\sa50 void ax_label ( struct agent_expr* x, int patch, int target )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ax_print()\par}
{\s5\f1\fs20\ql\sb50\sa50 void ax_print ( struct ui_file* f, struct agent_expr* x )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell print_longest()\cell valprint.c\cell\row
\cell read_const()\cell ax-general.c\cell\row
Called by:\cell agent_command()\cell ax-gdb.c\cell\row
Refs Var:\cell aop_map\cell ax-general.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ax_reg()\par}
{\s5\f1\fs20\ql\sb50\sa50 void ax_reg ( struct agent_expr* x, int reg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell grow_expr()\cell ax-general.c\cell\row
Called by:\cell dwarf2_tracepoint_var_ref()\cell dwarf2loc.c\cell\row
\cell gen_frame_args_address()\cell ax-gdb.c\cell\row
\cell gen_frame_locals_address()\cell ax-gdb.c\cell\row
\cell gen_traced_pop()\cell ax-gdb.c\cell\row
\cell gen_var_ref()\cell ax-gdb.c\cell\row
\cell require_rvalue()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ax_reqs()\par}
{\s5\f1\fs20\ql\sb50\sa50 void ax_reqs ( struct agent_expr* ax, struct agent_reqs* reqs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax.h\cell\cell\row
Calls: \cell read_const()\cell ax-general.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell encode_actions()\cell tracepoint.c\cell\row
\cell validate_actionline()\cell tracepoint.c\cell\row
Refs Var:\cell aop_map\cell ax-general.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ax_simple()\par}
{\s5\f1\fs20\ql\sb50\sa50 void ax_simple ( struct agent_expr* x, enum agent_op op )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax.h\cell\cell\row
Calls: \cell grow_expr()\cell ax-general.c\cell\row
Called by:\cell ax_const_l()\cell ax-general.c\cell\row
\cell dwarf2_tracepoint_var_ref()\cell dwarf2loc.c\cell\row
\cell gen_add()\cell ax-gdb.c\cell\row
\cell gen_binop()\cell ax-gdb.c\cell\row
\cell gen_bitfield_ref()\cell ax-gdb.c\cell\row
\cell gen_complement()\cell ax-gdb.c\cell\row
\cell gen_fetch()\cell ax-gdb.c\cell\row
\cell gen_left_shift()\cell ax-gdb.c\cell\row
\cell gen_logical_not()\cell ax-gdb.c\cell\row
\cell gen_offset()\cell ax-gdb.c\cell\row
\cell gen_scale()\cell ax-gdb.c\cell\row
\cell gen_sub()\cell ax-gdb.c\cell\row
\cell gen_trace_for_expr()\cell ax-gdb.c\cell\row
\cell gen_traced_pop()\cell ax-gdb.c\cell\row
\cell gen_usual_arithmetic()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ax_trace_quick()\par}
{\s5\f1\fs20\ql\sb50\sa50 void ax_trace_quick ( struct agent_expr* x, int n )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell grow_expr()\cell ax-general.c\cell\row
Called by:\cell gen_bitfield_ref()\cell ax-gdb.c\cell\row
\cell gen_fetch()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ax_zero_ext()\par}
{\s5\f1\fs20\ql\sb50\sa50 void ax_zero_ext ( struct agent_expr* x, int n )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax.h\cell\cell\row
Calls: \cell generic_ext()\cell ax-general.c\cell\row
Used in:\cell gen_bitfield_ref()\cell ax-gdb.c\cell\row
\cell gen_extend()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function free_agent_expr()\par}
{\s5\f1\fs20\ql\sb50\sa50 void free_agent_expr ( struct agent_expr* x )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax.h\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
Called by:\cell clear_collection_list()\cell tracepoint.c\cell\row
\cell do_free_agent_expr_cleanup()\cell ax-general.c\cell\row
\cell is_nontrivial_conversion()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function make_cleanup_free_agent_expr()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct cleanup* make_cleanup_free_agent_expr ( struct agent_expr* x )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax.h\cell\cell\row
Calls: \cell make_cleanup()\cell utils.c\cell\row
Called by:\cell agent_command()\cell ax-gdb.c\cell\row
\cell encode_actions()\cell tracepoint.c\cell\row
\cell expr_to_agent()\cell ax-gdb.c\cell\row
\cell gen_trace_for_expr()\cell ax-gdb.c\cell\row
\cell validate_actionline()\cell tracepoint.c\cell\row
Refs Func:\cell do_free_agent_expr_cleanup()\cell ax-general.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function new_agent_expr()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct agent_expr* new_agent_expr ( CORE_ADDR scope )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax.h\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell expr_to_agent()\cell ax-gdb.c\cell\row
\cell gen_trace_for_expr()\cell ax-gdb.c\cell\row
\cell is_nontrivial_conversion()\cell ax-gdb.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function append_const()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void append_const ( struct agent_expr* x, long val, int n )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-general.c\cell\cell\row
Calls: \cell grow_expr()\cell ax-general.c\cell\row
Called by:\cell ax_const_l()\cell ax-general.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_free_agent_expr_cleanup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_free_agent_expr_cleanup ( void* x )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell free_agent_expr()\cell ax-general.c\cell\row
Used in:\cell make_cleanup_free_agent_expr()\cell ax-general.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function generic_ext()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void generic_ext ( struct agent_expr* x, enum agent_op op, int n )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-general.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell grow_expr()\cell ax-general.c\cell\row
Called by:\cell ax_ext()\cell ax-general.c\cell\row
\cell ax_zero_ext()\cell ax-general.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function grow_expr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void grow_expr ( struct agent_expr* x, int n )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-general.c\cell\cell\row
Calls: \cell xrealloc()\cell utils.c\cell\row
Called by:\cell append_const()\cell ax-general.c\cell\row
\cell ax_goto()\cell ax-general.c\cell\row
\cell ax_reg()\cell ax-general.c\cell\row
\cell ax_simple()\cell ax-general.c\cell\row
\cell ax_trace_quick()\cell ax-general.c\cell\row
\cell generic_ext()\cell ax-general.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_const()\par}
{\s5\f1\fs20\ql\sb50\sa50 static long read_const ( struct agent_expr* x, int o, int n )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ax-general.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Called by:\cell ax_print()\cell ax-general.c\cell\row
\cell ax_reqs()\cell ax-general.c\cell\row
\intbl0
}
