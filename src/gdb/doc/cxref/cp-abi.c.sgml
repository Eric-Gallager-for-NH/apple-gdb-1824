<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF cp-abi.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for cp-abi.c of gdb.cxref.
<author>cxref

<sect>File cp-abi.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;cp-abi.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define CP_ABI_MAX 8</tt><newline>

<sect1>Local Variables

<p>
<bf>current_cp_abi</bf><newline>
<tt>static struct cp_abi_ops current_cp_abi</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>baseclass_offset()
<item>cp_abi_is_auto_p()
<item>is_constructor_name()
<item>is_destructor_name()
<item>is_operator_name()
<item>is_vtable_name()
<item>set_cp_abi_as_auto_default()
<item>show_cp_abi_cmd()
<item>switch_to_cp_abi()
<item>value_rtti_type()
<item>value_virtual_fn_field()
</itemize>
</descrip>
<p>
<bf>auto_cp_abi</bf><newline>
<tt>static struct cp_abi_ops auto_cp_abi</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_cp_abi()
<item>set_cp_abi_as_auto_default()
</itemize>
</descrip>
<p>
<bf>cp_abis</bf><newline>
<tt>static struct cp_abi_ops* cp_abis[8]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>find_cp_abi()
<item>list_cp_abis()
<item>register_cp_abi()
</itemize>
</descrip>
<p>
<bf>num_cp_abis</bf><newline>
<tt>static int num_cp_abis</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>find_cp_abi()
<item>list_cp_abis()
<item>register_cp_abi()
</itemize>
</descrip>

<sect1>Global Function _initialize_cp_abi()

<p><tt>void _initialize_cp_abi ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-abi.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>register_cp_abi()  :  cp-abi.c
<item>switch_to_cp_abi()  :  cp-abi.c
<item>add_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>set_cp_abi_cmd()  :  cp-abi.c
<item>show_cp_abi_cmd()  :  cp-abi.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>auto_cp_abi  :  cp-abi.c
<item>setlist, showlist
</itemize>
</descrip>

<sect1>Global Function baseclass_offset()

<p><tt>int baseclass_offset ( struct type* type, int index, const bfd_byte* valaddr, CORE_ADDR address )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-abi.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_print_value()  :  cp-valprint.c
<item>find_method_list()  :  valops.c
<item>gnuv2_baseclass_offset()  :  gnu-v2-abi.c
<item>pascal_object_print_value()  :  p-valprint.c
<item>search_struct_field()  :  valops.c
<item>search_struct_method()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_cp_abi  :  cp-abi.c
</itemize>
</descrip>

<sect1>Global Function cp_abi_is_auto_p()

<p><tt>int cp_abi_is_auto_p ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-abi.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>install_minimal_symbols()  :  minsyms.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_cp_abi  :  cp-abi.c
</itemize>
</descrip>

<sect1>Global Function is_constructor_name()

<p><tt>enum ctor_kinds is_constructor_name ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-abi.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_constructors()  :  linespec.c
<item>c_type_print_base()  :  c-typeprint.c
<item>gdb_mangle_name()  :  symtab.c
<item>java_type_print_base()  :  jv-typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_cp_abi  :  cp-abi.c
</itemize>
</descrip>

<sect1>Global Function is_destructor_name()

<p><tt>enum dtor_kinds is_destructor_name ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-abi.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_matching_methods()  :  linespec.c
<item>c_type_print_base()  :  c-typeprint.c
<item>gdb_mangle_name()  :  symtab.c
<item>get_destructor_fn_field()  :  gdbtypes.c
<item>java_type_print_base()  :  jv-typeprint.c
<item>read_member_functions()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_cp_abi  :  cp-abi.c
</itemize>
</descrip>

<sect1>Global Function is_operator_name()

<p><tt>int is_operator_name ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-abi.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_method()  :  linespec.c
<item>gdb_mangle_name()  :  symtab.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_cp_abi  :  cp-abi.c
</itemize>
</descrip>

<sect1>Global Function is_vtable_name()

<p><tt>int is_vtable_name ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-abi.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gnuv2_value_rtti_type()  :  gnu-v2-abi.c
<item>record_minimal_symbol()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_cp_abi  :  cp-abi.c
</itemize>
</descrip>

<sect1>Global Function register_cp_abi()

<p><tt>int register_cp_abi ( struct cp_abi_ops* abi )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-abi.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_cp_abi()  :  cp-abi.c
<item>_initialize_gnu_v2_abi()  :  gnu-v2-abi.c
<item>_initialize_gnu_v3_abi()  :  gnu-v3-abi.c
<item>_initialize_hpacc_abi()  :  hpacc-abi.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cp_abis  :  cp-abi.c
<item>num_cp_abis  :  cp-abi.c
</itemize>
</descrip>

<sect1>Global Function set_cp_abi_as_auto_default()

<p><tt>void set_cp_abi_as_auto_default ( const char* short_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-abi.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_cp_abi()  :  cp-abi.c
<item>internal_error()  :  utils.c
<item>switch_to_cp_abi()  :  cp-abi.c
<item>xasprintf()  :  utils.c
<item>xfree()  :  utils.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_gnu_v2_abi()  :  gnu-v2-abi.c
<item>install_minimal_symbols()  :  minsyms.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>auto_cp_abi  :  cp-abi.c
<item>current_cp_abi  :  cp-abi.c
</itemize>
</descrip>

<sect1>Global Function value_rtti_type()

<p><tt>struct type* value_rtti_type ( struct value* v, int* full, int* top, int* using_enc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-abi.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_value_print()  :  c-valprint.c
<item>value_full_object()  :  valops.c
<item>value_rtti_target_type()  :  valops.c
<item>whatis_exp()  :  typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_cp_abi  :  cp-abi.c
</itemize>
</descrip>

<sect1>Global Function value_virtual_fn_field()

<p><tt>struct value* value_virtual_fn_field ( struct value** arg1p, struct fn_field* f, int j, struct type* type, int offset )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-abi.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
<item>find_overload_match()  :  valops.c
<item>search_struct_method()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_cp_abi  :  cp-abi.c
</itemize>
</descrip>

<sect1>Local Function find_cp_abi()

<p><tt>static struct cp_abi_ops* find_cp_abi ( const char* short_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-abi.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_cp_abi_as_auto_default()  :  cp-abi.c
<item>switch_to_cp_abi()  :  cp-abi.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cp_abis  :  cp-abi.c
<item>num_cp_abis  :  cp-abi.c
</itemize>
</descrip>

<sect1>Local Function list_cp_abis()

<p><tt>static void list_cp_abis ( int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>make_cleanup_ui_out_tuple_begin_end()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_cp_abi_cmd()  :  cp-abi.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cp_abis  :  cp-abi.c
<item>num_cp_abis  :  cp-abi.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function set_cp_abi_cmd()

<p><tt>static void set_cp_abi_cmd ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>list_cp_abis()  :  cp-abi.c
<item>switch_to_cp_abi()  :  cp-abi.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_cp_abi()  :  cp-abi.c
</itemize>
</descrip>

<sect1>Local Function show_cp_abi_cmd()

<p><tt>static void show_cp_abi_cmd ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_cp_abi()  :  cp-abi.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_cp_abi  :  cp-abi.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function switch_to_cp_abi()

<p><tt>static int switch_to_cp_abi ( const char* short_name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>find_cp_abi()  :  cp-abi.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_cp_abi()  :  cp-abi.c
<item>set_cp_abi_as_auto_default()  :  cp-abi.c
<item>set_cp_abi_cmd()  :  cp-abi.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_cp_abi  :  cp-abi.c
</itemize>
</descrip>

</article>
