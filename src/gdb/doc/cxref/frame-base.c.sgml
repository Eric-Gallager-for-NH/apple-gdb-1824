<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF frame-base.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for frame-base.c of gdb.cxref.
<author>cxref

<sect>File frame-base.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>default_frame_args_address()  :  frame-base.c
<item>default_frame_base_address()  :  frame-base.c
<item>default_frame_locals_address()  :  frame-base.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;frame-base.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
</itemize>

<sect1>Type struct frame_base_table_entry

<p>
<itemize>
<item><tt>struct frame_base_table_entry</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>frame_base_sniffer_ftype* sniffer;</tt><newline>
<item><tt>struct frame_base_table_entry* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct frame_base_table

<p>
<itemize>
<item><tt>struct frame_base_table</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct frame_base_table_entry* head;</tt><newline>
<item><tt>struct frame_base_table_entry** tail;</tt><newline>
<item><tt>const struct frame_base* default_base;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable default_frame_base

<p>
<tt>const struct frame_base default_frame_base</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>frame-base.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>frame_base_init()  :  frame-base.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>frame_base_data</bf><newline>
<tt>static struct gdbarch_data* frame_base_data</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_frame_base()
<item>frame_base_append_sniffer()
<item>frame_base_find_by_frame()
<item>frame_base_set_default()
</itemize>
</descrip>

<sect1>Global Function _initialize_frame_base()

<p><tt>void _initialize_frame_base ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame-base.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_data_register_pre_init()  :  gdbarch.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>frame_base_init()  :  frame-base.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>frame_base_data  :  frame-base.c
</itemize>
</descrip>

<sect1>Global Function frame_base_append_sniffer()

<p><tt>void frame_base_append_sniffer ( struct gdbarch* gdbarch, frame_base_sniffer_ftype* sniffer )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame-base.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_obstack_zalloc()  :  gdbarch.c
<item>new_gdbarch_data()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>frame_base_data  :  frame-base.c
</itemize>
</descrip>

<sect1>Global Function frame_base_find_by_frame()

<p><tt>const struct frame_base* frame_base_find_by_frame ( struct frame_info* next_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame-base.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_frame_arch()  :  frame.c
<item>new_gdbarch_data()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_frame_args_address()  :  frame.c
<item>get_frame_base_address()  :  frame.c
<item>get_frame_locals_address()  :  frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>frame_base_data  :  frame-base.c
</itemize>
</descrip>

<sect1>Global Function frame_base_set_default()

<p><tt>void frame_base_set_default ( struct gdbarch* gdbarch, const struct frame_base* default_base )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame-base.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>new_gdbarch_data()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>frame_base_data  :  frame-base.c
</itemize>
</descrip>

<sect1>Local Function default_frame_args_address()

<p><tt>static CORE_ADDR default_frame_args_address ( struct frame_info* next_frame, void** this_cache )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>default_frame_base_address()  :  frame-base.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>frame-base.c
</itemize>
</descrip>

<sect1>Local Function default_frame_base_address()

<p><tt>static CORE_ADDR default_frame_base_address ( struct frame_info* next_frame, void** this_cache )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>get_frame_base()  :  frame.c
<item>get_prev_frame()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>default_frame_args_address()  :  frame-base.c
<item>default_frame_locals_address()  :  frame-base.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>frame-base.c
</itemize>
</descrip>

<sect1>Local Function default_frame_locals_address()

<p><tt>static CORE_ADDR default_frame_locals_address ( struct frame_info* next_frame, void** this_cache )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>default_frame_base_address()  :  frame-base.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>frame-base.c
</itemize>
</descrip>

<sect1>Local Function frame_base_init()

<p><tt>static void* frame_base_init ( struct obstack* obstack )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_frame_base()  :  frame-base.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>default_frame_base  :  frame-base.c
</itemize>
</descrip>

</article>
