{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF gdbarch.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File gdbarch.c\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Refs Func:\cell construct_inferior_arguments()\cell infcmd.c\cell\row
\cell default_adjust_ehframe_regnum()\cell arch-utils.c\cell\row
\cell default_print_registers_info()\cell infcmd.c\cell\row
\cell default_register_reggroup_p()\cell reggroups.c\cell\row
\cell default_stabs_argument_has_addr()\cell arch-utils.c\cell\row
\cell generic_in_function_epilogue_p()\cell arch-utils.c\cell\row
\cell generic_register_byte()\cell arch-utils.c\cell\row
\cell generic_skip_solib_resolver()\cell arch-utils.c\cell\row
Refs Var:\cell startup_gdbarch\cell gdbarch.c\cell\row
\cell  bfd_default_arch_struct, convert_from_func_ptr_addr_identity, generic_remote_translate_xfer_address\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "arch-utils.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "reggroups.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "osabi.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define GDBARCH_DEBUG 2\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct gdbarch\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int initialized_p;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct obstack* obstack;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const struct bfd_arch_info* bfd_arch_info;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int byte_order;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum gdb_osabi osabi;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_tdep* tdep;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_dump_tdep_ftype* dump_tdep;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned nr_data;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 void** data;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_swap* swap;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int short_bit;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int int_bit;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int long_bit;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int long_long_bit;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int float_bit;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const struct floatformat* float_format;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int double_bit;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const struct floatformat* double_format;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int long_double_bit;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const struct floatformat* long_double_format;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int ptr_bit;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int addr_bit;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int bfd_vma_bit;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int char_signed;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_read_pc_ftype* read_pc;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_write_pc_ftype* write_pc;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_read_sp_ftype* read_sp;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_virtual_frame_pointer_ftype* virtual_frame_pointer;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_pseudo_register_read_ftype* pseudo_register_read;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_pseudo_register_write_ftype* pseudo_register_write;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int num_regs;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int num_pseudo_regs;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int sp_regnum;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int pc_regnum;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int ps_regnum;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int fp0_regnum;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_stab_reg_to_regnum_ftype* stab_reg_to_regnum;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_ecoff_reg_to_regnum_ftype* ecoff_reg_to_regnum;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_dwarf_reg_to_regnum_ftype* dwarf_reg_to_regnum;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_sdb_reg_to_regnum_ftype* sdb_reg_to_regnum;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_dwarf2_reg_to_regnum_ftype* dwarf2_reg_to_regnum;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_register_name_ftype* register_name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_register_type_ftype* register_type;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_deprecated_register_byte_ftype* deprecated_register_byte;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_unwind_dummy_id_ftype* unwind_dummy_id;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int deprecated_fp_regnum;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_push_dummy_call_ftype* push_dummy_call;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_deprecated_push_arguments_ftype* deprecated_push_arguments;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int deprecated_register_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int call_dummy_location;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_push_dummy_code_ftype* push_dummy_code;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_print_registers_info_ftype* print_registers_info;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_print_float_info_ftype* print_float_info;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_print_vector_info_ftype* print_vector_info;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_register_sim_regno_ftype* register_sim_regno;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_register_bytes_ok_ftype* register_bytes_ok;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_cannot_fetch_register_ftype* cannot_fetch_register;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_cannot_store_register_ftype* cannot_store_register;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_get_longjmp_target_ftype* get_longjmp_target;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int believe_pcc_promotion;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_convert_register_p_ftype* convert_register_p;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_register_to_value_ftype* register_to_value;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_value_to_register_ftype* value_to_register;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_pointer_to_address_ftype* pointer_to_address;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_address_to_pointer_ftype* address_to_pointer;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_integer_to_address_ftype* integer_to_address;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_deprecated_store_struct_return_ftype* deprecated_store_struct_return;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_return_value_ftype* return_value;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_extract_return_value_ftype* extract_return_value;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_store_return_value_ftype* store_return_value;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_deprecated_extract_return_value_ftype* deprecated_extract_return_value;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_deprecated_store_return_value_ftype* deprecated_store_return_value;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_deprecated_use_struct_convention_ftype* deprecated_use_struct_convention;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_deprecated_extract_struct_value_address_ftype* deprecated_extract_struct_value_address;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_skip_prologue_ftype* skip_prologue;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_skip_prologue_addr_ctx_ftype* skip_prologue_addr_ctx;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_inner_than_ftype* inner_than;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_breakpoint_from_pc_ftype* breakpoint_from_pc;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_adjust_breakpoint_address_ftype* adjust_breakpoint_address;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_memory_insert_breakpoint_ftype* memory_insert_breakpoint;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_memory_remove_breakpoint_ftype* memory_remove_breakpoint;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR decr_pc_after_break;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR deprecated_function_start_offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_remote_translate_xfer_address_ftype* remote_translate_xfer_address;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_fetch_tls_load_module_address_ftype* fetch_tls_load_module_address;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR frame_args_skip;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_unwind_pc_ftype* unwind_pc;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_unwind_sp_ftype* unwind_sp;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_deprecated_saved_pc_after_call_ftype* deprecated_saved_pc_after_call;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_frame_num_args_ftype* frame_num_args;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_deprecated_stack_align_ftype* deprecated_stack_align;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_frame_align_ftype* frame_align;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_deprecated_reg_struct_has_addr_ftype* deprecated_reg_struct_has_addr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_stabs_argument_has_addr_ftype* stabs_argument_has_addr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int frame_red_zone_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_convert_from_func_ptr_addr_ftype* convert_from_func_ptr_addr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_addr_bits_remove_ftype* addr_bits_remove;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_smash_text_address_ftype* smash_text_address;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_software_single_step_ftype* software_single_step;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_single_step_through_delay_ftype* single_step_through_delay;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_print_insn_ftype* print_insn;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_skip_trampoline_code_ftype* skip_trampoline_code;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_skip_solib_resolver_ftype* skip_solib_resolver;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_in_solib_return_trampoline_ftype* in_solib_return_trampoline;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_in_function_epilogue_p_ftype* in_function_epilogue_p;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_construct_inferior_arguments_ftype* construct_inferior_arguments;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_elf_make_msymbol_special_ftype* elf_make_msymbol_special;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_coff_make_msymbol_special_ftype* coff_make_msymbol_special;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_dbx_make_msymbol_special_ftype* dbx_make_msymbol_special;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* name_of_malloc;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int cannot_step_breakpoint;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int have_nonsteppable_watchpoint;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_address_class_type_flags_ftype* address_class_type_flags;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_address_class_type_flags_to_name_ftype* address_class_type_flags_to_name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_address_class_name_to_type_flags_ftype* address_class_name_to_type_flags;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_register_reggroup_p_ftype* register_reggroup_p;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_fetch_pointer_argument_ftype* fetch_pointer_argument;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_regset_from_core_section_ftype* regset_from_core_section;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_adjust_ehframe_regnum_ftype* adjust_ehframe_regnum;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct gdbarch_data\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_data}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int index;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int init_p;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_data_pre_init_ftype* pre_init;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_data_post_init_ftype* post_init;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct gdbarch_data_registration\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_data_registration}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_data* data;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_data_registration* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct gdbarch_data_registry\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_data_registry}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int nr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_data_registration* registrations;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct gdbarch_swap\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_swap}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 void* swap;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_swap_registration* source;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_swap* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct gdbarch_swap_registration\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_swap_registration}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 void* data;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned long sizeof_data;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_swap_ftype* init;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_swap_registration* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct gdbarch_swap_registry\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_swap_registry}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int nr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_swap_registration* registrations;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct gdbarch_registration\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_registration}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum bfd_architecture bfd_architecture;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_init_ftype* init;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdbarch_dump_tdep_ftype* dump_tdep;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_list* arches;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_registration* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable current_gdbarch\par}
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch* current_gdbarch\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell ax-general.c\cell\cell\row
\cell bcache.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell charset.c\cell\cell\row
\cell cli-out.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell complaints.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-abi.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell demangle.c\cell\cell\row
\cell dictionary.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell doublest.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell environ.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-loop.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame-base.c\cell\cell\row
\cell frame-unwind.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell gnu-v2-abi.c\cell\cell\row
\cell gnu-v3-abi.c\cell\cell\row
\cell hpacc-abi.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell interps.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell kod-cisco.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell m2-valprint.c\cell\cell\row
\cell macrocmd.c\cell\cell\row
\cell macroexp.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell observer.c\cell\cell\row
\cell osabi.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell reggroups.c\cell\cell\row
\cell remote-fileio.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell ser-base.c\cell\cell\row
\cell ser-unix.c\cell\cell\row
\cell serial.c\cell\cell\row
\cell solib-null.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell std-regs.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell trad-frame.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-file.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell user-regs.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
\cell wrapper.c\cell\cell\row
Used in:\cell _initialize_m2_language()\cell m2-lang.c\cell\row
\cell _initialize_mdebugread()\cell mdebugread.c\cell\row
\cell _initialize_scheme_language()\cell scm-lang.c\cell\row
\cell ada_create_fundamental_type()\cell ada-lang.c\cell\row
\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell add_enum_psymbol()\cell dwarfread.c\cell\row
\cell add_kext_command()\cell symfile.c\cell\row
\cell address_info()\cell printcmd.c\cell\row
\cell address_space_int_to_name()\cell gdbtypes.c\cell\row
\cell address_space_name_to_int()\cell gdbtypes.c\cell\row
\cell adjust_breakpoint_address()\cell breakpoint.c\cell\row
\cell adjust_field_bitsize()\cell stabsread.c\cell\row
\cell adjust_pc_after_break()\cell infrun.c\cell\row
\cell allocate_space_in_inferior_malloc()\cell valops.c\cell\row
\cell attribute_size()\cell dwarfread.c\cell\row
\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell breakpoint_1()\cell breakpoint.c\cell\row
\cell breakpoint_re_set_all()\cell breakpoint.c\cell\row
\cell build_fortran_types()\cell f-lang.c\cell\row
\cell build_gdb_vtable_type()\cell gnu-v3-abi.c\cell\row
\cell build_gdbtypes()\cell gdbtypes.c\cell\row
\cell build_infrun()\cell infrun.c\cell\row
\cell build_regcache()\cell regcache.c\cell\row
\cell build_remote_gdbarch_data()\cell remote.c\cell\row
\cell c_create_fundamental_type()\cell c-lang.c\cell\row
\cell c_lex()\cell c-exp.c\cell\row
\cell c_parse()\cell c-exp.c\cell\row
\cell clear_solib()\cell solib.c\cell\row
\cell coff_read_enum_type()\cell coffread.c\cell\row
\cell coff_symtab_read()\cell coffread.c\cell\row
\cell collect_symbol()\cell tracepoint.c\cell\row
\cell completedieinfo()\cell dwarfread.c\cell\row
\cell convert_sect_addrs_to_offsets_via_on_disk_file()\cell symfile.c\cell\row
\cell create_string_type()\cell gdbtypes.c\cell\row
\cell current_gdbarch_swap_in_hack()\cell gdbarch.c\cell\row
\cell current_gdbarch_swap_init_hack()\cell gdbarch.c\cell\row
\cell current_gdbarch_swap_out_hack()\cell gdbarch.c\cell\row
\cell debug_print_register()\cell target/target.c\cell\row
\cell decode_base_type()\cell coffread.c\cell\row
\cell decode_format()\cell printcmd.c\cell\row
\cell decode_frame_entry_1()\cell dwarf2-frame.c\cell\row
\cell decode_line_2()\cell linespec.c\cell\row
\cell decode_line_numbers()\cell dwarfread.c\cell\row
\cell decode_objc()\cell linespec.c\cell\row
\cell decode_packed_array()\cell ada-lang.c\cell\row
\cell decode_subscript_data_item()\cell dwarfread.c\cell\row
\cell default_memory_insert_breakpoint()\cell mem-break.c\cell\row
\cell default_memory_remove_breakpoint()\cell mem-break.c\cell\row
\cell default_print_registers_info()\cell infcmd.c\cell\row
\cell default_register_reggroup_p()\cell reggroups.c\cell\row
\cell default_stabs_argument_has_addr()\cell arch-utils.c\cell\row
\cell define_symbol()\cell stabsread.c\cell\row
\cell deprecated_current_gdbarch_select_hack()\cell gdbarch.c\cell\row
\cell deprecated_pc_in_call_dummy()\cell dummy-frame.c\cell\row
\cell deprecated_print_address_numeric()\cell printcmd.c\cell\row
\cell deprecated_read_memory_nobpt()\cell breakpoint.c\cell\row
\cell deprecated_read_register_bytes()\cell regcache.c\cell\row
\cell deprecated_read_register_gen()\cell regcache.c\cell\row
\cell deprecated_registers_fetched()\cell regcache.c\cell\row
\cell deprecated_write_register_bytes()\cell regcache.c\cell\row
\cell deprecated_write_register_gen()\cell regcache.c\cell\row
\cell do_one_display()\cell printcmd.c\cell\row
\cell dump_insns()\cell disasm.c\cell\row
\cell dwarf2_add_field()\cell dwarf2read.c\cell\row
\cell dwarf2_evaluate_loc_desc()\cell dwarf2loc.c\cell\row
\cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_default_init_reg()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_prev_register()\cell dwarf2-frame.c\cell\row
\cell dwarf2_read_address()\cell dwarf2expr.c\cell\row
\cell dwarf2_scan_inlined_section_for_psymbols()\cell dwarf2read.c\cell\row
\cell dwarf2_tracepoint_var_ref()\cell dwarf2loc.c\cell\row
\cell dwarf_expr_read_reg()\cell dwarf2loc.c\cell\row
\cell dwarf_expr_tls_address()\cell dwarf2loc.c\cell\row
\cell elf_symtab_read()\cell elfread.c\cell\row
\cell encode_actions()\cell tracepoint.c\cell\row
\cell ensure_lval()\cell ada-lang.c\cell\row
\cell enum_type()\cell dwarfread.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell execute_cfa_program()\cell dwarf2-frame.c\cell\row
\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\cell extract_long_unsigned_integer_with_byte_order()\cell findvar.c\cell\row
\cell extract_signed_integer_with_byte_order()\cell findvar.c\cell\row
\cell extract_typed_address()\cell findvar.c\cell\row
\cell extract_unsigned_integer_with_byte_order()\cell findvar.c\cell\row
\cell f_create_fundamental_type()\cell f-lang.c\cell\row
\cell f_lex()\cell f-exp.c\cell\row
\cell find_arch_by_info()\cell gdbarch.c\cell\row
\cell find_function_addr()\cell infcall.c\cell\row
\cell find_function_start_sal()\cell symtab.c\cell\row
\cell find_implementation_from_class()\cell objc-lang.c\cell\row
\cell find_location_expression()\cell dwarf2loc.c\cell\row
\cell find_pc_offset()\cell disasm.c\cell\row
\cell float_info()\cell infcmd.c\cell\row
\cell floatformat_from_length()\cell doublest.c\cell\row
\cell frame_id_inner()\cell frame.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell frame_pc_unwind()\cell frame.c\cell\row
\cell frame_register_unwind()\cell frame.c\cell\row
\cell frame_save_as_regcache()\cell frame.c\cell\row
\cell frame_sp_unwind()\cell frame.c\cell\row
\cell free_so()\cell solib.c\cell\row
\cell gdb_disassembly()\cell disasm.c\cell\row
\cell gdb_print_insn()\cell disasm.c\cell\row
\cell gdbarch_find_by_info()\cell gdbarch.c\cell\row
\cell gdbarch_update_p()\cell arch-utils.c\cell\row
\cell gdbtypes_post_init()\cell gdbtypes.c\cell\row
\cell gen_bitfield_ref()\cell ax-gdb.c\cell\row
\cell gen_expr()\cell ax-gdb.c\cell\row
\cell gen_frame_args_address()\cell ax-gdb.c\cell\row
\cell gen_frame_locals_address()\cell ax-gdb.c\cell\row
\cell generic_register_byte()\cell arch-utils.c\cell\row
\cell generic_register_size()\cell arch-utils.c\cell\row
\cell generic_target_write_pc()\cell regcache.c\cell\row
\cell get_class_address_from_object()\cell objc-lang.c\cell\row
\cell get_frame_arch()\cell frame.c\cell\row
\cell get_inferior_args()\cell infcmd.c\cell\row
\cell get_java_object_header_size()\cell jv-lang.c\cell\row
\cell get_remote_state()\cell remote.c\cell\row
\cell gnu_v3_update_exception_catchpoints()\cell breakpoint.c\cell\row
\cell gnuv3_baseclass_offset()\cell gnu-v3-abi.c\cell\row
\cell gnuv3_rtti_type()\cell gnu-v3-abi.c\cell\row
\cell gnuv3_virtual_fn_field()\cell gnu-v3-abi.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell in_prologue()\cell symtab.c\cell\row
\cell in_solib_dynsym_resolve_code()\cell solib.c\cell\row
\cell info_sharedlibrary_command()\cell solib.c\cell\row
\cell init_regcache_descr()\cell regcache.c\cell\row
\cell init_remote_state()\cell remote.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell inlined_frame_sniffer()\cell inlining.c\cell\row
\cell insert_step_resume_breakpoint_at_frame()\cell infrun.c\cell\row
\cell inside_main_func()\cell frame.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell legacy_extract_return_value()\cell arch-utils.c\cell\row
\cell legacy_register_sim_regno()\cell arch-utils.c\cell\row
\cell legacy_return_value()\cell arch-utils.c\cell\row
\cell legacy_store_return_value()\cell arch-utils.c\cell\row
\cell legacy_virtual_frame_pointer()\cell arch-utils.c\cell\row
\cell length_of_this_instruction()\cell target/target.c\cell\row
\cell locate_var_value()\cell findvar.c\cell\row
\cell locexpr_describe_location()\cell dwarf2loc.c\cell\row
\cell loclist_describe_location()\cell dwarf2loc.c\cell\row
\cell locval()\cell dwarfread.c\cell\row
\cell lookup_typename()\cell gdbtypes.c\cell\row
\cell m2_create_fundamental_type()\cell m2-lang.c\cell\row
\cell maintenance_print_architecture()\cell maint.c\cell\row
\cell maintenance_print_reggroups()\cell reggroups.c\cell\row
\cell make_pointer_type()\cell gdbtypes.c\cell\row
\cell make_reference_type()\cell gdbtypes.c\cell\row
\cell mem_info_command()\cell memattr.c\cell\row
\cell memory_insert_breakpoint()\cell mem-break.c\cell\row
\cell memory_remove_breakpoint()\cell mem-break.c\cell\row
\cell minsym_found()\cell linespec.c\cell\row
\cell minsyms_found()\cell linespec.c\cell\row
\cell modify_field()\cell value.c\cell\row
\cell move_bits()\cell ada-lang.c\cell\row
\cell name_lookup()\cell ada-exp.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell new_objc_runtime_internals()\cell objc-lang.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell objc_create_fundamental_type()\cell objc-lang.c\cell\row
\cell objc_handle_update()\cell objc-lang.c\cell\row
\cell objc_init_trampoline_observer()\cell objc-lang.c\cell\row
\cell objc_lex()\cell objc-exp.c\cell\row
\cell objc_read_trampoline_region()\cell objc-lang.c\cell\row
\cell objc_skip_trampoline()\cell objc-lang.c\cell\row
\cell open_bfd_matching_arch()\cell symfile.c\cell\row
\cell packet_reg_from_pnum()\cell remote.c\cell\row
\cell packet_reg_from_regnum()\cell remote.c\cell\row
\cell paddr()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell paddress()\cell utils.c\cell\row
\cell parse_number()\cell f-exp.c\cell\row
\cell parse_symbol()\cell mdebugread.c\cell\row
\cell pascal_create_fundamental_type()\cell p-lang.c\cell\row
\cell pascal_lex()\cell p-exp.c\cell\row
\cell pascal_val_print()\cell p-valprint.c\cell\row
\cell print_address_symbolic()\cell printcmd.c\cell\row
\cell print_args_stub()\cell stack.c\cell\row
\cell print_binary_chars()\cell valprint.c\cell\row
\cell print_char_chars_with_byte_order()\cell valprint.c\cell\row
\cell print_decimal_chars()\cell valprint.c\cell\row
\cell print_float_info()\cell infcmd.c\cell\row
\cell print_frame_args()\cell stack.c\cell\row
\cell print_function_pointer_address()\cell c-valprint.c\cell\row
\cell print_hex_chars_with_byte_order()\cell valprint.c\cell\row
\cell print_msymbol_info()\cell symtab.c\cell\row
\cell print_octal_chars()\cell valprint.c\cell\row
\cell print_one_breakpoint()\cell breakpoint.c\cell\row
\cell print_return_value()\cell infcmd.c\cell\row
\cell print_scalar_formatted()\cell printcmd.c\cell\row
\cell print_single_dwarf_location()\cell dwarf2loc.c\cell\row
\cell print_subexp_standard()\cell expprint.c\cell\row
\cell print_vector_info()\cell infcmd.c\cell\row
\cell proceed()\cell infrun.c\cell\row
\cell processInt()\cell ada-exp.c\cell\row
\cell processReal()\cell ada-exp.c\cell\row
\cell process_coff_symbol()\cell coffread.c\cell\row
\cell process_dies()\cell dwarfread.c\cell\row
\cell process_one_symbol()\cell dbxread.c\cell\row
\cell read_enum_type()\cell stabsread.c\cell\row
\cell read_objc_class()\cell objc-lang.c\cell\row
\cell read_objc_method()\cell objc-lang.c\cell\row
\cell read_objc_method_list_method()\cell objc-lang.c\cell\row
\cell read_objc_method_list_nmethods()\cell objc-lang.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
\cell read_objc_super()\cell objc-lang.c\cell\row
\cell read_pc_pid()\cell regcache.c\cell\row
\cell read_range_type()\cell stabsread.c\cell\row
\cell read_reg()\cell dwarf2-frame.c\cell\row
\cell read_register()\cell regcache.c\cell\row
\cell read_sp()\cell regcache.c\cell\row
\cell read_tag_pointer_type()\cell dwarf2read.c\cell\row
\cell read_target_long_array()\cell symfile.c\cell\row
\cell record_line()\cell buildsym.c\cell\row
\cell record_minimal_symbol()\cell elfread.c\cell\row
\cell regcache_dump()\cell regcache.c\cell\row
\cell regcache_raw_write()\cell regcache.c\cell\row
\cell register_size()\cell regcache.c\cell\row
\cell registers_info()\cell infcmd.c\cell\row
\cell remote_async_wait()\cell remote.c\cell\row
\cell remote_fetch_registers()\cell remote.c\cell\row
\cell remote_insert_breakpoint()\cell remote.c\cell\row
\cell remote_insert_hw_breakpoint()\cell remote.c\cell\row
\cell remote_prepare_to_store()\cell remote.c\cell\row
\cell remote_remove_breakpoint()\cell remote.c\cell\row
\cell remote_remove_hw_breakpoint()\cell remote.c\cell\row
\cell remote_store_registers()\cell remote.c\cell\row
\cell remote_wait()\cell remote.c\cell\row
\cell resolve_msgsend()\cell objc-lang.c\cell\row
\cell resolve_msgsend_stret()\cell objc-lang.c\cell\row
\cell resolve_msgsend_super()\cell objc-lang.c\cell\row
\cell resolve_msgsend_super_stret()\cell objc-lang.c\cell\row
\cell resolve_newruntime_objc_msgsend()\cell objc-lang.c\cell\row
\cell resolve_newruntime_objc_msgsendsuper()\cell objc-lang.c\cell\row
\cell resume()\cell infrun.c\cell\row
\cell return_command()\cell stack.c\cell\row
\cell scope_info()\cell tracepoint.c\cell\row
\cell sentinel_frame_prev_register()\cell sentinel-frame.c\cell\row
\cell set_gdbarch_from_file()\cell arch-utils.c\cell\row
\cell show_architecture()\cell arch-utils.c\cell\row
\cell show_endian()\cell arch-utils.c\cell\row
\cell show_osabi()\cell osabi.c\cell\row
\cell signed_address_type()\cell dwarf2expr.c\cell\row
\cell simple_overlay_update_1()\cell symfile.c\cell\row
\cell skip_prologue_using_sal()\cell symtab.c\cell\row
\cell solib_add()\cell solib.c\cell\row
\cell solib_create_inferior_hook()\cell solib.c\cell\row
\cell solib_map_sections()\cell solib.c\cell\row
\cell solib_open()\cell solib.c\cell\row
\cell step_into_function()\cell infrun.c\cell\row
\cell store_register_using_P()\cell remote.c\cell\row
\cell store_signed_integer_with_byte_order()\cell findvar.c\cell\row
\cell store_typed_address()\cell findvar.c\cell\row
\cell store_unsigned_integer_with_byte_order()\cell findvar.c\cell\row
\cell strlen_paddr()\cell utils.c\cell\row
\cell struct_type()\cell dwarfread.c\cell\row
\cell trace_dump_command()\cell tracepoint.c\cell\row
\cell tracepoints_info()\cell tracepoint.c\cell\row
\cell trad_frame_alloc_saved_regs()\cell trad-frame.c\cell\row
\cell type_char()\cell ada-exp.c\cell\row
\cell type_double()\cell ada-exp.c\cell\row
\cell type_float()\cell ada-exp.c\cell\row
\cell type_int()\cell ada-exp.c\cell\row
\cell type_long()\cell ada-exp.c\cell\row
\cell type_long_double()\cell ada-exp.c\cell\row
\cell type_long_long()\cell ada-exp.c\cell\row
\cell type_system_address()\cell ada-exp.c\cell\row
\cell ui_out_field_core_addr()\cell ui-out.c\cell\row
\cell unpack_field_as_long()\cell value.c\cell\row
\cell unsigned_address_type()\cell dwarf2expr.c\cell\row
\cell update_solib_list()\cell solib.c\cell\row
\cell user_reg_map_name_to_regnum()\cell user-regs.c\cell\row
\cell using_struct_return()\cell value.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_bit_index()\cell valarith.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_from_register()\cell findvar.c\cell\row
\cell value_from_string()\cell value.c\cell\row
\cell value_objc_target_type()\cell objc-lang.c\cell\row
\cell value_of_builtin_frame_fp_reg()\cell std-regs.c\cell\row
\cell value_of_builtin_frame_pc_reg()\cell std-regs.c\cell\row
\cell value_of_builtin_frame_ps_reg()\cell std-regs.c\cell\row
\cell value_of_builtin_frame_reg()\cell std-regs.c\cell\row
\cell value_of_builtin_frame_sp_reg()\cell std-regs.c\cell\row
\cell value_of_register()\cell findvar.c\cell\row
\cell value_slice()\cell valops.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\cell vector_info()\cell infcmd.c\cell\row
\cell vtable_address_point_offset()\cell gnu-v3-abi.c\cell\row
\cell watchpoint_check()\cell breakpoint.c\cell\row
\cell write_inferior_status_register()\cell infrun.c\cell\row
\cell write_pc_pid()\cell regcache.c\cell\row
\cell write_register()\cell regcache.c\cell\row
\cell x86_frame_prev_register()\cell target/x86-shared-tdep.c\cell\row
\cell x86_frame_this_id()\cell target/x86-shared-tdep.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable gdbarch_debug\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_debug\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell ax-general.c\cell\cell\row
\cell bcache.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell charset.c\cell\cell\row
\cell cli-out.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell complaints.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-abi.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell demangle.c\cell\cell\row
\cell dictionary.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell doublest.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell environ.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-loop.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame-base.c\cell\cell\row
\cell frame-unwind.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell gnu-v2-abi.c\cell\cell\row
\cell gnu-v3-abi.c\cell\cell\row
\cell hpacc-abi.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell interps.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell kod-cisco.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell m2-valprint.c\cell\cell\row
\cell macrocmd.c\cell\cell\row
\cell macroexp.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell observer.c\cell\cell\row
\cell osabi.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell reggroups.c\cell\cell\row
\cell remote-fileio.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell ser-base.c\cell\cell\row
\cell ser-unix.c\cell\cell\row
\cell serial.c\cell\cell\row
\cell solib-null.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell std-regs.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell trad-frame.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-file.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell user-regs.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
\cell wrapper.c\cell\cell\row
Used in:\cell _initialize_gdbarch()\cell gdbarch.c\cell\row
\cell find_arch_by_info()\cell gdbarch.c\cell\row
\cell gdbarch_addr_bit()\cell gdbarch.c\cell\row
\cell gdbarch_addr_bits_remove()\cell gdbarch.c\cell\row
\cell gdbarch_address_class_name_to_type_flags()\cell gdbarch.c\cell\row
\cell gdbarch_address_class_type_flags()\cell gdbarch.c\cell\row
\cell gdbarch_address_class_type_flags_to_name()\cell gdbarch.c\cell\row
\cell gdbarch_address_to_pointer()\cell gdbarch.c\cell\row
\cell gdbarch_adjust_breakpoint_address()\cell gdbarch.c\cell\row
\cell gdbarch_adjust_ehframe_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_believe_pcc_promotion()\cell gdbarch.c\cell\row
\cell gdbarch_bfd_arch_info()\cell gdbarch.c\cell\row
\cell gdbarch_bfd_vma_bit()\cell gdbarch.c\cell\row
\cell gdbarch_breakpoint_from_pc()\cell gdbarch.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell gdbarch_call_dummy_location()\cell gdbarch.c\cell\row
\cell gdbarch_cannot_fetch_register()\cell gdbarch.c\cell\row
\cell gdbarch_cannot_step_breakpoint()\cell gdbarch.c\cell\row
\cell gdbarch_cannot_store_register()\cell gdbarch.c\cell\row
\cell gdbarch_char_signed()\cell gdbarch.c\cell\row
\cell gdbarch_coff_make_msymbol_special()\cell gdbarch.c\cell\row
\cell gdbarch_construct_inferior_arguments()\cell gdbarch.c\cell\row
\cell gdbarch_convert_from_func_ptr_addr()\cell gdbarch.c\cell\row
\cell gdbarch_convert_register_p()\cell gdbarch.c\cell\row
\cell gdbarch_dbx_make_msymbol_special()\cell gdbarch.c\cell\row
\cell gdbarch_decr_pc_after_break()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_extract_return_value()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_extract_struct_value_address()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_fp_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_function_start_offset()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_push_arguments()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_reg_struct_has_addr()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_register_byte()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_register_size()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_saved_pc_after_call()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_stack_align()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_store_return_value()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_store_struct_return()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_use_struct_convention()\cell gdbarch.c\cell\row
\cell gdbarch_double_bit()\cell gdbarch.c\cell\row
\cell gdbarch_double_format()\cell gdbarch.c\cell\row
\cell gdbarch_dwarf2_reg_to_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_dwarf_reg_to_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_ecoff_reg_to_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_elf_make_msymbol_special()\cell gdbarch.c\cell\row
\cell gdbarch_extract_return_value()\cell gdbarch.c\cell\row
\cell gdbarch_fetch_pointer_argument()\cell gdbarch.c\cell\row
\cell gdbarch_fetch_tls_load_module_address()\cell gdbarch.c\cell\row
\cell gdbarch_float_bit()\cell gdbarch.c\cell\row
\cell gdbarch_float_format()\cell gdbarch.c\cell\row
\cell gdbarch_fp0_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_frame_align()\cell gdbarch.c\cell\row
\cell gdbarch_frame_args_skip()\cell gdbarch.c\cell\row
\cell gdbarch_frame_num_args()\cell gdbarch.c\cell\row
\cell gdbarch_frame_red_zone_size()\cell gdbarch.c\cell\row
\cell gdbarch_get_longjmp_target()\cell gdbarch.c\cell\row
\cell gdbarch_have_nonsteppable_watchpoint()\cell gdbarch.c\cell\row
\cell gdbarch_in_function_epilogue_p()\cell gdbarch.c\cell\row
\cell gdbarch_in_solib_return_trampoline()\cell gdbarch.c\cell\row
\cell gdbarch_info_fill()\cell arch-utils.c\cell\row
\cell gdbarch_inner_than()\cell gdbarch.c\cell\row
\cell gdbarch_int_bit()\cell gdbarch.c\cell\row
\cell gdbarch_integer_to_address()\cell gdbarch.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell gdbarch_long_double_bit()\cell gdbarch.c\cell\row
\cell gdbarch_long_double_format()\cell gdbarch.c\cell\row
\cell gdbarch_long_long_bit()\cell gdbarch.c\cell\row
\cell gdbarch_memory_insert_breakpoint()\cell gdbarch.c\cell\row
\cell gdbarch_memory_remove_breakpoint()\cell gdbarch.c\cell\row
\cell gdbarch_name_of_malloc()\cell gdbarch.c\cell\row
\cell gdbarch_num_pseudo_regs()\cell gdbarch.c\cell\row
\cell gdbarch_num_regs()\cell gdbarch.c\cell\row
\cell gdbarch_osabi()\cell gdbarch.c\cell\row
\cell gdbarch_pc_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_pointer_to_address()\cell gdbarch.c\cell\row
\cell gdbarch_print_float_info()\cell gdbarch.c\cell\row
\cell gdbarch_print_insn()\cell gdbarch.c\cell\row
\cell gdbarch_print_registers_info()\cell gdbarch.c\cell\row
\cell gdbarch_print_vector_info()\cell gdbarch.c\cell\row
\cell gdbarch_ps_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_pseudo_register_read()\cell gdbarch.c\cell\row
\cell gdbarch_pseudo_register_write()\cell gdbarch.c\cell\row
\cell gdbarch_ptr_bit()\cell gdbarch.c\cell\row
\cell gdbarch_push_dummy_call()\cell gdbarch.c\cell\row
\cell gdbarch_push_dummy_code()\cell gdbarch.c\cell\row
\cell gdbarch_read_pc()\cell gdbarch.c\cell\row
\cell gdbarch_read_sp()\cell gdbarch.c\cell\row
\cell gdbarch_register()\cell gdbarch.c\cell\row
\cell gdbarch_register_bytes_ok()\cell gdbarch.c\cell\row
\cell gdbarch_register_name()\cell gdbarch.c\cell\row
\cell gdbarch_register_reggroup_p()\cell gdbarch.c\cell\row
\cell gdbarch_register_sim_regno()\cell gdbarch.c\cell\row
\cell gdbarch_register_to_value()\cell gdbarch.c\cell\row
\cell gdbarch_register_type()\cell gdbarch.c\cell\row
\cell gdbarch_regset_from_core_section()\cell gdbarch.c\cell\row
\cell gdbarch_remote_translate_xfer_address()\cell gdbarch.c\cell\row
\cell gdbarch_return_value()\cell gdbarch.c\cell\row
\cell gdbarch_sdb_reg_to_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_short_bit()\cell gdbarch.c\cell\row
\cell gdbarch_single_step_through_delay()\cell gdbarch.c\cell\row
\cell gdbarch_skip_prologue()\cell gdbarch.c\cell\row
\cell gdbarch_skip_prologue_addr_ctx()\cell gdbarch.c\cell\row
\cell gdbarch_skip_solib_resolver()\cell gdbarch.c\cell\row
\cell gdbarch_skip_trampoline_code()\cell gdbarch.c\cell\row
\cell gdbarch_smash_text_address()\cell gdbarch.c\cell\row
\cell gdbarch_software_single_step()\cell gdbarch.c\cell\row
\cell gdbarch_sp_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_stab_reg_to_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_stabs_argument_has_addr()\cell gdbarch.c\cell\row
\cell gdbarch_store_return_value()\cell gdbarch.c\cell\row
\cell gdbarch_unwind_dummy_id()\cell gdbarch.c\cell\row
\cell gdbarch_unwind_pc()\cell gdbarch.c\cell\row
\cell gdbarch_unwind_sp()\cell gdbarch.c\cell\row
\cell gdbarch_update_p()\cell arch-utils.c\cell\row
\cell gdbarch_value_to_register()\cell gdbarch.c\cell\row
\cell gdbarch_virtual_frame_pointer()\cell gdbarch.c\cell\row
\cell gdbarch_write_pc()\cell gdbarch.c\cell\row
\cell new_gdbarch_tdep()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable startup_gdbarch\par}
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch startup_gdbarch\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell gdbarch.c\cell\cell\row
Used in:\cell gdbarch.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable gdbarch_data_registry\par}
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_data_registry gdbarch_data_registry\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell gdbarch.c\cell\cell\row
Used in:\cell alloc_gdbarch_data()\cell gdbarch.c\cell\row
\cell gdbarch_data_register()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable gdbarch_swap_registry\par}
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_swap_registry gdbarch_swap_registry\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell gdbarch.c\cell\cell\row
Used in:\cell current_gdbarch_swap_init_hack()\cell gdbarch.c\cell\row
\cell deprecated_register_gdbarch_swap()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep External Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable bfd_default_arch_struct\par}
{\s5\f1\fs20\ql\sb50\sa50 extern const struct bfd_arch_info bfd_default_arch_struct\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable gdbarch_registry\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct gdbarch_registration* gdbarch_registry\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell find_arch_by_info()\cell\cell\row
\cell gdbarch_printable_names()\cell\cell\row
\cell gdbarch_register()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_gdbarch()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_gdbarch ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.c\cell\cell\row
Calls: \cell  add_setshow_zinteger_cmd()\cell\cell\row
Refs Func:\cell show_gdbarch_debug()\cell gdbarch.c\cell\row
Refs Var:\cell gdbarch_debug\cell gdbarch.c\cell\row
\cell  setdebuglist, showdebuglist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_current_gdbarch_select_hack()\par}
{\s5\f1\fs20\ql\sb50\sa50 void deprecated_current_gdbarch_select_hack ( struct gdbarch* new_gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell current_gdbarch_swap_in_hack()\cell gdbarch.c\cell\row
\cell current_gdbarch_swap_out_hack()\cell gdbarch.c\cell\row
\cell flush_cached_frames()\cell frame.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  architecture_changed_event()\cell\cell\row
Called by:\cell gdbarch_update_p()\cell arch-utils.c\cell\row
\cell set_gdbarch_from_file()\cell arch-utils.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_register_gdbarch_swap()\par}
{\s5\f1\fs20\ql\sb50\sa50 void deprecated_register_gdbarch_swap ( void* data, unsigned long sizeof_data, gdbarch_swap_ftype* init )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell _initialize_f_language()\cell f-lang.c\cell\row
\cell _initialize_frame_reg()\cell std-regs.c\cell\row
\cell _initialize_gdbtypes()\cell gdbtypes.c\cell\row
\cell _initialize_infrun()\cell infrun.c\cell\row
\cell _initialize_parse()\cell parse.c\cell\row
\cell _initialize_regcache()\cell regcache.c\cell\row
\cell _initialize_remote()\cell remote.c\cell\row
Refs Var:\cell gdbarch_swap_registry\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_set_gdbarch_data()\par}
{\s5\f1\fs20\ql\sb50\sa50 void deprecated_set_gdbarch_data ( struct gdbarch* gdbarch, struct gdbarch_data* data, void* pointer )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell reggroup_add()\cell reggroups.c\cell\row
\cell user_reg_add()\cell user-regs.c\cell\row
\cell user_reg_replace()\cell user-regs.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_addr_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_addr_bit ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell breakpoint_1()\cell breakpoint.c\cell\row
\cell build_gdbtypes()\cell gdbtypes.c\cell\row
\cell build_remote_gdbarch_data()\cell remote.c\cell\row
\cell deprecated_print_address_numeric()\cell printcmd.c\cell\row
\cell dwarf2_read_address()\cell dwarf2expr.c\cell\row
\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\cell find_location_expression()\cell dwarf2loc.c\cell\row
\cell gdbtypes_post_init()\cell gdbtypes.c\cell\row
\cell loclist_describe_location()\cell dwarf2loc.c\cell\row
\cell mem_info_command()\cell memattr.c\cell\row
\cell paddr()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell paddress()\cell utils.c\cell\row
\cell paddress_with_arch()\cell utils.c\cell\row
\cell print_address_symbolic()\cell printcmd.c\cell\row
\cell print_msymbol_info()\cell symtab.c\cell\row
\cell print_one_breakpoint()\cell breakpoint.c\cell\row
\cell print_scalar_formatted()\cell printcmd.c\cell\row
\cell print_single_dwarf_location()\cell dwarf2loc.c\cell\row
\cell signed_address_type()\cell dwarf2expr.c\cell\row
\cell strlen_paddr()\cell utils.c\cell\row
\cell tracepoints_info()\cell tracepoint.c\cell\row
\cell ui_out_field_core_addr()\cell ui-out.c\cell\row
\cell unsigned_address_type()\cell dwarf2expr.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_addr_bits_remove()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_addr_bits_remove ( struct gdbarch* gdbarch, CORE_ADDR addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell do_one_display()\cell printcmd.c\cell\row
\cell get_class_address_from_object()\cell objc-lang.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell insert_step_resume_breakpoint_at_frame()\cell infrun.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell read_pc_pid()\cell regcache.c\cell\row
\cell record_line()\cell buildsym.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_address_class_name_to_type_flags()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_address_class_name_to_type_flags ( struct gdbarch* gdbarch, const char* name, int* type_flags_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell address_space_name_to_int()\cell gdbtypes.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_address_class_name_to_type_flags_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_address_class_name_to_type_flags_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell address_space_name_to_int()\cell gdbtypes.c\cell\row
\cell gdbarch_dump()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_address_class_type_flags()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_address_class_type_flags ( struct gdbarch* gdbarch, int byte_size, int dwarf2_addr_class )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell read_tag_pointer_type()\cell dwarf2read.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_address_class_type_flags_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_address_class_type_flags_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell read_tag_pointer_type()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_address_class_type_flags_to_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* gdbarch_address_class_type_flags_to_name ( struct gdbarch* gdbarch, int type_flags )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell address_space_int_to_name()\cell gdbtypes.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_address_class_type_flags_to_name_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_address_class_type_flags_to_name_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell address_space_int_to_name()\cell gdbtypes.c\cell\row
\cell gdbarch_dump()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_address_to_pointer()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_address_to_pointer ( struct gdbarch* gdbarch, struct type* type, gdb_byte* buf, CORE_ADDR addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell store_typed_address()\cell findvar.c\cell\row
\cell value_of_builtin_frame_fp_reg()\cell std-regs.c\cell\row
\cell value_of_builtin_frame_pc_reg()\cell std-regs.c\cell\row
\cell value_of_builtin_frame_reg()\cell std-regs.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_adjust_breakpoint_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_adjust_breakpoint_address ( struct gdbarch* gdbarch, CORE_ADDR bpaddr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell adjust_breakpoint_address()\cell breakpoint.c\cell\row
\cell step_into_function()\cell infrun.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_adjust_breakpoint_address_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_adjust_breakpoint_address_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell adjust_breakpoint_address()\cell breakpoint.c\cell\row
\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell step_into_function()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_adjust_ehframe_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_adjust_ehframe_regnum ( struct gdbarch* gdbarch, int regnum, int eh_frame_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell dwarf2_frame_adjust_regnum()\cell dwarf2-frame.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_alloc()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch* gdbarch_alloc ( const struct gdbarch_info* info, struct gdbarch_tdep* tdep )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell alloc_gdbarch_data()\cell gdbarch.c\cell\row
\cell gdbarch_bfd_arch_info()\cell gdbarch.c\cell\row
\cell gdbarch_int_bit()\cell gdbarch.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_begin(), _obstack_newchunk()\cell\cell\row
Refs Func:\cell cannot_register_not()\cell arch-utils.c\cell\row
\cell construct_inferior_arguments()\cell infcmd.c\cell\row
\cell core_addr_identity()\cell arch-utils.c\cell\row
\cell default_adjust_ehframe_regnum()\cell arch-utils.c\cell\row
\cell default_coff_make_msymbol_special()\cell arch-utils.c\cell\row
\cell default_dbx_make_msymbol_special()\cell arch-utils.c\cell\row
\cell default_elf_make_msymbol_special()\cell arch-utils.c\cell\row
\cell default_memory_insert_breakpoint()\cell mem-break.c\cell\row
\cell default_memory_remove_breakpoint()\cell mem-break.c\cell\row
\cell default_print_registers_info()\cell infcmd.c\cell\row
\cell default_register_reggroup_p()\cell reggroups.c\cell\row
\cell default_stabs_argument_has_addr()\cell arch-utils.c\cell\row
\cell generic_convert_register_p()\cell arch-utils.c\cell\row
\cell generic_in_function_epilogue_p()\cell arch-utils.c\cell\row
\cell generic_in_solib_return_trampoline()\cell arch-utils.c\cell\row
\cell generic_register_byte()\cell arch-utils.c\cell\row
\cell generic_skip_solib_resolver()\cell arch-utils.c\cell\row
\cell generic_skip_trampoline_code()\cell arch-utils.c\cell\row
\cell generic_target_write_pc()\cell regcache.c\cell\row
\cell legacy_register_sim_regno()\cell arch-utils.c\cell\row
\cell legacy_return_value()\cell arch-utils.c\cell\row
\cell no_op_reg_to_regnum()\cell arch-utils.c\cell\row
\cell unsigned_address_to_pointer()\cell findvar.c\cell\row
\cell unsigned_pointer_to_address()\cell findvar.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Refs Var:\cell  convert_from_func_ptr_addr_identity, generic_remote_translate_xfer_address, generic_use_struct_convention, legacy_extract_return_value, legacy_store_return_value, legacy_virtual_frame_pointer\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_believe_pcc_promotion()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_believe_pcc_promotion ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_bfd_arch_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct bfd_arch_info* gdbarch_bfd_arch_info ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell add_kext_command()\cell symfile.c\cell\row
\cell gdb_disassemble_info()\cell disasm.c\cell\row
\cell gdb_disassemble_info_noprint()\cell target/target.c\cell\row
\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell gdbarch_info_fill()\cell arch-utils.c\cell\row
\cell gdbarch_instruction_length()\cell disasm.c\cell\row
\cell gdbarch_update_p()\cell arch-utils.c\cell\row
\cell show_architecture()\cell arch-utils.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_bfd_vma_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_bfd_vma_bit ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell build_gdbtypes()\cell gdbtypes.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_breakpoint_from_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 const gdb_byte* gdbarch_breakpoint_from_pc ( struct gdbarch* gdbarch, CORE_ADDR* pcptr, int* lenptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell default_memory_insert_breakpoint()\cell mem-break.c\cell\row
\cell default_memory_remove_breakpoint()\cell mem-break.c\cell\row
\cell deprecated_read_memory_nobpt()\cell breakpoint.c\cell\row
\cell generic_push_dummy_code()\cell infcall.c\cell\row
\cell remote_insert_breakpoint()\cell remote.c\cell\row
\cell remote_insert_hw_breakpoint()\cell remote.c\cell\row
\cell remote_remove_breakpoint()\cell remote.c\cell\row
\cell remote_remove_hw_breakpoint()\cell remote.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_byte_order()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_byte_order ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell decode_packed_array()\cell ada-lang.c\cell\row
\cell default_double_format()\cell arch-utils.c\cell\row
\cell default_float_format()\cell arch-utils.c\cell\row
\cell default_print_registers_info()\cell infcmd.c\cell\row
\cell define_symbol()\cell stabsread.c\cell\row
\cell dwarf2_add_field()\cell dwarf2read.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell extract_long_unsigned_integer_with_byte_order()\cell findvar.c\cell\row
\cell extract_signed_integer_with_byte_order()\cell findvar.c\cell\row
\cell extract_unsigned_integer_with_byte_order()\cell findvar.c\cell\row
\cell gdb_disassemble_info()\cell disasm.c\cell\row
\cell gdb_disassemble_info_noprint()\cell target/target.c\cell\row
\cell gdbarch_info_fill()\cell arch-utils.c\cell\row
\cell gen_bitfield_ref()\cell ax-gdb.c\cell\row
\cell modify_field()\cell value.c\cell\row
\cell move_bits()\cell ada-lang.c\cell\row
\cell print_binary_chars()\cell valprint.c\cell\row
\cell print_char_chars_with_byte_order()\cell valprint.c\cell\row
\cell print_decimal_chars()\cell valprint.c\cell\row
\cell print_hex_chars_with_byte_order()\cell valprint.c\cell\row
\cell print_octal_chars()\cell valprint.c\cell\row
\cell process_coff_symbol()\cell coffread.c\cell\row
\cell regcache_dump()\cell regcache.c\cell\row
\cell show_endian()\cell arch-utils.c\cell\row
\cell store_signed_integer_with_byte_order()\cell findvar.c\cell\row
\cell store_unsigned_integer_with_byte_order()\cell findvar.c\cell\row
\cell struct_type()\cell dwarfread.c\cell\row
\cell unpack_field_as_long()\cell value.c\cell\row
\cell value_bit_index()\cell valarith.c\cell\row
\cell value_from_register()\cell findvar.c\cell\row
\cell value_slice()\cell valops.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_call_dummy_location()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_call_dummy_location ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_cannot_fetch_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_cannot_fetch_register ( struct gdbarch* gdbarch, int regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_cannot_step_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_cannot_step_breakpoint ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell resume()\cell infrun.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_cannot_store_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_cannot_store_register ( struct gdbarch* gdbarch, int regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell regcache_raw_write()\cell regcache.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_char_signed()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_char_signed ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell build_gdbtypes()\cell gdbtypes.c\cell\row
\cell gdbtypes_post_init()\cell gdbtypes.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_coff_make_msymbol_special()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_coff_make_msymbol_special ( struct gdbarch* gdbarch, int val, struct minimal_symbol* msym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell coff_symtab_read()\cell coffread.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_construct_inferior_arguments()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* gdbarch_construct_inferior_arguments ( struct gdbarch* gdbarch, int argc, char** argv )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell get_inferior_args()\cell infcmd.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_convert_from_func_ptr_addr()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_convert_from_func_ptr_addr ( struct gdbarch* gdbarch, CORE_ADDR addr, struct target_ops* targ )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell find_function_addr()\cell infcall.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell inside_main_func()\cell frame.c\cell\row
\cell print_function_pointer_address()\cell c-valprint.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_convert_register_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_convert_register_p ( struct gdbarch* gdbarch, int regnum, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell dwarf2_evaluate_loc_desc()\cell dwarf2loc.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_from_register()\cell findvar.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_data_register_post_init()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_data* gdbarch_data_register_post_init ( gdbarch_data_post_init_ftype* post_init )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell gdbarch_data_register()\cell gdbarch.c\cell\row
Called by:\cell _initialize_gdbtypes()\cell gdbtypes.c\cell\row
\cell _initialize_language()\cell language.c\cell\row
\cell _initialize_regcache()\cell regcache.c\cell\row
\cell _initialize_reggroup()\cell reggroups.c\cell\row
\cell _initialize_remote()\cell remote.c\cell\row
\cell _initialize_user_regs()\cell user-regs.c\cell\row
\cell init_gnuv3_ops()\cell gnu-v3-abi.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_data_register_pre_init()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_data* gdbarch_data_register_pre_init ( gdbarch_data_pre_init_ftype* pre_init )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell gdbarch_data_register()\cell gdbarch.c\cell\row
Called by:\cell _initialize_dwarf2_frame()\cell dwarf2-frame.c\cell\row
\cell _initialize_frame_base()\cell frame-base.c\cell\row
\cell _initialize_frame_unwind()\cell frame-unwind.c\cell\row
\cell _initialize_solib()\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_dbx_make_msymbol_special()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_dbx_make_msymbol_special ( struct gdbarch* gdbarch, int16_t desc, struct minimal_symbol* msym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell record_minimal_symbol()\cell dbxread.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_decr_pc_after_break()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_decr_pc_after_break ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell adjust_pc_after_break()\cell infrun.c\cell\row
\cell deprecated_pc_in_call_dummy()\cell dummy-frame.c\cell\row
\cell trace_dump_command()\cell tracepoint.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_extract_return_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_deprecated_extract_return_value ( struct gdbarch* gdbarch, struct type* type, gdb_byte* regbuf, gdb_byte* valbuf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell legacy_extract_return_value()\cell arch-utils.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_extract_struct_value_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_deprecated_extract_struct_value_address ( struct gdbarch* gdbarch, struct regcache* regcache )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_extract_struct_value_address_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_deprecated_extract_struct_value_address_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_fp_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_deprecated_fp_regnum ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell legacy_virtual_frame_pointer()\cell arch-utils.c\cell\row
\cell value_of_builtin_frame_fp_reg()\cell std-regs.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_function_start_offset()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_deprecated_function_start_offset ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell find_function_addr()\cell infcall.c\cell\row
\cell find_function_start_sal()\cell symtab.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell minsym_found()\cell linespec.c\cell\row
\cell minsyms_found()\cell linespec.c\cell\row
\cell skip_prologue_using_sal()\cell symtab.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_push_arguments()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_deprecated_push_arguments ( struct gdbarch* gdbarch, int nargs, struct value** args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_push_arguments_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_deprecated_push_arguments_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_reg_struct_has_addr()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_deprecated_reg_struct_has_addr ( struct gdbarch* gdbarch, int gcc_p, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell default_stabs_argument_has_addr()\cell arch-utils.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_reg_struct_has_addr_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_deprecated_reg_struct_has_addr_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell default_stabs_argument_has_addr()\cell arch-utils.c\cell\row
\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_register_byte()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_deprecated_register_byte ( struct gdbarch* gdbarch, int reg_nr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell deprecated_read_register_bytes()\cell regcache.c\cell\row
\cell deprecated_write_register_bytes()\cell regcache.c\cell\row
\cell init_remote_state()\cell remote.c\cell\row
\cell regcache_dump()\cell regcache.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_register_byte_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_deprecated_register_byte_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
Refs Func:\cell generic_register_byte()\cell arch-utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_register_size()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_deprecated_register_size ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_saved_pc_after_call()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_deprecated_saved_pc_after_call ( struct gdbarch* gdbarch, struct frame_info* frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_saved_pc_after_call_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_deprecated_saved_pc_after_call_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_stack_align()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_deprecated_stack_align ( struct gdbarch* gdbarch, CORE_ADDR sp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_stack_align_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_deprecated_stack_align_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_store_return_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_deprecated_store_return_value ( struct gdbarch* gdbarch, struct type* type, gdb_byte* valbuf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell legacy_store_return_value()\cell arch-utils.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_store_struct_return()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_deprecated_store_struct_return ( struct gdbarch* gdbarch, CORE_ADDR addr, CORE_ADDR sp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_store_struct_return_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_deprecated_store_struct_return_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_deprecated_use_struct_convention()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_deprecated_use_struct_convention ( struct gdbarch* gdbarch, int gcc_p, struct type* value_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell legacy_return_value()\cell arch-utils.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_double_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_double_bit ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell _initialize_mdebugread()\cell mdebugread.c\cell\row
\cell ada_create_fundamental_type()\cell ada-lang.c\cell\row
\cell ada_language_arch_info()\cell ada-lang.c\cell\row
\cell build_fortran_types()\cell f-lang.c\cell\row
\cell build_gdbtypes()\cell gdbtypes.c\cell\row
\cell c_create_fundamental_type()\cell c-lang.c\cell\row
\cell f_create_fundamental_type()\cell f-lang.c\cell\row
\cell floatformat_from_length()\cell doublest.c\cell\row
\cell gdbtypes_post_init()\cell gdbtypes.c\cell\row
\cell m2_create_fundamental_type()\cell m2-lang.c\cell\row
\cell objc_create_fundamental_type()\cell objc-lang.c\cell\row
\cell pascal_create_fundamental_type()\cell p-lang.c\cell\row
\cell processReal()\cell ada-exp.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_double_format()\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct floatformat* gdbarch_double_format ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell floatformat_from_length()\cell doublest.c\cell\row
\cell gdbtypes_post_init()\cell gdbtypes.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_dump()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_dump ( struct gdbarch* current_gdbarch, struct ui_file* file )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell gdbarch_address_class_name_to_type_flags_p()\cell gdbarch.c\cell\row
\cell gdbarch_address_class_type_flags_p()\cell gdbarch.c\cell\row
\cell gdbarch_address_class_type_flags_to_name_p()\cell gdbarch.c\cell\row
\cell gdbarch_adjust_breakpoint_address_p()\cell gdbarch.c\cell\row
\cell gdbarch_bfd_arch_info()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_extract_struct_value_address_p()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_push_arguments_p()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_reg_struct_has_addr_p()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_register_byte_p()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_saved_pc_after_call_p()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_stack_align_p()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_store_struct_return_p()\cell gdbarch.c\cell\row
\cell gdbarch_fetch_pointer_argument_p()\cell gdbarch.c\cell\row
\cell gdbarch_fetch_tls_load_module_address_p()\cell gdbarch.c\cell\row
\cell gdbarch_frame_align_p()\cell gdbarch.c\cell\row
\cell gdbarch_frame_num_args_p()\cell gdbarch.c\cell\row
\cell gdbarch_get_longjmp_target_p()\cell gdbarch.c\cell\row
\cell gdbarch_integer_to_address_p()\cell gdbarch.c\cell\row
\cell gdbarch_name_of_malloc()\cell gdbarch.c\cell\row
\cell gdbarch_print_float_info_p()\cell gdbarch.c\cell\row
\cell gdbarch_print_vector_info_p()\cell gdbarch.c\cell\row
\cell gdbarch_pseudo_register_read_p()\cell gdbarch.c\cell\row
\cell gdbarch_pseudo_register_write_p()\cell gdbarch.c\cell\row
\cell gdbarch_push_dummy_call_p()\cell gdbarch.c\cell\row
\cell gdbarch_push_dummy_code_p()\cell gdbarch.c\cell\row
\cell gdbarch_read_pc_p()\cell gdbarch.c\cell\row
\cell gdbarch_read_sp_p()\cell gdbarch.c\cell\row
\cell gdbarch_register_bytes_ok_p()\cell gdbarch.c\cell\row
\cell gdbarch_register_type_p()\cell gdbarch.c\cell\row
\cell gdbarch_regset_from_core_section_p()\cell gdbarch.c\cell\row
\cell gdbarch_return_value_p()\cell gdbarch.c\cell\row
\cell gdbarch_single_step_through_delay_p()\cell gdbarch.c\cell\row
\cell gdbarch_skip_prologue_addr_ctx_p()\cell gdbarch.c\cell\row
\cell gdbarch_software_single_step_p()\cell gdbarch.c\cell\row
\cell gdbarch_unwind_dummy_id_p()\cell gdbarch.c\cell\row
\cell gdbarch_unwind_pc_p()\cell gdbarch.c\cell\row
\cell gdbarch_unwind_sp_p()\cell gdbarch.c\cell\row
\cell paddr_d()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell pformat()\cell gdbarch.c\cell\row
Called by:\cell find_arch_by_info()\cell gdbarch.c\cell\row
\cell maintenance_print_architecture()\cell maint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_dwarf2_reg_to_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_dwarf2_reg_to_regnum ( struct gdbarch* gdbarch, int dwarf2_regnr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell dwarf2_evaluate_loc_desc()\cell dwarf2loc.c\cell\row
\cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_prev_register()\cell dwarf2-frame.c\cell\row
\cell dwarf_expr_read_reg()\cell dwarf2loc.c\cell\row
\cell execute_cfa_program()\cell dwarf2-frame.c\cell\row
\cell locexpr_describe_location()\cell dwarf2loc.c\cell\row
\cell print_single_dwarf_location()\cell dwarf2loc.c\cell\row
\cell read_reg()\cell dwarf2-frame.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_dwarf_reg_to_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_dwarf_reg_to_regnum ( struct gdbarch* gdbarch, int dwarf_regnr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell locval()\cell dwarfread.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_ecoff_reg_to_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_ecoff_reg_to_regnum ( struct gdbarch* gdbarch, int ecoff_regnr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell parse_symbol()\cell mdebugread.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_elf_make_msymbol_special()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_elf_make_msymbol_special ( struct gdbarch* gdbarch, asymbol* sym, struct minimal_symbol* msym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell elf_symtab_read()\cell elfread.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_extract_return_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_extract_return_value ( struct gdbarch* gdbarch, struct type* type, struct regcache* regcache, gdb_byte* valbuf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell legacy_return_value()\cell arch-utils.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_fetch_pointer_argument()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_fetch_pointer_argument ( struct gdbarch* gdbarch, struct frame_info* frame, int argi, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell objc_handle_update()\cell objc-lang.c\cell\row
\cell resolve_msgsend()\cell objc-lang.c\cell\row
\cell resolve_msgsend_stret()\cell objc-lang.c\cell\row
\cell resolve_msgsend_super()\cell objc-lang.c\cell\row
\cell resolve_msgsend_super_stret()\cell objc-lang.c\cell\row
\cell resolve_newruntime_objc_msgsend()\cell objc-lang.c\cell\row
\cell resolve_newruntime_objc_msgsendsuper()\cell objc-lang.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_fetch_pointer_argument_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_fetch_pointer_argument_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_fetch_tls_load_module_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_fetch_tls_load_module_address ( struct gdbarch* gdbarch, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell dwarf_expr_tls_address()\cell dwarf2loc.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_fetch_tls_load_module_address_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_fetch_tls_load_module_address_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell dwarf_expr_tls_address()\cell dwarf2loc.c\cell\row
\cell gdbarch_dump()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_find_by_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch* gdbarch_find_by_info ( struct gdbarch_info info )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell current_gdbarch_swap_in_hack()\cell gdbarch.c\cell\row
\cell current_gdbarch_swap_out_hack()\cell gdbarch.c\cell\row
\cell find_arch_by_info()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_from_bfd()\cell arch-utils.c\cell\row
\cell gdbarch_update_p()\cell arch-utils.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_float_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_float_bit ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell _initialize_m2_language()\cell m2-lang.c\cell\row
\cell _initialize_mdebugread()\cell mdebugread.c\cell\row
\cell ada_create_fundamental_type()\cell ada-lang.c\cell\row
\cell ada_language_arch_info()\cell ada-lang.c\cell\row
\cell build_fortran_types()\cell f-lang.c\cell\row
\cell build_gdbtypes()\cell gdbtypes.c\cell\row
\cell c_create_fundamental_type()\cell c-lang.c\cell\row
\cell f_create_fundamental_type()\cell f-lang.c\cell\row
\cell floatformat_from_length()\cell doublest.c\cell\row
\cell gdbtypes_post_init()\cell gdbtypes.c\cell\row
\cell m2_create_fundamental_type()\cell m2-lang.c\cell\row
\cell objc_create_fundamental_type()\cell objc-lang.c\cell\row
\cell pascal_create_fundamental_type()\cell p-lang.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_float_format()\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct floatformat* gdbarch_float_format ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell floatformat_from_length()\cell doublest.c\cell\row
\cell gdbtypes_post_init()\cell gdbtypes.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_fp0_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_fp0_regnum ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_frame_align()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_frame_align ( struct gdbarch* gdbarch, CORE_ADDR address )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell ensure_lval()\cell ada-lang.c\cell\row
\cell generic_push_dummy_code()\cell infcall.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_frame_align_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_frame_align_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell ensure_lval()\cell ada-lang.c\cell\row
\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell generic_push_dummy_code()\cell infcall.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_frame_args_skip()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_frame_args_skip ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell print_frame_args()\cell stack.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_frame_num_args()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_frame_num_args ( struct gdbarch* gdbarch, struct frame_info* frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell frame_info()\cell stack.c\cell\row
\cell print_args_stub()\cell stack.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_frame_num_args_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_frame_num_args_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell frame_info()\cell stack.c\cell\row
\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell print_args_stub()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_frame_red_zone_size()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_frame_red_zone_size ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_free()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_free ( struct gdbarch* arch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Func:\cell  obstack_free()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_get_longjmp_target()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_get_longjmp_target ( struct gdbarch* gdbarch, CORE_ADDR* pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_get_longjmp_target_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_get_longjmp_target_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell breakpoint_re_set_all()\cell breakpoint.c\cell\row
\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_have_nonsteppable_watchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_have_nonsteppable_watchpoint ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_in_function_epilogue_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_in_function_epilogue_p ( struct gdbarch* gdbarch, CORE_ADDR addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell watchpoint_check()\cell breakpoint.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_in_solib_return_trampoline()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_in_solib_return_trampoline ( struct gdbarch* gdbarch, CORE_ADDR pc, const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_inner_than()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_inner_than ( struct gdbarch* gdbarch, CORE_ADDR lhs, CORE_ADDR rhs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell ensure_lval()\cell ada-lang.c\cell\row
\cell frame_id_inner()\cell frame.c\cell\row
\cell generic_push_dummy_code()\cell infcall.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_int_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_int_bit ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell _initialize_m2_language()\cell m2-lang.c\cell\row
\cell _initialize_mdebugread()\cell mdebugread.c\cell\row
\cell ada_create_fundamental_type()\cell ada-lang.c\cell\row
\cell ada_language_arch_info()\cell ada-lang.c\cell\row
\cell adjust_field_bitsize()\cell stabsread.c\cell\row
\cell build_fortran_types()\cell f-lang.c\cell\row
\cell build_gdbtypes()\cell gdbtypes.c\cell\row
\cell c_create_fundamental_type()\cell c-lang.c\cell\row
\cell coff_read_enum_type()\cell coffread.c\cell\row
\cell define_symbol()\cell stabsread.c\cell\row
\cell f_create_fundamental_type()\cell f-lang.c\cell\row
\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\cell gdbtypes_post_init()\cell gdbtypes.c\cell\row
\cell m2_create_fundamental_type()\cell m2-lang.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell objc_create_fundamental_type()\cell objc-lang.c\cell\row
\cell parse_number()\cell f-exp.c\cell\row
\cell parse_symbol()\cell mdebugread.c\cell\row
\cell pascal_create_fundamental_type()\cell p-lang.c\cell\row
\cell processInt()\cell ada-exp.c\cell\row
\cell read_enum_type()\cell stabsread.c\cell\row
\cell read_range_type()\cell stabsread.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_integer_to_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_integer_to_address ( struct gdbarch* gdbarch, struct type* type, const gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell value_as_address()\cell value.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_integer_to_address_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_integer_to_address_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_list_lookup_by_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_list* gdbarch_list_lookup_by_info ( struct gdbarch_list* arches, const struct gdbarch_info* info )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_long_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_long_bit ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell _initialize_scheme_language()\cell scm-lang.c\cell\row
\cell ada_create_fundamental_type()\cell ada-lang.c\cell\row
\cell ada_language_arch_info()\cell ada-lang.c\cell\row
\cell add_enum_psymbol()\cell dwarfread.c\cell\row
\cell build_gdbtypes()\cell gdbtypes.c\cell\row
\cell c_create_fundamental_type()\cell c-lang.c\cell\row
\cell decode_base_type()\cell coffread.c\cell\row
\cell decode_subscript_data_item()\cell dwarfread.c\cell\row
\cell dwarf2_scan_inlined_section_for_psymbols()\cell dwarf2read.c\cell\row
\cell enum_type()\cell dwarfread.c\cell\row
\cell f_create_fundamental_type()\cell f-lang.c\cell\row
\cell find_implementation_from_class()\cell objc-lang.c\cell\row
\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\cell gdbtypes_post_init()\cell gdbtypes.c\cell\row
\cell locval()\cell dwarfread.c\cell\row
\cell m2_create_fundamental_type()\cell m2-lang.c\cell\row
\cell new_objc_runtime_internals()\cell objc-lang.c\cell\row
\cell objc_create_fundamental_type()\cell objc-lang.c\cell\row
\cell objc_init_trampoline_observer()\cell objc-lang.c\cell\row
\cell objc_read_trampoline_region()\cell objc-lang.c\cell\row
\cell parse_number()\cell f-exp.c\cell\row
\cell pascal_create_fundamental_type()\cell p-lang.c\cell\row
\cell processInt()\cell ada-exp.c\cell\row
\cell read_objc_class()\cell objc-lang.c\cell\row
\cell read_objc_method()\cell objc-lang.c\cell\row
\cell read_objc_method_list_method()\cell objc-lang.c\cell\row
\cell read_objc_method_list_nmethods()\cell objc-lang.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
\cell read_objc_super()\cell objc-lang.c\cell\row
\cell read_target_long_array()\cell symfile.c\cell\row
\cell resolve_newruntime_objc_msgsend()\cell objc-lang.c\cell\row
\cell resolve_newruntime_objc_msgsendsuper()\cell objc-lang.c\cell\row
\cell simple_overlay_update_1()\cell symfile.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_objc_target_type()\cell objc-lang.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_long_double_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_long_double_bit ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell ada_create_fundamental_type()\cell ada-lang.c\cell\row
\cell ada_language_arch_info()\cell ada-lang.c\cell\row
\cell build_fortran_types()\cell f-lang.c\cell\row
\cell build_gdbtypes()\cell gdbtypes.c\cell\row
\cell c_create_fundamental_type()\cell c-lang.c\cell\row
\cell define_symbol()\cell stabsread.c\cell\row
\cell f_create_fundamental_type()\cell f-lang.c\cell\row
\cell floatformat_from_length()\cell doublest.c\cell\row
\cell gdbtypes_post_init()\cell gdbtypes.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell m2_create_fundamental_type()\cell m2-lang.c\cell\row
\cell objc_create_fundamental_type()\cell objc-lang.c\cell\row
\cell pascal_create_fundamental_type()\cell p-lang.c\cell\row
\cell processReal()\cell ada-exp.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_long_double_format()\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct floatformat* gdbarch_long_double_format ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell define_symbol()\cell stabsread.c\cell\row
\cell floatformat_from_length()\cell doublest.c\cell\row
\cell gdbtypes_post_init()\cell gdbtypes.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_long_long_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_long_long_bit ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell ada_create_fundamental_type()\cell ada-lang.c\cell\row
\cell ada_language_arch_info()\cell ada-lang.c\cell\row
\cell build_gdbtypes()\cell gdbtypes.c\cell\row
\cell c_create_fundamental_type()\cell c-lang.c\cell\row
\cell f_create_fundamental_type()\cell f-lang.c\cell\row
\cell gdbtypes_post_init()\cell gdbtypes.c\cell\row
\cell m2_create_fundamental_type()\cell m2-lang.c\cell\row
\cell objc_create_fundamental_type()\cell objc-lang.c\cell\row
\cell parse_number()\cell c-exp.c\cell\row
\cell pascal_create_fundamental_type()\cell p-lang.c\cell\row
\cell read_range_type()\cell stabsread.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_memory_insert_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_memory_insert_breakpoint ( struct gdbarch* gdbarch, CORE_ADDR addr, gdb_byte* contents_cache )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell memory_insert_breakpoint()\cell mem-break.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_memory_remove_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_memory_remove_breakpoint ( struct gdbarch* gdbarch, CORE_ADDR addr, gdb_byte* contents_cache )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell memory_remove_breakpoint()\cell mem-break.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_name_of_malloc()\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* gdbarch_name_of_malloc ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell allocate_space_in_inferior_malloc()\cell valops.c\cell\row
\cell gdbarch_dump()\cell gdbarch.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_num_pseudo_regs()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_num_pseudo_regs ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell debug_print_register()\cell target/target.c\cell\row
\cell default_print_registers_info()\cell infcmd.c\cell\row
\cell define_symbol()\cell stabsread.c\cell\row
\cell deprecated_read_register_bytes()\cell regcache.c\cell\row
\cell deprecated_write_register_bytes()\cell regcache.c\cell\row
\cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell generic_register_byte()\cell arch-utils.c\cell\row
\cell generic_register_size()\cell arch-utils.c\cell\row
\cell init_regcache_descr()\cell regcache.c\cell\row
\cell init_remote_state()\cell remote.c\cell\row
\cell packet_reg_from_pnum()\cell remote.c\cell\row
\cell packet_reg_from_regnum()\cell remote.c\cell\row
\cell print_float_info()\cell infcmd.c\cell\row
\cell print_vector_info()\cell infcmd.c\cell\row
\cell regcache_dump()\cell regcache.c\cell\row
\cell register_size()\cell regcache.c\cell\row
\cell registers_info()\cell infcmd.c\cell\row
\cell remote_fetch_registers()\cell remote.c\cell\row
\cell remote_store_registers()\cell remote.c\cell\row
\cell trad_frame_alloc_saved_regs()\cell trad-frame.c\cell\row
\cell user_reg_map_name_to_regnum()\cell user-regs.c\cell\row
\cell user_reg_map_regnum_to_name()\cell user-regs.c\cell\row
\cell value_of_register()\cell findvar.c\cell\row
\cell value_of_user_reg()\cell user-regs.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_num_regs()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_num_regs ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell debug_print_register()\cell target/target.c\cell\row
\cell default_print_registers_info()\cell infcmd.c\cell\row
\cell default_register_reggroup_p()\cell reggroups.c\cell\row
\cell define_symbol()\cell stabsread.c\cell\row
\cell deprecated_read_register_bytes()\cell regcache.c\cell\row
\cell deprecated_registers_fetched()\cell regcache.c\cell\row
\cell deprecated_write_register_bytes()\cell regcache.c\cell\row
\cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
\cell encode_actions()\cell tracepoint.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell generic_register_byte()\cell arch-utils.c\cell\row
\cell generic_register_size()\cell arch-utils.c\cell\row
\cell init_regcache_descr()\cell regcache.c\cell\row
\cell init_remote_state()\cell remote.c\cell\row
\cell legacy_register_sim_regno()\cell arch-utils.c\cell\row
\cell legacy_virtual_frame_pointer()\cell arch-utils.c\cell\row
\cell packet_reg_from_pnum()\cell remote.c\cell\row
\cell packet_reg_from_regnum()\cell remote.c\cell\row
\cell print_float_info()\cell infcmd.c\cell\row
\cell print_vector_info()\cell infcmd.c\cell\row
\cell regcache_dump()\cell regcache.c\cell\row
\cell register_size()\cell regcache.c\cell\row
\cell registers_info()\cell infcmd.c\cell\row
\cell remote_fetch_registers()\cell remote.c\cell\row
\cell remote_prepare_to_store()\cell remote.c\cell\row
\cell remote_store_registers()\cell remote.c\cell\row
\cell trad_frame_alloc_saved_regs()\cell trad-frame.c\cell\row
\cell user_reg_map_name_to_regnum()\cell user-regs.c\cell\row
\cell user_reg_map_regnum_to_name()\cell user-regs.c\cell\row
\cell value_of_register()\cell findvar.c\cell\row
\cell value_of_user_reg()\cell user-regs.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_obstack_zalloc()\par}
{\s5\f1\fs20\ql\sb50\sa50 void* gdbarch_obstack_zalloc ( struct gdbarch* arch, long size )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell ada_language_arch_info()\cell ada-lang.c\cell\row
\cell alloc_gdbarch_data()\cell gdbarch.c\cell\row
\cell c_language_arch_info()\cell c-lang.c\cell\row
\cell current_gdbarch_swap_init_hack()\cell gdbarch.c\cell\row
\cell frame_base_append_sniffer()\cell frame-base.c\cell\row
\cell frame_unwind_append_sniffer()\cell frame-unwind.c\cell\row
\cell frame_unwind_prepend_unwinder()\cell frame-unwind.c\cell\row
\cell gdbtypes_post_init()\cell gdbtypes.c\cell\row
\cell init_regcache_descr()\cell regcache.c\cell\row
\cell init_remote_state()\cell remote.c\cell\row
\cell language_gdbarch_post_init()\cell language.c\cell\row
\cell reggroup_add()\cell reggroups.c\cell\row
\cell reggroups_init()\cell reggroups.c\cell\row
\cell tramp_frame_prepend_unwinder()\cell tramp-frame.c\cell\row
\cell unknown_language_arch_info()\cell language.c\cell\row
\cell user_reg_add()\cell user-regs.c\cell\row
\cell user_reg_replace()\cell user-regs.c\cell\row
\cell user_regs_init()\cell user-regs.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_osabi()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum gdb_osabi gdbarch_osabi ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell convert_sect_addrs_to_offsets_via_on_disk_file()\cell symfile.c\cell\row
\cell gdbarch_info_fill()\cell arch-utils.c\cell\row
\cell open_bfd_matching_arch()\cell symfile.c\cell\row
\cell show_osabi()\cell osabi.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_pc_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_pc_regnum ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell dwarf2_frame_default_init_reg()\cell dwarf2-frame.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell generic_target_write_pc()\cell regcache.c\cell\row
\cell read_pc_pid()\cell regcache.c\cell\row
\cell value_of_builtin_frame_pc_reg()\cell std-regs.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_pointer_to_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_pointer_to_address ( struct gdbarch* gdbarch, struct type* type, const gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell extract_typed_address()\cell findvar.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_print_float_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_print_float_info ( struct gdbarch* gdbarch, struct ui_file* file, struct frame_info* frame, const char* args )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell print_float_info()\cell infcmd.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_print_float_info_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_print_float_info_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell print_float_info()\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_print_insn()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_print_insn ( struct gdbarch* gdbarch, bfd_vma vma, struct disassemble_info* info )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell dump_insns()\cell disasm.c\cell\row
\cell find_pc_offset()\cell disasm.c\cell\row
\cell gdb_print_insn()\cell disasm.c\cell\row
\cell length_of_this_instruction()\cell target/target.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_print_registers_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_print_registers_info ( struct gdbarch* gdbarch, struct ui_file* file, struct frame_info* frame, int regnum, int all )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell print_float_info()\cell infcmd.c\cell\row
\cell print_vector_info()\cell infcmd.c\cell\row
\cell registers_info()\cell infcmd.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_print_vector_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_print_vector_info ( struct gdbarch* gdbarch, struct ui_file* file, struct frame_info* frame, const char* args )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell print_vector_info()\cell infcmd.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_print_vector_info_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_print_vector_info_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell print_vector_info()\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_printable_names()\par}
{\s5\f1\fs20\ql\sb50\sa50 const char** gdbarch_printable_names ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell append_name()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  bfd_lookup_arch()\cell\cell\row
Called by:\cell initialize_current_architecture()\cell arch-utils.c\cell\row
Refs Var:\cell gdbarch_registry\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_ps_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_ps_regnum ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell value_of_builtin_frame_ps_reg()\cell std-regs.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_pseudo_register_read()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_pseudo_register_read ( struct gdbarch* gdbarch, struct regcache* regcache, int cookednum, gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell regcache_cooked_read()\cell regcache.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_pseudo_register_read_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_pseudo_register_read_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_pseudo_register_write()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_pseudo_register_write ( struct gdbarch* gdbarch, struct regcache* regcache, int cookednum, const gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell regcache_cooked_write()\cell regcache.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_pseudo_register_write_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_pseudo_register_write_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_ptr_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_ptr_bit ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell attribute_size()\cell dwarfread.c\cell\row
\cell build_gdb_vtable_type()\cell gnu-v3-abi.c\cell\row
\cell completedieinfo()\cell dwarfread.c\cell\row
\cell decode_format()\cell printcmd.c\cell\row
\cell decode_line_numbers()\cell dwarfread.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell get_java_object_header_size()\cell jv-lang.c\cell\row
\cell info_sharedlibrary_command()\cell solib.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell make_pointer_type()\cell gdbtypes.c\cell\row
\cell make_reference_type()\cell gdbtypes.c\cell\row
\cell pascal_val_print()\cell p-valprint.c\cell\row
\cell read_tag_pointer_type()\cell dwarfread.c\cell\row
\cell verify_gdbarch()\cell gdbarch.c\cell\row
\cell x86_frame_prev_register()\cell target/x86-shared-tdep.c\cell\row
\cell x86_frame_this_id()\cell target/x86-shared-tdep.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_push_dummy_call()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_push_dummy_call ( struct gdbarch* gdbarch, struct value* function, struct regcache* regcache, CORE_ADDR bp_addr, int nargs, struct value** args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_push_dummy_call_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_push_dummy_call_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_push_dummy_code()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_push_dummy_code ( struct gdbarch* gdbarch, CORE_ADDR sp, CORE_ADDR funaddr, int using_gcc, struct value** args, int nargs, struct type* value_type, CORE_ADDR* real_pc, CORE_ADDR* bp_addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell push_dummy_code()\cell infcall.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_push_dummy_code_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_push_dummy_code_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell push_dummy_code()\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_read_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_read_pc ( struct gdbarch* gdbarch, ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell read_pc_pid()\cell regcache.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_read_pc_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_read_pc_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell read_pc_pid()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_read_sp()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_read_sp ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell frame_sp_unwind()\cell frame.c\cell\row
\cell read_sp()\cell regcache.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_read_sp_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_read_sp_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell frame_sp_unwind()\cell frame.c\cell\row
\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell read_sp()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_register ( enum bfd_architecture bfd_architecture, gdbarch_init_ftype* init, gdbarch_dump_tdep_ftype* dump_tdep )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  bfd_lookup_arch()\cell\cell\row
Called by:\cell register_gdbarch_init()\cell gdbarch.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\cell gdbarch_registry\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_register_bytes_ok()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_register_bytes_ok ( struct gdbarch* gdbarch, long nr_bytes )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell remote_fetch_registers()\cell remote.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_register_bytes_ok_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_register_bytes_ok_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell remote_fetch_registers()\cell remote.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_register_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* gdbarch_register_name ( struct gdbarch* gdbarch, int regnr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell address_info()\cell printcmd.c\cell\row
\cell debug_print_register()\cell target/target.c\cell\row
\cell default_print_registers_info()\cell infcmd.c\cell\row
\cell default_register_reggroup_p()\cell reggroups.c\cell\row
\cell deprecated_read_register_bytes()\cell regcache.c\cell\row
\cell execute_cfa_program()\cell dwarf2-frame.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell legacy_register_sim_regno()\cell arch-utils.c\cell\row
\cell locate_var_value()\cell findvar.c\cell\row
\cell locexpr_describe_location()\cell dwarf2loc.c\cell\row
\cell print_single_dwarf_location()\cell dwarf2loc.c\cell\row
\cell regcache_dump()\cell regcache.c\cell\row
\cell scope_info()\cell tracepoint.c\cell\row
\cell trad_frame_get_prev_register()\cell trad-frame.c\cell\row
\cell user_reg_map_name_to_regnum()\cell user-regs.c\cell\row
\cell user_reg_map_regnum_to_name()\cell user-regs.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_register_reggroup_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_register_reggroup_p ( struct gdbarch* gdbarch, int regnum, struct reggroup* reggroup )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell default_print_registers_info()\cell infcmd.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell print_float_info()\cell infcmd.c\cell\row
\cell print_vector_info()\cell infcmd.c\cell\row
\cell regcache_dump()\cell regcache.c\cell\row
\cell regcache_restore()\cell regcache.c\cell\row
\cell regcache_save()\cell regcache.c\cell\row
\cell registers_info()\cell infcmd.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_register_sim_regno()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_register_sim_regno ( struct gdbarch* gdbarch, int reg_nr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_register_to_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_register_to_value ( struct gdbarch* gdbarch, struct frame_info* frame, int regnum, struct type* type, gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell value_from_register()\cell findvar.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_register_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* gdbarch_register_type ( struct gdbarch* gdbarch, int reg_nr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell generic_register_size()\cell arch-utils.c\cell\row
\cell init_regcache_descr()\cell regcache.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_register_type_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_register_type_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_regset_from_core_section()\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct regset* gdbarch_regset_from_core_section ( struct gdbarch* gdbarch, const char* sect_name, size_t sect_size )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_regset_from_core_section_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_regset_from_core_section_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_remote_translate_xfer_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_remote_translate_xfer_address ( struct gdbarch* gdbarch, struct regcache* regcache, CORE_ADDR gdb_addr, int gdb_len, CORE_ADDR* rem_addr, int* rem_len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_return_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum return_value_convention gdbarch_return_value ( struct gdbarch* gdbarch, struct type* valtype, struct regcache* regcache, gdb_byte* readbuf, const gdb_byte* writebuf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
\cell print_return_value()\cell infcmd.c\cell\row
\cell return_command()\cell stack.c\cell\row
\cell using_struct_return()\cell value.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_return_value_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_return_value_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell return_command()\cell stack.c\cell\row
Refs Func:\cell legacy_return_value()\cell arch-utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_sdb_reg_to_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_sdb_reg_to_regnum ( struct gdbarch* gdbarch, int sdb_regnr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell process_coff_symbol()\cell coffread.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_short_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_short_bit ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell ada_create_fundamental_type()\cell ada-lang.c\cell\row
\cell ada_language_arch_info()\cell ada-lang.c\cell\row
\cell build_fortran_types()\cell f-lang.c\cell\row
\cell build_gdbtypes()\cell gdbtypes.c\cell\row
\cell c_create_fundamental_type()\cell c-lang.c\cell\row
\cell f_create_fundamental_type()\cell f-lang.c\cell\row
\cell gdbtypes_post_init()\cell gdbtypes.c\cell\row
\cell m2_create_fundamental_type()\cell m2-lang.c\cell\row
\cell objc_create_fundamental_type()\cell objc-lang.c\cell\row
\cell pascal_create_fundamental_type()\cell p-lang.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_single_step_through_delay()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_single_step_through_delay ( struct gdbarch* gdbarch, struct frame_info* frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
\cell proceed()\cell infrun.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_single_step_through_delay_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_single_step_through_delay_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell proceed()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_skip_prologue()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_skip_prologue ( struct gdbarch* gdbarch, CORE_ADDR ip )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell decode_line_2()\cell linespec.c\cell\row
\cell decode_objc()\cell linespec.c\cell\row
\cell find_function_start_sal()\cell symtab.c\cell\row
\cell gnu_v3_update_exception_catchpoints()\cell breakpoint.c\cell\row
\cell in_prologue()\cell symtab.c\cell\row
\cell minsym_found()\cell linespec.c\cell\row
\cell minsyms_found()\cell linespec.c\cell\row
\cell step_into_function()\cell infrun.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_skip_prologue_addr_ctx()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_skip_prologue_addr_ctx ( struct gdbarch* gdbarch, struct address_context* addr_ctx )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell decode_line_2()\cell linespec.c\cell\row
\cell decode_objc()\cell linespec.c\cell\row
\cell find_function_start_sal()\cell symtab.c\cell\row
\cell minsym_found()\cell linespec.c\cell\row
\cell minsyms_found()\cell linespec.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_skip_prologue_addr_ctx_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_skip_prologue_addr_ctx_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell decode_line_2()\cell linespec.c\cell\row
\cell decode_objc()\cell linespec.c\cell\row
\cell find_function_start_sal()\cell symtab.c\cell\row
\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell minsym_found()\cell linespec.c\cell\row
\cell minsyms_found()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_skip_solib_resolver()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_skip_solib_resolver ( struct gdbarch* gdbarch, CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_skip_trampoline_code()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_skip_trampoline_code ( struct gdbarch* gdbarch, CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
\cell objc_skip_trampoline()\cell objc-lang.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_smash_text_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_smash_text_address ( struct gdbarch* gdbarch, CORE_ADDR addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell coff_symtab_read()\cell coffread.c\cell\row
\cell process_dies()\cell dwarfread.c\cell\row
\cell process_one_symbol()\cell dbxread.c\cell\row
\cell record_minimal_symbol()\cell elfread.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_software_single_step()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_software_single_step ( struct gdbarch* gdbarch, enum target_signal sig, int insert_breakpoints_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
\cell resume()\cell infrun.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_software_single_step_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_software_single_step_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell adjust_pc_after_break()\cell infrun.c\cell\row
\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell resume()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_sp_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_sp_regnum ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell define_symbol()\cell stabsread.c\cell\row
\cell dwarf2_frame_default_init_reg()\cell dwarf2-frame.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell frame_sp_unwind()\cell frame.c\cell\row
\cell legacy_virtual_frame_pointer()\cell arch-utils.c\cell\row
\cell read_sp()\cell regcache.c\cell\row
\cell value_of_builtin_frame_sp_reg()\cell std-regs.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_stab_reg_to_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_stab_reg_to_regnum ( struct gdbarch* gdbarch, int stab_regnr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell define_symbol()\cell stabsread.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_stabs_argument_has_addr()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_stabs_argument_has_addr ( struct gdbarch* gdbarch, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell define_symbol()\cell stabsread.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_store_return_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_store_return_value ( struct gdbarch* gdbarch, struct type* type, struct regcache* regcache, const gdb_byte* valbuf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell legacy_return_value()\cell arch-utils.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_unwind_dummy_id()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_id gdbarch_unwind_dummy_id ( struct gdbarch* gdbarch, struct frame_info* info )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell dummy_frame_sniffer()\cell dummy-frame.c\cell\row
\cell inlined_frame_this_id()\cell inlining.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_unwind_dummy_id_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_unwind_dummy_id_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_unwind_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_unwind_pc ( struct gdbarch* gdbarch, struct frame_info* next_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell frame_pc_unwind()\cell frame.c\cell\row
\cell inlined_frame_sniffer()\cell inlining.c\cell\row
\cell sentinel_frame_prev_pc()\cell sentinel-frame.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_unwind_pc_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_unwind_pc_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell frame_pc_unwind()\cell frame.c\cell\row
\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell inlined_frame_sniffer()\cell inlining.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_unwind_sp()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdbarch_unwind_sp ( struct gdbarch* gdbarch, struct frame_info* next_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell frame_sp_unwind()\cell frame.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_unwind_sp_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdbarch_unwind_sp_p ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell frame_sp_unwind()\cell frame.c\cell\row
\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell read_sp()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_value_to_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_value_to_register ( struct gdbarch* gdbarch, struct frame_info* frame, int regnum, struct type* type, const gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell value_assign()\cell valops.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_virtual_frame_pointer()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_virtual_frame_pointer ( struct gdbarch* gdbarch, CORE_ADDR pc, int* frame_regnum, long* frame_offset )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell dwarf2_tracepoint_var_ref()\cell dwarf2loc.c\cell\row
\cell encode_actions()\cell tracepoint.c\cell\row
\cell gen_frame_args_address()\cell ax-gdb.c\cell\row
\cell gen_frame_locals_address()\cell ax-gdb.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_write_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_write_pc ( struct gdbarch* gdbarch, CORE_ADDR val, ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell write_pc_pid()\cell regcache.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function new_gdbarch_data()\par}
{\s5\f1\fs20\ql\sb50\sa50 void* new_gdbarch_data ( struct gdbarch* gdbarch, struct gdbarch_data* data )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell dwarf2_frame_init_reg()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_set_init_reg()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_set_signal_frame_p()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_signal_frame_p()\cell dwarf2-frame.c\cell\row
\cell frame_base_append_sniffer()\cell frame-base.c\cell\row
\cell frame_base_find_by_frame()\cell frame-base.c\cell\row
\cell frame_base_set_default()\cell frame-base.c\cell\row
\cell frame_unwind_append_sniffer()\cell frame-unwind.c\cell\row
\cell frame_unwind_find_by_frame()\cell frame-unwind.c\cell\row
\cell frame_unwind_prepend_unwinder()\cell frame-unwind.c\cell\row
\cell get_builtin_type()\cell gdbtypes.c\cell\row
\cell get_remote_state()\cell remote.c\cell\row
\cell gnuv3_baseclass_offset()\cell gnu-v3-abi.c\cell\row
\cell gnuv3_rtti_type()\cell gnu-v3-abi.c\cell\row
\cell gnuv3_virtual_fn_field()\cell gnu-v3-abi.c\cell\row
\cell language_lookup_primitive_type_by_name()\cell language.c\cell\row
\cell language_string_char_type()\cell language.c\cell\row
\cell regcache_descr()\cell regcache.c\cell\row
\cell reggroup_add()\cell reggroups.c\cell\row
\cell reggroup_next()\cell reggroups.c\cell\row
\cell solib_ops()\cell solib.c\cell\row
\cell user_reg_add()\cell user-regs.c\cell\row
\cell user_reg_map_name_to_regnum()\cell user-regs.c\cell\row
\cell user_reg_replace()\cell user-regs.c\cell\row
\cell usernum_to_user_reg()\cell user-regs.c\cell\row
\cell vtable_address_point_offset()\cell gnu-v3-abi.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function new_gdbarch_tdep()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_tdep* new_gdbarch_tdep ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function register_gdbarch_init()\par}
{\s5\f1\fs20\ql\sb50\sa50 void register_gdbarch_init ( enum bfd_architecture bfd_architecture, gdbarch_init_ftype* init )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
Calls: \cell gdbarch_register()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_addr_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_addr_bit ( struct gdbarch* gdbarch, int addr_bit )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_addr_bits_remove()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_addr_bits_remove ( struct gdbarch* gdbarch, gdbarch_addr_bits_remove_ftype addr_bits_remove )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_address_class_name_to_type_flags()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_address_class_name_to_type_flags ( struct gdbarch* gdbarch, gdbarch_address_class_name_to_type_flags_ftype address_class_name_to_type_flags )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_address_class_type_flags()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_address_class_type_flags ( struct gdbarch* gdbarch, gdbarch_address_class_type_flags_ftype address_class_type_flags )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_address_class_type_flags_to_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_address_class_type_flags_to_name ( struct gdbarch* gdbarch, gdbarch_address_class_type_flags_to_name_ftype address_class_type_flags_to_name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_address_to_pointer()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_address_to_pointer ( struct gdbarch* gdbarch, gdbarch_address_to_pointer_ftype address_to_pointer )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_adjust_breakpoint_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_adjust_breakpoint_address ( struct gdbarch* gdbarch, gdbarch_adjust_breakpoint_address_ftype adjust_breakpoint_address )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_adjust_ehframe_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_adjust_ehframe_regnum ( struct gdbarch* gdbarch, gdbarch_adjust_ehframe_regnum_ftype adjust_ehframe_regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_believe_pcc_promotion()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_believe_pcc_promotion ( struct gdbarch* gdbarch, int believe_pcc_promotion )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_bfd_vma_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_bfd_vma_bit ( struct gdbarch* gdbarch, int bfd_vma_bit )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_breakpoint_from_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_breakpoint_from_pc ( struct gdbarch* gdbarch, gdbarch_breakpoint_from_pc_ftype breakpoint_from_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_call_dummy_location()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_call_dummy_location ( struct gdbarch* gdbarch, int call_dummy_location )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_cannot_fetch_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_cannot_fetch_register ( struct gdbarch* gdbarch, gdbarch_cannot_fetch_register_ftype cannot_fetch_register )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_cannot_step_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_cannot_step_breakpoint ( struct gdbarch* gdbarch, int cannot_step_breakpoint )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_cannot_store_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_cannot_store_register ( struct gdbarch* gdbarch, gdbarch_cannot_store_register_ftype cannot_store_register )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_char_signed()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_char_signed ( struct gdbarch* gdbarch, int char_signed )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_coff_make_msymbol_special()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_coff_make_msymbol_special ( struct gdbarch* gdbarch, gdbarch_coff_make_msymbol_special_ftype coff_make_msymbol_special )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_construct_inferior_arguments()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_construct_inferior_arguments ( struct gdbarch* gdbarch, gdbarch_construct_inferior_arguments_ftype construct_inferior_arguments )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_convert_from_func_ptr_addr()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_convert_from_func_ptr_addr ( struct gdbarch* gdbarch, gdbarch_convert_from_func_ptr_addr_ftype convert_from_func_ptr_addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_convert_register_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_convert_register_p ( struct gdbarch* gdbarch, gdbarch_convert_register_p_ftype convert_register_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_dbx_make_msymbol_special()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_dbx_make_msymbol_special ( struct gdbarch* gdbarch, gdbarch_dbx_make_msymbol_special_ftype dbx_make_msymbol_special )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_decr_pc_after_break()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_decr_pc_after_break ( struct gdbarch* gdbarch, CORE_ADDR decr_pc_after_break )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_deprecated_extract_return_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_deprecated_extract_return_value ( struct gdbarch* gdbarch, gdbarch_deprecated_extract_return_value_ftype deprecated_extract_return_value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_deprecated_extract_struct_value_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_deprecated_extract_struct_value_address ( struct gdbarch* gdbarch, gdbarch_deprecated_extract_struct_value_address_ftype deprecated_extract_struct_value_address )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_deprecated_fp_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_deprecated_fp_regnum ( struct gdbarch* gdbarch, int deprecated_fp_regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_deprecated_function_start_offset()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_deprecated_function_start_offset ( struct gdbarch* gdbarch, CORE_ADDR deprecated_function_start_offset )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_deprecated_push_arguments()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_deprecated_push_arguments ( struct gdbarch* gdbarch, gdbarch_deprecated_push_arguments_ftype deprecated_push_arguments )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_deprecated_reg_struct_has_addr()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_deprecated_reg_struct_has_addr ( struct gdbarch* gdbarch, gdbarch_deprecated_reg_struct_has_addr_ftype deprecated_reg_struct_has_addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_deprecated_register_byte()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_deprecated_register_byte ( struct gdbarch* gdbarch, gdbarch_deprecated_register_byte_ftype deprecated_register_byte )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_deprecated_register_size()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_deprecated_register_size ( struct gdbarch* gdbarch, int deprecated_register_size )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_deprecated_saved_pc_after_call()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_deprecated_saved_pc_after_call ( struct gdbarch* gdbarch, gdbarch_deprecated_saved_pc_after_call_ftype deprecated_saved_pc_after_call )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_deprecated_stack_align()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_deprecated_stack_align ( struct gdbarch* gdbarch, gdbarch_deprecated_stack_align_ftype deprecated_stack_align )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_deprecated_store_return_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_deprecated_store_return_value ( struct gdbarch* gdbarch, gdbarch_deprecated_store_return_value_ftype deprecated_store_return_value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_deprecated_store_struct_return()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_deprecated_store_struct_return ( struct gdbarch* gdbarch, gdbarch_deprecated_store_struct_return_ftype deprecated_store_struct_return )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_deprecated_use_struct_convention()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_deprecated_use_struct_convention ( struct gdbarch* gdbarch, gdbarch_deprecated_use_struct_convention_ftype deprecated_use_struct_convention )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_double_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_double_bit ( struct gdbarch* gdbarch, int double_bit )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_double_format()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_double_format ( struct gdbarch* gdbarch, const struct floatformat* double_format )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_dwarf2_reg_to_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_dwarf2_reg_to_regnum ( struct gdbarch* gdbarch, gdbarch_dwarf2_reg_to_regnum_ftype dwarf2_reg_to_regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_dwarf_reg_to_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_dwarf_reg_to_regnum ( struct gdbarch* gdbarch, gdbarch_dwarf_reg_to_regnum_ftype dwarf_reg_to_regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_ecoff_reg_to_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_ecoff_reg_to_regnum ( struct gdbarch* gdbarch, gdbarch_ecoff_reg_to_regnum_ftype ecoff_reg_to_regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_elf_make_msymbol_special()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_elf_make_msymbol_special ( struct gdbarch* gdbarch, gdbarch_elf_make_msymbol_special_ftype elf_make_msymbol_special )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_extract_return_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_extract_return_value ( struct gdbarch* gdbarch, gdbarch_extract_return_value_ftype extract_return_value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_fetch_pointer_argument()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_fetch_pointer_argument ( struct gdbarch* gdbarch, gdbarch_fetch_pointer_argument_ftype fetch_pointer_argument )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_fetch_tls_load_module_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_fetch_tls_load_module_address ( struct gdbarch* gdbarch, gdbarch_fetch_tls_load_module_address_ftype fetch_tls_load_module_address )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_float_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_float_bit ( struct gdbarch* gdbarch, int float_bit )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_float_format()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_float_format ( struct gdbarch* gdbarch, const struct floatformat* float_format )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_fp0_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_fp0_regnum ( struct gdbarch* gdbarch, int fp0_regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_frame_align()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_frame_align ( struct gdbarch* gdbarch, gdbarch_frame_align_ftype frame_align )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_frame_args_skip()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_frame_args_skip ( struct gdbarch* gdbarch, CORE_ADDR frame_args_skip )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_frame_num_args()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_frame_num_args ( struct gdbarch* gdbarch, gdbarch_frame_num_args_ftype frame_num_args )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_frame_red_zone_size()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_frame_red_zone_size ( struct gdbarch* gdbarch, int frame_red_zone_size )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_get_longjmp_target()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_get_longjmp_target ( struct gdbarch* gdbarch, gdbarch_get_longjmp_target_ftype get_longjmp_target )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_have_nonsteppable_watchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_have_nonsteppable_watchpoint ( struct gdbarch* gdbarch, int have_nonsteppable_watchpoint )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_in_function_epilogue_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_in_function_epilogue_p ( struct gdbarch* gdbarch, gdbarch_in_function_epilogue_p_ftype in_function_epilogue_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_in_solib_return_trampoline()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_in_solib_return_trampoline ( struct gdbarch* gdbarch, gdbarch_in_solib_return_trampoline_ftype in_solib_return_trampoline )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_inner_than()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_inner_than ( struct gdbarch* gdbarch, gdbarch_inner_than_ftype inner_than )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_int_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_int_bit ( struct gdbarch* gdbarch, int int_bit )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_integer_to_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_integer_to_address ( struct gdbarch* gdbarch, gdbarch_integer_to_address_ftype integer_to_address )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_long_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_long_bit ( struct gdbarch* gdbarch, int long_bit )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_long_double_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_long_double_bit ( struct gdbarch* gdbarch, int long_double_bit )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_long_double_format()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_long_double_format ( struct gdbarch* gdbarch, const struct floatformat* long_double_format )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_long_long_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_long_long_bit ( struct gdbarch* gdbarch, int long_long_bit )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_memory_insert_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_memory_insert_breakpoint ( struct gdbarch* gdbarch, gdbarch_memory_insert_breakpoint_ftype memory_insert_breakpoint )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_memory_remove_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_memory_remove_breakpoint ( struct gdbarch* gdbarch, gdbarch_memory_remove_breakpoint_ftype memory_remove_breakpoint )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_name_of_malloc()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_name_of_malloc ( struct gdbarch* gdbarch, const char* name_of_malloc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_num_pseudo_regs()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_num_pseudo_regs ( struct gdbarch* gdbarch, int num_pseudo_regs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_num_regs()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_num_regs ( struct gdbarch* gdbarch, int num_regs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_pc_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_pc_regnum ( struct gdbarch* gdbarch, int pc_regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_pointer_to_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_pointer_to_address ( struct gdbarch* gdbarch, gdbarch_pointer_to_address_ftype pointer_to_address )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_print_float_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_print_float_info ( struct gdbarch* gdbarch, gdbarch_print_float_info_ftype print_float_info )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_print_insn()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_print_insn ( struct gdbarch* gdbarch, gdbarch_print_insn_ftype print_insn )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_print_registers_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_print_registers_info ( struct gdbarch* gdbarch, gdbarch_print_registers_info_ftype print_registers_info )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_print_vector_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_print_vector_info ( struct gdbarch* gdbarch, gdbarch_print_vector_info_ftype print_vector_info )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_ps_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_ps_regnum ( struct gdbarch* gdbarch, int ps_regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_pseudo_register_read()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_pseudo_register_read ( struct gdbarch* gdbarch, gdbarch_pseudo_register_read_ftype pseudo_register_read )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_pseudo_register_write()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_pseudo_register_write ( struct gdbarch* gdbarch, gdbarch_pseudo_register_write_ftype pseudo_register_write )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_ptr_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_ptr_bit ( struct gdbarch* gdbarch, int ptr_bit )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_push_dummy_call()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_push_dummy_call ( struct gdbarch* gdbarch, gdbarch_push_dummy_call_ftype push_dummy_call )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_push_dummy_code()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_push_dummy_code ( struct gdbarch* gdbarch, gdbarch_push_dummy_code_ftype push_dummy_code )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_read_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_read_pc ( struct gdbarch* gdbarch, gdbarch_read_pc_ftype read_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_read_sp()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_read_sp ( struct gdbarch* gdbarch, gdbarch_read_sp_ftype read_sp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_register_bytes_ok()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_register_bytes_ok ( struct gdbarch* gdbarch, gdbarch_register_bytes_ok_ftype register_bytes_ok )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_register_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_register_name ( struct gdbarch* gdbarch, gdbarch_register_name_ftype register_name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_register_reggroup_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_register_reggroup_p ( struct gdbarch* gdbarch, gdbarch_register_reggroup_p_ftype register_reggroup_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_register_sim_regno()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_register_sim_regno ( struct gdbarch* gdbarch, gdbarch_register_sim_regno_ftype register_sim_regno )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_register_to_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_register_to_value ( struct gdbarch* gdbarch, gdbarch_register_to_value_ftype register_to_value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_register_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_register_type ( struct gdbarch* gdbarch, gdbarch_register_type_ftype register_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_regset_from_core_section()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_regset_from_core_section ( struct gdbarch* gdbarch, gdbarch_regset_from_core_section_ftype regset_from_core_section )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_remote_translate_xfer_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_remote_translate_xfer_address ( struct gdbarch* gdbarch, gdbarch_remote_translate_xfer_address_ftype remote_translate_xfer_address )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_return_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_return_value ( struct gdbarch* gdbarch, gdbarch_return_value_ftype return_value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_sdb_reg_to_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_sdb_reg_to_regnum ( struct gdbarch* gdbarch, gdbarch_sdb_reg_to_regnum_ftype sdb_reg_to_regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_short_bit()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_short_bit ( struct gdbarch* gdbarch, int short_bit )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_single_step_through_delay()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_single_step_through_delay ( struct gdbarch* gdbarch, gdbarch_single_step_through_delay_ftype single_step_through_delay )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_skip_prologue()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_skip_prologue ( struct gdbarch* gdbarch, gdbarch_skip_prologue_ftype skip_prologue )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_skip_prologue_addr_ctx()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_skip_prologue_addr_ctx ( struct gdbarch* gdbarch, gdbarch_skip_prologue_addr_ctx_ftype skip_prologue_addr_ctx )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_skip_solib_resolver()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_skip_solib_resolver ( struct gdbarch* gdbarch, gdbarch_skip_solib_resolver_ftype skip_solib_resolver )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_skip_trampoline_code()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_skip_trampoline_code ( struct gdbarch* gdbarch, gdbarch_skip_trampoline_code_ftype skip_trampoline_code )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_smash_text_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_smash_text_address ( struct gdbarch* gdbarch, gdbarch_smash_text_address_ftype smash_text_address )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_software_single_step()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_software_single_step ( struct gdbarch* gdbarch, gdbarch_software_single_step_ftype software_single_step )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_sp_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_sp_regnum ( struct gdbarch* gdbarch, int sp_regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_stab_reg_to_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_stab_reg_to_regnum ( struct gdbarch* gdbarch, gdbarch_stab_reg_to_regnum_ftype stab_reg_to_regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_stabs_argument_has_addr()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_stabs_argument_has_addr ( struct gdbarch* gdbarch, gdbarch_stabs_argument_has_addr_ftype stabs_argument_has_addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_store_return_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_store_return_value ( struct gdbarch* gdbarch, gdbarch_store_return_value_ftype store_return_value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_unwind_dummy_id()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_unwind_dummy_id ( struct gdbarch* gdbarch, gdbarch_unwind_dummy_id_ftype unwind_dummy_id )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_unwind_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_unwind_pc ( struct gdbarch* gdbarch, gdbarch_unwind_pc_ftype unwind_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_unwind_sp()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_unwind_sp ( struct gdbarch* gdbarch, gdbarch_unwind_sp_ftype unwind_sp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_value_to_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_value_to_register ( struct gdbarch* gdbarch, gdbarch_value_to_register_ftype value_to_register )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_virtual_frame_pointer()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_virtual_frame_pointer ( struct gdbarch* gdbarch, gdbarch_virtual_frame_pointer_ftype virtual_frame_pointer )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_gdbarch_write_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_gdbarch_write_pc ( struct gdbarch* gdbarch, gdbarch_write_pc_ftype write_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function alloc_gdbarch_data()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void alloc_gdbarch_data ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbarch.c\cell\cell\row
Calls: \cell gdbarch_obstack_zalloc()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell gdbarch_alloc()\cell gdbarch.c\cell\row
Refs Var:\cell gdbarch_data_registry\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function append_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void append_name ( const char*** buf, int* nr, const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xrealloc()\cell utils.c\cell\row
Called by:\cell gdbarch_printable_names()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function current_gdbarch_swap_in_hack()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void current_gdbarch_swap_in_hack ( struct gdbarch* new_gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell internal_error()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell deprecated_current_gdbarch_select_hack()\cell gdbarch.c\cell\row
\cell gdbarch_find_by_info()\cell gdbarch.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function current_gdbarch_swap_init_hack()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void current_gdbarch_swap_init_hack ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_obstack_zalloc()\cell gdbarch.c\cell\row
Called by:\cell find_arch_by_info()\cell gdbarch.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell gdbarch_swap_registry\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function current_gdbarch_swap_out_hack()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct gdbarch* current_gdbarch_swap_out_hack ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell internal_error()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk()\cell\cell\row
Called by:\cell deprecated_current_gdbarch_select_hack()\cell gdbarch.c\cell\row
\cell find_arch_by_info()\cell gdbarch.c\cell\row
\cell gdbarch_find_by_info()\cell gdbarch.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_arch_by_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct gdbarch* find_arch_by_info ( struct gdbarch* old_gdbarch, struct gdbarch_info info )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell current_gdbarch_swap_init_hack()\cell gdbarch.c\cell\row
\cell current_gdbarch_swap_out_hack()\cell gdbarch.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell gdbarch_dump()\cell gdbarch.c\cell\row
\cell gdbarch_info_fill()\cell arch-utils.c\cell\row
\cell gdbarch_osabi_name()\cell osabi.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell verify_gdbarch()\cell gdbarch.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell gdbarch_find_by_info()\cell gdbarch.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell gdbarch_debug\cell gdbarch.c\cell\row
\cell gdbarch_registry\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gdbarch_data_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct gdbarch_data* gdbarch_data_register ( gdbarch_data_pre_init_ftype* pre_init, gdbarch_data_post_init_ftype* post_init )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell gdbarch_data_register_post_init()\cell gdbarch.c\cell\row
\cell gdbarch_data_register_pre_init()\cell gdbarch.c\cell\row
Refs Var:\cell gdbarch_data_registry\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function pformat()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* pformat ( const struct floatformat* format )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell gdbarch_dump()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_gdbarch_debug()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_gdbarch_debug ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_gdbarch()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function verify_gdbarch()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void verify_gdbarch ( struct gdbarch* current_gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell default_double_format()\cell arch-utils.c\cell\row
\cell default_float_format()\cell arch-utils.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell gdbarch_ptr_bit()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_ui_file_delete()\cell utils.c\cell\row
\cell mem_fileopen()\cell ui-file.c\cell\row
\cell ui_file_xstrdup()\cell ui-file.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell find_arch_by_info()\cell gdbarch.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
\intbl0
}
