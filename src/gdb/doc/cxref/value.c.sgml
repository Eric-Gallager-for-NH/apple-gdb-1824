<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF value.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for value.c of gdb.cxref.
<author>cxref

<sect>File value.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;scm-lang.h&quot;</tt>
<itemize>
<item><tt>#include &quot;scm-tags.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;regcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define VALUE_HISTORY_CHUNK 60</tt><newline>

<sect1>Type struct value

<p>
<itemize>
<item><tt>struct value</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>enum lval_type lval;</tt><newline>
<item><tt>int modifiable;</tt><newline>
<item><tt>union</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>CORE_ADDR address;</tt><newline>
<item><tt>struct internalvar* internalvar;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>location;</tt><newline>
<item><tt>int offset;</tt><newline>
<item><tt>int bitsize;</tt><newline>
<item><tt>int bitpos;</tt><newline>
<item><tt>struct frame_id frame_id;</tt><newline>
<item><tt>struct type* type;</tt><newline>
<item><tt>struct type* enclosing_type;</tt><newline>
<item><tt>int embedded_offset;</tt><newline>
<item><tt>int pointed_to_offset;</tt><newline>
<item><tt>struct value* next;</tt><newline>
<item><tt>short regnum;</tt><newline>
<item><tt>char lazy;</tt><newline>
<item><tt>enum opt_state optimized_out;</tt><newline>
<item><tt>int var_status;</tt><newline>
<item><tt>union</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>gdb_byte contents[1];</tt><newline>
<item><tt>DOUBLEST force_doublest_align;</tt><newline>
<item><tt>long force_longest_align;</tt><newline>
<item><tt>CORE_ADDR force_core_addr_align;</tt><newline>
<item><tt>void* force_pointer_align;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>aligner;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct cached_value

<p>
<itemize>
<item><tt>struct cached_value</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>char* name;</tt><newline>
<item><tt>struct type* type;</tt><newline>
<item><tt>struct value val;</tt><newline>
<item><tt>int bound;</tt><newline>
<item><tt>unsigned int generation;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct value_history_chunk

<p>
<itemize>
<item><tt>struct value_history_chunk</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct value_history_chunk* next;</tt><newline>
<item><tt>struct value* values[60];</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>External Variables

<p>
<bf>symbol_generation</bf><newline>
<tt>extern unsigned int symbol_generation</tt><newline>
<descrip>
<tag>Defined in:</tag>
<itemize>
<item>symbol_generation</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>value_history_chain</bf><newline>
<tt>static struct value_history_chunk* value_history_chain</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>access_value_history()
<item>clear_value_history()
<item>record_latest_value()
</itemize>
</descrip>
<p>
<bf>value_history_count</bf><newline>
<tt>static int value_history_count</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>access_value_history()
<item>clear_value_history()
<item>record_latest_value()
<item>show_values()
</itemize>
</descrip>
<p>
<bf>all_values</bf><newline>
<tt>static struct value* all_values</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>allocate_value()
<item>free_all_values()
<item>release_value()
<item>value_change_enclosing_type()
<item>value_free_to_mark()
<item>value_mark()
<item>value_release_to_mark()
</itemize>
</descrip>
<p>
<bf>internalvars</bf><newline>
<tt>static struct internalvar* internalvars</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>clear_internalvars()
<item>lookup_internalvar()
<item>show_convenience()
</itemize>
</descrip>

<sect1>Global Function _initialize_values()

<p><tt>void _initialize_values ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>show_convenience()  :  value.c
<item>show_values()  :  value.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>showlist
</itemize>
</descrip>

<sect1>Global Function access_value_history()

<p><tt>struct value* access_value_history ( int num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>value_copy()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_dollar()  :  linespec.c
<item>evaluate_subexp_standard()  :  eval.c
<item>print_command_1()  :  printcmd.c
<item>show_values()  :  value.c
<item>whatis_exp()  :  typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>value_history_chain  :  value.c
<item>value_history_count  :  value.c
</itemize>
</descrip>

<sect1>Global Function allocate_repeat_value()

<p><tt>struct value* allocate_repeat_value ( struct type* type, int count )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
<item>value_repeat()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Global Function allocate_value()

<p><tt>struct value* allocate_value ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_frame_id_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>deprecated_value_regnum_hack()  :  value.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>xzalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_value_binop()  :  ada-lang.c
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>allocate_repeat_value()  :  value.c
<item>cast_into_complex()  :  valops.c
<item>coerce_unspec_val_to_type()  :  ada-lang.c
<item>convert_actual()  :  ada-lang.c
<item>dwarf2_evaluate_loc_desc()  :  dwarf2loc.c
<item>empty_array()  :  ada-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>hand_function_call()  :  infcall.c
<item>hpacc_virtual_fn_field()  :  hpacc-abi.c
<item>java_value_print()  :  jv-valprint.c
<item>loclist_read_variable()  :  dwarf2loc.c
<item>lookup_cached_function()  :  value.c
<item>lookup_internalvar()  :  value.c
<item>make_array_descriptor()  :  ada-lang.c
<item>print_return_value()  :  infcmd.c
<item>read_var_value()  :  findvar.c
<item>search_struct_field()  :  valops.c
<item>set_traceframe_context()  :  tracepoint.c
<item>value_array()  :  valops.c
<item>value_at()  :  valops.c
<item>value_at_lazy()  :  valops.c
<item>value_binop()  :  valarith.c
<item>value_bitstring()  :  valops.c
<item>value_copy()  :  value.c
<item>value_fn_field()  :  value.c
<item>value_from_contents_and_address()  :  ada-lang.c
<item>value_from_double()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_from_pointer()  :  value.c
<item>value_from_register()  :  findvar.c
<item>value_from_string()  :  value.c
<item>value_literal_complex()  :  valops.c
<item>value_maybe_namespace_elt()  :  valops.c
<item>value_of_builtin_frame_fp_reg()  :  std-regs.c
<item>value_of_builtin_frame_pc_reg()  :  std-regs.c
<item>value_of_builtin_frame_reg()  :  std-regs.c
<item>value_of_register()  :  findvar.c
<item>value_primitive_field()  :  value.c
<item>value_slice()  :  valops.c
<item>value_string()  :  valops.c
<item>value_subscripted_rvalue()  :  valarith.c
<item>value_zero()  :  valops.c
<item>x_command()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>all_values  :  value.c
<item>null_frame_id  :  frame.c
</itemize>
</descrip>

<sect1>Global Function clear_internalvars()

<p><tt>void clear_internalvars ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>clear_symtab_users()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>internalvars  :  value.c
</itemize>
</descrip>

<sect1>Global Function clear_value_history()

<p><tt>void clear_value_history ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>clear_symtab_users()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>value_history_chain  :  value.c
<item>value_history_count  :  value.c
</itemize>
</descrip>

<sect1>Global Function coerce_array()

<p><tt>struct value* coerce_array ( struct value* arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>coerce_ref()  :  value.c
<item>value_coerce_array()  :  valops.c
<item>value_coerce_function()  :  valops.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>check_field()  :  valops.c
<item>coerce_number()  :  value.c
<item>value_add()  :  valarith.c
<item>value_as_address()  :  value.c
<item>value_as_long()  :  value.c
<item>value_assign()  :  valops.c
<item>value_equal()  :  valarith.c
<item>value_find_oload_method_list()  :  valops.c
<item>value_ind()  :  valops.c
<item>value_less()  :  valarith.c
<item>value_struct_elt()  :  valops.c
<item>value_sub()  :  valarith.c
<item>varobj_value_struct_elt_by_index()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Global Function coerce_enum()

<p><tt>struct value* coerce_enum ( struct value* arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>value_cast()  :  valops.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coerce_number()  :  value.c
<item>value_x_binop()  :  valarith.c
<item>value_x_unop()  :  valarith.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_unsigned_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function coerce_number()

<p><tt>struct value* coerce_number ( struct value* arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>coerce_array()  :  value.c
<item>coerce_enum()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_logical_not()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function coerce_ref()

<p><tt>struct value* coerce_ref ( struct value* arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>unpack_pointer()  :  value.c
<item>value_at_lazy()  :  valops.c
<item>value_contents()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_coerce_ref()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_value_assign()  :  ada-lang.c
<item>ada_value_binop()  :  ada-lang.c
<item>ada_value_struct_elt()  :  ada-lang.c
<item>c_value_of_child()  :  varobj.c
<item>coerce_array()  :  value.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>value_assign()  :  valops.c
<item>value_binop()  :  valarith.c
<item>value_cast_1()  :  valops.c
<item>value_complement()  :  valarith.c
<item>value_neg()  :  valarith.c
<item>value_pos()  :  valarith.c
<item>value_subscript()  :  valarith.c
<item>value_x_binop()  :  valarith.c
<item>value_x_unop()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function create_cached_function()

<p><tt>struct cached_value* create_cached_function ( const char* name, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>allocate_space_in_inferior_malloc()  :  valops.c
<item>evaluate_subexp_standard()  :  eval.c
<item>lookup_child_selector_nocache()  :  objc-lang.c
<item>lookup_objc_class()  :  objc-lang.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>new_objc_runtime_class_getClass()  :  objc-lang.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>new_objc_runtime_get_classname()  :  objc-lang.c
<item>objc_runtime_lock_taken_p()  :  objc-lang.c
<item>read_objc_object()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function deprecated_set_value_modifiable()

<p><tt>void deprecated_set_value_modifiable ( struct value* value, int modifiable )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_traceframe_context()  :  tracepoint.c
</itemize>
</descrip>

<sect1>Global Function deprecated_set_value_type()

<p><tt>void deprecated_set_value_type ( struct value* value, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_coerce_to_simple_array_type()  :  ada-lang.c
<item>ada_value_assign()  :  ada-lang.c
<item>c_value_print()  :  c-valprint.c
<item>coerce_for_assign()  :  ada-lang.c
<item>cp_print_hpacc_virtual_table_entries()  :  cp-valprint.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>gnuv2_virtual_fn_field()  :  gnu-v2-abi.c
<item>hand_function_call()  :  infcall.c
<item>hpacc_virtual_fn_field()  :  hpacc-abi.c
<item>printf_command()  :  printcmd.c
<item>set_traceframe_context()  :  tracepoint.c
<item>type_from_class()  :  jv-lang.c
<item>value_addr()  :  valops.c
<item>value_arg_coerce()  :  infcall.c
<item>value_assign()  :  valops.c
<item>value_cast()  :  valops.c
<item>value_cast_1()  :  valops.c
<item>value_full_object()  :  valops.c
<item>value_ind()  :  valops.c
<item>varobj_fixup_value()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function deprecated_value_address_hack()

<p><tt>CORE_ADDR* deprecated_value_address_hack ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_to_fixed_value()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_value_assign()  :  ada-lang.c
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>ada_value_print()  :  ada-valprint.c
<item>allocate_value()  :  value.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>c_value_print()  :  c-valprint.c
<item>can_use_hardware_watchpoint()  :  breakpoint.c
<item>coerce_unspec_val_to_type()  :  ada-lang.c
<item>common_val_print()  :  valprint.c
<item>cp_print_static_field()  :  cp-valprint.c
<item>desc_bounds()  :  ada-lang.c
<item>dwarf2_evaluate_loc_desc()  :  dwarf2loc.c
<item>encode_actions()  :  tracepoint.c
<item>ensure_lval()  :  ada-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>find_function_addr()  :  infcall.c
<item>find_method_list()  :  valops.c
<item>get_java_utf8_name()  :  jv-lang.c
<item>gnuv2_value_rtti_type()  :  gnu-v2-abi.c
<item>gnuv3_rtti_type()  :  gnu-v3-abi.c
<item>hpacc_virtual_fn_field()  :  hpacc-abi.c
<item>insert_bp_location()  :  breakpoint.c
<item>java_link_class_type()  :  jv-lang.c
<item>java_value_print()  :  jv-valprint.c
<item>locate_var_value()  :  findvar.c
<item>make_array_descriptor()  :  ada-lang.c
<item>pascal_object_print_static_field()  :  p-valprint.c
<item>print_formatted()  :  printcmd.c
<item>read_var_value()  :  findvar.c
<item>remove_breakpoint()  :  breakpoint.c
<item>search_struct_field()  :  valops.c
<item>search_struct_method()  :  valops.c
<item>thin_data_pntr()  :  ada-lang.c
<item>type_from_class()  :  jv-lang.c
<item>unwrap_value()  :  ada-lang.c
<item>value_addr()  :  valops.c
<item>value_as_address()  :  value.c
<item>value_assign()  :  valops.c
<item>value_at()  :  valops.c
<item>value_at_lazy()  :  valops.c
<item>value_cast_1()  :  valops.c
<item>value_coerce_array()  :  valops.c
<item>value_coerce_function()  :  valops.c
<item>value_copy()  :  value.c
<item>value_fetch_lazy()  :  valops.c
<item>value_fn_field()  :  value.c
<item>value_from_contents_and_address()  :  ada-lang.c
<item>value_from_register()  :  findvar.c
<item>value_full_object()  :  valops.c
<item>value_of_register()  :  findvar.c
<item>value_primitive_field()  :  value.c
<item>value_repeat()  :  valops.c
<item>value_slice()  :  valops.c
<item>value_static_field()  :  value.c
<item>value_subscript()  :  valarith.c
<item>value_subscripted_rvalue()  :  valarith.c
<item>x_command()  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function deprecated_value_frame_id_hack()

<p><tt>struct frame_id* deprecated_value_frame_id_hack ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>search_struct_field()  :  valops.c
<item>value_assign()  :  valops.c
<item>value_copy()  :  value.c
<item>value_from_register()  :  findvar.c
<item>value_of_register()  :  findvar.c
<item>value_of_user_reg()  :  user-regs.c
<item>value_primitive_field()  :  value.c
<item>value_slice()  :  valops.c
<item>value_subscript()  :  valarith.c
<item>value_subscripted_rvalue()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function deprecated_value_internalvar_hack()

<p><tt>struct internalvar** deprecated_value_internalvar_hack ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_assign()  :  valops.c
<item>value_of_internalvar()  :  value.c
</itemize>
</descrip>

<sect1>Global Function deprecated_value_lval_hack()

<p><tt>enum lval_type* deprecated_value_lval_hack ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_value_assign()  :  ada-lang.c
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>allocate_value()  :  value.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>can_use_hardware_watchpoint()  :  breakpoint.c
<item>coerce_unspec_val_to_type()  :  ada-lang.c
<item>convert_actual()  :  ada-lang.c
<item>dwarf2_evaluate_loc_desc()  :  dwarf2loc.c
<item>ensure_lval()  :  ada-lang.c
<item>evaluate_subexp_for_address()  :  eval.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>hand_function_call()  :  infcall.c
<item>insert_bp_location()  :  breakpoint.c
<item>locate_var_value()  :  findvar.c
<item>loclist_read_variable()  :  dwarf2loc.c
<item>print_formatted()  :  printcmd.c
<item>read_var_value()  :  findvar.c
<item>remove_breakpoint()  :  breakpoint.c
<item>search_struct_field()  :  valops.c
<item>value_addr()  :  valops.c
<item>value_assign()  :  valops.c
<item>value_at()  :  valops.c
<item>value_at_lazy()  :  valops.c
<item>value_cast_1()  :  valops.c
<item>value_coerce_array()  :  valops.c
<item>value_coerce_function()  :  valops.c
<item>value_copy()  :  value.c
<item>value_from_contents_and_address()  :  ada-lang.c
<item>value_from_register()  :  findvar.c
<item>value_full_object()  :  valops.c
<item>value_of_builtin_frame_reg()  :  std-regs.c
<item>value_of_internalvar()  :  value.c
<item>value_of_register()  :  findvar.c
<item>value_primitive_field()  :  value.c
<item>value_repeat()  :  valops.c
<item>value_slice()  :  valops.c
<item>value_static_field()  :  value.c
<item>value_subscript()  :  valarith.c
<item>value_subscript_packed()  :  ada-lang.c
<item>value_subscripted_rvalue()  :  valarith.c
<item>value_x_binop()  :  valarith.c
<item>value_x_unop()  :  valarith.c
<item>value_zero()  :  valops.c
<item>x_command()  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function deprecated_value_modifiable()

<p><tt>int deprecated_value_modifiable ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_assign()  :  ada-lang.c
<item>can_use_hardware_watchpoint()  :  breakpoint.c
<item>value_assign()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function deprecated_value_regnum_hack()

<p><tt>short* deprecated_value_regnum_hack ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>locate_var_value()  :  findvar.c
<item>value_assign()  :  valops.c
<item>value_copy()  :  value.c
<item>value_from_register()  :  findvar.c
<item>value_of_register()  :  findvar.c
<item>value_primitive_field()  :  value.c
<item>value_subscripted_rvalue()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function free_all_values()

<p><tt>void free_all_values ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_free()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
<item>execute_command()  :  top.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>all_values  :  value.c
</itemize>
</descrip>

<sect1>Global Function generic_use_struct_convention()

<p><tt>int generic_use_struct_convention ( int gcc_p, struct type* value_type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function internalvar_name()

<p><tt>char* internalvar_name ( struct internalvar* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_subexp_standard()  :  expprint.c
</itemize>
</descrip>

<sect1>Global Function lookup_cached_function()

<p><tt>struct value* lookup_cached_function ( struct cached_value* cval )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>error()  :  utils.c
<item>find_function_in_inferior()  :  valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>allocate_space_in_inferior_malloc()  :  valops.c
<item>do_end_debugger_mode()  :  objc-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>lookup_child_selector_nocache()  :  objc-lang.c
<item>lookup_objc_class()  :  objc-lang.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>new_objc_runtime_class_getClass()  :  objc-lang.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>new_objc_runtime_get_classname()  :  objc-lang.c
<item>objc_runtime_lock_taken_p()  :  objc-lang.c
<item>read_objc_object()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>symbol_generation  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function lookup_internalvar()

<p><tt>struct internalvar* lookup_internalvar ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>release_value()  :  value.c
<item>xmalloc()  :  utils.c
<item>concat(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_tracepoint()  :  tracepoint.c
<item>captured_main()  :  main.c
<item>decode_dollar()  :  linespec.c
<item>forward_search_command()  :  source.c
<item>get_number_trailer()  :  breakpoint.c
<item>handle_inferior_event()  :  infrun.c
<item>reverse_search_command()  :  source.c
<item>set_breakpoint_count()  :  breakpoint.c
<item>set_input_radix_1()  :  valprint.c
<item>set_next_address()  :  printcmd.c
<item>set_output_radix_1()  :  valprint.c
<item>set_traceframe_context()  :  tracepoint.c
<item>set_traceframe_num()  :  tracepoint.c
<item>set_tracepoint_count()  :  tracepoint.c
<item>set_tracepoint_num()  :  tracepoint.c
<item>write_dollar_variable()  :  parse.c
<item>x_command()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void  :  gdbtypes.c
<item>internalvars  :  value.c
</itemize>
</descrip>

<sect1>Global Function modify_field()

<p><tt>void modify_field ( gdb_byte* addr, long fieldval, int bitpos, int bitsize )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_unsigned_integer()  :  findvar.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>store_unsigned_integer()  :  findvar.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_struct_tuple()  :  eval.c
<item>modify_general_field()  :  ada-lang.c
<item>set_internalvar_component()  :  value.c
<item>value_assign()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function pack_long()

<p><tt>void pack_long ( gdb_byte* buf, struct type* type, long num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>store_signed_integer()  :  findvar.c
<item>store_typed_address()  :  findvar.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_prev_register()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Global Function record_latest_value()

<p><tt>int record_latest_value ( struct value* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>release_value()  :  value.c
<item>value_fetch_lazy()  :  valops.c
<item>value_lazy()  :  value.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>invoke_block_command()  :  printcmd.c
<item>print_command_1()  :  printcmd.c
<item>print_return_value()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>value_history_chain  :  value.c
<item>value_history_count  :  value.c
</itemize>
</descrip>

<sect1>Global Function release_value()

<p><tt>void release_value ( struct value* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_copy()  :  breakpoint.c
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>c_value_of_child()  :  varobj.c
<item>c_value_of_root()  :  varobj.c
<item>cplus_value_of_child()  :  varobj.c
<item>do_enable_breakpoint()  :  breakpoint.c
<item>do_examine()  :  printcmd.c
<item>insert_breakpoints()  :  breakpoint.c
<item>lookup_internalvar()  :  value.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>new_objc_runtime_get_classname()  :  objc-lang.c
<item>record_latest_value()  :  value.c
<item>set_internalvar()  :  value.c
<item>value_of_child()  :  varobj.c
<item>varobj_create()  :  varobj.c
<item>varobj_set_value()  :  varobj.c
<item>watch_command_1()  :  breakpoint.c
<item>watchpoint_check()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>all_values  :  value.c
</itemize>
</descrip>

<sect1>Global Function set_internalvar()

<p><tt>void set_internalvar ( struct internalvar* var, struct value* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>release_value()  :  value.c
<item>value_copy()  :  value.c
<item>value_fetch_lazy()  :  valops.c
<item>value_lazy()  :  value.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_tracepoint()  :  tracepoint.c
<item>captured_main()  :  main.c
<item>forward_search_command()  :  source.c
<item>handle_inferior_event()  :  infrun.c
<item>reverse_search_command()  :  source.c
<item>set_breakpoint_count()  :  breakpoint.c
<item>set_input_radix_1()  :  valprint.c
<item>set_next_address()  :  printcmd.c
<item>set_output_radix_1()  :  valprint.c
<item>set_traceframe_context()  :  tracepoint.c
<item>set_traceframe_num()  :  tracepoint.c
<item>set_tracepoint_count()  :  tracepoint.c
<item>set_tracepoint_num()  :  tracepoint.c
<item>value_assign()  :  valops.c
<item>x_command()  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function set_internalvar_component()

<p><tt>void set_internalvar_component ( struct internalvar* var, int offset, int bitpos, int bitsize, struct value* newval )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>modify_field()  :  value.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_as_long()  :  value.c
<item>value_contents()  :  value.c
<item>value_contents_writeable()  :  value.c
<item>value_type()  :  value.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_assign()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function set_value_bitpos()

<p><tt>void set_value_bitpos ( struct value* value, int bit )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>coerce_unspec_val_to_type()  :  ada-lang.c
<item>value_subscript()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function set_value_bitsize()

<p><tt>void set_value_bitsize ( struct value* value, int bit )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>coerce_unspec_val_to_type()  :  ada-lang.c
<item>value_subscript()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function set_value_embedded_offset()

<p><tt>void set_value_embedded_offset ( struct value* value, int val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_assign()  :  valops.c
<item>value_full_object()  :  valops.c
<item>value_ind()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function set_value_lazy()

<p><tt>void set_value_lazy ( struct value* value, int val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coerce_unspec_val_to_type()  :  ada-lang.c
<item>dwarf2_evaluate_loc_desc()  :  dwarf2loc.c
<item>gnuv2_virtual_fn_field()  :  gnu-v2-abi.c
<item>java_link_class_type()  :  jv-lang.c
<item>java_value_print()  :  jv-valprint.c
<item>read_var_value()  :  findvar.c
<item>search_struct_field()  :  valops.c
<item>value_at_lazy()  :  valops.c
<item>value_fetch_lazy()  :  valops.c
<item>value_from_contents_and_address()  :  ada-lang.c
<item>value_primitive_field()  :  value.c
<item>value_slice()  :  valops.c
<item>value_subscripted_rvalue()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function set_value_offset()

<p><tt>void set_value_offset ( struct value* value, int offset )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gnuv2_virtual_fn_field()  :  gnu-v2-abi.c
<item>java_value_print()  :  jv-valprint.c
<item>search_struct_field()  :  valops.c
<item>value_from_register()  :  findvar.c
<item>value_slice()  :  valops.c
<item>value_subscript()  :  valarith.c
<item>value_subscripted_rvalue()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function set_value_optimized_out()

<p><tt>void set_value_optimized_out ( struct value* value, enum opt_state val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_evaluate_loc_desc()  :  dwarf2loc.c
<item>loclist_read_variable()  :  dwarf2loc.c
<item>read_var_value()  :  findvar.c
<item>value_from_register()  :  findvar.c
<item>value_of_register()  :  findvar.c
</itemize>
</descrip>

<sect1>Global Function set_value_pointed_to_offset()

<p><tt>void set_value_pointed_to_offset ( struct value* value, int val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_addr()  :  valops.c
<item>value_assign()  :  valops.c
<item>value_cast_1()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function set_var_status()

<p><tt>void set_var_status ( struct value* val, int status )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_evaluate_loc_desc()  :  dwarf2loc.c
</itemize>
</descrip>

<sect1>Global Function unpack_double()

<p><tt>DOUBLEST unpack_double ( struct type* type, const gdb_byte* valaddr, int* invp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>extract_typed_floating()  :  doublest.c
<item>floatformat_from_type()  :  doublest.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>unpack_long()  :  value.c
<item>floatformat_is_valid()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_floating()  :  valprint.c
<item>print_floating_in_hex()  :  valprint.c
<item>value_as_double()  :  value.c
</itemize>
</descrip>

<sect1>Global Function unpack_field_as_long()

<p><tt>long unpack_field_as_long ( struct type* type, const gdb_byte* valaddr, int fieldno )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>extract_unsigned_integer()  :  findvar.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_print_value_fields()  :  cp-valprint.c
<item>java_print_value_fields()  :  jv-valprint.c
<item>pascal_object_print_value_fields()  :  p-valprint.c
<item>value_primitive_field()  :  value.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function unpack_long()

<p><tt>long unpack_long ( struct type* type, const gdb_byte* valaddr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>error()  :  utils.c
<item>extract_signed_integer_with_byte_order()  :  findvar.c
<item>extract_typed_address()  :  findvar.c
<item>extract_typed_floating()  :  doublest.c
<item>extract_unsigned_integer_with_byte_order()  :  findvar.c
<item>is_scmvalue_type()  :  scm-lang.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>scm_unpack()  :  scm-lang.c
<item>unpack_long()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_which_variant_applies()  :  ada-lang.c
<item>c_val_print()  :  c-valprint.c
<item>cp_print_class_member()  :  cp-valprint.c
<item>f_val_print()  :  f-valprint.c
<item>java_val_print()  :  jv-valprint.c
<item>pascal_object_print_class_member()  :  p-valprint.c
<item>pascal_val_print()  :  p-valprint.c
<item>print_ostype()  :  valprint.c
<item>print_scalar_formatted()  :  printcmd.c
<item>scm_unpack()  :  scm-lang.c
<item>unpack_double()  :  value.c
<item>unpack_long()  :  value.c
<item>unpack_pointer()  :  value.c
<item>val_print_type_code_int()  :  valprint.c
<item>value_as_address()  :  value.c
<item>value_as_long()  :  value.c
<item>value_bit_index()  :  valarith.c
<item>value_concat()  :  valarith.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Global Function unpack_pointer()

<p><tt>CORE_ADDR unpack_pointer ( struct type* type, const gdb_byte* valaddr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>unpack_long()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_value_struct_elt()  :  ada-lang.c
<item>c_val_print()  :  c-valprint.c
<item>coerce_ref()  :  value.c
<item>cp_print_class_method()  :  cp-valprint.c
<item>f_val_print()  :  f-valprint.c
<item>gnuv2_baseclass_offset()  :  gnu-v2-abi.c
<item>java_val_print()  :  jv-valprint.c
<item>java_value_print()  :  jv-valprint.c
<item>pascal_object_print_class_method()  :  p-valprint.c
<item>pascal_val_print()  :  p-valprint.c
<item>print_scalar_formatted()  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function using_struct_return()

<p><tt>int using_struct_return ( struct type* value_type, int gcc_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>gdbarch_return_value()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
<item>finish_command()  :  infcmd.c
<item>finish_command_continuation()  :  infcmd.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>finish_inlined_subroutine_command_continuation()  :  infcmd.c
<item>hand_function_call()  :  infcall.c
<item>return_command()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function value_as_address()

<p><tt>CORE_ADDR value_as_address ( struct value* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>coerce_array()  :  value.c
<item>deprecated_value_address_hack()  :  value.c
<item>gdbarch_integer_to_address()  :  gdbarch.c
<item>gdbarch_integer_to_address_p()  :  gdbarch.c
<item>unpack_long()  :  value.c
<item>value_contents()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_tag_name_1()  :  ada-lang.c
<item>ada_value_slice_ptr()  :  ada-lang.c
<item>ada_value_struct_elt()  :  ada-lang.c
<item>debug_load_solib()  :  target/target.c
<item>do_one_display()  :  printcmd.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>find_function_addr()  :  infcall.c
<item>get_class_address_from_object()  :  objc-lang.c
<item>get_closure_implementation_fn()  :  gdbtypes.c
<item>gnuv2_value_rtti_type()  :  gnu-v2-abi.c
<item>gnuv3_baseclass_offset()  :  gnu-v3-abi.c
<item>gnuv3_rtti_type()  :  gnu-v3-abi.c
<item>gnuv3_virtual_fn_field()  :  gnu-v3-abi.c
<item>java_class_from_object()  :  jv-lang.c
<item>java_class_is_primitive()  :  jv-lang.c
<item>java_value_print()  :  jv-valprint.c
<item>lookup_objc_class()  :  objc-lang.c
<item>new_objc_runtime_class_getClass()  :  objc-lang.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>new_objc_runtime_get_classname()  :  objc-lang.c
<item>parse_and_eval_address()  :  eval.c
<item>parse_and_eval_address_1()  :  eval.c
<item>parse_frame_specification_1()  :  stack.c
<item>print_object_command()  :  objc-lang.c
<item>printf_command()  :  printcmd.c
<item>read_objc_object()  :  objc-lang.c
<item>read_var_value()  :  findvar.c
<item>value_add()  :  valarith.c
<item>value_cast_1()  :  valops.c
<item>value_equal()  :  valarith.c
<item>value_ind()  :  valops.c
<item>value_less()  :  valarith.c
<item>value_objc_target_type()  :  objc-lang.c
<item>value_sub()  :  valarith.c
<item>watch_command_1()  :  breakpoint.c
<item>x_command()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function value_as_double()

<p><tt>DOUBLEST value_as_double ( struct value* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>unpack_double()  :  value.c
<item>value_contents()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cast_to_fixed()  :  ada-lang.c
<item>printf_command()  :  printcmd.c
<item>value_binop()  :  valarith.c
<item>value_cast_1()  :  valops.c
<item>value_equal()  :  valarith.c
<item>value_less()  :  valarith.c
<item>value_logical_not()  :  valarith.c
<item>value_neg()  :  valarith.c
<item>value_pos()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function value_as_long()

<p><tt>long value_as_long ( struct value* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>coerce_array()  :  value.c
<item>unpack_long()  :  value.c
<item>value_contents()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_array_length()  :  ada-lang.c
<item>ada_type_of_array()  :  ada-lang.c
<item>ada_value_binop()  :  ada-lang.c
<item>allocate_space_in_inferior_malloc()  :  valops.c
<item>cast_from_fixed_to_double()  :  ada-lang.c
<item>cast_to_fixed()  :  ada-lang.c
<item>decode_dollar()  :  linespec.c
<item>desc_bounds()  :  ada-lang.c
<item>do_captured_thread_select()  :  thread.c
<item>evaluate_struct_tuple()  :  eval.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>execute_stack_op()  :  dwarf2expr.c
<item>find_function_addr()  :  infcall.c
<item>find_rt_vbase_offset()  :  valops.c
<item>gen_expr()  :  ax-gdb.c
<item>gen_repeat()  :  ax-gdb.c
<item>get_int_var_value()  :  ada-lang.c
<item>get_java_utf8_name()  :  jv-lang.c
<item>get_number_trailer()  :  breakpoint.c
<item>gnuv2_virtual_fn_field()  :  gnu-v2-abi.c
<item>gnuv3_baseclass_offset()  :  gnu-v3-abi.c
<item>gnuv3_rtti_type()  :  gnu-v3-abi.c
<item>hpacc_value_rtti_type()  :  hpacc-abi.c
<item>ignore_command()  :  breakpoint.c
<item>init_array_element()  :  eval.c
<item>java_link_class_type()  :  jv-lang.c
<item>lookup_child_selector_nocache()  :  objc-lang.c
<item>make_array_descriptor()  :  ada-lang.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>objc_runtime_lock_taken_p()  :  objc-lang.c
<item>parse_and_eval_long()  :  eval.c
<item>parse_frame_specification_1()  :  stack.c
<item>pos_atr()  :  ada-lang.c
<item>print_single_dwarf_location()  :  dwarf2loc.c
<item>printf_command()  :  printcmd.c
<item>quit_force()  :  top.c
<item>scan_discrim_bound()  :  ada-lang.c
<item>scm_evaluate_string()  :  scm-lang.c
<item>scm_lookup_name()  :  scm-lang.c
<item>set_internalvar_component()  :  value.c
<item>type_from_class()  :  jv-lang.c
<item>value_add()  :  valarith.c
<item>value_assign()  :  valops.c
<item>value_binop()  :  valarith.c
<item>value_cast_1()  :  valops.c
<item>value_complement()  :  valarith.c
<item>value_concat()  :  valarith.c
<item>value_equal()  :  valarith.c
<item>value_in()  :  valarith.c
<item>value_less()  :  valarith.c
<item>value_neg()  :  valarith.c
<item>value_pos()  :  valarith.c
<item>value_sub()  :  valarith.c
<item>value_subscript()  :  valarith.c
<item>value_subscript_packed()  :  ada-lang.c
<item>value_subscripted_rvalue()  :  valarith.c
<item>value_val_atr()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function value_bitpos()

<p><tt>int value_bitpos ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_assign()  :  ada-lang.c
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>coerce_unspec_val_to_type()  :  ada-lang.c
<item>value_assign()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function value_bitsize()

<p><tt>int value_bitsize ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_assign()  :  ada-lang.c
<item>coerce_unspec_val_to_type()  :  ada-lang.c
<item>value_assign()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function value_change_enclosing_type()

<p><tt>struct value* value_change_enclosing_type ( struct value* val, struct type* new_encl_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_enclosing_type()  :  value.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_addr()  :  valops.c
<item>value_assign()  :  valops.c
<item>value_cast_1()  :  valops.c
<item>value_full_object()  :  valops.c
<item>value_ind()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>all_values  :  value.c
</itemize>
</descrip>

<sect1>Global Function value_contents()

<p><tt>const gdb_byte* value_contents ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_contents_writeable()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_value_assign()  :  ada-lang.c
<item>ada_value_equal()  :  ada-lang.c
<item>ada_value_primitive_field()  :  ada-lang.c
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>ada_value_print()  :  ada-valprint.c
<item>ada_value_struct_elt()  :  ada-lang.c
<item>c_val_print()  :  c-valprint.c
<item>cast_into_complex()  :  valops.c
<item>coerce_ref()  :  value.c
<item>coerce_unspec_val_to_type()  :  ada-lang.c
<item>convert_actual()  :  ada-lang.c
<item>evaluate_struct_tuple()  :  eval.c
<item>evaluate_subexp_standard()  :  eval.c
<item>find_method_list()  :  valops.c
<item>hand_function_call()  :  infcall.c
<item>hpacc_value_rtti_type()  :  hpacc-abi.c
<item>hpacc_virtual_fn_field()  :  hpacc-abi.c
<item>init_array_element()  :  eval.c
<item>insert_bp_location()  :  breakpoint.c
<item>java_value_print()  :  jv-valprint.c
<item>pascal_object_print_static_field()  :  p-valprint.c
<item>print_field_values()  :  ada-valprint.c
<item>print_formatted()  :  printcmd.c
<item>return_command()  :  stack.c
<item>scm_lreadr()  :  scm-exp.c
<item>search_struct_field()  :  valops.c
<item>search_struct_method()  :  valops.c
<item>set_internalvar_component()  :  value.c
<item>to_fixed_variant_branch_type()  :  ada-lang.c
<item>val_print_packed_array_elements()  :  ada-valprint.c
<item>value_as_address()  :  value.c
<item>value_as_double()  :  value.c
<item>value_as_long()  :  value.c
<item>value_assign()  :  valops.c
<item>value_binop()  :  valarith.c
<item>value_cast_1()  :  valops.c
<item>value_concat()  :  valarith.c
<item>value_contents_equal()  :  value.c
<item>value_equal()  :  valarith.c
<item>value_in()  :  valarith.c
<item>value_literal_complex()  :  valops.c
<item>value_logical_not()  :  valarith.c
<item>value_primitive_field()  :  value.c
<item>value_slice()  :  valops.c
<item>value_strcmp()  :  valarith.c
<item>value_subscript()  :  valarith.c
<item>value_subscripted_rvalue()  :  valarith.c
<item>watchpoint_equal()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function value_contents_all()

<p><tt>const gdb_byte* value_contents_all ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_fetch_lazy()  :  valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_value_print()  :  c-valprint.c
<item>common_val_print()  :  valprint.c
<item>cp_print_static_field()  :  cp-valprint.c
<item>find_method_list()  :  valops.c
<item>hand_function_call()  :  infcall.c
<item>hpacc_value_rtti_type()  :  hpacc-abi.c
<item>search_struct_method()  :  valops.c
<item>value_array()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function value_contents_all_raw()

<p><tt>gdb_byte* value_contents_all_raw ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_array()  :  valops.c
<item>value_at()  :  valops.c
<item>value_copy()  :  value.c
<item>value_fetch_lazy()  :  valops.c
<item>value_primitive_field()  :  value.c
<item>value_repeat()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function value_contents_equal()

<p><tt>int value_contents_equal ( struct value* val1, struct value* val2 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_contents()  :  value.c
<item>value_type()  :  value.c
<item>memcmp()
</itemize>
</descrip>

<sect1>Global Function value_contents_raw()

<p><tt>gdb_byte* value_contents_raw ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_assign()  :  ada-lang.c
<item>ada_value_binop()  :  ada-lang.c
<item>cast_into_complex()  :  valops.c
<item>coerce_unspec_val_to_type()  :  ada-lang.c
<item>convert_actual()  :  ada-lang.c
<item>dwarf2_evaluate_loc_desc()  :  dwarf2loc.c
<item>ensure_lval()  :  ada-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>hand_function_call()  :  infcall.c
<item>init_array_element()  :  eval.c
<item>print_return_value()  :  infcmd.c
<item>read_var_value()  :  findvar.c
<item>search_struct_field()  :  valops.c
<item>set_traceframe_context()  :  tracepoint.c
<item>value_assign()  :  valops.c
<item>value_binop()  :  valarith.c
<item>value_bitstring()  :  valops.c
<item>value_contents_writeable()  :  value.c
<item>value_from_contents_and_address()  :  ada-lang.c
<item>value_from_double()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_from_pointer()  :  value.c
<item>value_from_register()  :  findvar.c
<item>value_from_string()  :  value.c
<item>value_literal_complex()  :  valops.c
<item>value_of_builtin_frame_fp_reg()  :  std-regs.c
<item>value_of_builtin_frame_pc_reg()  :  std-regs.c
<item>value_of_builtin_frame_reg()  :  std-regs.c
<item>value_of_register()  :  findvar.c
<item>value_primitive_field()  :  value.c
<item>value_slice()  :  valops.c
<item>value_string()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function value_contents_writeable()

<p><tt>gdb_byte* value_contents_writeable ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_contents_raw()  :  value.c
<item>value_fetch_lazy()  :  valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_value_print()  :  c-valprint.c
<item>cp_print_hpacc_virtual_table_entries()  :  cp-valprint.c
<item>evaluate_struct_tuple()  :  eval.c
<item>make_array_descriptor()  :  ada-lang.c
<item>set_internalvar_component()  :  value.c
<item>value_binop()  :  valarith.c
<item>value_contents()  :  value.c
<item>value_slice()  :  valops.c
<item>value_subscripted_rvalue()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function value_copy()

<p><tt>struct value* value_copy ( struct value* arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_frame_id_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>deprecated_value_regnum_hack()  :  value.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_contents_all_raw()  :  value.c
<item>value_embedded_offset()  :  value.c
<item>value_enclosing_type()  :  value.c
<item>value_lazy()  :  value.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>access_value_history()  :  value.c
<item>ada_coerce_to_simple_array_ptr()  :  ada-lang.c
<item>ada_value_assign()  :  ada-lang.c
<item>ada_value_ptr_subscript()  :  ada-lang.c
<item>bpstat_copy()  :  breakpoint.c
<item>c_value_of_child()  :  varobj.c
<item>c_value_print()  :  c-valprint.c
<item>cast_to_fixed()  :  ada-lang.c
<item>cp_print_hpacc_virtual_table_entries()  :  cp-valprint.c
<item>cplus_value_of_child()  :  varobj.c
<item>set_internalvar()  :  value.c
<item>thin_data_pntr()  :  ada-lang.c
<item>value_addr()  :  valops.c
<item>value_assign()  :  valops.c
<item>value_of_internalvar()  :  value.c
<item>varobj_fixup_value()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function value_embedded_offset()

<p><tt>int value_embedded_offset ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_value_print()  :  c-valprint.c
<item>common_val_print()  :  valprint.c
<item>cp_print_static_field()  :  cp-valprint.c
<item>evaluate_subexp_standard()  :  eval.c
<item>find_method_list()  :  valops.c
<item>gnuv3_rtti_type()  :  gnu-v3-abi.c
<item>hpacc_value_rtti_type()  :  hpacc-abi.c
<item>search_struct_method()  :  valops.c
<item>value_addr()  :  valops.c
<item>value_assign()  :  valops.c
<item>value_cast_1()  :  valops.c
<item>value_copy()  :  value.c
<item>value_full_object()  :  valops.c
<item>value_primitive_field()  :  value.c
</itemize>
</descrip>

<sect1>Global Function value_enclosing_type()

<p><tt>struct type* value_enclosing_type ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_value_print()  :  c-valprint.c
<item>gnuv3_rtti_type()  :  gnu-v3-abi.c
<item>hand_function_call()  :  infcall.c
<item>hpacc_value_rtti_type()  :  hpacc-abi.c
<item>value_addr()  :  valops.c
<item>value_array()  :  valops.c
<item>value_assign()  :  valops.c
<item>value_change_enclosing_type()  :  value.c
<item>value_copy()  :  value.c
<item>value_fetch_lazy()  :  valops.c
<item>value_full_object()  :  valops.c
<item>value_ind()  :  valops.c
<item>value_primitive_field()  :  value.c
<item>value_repeat()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function value_field()

<p><tt>struct value* value_field ( struct value* arg1, int fieldno )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_primitive_field()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gnuv2_value_rtti_type()  :  gnu-v2-abi.c
<item>gnuv2_virtual_fn_field()  :  gnu-v2-abi.c
<item>gnuv3_baseclass_offset()  :  gnu-v3-abi.c
<item>gnuv3_rtti_type()  :  gnu-v3-abi.c
<item>gnuv3_virtual_fn_field()  :  gnu-v3-abi.c
</itemize>
</descrip>

<sect1>Global Function value_fn_field()

<p><tt>struct value* value_fn_field ( struct value** arg1p, struct fn_field* f, int j, struct type* type, int offset )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>deprecated_value_address_hack()  :  value.c
<item>error()  :  utils.c
<item>internal_error()  :  utils.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>lookup_symbol()  :  symtab.c
<item>value_addr()  :  valops.c
<item>value_cast()  :  valops.c
<item>value_ind()  :  valops.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_overload_match()  :  valops.c
<item>search_struct_method()  :  valops.c
<item>value_struct_elt()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function value_free()

<p><tt>void value_free ( struct value* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_clear()  :  breakpoint.c
<item>bpstat_clear_actions()  :  breakpoint.c
<item>breakpoint_init_inferior()  :  breakpoint.c
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>cplus_value_of_child()  :  varobj.c
<item>delete_breakpoint()  :  breakpoint.c
<item>do_enable_breakpoint()  :  breakpoint.c
<item>do_examine()  :  printcmd.c
<item>free_all_values()  :  value.c
<item>free_valchain()  :  breakpoint.c
<item>free_variable()  :  varobj.c
<item>print_it_typical()  :  breakpoint.c
<item>value_free_to_mark()  :  value.c
<item>value_of_child()  :  varobj.c
<item>varobj_set_value()  :  varobj.c
<item>varobj_update()  :  varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>new_objc_runtime_get_classname()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function value_free_to_mark()

<p><tt>void value_free_to_mark ( struct value* mark )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_free()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_coerce_to_simple_array_type()  :  ada-lang.c
<item>ada_template_to_fixed_record_type_1()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>breakpoint_cond_eval()  :  breakpoint.c
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>do_enable_breakpoint()  :  breakpoint.c
<item>java_value_print()  :  jv-valprint.c
<item>to_record_with_fixed_variant_part()  :  ada-lang.c
<item>val_print_packed_array_elements()  :  ada-valprint.c
<item>watch_command_1()  :  breakpoint.c
<item>watchpoint_check()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>all_values  :  value.c
</itemize>
</descrip>

<sect1>Global Function value_from_double()

<p><tt>struct value* value_from_double ( struct type* type, DOUBLEST num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>check_typedef()  :  gdbtypes.c
<item>error()  :  utils.c
<item>store_typed_floating()  :  doublest.c
<item>value_contents_raw()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cast_from_fixed_to_double()  :  ada-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>print_subexp_standard()  :  expprint.c
<item>value_cast_1()  :  valops.c
<item>value_neg()  :  valarith.c
<item>value_pos()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function value_from_longest()

<p><tt>struct value* value_from_longest ( struct type* type, long num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>check_typedef()  :  gdbtypes.c
<item>error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>store_signed_integer()  :  findvar.c
<item>store_typed_address()  :  findvar.c
<item>value_contents_raw()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_tracepoint()  :  tracepoint.c
<item>ada_array_bound()  :  ada-lang.c
<item>ada_array_length()  :  ada-lang.c
<item>ada_coerce_to_simple_array_type()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_value_ptr_subscript()  :  ada-lang.c
<item>allocate_space_in_inferior_malloc()  :  valops.c
<item>c_value_of_child()  :  varobj.c
<item>captured_main()  :  main.c
<item>cast_to_fixed()  :  ada-lang.c
<item>const_expr()  :  ax-gdb.c
<item>const_var_ref()  :  ax-gdb.c
<item>cp_print_value_fields()  :  cp-valprint.c
<item>desc_bounds()  :  ada-lang.c
<item>discrete_type_high_bound()  :  ada-lang.c
<item>discrete_type_low_bound()  :  ada-lang.c
<item>evaluate_subexp_for_sizeof()  :  eval.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>evaluate_subexp_scm()  :  scm-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>execute_stack_op()  :  dwarf2expr.c
<item>find_function_in_inferior()  :  valops.c
<item>forward_search_command()  :  source.c
<item>gnuv2_virtual_fn_field()  :  gnu-v2-abi.c
<item>gnuv3_baseclass_offset()  :  gnu-v3-abi.c
<item>gnuv3_virtual_fn_field()  :  gnu-v3-abi.c
<item>handle_inferior_event()  :  infrun.c
<item>java_print_value_fields()  :  jv-valprint.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>pascal_object_print_value_fields()  :  p-valprint.c
<item>print_scalar_formatted()  :  printcmd.c
<item>print_single_dwarf_location()  :  dwarf2loc.c
<item>print_subexp_standard()  :  expprint.c
<item>reverse_search_command()  :  source.c
<item>scm_lookup_name()  :  scm-lang.c
<item>set_breakpoint_count()  :  breakpoint.c
<item>set_input_radix_1()  :  valprint.c
<item>set_output_radix_1()  :  valprint.c
<item>set_traceframe_context()  :  tracepoint.c
<item>set_traceframe_num()  :  tracepoint.c
<item>set_tracepoint_count()  :  tracepoint.c
<item>set_tracepoint_num()  :  tracepoint.c
<item>thin_data_pntr()  :  ada-lang.c
<item>value_allocate_space_in_inferior()  :  valops.c
<item>value_assign()  :  valops.c
<item>value_cast_1()  :  valops.c
<item>value_complement()  :  valarith.c
<item>value_in()  :  valarith.c
<item>value_neg()  :  valarith.c
<item>value_nsstring()  :  objc-lang.c
<item>value_pos()  :  valarith.c
<item>value_pos_atr()  :  ada-lang.c
<item>value_primitive_field()  :  value.c
<item>value_struct_elt_for_reference()  :  valops.c
<item>value_sub()  :  valarith.c
<item>value_subscript()  :  valarith.c
<item>value_val_atr()  :  ada-lang.c
<item>value_x_unop()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function value_from_pointer()

<p><tt>struct value* value_from_pointer ( struct type* type, CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>store_typed_address()  :  findvar.c
<item>value_contents_raw()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_slice_ptr()  :  ada-lang.c
<item>ada_value_struct_elt()  :  ada-lang.c
<item>const_var_ref()  :  ax-gdb.c
<item>cp_print_value_fields()  :  cp-valprint.c
<item>evaluate_subexp_standard()  :  eval.c
<item>get_class_address_from_object()  :  objc-lang.c
<item>hand_function_call()  :  infcall.c
<item>locate_var_value()  :  findvar.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>new_objc_runtime_get_classname()  :  objc-lang.c
<item>read_objc_object()  :  objc-lang.c
<item>set_next_address()  :  printcmd.c
<item>set_traceframe_context()  :  tracepoint.c
<item>value_add()  :  valarith.c
<item>value_addr()  :  valops.c
<item>value_cast_1()  :  valops.c
<item>value_coerce_array()  :  valops.c
<item>value_coerce_function()  :  valops.c
<item>value_sub()  :  valarith.c
<item>x_command()  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function value_from_string()

<p><tt>struct value* value_from_string ( char* ptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
<item>language_string_char_type()  :  language.c
<item>value_contents_raw()  :  value.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), strlen()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Global Function value_lazy()

<p><tt>int value_lazy ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>c_value_of_root()  :  varobj.c
<item>c_value_of_variable()  :  varobj.c
<item>can_use_hardware_watchpoint()  :  breakpoint.c
<item>coerce_unspec_val_to_type()  :  ada-lang.c
<item>cp_print_hpacc_virtual_table_entries()  :  cp-valprint.c
<item>do_enable_breakpoint()  :  breakpoint.c
<item>gnuv2_virtual_fn_field()  :  gnu-v2-abi.c
<item>insert_bp_location()  :  breakpoint.c
<item>insert_breakpoints()  :  breakpoint.c
<item>locate_var_value()  :  findvar.c
<item>my_value_equal()  :  varobj.c
<item>record_latest_value()  :  value.c
<item>remove_breakpoint()  :  breakpoint.c
<item>return_command()  :  stack.c
<item>search_struct_field()  :  valops.c
<item>set_internalvar()  :  value.c
<item>value_copy()  :  value.c
<item>value_of_child()  :  varobj.c
<item>value_of_internalvar()  :  value.c
<item>value_primitive_field()  :  value.c
<item>value_slice()  :  valops.c
<item>value_subscripted_rvalue()  :  valarith.c
<item>varobj_create()  :  varobj.c
<item>varobj_update()  :  varobj.c
<item>watch_command_1()  :  breakpoint.c
<item>x_command()  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function value_mark()

<p><tt>struct value* value_mark ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_coerce_to_simple_array_type()  :  ada-lang.c
<item>ada_template_to_fixed_record_type_1()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>breakpoint_cond_eval()  :  breakpoint.c
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>do_enable_breakpoint()  :  breakpoint.c
<item>insert_bp_location()  :  breakpoint.c
<item>java_value_print()  :  jv-valprint.c
<item>to_record_with_fixed_variant_part()  :  ada-lang.c
<item>val_print_packed_array_elements()  :  ada-valprint.c
<item>watch_command_1()  :  breakpoint.c
<item>watchpoint_check()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>all_values  :  value.c
</itemize>
</descrip>

<sect1>Global Function value_next()

<p><tt>struct value* value_next ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
<item>can_use_hardware_watchpoint()  :  breakpoint.c
<item>free_valchain()  :  breakpoint.c
<item>insert_bp_location()  :  breakpoint.c
<item>remove_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function value_of_internalvar()

<p><tt>struct value* value_of_internalvar ( struct internalvar* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_value_internalvar_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>value_copy()  :  value.c
<item>value_fetch_lazy()  :  valops.c
<item>value_lazy()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_dollar()  :  linespec.c
<item>evaluate_subexp_standard()  :  eval.c
<item>get_number_trailer()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function value_offset()

<p><tt>int value_offset ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_to_fixed_value()  :  ada-lang.c
<item>ada_value_assign()  :  ada-lang.c
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>ada_value_print()  :  ada-valprint.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>c_value_print()  :  c-valprint.c
<item>can_use_hardware_watchpoint()  :  breakpoint.c
<item>coerce_unspec_val_to_type()  :  ada-lang.c
<item>desc_bounds()  :  ada-lang.c
<item>encode_actions()  :  tracepoint.c
<item>evaluate_subexp_standard()  :  eval.c
<item>find_method_list()  :  valops.c
<item>get_java_utf8_name()  :  jv-lang.c
<item>gnuv2_virtual_fn_field()  :  gnu-v2-abi.c
<item>gnuv3_rtti_type()  :  gnu-v3-abi.c
<item>hpacc_value_rtti_type()  :  hpacc-abi.c
<item>insert_bp_location()  :  breakpoint.c
<item>java_link_class_type()  :  jv-lang.c
<item>java_value_print()  :  jv-valprint.c
<item>remove_breakpoint()  :  breakpoint.c
<item>search_struct_field()  :  valops.c
<item>search_struct_method()  :  valops.c
<item>thin_data_pntr()  :  ada-lang.c
<item>type_from_class()  :  jv-lang.c
<item>unwrap_value()  :  ada-lang.c
<item>value_addr()  :  valops.c
<item>value_assign()  :  valops.c
<item>value_cast_1()  :  valops.c
<item>value_coerce_array()  :  valops.c
<item>value_coerce_function()  :  valops.c
<item>value_fetch_lazy()  :  valops.c
<item>value_from_register()  :  findvar.c
<item>value_primitive_field()  :  value.c
<item>value_repeat()  :  valops.c
<item>value_slice()  :  valops.c
<item>value_subscript()  :  valarith.c
<item>value_subscripted_rvalue()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function value_optimized_out()

<p><tt>enum opt_state value_optimized_out ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_check_printable()  :  valprint.c
</itemize>
</descrip>

<sect1>Global Function value_pointed_to_offset()

<p><tt>int value_pointed_to_offset ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_assign()  :  valops.c
<item>value_ind()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function value_primitive_field()

<p><tt>struct value* value_primitive_field ( struct value* arg1, int offset, int fieldno, struct type* arg_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_frame_id_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>deprecated_value_regnum_hack()  :  value.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>set_value_lazy()  :  value.c
<item>unpack_field_as_long()  :  value.c
<item>value_contents()  :  value.c
<item>value_contents_all_raw()  :  value.c
<item>value_contents_raw()  :  value.c
<item>value_embedded_offset()  :  value.c
<item>value_enclosing_type()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_lazy()  :  value.c
<item>value_offset()  :  value.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_primitive_field()  :  ada-lang.c
<item>gnuv2_virtual_fn_field()  :  gnu-v2-abi.c
<item>search_struct_field()  :  valops.c
<item>value_field()  :  value.c
<item>varobj_value_struct_elt_by_index()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function value_release_to_mark()

<p><tt>struct value* value_release_to_mark ( struct value* mark )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>insert_bp_location()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>all_values  :  value.c
</itemize>
</descrip>

<sect1>Global Function value_static_field()

<p><tt>struct value* value_static_field ( struct type* type, int fieldno )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_symbol()  :  symtab.c
<item>read_var_value()  :  findvar.c
<item>symbol_read_needs_frame()  :  findvar.c
<item>value_at()  :  valops.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_print_value_fields()  :  cp-valprint.c
<item>java_print_value_fields()  :  jv-valprint.c
<item>search_struct_field()  :  valops.c
<item>value_struct_elt_for_reference()  :  valops.c
<item>varobj_value_struct_elt_by_index()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function value_type()

<p><tt>struct type* value_type ( struct value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_args_match()  :  ada-lang.c
<item>ada_array_bound()  :  ada-lang.c
<item>ada_array_length()  :  ada-lang.c
<item>ada_coerce_ref()  :  ada-lang.c
<item>ada_coerce_to_simple_array()  :  ada-lang.c
<item>ada_coerce_to_simple_array_ptr()  :  ada-lang.c
<item>ada_convert_actuals()  :  ada-lang.c
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_tag_name()  :  ada-lang.c
<item>ada_tag_type()  :  ada-lang.c
<item>ada_to_fixed_value()  :  ada-lang.c
<item>ada_to_static_fixed_value()  :  ada-lang.c
<item>ada_type_of_array()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_value_assign()  :  ada-lang.c
<item>ada_value_binop()  :  ada-lang.c
<item>ada_value_equal()  :  ada-lang.c
<item>ada_value_print()  :  ada-valprint.c
<item>ada_value_slice()  :  ada-lang.c
<item>ada_value_struct_elt()  :  ada-lang.c
<item>ada_value_subscript()  :  ada-lang.c
<item>binop_user_defined_p()  :  valarith.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>c_value_print()  :  c-valprint.c
<item>can_use_hardware_watchpoint()  :  breakpoint.c
<item>cast_from_fixed_to_double()  :  ada-lang.c
<item>cast_into_complex()  :  valops.c
<item>cast_to_fixed()  :  ada-lang.c
<item>check_field()  :  valops.c
<item>coerce_array()  :  value.c
<item>coerce_enum()  :  value.c
<item>coerce_for_assign()  :  ada-lang.c
<item>coerce_ref()  :  value.c
<item>coerce_unspec_val_to_type()  :  ada-lang.c
<item>common_val_print()  :  valprint.c
<item>convert_actual()  :  ada-lang.c
<item>cp_print_hpacc_virtual_table_entries()  :  cp-valprint.c
<item>cplus_value_of_child()  :  varobj.c
<item>decode_dollar()  :  linespec.c
<item>decode_packed_array()  :  ada-lang.c
<item>desc_bounds()  :  ada-lang.c
<item>desc_data()  :  ada-lang.c
<item>ensure_lval()  :  ada-lang.c
<item>evaluate_struct_tuple()  :  eval.c
<item>evaluate_subexp_for_address()  :  eval.c
<item>evaluate_subexp_for_sizeof()  :  eval.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>find_function_addr()  :  infcall.c
<item>find_overload_match()  :  valops.c
<item>gen_expr()  :  ax-gdb.c
<item>gen_repeat()  :  ax-gdb.c
<item>get_closure_dynamic_type()  :  gdbtypes.c
<item>get_closure_implementation_fn()  :  gdbtypes.c
<item>get_java_utf8_name()  :  jv-lang.c
<item>get_number_trailer()  :  breakpoint.c
<item>gnuv2_value_rtti_type()  :  gnu-v2-abi.c
<item>gnuv2_virtual_fn_field()  :  gnu-v2-abi.c
<item>gnuv3_rtti_type()  :  gnu-v3-abi.c
<item>gnuv3_virtual_fn_field()  :  gnu-v3-abi.c
<item>hand_function_call()  :  infcall.c
<item>hpacc_value_rtti_type()  :  hpacc-abi.c
<item>init_array_element()  :  eval.c
<item>insert_bp_location()  :  breakpoint.c
<item>invoke_block_command()  :  printcmd.c
<item>java_class_from_object()  :  jv-lang.c
<item>java_link_class_type()  :  jv-lang.c
<item>java_print_value_fields()  :  jv-valprint.c
<item>java_value_print()  :  jv-valprint.c
<item>lookup_symbol_aux()  :  symtab.c
<item>maintenance_print_type()  :  typeprint.c
<item>make_array_descriptor()  :  ada-lang.c
<item>output_command()  :  printcmd.c
<item>pascal_object_print_static_field()  :  p-valprint.c
<item>pascal_parse()  :  p-exp.c
<item>pascal_value_print()  :  p-valprint.c
<item>pos_atr()  :  ada-lang.c
<item>possible_user_operator_p()  :  ada-lang.c
<item>print_command_1()  :  printcmd.c
<item>print_formatted()  :  printcmd.c
<item>print_frame_args()  :  stack.c
<item>print_object_command()  :  objc-lang.c
<item>printf_command()  :  printcmd.c
<item>remove_breakpoint()  :  breakpoint.c
<item>resolve_subexp()  :  ada-lang.c
<item>return_command()  :  stack.c
<item>scan_discrim_bound()  :  ada-lang.c
<item>scm_lreadr()  :  scm-exp.c
<item>set_internalvar_component()  :  value.c
<item>thin_data_pntr()  :  ada-lang.c
<item>to_fixed_variant_branch_type()  :  ada-lang.c
<item>type_from_class()  :  jv-lang.c
<item>type_of_child()  :  varobj.c
<item>typecmp()  :  valops.c
<item>unop_user_defined_p()  :  valarith.c
<item>unwrap_value()  :  ada-lang.c
<item>value_add()  :  valarith.c
<item>value_addr()  :  valops.c
<item>value_arg_coerce()  :  infcall.c
<item>value_as_address()  :  value.c
<item>value_as_double()  :  value.c
<item>value_as_long()  :  value.c
<item>value_assign()  :  valops.c
<item>value_binop()  :  valarith.c
<item>value_cast_1()  :  valops.c
<item>value_coerce_array()  :  valops.c
<item>value_coerce_function()  :  valops.c
<item>value_complement()  :  valarith.c
<item>value_concat()  :  valarith.c
<item>value_contents_equal()  :  value.c
<item>value_equal()  :  valarith.c
<item>value_field()  :  value.c
<item>value_find_oload_method_list()  :  valops.c
<item>value_fn_field()  :  value.c
<item>value_full_object()  :  valops.c
<item>value_in()  :  valarith.c
<item>value_ind()  :  valops.c
<item>value_less()  :  valarith.c
<item>value_logical_not()  :  valarith.c
<item>value_neg()  :  valarith.c
<item>value_objc_target_type()  :  objc-lang.c
<item>value_of_builtin_frame_fp_reg()  :  std-regs.c
<item>value_of_builtin_frame_pc_reg()  :  std-regs.c
<item>value_of_builtin_frame_reg()  :  std-regs.c
<item>value_pos()  :  valarith.c
<item>value_slice()  :  valops.c
<item>value_strcmp()  :  valarith.c
<item>value_struct_elt()  :  valops.c
<item>value_sub()  :  valarith.c
<item>value_subscript()  :  valarith.c
<item>value_subscript_packed()  :  ada-lang.c
<item>value_subscripted_rvalue()  :  valarith.c
<item>value_val_atr()  :  ada-lang.c
<item>value_x_binop()  :  valarith.c
<item>value_x_unop()  :  valarith.c
<item>varobj_create()  :  varobj.c
<item>varobj_fixup_value()  :  varobj.c
<item>varobj_get_dynamic_type()  :  varobj.c
<item>varobj_get_type_internal()  :  varobj.c
<item>varobj_value_struct_elt_by_index()  :  varobj.c
<item>watch_command_1()  :  breakpoint.c
<item>watchpoint_equal()  :  breakpoint.c
<item>whatis_exp()  :  typeprint.c
<item>x_command()  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function value_var_status()

<p><tt>int value_var_status ( struct value* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_value_print()  :  c-valprint.c
</itemize>
</descrip>

<sect1>Local Function show_convenience()

<p><tt>static void show_convenience ( const char* ignore, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>printf_filtered()  :  utils.c
<item>printf_unfiltered()  :  utils.c
<item>value_print()  :  valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_values()  :  value.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>internalvars  :  value.c
</itemize>
</descrip>

<sect1>Local Function show_values()

<p><tt>static void show_values ( const char* num_exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_value_history()  :  value.c
<item>parse_and_eval_long()  :  eval.c
<item>printf_filtered()  :  utils.c
<item>value_print()  :  valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_values()  :  value.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>value_history_count  :  value.c
</itemize>
</descrip>

</article>
