{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF regcache.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File regcache.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "regcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "reggroups.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "observer.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct regcache_descr\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct regcache_descr}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch* gdbarch;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int nr_raw_registers;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 long sizeof_raw_registers;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 long sizeof_raw_register_valid_p;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int nr_cooked_registers;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 long sizeof_cooked_registers;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 long sizeof_cooked_register_valid_p;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 long* register_offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 long* sizeof_register;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct type** register_type;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct regcache\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct regcache}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct regcache_descr* descr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdb_byte* registers;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdb_byte* register_valid_p;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int readonly_p;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Typedef regcache_read_ftype\par}
{\s5\f1\fs20\ql\sb50\sa50 typedef void ( regcache_read_ftype)(struct regcache* regcache,int regnum,void* buf)\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Typedef regcache_write_ftype\par}
{\s5\f1\fs20\ql\sb50\sa50 typedef void ( regcache_write_ftype)(struct regcache* regcache,int regnum,const void* buf)\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type enum regcache_dump_what\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum regcache_dump_what}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 regcache_dump_none;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 regcache_dump_raw;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 regcache_dump_cooked;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 regcache_dump_groups;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable current_regcache\par}
{\s5\f1\fs20\ql\sb50\sa50 struct regcache* current_regcache\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell reggroups.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell trad-frame.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell value.c\cell\cell\row
Used in:\cell _initialize_regcache()\cell regcache.c\cell\row
\cell build_regcache()\cell regcache.c\cell\row
\cell create_new_frame()\cell frame.c\cell\row
\cell deprecated_read_register_gen()\cell regcache.c\cell\row
\cell deprecated_register_bytes()\cell regcache.c\cell\row
\cell deprecated_write_register_gen()\cell regcache.c\cell\row
\cell fetch_register_using_p()\cell remote.c\cell\row
\cell frame_pop()\cell frame.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell legacy_store_return_value()\cell arch-utils.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell put_frame_register()\cell frame.c\cell\row
\cell regcache_cpy_no_passthrough()\cell regcache.c\cell\row
\cell regcache_dup()\cell regcache.c\cell\row
\cell regcache_dup_no_passthrough()\cell regcache.c\cell\row
\cell regcache_print()\cell regcache.c\cell\row
\cell regcache_raw_read()\cell regcache.c\cell\row
\cell regcache_raw_supply()\cell regcache.c\cell\row
\cell regcache_raw_write()\cell regcache.c\cell\row
\cell register_cached()\cell regcache.c\cell\row
\cell registers_changed()\cell regcache.c\cell\row
\cell remote_async_wait()\cell remote.c\cell\row
\cell remote_fetch_registers()\cell remote.c\cell\row
\cell remote_prepare_to_store()\cell remote.c\cell\row
\cell remote_store_registers()\cell remote.c\cell\row
\cell remote_wait()\cell remote.c\cell\row
\cell restore_inferior_status()\cell infrun.c\cell\row
\cell return_command()\cell stack.c\cell\row
\cell save_inferior_status()\cell infrun.c\cell\row
\cell set_register_cached()\cell regcache.c\cell\row
\cell store_register_using_P()\cell remote.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable regcache_descr_handle\par}
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch_data* regcache_descr_handle\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell regcache.c\cell\cell\row
Used in:\cell _initialize_regcache()\cell regcache.c\cell\row
\cell regcache_descr()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable registers_ptid\par}
{\s5\f1\fs20\ql\sb50\sa50 static ptid_t registers_ptid\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_regcache()\cell\cell\row
\cell regcache_raw_read()\cell\cell\row
\cell regcache_raw_supply()\cell\cell\row
\cell regcache_raw_write()\cell\cell\row
\cell registers_changed()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_regcache()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_regcache ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.c\cell\cell\row
Calls: \cell deprecated_register_gdbarch_swap()\cell gdbarch.c\cell\row
\cell gdbarch_data_register_post_init()\cell gdbarch.c\cell\row
\cell observer_attach_target_changed()\cell observer.c\cell\row
\cell pid_to_ptid()\cell infrun.c\cell\row
\cell  add_cmd(), add_com()\cell\cell\row
Refs Func:\cell build_regcache()\cell regcache.c\cell\row
\cell init_regcache_descr()\cell regcache.c\cell\row
\cell maintenance_print_cooked_registers()\cell regcache.c\cell\row
\cell maintenance_print_raw_registers()\cell regcache.c\cell\row
\cell maintenance_print_register_groups()\cell regcache.c\cell\row
\cell maintenance_print_registers()\cell regcache.c\cell\row
\cell reg_flush_command()\cell regcache.c\cell\row
\cell regcache_observer_target_changed()\cell regcache.c\cell\row
Refs Var:\cell current_regcache\cell regcache.c\cell\row
\cell regcache_descr_handle\cell regcache.c\cell\row
\cell registers_ptid\cell regcache.c\cell\row
\cell  maintenanceprintlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_grub_regcache_for_registers()\par}
{\s5\f1\fs20\ql\sb50\sa50 gdb_byte* deprecated_grub_regcache_for_registers ( struct regcache* regcache )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Called by:\cell legacy_extract_return_value()\cell arch-utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_read_register_bytes()\par}
{\s5\f1\fs20\ql\sb50\sa50 void deprecated_read_register_bytes ( int in_start, gdb_byte* in_buf, int in_len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell deprecated_read_register_gen()\cell regcache.c\cell\row
\cell gdbarch_deprecated_register_byte()\cell gdbarch.c\cell\row
\cell gdbarch_num_pseudo_regs()\cell gdbarch.c\cell\row
\cell gdbarch_num_regs()\cell gdbarch.c\cell\row
\cell gdbarch_register_name()\cell gdbarch.c\cell\row
\cell register_size()\cell regcache.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_read_register_gen()\par}
{\s5\f1\fs20\ql\sb50\sa50 void deprecated_read_register_gen ( int regnum, gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell regcache_cooked_read()\cell regcache.c\cell\row
Called by:\cell debug_print_register()\cell target/target.c\cell\row
\cell deprecated_read_register_bytes()\cell regcache.c\cell\row
\cell deprecated_write_register_bytes()\cell regcache.c\cell\row
\cell read_register()\cell regcache.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_regcache\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_register_bytes()\par}
{\s5\f1\fs20\ql\sb50\sa50 int deprecated_register_bytes ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Refs Var:\cell current_regcache\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_registers_fetched()\par}
{\s5\f1\fs20\ql\sb50\sa50 void deprecated_registers_fetched ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell gdbarch_num_regs()\cell gdbarch.c\cell\row
\cell set_register_cached()\cell regcache.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_write_register_bytes()\par}
{\s5\f1\fs20\ql\sb50\sa50 void deprecated_write_register_bytes ( int myregstart, gdb_byte* myaddr, int inlen )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell deprecated_read_register_gen()\cell regcache.c\cell\row
\cell deprecated_write_register_gen()\cell regcache.c\cell\row
\cell gdbarch_deprecated_register_byte()\cell gdbarch.c\cell\row
\cell gdbarch_num_pseudo_regs()\cell gdbarch.c\cell\row
\cell gdbarch_num_regs()\cell gdbarch.c\cell\row
\cell register_size()\cell regcache.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_write_register_gen()\par}
{\s5\f1\fs20\ql\sb50\sa50 void deprecated_write_register_gen ( int regnum, gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell regcache_cooked_write()\cell regcache.c\cell\row
Called by:\cell deprecated_write_register_bytes()\cell regcache.c\cell\row
\cell write_register()\cell regcache.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_regcache\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function generic_target_write_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 void generic_target_write_pc ( CORE_ADDR pc, ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell gdbarch_pc_regnum()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell write_register_pid()\cell regcache.c\cell\row
Used in:\cell gdbarch_alloc()\cell gdbarch.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_regcache_arch()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch* get_regcache_arch ( const struct regcache* regcache )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function make_cleanup_regcache_xfree()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct cleanup* make_cleanup_regcache_xfree ( struct regcache* regcache )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell make_cleanup()\cell utils.c\cell\row
Called by:\cell frame_pop()\cell frame.c\cell\row
\cell frame_save_as_regcache()\cell frame.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
Refs Func:\cell do_regcache_xfree()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function read_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR read_pc ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell read_pc_pid()\cell regcache.c\cell\row
Called by:\cell default_macro_scope()\cell macroscope.c\cell\row
\cell finish_tfind_command()\cell tracepoint.c\cell\row
\cell get_selected_block()\cell stack.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell keep_going()\cell infrun.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell prepare_to_proceed()\cell infrun.c\cell\row
\cell proceed()\cell infrun.c\cell\row
\cell resume()\cell infrun.c\cell\row
\cell switch_to_thread()\cell thread.c\cell\row
\cell trace_dump_command()\cell tracepoint.c\cell\row
\cell trace_find_pc_command()\cell tracepoint.c\cell\row
\cell until_next_command()\cell infcmd.c\cell\row
\cell watchpoint_check()\cell breakpoint.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function read_pc_pid()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR read_pc_pid ( ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell gdbarch_addr_bits_remove()\cell gdbarch.c\cell\row
\cell gdbarch_pc_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_read_pc()\cell gdbarch.c\cell\row
\cell gdbarch_read_pc_p()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell read_register_pid()\cell regcache.c\cell\row
Called by:\cell adjust_pc_after_break()\cell infrun.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell prepare_to_proceed()\cell infrun.c\cell\row
\cell read_pc()\cell regcache.c\cell\row
\cell restore_thread_inlined_call_stack()\cell inlining.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function read_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 unsigned long read_register ( int regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell deprecated_read_register_gen()\cell regcache.c\cell\row
\cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell register_size()\cell regcache.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
Called by:\cell debug_print_register()\cell target/target.c\cell\row
\cell read_register_pid()\cell regcache.c\cell\row
\cell read_sp()\cell regcache.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function read_register_pid()\par}
{\s5\f1\fs20\ql\sb50\sa50 unsigned long read_register_pid ( int regnum, ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell ptid_equal()\cell infrun.c\cell\row
\cell read_register()\cell regcache.c\cell\row
Called by:\cell read_pc_pid()\cell regcache.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function read_sp()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR read_sp ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell gdbarch_read_sp()\cell gdbarch.c\cell\row
\cell gdbarch_read_sp_p()\cell gdbarch.c\cell\row
\cell gdbarch_sp_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_unwind_sp_p()\cell gdbarch.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell get_frame_sp()\cell frame.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell read_register()\cell regcache.c\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_compare()\par}
{\s5\f1\fs20\ql\sb50\sa50 int regcache_compare ( struct regcache* rc1, struct regcache* rc2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell  memcmp()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_cooked_read()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_cooked_read ( struct regcache* regcache, int regnum, gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell gdbarch_pseudo_register_read()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell regcache_raw_read()\cell regcache.c\cell\row
\cell register_buffer()\cell regcache.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell deprecated_read_register_gen()\cell regcache.c\cell\row
\cell do_cooked_read()\cell regcache.c\cell\row
\cell dummy_frame_prev_register()\cell dummy-frame.c\cell\row
\cell regcache_cooked_read_signed()\cell regcache.c\cell\row
\cell regcache_cooked_read_unsigned()\cell regcache.c\cell\row
\cell regcache_dump()\cell regcache.c\cell\row
\cell sentinel_frame_prev_register()\cell sentinel-frame.c\cell\row
Used in:\cell regcache_cooked_read_part()\cell regcache.c\cell\row
\cell regcache_cooked_write_part()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_cooked_read_part()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_cooked_read_part ( struct regcache* regcache, int regnum, int offset, int len, gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell regcache_xfer_part()\cell regcache.c\cell\row
Refs Func:\cell regcache_cooked_read()\cell regcache.c\cell\row
\cell regcache_cooked_write()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_cooked_read_signed()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_cooked_read_signed ( struct regcache* regcache, int regnum, long* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell extract_signed_integer()\cell findvar.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell regcache_cooked_read()\cell regcache.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_cooked_read_unsigned()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_cooked_read_unsigned ( struct regcache* regcache, int regnum, unsigned long* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell regcache_cooked_read()\cell regcache.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_cooked_write()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_cooked_write ( struct regcache* regcache, int regnum, const gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell gdbarch_pseudo_register_write()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell regcache_raw_write()\cell regcache.c\cell\row
Called by:\cell deprecated_write_register_gen()\cell regcache.c\cell\row
\cell put_frame_register()\cell frame.c\cell\row
\cell regcache_cooked_write_signed()\cell regcache.c\cell\row
\cell regcache_cooked_write_unsigned()\cell regcache.c\cell\row
\cell regcache_restore()\cell regcache.c\cell\row
Used in:\cell regcache_cooked_read_part()\cell regcache.c\cell\row
\cell regcache_cooked_write_part()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_cooked_write_part()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_cooked_write_part ( struct regcache* regcache, int regnum, int offset, int len, const gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell regcache_xfer_part()\cell regcache.c\cell\row
Refs Func:\cell regcache_cooked_read()\cell regcache.c\cell\row
\cell regcache_cooked_write()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_cooked_write_signed()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_cooked_write_signed ( struct regcache* regcache, int regnum, long val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell regcache_cooked_write()\cell regcache.c\cell\row
\cell store_signed_integer()\cell findvar.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_cooked_write_unsigned()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_cooked_write_unsigned ( struct regcache* regcache, int regnum, unsigned long val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell regcache_cooked_write()\cell regcache.c\cell\row
\cell store_unsigned_integer()\cell findvar.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_cpy()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_cpy ( struct regcache* dst, struct regcache* src )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell regcache_cpy_no_passthrough()\cell regcache.c\cell\row
\cell regcache_restore()\cell regcache.c\cell\row
\cell regcache_save()\cell regcache.c\cell\row
Called by:\cell frame_pop()\cell frame.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell regcache_dup()\cell regcache.c\cell\row
\cell restore_inferior_status()\cell infrun.c\cell\row
Refs Func:\cell do_cooked_read()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_cpy_no_passthrough()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_cpy_no_passthrough ( struct regcache* dst, struct regcache* src )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
\cell regcache_cpy()\cell regcache.c\cell\row
\cell regcache_dup_no_passthrough()\cell regcache.c\cell\row
Refs Var:\cell current_regcache\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_dup()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct regcache* regcache_dup ( struct regcache* src )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell regcache_cpy()\cell regcache.c\cell\row
\cell regcache_xmalloc()\cell regcache.c\cell\row
Called by:\cell save_inferior_status()\cell infrun.c\cell\row
Refs Var:\cell current_regcache\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_dup_no_passthrough()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct regcache* regcache_dup_no_passthrough ( struct regcache* src )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell regcache_cpy_no_passthrough()\cell regcache.c\cell\row
\cell regcache_xmalloc()\cell regcache.c\cell\row
Called by:\cell save_inferior_status()\cell infrun.c\cell\row
Refs Var:\cell current_regcache\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_observer_target_changed()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_observer_target_changed ( struct target_ops* target )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell registers_changed()\cell regcache.c\cell\row
Used in:\cell _initialize_regcache()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_raw_collect()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_raw_collect ( const struct regcache* regcache, int regnum, void* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell register_buffer()\cell regcache.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell remote_store_registers()\cell remote.c\cell\row
\cell store_register_using_P()\cell remote.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_raw_read()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_raw_read ( struct regcache* regcache, int regnum, gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell ptid_equal()\cell infrun.c\cell\row
\cell register_buffer()\cell regcache.c\cell\row
\cell register_cached()\cell regcache.c\cell\row
\cell registers_changed()\cell regcache.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell regcache_cooked_read()\cell regcache.c\cell\row
\cell regcache_dump()\cell regcache.c\cell\row
\cell regcache_raw_read_signed()\cell regcache.c\cell\row
\cell regcache_raw_read_unsigned()\cell regcache.c\cell\row
\cell remote_prepare_to_store()\cell remote.c\cell\row
Used in:\cell regcache_raw_read_part()\cell regcache.c\cell\row
\cell regcache_raw_write_part()\cell regcache.c\cell\row
Refs Var:\cell current_regcache\cell regcache.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell registers_ptid\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_raw_read_part()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_raw_read_part ( struct regcache* regcache, int regnum, int offset, int len, gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell regcache_xfer_part()\cell regcache.c\cell\row
Refs Func:\cell regcache_raw_read()\cell regcache.c\cell\row
\cell regcache_raw_write()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_raw_read_signed()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_raw_read_signed ( struct regcache* regcache, int regnum, long* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell extract_signed_integer()\cell findvar.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell regcache_raw_read()\cell regcache.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_raw_read_unsigned()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_raw_read_unsigned ( struct regcache* regcache, int regnum, unsigned long* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell regcache_raw_read()\cell regcache.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_raw_supply()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_raw_supply ( struct regcache* regcache, int regnum, const void* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell ptid_equal()\cell infrun.c\cell\row
\cell register_buffer()\cell regcache.c\cell\row
\cell registers_changed()\cell regcache.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk()\cell\cell\row
Called by:\cell fetch_register_using_p()\cell remote.c\cell\row
\cell remote_async_wait()\cell remote.c\cell\row
\cell remote_fetch_registers()\cell remote.c\cell\row
\cell remote_wait()\cell remote.c\cell\row
Refs Var:\cell current_regcache\cell regcache.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell registers_ptid\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_raw_write()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_raw_write ( struct regcache* regcache, int regnum, const gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell gdbarch_cannot_store_register()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell ptid_equal()\cell infrun.c\cell\row
\cell regcache_valid_p()\cell regcache.c\cell\row
\cell register_buffer()\cell regcache.c\cell\row
\cell registers_changed()\cell regcache.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), memcmp()\cell\cell\row
Called by:\cell regcache_cooked_write()\cell regcache.c\cell\row
\cell regcache_raw_write_signed()\cell regcache.c\cell\row
\cell regcache_raw_write_unsigned()\cell regcache.c\cell\row
\cell write_inferior_status_register()\cell infrun.c\cell\row
Used in:\cell regcache_raw_read_part()\cell regcache.c\cell\row
\cell regcache_raw_write_part()\cell regcache.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_regcache\cell regcache.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell registers_ptid\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_raw_write_part()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_raw_write_part ( struct regcache* regcache, int regnum, int offset, int len, const gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell regcache_xfer_part()\cell regcache.c\cell\row
Refs Func:\cell regcache_raw_read()\cell regcache.c\cell\row
\cell regcache_raw_write()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_raw_write_signed()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_raw_write_signed ( struct regcache* regcache, int regnum, long val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell regcache_raw_write()\cell regcache.c\cell\row
\cell store_signed_integer()\cell findvar.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_raw_write_unsigned()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_raw_write_unsigned ( struct regcache* regcache, int regnum, unsigned long val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell regcache_raw_write()\cell regcache.c\cell\row
\cell store_unsigned_integer()\cell findvar.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_restore()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_restore ( struct regcache* dst, regcache_cooked_read_ftype* cooked_read, void* cooked_read_context )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell gdbarch_register_reggroup_p()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell regcache_cooked_write()\cell regcache.c\cell\row
Called by:\cell regcache_cpy()\cell regcache.c\cell\row
Refs Var:\cell restore_reggroup\cell reggroups.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_save()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_save ( struct regcache* dst, regcache_cooked_read_ftype* cooked_read, void* src )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell gdbarch_register_reggroup_p()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell register_buffer()\cell regcache.c\cell\row
\cell register_size()\cell regcache.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk()\cell\cell\row
Called by:\cell frame_save_as_regcache()\cell frame.c\cell\row
\cell regcache_cpy()\cell regcache.c\cell\row
Refs Var:\cell save_reggroup\cell reggroups.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_valid_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int regcache_valid_p ( struct regcache* regcache, int regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell regcache_dump()\cell regcache.c\cell\row
\cell regcache_raw_write()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_xfree()\par}
{\s5\f1\fs20\ql\sb50\sa50 void regcache_xfree ( struct regcache* regcache )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
Called by:\cell discard_inferior_status()\cell infrun.c\cell\row
\cell do_regcache_xfree()\cell regcache.c\cell\row
\cell dummy_frame_push()\cell dummy-frame.c\cell\row
\cell restore_inferior_status()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function regcache_xmalloc()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct regcache* regcache_xmalloc ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell regcache_descr()\cell regcache.c\cell\row
\cell xcalloc()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell build_infrun()\cell infrun.c\cell\row
\cell build_regcache()\cell regcache.c\cell\row
\cell frame_save_as_regcache()\cell frame.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell regcache_dup()\cell regcache.c\cell\row
\cell regcache_dup_no_passthrough()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function register_cached()\par}
{\s5\f1\fs20\ql\sb50\sa50 int register_cached ( int regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Called by:\cell frame_register_read()\cell frame.c\cell\row
\cell regcache_raw_read()\cell regcache.c\cell\row
\cell value_from_register()\cell findvar.c\cell\row
\cell value_of_register()\cell findvar.c\cell\row
Refs Var:\cell current_regcache\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function register_offset_hack()\par}
{\s5\f1\fs20\ql\sb50\sa50 int register_offset_hack ( struct gdbarch* gdbarch, int regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell regcache_descr()\cell regcache.c\cell\row
Called by:\cell sentinel_frame_prev_register()\cell sentinel-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function register_size()\par}
{\s5\f1\fs20\ql\sb50\sa50 int register_size ( struct gdbarch* gdbarch, int regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell gdbarch_num_pseudo_regs()\cell gdbarch.c\cell\row
\cell gdbarch_num_regs()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell regcache_descr()\cell regcache.c\cell\row
Called by:\cell collect_symbol()\cell tracepoint.c\cell\row
\cell debug_print_register()\cell target/target.c\cell\row
\cell default_print_registers_info()\cell infcmd.c\cell\row
\cell deprecated_read_register_bytes()\cell regcache.c\cell\row
\cell deprecated_write_register_bytes()\cell regcache.c\cell\row
\cell dwarf2_frame_prev_register()\cell dwarf2-frame.c\cell\row
\cell dwarf_expr_read_reg()\cell dwarf2loc.c\cell\row
\cell execute_cfa_program()\cell dwarf2-frame.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell frame_register_unwind()\cell frame.c\cell\row
\cell frame_unwind_register_signed()\cell frame.c\cell\row
\cell frame_unwind_register_unsigned()\cell frame.c\cell\row
\cell frame_unwind_unsigned_register()\cell frame.c\cell\row
\cell init_remote_state()\cell remote.c\cell\row
\cell put_frame_register()\cell frame.c\cell\row
\cell read_reg()\cell dwarf2-frame.c\cell\row
\cell read_register()\cell regcache.c\cell\row
\cell regcache_save()\cell regcache.c\cell\row
\cell remote_async_wait()\cell remote.c\cell\row
\cell remote_wait()\cell remote.c\cell\row
\cell store_register_using_P()\cell remote.c\cell\row
\cell trad_frame_get_prev_register()\cell trad-frame.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_from_register()\cell findvar.c\cell\row
\cell value_of_register()\cell findvar.c\cell\row
\cell write_inferior_status_register()\cell infrun.c\cell\row
\cell write_register()\cell regcache.c\cell\row
\cell x86_frame_prev_register()\cell target/x86-shared-tdep.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function register_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* register_type ( struct gdbarch* gdbarch, int regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell regcache_descr()\cell regcache.c\cell\row
Called by:\cell default_print_registers_info()\cell infcmd.c\cell\row
\cell default_register_reggroup_p()\cell reggroups.c\cell\row
\cell dwarf2_frame_prev_register()\cell dwarf2-frame.c\cell\row
\cell gen_expr()\cell ax-gdb.c\cell\row
\cell regcache_dump()\cell regcache.c\cell\row
\cell value_of_register()\cell findvar.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function registers_changed()\par}
{\s5\f1\fs20\ql\sb50\sa50 void registers_changed ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell pid_to_ptid()\cell infrun.c\cell\row
\cell set_register_cached()\cell regcache.c\cell\row
\cell  __builtin_alloca(), deprecated_registers_changed_hook()\cell\cell\row
Called by:\cell fetch_inferior_event()\cell infrun.c\cell\row
\cell finish_tfind_command()\cell tracepoint.c\cell\row
\cell generic_mourn_inferior()\cell target/target.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell prepare_to_proceed()\cell infrun.c\cell\row
\cell prepare_to_wait()\cell infrun.c\cell\row
\cell reg_flush_command()\cell regcache.c\cell\row
\cell regcache_observer_target_changed()\cell regcache.c\cell\row
\cell regcache_raw_read()\cell regcache.c\cell\row
\cell regcache_raw_supply()\cell regcache.c\cell\row
\cell regcache_raw_write()\cell regcache.c\cell\row
\cell switch_to_thread()\cell thread.c\cell\row
\cell wait_for_inferior()\cell infrun.c\cell\row
Refs Var:\cell current_regcache\cell regcache.c\cell\row
\cell deprecated_registers_changed_hook\cell top.c\cell\row
\cell registers_ptid\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_register_cached()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_register_cached ( int regnum, int state )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell deprecated_registers_fetched()\cell regcache.c\cell\row
\cell fetch_register_using_p()\cell remote.c\cell\row
\cell registers_changed()\cell regcache.c\cell\row
\cell remote_fetch_registers()\cell remote.c\cell\row
Refs Var:\cell current_regcache\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_pc ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell write_pc_pid()\cell regcache.c\cell\row
Called by:\cell generic_load()\cell symfile.c\cell\row
\cell proceed()\cell infrun.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_pc_pid()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_pc_pid ( CORE_ADDR pc, ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell gdbarch_write_pc()\cell gdbarch.c\cell\row
Called by:\cell adjust_pc_after_break()\cell infrun.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell write_pc()\cell regcache.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_register ( int regnum, long val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell deprecated_write_register_gen()\cell regcache.c\cell\row
\cell register_size()\cell regcache.c\cell\row
\cell store_signed_integer()\cell findvar.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
Called by:\cell write_register_pid()\cell regcache.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_register_pid()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_register_pid ( int regnum, CORE_ADDR val, ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell regcache.h\cell\cell\row
Calls: \cell ptid_equal()\cell infrun.c\cell\row
\cell write_register()\cell regcache.c\cell\row
Called by:\cell generic_target_write_pc()\cell regcache.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function build_regcache()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void build_regcache ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell regcache_xmalloc()\cell regcache.c\cell\row
Used in:\cell _initialize_regcache()\cell regcache.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_regcache\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_cooked_read()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int do_cooked_read ( void* src, int regnum, gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell regcache_cooked_read()\cell regcache.c\cell\row
Used in:\cell regcache_cpy()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_regcache_xfree()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_regcache_xfree ( void* data )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell regcache_xfree()\cell regcache.c\cell\row
Used in:\cell make_cleanup_regcache_xfree()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dump_endian_bytes()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dump_endian_bytes ( struct ui_file* file, enum bfd_endian endian, const unsigned char* buf, long len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell regcache_dump()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function init_regcache_descr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void* init_regcache_descr ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_num_pseudo_regs()\cell gdbarch.c\cell\row
\cell gdbarch_num_regs()\cell gdbarch.c\cell\row
\cell gdbarch_obstack_zalloc()\cell gdbarch.c\cell\row
\cell gdbarch_register_type()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Used in:\cell _initialize_regcache()\cell regcache.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function maintenance_print_cooked_registers()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void maintenance_print_cooked_registers ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell regcache_print()\cell regcache.c\cell\row
Used in:\cell _initialize_regcache()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function maintenance_print_raw_registers()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void maintenance_print_raw_registers ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell regcache_print()\cell regcache.c\cell\row
Used in:\cell _initialize_regcache()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function maintenance_print_register_groups()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void maintenance_print_register_groups ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell regcache_print()\cell regcache.c\cell\row
Used in:\cell _initialize_regcache()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function maintenance_print_registers()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void maintenance_print_registers ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell regcache_print()\cell regcache.c\cell\row
Used in:\cell _initialize_regcache()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function reg_flush_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void reg_flush_command ( const char* command, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell printf_filtered()\cell utils.c\cell\row
\cell registers_changed()\cell regcache.c\cell\row
Used in:\cell _initialize_regcache()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function regcache_descr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct regcache_descr* regcache_descr ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell new_gdbarch_data()\cell gdbarch.c\cell\row
Called by:\cell regcache_xmalloc()\cell regcache.c\cell\row
\cell register_offset_hack()\cell regcache.c\cell\row
\cell register_size()\cell regcache.c\cell\row
\cell register_type()\cell regcache.c\cell\row
Refs Var:\cell regcache_descr_handle\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function regcache_dump()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void regcache_dump ( struct regcache* regcache, struct ui_file* file, enum regcache_dump_what what_to_dump )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell dump_endian_bytes()\cell regcache.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_register_byte()\cell gdbarch.c\cell\row
\cell gdbarch_num_pseudo_regs()\cell gdbarch.c\cell\row
\cell gdbarch_num_regs()\cell gdbarch.c\cell\row
\cell gdbarch_register_name()\cell gdbarch.c\cell\row
\cell gdbarch_register_reggroup_p()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell regcache_cooked_read()\cell regcache.c\cell\row
\cell regcache_raw_read()\cell regcache.c\cell\row
\cell regcache_valid_p()\cell regcache.c\cell\row
\cell reggroup_name()\cell reggroups.c\cell\row
\cell reggroup_next()\cell reggroups.c\cell\row
\cell register_type()\cell regcache.c\cell\row
\cell xstrprintf()\cell utils.c\cell\row
\cell  strlen(), strncmp()\cell\cell\row
Called by:\cell regcache_print()\cell regcache.c\cell\row
Refs Func:\cell null_cleanup()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function regcache_print()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void regcache_print ( const char* args, enum regcache_dump_what what_to_dump )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdb_fopen()\cell ui-file.c\cell\row
\cell perror_with_name()\cell utils.c\cell\row
\cell regcache_dump()\cell regcache.c\cell\row
\cell ui_file_delete()\cell ui-file.c\cell\row
Called by:\cell maintenance_print_cooked_registers()\cell regcache.c\cell\row
\cell maintenance_print_raw_registers()\cell regcache.c\cell\row
\cell maintenance_print_register_groups()\cell regcache.c\cell\row
\cell maintenance_print_registers()\cell regcache.c\cell\row
Refs Var:\cell current_regcache\cell regcache.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function regcache_xfer_part()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void regcache_xfer_part ( struct regcache* regcache, int regnum, int offset, int len, void* in, const void* out, void (*read)(struct regcache* regcache,int regnum,gdb_byte* buf), void (*write)(struct regcache* regcache,int regnum,const gdb_byte* buf) )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell internal_error()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell regcache_cooked_read_part()\cell regcache.c\cell\row
\cell regcache_cooked_write_part()\cell regcache.c\cell\row
\cell regcache_raw_read_part()\cell regcache.c\cell\row
\cell regcache_raw_write_part()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function register_buffer()\par}
{\s5\f1\fs20\ql\sb50\sa50 static gdb_byte* register_buffer ( const struct regcache* regcache, int regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell regcache_cooked_read()\cell regcache.c\cell\row
\cell regcache_raw_collect()\cell regcache.c\cell\row
\cell regcache_raw_read()\cell regcache.c\cell\row
\cell regcache_raw_supply()\cell regcache.c\cell\row
\cell regcache_raw_write()\cell regcache.c\cell\row
\cell regcache_save()\cell regcache.c\cell\row
\intbl0
}
