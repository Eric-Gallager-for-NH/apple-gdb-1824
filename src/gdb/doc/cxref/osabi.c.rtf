{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF osabi.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File osabi.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "osabi.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "arch-utils.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/elf-bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/elf/common.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/elf/internal.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/elf/external.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/bfdlink.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define GDB_OSABI_DEFAULT GDB_OSABI_UNKNOWN\par}
{\s5\f1\fs20\ql\sb50\sa50 #define MAX_NOTESZ 128\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct gdb_osabi_handler\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct gdb_osabi_handler}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct gdb_osabi_handler* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const struct bfd_arch_info* arch_info;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum gdb_osabi osabi;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 void (*init_osabi)(struct gdbarch_info,struct gdbarch*);}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct gdb_osabi_sniffer\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct gdb_osabi_sniffer}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct gdb_osabi_sniffer* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum bfd_architecture arch;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum bfd_flavour flavour;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum gdb_osabi (*sniffer)(bfd*);}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable user_osabi_state\par}
{\s5\f1\fs20\ql\sb50\sa50 static enum \{...\} user_osabi_state\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_gdb_osabi()\cell\cell\row
\cell gdbarch_lookup_osabi()\cell\cell\row
\cell set_osabi()\cell\cell\row
\cell set_osabi_from_string()\cell\cell\row
\cell show_osabi()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable user_selected_osabi\par}
{\s5\f1\fs20\ql\sb50\sa50 static enum gdb_osabi user_selected_osabi\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell gdbarch_lookup_osabi()\cell\cell\row
\cell set_osabi()\cell\cell\row
\cell set_osabi_from_string()\cell\cell\row
\cell show_osabi()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable gdb_osabi_available_names\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* gdb_osabi_available_names[GDB_OSABI_INVALID+3]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_gdb_osabi()\cell\cell\row
\cell gdbarch_register_osabi()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable set_osabi_string\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* set_osabi_string\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_gdb_osabi()\cell\cell\row
\cell set_osabi()\cell\cell\row
\cell set_osabi_from_string()\cell\cell\row
\cell set_osabi_option()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable gdb_osabi_names\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* const gdb_osabi_names[GDB_OSABI_INVALID+2]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_gdb_osabi()\cell\cell\row
\cell gdbarch_osabi_name()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable gdb_osabi_handler_list\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct gdb_osabi_handler* gdb_osabi_handler_list\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell gdbarch_init_osabi()\cell\cell\row
\cell gdbarch_register_osabi()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable gdb_osabi_sniffer_list\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct gdb_osabi_sniffer* gdb_osabi_sniffer_list\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell gdbarch_lookup_osabi_from_bfd()\cell\cell\row
\cell gdbarch_register_osabi_sniffer()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_gdb_osabi()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_gdb_osabi ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell osabi.c\cell\cell\row
Calls: \cell gdbarch_register_osabi_sniffer()\cell osabi.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  add_setshow_enum_cmd(), strncmp()\cell\cell\row
Refs Func:\cell generic_elf_osabi_sniffer()\cell osabi.c\cell\row
\cell set_osabi()\cell osabi.c\cell\row
\cell show_osabi()\cell osabi.c\cell\row
Refs Var:\cell gdb_osabi_available_names\cell osabi.c\cell\row
\cell gdb_osabi_names\cell osabi.c\cell\row
\cell set_osabi_string\cell osabi.c\cell\row
\cell user_osabi_state\cell osabi.c\cell\row
\cell  setlist, showlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_init_osabi()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_init_osabi ( struct gdbarch_info info, struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell osabi.h\cell\cell\row
Calls: \cell can_run_code_for()\cell osabi.c\cell\row
\cell gdbarch_osabi_name()\cell osabi.c\cell\row
\cell warning()\cell utils.c\cell\row
Refs Var:\cell gdb_osabi_handler_list\cell osabi.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_lookup_osabi()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum gdb_osabi gdbarch_lookup_osabi ( bfd* abfd )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell osabi.h\cell\cell\row
Calls: \cell gdbarch_lookup_osabi_from_bfd()\cell osabi.c\cell\row
Called by:\cell gdbarch_info_fill()\cell arch-utils.c\cell\row
\cell open_bfd_matching_arch()\cell symfile.c\cell\row
Refs Var:\cell user_osabi_state\cell osabi.c\cell\row
\cell user_selected_osabi\cell osabi.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_lookup_osabi_from_bfd()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum gdb_osabi gdbarch_lookup_osabi_from_bfd ( bfd* abfd )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell osabi.h\cell\cell\row
Calls: \cell gdbarch_osabi_name()\cell osabi.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  bfd_get_arch(), bfd_printable_arch_mach()\cell\cell\row
Called by:\cell gdbarch_lookup_osabi()\cell osabi.c\cell\row
\cell open_bfd_matching_arch()\cell symfile.c\cell\row
Refs Var:\cell gdb_osabi_sniffer_list\cell osabi.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_osabi_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* gdbarch_osabi_name ( enum gdb_osabi osabi )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell osabi.h\cell\cell\row
Called by:\cell find_arch_by_info()\cell gdbarch.c\cell\row
\cell gdbarch_init_osabi()\cell osabi.c\cell\row
\cell gdbarch_lookup_osabi_from_bfd()\cell osabi.c\cell\row
\cell gdbarch_register_osabi()\cell osabi.c\cell\row
\cell set_osabi()\cell osabi.c\cell\row
\cell set_osabi_from_string()\cell osabi.c\cell\row
\cell show_osabi()\cell osabi.c\cell\row
Refs Var:\cell gdb_osabi_names\cell osabi.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_register_osabi()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_register_osabi ( enum bfd_architecture arch, unsigned long machine, enum gdb_osabi osabi, void (*init_osabi)(struct gdbarch_info,struct gdbarch*) )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell osabi.h\cell\cell\row
Calls: \cell gdbarch_osabi_name()\cell osabi.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  bfd_lookup_arch(), bfd_printable_arch_mach()\cell\cell\row
Refs Var:\cell gdb_osabi_available_names\cell osabi.c\cell\row
\cell gdb_osabi_handler_list\cell osabi.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdbarch_register_osabi_sniffer()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdbarch_register_osabi_sniffer ( enum bfd_architecture arch, enum bfd_flavour flavour, enum gdb_osabi (*sniffer_fn)(bfd*) )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell osabi.h\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell _initialize_gdb_osabi()\cell osabi.c\cell\row
Refs Var:\cell gdb_osabi_sniffer_list\cell osabi.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function generic_elf_osabi_sniff_abi_tag_sections()\par}
{\s5\f1\fs20\ql\sb50\sa50 void generic_elf_osabi_sniff_abi_tag_sections ( bfd* abfd, asection* sect, void* obj )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell osabi.h\cell\cell\row
Calls: \cell check_note()\cell osabi.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  __builtin_alloca(), bfd_get_section_contents(), strcmp()\cell\cell\row
Used in:\cell generic_elf_osabi_sniffer()\cell osabi.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_osabi_from_string()\par}
{\s5\f1\fs20\ql\sb50\sa50 int set_osabi_from_string ( const char* in_osabi_string )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell osabi.h\cell\cell\row
Calls: \cell gdbarch_info_init()\cell arch-utils.c\cell\row
\cell gdbarch_osabi_name()\cell osabi.c\cell\row
\cell gdbarch_update_p()\cell arch-utils.c\cell\row
\cell  strcmp(), xstrdup()\cell\cell\row
Called by:\cell captured_main()\cell main.c\cell\row
Refs Var:\cell set_osabi_string\cell osabi.c\cell\row
\cell user_osabi_state\cell osabi.c\cell\row
\cell user_selected_osabi\cell osabi.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_osabi_option()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_osabi_option ( const char* osabi_str )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell osabi.h\cell\cell\row
Calls: \cell set_osabi()\cell osabi.c\cell\row
Called by:\cell captured_main()\cell main.c\cell\row
Refs Var:\cell set_osabi_string\cell osabi.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function can_run_code_for()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int can_run_code_for ( const struct bfd_arch_info* a, const struct bfd_arch_info* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell gdbarch_init_osabi()\cell osabi.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function check_note()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int check_note ( bfd* abfd, asection* sect, const char* note, const char* name, unsigned long descsz, unsigned long type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell internal_error()\cell utils.c\cell\row
\cell  strcmp(), strlen()\cell\cell\row
Called by:\cell generic_elf_osabi_sniff_abi_tag_sections()\cell osabi.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function generic_elf_osabi_sniffer()\par}
{\s5\f1\fs20\ql\sb50\sa50 static enum gdb_osabi generic_elf_osabi_sniffer ( bfd* abfd )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  bfd_map_over_sections(), strcmp()\cell\cell\row
Used in:\cell _initialize_gdb_osabi()\cell osabi.c\cell\row
Refs Func:\cell generic_elf_osabi_sniff_abi_tag_sections()\cell osabi.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_osabi()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_osabi ( const char* args, int from_tty, struct cmd_list_element* c )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_info_init()\cell arch-utils.c\cell\row
\cell gdbarch_osabi_name()\cell osabi.c\cell\row
\cell gdbarch_update_p()\cell arch-utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell set_osabi_option()\cell osabi.c\cell\row
Used in:\cell _initialize_gdb_osabi()\cell osabi.c\cell\row
Refs Var:\cell set_osabi_string\cell osabi.c\cell\row
\cell user_osabi_state\cell osabi.c\cell\row
\cell user_selected_osabi\cell osabi.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_osabi()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_osabi ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
\cell gdbarch_osabi()\cell gdbarch.c\cell\row
\cell gdbarch_osabi_name()\cell osabi.c\cell\row
Used in:\cell _initialize_gdb_osabi()\cell osabi.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell user_osabi_state\cell osabi.c\cell\row
\cell user_selected_osabi\cell osabi.c\cell\row
\intbl0
}
