<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF valprint.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for valprint.c of gdb.cxref.
<author>cxref

<sect>File valprint.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;annotate.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;valprint.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;errno.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define PRINT_MAX_DEFAULT 200</tt><newline>
<p>
<tt>#define ExtractLUIntWByteOrd extract_long_unsigned_integer_with_byte_order</tt><newline>
<p>
<tt>#define BITS_IN_BYTES 8</tt><newline>
<p>
<tt>#define BITS_IN_OCTAL 3</tt><newline>
<p>
<tt>#define HIGH_ZERO 0340</tt><newline>
<p>
<tt>#define LOW_ZERO 0016</tt><newline>
<p>
<tt>#define CARRY_ZERO 0003</tt><newline>
<p>
<tt>#define HIGH_ONE 0200</tt><newline>
<p>
<tt>#define MID_ONE 0160</tt><newline>
<p>
<tt>#define LOW_ONE 0016</tt><newline>
<p>
<tt>#define CARRY_ONE 0001</tt><newline>
<p>
<tt>#define HIGH_TWO 0300</tt><newline>
<p>
<tt>#define MID_TWO 0070</tt><newline>
<p>
<tt>#define LOW_TWO 0007</tt><newline>
<p>
<tt>#define TEN 10</tt><newline>
<p>
<tt>#define TWO_TO_FOURTH 16</tt><newline>
<p>
<tt>#define CARRY_OUT( x )</tt><newline>
<p>
<tt>#define CARRY_LEFT( x )</tt><newline>
<p>
<tt>#define SHIFT( x )</tt><newline>
<p>
<tt>#define START_P</tt><newline>
<p>
<tt>#define NOT_END_P</tt><newline>
<p>
<tt>#define NEXT_P</tt><newline>
<p>
<tt>#define LOW_NIBBLE( x )</tt><newline>
<p>
<tt>#define HIGH_NIBBLE( x )</tt><newline>

<sect1>Global Variable input_radix

<p>
<tt>unsigned input_radix</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bcache.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>charset.c
<item>cli-out.c
<item>coff-pe-read.c
<item>coffread.c
<item>complaints.c
<item>completer.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>demangle.c
<item>dictionary.c
<item>disasm.c
<item>doublest.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>environ.c
<item>eval.c
<item>event-loop.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>interps.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod-cisco.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macrocmd.c
<item>macroexp.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>observer.c
<item>osabi.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>reggroups.c
<item>remote-fileio.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>ser-base.c
<item>ser-unix.c
<item>serial.c
<item>solib-null.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>ui-file.c
<item>ui-out.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
<item>breakpoint_re_set_all()  :  breakpoint.c
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>c_lex()  :  c-exp.c
<item>captured_main()  :  main.c
<item>do_restore_lang_radix_cleanup()  :  breakpoint.c
<item>f_lex()  :  f-exp.c
<item>java_lex()  :  jv-exp.c
<item>objc_lex()  :  objc-exp.c
<item>parse_number()  :  p-exp.c
<item>pascal_lex()  :  p-exp.c
<item>resolve_pending_breakpoint()  :  breakpoint.c
<item>set_input_radix()  :  valprint.c
<item>set_input_radix_1()  :  valprint.c
<item>set_raw_breakpoint()  :  breakpoint.c
<item>set_raw_tracepoint()  :  tracepoint.c
<item>show_radix()  :  valprint.c
<item>varobj_set_value()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Variable output_radix

<p>
<tt>unsigned output_radix</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bcache.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>charset.c
<item>cli-out.c
<item>coff-pe-read.c
<item>coffread.c
<item>complaints.c
<item>completer.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>demangle.c
<item>dictionary.c
<item>disasm.c
<item>doublest.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>environ.c
<item>eval.c
<item>event-loop.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>interps.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod-cisco.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macrocmd.c
<item>macroexp.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>observer.c
<item>osabi.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>reggroups.c
<item>remote-fileio.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>ser-base.c
<item>ser-unix.c
<item>serial.c
<item>solib-null.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>ui-file.c
<item>ui-out.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
<item>captured_main()  :  main.c
<item>set_output_radix()  :  valprint.c
<item>set_output_radix_1()  :  valprint.c
<item>show_radix()  :  valprint.c
</itemize>
</descrip>

<sect1>Global Variable prettyprint_arrays

<p>
<tt>int prettyprint_arrays</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-valprint.c
<item>c-lang.c
<item>c-valprint.c
<item>cp-valprint.c
<item>f-lang.c
<item>f-valprint.c
<item>jv-valprint.c
<item>m2-lang.c
<item>objc-lang.c
<item>p-lang.c
<item>p-valprint.c
<item>printcmd.c
<item>scm-valprint.c
<item>valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>c_val_print()  :  c-valprint.c
<item>pascal_val_print()  :  p-valprint.c
<item>val_print_array_elements()  :  valprint.c
<item>val_print_packed_array_elements()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Global Variable prettyprint_structs

<p>
<tt>int prettyprint_structs</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-valprint.c
<item>c-lang.c
<item>c-valprint.c
<item>cp-valprint.c
<item>f-lang.c
<item>f-valprint.c
<item>jv-valprint.c
<item>m2-lang.c
<item>objc-lang.c
<item>p-lang.c
<item>p-valprint.c
<item>printcmd.c
<item>scm-valprint.c
<item>valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
<item>val_print()  :  valprint.c
</itemize>
</descrip>

<sect1>Global Variable unionprint

<p>
<tt>int unionprint</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-valprint.c
<item>c-lang.c
<item>c-valprint.c
<item>cp-valprint.c
<item>f-lang.c
<item>f-valprint.c
<item>jv-valprint.c
<item>m2-lang.c
<item>objc-lang.c
<item>p-lang.c
<item>p-valprint.c
<item>printcmd.c
<item>scm-valprint.c
<item>valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
<item>c_val_print()  :  c-valprint.c
<item>pascal_val_print()  :  p-valprint.c
</itemize>
</descrip>

<sect1>Global Variable addressprint

<p>
<tt>int addressprint</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-valprint.c
<item>breakpoint.c
<item>c-lang.c
<item>c-valprint.c
<item>cp-valprint.c
<item>f-lang.c
<item>f-valprint.c
<item>inlining.c
<item>jv-valprint.c
<item>m2-lang.c
<item>objc-lang.c
<item>p-lang.c
<item>p-valprint.c
<item>printcmd.c
<item>scm-valprint.c
<item>stack.c
<item>tracepoint.c
<item>valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
<item>breakpoint_1()  :  breakpoint.c
<item>c_val_print()  :  c-valprint.c
<item>f_val_print()  :  f-valprint.c
<item>java_val_print()  :  jv-valprint.c
<item>mention()  :  breakpoint.c
<item>pascal_val_print()  :  p-valprint.c
<item>print_address_demangle()  :  printcmd.c
<item>print_block_frame_labels()  :  stack.c
<item>print_frame()  :  stack.c
<item>print_frame_info()  :  stack.c
<item>print_function_pointer_address()  :  c-valprint.c
<item>print_inlined_frame()  :  inlining.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>print_one_exception_catchpoint()  :  breakpoint.c
<item>trace_mention()  :  tracepoint.c
<item>tracepoints_info()  :  tracepoint.c
<item>val_print_string()  :  valprint.c
</itemize>
</descrip>

<sect1>Global Variable print_max

<p>
<tt>unsigned int print_max</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-valprint.c
<item>c-lang.c
<item>c-valprint.c
<item>cp-valprint.c
<item>f-lang.c
<item>f-valprint.c
<item>jv-valprint.c
<item>m2-lang.c
<item>objc-lang.c
<item>p-lang.c
<item>p-valprint.c
<item>printcmd.c
<item>scm-valprint.c
<item>valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>c_printstr()  :  c-lang.c
<item>c_val_print()  :  c-valprint.c
<item>f77_print_array_1()  :  f-valprint.c
<item>f_printstr()  :  f-lang.c
<item>java_value_print()  :  jv-valprint.c
<item>m2_printstr()  :  m2-lang.c
<item>objc_printstr()  :  objc-lang.c
<item>pascal_printstr()  :  p-lang.c
<item>pascal_val_print()  :  p-valprint.c
<item>printstr()  :  ada-valprint.c
<item>scm_scmlist_print()  :  scm-valprint.c
<item>scm_scmval_print()  :  scm-valprint.c
<item>val_print_array_elements()  :  valprint.c
<item>val_print_packed_array_elements()  :  ada-valprint.c
<item>val_print_string()  :  valprint.c
</itemize>
</descrip>

<sect1>Global Variable repeat_count_threshold

<p>
<tt>unsigned int repeat_count_threshold</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-valprint.c
<item>c-lang.c
<item>c-valprint.c
<item>cp-valprint.c
<item>f-lang.c
<item>f-valprint.c
<item>jv-valprint.c
<item>m2-lang.c
<item>objc-lang.c
<item>p-lang.c
<item>p-valprint.c
<item>printcmd.c
<item>scm-valprint.c
<item>valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
<item>c_printstr()  :  c-lang.c
<item>f_printstr()  :  f-lang.c
<item>m2_printstr()  :  m2-lang.c
<item>objc_printstr()  :  objc-lang.c
<item>pascal_printstr()  :  p-lang.c
<item>printstr()  :  ada-valprint.c
<item>val_print_array_elements()  :  valprint.c
<item>val_print_packed_array_elements()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Global Variable output_format

<p>
<tt>int output_format</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-valprint.c
<item>c-lang.c
<item>c-valprint.c
<item>cp-valprint.c
<item>f-lang.c
<item>f-valprint.c
<item>jv-valprint.c
<item>m2-lang.c
<item>objc-lang.c
<item>p-lang.c
<item>p-valprint.c
<item>printcmd.c
<item>scm-valprint.c
<item>valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
<item>c_val_print()  :  c-valprint.c
<item>f_val_print()  :  f-valprint.c
<item>java_val_print()  :  jv-valprint.c
<item>pascal_val_print()  :  p-valprint.c
<item>set_output_radix_1()  :  valprint.c
</itemize>
</descrip>

<sect1>Global Variable stop_print_at_null

<p>
<tt>int stop_print_at_null</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-valprint.c
<item>c-lang.c
<item>c-valprint.c
<item>cp-valprint.c
<item>f-lang.c
<item>f-valprint.c
<item>jv-valprint.c
<item>m2-lang.c
<item>objc-lang.c
<item>p-lang.c
<item>p-valprint.c
<item>printcmd.c
<item>scm-valprint.c
<item>valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>c_val_print()  :  c-valprint.c
<item>pascal_val_print()  :  p-valprint.c
</itemize>
</descrip>

<sect1>Global Function _initialize_valprint()

<p><tt>void _initialize_valprint ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_alias_cmd(), add_cmd(), add_prefix_cmd(), add_setshow_boolean_cmd(), add_setshow_uinteger_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>set_input_radix()  :  valprint.c
<item>set_output_radix()  :  valprint.c
<item>set_print()  :  valprint.c
<item>set_radix()  :  valprint.c
<item>show_addressprint()  :  valprint.c
<item>show_input_radix()  :  valprint.c
<item>show_output_radix()  :  valprint.c
<item>show_prettyprint_arrays()  :  valprint.c
<item>show_prettyprint_structs()  :  valprint.c
<item>show_print()  :  valprint.c
<item>show_print_max()  :  valprint.c
<item>show_radix()  :  valprint.c
<item>show_repeat_count_threshold()  :  valprint.c
<item>show_stop_print_at_null()  :  valprint.c
<item>show_unionprint()  :  valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>addressprint  :  valprint.c
<item>input_radix  :  valprint.c
<item>output_radix  :  valprint.c
<item>prettyprint_arrays  :  valprint.c
<item>prettyprint_structs  :  valprint.c
<item>print_max  :  valprint.c
<item>repeat_count_threshold  :  valprint.c
<item>stop_print_at_null  :  valprint.c
<item>unionprint  :  valprint.c
<item>setlist, setprintlist, showlist, showprintlist
</itemize>
</descrip>

<sect1>Global Function common_val_print()

<p><tt>int common_val_print ( struct value* val, struct ui_file* stream, int format, int deref_ref, int recurse, enum val_prettyprint pretty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_value_address_hack()  :  value.c
<item>val_print()  :  valprint.c
<item>value_check_printable()  :  valprint.c
<item>value_contents_all()  :  value.c
<item>value_embedded_offset()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_val_print()  :  c-valprint.c
<item>c_value_of_variable()  :  varobj.c
<item>cp_print_hpacc_virtual_table_entries()  :  cp-valprint.c
<item>cp_print_value_fields()  :  cp-valprint.c
<item>f_val_print()  :  f-valprint.c
<item>java_print_value_fields()  :  jv-valprint.c
<item>java_value_print()  :  jv-valprint.c
<item>pascal_object_print_static_field()  :  p-valprint.c
<item>pascal_object_print_value_fields()  :  p-valprint.c
<item>pascal_val_print()  :  p-valprint.c
<item>pascal_value_print()  :  p-valprint.c
<item>print_frame_args()  :  stack.c
<item>scm_value_print()  :  scm-valprint.c
</itemize>
</descrip>

<sect1>Global Function longest_to_int()

<p><tt>int longest_to_int ( long arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>dump_subexp_body_standard()  :  expprint.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>evaluate_subexp_scm()  :  scm-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>get_label()  :  eval.c
<item>ignore_command()  :  breakpoint.c
<item>operator_length_standard()  :  parse.c
<item>print_subexp_standard()  :  expprint.c
<item>resolve_subexp()  :  ada-lang.c
<item>value_concat()  :  valarith.c
<item>value_equal()  :  valarith.c
<item>value_less()  :  valarith.c
<item>value_subscripted_rvalue()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function print_binary_chars()

<p><tt>void print_binary_chars ( struct ui_file* stream, const gdb_byte* valaddr, unsigned int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>gdbarch_byte_order()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_scalar_formatted()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function print_char_chars()

<p><tt>void print_char_chars ( struct ui_file* stream, const gdb_byte* valaddr, unsigned int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>print_char_chars_with_byte_order()  :  valprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_scalar_formatted()  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function print_char_chars_with_byte_order()

<p><tt>void print_char_chars_with_byte_order ( struct ui_file* stream, const gdb_byte* valaddr, unsigned int len, int byte_order )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_byte_order()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_char_chars()  :  valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Global Function print_decimal_chars()

<p><tt>void print_decimal_chars ( struct ui_file* stream, const gdb_byte* valaddr, unsigned len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_scalar_formatted()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function print_floating()

<p><tt>void print_floating ( const gdb_byte* valaddr, struct type* type, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>floatformat_from_type()  :  doublest.c
<item>floatformat_is_nan()  :  doublest.c
<item>floatformat_is_negative()  :  doublest.c
<item>floatformat_mantissa()  :  doublest.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>unpack_double()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_floating()  :  ada-valprint.c
<item>c_val_print()  :  c-valprint.c
<item>f_val_print()  :  f-valprint.c
<item>pascal_val_print()  :  p-valprint.c
<item>print_scalar_formatted()  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function print_floating_in_hex()

<p><tt>void print_floating_in_hex ( const gdb_byte* valaddr, struct type* type, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>floatformat_from_type()  :  doublest.c
<item>floatformat_is_nan()  :  doublest.c
<item>floatformat_is_negative()  :  doublest.c
<item>floatformat_mantissa()  :  doublest.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>unpack_double()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_scalar_formatted()  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function print_hex_chars()

<p><tt>void print_hex_chars ( struct ui_file* stream, const gdb_byte* valaddr, unsigned int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>print_hex_chars_with_byte_order()  :  valprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_scalar_formatted()  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function print_hex_chars_with_byte_order()

<p><tt>void print_hex_chars_with_byte_order ( struct ui_file* stream, const bfd_byte* valaddr, unsigned int len, int byte_order )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>gdbarch_byte_order()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_hex_chars()  :  valprint.c
<item>val_print_type_code_int()  :  valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function print_longest()

<p><tt>void print_longest ( struct ui_file* stream, int format, int use_c_format, long val_long )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fputs_filtered()  :  utils.c
<item>int_string()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_scalar()  :  ada-valprint.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>ax_print()  :  ax-general.c
<item>c_val_print()  :  c-valprint.c
<item>deprecated_print_address_numeric()  :  printcmd.c
<item>dump_raw_expression()  :  expprint.c
<item>java_val_print()  :  jv-valprint.c
<item>pascal_val_print()  :  p-valprint.c
<item>print_scalar_formatted()  :  printcmd.c
<item>print_type_scalar()  :  typeprint.c
<item>scm_scmval_print()  :  scm-valprint.c
<item>val_print_type_code_int()  :  valprint.c
</itemize>
</descrip>

<sect1>Global Function print_octal_chars()

<p><tt>void print_octal_chars ( struct ui_file* stream, const gdb_byte* valaddr, unsigned len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>gdbarch_byte_order()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_scalar_formatted()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function print_ostype()

<p><tt>void print_ostype ( struct ui_file* stream, struct type* type, unsigned char* valaddr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>unpack_long()  :  value.c
<item>isprint()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_formatted()  :  printcmd.c
<item>print_scalar_formatted()  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function val_print()

<p><tt>int val_print ( struct type* type, const gdb_byte* valaddr, int embedded_offset, CORE_ADDR address, struct ui_file* stream, int format, int deref_ref, int recurse, enum val_prettyprint pretty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>fprintf_filtered()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>quit()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_value_print()  :  ada-valprint.c
<item>c_value_print()  :  c-valprint.c
<item>common_val_print()  :  valprint.c
<item>cp_print_static_field()  :  cp-valprint.c
<item>cp_print_value_fields()  :  cp-valprint.c
<item>default_print_registers_info()  :  infcmd.c
<item>f77_print_array_1()  :  f-valprint.c
<item>java_print_value_fields()  :  jv-valprint.c
<item>pascal_object_print_value_fields()  :  p-valprint.c
<item>print_field_values()  :  ada-valprint.c
<item>val_print_array_elements()  :  valprint.c
<item>val_print_packed_array_elements()  :  ada-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
<item>prettyprint_structs  :  valprint.c
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Global Function val_print_array_elements()

<p><tt>void val_print_array_elements ( struct type* type, const gdb_byte* valaddr, CORE_ADDR address, struct ui_file* stream, int format, int deref_ref, int recurse, enum val_prettyprint pretty, unsigned int i )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>fprintf_filtered()  :  utils.c
<item>n_spaces()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>print_spaces_filtered()  :  utils.c
<item>val_elt_addr()  :  valprint.c
<item>val_print()  :  valprint.c
<item>wrap_here()  :  utils.c
<item>annotate_array_section_begin(), annotate_array_section_end(), annotate_elt(), annotate_elt_rep(), annotate_elt_rep_end(), memcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
<item>c_val_print()  :  c-valprint.c
<item>pascal_val_print()  :  p-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>prettyprint_arrays  :  valprint.c
<item>print_max  :  valprint.c
<item>repeat_count_threshold  :  valprint.c
</itemize>
</descrip>

<sect1>Global Function val_print_string()

<p><tt>int val_print_string ( CORE_ADDR addr, int len, int width, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_print_address_numeric()  :  printcmd.c
<item>discard_cleanups()  :  utils.c
<item>do_cleanups()  :  utils.c
<item>extract_unsigned_integer()  :  findvar.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>make_cleanup()  :  utils.c
<item>partial_memory_read()  :  valprint.c
<item>quit()  :  utils.c
<item>safe_strerror()  :  utils.c
<item>target_read_memory()  :  target/target.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>__builtin_alloca()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_val_print()  :  c-valprint.c
<item>f_val_print()  :  f-valprint.c
<item>java_value_print()  :  jv-valprint.c
<item>pascal_val_print()  :  p-valprint.c
<item>print_formatted()  :  printcmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>null_cleanup()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>addressprint  :  valprint.c
<item>current_language  :  language.c
<item>print_max  :  valprint.c
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Global Function val_print_type_code_int()

<p><tt>void val_print_type_code_int ( struct type* type, const gdb_byte* valaddr, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_long_unsigned_integer_with_byte_order()  :  findvar.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>print_hex_chars_with_byte_order()  :  valprint.c
<item>print_longest()  :  valprint.c
<item>unpack_long()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
<item>c_val_print()  :  c-valprint.c
<item>f_val_print()  :  f-valprint.c
<item>java_val_print()  :  jv-valprint.c
<item>pascal_val_print()  :  p-valprint.c
</itemize>
</descrip>

<sect1>Global Function value_print()

<p><tt>int value_print ( struct value* val, struct ui_file* stream, int format, enum val_prettyprint pretty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_check_printable()  :  valprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_formatted()  :  printcmd.c
<item>print_it_typical()  :  breakpoint.c
<item>print_return_value()  :  infcmd.c
<item>print_scalar_formatted()  :  printcmd.c
<item>print_subexp_standard()  :  expprint.c
<item>print_variable_value()  :  printcmd.c
<item>show_convenience()  :  value.c
<item>show_values()  :  value.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Local Function partial_memory_read()

<p><tt>static int partial_memory_read ( CORE_ADDR memaddr, char* myaddr, int len, int* errnoptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>target_read_memory()  :  target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>val_print_string()  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function set_input_radix()

<p><tt>static void set_input_radix ( const char* args, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>set_input_radix_1()  :  valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>input_radix  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function set_input_radix_1()

<p><tt>static void set_input_radix_1 ( int from_tty, unsigned int radix )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>lookup_internalvar()  :  value.c
<item>printf_filtered()  :  utils.c
<item>set_internalvar()  :  value.c
<item>value_from_longest()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_input_radix()  :  valprint.c
<item>set_radix()  :  valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>input_radix  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function set_output_radix()

<p><tt>static void set_output_radix ( const char* args, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>set_output_radix_1()  :  valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>output_radix  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function set_output_radix_1()

<p><tt>static void set_output_radix_1 ( int from_tty, unsigned int radix )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>lookup_internalvar()  :  value.c
<item>printf_filtered()  :  utils.c
<item>set_internalvar()  :  value.c
<item>value_from_longest()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_output_radix()  :  valprint.c
<item>set_radix()  :  valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>output_format  :  valprint.c
<item>output_radix  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function set_print()

<p><tt>static void set_print ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>printf_unfiltered()  :  utils.c
<item>help_list()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>setprintlist
</itemize>
</descrip>

<sect1>Local Function set_radix()

<p><tt>static void set_radix ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>parse_and_eval_long()  :  eval.c
<item>printf_filtered()  :  utils.c
<item>set_input_radix_1()  :  valprint.c
<item>set_output_radix_1()  :  valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function show_addressprint()

<p><tt>static void show_addressprint ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function show_input_radix()

<p><tt>static void show_input_radix ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function show_output_radix()

<p><tt>static void show_output_radix ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function show_prettyprint_arrays()

<p><tt>static void show_prettyprint_arrays ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function show_prettyprint_structs()

<p><tt>static void show_prettyprint_structs ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function show_print()

<p><tt>static void show_print ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cmd_show_list()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>showprintlist
</itemize>
</descrip>

<sect1>Local Function show_print_max()

<p><tt>static void show_print_max ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function show_radix()

<p><tt>static void show_radix ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>printf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>input_radix  :  valprint.c
<item>output_radix  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function show_repeat_count_threshold()

<p><tt>static void show_repeat_count_threshold ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function show_stop_print_at_null()

<p><tt>static void show_stop_print_at_null ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function show_unionprint()

<p><tt>static void show_unionprint ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valprint()  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function val_elt_addr()

<p><tt>static const gdb_byte* val_elt_addr ( struct type* type, const gdb_byte* valaddr, unsigned int i )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>get_array_bounds()  :  gdbtypes.c
<item>internal_error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>val_print_array_elements()  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function value_check_printable()

<p><tt>static int value_check_printable ( struct value* val, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>value_optimized_out()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>common_val_print()  :  valprint.c
<item>value_print()  :  valprint.c
</itemize>
</descrip>

</article>
