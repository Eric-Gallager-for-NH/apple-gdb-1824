<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF macrotab.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for macrotab.c of gdb.cxref.
<author>cxref

<sect>File macrotab.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/splay-tree.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;macrotab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;bcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;complaints.h&quot;</tt>
</itemize>

<sect1>Type struct macro_table

<p>
<itemize>
<item><tt>struct macro_table</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct obstack* obstack;</tt><newline>
<item><tt>struct bcache* bcache;</tt><newline>
<item><tt>struct macro_source_file* main_source;</tt><newline>
<item><tt>splay_tree definitions;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct macro_key

<p>
<itemize>
<item><tt>struct macro_key</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct macro_table* table;</tt><newline>
<item><tt>const char* name;</tt><newline>
<item><tt>struct macro_source_file* start_file;</tt><newline>
<item><tt>int start_line;</tt><newline>
<item><tt>struct macro_source_file* end_file;</tt><newline>
<item><tt>int end_line;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Function free_macro_table()

<p><tt>void free_macro_table ( struct macro_table* table )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>macrotab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_macro_source_file()  :  macrotab.c
<item>splay_tree_delete()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>really_free_pendings()  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function macro_define_function()

<p><tt>void macro_define_function ( struct macro_source_file* source, int line, const char* name, int argc, const char** argv, const char* replacement )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>macrotab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_for_redefinition()  :  macrotab.c
<item>key_compare()  :  macrotab.c
<item>new_macro_definition()  :  macrotab.c
<item>new_macro_key()  :  macrotab.c
<item>splay_tree_insert()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_macro_definition()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function macro_define_object()

<p><tt>void macro_define_object ( struct macro_source_file* source, int line, const char* name, const char* replacement )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>macrotab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_for_redefinition()  :  macrotab.c
<item>key_compare()  :  macrotab.c
<item>new_macro_definition()  :  macrotab.c
<item>new_macro_key()  :  macrotab.c
<item>splay_tree_insert()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_macro_definition()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function macro_definition_location()

<p><tt>struct macro_source_file* macro_definition_location ( struct macro_source_file* source, int line, const char* name, int* definition_line )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>macrotab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_definition()  :  macrotab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>info_macro_command()  :  macrocmd.c
</itemize>
</descrip>

<sect1>Global Function macro_include()

<p><tt>struct macro_source_file* macro_include ( struct macro_source_file* source, int line, const char* included )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>macrotab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>new_source_file()  :  macrotab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>macro_start_file()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Global Function macro_lookup_definition()

<p><tt>struct macro_definition* macro_lookup_definition ( struct macro_source_file* source, int line, const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>macrotab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_definition()  :  macrotab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>info_macro_command()  :  macrocmd.c
<item>standard_macro_lookup()  :  macroscope.c
</itemize>
</descrip>

<sect1>Global Function macro_lookup_inclusion()

<p><tt>struct macro_source_file* macro_lookup_inclusion ( struct macro_source_file* source, const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>macrotab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>inclusion_depth()  :  macrotab.c
<item>macro_lookup_inclusion()  :  macrotab.c
<item>strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>macro_lookup_inclusion()  :  macrotab.c
<item>sal_macro_scope()  :  macroscope.c
</itemize>
</descrip>

<sect1>Global Function macro_main()

<p><tt>struct macro_source_file* macro_main ( struct macro_table* t )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>macrotab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>sal_macro_scope()  :  macroscope.c
</itemize>
</descrip>

<sect1>Global Function macro_set_main()

<p><tt>struct macro_source_file* macro_set_main ( struct macro_table* t, const char* filename )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>macrotab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>new_source_file()  :  macrotab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>macro_start_file()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function macro_undef()

<p><tt>void macro_undef ( struct macro_source_file* source, int line, const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>macrotab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>find_definition()  :  macrotab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf_decode_macros()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Global Function new_macro_table()

<p><tt>struct macro_table* new_macro_table ( struct obstack* obstack, struct bcache* b )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>macrotab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), splay_tree_new_with_allocator()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_macrocmd()  :  macrocmd.c
<item>macro_start_file()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>macro_alloc()  :  macrotab.c
<item>macro_free()  :  macrotab.c
<item>macro_tree_compare()  :  macrotab.c
<item>macro_tree_delete_key()  :  macrotab.c
<item>macro_tree_delete_value()  :  macrotab.c
</itemize>
</descrip>

<sect1>Local Function check_for_redefinition()

<p><tt>static struct macro_key* check_for_redefinition ( struct macro_source_file* source, int line, const char* name, enum macro_kind kind, int argc, const char** argv, const char* replacement )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>find_definition()  :  macrotab.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>macro_define_function()  :  macrotab.c
<item>macro_define_object()  :  macrotab.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function compare_locations()

<p><tt>static int compare_locations ( struct macro_source_file* file1, int line1, struct macro_source_file* file2, int line2 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>inclusion_depth()  :  macrotab.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_definition()  :  macrotab.c
<item>key_compare()  :  macrotab.c
</itemize>
</descrip>

<sect1>Local Function find_definition()

<p><tt>static splay_tree_node find_definition ( const char* name, struct macro_source_file* file, int line )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>compare_locations()  :  macrotab.c
<item>splay_tree_lookup(), splay_tree_predecessor(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>check_for_redefinition()  :  macrotab.c
<item>macro_definition_location()  :  macrotab.c
<item>macro_lookup_definition()  :  macrotab.c
<item>macro_undef()  :  macrotab.c
</itemize>
</descrip>

<sect1>Local Function free_macro_source_file()

<p><tt>static void free_macro_source_file ( struct macro_source_file* src )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>free_macro_source_file()  :  macrotab.c
<item>macro_bcache_free()  :  macrotab.c
<item>macro_free()  :  macrotab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_macro_source_file()  :  macrotab.c
<item>free_macro_table()  :  macrotab.c
</itemize>
</descrip>

<sect1>Local Function inclusion_depth()

<p><tt>static int inclusion_depth ( struct macro_source_file* file )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>compare_locations()  :  macrotab.c
<item>macro_lookup_inclusion()  :  macrotab.c
</itemize>
</descrip>

<sect1>Local Function key_compare()

<p><tt>static int key_compare ( struct macro_key* key, const char* name, struct macro_source_file* file, int line )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>compare_locations()  :  macrotab.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>macro_define_function()  :  macrotab.c
<item>macro_define_object()  :  macrotab.c
<item>macro_tree_compare()  :  macrotab.c
</itemize>
</descrip>

<sect1>Local Function macro_alloc()

<p><tt>static void* macro_alloc ( int size, struct macro_table* t )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>new_macro_definition()  :  macrotab.c
<item>new_macro_key()  :  macrotab.c
<item>new_source_file()  :  macrotab.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>new_macro_table()  :  macrotab.c
</itemize>
</descrip>

<sect1>Local Function macro_bcache()

<p><tt>static const void* macro_bcache ( struct macro_table* t, const void* addr, int len )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>bcache()  :  bcache.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>macro_bcache_str()  :  macrotab.c
<item>new_macro_definition()  :  macrotab.c
</itemize>
</descrip>

<sect1>Local Function macro_bcache_free()

<p><tt>static void macro_bcache_free ( struct macro_table* t, void* obj )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_macro_source_file()  :  macrotab.c
<item>macro_tree_delete_key()  :  macrotab.c
<item>macro_tree_delete_value()  :  macrotab.c
</itemize>
</descrip>

<sect1>Local Function macro_bcache_str()

<p><tt>static const char* macro_bcache_str ( struct macro_table* t, const char* s )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>macro_bcache()  :  macrotab.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>new_macro_definition()  :  macrotab.c
<item>new_macro_key()  :  macrotab.c
<item>new_source_file()  :  macrotab.c
</itemize>
</descrip>

<sect1>Local Function macro_free()

<p><tt>static void macro_free ( void* object, struct macro_table* t )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_macro_source_file()  :  macrotab.c
<item>macro_tree_delete_key()  :  macrotab.c
<item>macro_tree_delete_value()  :  macrotab.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>new_macro_table()  :  macrotab.c
</itemize>
</descrip>

<sect1>Local Function macro_tree_compare()

<p><tt>static int macro_tree_compare ( splay_tree_key untyped_key1, splay_tree_key untyped_key2 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>key_compare()  :  macrotab.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>new_macro_table()  :  macrotab.c
</itemize>
</descrip>

<sect1>Local Function macro_tree_delete_key()

<p><tt>static void macro_tree_delete_key ( void* untyped_key )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>macro_bcache_free()  :  macrotab.c
<item>macro_free()  :  macrotab.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>new_macro_table()  :  macrotab.c
</itemize>
</descrip>

<sect1>Local Function macro_tree_delete_value()

<p><tt>static void macro_tree_delete_value ( void* untyped_definition )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>macro_bcache_free()  :  macrotab.c
<item>macro_free()  :  macrotab.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>new_macro_table()  :  macrotab.c
</itemize>
</descrip>

<sect1>Local Function new_macro_definition()

<p><tt>static struct macro_definition* new_macro_definition ( struct macro_table* t, enum macro_kind kind, int argc, const char** argv, const char* replacement )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>macro_alloc()  :  macrotab.c
<item>macro_bcache()  :  macrotab.c
<item>macro_bcache_str()  :  macrotab.c
<item>__builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>macro_define_function()  :  macrotab.c
<item>macro_define_object()  :  macrotab.c
</itemize>
</descrip>

<sect1>Local Function new_macro_key()

<p><tt>static struct macro_key* new_macro_key ( struct macro_table* t, const char* name, struct macro_source_file* file, int line )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>macro_alloc()  :  macrotab.c
<item>macro_bcache_str()  :  macrotab.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>macro_define_function()  :  macrotab.c
<item>macro_define_object()  :  macrotab.c
</itemize>
</descrip>

<sect1>Local Function new_source_file()

<p><tt>static struct macro_source_file* new_source_file ( struct macro_table* t, const char* filename )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>macro_alloc()  :  macrotab.c
<item>macro_bcache_str()  :  macrotab.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>macro_include()  :  macrotab.c
<item>macro_set_main()  :  macrotab.c
</itemize>
</descrip>

</article>
