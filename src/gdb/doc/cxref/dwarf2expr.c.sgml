<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF dwarf2expr.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for dwarf2expr.c of gdb.cxref.
<author>cxref

<sect>File dwarf2expr.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/elf/dwarf2.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;dwarf2expr.h&quot;</tt>
<itemize>
<item><tt>#include &quot;dwarf2loc.h&quot;</tt>
<itemize>
<item><tt>#include &quot;dwarf2read.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;dwarf2-frame.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;dwarf2loc.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>

<sect1>Global Function add_bits_piece()

<p><tt>void add_bits_piece ( struct dwarf_expr_context* ctx, int in_reg, CORE_ADDR value, uint64_t bitmask, int offset_in_bits, unsigned long size )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2expr.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
</itemize>
</descrip>

<sect1>Global Function add_piece()

<p><tt>void add_piece ( struct dwarf_expr_context* ctx, int in_reg, CORE_ADDR value, unsigned long size )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2expr.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>execute_stack_op()  :  dwarf2expr.c
<item>print_single_dwarf_location()  :  dwarf2loc.c
</itemize>
</descrip>

<sect1>Global Function dwarf2_read_address()

<p><tt>CORE_ADDR dwarf2_read_address ( gdb_byte* buf, gdb_byte* buf_end, int* bytes_read )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2expr.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>extract_unsigned_integer()  :  findvar.c
<item>gdbarch_addr_bit()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>execute_cfa_program()  :  dwarf2-frame.c
<item>execute_stack_op()  :  dwarf2expr.c
<item>find_location_expression()  :  dwarf2loc.c
<item>locexpr_describe_location()  :  dwarf2loc.c
<item>loclist_describe_location()  :  dwarf2loc.c
<item>print_single_dwarf_location()  :  dwarf2loc.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function dwarf_expr_eval()

<p><tt>void dwarf_expr_eval ( struct dwarf_expr_context* ctx, gdb_byte* addr, size_t len, int eh_frame_p, struct dwarf2_address_translation* addr_translation )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2expr.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>execute_stack_op()  :  dwarf2expr.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_evaluate_loc_desc()  :  dwarf2loc.c
<item>dwarf2_loc_desc_needs_frame()  :  dwarf2loc.c
<item>execute_stack_op()  :  dwarf2expr.c
</itemize>
</descrip>

<sect1>Global Function dwarf_expr_fetch()

<p><tt>CORE_ADDR dwarf_expr_fetch ( struct dwarf_expr_context* ctx, int n )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2expr.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_evaluate_loc_desc()  :  dwarf2loc.c
<item>execute_stack_op()  :  dwarf2expr.c
<item>print_single_dwarf_location()  :  dwarf2loc.c
</itemize>
</descrip>

<sect1>Global Function dwarf_expr_pop()

<p><tt>void dwarf_expr_pop ( struct dwarf_expr_context* ctx )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2expr.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>execute_stack_op()  :  dwarf2expr.c
<item>print_single_dwarf_location()  :  dwarf2loc.c
</itemize>
</descrip>

<sect1>Global Function dwarf_expr_push()

<p><tt>void dwarf_expr_push ( struct dwarf_expr_context* ctx, CORE_ADDR value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2expr.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf_expr_grow_stack()  :  dwarf2expr.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>execute_stack_op()  :  dwarf2expr.c
</itemize>
</descrip>

<sect1>Global Function free_dwarf_expr_context()

<p><tt>void free_dwarf_expr_context ( struct dwarf_expr_context* ctx )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2expr.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_evaluate_loc_desc()  :  dwarf2loc.c
<item>dwarf2_loc_desc_needs_frame()  :  dwarf2loc.c
<item>execute_stack_op()  :  dwarf2-frame.c
<item>loclist_describe_location()  :  dwarf2loc.c
</itemize>
</descrip>

<sect1>Global Function new_dwarf_expr_context()

<p><tt>struct dwarf_expr_context* new_dwarf_expr_context ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2expr.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xcalloc()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_evaluate_loc_desc()  :  dwarf2loc.c
<item>dwarf2_loc_desc_needs_frame()  :  dwarf2loc.c
<item>execute_stack_op()  :  dwarf2-frame.c
<item>locexpr_describe_location()  :  dwarf2loc.c
<item>loclist_describe_location()  :  dwarf2loc.c
</itemize>
</descrip>

<sect1>Global Function read_sleb128()

<p><tt>gdb_byte* read_sleb128 ( gdb_byte* buf, gdb_byte* buf_end, long* r )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2expr.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_tracepoint_var_ref()  :  dwarf2loc.c
<item>execute_cfa_program()  :  dwarf2-frame.c
<item>execute_stack_op()  :  dwarf2expr.c
<item>print_single_dwarf_location()  :  dwarf2loc.c
<item>read_encoded_value()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Global Function read_uleb128()

<p><tt>gdb_byte* read_uleb128 ( gdb_byte* buf, gdb_byte* buf_end, unsigned long* r )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2expr.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_tracepoint_var_ref()  :  dwarf2loc.c
<item>execute_cfa_program()  :  dwarf2-frame.c
<item>execute_stack_op()  :  dwarf2expr.c
<item>print_single_dwarf_location()  :  dwarf2loc.c
<item>read_encoded_value()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Global Function signed_address_type()

<p><tt>struct type* signed_address_type ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2expr.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_addr_bit()  :  gdbarch.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>execute_stack_op()  :  dwarf2expr.c
<item>print_single_dwarf_location()  :  dwarf2loc.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int16  :  gdbtypes.c
<item>builtin_type_int32  :  gdbtypes.c
<item>builtin_type_int64  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function unsigned_address_type()

<p><tt>struct type* unsigned_address_type ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2expr.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_addr_bit()  :  gdbarch.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>execute_stack_op()  :  dwarf2expr.c
<item>print_single_dwarf_location()  :  dwarf2loc.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_uint16  :  gdbtypes.c
<item>builtin_type_uint32  :  gdbtypes.c
<item>builtin_type_uint64  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function dwarf_expr_grow_stack()

<p><tt>static void dwarf_expr_grow_stack ( struct dwarf_expr_context* ctx, size_t need )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf_expr_push()  :  dwarf2expr.c
</itemize>
</descrip>

<sect1>Local Function execute_stack_op()

<p><tt>static void execute_stack_op ( struct dwarf_expr_context* ctx, gdb_byte* op_ptr, gdb_byte* op_end, int eh_frame_p, struct dwarf2_address_translation* addr_translation )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2expr.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_piece()  :  dwarf2expr.c
<item>dwarf2_frame_adjust_regnum()  :  dwarf2-frame.c
<item>dwarf2_read_address()  :  dwarf2expr.c
<item>dwarf_expr_eval()  :  dwarf2expr.c
<item>dwarf_expr_fetch()  :  dwarf2expr.c
<item>dwarf_expr_pop()  :  dwarf2expr.c
<item>dwarf_expr_push()  :  dwarf2expr.c
<item>error()  :  utils.c
<item>extract_signed_integer()  :  findvar.c
<item>extract_unsigned_integer()  :  findvar.c
<item>gdbarch_addr_bit()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>objfile_section_offset()  :  objfiles.c
<item>read_sleb128()  :  dwarf2expr.c
<item>read_uleb128()  :  dwarf2expr.c
<item>signed_address_type()  :  dwarf2expr.c
<item>translate_debug_map_address()  :  dwarf2read.c
<item>unsigned_address_type()  :  dwarf2expr.c
<item>value_as_long()  :  value.c
<item>value_binop()  :  valarith.c
<item>value_from_longest()  :  value.c
<item>__builtin_alloca()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf_expr_eval()  :  dwarf2expr.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

</article>
