{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF valarith.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File valarith.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <math.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "infcall.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "parser-defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define TRUNCATION_TOWARDS_ZERO\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable valarith_c_inited\par}
{\s5\f1\fs20\ql\sb50\sa50 int valarith_c_inited\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell ax-general.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-abi.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame-base.c\cell\cell\row
\cell frame-unwind.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell gnu-v2-abi.c\cell\cell\row
\cell gnu-v3-abi.c\cell\cell\row
\cell hpacc-abi.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell m2-valprint.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell std-regs.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell trad-frame.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell user-regs.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
\cell wrapper.c\cell\cell\row
Used in:\cell _initialize_valarith()\cell valarith.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_valarith()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_valarith ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell valarith.c\cell\cell\row
Refs Var:\cell valarith_c_inited\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function binop_user_defined_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int binop_user_defined_p ( enum exp_opcode op, struct value* arg1, struct value* arg2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function unop_user_defined_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int unop_user_defined_p ( enum exp_opcode op, struct value* arg1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_add()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_add ( struct value* arg1, struct value* arg2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_array()\cell value.c\cell\row
\cell find_size_for_pointer_math()\cell valarith.c\cell\row
\cell is_integral_type()\cell gdbtypes.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_value_ptr_subscript()\cell ada-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell gnuv2_virtual_fn_field()\cell gnu-v2-abi.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_binop()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_binop ( struct value* arg1, struct value* arg2, enum exp_opcode op )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gdbarch_double_bit()\cell gdbarch.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell is_integral_type()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell op_name_standard()\cell expprint.c\cell\row
\cell safe_strerror()\cell utils.c\cell\row
\cell store_signed_integer()\cell findvar.c\cell\row
\cell store_typed_floating()\cell doublest.c\cell\row
\cell store_unsigned_integer()\cell findvar.c\cell\row
\cell value_as_double()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell value_contents_writeable()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell  __error(), pow(), powl()\cell\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_value_binop()\cell ada-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\cell print_single_dwarf_location()\cell dwarf2loc.c\cell\row
\cell value_add()\cell valarith.c\cell\row
\cell value_equal()\cell valarith.c\cell\row
\cell value_less()\cell valarith.c\cell\row
\cell value_sub()\cell valarith.c\cell\row
Refs Var:\cell builtin_type_double\cell gdbtypes.c\cell\row
\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell builtin_type_int128\cell gdbtypes.c\cell\row
\cell builtin_type_long\cell gdbtypes.c\cell\row
\cell builtin_type_long_double\cell gdbtypes.c\cell\row
\cell builtin_type_long_long\cell gdbtypes.c\cell\row
\cell builtin_type_uint128\cell gdbtypes.c\cell\row
\cell builtin_type_unsigned_long\cell gdbtypes.c\cell\row
\cell builtin_type_unsigned_long_long\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_bit_index()\par}
{\s5\f1\fs20\ql\sb50\sa50 int value_bit_index ( struct type* type, const gdb_byte* valaddr, int index )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell get_discrete_bounds()\cell gdbtypes.c\cell\row
\cell unpack_long()\cell value.c\cell\row
Called by:\cell pascal_val_print()\cell p-valprint.c\cell\row
\cell value_in()\cell valarith.c\cell\row
\cell value_slice()\cell valops.c\cell\row
Refs Var:\cell builtin_type_unsigned_char\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_complement()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_complement ( struct value* arg1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell is_integral_type()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_concat()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_concat ( struct value* arg1, struct value* arg2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell longest_to_int()\cell valprint.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell unpack_long()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_string()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_equal()\par}
{\s5\f1\fs20\ql\sb50\sa50 int value_equal ( struct value* arg1, struct value* arg2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_array()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell is_integral_type()\cell gdbtypes.c\cell\row
\cell longest_to_int()\cell valprint.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_as_double()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_strcmp()\cell valarith.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_value_equal()\cell ada-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell gdb_value_equal()\cell wrapper.c\cell\row
\cell watchpoint_equal()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_in()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_in ( struct value* element, struct value* set )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell lang_bool_type()\cell language.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_bit_index()\cell valarith.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_less()\par}
{\s5\f1\fs20\ql\sb50\sa50 int value_less ( struct value* arg1, struct value* arg2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_array()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell is_integral_type()\cell gdbtypes.c\cell\row
\cell longest_to_int()\cell valprint.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_as_double()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_strcmp()\cell valarith.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_logical_not()\par}
{\s5\f1\fs20\ql\sb50\sa50 int value_logical_not ( struct value* arg1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_number()\cell value.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_as_double()\cell value.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell allocate_space_in_inferior_malloc()\cell valops.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell scm_lookup_name()\cell scm-lang.c\cell\row
\cell type_from_class()\cell jv-lang.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_true()\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_neg()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_neg ( struct value* arg1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell is_integral_type()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_as_double()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_from_double()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell const_expr()\cell ax-gdb.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_pos()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_pos ( struct value* arg1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell is_integral_type()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_as_double()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_from_double()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_sub()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_sub ( struct value* arg1, struct value* arg2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_array()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_size_for_pointer_math()\cell valarith.c\cell\row
\cell is_integral_type()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_value_ptr_subscript()\cell ada-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
Refs Var:\cell builtin_type_long\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_subscript()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_subscript ( struct value* array, struct value* idx )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_frame_id_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell get_array_bounds()\cell gdbtypes.c\cell\row
\cell get_discrete_bounds()\cell gdbtypes.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lang_bool_type()\cell language.c\cell\row
\cell set_value_bitpos()\cell value.c\cell\row
\cell set_value_bitsize()\cell value.c\cell\row
\cell set_value_offset()\cell value.c\cell\row
\cell value_add()\cell valarith.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_coerce_array()\cell valops.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_sub()\cell valarith.c\cell\row
\cell value_subscripted_rvalue()\cell valarith.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
Called by:\cell ada_value_subscript()\cell ada-lang.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell gdb_value_subscript()\cell wrapper.c\cell\row
\cell gnuv2_virtual_fn_field()\cell gnu-v2-abi.c\cell\row
\cell gnuv3_baseclass_offset()\cell gnu-v3-abi.c\cell\row
\cell gnuv3_virtual_fn_field()\cell gnu-v3-abi.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_language\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_x_binop()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_x_binop ( struct value* arg1, struct value* arg2, enum exp_opcode op, enum exp_opcode otherop, enum noside noside )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell call_function_by_hand()\cell infcall.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_enum()\cell value.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell value_zero()\cell valops.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcpy_chk()\cell\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_x_unop()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_x_unop ( struct value* arg1, enum exp_opcode op, enum noside noside )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell call_function_by_hand()\cell infcall.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_enum()\cell value.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell value_zero()\cell valops.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcpy_chk()\cell\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_size_for_pointer_math()\par}
{\s5\f1\fs20\ql\sb50\sa50 static long find_size_for_pointer_math ( struct type* ptr_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell value_add()\cell valarith.c\cell\row
\cell value_sub()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function value_strcmp()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int value_strcmp ( struct value* arg1, struct value* arg2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell value_equal()\cell valarith.c\cell\row
\cell value_less()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function value_subscripted_rvalue()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* value_subscripted_rvalue ( struct value* array, struct value* idx )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell valarith.c\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_frame_id_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell deprecated_value_regnum_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell get_array_bounds()\cell gdbtypes.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell longest_to_int()\cell valprint.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell set_value_lazy()\cell value.c\cell\row
\cell set_value_offset()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_contents_writeable()\cell value.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell value_subscript()\cell valarith.c\cell\row
\intbl0
}
