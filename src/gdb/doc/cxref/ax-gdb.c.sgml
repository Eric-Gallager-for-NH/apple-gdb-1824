<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF ax-gdb.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for ax-gdb.c of gdb.cxref.
<author>cxref

<sect>File ax-gdb.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;ax.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;ax-gdb.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;regcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>

<sect1>Local Variables

<p>
<bf>trace_kludge</bf><newline>
<tt>static int trace_kludge</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>expr_to_agent()
<item>gen_bitfield_ref()
<item>gen_fetch()
<item>gen_trace_for_expr()
<item>gen_traced_pop()
</itemize>
</descrip>

<sect1>Global Function _initialize_ax_gdb()

<p><tt>void _initialize_ax_gdb ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>agent_command()  :  ax-gdb.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>maintenancelist
</itemize>
</descrip>

<sect1>Global Function expr_to_agent()

<p><tt>struct agent_expr* expr_to_agent ( struct expression* expr, struct axs_value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>discard_cleanups()  :  utils.c
<item>gen_expr()  :  ax-gdb.c
<item>make_cleanup_free_agent_expr()  :  ax-general.c
<item>new_agent_expr()  :  ax-general.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>trace_kludge  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Global Function gen_trace_for_expr()

<p><tt>struct agent_expr* gen_trace_for_expr ( CORE_ADDR scope, struct expression* expr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_simple()  :  ax-general.c
<item>discard_cleanups()  :  utils.c
<item>gen_expr()  :  ax-gdb.c
<item>gen_traced_pop()  :  ax-gdb.c
<item>make_cleanup_free_agent_expr()  :  ax-general.c
<item>new_agent_expr()  :  ax-general.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>agent_command()  :  ax-gdb.c
<item>encode_actions()  :  tracepoint.c
<item>validate_actionline()  :  tracepoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>trace_kludge  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function agent_command()

<p><tt>static void agent_command ( const char* exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_print()  :  ax-general.c
<item>do_cleanups()  :  utils.c
<item>dont_repeat()  :  top.c
<item>error()  :  utils.c
<item>gen_trace_for_expr()  :  ax-gdb.c
<item>get_current_frame()  :  frame.c
<item>get_frame_pc()  :  frame.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_free_agent_expr()  :  ax-general.c
<item>parse_expression()  :  parse.c
<item>error_no_arg()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ax_gdb()  :  ax-gdb.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>innermost_block  :  parse.c
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function const_expr()

<p><tt>static struct value* const_expr ( union exp_element** pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>const_expr()  :  ax-gdb.c
<item>const_var_ref()  :  ax-gdb.c
<item>value_from_longest()  :  value.c
<item>value_neg()  :  valarith.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>const_expr()  :  ax-gdb.c
<item>gen_repeat()  :  ax-gdb.c
<item>maybe_const_expr()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function const_var_ref()

<p><tt>static struct value* const_var_ref ( struct symbol* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_from_longest()  :  value.c
<item>value_from_pointer()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>const_expr()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function find_field()

<p><tt>static int find_field ( struct type* type, char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>error()  :  utils.c
<item>internal_error()  :  utils.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_struct_ref()  :  ax-gdb.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function gen_add()

<p><tt>static void gen_add ( struct agent_expr* ax, struct axs_value* value, struct axs_value* value1, struct axs_value* value2, const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_simple()  :  ax-general.c
<item>error()  :  utils.c
<item>gen_extend()  :  ax-gdb.c
<item>gen_scale()  :  ax-gdb.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_expr()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function gen_address_of()

<p><tt>static void gen_address_of ( struct agent_expr* ax, struct axs_value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>lookup_pointer_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_expr()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function gen_binop()

<p><tt>static void gen_binop ( struct agent_expr* ax, struct axs_value* value, struct axs_value* value1, struct axs_value* value2, enum agent_op op, enum agent_op op_unsigned, int may_carry, const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_simple()  :  ax-general.c
<item>error()  :  utils.c
<item>gen_extend()  :  ax-gdb.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_expr()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function gen_bitfield_ref()

<p><tt>static void gen_bitfield_ref ( struct agent_expr* ax, struct axs_value* value, struct type* type, int start, int end )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_simple()  :  ax-general.c
<item>ax_trace_quick()  :  ax-general.c
<item>check_typedef()  :  gdbtypes.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>gen_left_shift()  :  ax-gdb.c
<item>gen_offset()  :  ax-gdb.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_struct_ref()  :  ax-gdb.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>ax_ext()  :  ax-general.c
<item>ax_zero_ext()  :  ax-general.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>trace_kludge  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function gen_cast()

<p><tt>static void gen_cast ( struct agent_expr* ax, struct axs_value* value, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>error()  :  utils.c
<item>gen_conversion()  :  ax-gdb.c
<item>require_rvalue()  :  ax-gdb.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_expr()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function gen_complement()

<p><tt>static void gen_complement ( struct agent_expr* ax, struct axs_value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_simple()  :  ax-general.c
<item>error()  :  utils.c
<item>gen_extend()  :  ax-gdb.c
<item>gen_integral_promotions()  :  ax-gdb.c
<item>gen_usual_unary()  :  ax-gdb.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_expr()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function gen_conversion()

<p><tt>static void gen_conversion ( struct agent_expr* ax, struct type* from, struct type* to )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gen_extend()  :  ax-gdb.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_cast()  :  ax-gdb.c
<item>gen_integral_promotions()  :  ax-gdb.c
<item>gen_usual_arithmetic()  :  ax-gdb.c
<item>is_nontrivial_conversion()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function gen_deref()

<p><tt>static void gen_deref ( struct agent_expr* ax, struct axs_value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_expr()  :  ax-gdb.c
<item>gen_struct_ref()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function gen_expr()

<p><tt>static void gen_expr ( union exp_element** pc, struct agent_expr* ax, struct axs_value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_const_l()  :  ax-general.c
<item>check_typedef()  :  gdbtypes.c
<item>error()  :  utils.c
<item>gen_add()  :  ax-gdb.c
<item>gen_address_of()  :  ax-gdb.c
<item>gen_binop()  :  ax-gdb.c
<item>gen_cast()  :  ax-gdb.c
<item>gen_complement()  :  ax-gdb.c
<item>gen_deref()  :  ax-gdb.c
<item>gen_expr()  :  ax-gdb.c
<item>gen_int_literal()  :  ax-gdb.c
<item>gen_logical_not()  :  ax-gdb.c
<item>gen_repeat()  :  ax-gdb.c
<item>gen_sizeof()  :  ax-gdb.c
<item>gen_struct_ref()  :  ax-gdb.c
<item>gen_sub()  :  ax-gdb.c
<item>gen_traced_pop()  :  ax-gdb.c
<item>gen_usual_arithmetic()  :  ax-gdb.c
<item>gen_usual_unary()  :  ax-gdb.c
<item>gen_var_ref()  :  ax-gdb.c
<item>internal_error()  :  utils.c
<item>maybe_const_expr()  :  ax-gdb.c
<item>register_type()  :  regcache.c
<item>value_as_long()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>expr_to_agent()  :  ax-gdb.c
<item>gen_expr()  :  ax-gdb.c
<item>gen_repeat()  :  ax-gdb.c
<item>gen_sizeof()  :  ax-gdb.c
<item>gen_trace_for_expr()  :  ax-gdb.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function gen_extend()

<p><tt>static void gen_extend ( struct agent_expr* ax, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_add()  :  ax-gdb.c
<item>gen_binop()  :  ax-gdb.c
<item>gen_complement()  :  ax-gdb.c
<item>gen_conversion()  :  ax-gdb.c
<item>gen_sub()  :  ax-gdb.c
<item>require_rvalue()  :  ax-gdb.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>ax_ext()  :  ax-general.c
<item>ax_zero_ext()  :  ax-general.c
</itemize>
</descrip>

<sect1>Local Function gen_fetch()

<p><tt>static void gen_fetch ( struct agent_expr* ax, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_simple()  :  ax-general.c
<item>ax_trace_quick()  :  ax-general.c
<item>gen_sign_extend()  :  ax-gdb.c
<item>internal_error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_var_ref()  :  ax-gdb.c
<item>require_rvalue()  :  ax-gdb.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>trace_kludge  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function gen_frame_args_address()

<p><tt>static void gen_frame_args_address ( struct agent_expr* ax )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_reg()  :  ax-general.c
<item>gdbarch_virtual_frame_pointer()  :  gdbarch.c
<item>gen_offset()  :  ax-gdb.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_var_ref()  :  ax-gdb.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function gen_frame_locals_address()

<p><tt>static void gen_frame_locals_address ( struct agent_expr* ax )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_reg()  :  ax-general.c
<item>gdbarch_virtual_frame_pointer()  :  gdbarch.c
<item>gen_offset()  :  ax-gdb.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_var_ref()  :  ax-gdb.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function gen_int_literal()

<p><tt>static void gen_int_literal ( struct agent_expr* ax, struct axs_value* value, long k, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_const_l()  :  ax-general.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_expr()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function gen_integral_promotions()

<p><tt>static void gen_integral_promotions ( struct agent_expr* ax, struct axs_value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gen_conversion()  :  ax-gdb.c
<item>type_wider_than()  :  ax-gdb.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_complement()  :  ax-gdb.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>builtin_type_unsigned_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function gen_left_shift()

<p><tt>static void gen_left_shift ( struct agent_expr* ax, int distance )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_const_l()  :  ax-general.c
<item>ax_simple()  :  ax-general.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_bitfield_ref()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function gen_logical_not()

<p><tt>static void gen_logical_not ( struct agent_expr* ax, struct axs_value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_simple()  :  ax-general.c
<item>error()  :  utils.c
<item>gen_usual_unary()  :  ax-gdb.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_expr()  :  ax-gdb.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function gen_offset()

<p><tt>static void gen_offset ( struct agent_expr* ax, int offset )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_const_l()  :  ax-general.c
<item>ax_simple()  :  ax-general.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_bitfield_ref()  :  ax-gdb.c
<item>gen_frame_args_address()  :  ax-gdb.c
<item>gen_frame_locals_address()  :  ax-gdb.c
<item>gen_struct_ref()  :  ax-gdb.c
<item>gen_sym_offset()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function gen_repeat()

<p><tt>static void gen_repeat ( union exp_element** pc, struct agent_expr* ax, struct axs_value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>const_expr()  :  ax-gdb.c
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
<item>error()  :  utils.c
<item>gen_expr()  :  ax-gdb.c
<item>value_as_long()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_expr()  :  ax-gdb.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function gen_scale()

<p><tt>static void gen_scale ( struct agent_expr* ax, enum agent_op op, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_const_l()  :  ax-general.c
<item>ax_simple()  :  ax-general.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_add()  :  ax-gdb.c
<item>gen_sub()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function gen_sign_extend()

<p><tt>static void gen_sign_extend ( struct agent_expr* ax, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_ext()  :  ax-general.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_fetch()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function gen_sizeof()

<p><tt>static void gen_sizeof ( union exp_element** pc, struct agent_expr* ax, struct axs_value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_const_l()  :  ax-general.c
<item>gen_expr()  :  ax-gdb.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_expr()  :  ax-gdb.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function gen_struct_ref()

<p><tt>static void gen_struct_ref ( struct agent_expr* ax, struct axs_value* value, char* field, const char* operator_name, const char* operand_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>error()  :  utils.c
<item>find_field()  :  ax-gdb.c
<item>gen_bitfield_ref()  :  ax-gdb.c
<item>gen_deref()  :  ax-gdb.c
<item>gen_offset()  :  ax-gdb.c
<item>gen_usual_unary()  :  ax-gdb.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_expr()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function gen_sub()

<p><tt>static void gen_sub ( struct agent_expr* ax, struct axs_value* value, struct axs_value* value1, struct axs_value* value2 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_simple()  :  ax-general.c
<item>error()  :  utils.c
<item>gen_extend()  :  ax-gdb.c
<item>gen_scale()  :  ax-gdb.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_expr()  :  ax-gdb.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_long  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function gen_sym_offset()

<p><tt>static void gen_sym_offset ( struct agent_expr* ax, struct symbol* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gen_offset()  :  ax-gdb.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_var_ref()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function gen_traced_pop()

<p><tt>static void gen_traced_pop ( struct agent_expr* ax, struct axs_value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_const_l()  :  ax-general.c
<item>ax_reg()  :  ax-general.c
<item>ax_simple()  :  ax-general.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_expr()  :  ax-gdb.c
<item>gen_trace_for_expr()  :  ax-gdb.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>trace_kludge  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function gen_usual_arithmetic()

<p><tt>static void gen_usual_arithmetic ( struct agent_expr* ax, struct axs_value* value1, struct axs_value* value2 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_simple()  :  ax-general.c
<item>gen_conversion()  :  ax-gdb.c
<item>is_nontrivial_conversion()  :  ax-gdb.c
<item>max_type()  :  ax-gdb.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_expr()  :  ax-gdb.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function gen_usual_unary()

<p><tt>static void gen_usual_unary ( struct agent_expr* ax, struct axs_value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>lookup_pointer_type()  :  gdbtypes.c
<item>require_rvalue()  :  ax-gdb.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_complement()  :  ax-gdb.c
<item>gen_expr()  :  ax-gdb.c
<item>gen_logical_not()  :  ax-gdb.c
<item>gen_struct_ref()  :  ax-gdb.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function gen_var_ref()

<p><tt>static void gen_var_ref ( struct agent_expr* ax, struct axs_value* value, struct symbol* var )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_const_l()  :  ax-general.c
<item>ax_reg()  :  ax-general.c
<item>check_typedef()  :  gdbtypes.c
<item>error()  :  utils.c
<item>gen_fetch()  :  ax-gdb.c
<item>gen_frame_args_address()  :  ax-gdb.c
<item>gen_frame_locals_address()  :  ax-gdb.c
<item>gen_sym_offset()  :  ax-gdb.c
<item>internal_error()  :  utils.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>symbol_natural_name()  :  symtab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_expr()  :  ax-gdb.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void  :  gdbtypes.c
<item>demangle  :  utils.c
</itemize>
</descrip>

<sect1>Local Function is_nontrivial_conversion()

<p><tt>static int is_nontrivial_conversion ( struct type* from, struct type* to )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_agent_expr()  :  ax-general.c
<item>gen_conversion()  :  ax-gdb.c
<item>new_agent_expr()  :  ax-general.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_usual_arithmetic()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function max_type()

<p><tt>static struct type* max_type ( struct type* type1, struct type* type2 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>type_wider_than()  :  ax-gdb.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_usual_arithmetic()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function maybe_const_expr()

<p><tt>static struct value* maybe_const_expr ( union exp_element** pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>const_expr()  :  ax-gdb.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_expr()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function require_rvalue()

<p><tt>static void require_rvalue ( struct agent_expr* ax, struct axs_value* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ax_reg()  :  ax-general.c
<item>gen_extend()  :  ax-gdb.c
<item>gen_fetch()  :  ax-gdb.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_cast()  :  ax-gdb.c
<item>gen_usual_unary()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function type_wider_than()

<p><tt>static int type_wider_than ( struct type* type1, struct type* type2 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-gdb.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_integral_promotions()  :  ax-gdb.c
<item>max_type()  :  ax-gdb.c
</itemize>
</descrip>

</article>
