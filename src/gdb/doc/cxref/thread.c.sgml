<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF thread.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for thread.c of gdb.cxref.
<author>cxref

<sect>File thread.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;environ.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbthread.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;regcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;wrapper.h&quot;</tt>
<itemize>
<item><tt>#include &quot;gdb.h&quot;</tt>
<item><tt>#include &quot;varobj.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;signal.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;macosx/macosx-nat-infthread.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
</itemize>
</itemize>

<sect1>Type struct current_thread_cleanup

<p>
<itemize>
<item><tt>struct current_thread_cleanup</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>ptid_t inferior_ptid;</tt><newline>
<item><tt>int print;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct select_thread_args

<p>
<itemize>
<item><tt>struct select_thread_args</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const char* tidstr;</tt><newline>
<item><tt>int print;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable thread_list

<p>
<tt>struct thread_info* thread_list</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>remote.c
<item>thread.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>add_thread()  :  thread.c
<item>delete_step_resume_breakpoint()  :  thread.c
<item>delete_thread()  :  thread.c
<item>do_captured_list_thread_ids()  :  thread.c
<item>find_thread_id()  :  thread.c
<item>find_thread_pid()  :  thread.c
<item>in_thread_list()  :  thread.c
<item>info_threads_command()  :  thread.c
<item>init_thread_list()  :  thread.c
<item>iterate_over_threads()  :  thread.c
<item>pid_to_thread_id()  :  thread.c
<item>prune_threads()  :  thread.c
<item>thread_apply_all_command()  :  thread.c
<item>valid_thread_id()  :  thread.c
</itemize>
</descrip>

<sect1>Global Variable highest_thread_num

<p>
<tt>int highest_thread_num</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>remote.c
<item>thread.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>add_thread()  :  thread.c
<item>init_thread_list()  :  thread.c
</itemize>
</descrip>

<sect1>Global Variable thread_cmd_list

<p>
<tt>struct cmd_list_element* thread_cmd_list</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>remote.c
<item>thread.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_thread()  :  thread.c
</itemize>
</descrip>

<sect1>External Variables

<p>
<bf>scheduler_lock_ptid</bf><newline>
<tt>extern struct ptid scheduler_lock_ptid</tt><newline>

<sect1>Global Function _initialize_thread()

<p><tt>void _initialize_thread ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>thread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_cmd(), add_com_alias(), add_info(), add_prefix_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>info_threads_command()  :  thread.c
<item>thread_apply_all_command()  :  thread.c
<item>thread_apply_command()  :  thread.c
<item>thread_command()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>thread_cmd_list  :  thread.c
<item>xdb_commands  :  main.c
<item>cmdlist
</itemize>
</descrip>

<sect1>Global Function add_thread()

<p><tt>struct thread_info* add_thread ( ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbthread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>record_currthread()  :  remote.c
<item>remote_newthread_step()  :  remote.c
<item>remote_threads_info()  :  remote.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>highest_thread_num  :  thread.c
<item>thread_list  :  thread.c
</itemize>
</descrip>

<sect1>Global Function delete_step_resume_breakpoint()

<p><tt>void delete_step_resume_breakpoint ( void* arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbthread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>delete_breakpoint()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>fetch_inferior_event()  :  infrun.c
<item>wait_for_inferior()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>thread_list  :  thread.c
</itemize>
</descrip>

<sect1>Global Function delete_thread()

<p><tt>void delete_thread ( ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbthread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_thread()  :  thread.c
<item>ptid_equal()  :  infrun.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>prune_threads()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>thread_list  :  thread.c
</itemize>
</descrip>

<sect1>Global Function find_thread_id()

<p><tt>struct thread_info* find_thread_id ( int num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbthread.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_captured_thread_select()  :  thread.c
<item>load_infrun_state()  :  thread.c
<item>restore_thread_inlined_call_stack()  :  inlining.c
<item>save_infrun_state()  :  thread.c
<item>save_thread_inlined_call_stack()  :  inlining.c
<item>thread_apply_command()  :  thread.c
<item>thread_id_to_pid()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>thread_list  :  thread.c
</itemize>
</descrip>

<sect1>Global Function find_thread_pid()

<p><tt>struct thread_info* find_thread_pid ( ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbthread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ptid_equal()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>thread_list  :  thread.c
</itemize>
</descrip>

<sect1>Global Function gdb_list_thread_ids()

<p><tt>enum gdb_rc gdb_list_thread_ids ( struct ui_out* uiout, char** error_message )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdb.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>catch_exceptions_with_msg()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_captured_list_thread_ids()  :  thread.c
</itemize>
</descrip>

<sect1>Global Function gdb_thread_select()

<p><tt>enum gdb_rc gdb_thread_select ( struct ui_out* uiout, const char* tidstr, int print, char** error_message )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdb.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>catch_exceptions_with_msg()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>thread_command()  :  thread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_captured_thread_select()  :  thread.c
</itemize>
</descrip>

<sect1>Global Function in_thread_list()

<p><tt>int in_thread_list ( ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbthread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ptid_equal()  :  infrun.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_re_set_thread()  :  breakpoint.c
<item>context_switch()  :  infrun.c
<item>handle_inferior_event()  :  infrun.c
<item>record_currthread()  :  remote.c
<item>remote_newthread_step()  :  remote.c
<item>remote_threads_info()  :  remote.c
<item>resume()  :  infrun.c
<item>set_momentary_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>thread_list  :  thread.c
</itemize>
</descrip>

<sect1>Global Function init_thread_list()

<p><tt>void init_thread_list ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbthread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_thread()  :  thread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>kill_command()  :  inflow.c
<item>start_remote()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>highest_thread_num  :  thread.c
<item>thread_list  :  thread.c
</itemize>
</descrip>

<sect1>Global Function iterate_over_threads()

<p><tt>struct thread_info* iterate_over_threads ( int (*callback)(struct thread_info*,void*), void* data )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbthread.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>check_safe_call()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>thread_list  :  thread.c
</itemize>
</descrip>

<sect1>Global Function load_infrun_state()

<p><tt>void load_infrun_state ( ptid_t ptid, CORE_ADDR* prev_pc, int* trap_expected, struct breakpoint** step_resume_breakpoint, CORE_ADDR* step_range_start, CORE_ADDR* step_range_end, struct address_range_list** stepping_ranges, struct frame_id* step_frame_id, int* handling_longjmp, int* another_trap, int* stepping_through_solib_after_catch, bpstat* stepping_through_solib_catchpoints, int* current_line, struct symtab** current_symtab )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbthread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_thread_id()  :  thread.c
<item>pid_to_thread_id()  :  thread.c
<item>restore_thread_inlined_call_stack()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>context_switch()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_restore_current_thread()

<p><tt>struct cleanup* make_cleanup_restore_current_thread ( ptid_t inferior_ptid, int print )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdb.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>check_safe_call()  :  valops.c
<item>safe_check_is_thread_unsafe()  :  valops.c
<item>thread_apply_all_command()  :  thread.c
<item>thread_apply_command()  :  thread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_restore_current_thread_cleanup()  :  thread.c
</itemize>
</descrip>

<sect1>Global Function pid_to_thread_id()

<p><tt>int pid_to_thread_id ( ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbthread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ptid_equal()  :  infrun.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_find_step_resume_breakpoint()  :  breakpoint.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>breakpoint_re_set_thread()  :  breakpoint.c
<item>breakpoint_thread_match()  :  breakpoint.c
<item>do_captured_thread_select()  :  thread.c
<item>do_check_is_thread_unsafe()  :  valops.c
<item>handle_inferior_event()  :  infrun.c
<item>load_infrun_state()  :  thread.c
<item>normal_stop()  :  infrun.c
<item>restore_thread_inlined_call_stack()  :  inlining.c
<item>save_infrun_state()  :  thread.c
<item>save_thread_inlined_call_stack()  :  inlining.c
<item>set_momentary_breakpoint()  :  breakpoint.c
<item>thread_command()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>thread_list  :  thread.c
</itemize>
</descrip>

<sect1>Global Function prune_threads()

<p><tt>void prune_threads ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbthread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>delete_thread()  :  thread.c
<item>thread_alive()  :  thread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_captured_list_thread_ids()  :  thread.c
<item>info_threads_command()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>thread_list  :  thread.c
</itemize>
</descrip>

<sect1>Global Function save_infrun_state()

<p><tt>void save_infrun_state ( ptid_t ptid, CORE_ADDR prev_pc, int trap_expected, struct breakpoint* step_resume_breakpoint, CORE_ADDR step_range_start, CORE_ADDR step_range_end, struct address_range_list* stepping_ranges, const struct frame_id* step_frame_id, int handling_longjmp, int another_trap, int stepping_through_solib_after_catch, bpstat stepping_through_solib_catchpoints, int current_line, struct symtab* current_symtab )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbthread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_thread_id()  :  thread.c
<item>pid_to_thread_id()  :  thread.c
<item>save_thread_inlined_call_stack()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>context_switch()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function switch_to_thread()

<p><tt>void switch_to_thread ( ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbthread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_hand_call_cleanups()  :  utils.c
<item>flush_cached_frames()  :  frame.c
<item>get_current_frame()  :  frame.c
<item>inlined_function_call_stack_pc()  :  inlining.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>ptid_equal()  :  infrun.c
<item>read_pc()  :  regcache.c
<item>registers_changed()  :  regcache.c
<item>restore_thread_inlined_call_stack()  :  inlining.c
<item>save_thread_inlined_call_stack()  :  inlining.c
<item>scheduler_lock_on_p()  :  infrun.c
<item>scheduler_run_this_ptid()  :  infrun.c
<item>select_frame()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_captured_thread_select()  :  thread.c
<item>do_check_is_thread_unsafe()  :  valops.c
<item>info_threads_command()  :  thread.c
<item>restore_current_thread()  :  thread.c
<item>thread_apply_all_command()  :  thread.c
<item>thread_apply_command()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
<item>stop_pc  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function thread_id_to_pid()

<p><tt>ptid_t thread_id_to_pid ( int num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbthread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_thread_id()  :  thread.c
<item>pid_to_ptid()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function valid_thread_id()

<p><tt>int valid_thread_id ( int num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbthread.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>thread_list  :  thread.c
</itemize>
</descrip>

<sect1>Local Function do_captured_list_thread_ids()

<p><tt>static int do_captured_list_thread_ids ( struct ui_out* uiout, void* arg )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>make_cleanup_ui_out_list_begin_end()  :  ui-out.c
<item>make_cleanup_ui_out_tuple_begin_end()  :  ui-out.c
<item>prune_threads()  :  thread.c
<item>ui_out_field_int()  :  ui-out.c
<item>macosx_print_thread_details()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdb_list_thread_ids()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>thread_list  :  thread.c
</itemize>
</descrip>

<sect1>Local Function do_captured_thread_select()

<p><tt>static int do_captured_thread_select ( struct ui_out* uiout, void* in_args )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>clear_inlined_subroutine_print_frames()  :  inlining.c
<item>error()  :  utils.c
<item>find_thread_id()  :  thread.c
<item>frame_relative_level()  :  frame.c
<item>get_current_frame()  :  frame.c
<item>get_frame_type()  :  frame.c
<item>parse_and_eval()  :  eval.c
<item>pid_to_thread_id()  :  thread.c
<item>print_stack_frame()  :  stack.c
<item>select_frame()  :  frame.c
<item>switch_to_thread()  :  thread.c
<item>thread_alive()  :  thread.c
<item>ui_out_field_int()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>value_as_long()  :  value.c
<item>deprecated_context_hook()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdb_thread_select()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>deprecated_context_hook  :  top.c
<item>deprecated_selected_frame  :  frame.c
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function do_restore_current_thread_cleanup()

<p><tt>static void do_restore_current_thread_cleanup ( void* arg )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>restore_current_thread()  :  thread.c
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_restore_current_thread()  :  thread.c
</itemize>
</descrip>

<sect1>Local Function free_thread()

<p><tt>static void free_thread ( struct thread_info* tp )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>delete_breakpoint()  :  breakpoint.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>delete_thread()  :  thread.c
<item>init_thread_list()  :  thread.c
</itemize>
</descrip>

<sect1>Local Function info_threads_command()

<p><tt>static void info_threads_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>thread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_inlined_subroutine_print_frames()  :  inlining.c
<item>frame_find_by_id()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>get_selected_frame()  :  frame.c
<item>print_stack_frame()  :  stack.c
<item>prune_threads()  :  thread.c
<item>ptid_equal()  :  infrun.c
<item>select_frame()  :  frame.c
<item>show_stack_frame()  :  stack.c
<item>switch_to_thread()  :  thread.c
<item>ui_out_field_int()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>ui_out_text_fmt()  :  ui-out.c
<item>warning()  :  utils.c
<item>__builtin___snprintf_chk(), __builtin_object_size(), strlcat(), strlcpy(), strlen()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_thread()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>inferior_ptid  :  infcmd.c
<item>thread_list  :  thread.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function restore_current_thread()

<p><tt>static void restore_current_thread ( ptid_t ptid, int print )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>thread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_inlined_subroutine_print_frames()  :  inlining.c
<item>get_current_frame()  :  frame.c
<item>print_stack_frame()  :  stack.c
<item>ptid_equal()  :  infrun.c
<item>switch_to_thread()  :  thread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_restore_current_thread_cleanup()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function thread_alive()

<p><tt>static int thread_alive ( struct thread_info* tp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>thread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>pid_to_ptid()  :  infrun.c
<item>ptid_get_pid()  :  infrun.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_captured_thread_select()  :  thread.c
<item>prune_threads()  :  thread.c
<item>thread_apply_all_command()  :  thread.c
<item>thread_apply_command()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function thread_apply_all_command()

<p><tt>static void thread_apply_all_command ( const char* cmd, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>thread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_restore_current_thread()  :  thread.c
<item>printf_filtered()  :  utils.c
<item>switch_to_thread()  :  thread.c
<item>thread_alive()  :  thread.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), safe_execute_command(), xstrdup()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_thread()  :  thread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>inferior_ptid  :  infcmd.c
<item>thread_list  :  thread.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function thread_apply_command()

<p><tt>static void thread_apply_command ( const char* tidlist, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>thread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>execute_command()  :  top.c
<item>find_thread_id()  :  thread.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_restore_current_thread()  :  thread.c
<item>printf_filtered()  :  utils.c
<item>switch_to_thread()  :  thread.c
<item>thread_alive()  :  thread.c
<item>warning()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), isalpha(), strtol(), xstrdup()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_thread()  :  thread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function thread_command()

<p><tt>static void thread_command ( const char* tidstr, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>thread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>gdb_thread_select()  :  thread.c
<item>pid_to_thread_id()  :  thread.c
<item>printf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_thread()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>inferior_ptid  :  infcmd.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

</article>
