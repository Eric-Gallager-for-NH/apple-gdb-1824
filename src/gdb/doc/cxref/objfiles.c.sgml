<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF objfiles.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for objfiles.c of gdb.cxref.
<author>cxref

<sect>File objfiles.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb-stabs.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;bcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;mdebugread.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/coff/sym.h&quot;</tt>
<item><tt>#include &quot;../include/coff/symconst.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_stat.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;sys/stat.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;fcntl.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;buildsym.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/hashtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;varobj.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;dictionary.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;objc-lang.h&quot;</tt>
<itemize>
<item><tt>#include &lt;Availability.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;macosx/macosx-nat-inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-nat-threads.h&quot;</tt>
<itemize>
<item><tt>#include &lt;pthread.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-sigthread.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-mutils.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;target.h&quot;</tt>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<item><tt>#include &quot;target.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-utils.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
</itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-threads.h&quot;</tt>
<item><tt>#include &lt;sys/wait.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-excthread.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-mutils.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-threads.h&quot;</tt>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;mach/thread_status.h&gt;</tt>
<item><tt>#include &lt;sys/wait.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-dyld.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-mutils.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-threads.h&quot;</tt>
<item><tt>#include &lt;mach/machine.h&gt;</tt>
<item><tt>#include &lt;mach-o/loader.h&gt;</tt>
<item><tt>#include &quot;macosx/macosx-nat-dyld-info.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/machine.h&gt;</tt>
<item><tt>#include &lt;mach-o/loader.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-dyld-path.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-dyld-info.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;target.h&quot;</tt>
<item><tt>#include &quot;checkpoint.h&quot;</tt>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;db-access-functions.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
<item><tt>#include &quot;objfiles.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;macosx/macosx-nat-dyld.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/mach-o.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &lt;mach-o/loader.h&gt;</tt>
</itemize>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define TARGET_KEEP_SECTION( ASECT )</tt><newline>
<p>
<tt>#define ORDERED_SECTIONS_CHUNK_SIZE 3000</tt><newline>
<p>
<tt>#define STATIC_DELETE_LIST_SIZE 256</tt><newline>
<p>
<tt>#define STATIC_INSERT_LIST_SIZE 256</tt><newline>
<p>
<tt>#define HITLIST_INITIAL_MAX_ELEM 1</tt><newline>
<p>
<tt>#define MSYMBOL_THUMB_FUNCTION 0x80000000</tt><newline>

<sect1>Type struct ordered_obj_section

<p>
<itemize>
<item><tt>struct ordered_obj_section</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct obj_section* obj_section;</tt><newline>
<item><tt>struct bfd_section* the_bfd_section;</tt><newline>
<item><tt>CORE_ADDR addr;</tt><newline>
<item><tt>CORE_ADDR endaddr;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct obj_section_with_index

<p>
<itemize>
<item><tt>struct obj_section_with_index</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int index;</tt><newline>
<item><tt>struct obj_section* section;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct swap_objfile_list_cleanup

<p>
<itemize>
<item><tt>struct swap_objfile_list_cleanup</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct objfile_list* old_list;</tt><newline>
<item><tt>int restrict_state;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct objfile_data

<p>
<itemize>
<item><tt>struct objfile_data</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>unsigned int index;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct objfile_data_registration

<p>
<itemize>
<item><tt>struct objfile_data_registration</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct objfile_data* data;</tt><newline>
<item><tt>struct objfile_data_registration* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct objfile_data_registry

<p>
<itemize>
<item><tt>struct objfile_data_registry</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct objfile_data_registration* registrations;</tt><newline>
<item><tt>unsigned num_registrations;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct objfile_hitlist

<p>
<itemize>
<item><tt>struct objfile_hitlist</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int num_elem;</tt><newline>
<item><tt>struct objfile* ofiles[];</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable current_objfile

<p>
<tt>struct objfile* current_objfile</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bcache.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>charset.c
<item>cli-out.c
<item>coff-pe-read.c
<item>coffread.c
<item>complaints.c
<item>completer.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>demangle.c
<item>dictionary.c
<item>disasm.c
<item>doublest.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>environ.c
<item>eval.c
<item>event-loop.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>interps.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod-cisco.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macrocmd.c
<item>macroexp.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>observer.c
<item>osabi.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>reggroups.c
<item>remote-fileio.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>ser-base.c
<item>ser-unix.c
<item>serial.c
<item>solib-null.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>ui-file.c
<item>ui-out.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>add_new_header_file()  :  dbxread.c
<item>add_old_header_file()  :  dbxread.c
<item>add_pending()  :  mdebugread.c
<item>alloc_utype()  :  dwarfread.c
<item>coff_alloc_type()  :  coffread.c
<item>coff_read_enum_type()  :  coffread.c
<item>coff_read_struct_type()  :  coffread.c
<item>coff_symtab_read()  :  coffread.c
<item>cross_ref()  :  mdebugread.c
<item>dbx_lookup_type()  :  stabsread.c
<item>decode_array_element_type()  :  dwarfread.c
<item>decode_base_type()  :  coffread.c
<item>decode_die_type()  :  dwarfread.c
<item>decode_fund_type()  :  dwarfread.c
<item>decode_line_numbers()  :  dwarfread.c
<item>decode_mod_fund_type()  :  dwarfread.c
<item>decode_mod_u_d_type()  :  dwarfread.c
<item>decode_modified_type()  :  dwarfread.c
<item>decode_subscript_data_item()  :  dwarfread.c
<item>decode_type()  :  coffread.c
<item>dwarf_build_psymtabs()  :  dwarfread.c
<item>dwarf_read_array_type()  :  dwarfread.c
<item>locval()  :  dwarfread.c
<item>new_symbol()  :  mdebugread.c
<item>new_type()  :  mdebugread.c
<item>parse_symbol()  :  mdebugread.c
<item>parse_type()  :  mdebugread.c
<item>process_coff_symbol()  :  coffread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
<item>read_ofile_symtab()  :  dwarfread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
<item>read_tag_string_type()  :  dwarfread.c
</itemize>
</descrip>

<sect1>Global Variable symfile_objfile

<p>
<tt>struct objfile* symfile_objfile</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-namespace.c
<item>cp-support.c
<item>dbxread.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>f-exp.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>linespec.c
<item>m2-exp.c
<item>macrotab.c
<item>maint.c
<item>mdebugread.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>printcmd.c
<item>remote.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>tramp-frame.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>add_symbol_file_from_memory_command()  :  symfile-mem.c
<item>addr_inside_main_func()  :  blockframe.c
<item>entry_point_address()  :  objfiles.c
<item>get_offsets()  :  remote.c
<item>get_symbol_leading_char()  :  minsyms.c
<item>new_symfile_objfile()  :  symfile.c
<item>remote_macosx_complete_create_or_attach()  :  remote.c
<item>remote_macosx_open()  :  remote.c
<item>remote_open_1()  :  remote.c
<item>reread_symbols_for_objfile()  :  symfile.c
<item>scan_file_globals()  :  stabsread.c
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
<item>symbol_file_clear()  :  symfile.c
<item>syms_from_objfile()  :  symfile.c
<item>target_info()  :  target/target.c
<item>update_solib_list()  :  solib.c
</itemize>
</descrip>

<sect1>Global Variable rt_common_objfile

<p>
<tt>struct objfile* rt_common_objfile</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-namespace.c
<item>cp-support.c
<item>dbxread.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>f-exp.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>linespec.c
<item>m2-exp.c
<item>macrotab.c
<item>maint.c
<item>mdebugread.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>printcmd.c
<item>remote.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>tramp-frame.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>free_objfile_internal()  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Variable object_files

<p>
<tt>struct objfile* object_files</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-namespace.c
<item>cp-support.c
<item>dbxread.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>f-exp.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>linespec.c
<item>m2-exp.c
<item>macrotab.c
<item>maint.c
<item>mdebugread.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>printcmd.c
<item>remote.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>tramp-frame.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>link_objfile()  :  objfiles.c
<item>lookup_minimal_symbol_by_pc_section()  :  minsyms.c
<item>lookup_minimal_symbol_solib_trampoline()  :  minsyms.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_to_front()  :  objfiles.c
<item>put_objfile_before()  :  objfiles.c
<item>unlink_objfile()  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Variable objfile_list

<p>
<tt>struct objfile_list* objfile_list</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-namespace.c
<item>cp-support.c
<item>dbxread.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>f-exp.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>linespec.c
<item>m2-exp.c
<item>macrotab.c
<item>maint.c
<item>mdebugread.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>printcmd.c
<item>remote.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>tramp-frame.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>do_cleanup_restrict_to_objfile()  :  objfiles.c
<item>make_cleanup_restrict_to_objfile()  :  objfiles.c
<item>make_cleanup_restrict_to_objfile_by_name()  :  objfiles.c
<item>objfile_add_to_restrict_list()  :  objfiles.c
<item>objfile_clear_restrict_list()  :  objfiles.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>objfile_remove_from_restrict_list()  :  objfiles.c
<item>objfile_set_restrict_list()  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Variable mapped_symbol_files

<p>
<tt>int mapped_symbol_files</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>objfiles.c
</itemize>
</descrip>

<sect1>Global Variable use_mapped_symbol_files

<p>
<tt>int use_mapped_symbol_files</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>objfiles.c
</itemize>
</descrip>

<sect1>External Variables

<p>
<bf>setshliblist</bf><newline>
<tt>extern struct cmd_list_element* setshliblist</tt><newline>
<p>
<bf>showshliblist</bf><newline>
<tt>extern struct cmd_list_element* showshliblist</tt><newline>
<p>
<bf>infoshliblist</bf><newline>
<tt>extern struct cmd_list_element* infoshliblist</tt><newline>
<p>
<bf>shliblist</bf><newline>
<tt>extern struct cmd_list_element* shliblist</tt><newline>

<sect1>Local Variables

<p>
<bf>cached_symfile_path</bf><newline>
<tt>static char* cached_symfile_path</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_objfiles()
</itemize>
</descrip>
<p>
<bf>ordered_sections</bf><newline>
<tt>static struct ordered_obj_section* ordered_sections</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>find_in_ordered_sections_index()
<item>find_pc_sect_in_ordered_sections()
<item>get_insert_index_in_ordered_sections()
<item>objfile_add_to_ordered_sections()
<item>objfile_delete_from_ordered_sections()
</itemize>
</descrip>
<p>
<bf>num_ordered_sections</bf><newline>
<tt>static int num_ordered_sections</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>find_in_ordered_sections_index()
<item>get_insert_index_in_ordered_sections()
<item>objfile_add_to_ordered_sections()
<item>objfile_delete_from_ordered_sections()
</itemize>
</descrip>
<p>
<bf>max_num_ordered_sections</bf><newline>
<tt>static int max_num_ordered_sections</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>objfile_add_to_ordered_sections()
</itemize>
</descrip>
<p>
<bf>objfile_list_ptr</bf><newline>
<tt>static struct objfile_list* objfile_list_ptr</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>objfile_get_first()
<item>objfile_get_next()
</itemize>
</descrip>
<p>
<bf>restrict_search</bf><newline>
<tt>static int restrict_search</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>objfile_get_first()
<item>objfile_get_next()
<item>objfile_restrict_search()
</itemize>
</descrip>
<p>
<bf>should_auto_raise_load_state</bf><newline>
<tt>static int should_auto_raise_load_state</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_objfiles()
<item>objfile_name_set_load_state()
<item>objfile_set_load_state()
<item>pc_set_load_state()
</itemize>
</descrip>
<p>
<bf>objfile_data_registry</bf><newline>
<tt>static struct objfile_data_registry objfile_data_registry</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>get_objfile_registry_num_registrations()
<item>objfile_alloc_data()
<item>register_objfile_data()
</itemize>
</descrip>
<p>
<bf>cur_objfile_hitlist</bf><newline>
<tt>static struct objfile_hitlist* cur_objfile_hitlist</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>objfile_add_to_hitlist()
<item>objfile_detach_hitlist()
<item>objfile_init_hitlist()
</itemize>
</descrip>
<p>
<bf>hitlist_max_elem</bf><newline>
<tt>static int hitlist_max_elem</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>objfile_add_to_hitlist()
<item>objfile_detach_hitlist()
<item>objfile_init_hitlist()
</itemize>
</descrip>

<sect1>Global Function _initialize_objfiles()

<p><tt>void _initialize_objfiles ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_setshow_boolean_cmd(), xstrdup()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cached_symfile_path  :  objfiles.c
<item>should_auto_raise_load_state  :  objfiles.c
<item>setlist, showlist
</itemize>
</descrip>

<sect1>Global Function allocate_objfile()

<p><tt>struct objfile* allocate_objfile ( bfd* abfd, int flags, int symflags, CORE_ADDR mapaddr, const char* prefix )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_objfile_internal()  :  objfiles.c
<item>create_objfile()  :  objfiles.c
<item>link_objfile()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_dynamics_objfile()  :  jv-lang.c
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function allocate_objfile_using_objfile()

<p><tt>struct objfile* allocate_objfile_using_objfile ( struct objfile* objfile, bfd* abfd, int flags, int symflags, CORE_ADDR mapaddr, const char* prefix )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_objfile_internal()  :  objfiles.c
<item>create_objfile_using_objfile()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function build_objfile_section_table()

<p><tt>int build_objfile_section_table ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objfile_add_to_ordered_sections()  :  objfiles.c
<item>objfile_keeps_section()  :  objfiles.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>allocate_objfile_internal()  :  objfiles.c
<item>reread_symbols_for_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function clear_objfile()

<p><tt>void clear_objfile ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_objfile()  :  objfiles.c
<item>free_objfile_internal()  :  objfiles.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>clear_objfile()  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function clear_objfile_data()

<p><tt>void clear_objfile_data ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>reread_symbols_for_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function clear_restrict_list()

<p><tt>void clear_restrict_list ( struct objfile_list** requested_list_head )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_cleanup_restrict_to_shlib()  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function create_objfile()

<p><tt>struct objfile* create_objfile ( bfd* abfd )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_objfile_using_objfile()  :  objfiles.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>allocate_objfile()  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function create_objfile_using_objfile()

<p><tt>struct objfile* create_objfile_using_objfile ( struct objfile* objfile, bfd* abfd )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bcache_specify_allocation()  :  bcache.c
<item>bcache_xmalloc()  :  bcache.c
<item>objfile_alloc_data()  :  objfiles.c
<item>_obstack_begin()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>allocate_objfile_using_objfile()  :  objfiles.c
<item>create_objfile()  :  objfiles.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
</descrip>

<sect1>Global Function do_cleanup_restrict_to_objfile()

<p><tt>void do_cleanup_restrict_to_objfile ( void* arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objfile_clear_restrict_list()  :  objfiles.c
<item>objfile_restrict_search()  :  objfiles.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_restrict_to_objfile()  :  objfiles.c
<item>make_cleanup_restrict_to_objfile_by_name()  :  objfiles.c
<item>make_cleanup_restrict_to_objfile_list()  :  objfiles.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>objfile_list  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function entry_point_address()

<p><tt>CORE_ADDR entry_point_address ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
<item>inside_entry_func()  :  frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_objfile  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function executable_objfile()

<p><tt>struct objfile* executable_objfile ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>append_psymbols_as_msymbols()  :  symfile.c
<item>breakpoints_relocate()  :  breakpoint.c
<item>coff_end_symtab()  :  coffread.c
<item>coff_symtab_read()  :  coffread.c
<item>cs_to_section()  :  coffread.c
<item>define_symbol()  :  stabsread.c
<item>elf_symtab_read()  :  elfread.c
<item>find_libobjc_objfile()  :  objc-lang.c
<item>get_offsets()  :  remote.c
<item>inlined_subroutine_objfile_relocate()  :  inlining.c
<item>objfile_bss_section_offset()  :  objfiles.c
<item>objfile_data_section_offset()  :  objfiles.c
<item>objfile_relocate()  :  objfiles.c
<item>objfile_rodata_section_offset()  :  objfiles.c
<item>objfile_section_offset()  :  objfiles.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>parse_partial_symbols()  :  mdebugread.c
<item>parse_symbol()  :  mdebugread.c
<item>prim_record_minimal_symbol()  :  minsyms.c
<item>process_full_comp_unit()  :  dwarf2read.c
<item>process_one_symbol()  :  dbxread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
<item>read_alphacoff_dynamic_symtab()  :  mipsread.c
<item>read_dbx_symtab()  :  dbxread.c
<item>read_ofile_symtab()  :  dbxread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
<item>record_minimal_symbol()  :  mdebugread.c
</itemize>
</descrip>

<sect1>Global Function find_objfile_by_name()

<p><tt>struct objfile* find_objfile_by_name ( const char* name, int exact )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>objfile_matches_name()  :  objfiles.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), strchr(), strcmp(), strlen(), strncmp(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_libobjc_objfile()  :  objc-lang.c
<item>make_cleanup_restrict_to_objfile_by_name()  :  objfiles.c
<item>resolve_pending_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function find_objfile_by_uuid()

<p><tt>struct objfile* find_objfile_by_uuid ( uuid_t uuid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>bfd_mach_o_get_uuid(), memcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_kext_loadaddrs_from_kernel()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function find_pc_sect_in_ordered_sections()

<p><tt>struct obj_section* find_pc_sect_in_ordered_sections ( CORE_ADDR addr, struct bfd_section* bfd_section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_in_ordered_sections_index()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>build_address_symbolic()  :  printcmd.c
<item>find_pc_sect_section()  :  objfiles.c
<item>lookup_minimal_symbol_by_pc_section()  :  minsyms.c
<item>memory_xfer_partial()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ordered_sections  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function find_pc_sect_section()

<p><tt>struct obj_section* find_pc_sect_section ( CORE_ADDR pc, struct bfd_section* section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_sect_in_ordered_sections()  :  objfiles.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>addr_inside_main_func()  :  blockframe.c
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>find_equivalent_msymbol()  :  symmisc.c
<item>find_pc_partial_function_impl()  :  blockframe.c
<item>find_pc_section()  :  objfiles.c
<item>print_inlined_frames_lite()  :  inlining.c
<item>set_bp_objfile()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cached_mapped_section  :  symtab.c
<item>cached_sect_section  :  symtab.c
<item>last_mapped_section_lookup_pc  :  symtab.c
<item>last_sect_section_lookup_pc  :  symtab.c
</itemize>
</descrip>

<sect1>Global Function find_pc_section()

<p><tt>struct obj_section* find_pc_section ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_mapped_section()  :  symfile.c
<item>find_pc_sect_section()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>find_pc_partial_function_impl()  :  blockframe.c
<item>func_sym_is_inlined_function()  :  inlining.c
<item>get_pc_function_start()  :  blockframe.c
<item>in_plt_section()  :  objfiles.c
<item>lookup_minimal_symbol_by_pc_section()  :  minsyms.c
<item>objfile_relocate()  :  objfiles.c
<item>pc_set_load_state()  :  objfiles.c
<item>set_bp_objfile()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function free_all_objfiles()

<p><tt>void free_all_objfiles ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_symtab_users()  :  symfile.c
<item>free_objfile()  :  objfiles.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function free_objfile()

<p><tt>void free_objfile ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_objfile()  :  objfiles.c
<item>free_objfile_internal()  :  objfiles.c
<item>tell_breakpoints_objfile_removed()  :  breakpoint.c
<item>unlink_objfile()  :  objfiles.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_free_objfile_cleanup()  :  objfiles.c
<item>free_all_objfiles()  :  objfiles.c
<item>free_objfile()  :  objfiles.c
<item>java_rerun_cleanup()  :  jv-lang.c
<item>remove_symbol_file_command()  :  symfile.c
<item>reread_separate_symbols()  :  symfile.c
<item>reread_symbols_for_objfile()  :  symfile.c
<item>symbol_file_clear()  :  symfile.c
<item>syms_from_objfile()  :  symfile.c
<item>update_solib_list()  :  solib.c
</itemize>
</descrip>

<sect1>Global Function get_objfile_data()

<p><tt>void* get_objfile_data ( struct objfile* objfile, const struct objfile_data* data )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_fde()  :  dwarf2-frame.c
<item>dwarf2_frame_find_fde()  :  dwarf2-frame.c
<item>dwarf2_kext_psymtab_to_symtab()  :  dwarf2read.c
<item>dwarf2_psymtab_to_symtab()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function get_objfile_registry_num_registrations()

<p><tt>unsigned int get_objfile_registry_num_registrations ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>build_dummy_objfile()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>objfile_data_registry  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function have_full_symbols()

<p><tt>int have_full_symbols ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>decode_all_variables()  :  linespec.c
<item>decode_variable()  :  linespec.c
<item>f_parse()  :  f-exp.c
<item>m2_parse()  :  m2-exp.c
<item>make_source_files_completion_list()  :  symtab.c
<item>name_lookup()  :  ada-exp.c
<item>objc_parse()  :  objc-exp.c
<item>pascal_parse()  :  p-exp.c
<item>push_expression_name()  :  jv-exp.c
<item>set_default_source_symtab_and_line()  :  source.c
<item>sources_info()  :  symtab.c
<item>symtab_from_filename()  :  linespec.c
</itemize>
</descrip>

<sect1>Global Function have_minimal_symbols()

<p><tt>int have_minimal_symbols ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_all_variables()  :  linespec.c
<item>decode_variable()  :  linespec.c
<item>start_command()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function have_partial_symbols()

<p><tt>int have_partial_symbols ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>decode_all_variables()  :  linespec.c
<item>decode_variable()  :  linespec.c
<item>f_parse()  :  f-exp.c
<item>m2_parse()  :  m2-exp.c
<item>make_source_files_completion_list()  :  symtab.c
<item>name_lookup()  :  ada-exp.c
<item>objc_parse()  :  objc-exp.c
<item>pascal_parse()  :  p-exp.c
<item>push_expression_name()  :  jv-exp.c
<item>set_default_source_symtab_and_line()  :  source.c
<item>sources_info()  :  symtab.c
<item>symtab_from_filename()  :  linespec.c
</itemize>
</descrip>

<sect1>Global Function in_plt_section()

<p><tt>int in_plt_section ( CORE_ADDR pc, char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_section()  :  objfiles.c
<item>strcmp()
</itemize>
</descrip>

<sect1>Global Function init_entry_point_info()

<p><tt>void init_entry_point_info ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symfile_init()  :  coffread.c
<item>reread_symbols_for_objfile()  :  symfile.c
<item>syms_from_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function is_in_import_list()

<p><tt>int is_in_import_list ( char* name, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
</descrip>

<sect1>Global Function link_objfile()

<p><tt>void link_objfile ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>allocate_objfile()  :  objfiles.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>object_files  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_free_objfile()

<p><tt>struct cleanup* make_cleanup_free_objfile ( struct objfile* obj )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>reread_symbols_for_objfile()  :  symfile.c
<item>syms_from_objfile()  :  symfile.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_free_objfile_cleanup()  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_objfile_init_clear_hitlist()

<p><tt>struct cleanup* make_cleanup_objfile_init_clear_hitlist ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
<item>objfile_init_hitlist()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_create()  :  varobj.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>objfile_clear_hitlist()  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_restrict_to_objfile()

<p><tt>struct cleanup* make_cleanup_restrict_to_objfile ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
<item>objfile_add_to_restrict_list()  :  objfiles.c
<item>objfile_restrict_search()  :  objfiles.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_update()  :  breakpoint.c
<item>decode_all_digits()  :  linespec.c
<item>decode_all_digits_exhaustive()  :  linespec.c
<item>find_methods()  :  objc-lang.c
<item>make_cleanup_restrict_to_shlib()  :  objfiles.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_cleanup_restrict_to_objfile()  :  objfiles.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>objfile_list  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_restrict_to_objfile_by_name()

<p><tt>struct cleanup* make_cleanup_restrict_to_objfile_by_name ( char* objfile_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_objfile_by_name()  :  objfiles.c
<item>make_cleanup()  :  utils.c
<item>objfile_add_to_restrict_list()  :  objfiles.c
<item>objfile_restrict_search()  :  objfiles.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_re_set_one()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_cleanup_restrict_to_objfile()  :  objfiles.c
<item>null_cleanup()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>objfile_list  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_restrict_to_objfile_list()

<p><tt>struct cleanup* make_cleanup_restrict_to_objfile_list ( struct objfile_list* objlist )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
<item>objfile_restrict_search()  :  objfiles.c
<item>objfile_set_restrict_list()  :  objfiles.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_cleanup_restrict_to_shlib()  :  objfiles.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_cleanup_restrict_to_objfile()  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_restrict_to_shlib()

<p><tt>struct cleanup* make_cleanup_restrict_to_shlib ( char* requested_shlib )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_restrict_list()  :  objfiles.c
<item>make_cleanup_restrict_to_objfile()  :  objfiles.c
<item>make_cleanup_restrict_to_objfile_list()  :  objfiles.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>objfile_matches_name()  :  objfiles.c
<item>push_front_restrict_list()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>parse_breakpoint_sals()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function objfile_add_special_psym()

<p><tt>void objfile_add_special_psym ( struct objfile* objfile, struct partial_symbol* psym, int short isa_value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_partial_symbol()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function objfile_add_to_hitlist()

<p><tt>void objfile_add_to_hitlist ( struct objfile* ofile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>lookup_symbol_aux()  :  symtab.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cur_objfile_hitlist  :  objfiles.c
<item>hitlist_max_elem  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function objfile_add_to_ordered_sections()

<p><tt>void objfile_add_to_ordered_sections ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdb_check_fatal()  :  utils.c
<item>get_insert_index_in_ordered_sections()  :  objfiles.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>bcopy(), qsort()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>build_objfile_section_table()  :  objfiles.c
<item>objfile_relocate()  :  objfiles.c
<item>syms_from_objfile()  :  symfile.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>backward_section_compare()  :  objfiles.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>max_num_ordered_sections  :  objfiles.c
<item>num_ordered_sections  :  objfiles.c
<item>ordered_sections  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function objfile_add_to_restrict_list()

<p><tt>void objfile_add_to_restrict_list ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objfile_add_to_restrict_list()  :  objfiles.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_re_set()  :  breakpoint.c
<item>make_cleanup_restrict_to_objfile()  :  objfiles.c
<item>make_cleanup_restrict_to_objfile_by_name()  :  objfiles.c
<item>objfile_add_to_restrict_list()  :  objfiles.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>objfile_list  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function objfile_bss_section_offset()

<p><tt>CORE_ADDR objfile_bss_section_offset ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>executable_objfile()  :  objfiles.c
<item>internal_error()  :  utils.c
<item>objfile_section_offset()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_dbx_dynamic_symtab()  :  dbxread.c
<item>read_dbx_symtab()  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Function objfile_clear_restrict_list()

<p><tt>void objfile_clear_restrict_list ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_cleanup_restrict_to_objfile()  :  objfiles.c
<item>restrict_search_cleanup()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>objfile_list  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function objfile_data_section_offset()

<p><tt>CORE_ADDR objfile_data_section_offset ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>executable_objfile()  :  objfiles.c
<item>internal_error()  :  utils.c
<item>objfile_section_offset()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>convert_oso_map_to_final_map()  :  dwarf2read.c
<item>read_dbx_dynamic_symtab()  :  dbxread.c
<item>read_dbx_symtab()  :  dbxread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Function objfile_delete_from_ordered_sections()

<p><tt>void objfile_delete_from_ordered_sections ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_in_ordered_sections_index()  :  objfiles.c
<item>number_of_dots()  :  objfiles.c
<item>paddr_nz()  :  utils.c
<item>warning()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>bcopy(), qsort()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_objfile_internal()  :  objfiles.c
<item>objfile_relocate()  :  objfiles.c
<item>reread_symbols_for_objfile()  :  symfile.c
<item>syms_from_objfile()  :  symfile.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>forward_int_compare()  :  objfiles.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>num_ordered_sections  :  objfiles.c
<item>ordered_sections  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function objfile_detach_hitlist()

<p><tt>struct objfile_hitlist* objfile_detach_hitlist ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>objfile_clear_hitlist()  :  objfiles.c
<item>varobj_create()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cur_objfile_hitlist  :  objfiles.c
<item>hitlist_max_elem  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function objfile_get_first()

<p><tt>struct objfile* objfile_get_first ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_decode_symbol()  :  ada-lang.c
<item>ada_lookup_simple_minsym()  :  ada-lang.c
<item>ada_lookup_symbol()  :  ada-lang.c
<item>ada_lookup_symbol_list()  :  ada-lang.c
<item>basic_lookup_transparent_type()  :  symtab.c
<item>block_inlined_function()  :  inlining.c
<item>check_for_additional_inlined_breakpoint_locations()  :  inlining.c
<item>classes_info()  :  objc-lang.c
<item>dwarf2_frame_find_fde()  :  dwarf2-frame.c
<item>find_line_symtab()  :  symtab.c
<item>find_main_psymtab()  :  symtab.c
<item>find_methods()  :  objc-lang.c
<item>find_objfile()  :  symfile.c
<item>find_objfile_by_name()  :  objfiles.c
<item>find_objfile_by_uuid()  :  objfiles.c
<item>find_pc_mapped_section()  :  symfile.c
<item>find_pc_overlay()  :  symfile.c
<item>find_pc_sect_psymtab()  :  symtab.c
<item>find_pc_sect_section()  :  objfiles.c
<item>find_pc_sect_symtab()  :  symtab.c
<item>find_solib_trampoline_target()  :  minsyms.c
<item>forget_cached_source_info()  :  source.c
<item>free_all_objfiles()  :  objfiles.c
<item>gnu_v3_update_exception_catchpoints()  :  breakpoint.c
<item>have_full_symbols()  :  objfiles.c
<item>have_minimal_symbols()  :  objfiles.c
<item>have_partial_symbols()  :  objfiles.c
<item>link_objfile()  :  objfiles.c
<item>list_overlays_command()  :  symfile.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_minimal_symbol_all()  :  minsyms.c
<item>lookup_minimal_symbol_text()  :  minsyms.c
<item>lookup_partial_symtab()  :  symtab.c
<item>lookup_partial_symtab_all()  :  symtab.c
<item>lookup_possible_namespace_symbol()  :  cp-namespace.c
<item>lookup_symbol_aux_block()  :  symtab.c
<item>lookup_symbol_aux_psymtabs()  :  symtab.c
<item>lookup_symbol_aux_symtabs()  :  symtab.c
<item>lookup_symtab()  :  symtab.c
<item>lookup_symtab_all()  :  symtab.c
<item>maintenance_check_symtabs()  :  symmisc.c
<item>maintenance_cplus_namespace()  :  cp-namespace.c
<item>maintenance_info_psymtabs()  :  symmisc.c
<item>maintenance_info_sections()  :  maint.c
<item>maintenance_info_symtabs()  :  symmisc.c
<item>maintenance_print_msymbols()  :  symmisc.c
<item>maintenance_print_objfiles()  :  symmisc.c
<item>maintenance_print_psymbols()  :  symmisc.c
<item>maintenance_print_symbols()  :  symmisc.c
<item>maintenance_translate_address()  :  maint.c
<item>make_cleanup_restrict_to_shlib()  :  objfiles.c
<item>make_source_files_completion_list()  :  symtab.c
<item>make_symbol_completion_list()  :  symtab.c
<item>make_symbol_overload_list_qualified()  :  cp-support.c
<item>map_overlay_command()  :  symfile.c
<item>objfile_name_set_load_state()  :  objfiles.c
<item>objfile_purge_solibs()  :  objfiles.c
<item>overlay_invalidate_all()  :  symfile.c
<item>parse_breakpoint_sals()  :  breakpoint.c
<item>print_objfile_statistics()  :  symmisc.c
<item>print_symbol_bcache_statistics()  :  symmisc.c
<item>read_in_psymtabs()  :  cp-support.c
<item>reread_symbols()  :  symfile.c
<item>search_symbols()  :  symtab.c
<item>section_is_mapped()  :  symfile.c
<item>select_source_symtab()  :  source.c
<item>selectors_info()  :  objc-lang.c
<item>simple_overlay_update()  :  symfile.c
<item>sources_info()  :  symtab.c
<item>sym_info()  :  printcmd.c
<item>symbol_add_stub()  :  solib.c
<item>symtab_for_sym()  :  ada-lang.c
<item>unmap_overlay_command()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>object_files  :  objfiles.c
<item>objfile_list  :  objfiles.c
<item>objfile_list_ptr  :  objfiles.c
<item>restrict_search  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function objfile_get_next()

<p><tt>struct objfile* objfile_get_next ( struct objfile* in_objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_decode_symbol()  :  ada-lang.c
<item>ada_lookup_simple_minsym()  :  ada-lang.c
<item>ada_lookup_symbol()  :  ada-lang.c
<item>ada_lookup_symbol_list()  :  ada-lang.c
<item>basic_lookup_transparent_type()  :  symtab.c
<item>block_inlined_function()  :  inlining.c
<item>check_for_additional_inlined_breakpoint_locations()  :  inlining.c
<item>classes_info()  :  objc-lang.c
<item>dwarf2_frame_find_fde()  :  dwarf2-frame.c
<item>find_line_symtab()  :  symtab.c
<item>find_main_psymtab()  :  symtab.c
<item>find_methods()  :  objc-lang.c
<item>find_objfile()  :  symfile.c
<item>find_objfile_by_name()  :  objfiles.c
<item>find_objfile_by_uuid()  :  objfiles.c
<item>find_pc_mapped_section()  :  symfile.c
<item>find_pc_overlay()  :  symfile.c
<item>find_pc_sect_psymtab()  :  symtab.c
<item>find_pc_sect_section()  :  objfiles.c
<item>find_pc_sect_symtab()  :  symtab.c
<item>find_solib_trampoline_target()  :  minsyms.c
<item>forget_cached_source_info()  :  source.c
<item>free_all_objfiles()  :  objfiles.c
<item>gnu_v3_update_exception_catchpoints()  :  breakpoint.c
<item>have_full_symbols()  :  objfiles.c
<item>have_minimal_symbols()  :  objfiles.c
<item>have_partial_symbols()  :  objfiles.c
<item>link_objfile()  :  objfiles.c
<item>list_overlays_command()  :  symfile.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_minimal_symbol_all()  :  minsyms.c
<item>lookup_minimal_symbol_text()  :  minsyms.c
<item>lookup_partial_symtab()  :  symtab.c
<item>lookup_partial_symtab_all()  :  symtab.c
<item>lookup_possible_namespace_symbol()  :  cp-namespace.c
<item>lookup_symbol_aux_block()  :  symtab.c
<item>lookup_symbol_aux_psymtabs()  :  symtab.c
<item>lookup_symbol_aux_symtabs()  :  symtab.c
<item>lookup_symtab()  :  symtab.c
<item>lookup_symtab_all()  :  symtab.c
<item>maintenance_check_symtabs()  :  symmisc.c
<item>maintenance_cplus_namespace()  :  cp-namespace.c
<item>maintenance_info_psymtabs()  :  symmisc.c
<item>maintenance_info_sections()  :  maint.c
<item>maintenance_info_symtabs()  :  symmisc.c
<item>maintenance_print_msymbols()  :  symmisc.c
<item>maintenance_print_objfiles()  :  symmisc.c
<item>maintenance_print_psymbols()  :  symmisc.c
<item>maintenance_print_symbols()  :  symmisc.c
<item>maintenance_translate_address()  :  maint.c
<item>make_cleanup_restrict_to_shlib()  :  objfiles.c
<item>make_source_files_completion_list()  :  symtab.c
<item>make_symbol_completion_list()  :  symtab.c
<item>make_symbol_overload_list_qualified()  :  cp-support.c
<item>map_overlay_command()  :  symfile.c
<item>objfile_name_set_load_state()  :  objfiles.c
<item>objfile_purge_solibs()  :  objfiles.c
<item>overlay_invalidate_all()  :  symfile.c
<item>parse_breakpoint_sals()  :  breakpoint.c
<item>print_objfile_statistics()  :  symmisc.c
<item>print_symbol_bcache_statistics()  :  symmisc.c
<item>read_in_psymtabs()  :  cp-support.c
<item>reread_symbols()  :  symfile.c
<item>reread_symbols_for_objfile()  :  symfile.c
<item>search_symbols()  :  symtab.c
<item>section_is_mapped()  :  symfile.c
<item>select_source_symtab()  :  source.c
<item>selectors_info()  :  objc-lang.c
<item>simple_overlay_update()  :  symfile.c
<item>sources_info()  :  symtab.c
<item>sym_info()  :  printcmd.c
<item>symbol_add_stub()  :  solib.c
<item>symtab_for_sym()  :  ada-lang.c
<item>unmap_overlay_command()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>objfile_list  :  objfiles.c
<item>objfile_list_ptr  :  objfiles.c
<item>restrict_search  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function objfile_keeps_section()

<p><tt>int objfile_keeps_section ( bfd* abfd, asection* asect )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>build_objfile_section_table()  :  objfiles.c
<item>symbol_file_add_bfd_safe()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function objfile_matches_name()

<p><tt>enum objfile_matches_name_return objfile_matches_name ( struct objfile* objfile, const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bundle_basename()  :  utils.c
<item>lbasename(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_objfile_by_name()  :  objfiles.c
<item>make_cleanup_restrict_to_shlib()  :  objfiles.c
<item>objfile_name_set_load_state()  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function objfile_name_set_load_state()

<p><tt>int objfile_name_set_load_state ( const char* name, int load_state, int force )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>objfile_matches_name()  :  objfiles.c
<item>objfile_set_load_state()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_re_set_one()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>should_auto_raise_load_state  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function objfile_on_hitlist_p()

<p><tt>int objfile_on_hitlist_p ( struct objfile_hitlist* hitlist, struct objfile* ofile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_delete_objfiles_vars()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function objfile_purge_solibs()

<p><tt>void objfile_purge_solibs ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>no_shared_libraries()  :  solib.c
<item>run_command_1()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function objfile_relocate()

<p><tt>void objfile_relocate ( struct objfile* objfile, struct section_offsets* new_offsets )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_re_set()  :  breakpoint.c
<item>breakpoints_relocate()  :  breakpoint.c
<item>dict_iterator_first()  :  dictionary.c
<item>dict_iterator_next()  :  dictionary.c
<item>executable_objfile()  :  objfiles.c
<item>find_pc_section()  :  objfiles.c
<item>fixup_psymbol_section()  :  symtab.c
<item>fixup_symbol_section()  :  symtab.c
<item>inlined_subroutine_objfile_relocate()  :  inlining.c
<item>internal_error()  :  utils.c
<item>msymbols_sort()  :  minsyms.c
<item>objfile_add_to_ordered_sections()  :  objfiles.c
<item>objfile_delete_from_ordered_sections()  :  objfiles.c
<item>psymtab_get_first()  :  objfiles.c
<item>psymtab_get_next()  :  objfiles.c
<item>symtab_get_first()  :  objfiles.c
<item>symtab_get_next()  :  objfiles.c
<item>warning()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), qsort()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_offsets()  :  remote.c
<item>reread_symbols_for_objfile()  :  symfile.c
<item>slide_objfile()  :  objfiles.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>compare_line_numbers()  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function objfile_restrict_search()

<p><tt>int objfile_restrict_search ( int on )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_re_set_all()  :  breakpoint.c
<item>breakpoint_update()  :  breakpoint.c
<item>do_cleanup_restrict_to_objfile()  :  objfiles.c
<item>make_cleanup_restrict_to_objfile()  :  objfiles.c
<item>make_cleanup_restrict_to_objfile_by_name()  :  objfiles.c
<item>make_cleanup_restrict_to_objfile_list()  :  objfiles.c
<item>restrict_search_cleanup()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>restrict_search  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function objfile_rodata_section_offset()

<p><tt>CORE_ADDR objfile_rodata_section_offset ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>executable_objfile()  :  objfiles.c
<item>internal_error()  :  utils.c
<item>objfile_section_offset()  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function objfile_section_offset()

<p><tt>CORE_ADDR objfile_section_offset ( struct objfile* objfile, int sect_idx )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>executable_objfile()  :  objfiles.c
<item>internal_error()  :  utils.c
<item>bfd_mach_o_in_shared_cached_memory()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
<item>elf_symtab_read()  :  elfread.c
<item>execute_stack_op()  :  dwarf2expr.c
<item>fixup_section()  :  symtab.c
<item>nlm_symfile_read()  :  nlmread.c
<item>objfile_bss_section_offset()  :  objfiles.c
<item>objfile_data_section_offset()  :  objfiles.c
<item>objfile_rodata_section_offset()  :  objfiles.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>read_dbx_symtab()  :  dbxread.c
<item>syms_from_objfile()  :  symfile.c
<item>var_decode_location()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function objfile_set_load_state()

<p><tt>int objfile_set_load_state ( struct objfile* o, int load_state, int force )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dyld_objfile_set_load_state()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>objc_init_trampoline_observer()  :  objc-lang.c
<item>objfile_name_set_load_state()  :  objfiles.c
<item>parse_breakpoint_sals()  :  breakpoint.c
<item>pc_set_load_state()  :  objfiles.c
<item>search_symbols()  :  symtab.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>should_auto_raise_load_state  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function objfile_text_section_offset()

<p><tt>CORE_ADDR objfile_text_section_offset ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>executable_objfile()  :  objfiles.c
<item>internal_error()  :  utils.c
<item>objfile_section_offset()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_partial_symbol()  :  dwarf2read.c
<item>coff_symtab_read()  :  coffread.c
<item>convert_oso_map_to_final_map()  :  dwarf2read.c
<item>create_kext_addr_map()  :  dwarf2read.c
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
<item>dwarf2_frame_find_fde()  :  dwarf2-frame.c
<item>dwarf_decode_lines()  :  dwarf2read.c
<item>enter_linenos()  :  coffread.c
<item>find_location_expression()  :  dwarf2loc.c
<item>loclist_describe_location()  :  dwarf2loc.c
<item>new_symbol()  :  dwarf2read.c
<item>process_coff_symbol()  :  coffread.c
<item>process_full_comp_unit()  :  dwarf2read.c
<item>read_dbx_dynamic_symtab()  :  dbxread.c
<item>read_dbx_symtab()  :  dbxread.c
<item>read_file_scope()  :  dwarf2read.c
<item>read_func_scope()  :  dwarf2read.c
<item>read_inlined_subroutine_scope()  :  dwarf2read.c
<item>read_lexical_block_scope()  :  dwarf2read.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
<item>read_pe_exported_syms()  :  coff-pe-read.c
<item>scan_partial_inlined_function_symbols()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function objfile_to_front()

<p><tt>void objfile_to_front ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>object_files  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function partial_symbol_special_info()

<p><tt>char* partial_symbol_special_info ( struct objfile* objfile, struct partial_symbol* psym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bsearch()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>append_psymbols_as_msymbols()  :  symfile.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>compare_psymbol_ptrs()  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function pc_set_load_state()

<p><tt>int pc_set_load_state ( CORE_ADDR pc, int load_state, int force )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_section()  :  objfiles.c
<item>objfile_set_load_state()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>print_frame_info()  :  stack.c
<item>x86_frame_cache()  :  target/x86-shared-tdep.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>should_auto_raise_load_state  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function psymtab_get_first()

<p><tt>struct partial_symtab* psymtab_get_first ( struct objfile* objfile, int skip_obsolete )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol_list()  :  ada-lang.c
<item>basic_lookup_transparent_type()  :  symtab.c
<item>cashier_psymtab()  :  symfile.c
<item>dump_objfile()  :  symmisc.c
<item>end_psymtab()  :  dbxread.c
<item>find_main_psymtab()  :  symtab.c
<item>find_pc_sect_psymtab()  :  symtab.c
<item>forget_cached_source_info()  :  source.c
<item>lookup_partial_symtab()  :  symtab.c
<item>lookup_partial_symtab_all()  :  symtab.c
<item>lookup_symbol_aux_psymtabs()  :  symtab.c
<item>maintenance_check_symtabs()  :  symmisc.c
<item>maintenance_info_psymtabs()  :  symmisc.c
<item>maintenance_print_psymbols()  :  symmisc.c
<item>make_source_files_completion_list()  :  symtab.c
<item>make_symbol_completion_list()  :  symtab.c
<item>objfile_relocate()  :  objfiles.c
<item>parse_partial_symbols()  :  mdebugread.c
<item>print_objfile_statistics()  :  symmisc.c
<item>read_in_psymtabs()  :  cp-support.c
<item>replace_psymbols_with_correct_psymbols()  :  symfile.c
<item>search_symbols()  :  symtab.c
<item>select_source_symtab()  :  source.c
<item>sources_info()  :  symtab.c
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function psymtab_get_next()

<p><tt>struct partial_symtab* psymtab_get_next ( struct partial_symtab* ps, int skip_obsolete )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol_list()  :  ada-lang.c
<item>basic_lookup_transparent_type()  :  symtab.c
<item>cashier_psymtab()  :  symfile.c
<item>dump_objfile()  :  symmisc.c
<item>end_psymtab()  :  dbxread.c
<item>find_main_psymtab()  :  symtab.c
<item>find_pc_sect_psymtab()  :  symtab.c
<item>forget_cached_source_info()  :  source.c
<item>lookup_partial_symtab()  :  symtab.c
<item>lookup_partial_symtab_all()  :  symtab.c
<item>lookup_symbol_aux_psymtabs()  :  symtab.c
<item>maintenance_check_symtabs()  :  symmisc.c
<item>maintenance_info_psymtabs()  :  symmisc.c
<item>maintenance_print_psymbols()  :  symmisc.c
<item>make_source_files_completion_list()  :  symtab.c
<item>make_symbol_completion_list()  :  symtab.c
<item>objfile_relocate()  :  objfiles.c
<item>parse_partial_symbols()  :  mdebugread.c
<item>print_objfile_statistics()  :  symmisc.c
<item>read_in_psymtabs()  :  cp-support.c
<item>replace_psymbols_with_correct_psymbols()  :  symfile.c
<item>search_symbols()  :  symtab.c
<item>select_source_symtab()  :  source.c
<item>sources_info()  :  symtab.c
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function push_front_restrict_list()

<p><tt>void push_front_restrict_list ( struct objfile_list** requested_list_head, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_cleanup_restrict_to_shlib()  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function put_objfile_before()

<p><tt>void put_objfile_before ( struct objfile* objfile, struct objfile* before_this )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>unlink_objfile()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>reread_separate_symbols()  :  symfile.c
<item>symbol_file_add_with_addrs_or_offsets_using_objfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>object_files  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function register_objfile_data()

<p><tt>const struct objfile_data* register_objfile_data ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_dwarf2_frame()  :  dwarf2-frame.c
<item>_initialize_dwarf2_read()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>objfile_data_registry  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function separate_debug_objfile()

<p><tt>struct objfile* separate_debug_objfile ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
</descrip>

<sect1>Global Function set_objfile_data()

<p><tt>void set_objfile_data ( struct objfile* objfile, const struct objfile_data* data, void* value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_fde()  :  dwarf2-frame.c
<item>dwarf2_has_info_1()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function slide_objfile()

<p><tt>void slide_objfile ( struct objfile* objfile, CORE_ADDR slide, struct section_offsets* new_offsets )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>make_cleanup()  :  utils.c
<item>objfile_relocate()  :  objfiles.c
<item>printf_filtered()  :  utils.c
<item>tell_objc_msgsend_cacher_objfile_changed()  :  objc-lang.c
<item>xmalloc()  :  utils.c
<item>macho_calculate_offsets_for_dsym()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>null_cleanup()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>info_verbose  :  top.c
</itemize>
</descrip>

<sect1>Global Function sort_objfile_thumb_psyms()

<p><tt>void sort_objfile_thumb_psyms ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>qsort()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>compare_psymbol_ptrs()  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function symtab_get_first()

<p><tt>struct symtab* symtab_get_first ( struct objfile* objfile, int skip_obsolete )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol()  :  ada-lang.c
<item>ada_lookup_symbol_list()  :  ada-lang.c
<item>basic_lookup_transparent_type()  :  symtab.c
<item>coff_symtab_read()  :  coffread.c
<item>dump_objfile()  :  symmisc.c
<item>find_line_symtab()  :  symtab.c
<item>find_pc_sect_symtab()  :  symtab.c
<item>forget_cached_source_info()  :  source.c
<item>lookup_symbol_aux_block()  :  symtab.c
<item>lookup_symbol_aux_symtabs()  :  symtab.c
<item>lookup_symtab()  :  symtab.c
<item>lookup_symtab_all()  :  symtab.c
<item>maintenance_info_symtabs()  :  symmisc.c
<item>maintenance_print_symbols()  :  symmisc.c
<item>make_source_files_completion_list()  :  symtab.c
<item>make_symbol_completion_list()  :  symtab.c
<item>make_symbol_overload_list_qualified()  :  cp-support.c
<item>objfile_relocate()  :  objfiles.c
<item>print_objfile_statistics()  :  symmisc.c
<item>search_symbols()  :  symtab.c
<item>select_source_symtab()  :  source.c
<item>sources_info()  :  symtab.c
<item>symtab_for_sym()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function symtab_get_next()

<p><tt>struct symtab* symtab_get_next ( struct symtab* s, int skip_obsolete )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lookup_symbol()  :  ada-lang.c
<item>ada_lookup_symbol_list()  :  ada-lang.c
<item>basic_lookup_transparent_type()  :  symtab.c
<item>coff_symtab_read()  :  coffread.c
<item>dump_objfile()  :  symmisc.c
<item>find_line_symtab()  :  symtab.c
<item>find_pc_sect_symtab()  :  symtab.c
<item>forget_cached_source_info()  :  source.c
<item>lookup_symbol_aux_block()  :  symtab.c
<item>lookup_symbol_aux_symtabs()  :  symtab.c
<item>lookup_symtab()  :  symtab.c
<item>lookup_symtab_all()  :  symtab.c
<item>maintenance_info_symtabs()  :  symmisc.c
<item>maintenance_print_symbols()  :  symmisc.c
<item>make_source_files_completion_list()  :  symtab.c
<item>make_symbol_completion_list()  :  symtab.c
<item>make_symbol_overload_list_qualified()  :  cp-support.c
<item>objfile_relocate()  :  objfiles.c
<item>print_objfile_statistics()  :  symmisc.c
<item>search_symbols()  :  symtab.c
<item>select_source_symtab()  :  source.c
<item>sources_info()  :  symtab.c
<item>symtab_for_sym()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function terminate_minimal_symbol_table()

<p><tt>void terminate_minimal_symbol_table ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>symbol_init_language_specific()  :  symtab.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>reread_symbols_for_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function unlink_objfile()

<p><tt>void unlink_objfile ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_objfile()  :  objfiles.c
<item>put_objfile_before()  :  objfiles.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>object_files  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function allocate_objfile_internal()

<p><tt>static struct objfile* allocate_objfile_internal ( struct objfile* objfile, bfd* abfd, int flags, int symflags, CORE_ADDR mapaddr, const char* prefix )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>build_objfile_section_table()  :  objfiles.c
<item>error()  :  utils.c
<item>bfd_errmsg(), bfd_get_error(), bfd_get_mtime(), strstr(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>allocate_objfile()  :  objfiles.c
<item>allocate_objfile_using_objfile()  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function backward_section_compare()

<p><tt>static int backward_section_compare ( const void* left_ptr, const void* right_ptr )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>objfile_add_to_ordered_sections()  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function compare_psymbol_ptrs()

<p><tt>static int compare_psymbol_ptrs ( const void* s1p, const void* s2p )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>partial_symbol_special_info()  :  objfiles.c
<item>sort_objfile_thumb_psyms()  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function do_free_objfile_cleanup()

<p><tt>static void do_free_objfile_cleanup ( void* obj )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>free_objfile()  :  objfiles.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_free_objfile()  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function find_in_ordered_sections_index()

<p><tt>static int find_in_ordered_sections_index ( CORE_ADDR addr, struct bfd_section* bfd_section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_pc_sect_in_ordered_sections()  :  objfiles.c
<item>objfile_delete_from_ordered_sections()  :  objfiles.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>num_ordered_sections  :  objfiles.c
<item>ordered_sections  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function forward_int_compare()

<p><tt>static int forward_int_compare ( const void* left_ptr, const void* right_ptr )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>objfile_delete_from_ordered_sections()  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function free_objfile_internal()

<p><tt>static void free_objfile_internal ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>bcache_xfree()  :  bcache.c
<item>clear_pc_function_cache()  :  blockframe.c
<item>close_dwarf_repositories()  :  dwarf2read.c
<item>equivalence_table_delete()  :  symmisc.c
<item>inlined_subroutine_free_objfile_call_sites()  :  inlining.c
<item>inlined_subroutine_free_objfile_data()  :  inlining.c
<item>objfile_delete_from_ordered_sections()  :  objfiles.c
<item>objfile_free_data()  :  objfiles.c
<item>objfile_remove_from_restrict_list()  :  objfiles.c
<item>remove_target_sections()  :  target/target.c
<item>symtab_clear_cached_lookup_values()  :  symtab.c
<item>varobj_delete_objfiles_vars()  :  varobj.c
<item>warning()  :  utils.c
<item>xfree()  :  utils.c
<item>bfd_close(), bfd_errmsg(), bfd_get_error(), htab_delete()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>clear_objfile()  :  objfiles.c
<item>free_objfile()  :  objfiles.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>obstack_free()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>rt_common_objfile  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function get_insert_index_in_ordered_sections()

<p><tt>static int get_insert_index_in_ordered_sections ( struct obj_section* section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>objfile_add_to_ordered_sections()  :  objfiles.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>num_ordered_sections  :  objfiles.c
<item>ordered_sections  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function number_of_dots()

<p><tt>static int number_of_dots ( const char* s )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>objfile_delete_from_ordered_sections()  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function objfile_alloc_data()

<p><tt>static void objfile_alloc_data ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>xcalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_objfile_using_objfile()  :  objfiles.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>objfile_data_registry  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function objfile_clear_hitlist()

<p><tt>static void objfile_clear_hitlist ( void* notused )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>objfile_detach_hitlist()  :  objfiles.c
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_objfile_init_clear_hitlist()  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function objfile_free_data()

<p><tt>static void objfile_free_data ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_objfile_internal()  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function objfile_init_hitlist()

<p><tt>static void objfile_init_hitlist ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_cleanup_objfile_init_clear_hitlist()  :  objfiles.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cur_objfile_hitlist  :  objfiles.c
<item>hitlist_max_elem  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function objfile_remove_from_restrict_list()

<p><tt>static void objfile_remove_from_restrict_list ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>objfiles.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_objfile_internal()  :  objfiles.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>objfile_list  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function objfile_set_restrict_list()

<p><tt>static struct objfile_list* objfile_set_restrict_list ( struct objfile_list* objlist )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>make_cleanup_restrict_to_objfile_list()  :  objfiles.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>objfile_list  :  objfiles.c
</itemize>
</descrip>

</article>
