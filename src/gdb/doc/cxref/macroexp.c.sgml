<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF macroexp.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for macroexp.c of gdb.cxref.
<author>cxref

<sect>File macroexp.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;bcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;macrotab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;macroexp.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>

<sect1>Type struct macro_buffer

<p>
<itemize>
<item><tt>struct macro_buffer</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>char* text;</tt><newline>
<item><tt>size_t len;</tt><newline>
<item><tt>int size;</tt><newline>
<item><tt>int shared;</tt><newline>
<item><tt>int last_token;</tt><newline>
<item><tt>int is_identifier;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct macro_name_list

<p>
<itemize>
<item><tt>struct macro_name_list</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const char* name;</tt><newline>
<item><tt>struct macro_name_list* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Function macro_expand()

<p><tt>char* macro_expand ( const char* source, macro_lookup_ftype* lookup_func, void* lookup_func_baton )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>macroexp.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>appendc()  :  macroexp.c
<item>discard_cleanups()  :  utils.c
<item>init_buffer()  :  macroexp.c
<item>init_shared_buffer()  :  macroexp.c
<item>make_cleanup()  :  utils.c
<item>scan()  :  macroexp.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>macro_expand_command()  :  macrocmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>cleanup_macro_buffer()  :  macroexp.c
</itemize>
</descrip>

<sect1>Global Function macro_expand_next()

<p><tt>char* macro_expand_next ( const char** lexptr, macro_lookup_ftype* lookup_func, void* lookup_baton )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>macroexp.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>appendc()  :  macroexp.c
<item>discard_cleanups()  :  utils.c
<item>do_cleanups()  :  utils.c
<item>get_token()  :  macroexp.c
<item>init_buffer()  :  macroexp.c
<item>init_shared_buffer()  :  macroexp.c
<item>make_cleanup()  :  utils.c
<item>maybe_expand()  :  macroexp.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>cleanup_macro_buffer()  :  macroexp.c
</itemize>
</descrip>

<sect1>Global Function macro_expand_once()

<p><tt>char* macro_expand_once ( const char* source, macro_lookup_ftype* lookup_func, void* lookup_func_baton )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>macroexp.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>macro_expand_once_command()  :  macrocmd.c
</itemize>
</descrip>

<sect1>Local Function append_tokens_without_splicing()

<p><tt>static void append_tokens_without_splicing ( struct macro_buffer* dest, struct macro_buffer* src )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>appendc()  :  macroexp.c
<item>appendmem()  :  macroexp.c
<item>get_token()  :  macroexp.c
<item>init_shared_buffer()  :  macroexp.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>scan()  :  macroexp.c
<item>substitute_args()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function appendc()

<p><tt>static void appendc ( struct macro_buffer* b, int c )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>resize_buffer()  :  macroexp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>append_tokens_without_splicing()  :  macroexp.c
<item>macro_expand()  :  macroexp.c
<item>macro_expand_next()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function appendmem()

<p><tt>static void appendmem ( struct macro_buffer* b, char* addr, int len )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>resize_buffer()  :  macroexp.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>append_tokens_without_splicing()  :  macroexp.c
<item>scan()  :  macroexp.c
<item>substitute_args()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function cleanup_macro_buffer()

<p><tt>static void cleanup_macro_buffer ( void* untyped_buf )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>free_buffer()  :  macroexp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>expand()  :  macroexp.c
<item>macro_expand()  :  macroexp.c
<item>macro_expand_next()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function currently_rescanning()

<p><tt>static int currently_rescanning ( struct macro_name_list* list, const char* name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>maybe_expand()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function expand()

<p><tt>static int expand ( const char* id, struct macro_definition* def, struct macro_buffer* dest, struct macro_buffer* src, struct macro_name_list* no_loop, macro_lookup_ftype* lookup_func, void* lookup_baton )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>gather_arguments()  :  macroexp.c
<item>init_buffer()  :  macroexp.c
<item>init_shared_buffer()  :  macroexp.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>scan()  :  macroexp.c
<item>substitute_args()  :  macroexp.c
<item>strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>maybe_expand()  :  macroexp.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>cleanup_macro_buffer()  :  macroexp.c
<item>free_current_contents()  :  utils.c
<item>null_cleanup()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function free_buffer()

<p><tt>static void free_buffer ( struct macro_buffer* b )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cleanup_macro_buffer()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function gather_arguments()

<p><tt>static struct macro_buffer* gather_arguments ( const char* name, struct macro_buffer* src, int* argc_p )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>discard_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>get_token()  :  macroexp.c
<item>init_shared_buffer()  :  macroexp.c
<item>make_cleanup()  :  utils.c
<item>set_token()  :  macroexp.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>expand()  :  macroexp.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function get_character_constant()

<p><tt>static int get_character_constant ( struct macro_buffer* tok, const char* p, char* end )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>internal_error()  :  utils.c
<item>parse_escape()  :  cp-name-parser.c
<item>set_token()  :  macroexp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_token()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function get_comment()

<p><tt>static int get_comment ( struct macro_buffer* tok, char* p, char* end )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>set_token()  :  macroexp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_token()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function get_identifier()

<p><tt>static int get_identifier ( struct macro_buffer* tok, char* p, char* end )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>is_digit()  :  macroexp.c
<item>is_identifier_nondigit()  :  macroexp.c
<item>set_token()  :  macroexp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_token()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function get_pp_number()

<p><tt>static int get_pp_number ( struct macro_buffer* tok, char* p, char* end )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>is_digit()  :  macroexp.c
<item>is_identifier_nondigit()  :  macroexp.c
<item>set_token()  :  macroexp.c
<item>strchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_token()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function get_punctuator()

<p><tt>static int get_punctuator ( struct macro_buffer* tok, char* p, char* end )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>set_token()  :  macroexp.c
<item>memcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_token()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function get_string_literal()

<p><tt>static int get_string_literal ( struct macro_buffer* tok, const char* p, char* end )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>internal_error()  :  utils.c
<item>parse_escape()  :  cp-name-parser.c
<item>set_token()  :  macroexp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_token()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function get_token()

<p><tt>static int get_token ( struct macro_buffer* tok, struct macro_buffer* src )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>get_character_constant()  :  macroexp.c
<item>get_comment()  :  macroexp.c
<item>get_identifier()  :  macroexp.c
<item>get_pp_number()  :  macroexp.c
<item>get_punctuator()  :  macroexp.c
<item>get_string_literal()  :  macroexp.c
<item>internal_error()  :  utils.c
<item>is_whitespace()  :  macroexp.c
<item>set_token()  :  macroexp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>append_tokens_without_splicing()  :  macroexp.c
<item>gather_arguments()  :  macroexp.c
<item>macro_expand_next()  :  macroexp.c
<item>scan()  :  macroexp.c
<item>substitute_args()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function init_buffer()

<p><tt>static void init_buffer ( struct macro_buffer* b, int n )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>expand()  :  macroexp.c
<item>macro_expand()  :  macroexp.c
<item>macro_expand_next()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function init_shared_buffer()

<p><tt>static void init_shared_buffer ( struct macro_buffer* buf, const char* addr, int len )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>append_tokens_without_splicing()  :  macroexp.c
<item>expand()  :  macroexp.c
<item>gather_arguments()  :  macroexp.c
<item>macro_expand()  :  macroexp.c
<item>macro_expand_next()  :  macroexp.c
<item>set_token()  :  macroexp.c
<item>substitute_args()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function is_digit()

<p><tt>static int is_digit ( int c )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>get_identifier()  :  macroexp.c
<item>get_pp_number()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function is_identifier_nondigit()

<p><tt>static int is_identifier_nondigit ( int c )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>get_identifier()  :  macroexp.c
<item>get_pp_number()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function is_whitespace()

<p><tt>static int is_whitespace ( int c )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>get_token()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function maybe_expand()

<p><tt>static int maybe_expand ( struct macro_buffer* dest, struct macro_buffer* src_first, struct macro_buffer* src_rest, struct macro_name_list* no_loop, macro_lookup_ftype* lookup_func, void* lookup_baton )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>currently_rescanning()  :  macroexp.c
<item>do_cleanups()  :  utils.c
<item>expand()  :  macroexp.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>macro_expand_next()  :  macroexp.c
<item>scan()  :  macroexp.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function resize_buffer()

<p><tt>static void resize_buffer ( struct macro_buffer* b, int n )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>appendc()  :  macroexp.c
<item>appendmem()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function scan()

<p><tt>static void scan ( struct macro_buffer* dest, struct macro_buffer* src, struct macro_name_list* no_loop, macro_lookup_ftype* lookup_func, void* lookup_baton )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>macroexp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>append_tokens_without_splicing()  :  macroexp.c
<item>appendmem()  :  macroexp.c
<item>get_token()  :  macroexp.c
<item>internal_error()  :  utils.c
<item>maybe_expand()  :  macroexp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>expand()  :  macroexp.c
<item>macro_expand()  :  macroexp.c
<item>substitute_args()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function set_token()

<p><tt>static void set_token ( struct macro_buffer* tok, const char* start, const char* end )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>init_shared_buffer()  :  macroexp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gather_arguments()  :  macroexp.c
<item>get_character_constant()  :  macroexp.c
<item>get_comment()  :  macroexp.c
<item>get_identifier()  :  macroexp.c
<item>get_pp_number()  :  macroexp.c
<item>get_punctuator()  :  macroexp.c
<item>get_string_literal()  :  macroexp.c
<item>get_token()  :  macroexp.c
</itemize>
</descrip>

<sect1>Local Function substitute_args()

<p><tt>static void substitute_args ( struct macro_buffer* dest, struct macro_definition* def, int argc, struct macro_buffer* argv, struct macro_name_list* no_loop, macro_lookup_ftype* lookup_func, void* lookup_baton )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>append_tokens_without_splicing()  :  macroexp.c
<item>appendmem()  :  macroexp.c
<item>error()  :  utils.c
<item>get_token()  :  macroexp.c
<item>init_shared_buffer()  :  macroexp.c
<item>internal_error()  :  utils.c
<item>scan()  :  macroexp.c
<item>memcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>expand()  :  macroexp.c
</itemize>
</descrip>

</article>
