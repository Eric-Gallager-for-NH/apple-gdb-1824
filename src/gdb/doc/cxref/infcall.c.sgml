<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF infcall.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for infcall.c of gdb.cxref.
<author>cxref

<sect>File infcall.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;regcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<item><tt>#include &quot;target.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;infcall.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;dummy-frame.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objc-lang.h&quot;</tt>
<itemize>
<item><tt>#include &lt;Availability.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;macosx/macosx-nat-infthread.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;macosx/macosx-nat-infthread.h&quot;</tt>
</itemize>

<sect1>Global Variable inferior_function_calls_disabled_p

<p>
<tt>int inferior_function_calls_disabled_p</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>ada-valprint.c
<item>eval.c
<item>infcall.c
<item>objc-lang.c
<item>scm-lang.c
<item>valarith.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcall()  :  infcall.c
<item>hand_function_call()  :  infcall.c
</itemize>
</descrip>

<sect1>Global Variable objc_exceptions_interrupt_hand_call

<p>
<tt>int objc_exceptions_interrupt_hand_call</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>infcall.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcall()  :  infcall.c
<item>hand_function_call()  :  infcall.c
</itemize>
</descrip>

<sect1>Global Variable hand_call_ptid

<p>
<tt>ptid_t hand_call_ptid</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>infcall.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>do_reset_hand_call_ptid()  :  infcall.c
<item>get_hand_call_ptid()  :  infcall.c
<item>hand_function_call()  :  infcall.c
</itemize>
</descrip>

<sect1>Global Variable unwind_on_signal_p

<p>
<tt>int unwind_on_signal_p</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>infcall.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcall()  :  infcall.c
<item>hand_function_call()  :  infcall.c
<item>make_cleanup_set_restore_unwind_on_signal()  :  infcall.c
<item>set_unwind_on_signal()  :  infcall.c
<item>set_unwind_on_signal_cleanup()  :  infcall.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>coerce_float_to_double_p</bf><newline>
<tt>static int coerce_float_to_double_p</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcall()
<item>value_arg_coerce()
</itemize>
</descrip>
<p>
<bf>timer_fired</bf><newline>
<tt>static int timer_fired</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>hand_function_call()
<item>hand_function_call_timeout_p()
<item>handle_alarm_while_calling()
</itemize>
</descrip>
<p>
<bf>hand_call_function_timeout</bf><newline>
<tt>static int hand_call_function_timeout</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcall()
<item>hand_function_call()
<item>set_hand_function_call_timeout()
</itemize>
</descrip>

<sect1>Global Function _initialize_infcall()

<p><tt>void _initialize_infcall ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcall.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_setshow_boolean_cmd(), add_setshow_zinteger_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>show_coerce_float_to_double_p()  :  infcall.c
<item>show_unwind_on_signal_p()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>coerce_float_to_double_p  :  infcall.c
<item>hand_call_function_timeout  :  infcall.c
<item>inferior_function_calls_disabled_p  :  infcall.c
<item>objc_exceptions_interrupt_hand_call  :  infcall.c
<item>unwind_on_signal_p  :  infcall.c
<item>setlist, showlist
</itemize>
</descrip>

<sect1>Global Function call_function_by_hand()

<p><tt>struct value* call_function_by_hand ( struct value* function, int nargs, struct value** args )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>allocate_space_in_inferior_malloc()  :  valops.c
<item>do_end_debugger_mode()  :  objc-lang.c
<item>get_class_address_from_object()  :  objc-lang.c
<item>invoke_block_command()  :  printcmd.c
<item>lookup_child_selector_nocache()  :  objc-lang.c
<item>lookup_objc_class()  :  objc-lang.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>new_objc_runtime_class_getClass()  :  objc-lang.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>new_objc_runtime_get_classname()  :  objc-lang.c
<item>objc_runtime_lock_taken_p()  :  objc-lang.c
<item>print_object_command()  :  objc-lang.c
<item>read_objc_object()  :  objc-lang.c
<item>scm_evaluate_string()  :  scm-lang.c
<item>scm_lookup_name()  :  scm-lang.c
<item>value_nsstring()  :  objc-lang.c
<item>value_x_binop()  :  valarith.c
<item>value_x_unop()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function call_function_by_hand_expecting_type()

<p><tt>struct value* call_function_by_hand_expecting_type ( struct value* function, struct type* expect_type, int nargs, struct value** args, int restore_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
</descrip>

<sect1>Global Function find_function_addr()

<p><tt>CORE_ADDR find_function_addr ( struct value* function, struct type** retval_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_value_address_hack()  :  value.c
<item>error()  :  utils.c
<item>gdbarch_convert_from_func_ptr_addr()  :  gdbarch.c
<item>gdbarch_deprecated_function_start_offset()  :  gdbarch.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_addr()  :  valops.c
<item>value_as_address()  :  value.c
<item>value_as_long()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_error  :  symtab.c
<item>builtin_type_int  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function get_hand_call_ptid()

<p><tt>ptid_t get_hand_call_ptid ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcall.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>hand_call_ptid  :  infcall.c
</itemize>
</descrip>

<sect1>Global Function hand_function_call()

<p><tt>struct value* hand_function_call ( struct value* function, struct type* expect_type, int nargs, struct value** args, int restore_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcall.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>block_for_pc()  :  block.c
<item>check_typedef()  :  gdbtypes.c
<item>clear_proceed_status()  :  infrun.c
<item>deprecated_set_value_type()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>disable_watchpoints_before_interactive_call_start()  :  breakpoint.c
<item>discard_cleanups()  :  utils.c
<item>discard_inferior_status()  :  infrun.c
<item>do_cleanups()  :  utils.c
<item>dummy_frame_push()  :  dummy-frame.c
<item>enable_watchpoints_after_interactive_call_stop()  :  breakpoint.c
<item>entry_point_address()  :  objfiles.c
<item>error()  :  utils.c
<item>find_function_addr()  :  infcall.c
<item>find_pc_function()  :  blockframe.c
<item>find_pc_overlay()  :  symfile.c
<item>find_pc_partial_function()  :  blockframe.c
<item>frame_id_build()  :  frame.c
<item>frame_pop()  :  frame.c
<item>frame_save_as_regcache()  :  frame.c
<item>ftype_has_debug_info_p()  :  parse.c
<item>gdbarch_addr_bits_remove()  :  gdbarch.c
<item>gdbarch_call_dummy_location()  :  gdbarch.c
<item>gdbarch_convert_from_func_ptr_addr()  :  gdbarch.c
<item>gdbarch_deprecated_push_arguments()  :  gdbarch.c
<item>gdbarch_deprecated_push_arguments_p()  :  gdbarch.c
<item>gdbarch_deprecated_reg_struct_has_addr()  :  gdbarch.c
<item>gdbarch_deprecated_reg_struct_has_addr_p()  :  gdbarch.c
<item>gdbarch_frame_align()  :  gdbarch.c
<item>gdbarch_frame_align_p()  :  gdbarch.c
<item>gdbarch_frame_red_zone_size()  :  gdbarch.c
<item>gdbarch_inner_than()  :  gdbarch.c
<item>gdbarch_push_dummy_call()  :  gdbarch.c
<item>gdbarch_push_dummy_call_p()  :  gdbarch.c
<item>gdbarch_return_value()  :  gdbarch.c
<item>get_current_frame()  :  frame.c
<item>hex_string()  :  utils.c
<item>init_sal()  :  symtab.c
<item>inlined_subroutine_restore_after_dummy_call()  :  inlining.c
<item>internal_error()  :  utils.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_minimal_symbol_by_pc()  :  minsyms.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_init_objc_exception_catcher()  :  objc-lang.c
<item>make_cleanup_regcache_xfree()  :  regcache.c
<item>make_cleanup_restore_inferior_status()  :  infrun.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>noprocess()  :  target/target.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>objc_pc_at_fail_point()  :  objc-lang.c
<item>objc_runtime_check_enabled_p()  :  objc-lang.c
<item>paddr_nz()  :  utils.c
<item>proceed()  :  infrun.c
<item>push_dummy_code()  :  infcall.c
<item>read_sp()  :  regcache.c
<item>regcache_cpy_no_passthrough()  :  regcache.c
<item>regcache_xmalloc()  :  regcache.c
<item>save_inferior_status()  :  infrun.c
<item>set_momentary_breakpoint()  :  breakpoint.c
<item>start_timer()  :  maint.c
<item>symbol_natural_name()  :  symtab.c
<item>target_async_mask()  :  target/target.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
<item>using_struct_return()  :  value.c
<item>value_arg_coerce()  :  infcall.c
<item>value_at()  :  valops.c
<item>value_contents()  :  value.c
<item>value_contents_all()  :  value.c
<item>value_contents_raw()  :  value.c
<item>value_enclosing_type()  :  value.c
<item>value_from_pointer()  :  value.c
<item>value_type()  :  value.c
<item>warning()  :  utils.c
<item>write_memory()  :  corefile.c
<item>xfree()  :  utils.c
<item>xstrprintf()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcpy_chk(), begin_inferior_call_checkpoints(), end_inferior_call_checkpoints(), exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), hand_call_function_hook(), macosx_setup_registers_before_hand_call(), setitimer(), signal(), sigsetjmp(), strlen(), throw_exception()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>call_function_by_hand()  :  infcall.c
<item>call_function_by_hand_expecting_type()  :  infcall.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>breakpoint_auto_delete_contents()  :  infcall.c
<item>do_reset_hand_call_ptid()  :  infcall.c
<item>do_unset_proceed_from_hand_call()  :  infcall.c
<item>handle_alarm_while_calling()  :  infcall.c
<item>null_cleanup()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_regcache  :  regcache.c
<item>current_target  :  target/target.c
<item>demangle  :  utils.c
<item>gdb_override_async  :  target/target.c
<item>hand_call_function_hook  :  top.c
<item>hand_call_function_timeout  :  infcall.c
<item>hand_call_ptid  :  infcall.c
<item>inferior_function_calls_disabled_p  :  infcall.c
<item>inferior_ptid  :  infcmd.c
<item>minus_one_ptid  :  infrun.c
<item>objc_exceptions_interrupt_hand_call  :  infcall.c
<item>proceed_from_hand_call  :  infrun.c
<item>proceed_to_finish  :  infrun.c
<item>stop_bpstat  :  infcmd.c
<item>stop_pc  :  infcmd.c
<item>stop_registers  :  infrun.c
<item>stop_stack_dummy  :  infcmd.c
<item>stopped_by_random_signal  :  infcmd.c
<item>timer_fired  :  infcall.c
<item>uiout  :  ui-out.c
<item>unwind_on_signal_p  :  infcall.c
</itemize>
</descrip>

<sect1>Global Function hand_function_call_timeout_p()

<p><tt>int hand_function_call_timeout_p ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcall.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>new_objc_runtime_class_getClass()  :  objc-lang.c
<item>read_objc_object()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>timer_fired  :  infcall.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_set_restore_unwind_on_signal()

<p><tt>struct cleanup* make_cleanup_set_restore_unwind_on_signal ( int newval )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>allocate_space_in_inferior_malloc()  :  valops.c
<item>do_end_debugger_mode()  :  objc-lang.c
<item>get_class_address_from_object()  :  objc-lang.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>new_objc_runtime_get_classname()  :  objc-lang.c
<item>print_object_command()  :  objc-lang.c
<item>read_objc_object()  :  objc-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>set_unwind_on_signal_cleanup()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>unwind_on_signal_p  :  infcall.c
</itemize>
</descrip>

<sect1>Global Function set_hand_function_call_timeout()

<p><tt>int set_hand_function_call_timeout ( int newval )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcall.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>new_objc_runtime_class_getClass()  :  objc-lang.c
<item>read_objc_object()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>hand_call_function_timeout  :  infcall.c
</itemize>
</descrip>

<sect1>Global Function set_unwind_on_signal()

<p><tt>int set_unwind_on_signal ( int new_val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdb_evaluate_expression()  :  wrapper.c
<item>gdb_evaluate_type()  :  wrapper.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>unwind_on_signal_p  :  infcall.c
</itemize>
</descrip>

<sect1>Local Function breakpoint_auto_delete_contents()

<p><tt>static void breakpoint_auto_delete_contents ( void* arg )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_auto_delete()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
</descrip>

<sect1>Local Function do_reset_hand_call_ptid()

<p><tt>static void do_reset_hand_call_ptid ( void* unused )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>hand_call_ptid  :  infcall.c
<item>minus_one_ptid  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function do_unset_proceed_from_hand_call()

<p><tt>static void do_unset_proceed_from_hand_call ( void* unused )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>proceed_from_hand_call  :  infrun.c
</itemize>
</descrip>

<sect1>Local Function generic_push_dummy_code()

<p><tt>static CORE_ADDR generic_push_dummy_code ( struct gdbarch* gdbarch, CORE_ADDR sp, CORE_ADDR funaddr, int using_gcc, struct value** args, int nargs, struct type* value_type, CORE_ADDR* real_pc, CORE_ADDR* bp_addr )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_breakpoint_from_pc()  :  gdbarch.c
<item>gdbarch_frame_align()  :  gdbarch.c
<item>gdbarch_frame_align_p()  :  gdbarch.c
<item>gdbarch_inner_than()  :  gdbarch.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>push_dummy_code()  :  infcall.c
</itemize>
</descrip>

<sect1>Local Function handle_alarm_while_calling()

<p><tt>static void handle_alarm_while_calling ( int signo )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>timer_fired  :  infcall.c
</itemize>
</descrip>

<sect1>Local Function push_dummy_code()

<p><tt>static CORE_ADDR push_dummy_code ( struct gdbarch* gdbarch, CORE_ADDR sp, CORE_ADDR funaddr, int using_gcc, struct value** args, int nargs, struct type* value_type, CORE_ADDR* real_pc, CORE_ADDR* bp_addr )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_push_dummy_code()  :  gdbarch.c
<item>gdbarch_push_dummy_code_p()  :  gdbarch.c
<item>generic_push_dummy_code()  :  infcall.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
</descrip>

<sect1>Local Function set_unwind_on_signal_cleanup()

<p><tt>static void set_unwind_on_signal_cleanup ( void* new_val )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_set_restore_unwind_on_signal()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>unwind_on_signal_p  :  infcall.c
</itemize>
</descrip>

<sect1>Local Function show_coerce_float_to_double_p()

<p><tt>static void show_coerce_float_to_double_p ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcall()  :  infcall.c
</itemize>
</descrip>

<sect1>Local Function show_unwind_on_signal_p()

<p><tt>static void show_unwind_on_signal_p ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcall()  :  infcall.c
</itemize>
</descrip>

<sect1>Local Function value_arg_coerce()

<p><tt>static struct value* value_arg_coerce ( struct value* arg, struct type* param_type, int is_prototyped )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_set_value_type()  :  value.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_addr()  :  valops.c
<item>value_cast()  :  valops.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_double  :  gdbtypes.c
<item>builtin_type_int  :  gdbtypes.c
<item>builtin_type_long_double  :  gdbtypes.c
<item>coerce_float_to_double_p  :  infcall.c
<item>current_language  :  language.c
</itemize>
</descrip>

</article>
