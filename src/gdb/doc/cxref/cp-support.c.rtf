{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF cp-support.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File cp-support.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <ctype.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "cp-support.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/demangle.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dictionary.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "complaints.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define d_left( dc )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define d_right( dc )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define LENGTH_OF_OPERATOR 8\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable maint_cplus_cmd_list\par}
{\s5\f1\fs20\ql\sb50\sa50 struct cmd_list_element* maint_cplus_cmd_list\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell block.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell gnu-v2-abi.c\cell\cell\row
\cell gnu-v3-abi.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell _initialize_cp_namespace()\cell cp-namespace.c\cell\row
\cell _initialize_cp_support()\cell cp-support.c\cell\row
\cell maint_cplus_command()\cell cp-support.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable sym_return_val_size\par}
{\s5\f1\fs20\ql\sb50\sa50 static int sym_return_val_size\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell make_symbol_overload_list()\cell\cell\row
\cell overload_list_add_symbol()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable sym_return_val_index\par}
{\s5\f1\fs20\ql\sb50\sa50 static int sym_return_val_index\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell make_symbol_overload_list()\cell\cell\row
\cell overload_list_add_symbol()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable sym_return_val\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol** sym_return_val\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell make_symbol_overload_list()\cell\cell\row
\cell overload_list_add_symbol()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_cp_support()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_cp_support ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.c\cell\cell\row
Calls: \cell  add_alias_cmd(), add_cmd(), add_prefix_cmd()\cell\cell\row
Refs Func:\cell first_component_command()\cell cp-support.c\cell\row
\cell maint_cplus_command()\cell cp-support.c\cell\row
Refs Var:\cell maint_cplus_cmd_list\cell cp-support.c\cell\row
\cell  maintenancelist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cp_canonicalize_string()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* cp_canonicalize_string ( const char* string )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Calls: \cell cp_comp_to_string()\cell cp-name-parser.c\cell\row
\cell cp_demangled_name_to_comp()\cell cp-name-parser.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  strlen()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cp_class_name_from_physname()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* cp_class_name_from_physname ( const char* physname )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Calls: \cell cp_comp_to_string()\cell cp-name-parser.c\cell\row
\cell mangled_name_to_comp()\cell cp-support.c\cell\row
\cell xfree()\cell utils.c\cell\row
Used in:\cell c-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cp_entire_prefix_len()\par}
{\s5\f1\fs20\ql\sb50\sa50 unsigned int cp_entire_prefix_len ( const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Calls: \cell cp_find_first_component()\cell cp-support.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell cp_set_block_scope()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cp_find_first_component()\par}
{\s5\f1\fs20\ql\sb50\sa50 unsigned int cp_find_first_component ( const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Calls: \cell cp_find_first_component_aux()\cell cp-support.c\cell\row
Called by:\cell check_possible_namespace_symbols_loop()\cell cp-namespace.c\cell\row
\cell cp_check_possible_namespace_symbols()\cell cp-namespace.c\cell\row
\cell cp_entire_prefix_len()\cell cp-support.c\cell\row
\cell cp_lookup_transparent_type_loop()\cell cp-namespace.c\cell\row
\cell cp_scan_for_anonymous_namespaces()\cell cp-namespace.c\cell\row
\cell find_oload_champ_namespace_loop()\cell valops.c\cell\row
\cell first_component_command()\cell cp-support.c\cell\row
\cell lookup_namespace_scope()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cp_func_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* cp_func_name ( const char* full_name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Calls: \cell cp_comp_to_string()\cell cp-name-parser.c\cell\row
\cell cp_demangled_name_to_comp()\cell cp-name-parser.c\cell\row
\cell unqualified_name_from_comp()\cell cp-support.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell find_overload_match()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cp_lookup_rtti_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* cp_lookup_rtti_type ( const char* name, struct block* block )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell lookup_symbol()\cell symtab.c\cell\row
\cell warning()\cell utils.c\cell\row
Called by:\cell gnuv2_value_rtti_type()\cell gnu-v2-abi.c\cell\row
\cell gnuv3_rtti_type()\cell gnu-v3-abi.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function make_symbol_overload_list()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol** make_symbol_overload_list ( const char* func_name, const char* cp_namespace )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Calls: \cell discard_cleanups()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_symbol_overload_list_using()\cell cp-support.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell find_oload_champ_namespace_loop()\cell valops.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell sym_return_val\cell cp-support.c\cell\row
\cell sym_return_val_index\cell cp-support.c\cell\row
\cell sym_return_val_size\cell cp-support.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function method_name_from_physname()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* method_name_from_physname ( const char* physname )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Calls: \cell cp_comp_to_string()\cell cp-name-parser.c\cell\row
\cell mangled_name_to_comp()\cell cp-support.c\cell\row
\cell unqualified_name_from_comp()\cell cp-support.c\cell\row
\cell xfree()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cp_find_first_component_aux()\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned int cp_find_first_component_aux ( const char* name, int permissive )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.c\cell\cell\row
Calls: \cell cp_find_first_component_aux()\cell cp-support.c\cell\row
\cell demangled_name_complaint()\cell cp-support.c\cell\row
\cell  isspace(), strlen(), strncmp()\cell\cell\row
Called by:\cell cp_find_first_component()\cell cp-support.c\cell\row
\cell cp_find_first_component_aux()\cell cp-support.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function demangled_name_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void demangled_name_complaint ( const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell cp_find_first_component_aux()\cell cp-support.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function first_component_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void first_component_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.c\cell\cell\row
Calls: \cell cp_find_first_component()\cell cp-support.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Used in:\cell _initialize_cp_support()\cell cp-support.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function maint_cplus_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void maint_cplus_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.c\cell\cell\row
Calls: \cell printf_unfiltered()\cell utils.c\cell\row
\cell  help_list()\cell\cell\row
Used in:\cell _initialize_cp_support()\cell cp-support.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\cell maint_cplus_cmd_list\cell cp-support.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function make_symbol_overload_list_qualified()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void make_symbol_overload_list_qualified ( const char* func_name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.c\cell\cell\row
Calls: \cell block_static_block()\cell block.c\cell\row
\cell dict_iter_name_first()\cell dictionary.c\cell\row
\cell dict_iter_name_next()\cell dictionary.c\cell\row
\cell get_selected_block()\cell stack.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell overload_list_add_symbol()\cell cp-support.c\cell\row
\cell quit()\cell utils.c\cell\row
\cell read_in_psymtabs()\cell cp-support.c\cell\row
\cell symtab_get_first()\cell objfiles.c\cell\row
\cell symtab_get_next()\cell objfiles.c\cell\row
Called by:\cell make_symbol_overload_list_using()\cell cp-support.c\cell\row
Refs Var:\cell quit_flag\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function make_symbol_overload_list_using()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void make_symbol_overload_list_using ( const char* func_name, const char* cp_namespace )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.c\cell\cell\row
Calls: \cell block_using()\cell block.c\cell\row
\cell get_selected_block()\cell stack.c\cell\row
\cell make_symbol_overload_list_qualified()\cell cp-support.c\cell\row
\cell make_symbol_overload_list_using()\cell cp-support.c\cell\row
\cell  __builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), strcmp(), strlen()\cell\cell\row
Called by:\cell make_symbol_overload_list()\cell cp-support.c\cell\row
\cell make_symbol_overload_list_using()\cell cp-support.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function mangled_name_to_comp()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct demangle_component* mangled_name_to_comp ( const char* mangled_name, int options, void** memory, char** demangled_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell cp_demangled_name_to_comp()\cell cp-name-parser.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  cplus_demangle(), cplus_demangle_v3_components()\cell\cell\row
Called by:\cell cp_class_name_from_physname()\cell cp-support.c\cell\row
\cell method_name_from_physname()\cell cp-support.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function overload_list_add_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void overload_list_add_symbol ( struct symbol* sym, const char* oload_name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.c\cell\cell\row
Calls: \cell remove_params()\cell cp-support.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell make_symbol_overload_list_qualified()\cell cp-support.c\cell\row
Refs Var:\cell sym_return_val\cell cp-support.c\cell\row
\cell sym_return_val_index\cell cp-support.c\cell\row
\cell sym_return_val_size\cell cp-support.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_in_psymtabs()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_in_psymtabs ( const char* func_name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.c\cell\cell\row
Calls: \cell lookup_partial_symbol()\cell symtab.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell psymtab_get_first()\cell objfiles.c\cell\row
\cell psymtab_get_next()\cell objfiles.c\cell\row
\cell psymtab_to_symtab()\cell symfile.c\cell\row
Called by:\cell make_symbol_overload_list_qualified()\cell cp-support.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function remove_params()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* remove_params ( const char* demangled_name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell cp_comp_to_string()\cell cp-name-parser.c\cell\row
\cell cp_demangled_name_to_comp()\cell cp-name-parser.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell overload_list_add_symbol()\cell cp-support.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unqualified_name_from_comp()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct demangle_component* unqualified_name_from_comp ( struct demangle_component* comp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell cp_func_name()\cell cp-support.c\cell\row
\cell method_name_from_physname()\cell cp-support.c\cell\row
\intbl0
}
