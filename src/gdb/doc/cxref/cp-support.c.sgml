<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF cp-support.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for cp-support.c of gdb.cxref.
<author>cxref

<sect>File cp-support.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;cp-support.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;dictionary.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;complaints.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define d_left( dc )</tt><newline>
<p>
<tt>#define d_right( dc )</tt><newline>
<p>
<tt>#define LENGTH_OF_OPERATOR 8</tt><newline>

<sect1>Global Variable maint_cplus_cmd_list

<p>
<tt>struct cmd_list_element* maint_cplus_cmd_list</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>block.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dwarf2read.c
<item>eval.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>p-valprint.c
<item>stabsread.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_cp_namespace()  :  cp-namespace.c
<item>_initialize_cp_support()  :  cp-support.c
<item>maint_cplus_command()  :  cp-support.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>sym_return_val_size</bf><newline>
<tt>static int sym_return_val_size</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>make_symbol_overload_list()
<item>overload_list_add_symbol()
</itemize>
</descrip>
<p>
<bf>sym_return_val_index</bf><newline>
<tt>static int sym_return_val_index</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>make_symbol_overload_list()
<item>overload_list_add_symbol()
</itemize>
</descrip>
<p>
<bf>sym_return_val</bf><newline>
<tt>static struct symbol** sym_return_val</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>make_symbol_overload_list()
<item>overload_list_add_symbol()
</itemize>
</descrip>

<sect1>Global Function _initialize_cp_support()

<p><tt>void _initialize_cp_support ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_alias_cmd(), add_cmd(), add_prefix_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>first_component_command()  :  cp-support.c
<item>maint_cplus_command()  :  cp-support.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>maint_cplus_cmd_list  :  cp-support.c
<item>maintenancelist
</itemize>
</descrip>

<sect1>Global Function cp_canonicalize_string()

<p><tt>char* cp_canonicalize_string ( const char* string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cp_comp_to_string()  :  cp-name-parser.c
<item>cp_demangled_name_to_comp()  :  cp-name-parser.c
<item>xfree()  :  utils.c
<item>strlen()
</itemize>
</descrip>

<sect1>Global Function cp_class_name_from_physname()

<p><tt>char* cp_class_name_from_physname ( const char* physname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cp_comp_to_string()  :  cp-name-parser.c
<item>mangled_name_to_comp()  :  cp-support.c
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c-lang.c
</itemize>
</descrip>

<sect1>Global Function cp_entire_prefix_len()

<p><tt>unsigned int cp_entire_prefix_len ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cp_find_first_component()  :  cp-support.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_set_block_scope()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Global Function cp_find_first_component()

<p><tt>unsigned int cp_find_first_component ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cp_find_first_component_aux()  :  cp-support.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>check_possible_namespace_symbols_loop()  :  cp-namespace.c
<item>cp_check_possible_namespace_symbols()  :  cp-namespace.c
<item>cp_entire_prefix_len()  :  cp-support.c
<item>cp_lookup_transparent_type_loop()  :  cp-namespace.c
<item>cp_scan_for_anonymous_namespaces()  :  cp-namespace.c
<item>find_oload_champ_namespace_loop()  :  valops.c
<item>first_component_command()  :  cp-support.c
<item>lookup_namespace_scope()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Global Function cp_func_name()

<p><tt>char* cp_func_name ( const char* full_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cp_comp_to_string()  :  cp-name-parser.c
<item>cp_demangled_name_to_comp()  :  cp-name-parser.c
<item>unqualified_name_from_comp()  :  cp-support.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_overload_match()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function cp_lookup_rtti_type()

<p><tt>struct type* cp_lookup_rtti_type ( const char* name, struct block* block )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>lookup_symbol()  :  symtab.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gnuv2_value_rtti_type()  :  gnu-v2-abi.c
<item>gnuv3_rtti_type()  :  gnu-v3-abi.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Global Function make_symbol_overload_list()

<p><tt>struct symbol** make_symbol_overload_list ( const char* func_name, const char* cp_namespace )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>discard_cleanups()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>make_symbol_overload_list_using()  :  cp-support.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_oload_champ_namespace_loop()  :  valops.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>sym_return_val  :  cp-support.c
<item>sym_return_val_index  :  cp-support.c
<item>sym_return_val_size  :  cp-support.c
</itemize>
</descrip>

<sect1>Global Function method_name_from_physname()

<p><tt>char* method_name_from_physname ( const char* physname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cp_comp_to_string()  :  cp-name-parser.c
<item>mangled_name_to_comp()  :  cp-support.c
<item>unqualified_name_from_comp()  :  cp-support.c
<item>xfree()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function cp_find_first_component_aux()

<p><tt>static unsigned int cp_find_first_component_aux ( const char* name, int permissive )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cp_find_first_component_aux()  :  cp-support.c
<item>demangled_name_complaint()  :  cp-support.c
<item>isspace(), strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_find_first_component()  :  cp-support.c
<item>cp_find_first_component_aux()  :  cp-support.c
</itemize>
</descrip>

<sect1>Local Function demangled_name_complaint()

<p><tt>static void demangled_name_complaint ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_find_first_component_aux()  :  cp-support.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function first_component_command()

<p><tt>static void first_component_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cp_find_first_component()  :  cp-support.c
<item>printf_unfiltered()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_cp_support()  :  cp-support.c
</itemize>
</descrip>

<sect1>Local Function maint_cplus_command()

<p><tt>static void maint_cplus_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>printf_unfiltered()  :  utils.c
<item>help_list()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_cp_support()  :  cp-support.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>maint_cplus_cmd_list  :  cp-support.c
</itemize>
</descrip>

<sect1>Local Function make_symbol_overload_list_qualified()

<p><tt>static void make_symbol_overload_list_qualified ( const char* func_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_static_block()  :  block.c
<item>dict_iter_name_first()  :  dictionary.c
<item>dict_iter_name_next()  :  dictionary.c
<item>get_selected_block()  :  stack.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>overload_list_add_symbol()  :  cp-support.c
<item>quit()  :  utils.c
<item>read_in_psymtabs()  :  cp-support.c
<item>symtab_get_first()  :  objfiles.c
<item>symtab_get_next()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_symbol_overload_list_using()  :  cp-support.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Local Function make_symbol_overload_list_using()

<p><tt>static void make_symbol_overload_list_using ( const char* func_name, const char* cp_namespace )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_using()  :  block.c
<item>get_selected_block()  :  stack.c
<item>make_symbol_overload_list_qualified()  :  cp-support.c
<item>make_symbol_overload_list_using()  :  cp-support.c
<item>__builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_symbol_overload_list()  :  cp-support.c
<item>make_symbol_overload_list_using()  :  cp-support.c
</itemize>
</descrip>

<sect1>Local Function mangled_name_to_comp()

<p><tt>static struct demangle_component* mangled_name_to_comp ( const char* mangled_name, int options, void** memory, char** demangled_p )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>cp_demangled_name_to_comp()  :  cp-name-parser.c
<item>xfree()  :  utils.c
<item>cplus_demangle(), cplus_demangle_v3_components()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_class_name_from_physname()  :  cp-support.c
<item>method_name_from_physname()  :  cp-support.c
</itemize>
</descrip>

<sect1>Local Function overload_list_add_symbol()

<p><tt>static void overload_list_add_symbol ( struct symbol* sym, const char* oload_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>remove_params()  :  cp-support.c
<item>symbol_natural_name()  :  symtab.c
<item>xfree()  :  utils.c
<item>xrealloc()  :  utils.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_symbol_overload_list_qualified()  :  cp-support.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>sym_return_val  :  cp-support.c
<item>sym_return_val_index  :  cp-support.c
<item>sym_return_val_size  :  cp-support.c
</itemize>
</descrip>

<sect1>Local Function read_in_psymtabs()

<p><tt>static void read_in_psymtabs ( const char* func_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-support.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>lookup_partial_symbol()  :  symtab.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>psymtab_get_first()  :  objfiles.c
<item>psymtab_get_next()  :  objfiles.c
<item>psymtab_to_symtab()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_symbol_overload_list_qualified()  :  cp-support.c
</itemize>
</descrip>

<sect1>Local Function remove_params()

<p><tt>static char* remove_params ( const char* demangled_name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>cp_comp_to_string()  :  cp-name-parser.c
<item>cp_demangled_name_to_comp()  :  cp-name-parser.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>overload_list_add_symbol()  :  cp-support.c
</itemize>
</descrip>

<sect1>Local Function unqualified_name_from_comp()

<p><tt>static struct demangle_component* unqualified_name_from_comp ( struct demangle_component* comp )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_func_name()  :  cp-support.c
<item>method_name_from_physname()  :  cp-support.c
</itemize>
</descrip>

</article>
