{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF objc-lang.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File objc-lang.c\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Refs Func:\cell basic_lookup_symbol_nonlocal()\cell symtab.c\cell\row
\cell basic_lookup_transparent_type()\cell symtab.c\cell\row
\cell c_print_type()\cell c-typeprint.c\cell\row
\cell c_val_print()\cell c-valprint.c\cell\row
\cell c_value_print()\cell c-valprint.c\cell\row
\cell default_word_break_characters()\cell language.c\cell\row
\cell null_post_parser()\cell parse.c\cell\row
\cell objc_create_fundamental_type()\cell objc-lang.c\cell\row
\cell objc_demangle()\cell objc-lang.c\cell\row
\cell objc_emit_char()\cell objc-lang.c\cell\row
\cell objc_error()\cell objc-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell objc_printchar()\cell objc-lang.c\cell\row
\cell objc_printstr()\cell objc-lang.c\cell\row
\cell objc_skip_trampoline()\cell objc-lang.c\cell\row
\cell objcplus_demangle()\cell objc-lang.c\cell\row
\cell resolve_msgsend()\cell objc-lang.c\cell\row
\cell resolve_msgsend_fixedup()\cell objc-lang.c\cell\row
\cell resolve_msgsend_fixup()\cell objc-lang.c\cell\row
\cell resolve_msgsend_stret()\cell objc-lang.c\cell\row
\cell resolve_msgsend_stret_fixedup()\cell objc-lang.c\cell\row
\cell resolve_msgsend_stret_fixup()\cell objc-lang.c\cell\row
\cell resolve_msgsend_super()\cell objc-lang.c\cell\row
\cell resolve_msgsend_super_stret()\cell objc-lang.c\cell\row
\cell resolve_msgsendsuper2()\cell objc-lang.c\cell\row
\cell resolve_msgsendsuper2_fixedup()\cell objc-lang.c\cell\row
\cell resolve_msgsendsuper2_fixup()\cell objc-lang.c\cell\row
\cell resolve_msgsendsuper2_stret()\cell objc-lang.c\cell\row
\cell resolve_msgsendsuper2_stret_fixedup()\cell objc-lang.c\cell\row
\cell resolve_msgsendsuper2_stret_fixup()\cell objc-lang.c\cell\row
\cell value_of_this()\cell valops.c\cell\row
Refs Var:\cell builtin_type_char\cell gdbtypes.c\cell\row
\cell builtin_type_complex\cell gdbtypes.c\cell\row
\cell builtin_type_double\cell gdbtypes.c\cell\row
\cell builtin_type_double_complex\cell gdbtypes.c\cell\row
\cell builtin_type_float\cell gdbtypes.c\cell\row
\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell builtin_type_long\cell gdbtypes.c\cell\row
\cell builtin_type_long_double\cell gdbtypes.c\cell\row
\cell builtin_type_long_long\cell gdbtypes.c\cell\row
\cell builtin_type_short\cell gdbtypes.c\cell\row
\cell builtin_type_signed_char\cell gdbtypes.c\cell\row
\cell builtin_type_unsigned_char\cell gdbtypes.c\cell\row
\cell builtin_type_unsigned_int\cell gdbtypes.c\cell\row
\cell builtin_type_unsigned_long\cell gdbtypes.c\cell\row
\cell builtin_type_unsigned_long_long\cell gdbtypes.c\cell\row
\cell builtin_type_unsigned_short\cell gdbtypes.c\cell\row
\cell builtin_type_void\cell gdbtypes.c\cell\row
\cell exp_descriptor_standard\cell parse.c\cell\row
\cell objc_builtin_types\cell objc-lang.c\cell\row
\cell objc_op_print_tab\cell objc-lang.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "parser-defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "c-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "macroexp.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objc-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <Availability.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exceptions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <setjmp.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "complaints.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "regcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "infcall.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "valprint.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/demangle.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "osabi.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "cli-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <ctype.h>\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define OBJC_FETCH_POINTER_ARGUMENT( argi )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define TARGET_ADDRESS_BYTES\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SELECTOR_HASH_SIZE 127\par}
{\s5\f1\fs20\ql\sb50\sa50 #define OBJC_TRAMPOLINE_MESSAGE\par}
{\s5\f1\fs20\ql\sb50\sa50 #define OBJC_TRAMPOLINE_STRET\par}
{\s5\f1\fs20\ql\sb50\sa50 #define OBJC_TRAMPOLINE_VTABLE\par}
{\s5\f1\fs20\ql\sb50\sa50 #define nmethcalls\par}
{\s5\f1\fs20\ql\sb50\sa50 #define GC_IGNORED_SELECTOR_LE 0xfffeb010\par}
{\s5\f1\fs20\ql\sb50\sa50 #define CLS_NO_METHOD_ARRAY 0x4000\par}
{\s5\f1\fs20\ql\sb50\sa50 #define CLS_META 0x2L\par}
{\s5\f1\fs20\ql\sb50\sa50 #define IVAR_OFFSET_PREFIX "OBJC_IVAR_$_"\par}
{\s5\f1\fs20\ql\sb50\sa50 #define LOCKS_DEBUGGING 0\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct objc_object\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct objc_object}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR isa;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct objc_class\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct objc_class}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR isa;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR super_class;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 long version;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 long info;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 long instance_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR ivars;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR methods;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR cache;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR protocols;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct objc_super\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct objc_super}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR receiver;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR objc_class;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct objc_method\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct objc_method}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR types;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR imp;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type enum debug_modes\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum debug_modes}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 debug_mode_not_checked;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 debug_mode_okay;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 debug_mode_failed;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 debug_mode_overridden;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct selector_entry\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct selector_entry}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR val;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct selector_entry* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct objc_trampoline_record\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct objc_trampoline_record}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR start_addr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 uint64_t flags;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct objc_trampoline_region\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct objc_trampoline_region}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR next_region_start;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR trampoline_start;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR trampoline_end;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct objc_trampoline_region* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int num_records;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct objc_trampoline_record records[];}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct objc_trampolines\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct objc_trampolines}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int initialized;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR gdb_objc_trampoline_addr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct breakpoint* update_bpt;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct objc_trampoline_region* head;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct selname\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct selname}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct selname* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* msglist_sel;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int msglist_len;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct objc_methcall\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct objc_methcall}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int (*stop_at)(CORE_ADDR,CORE_ADDR*);}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR begin;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR end;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct objc_submethod_helper_data\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct objc_submethod_helper_data}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int (*f)(CORE_ADDR,CORE_ADDR*);}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR pc;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR* new_pc;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable lookup_objc_class_p\par}
{\s5\f1\fs20\ql\sb50\sa50 int lookup_objc_class_p\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell breakpoint.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell wrapper.c\cell\cell\row
Used in:\cell _initialize_objc_lang()\cell objc-lang.c\cell\row
\cell should_lookup_objc_class()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable po_and_print_run_all_threads\par}
{\s5\f1\fs20\ql\sb50\sa50 int po_and_print_run_all_threads\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell objc-lang.c\cell\cell\row
Used in:\cell _initialize_objc_lang()\cell objc-lang.c\cell\row
\cell objc_setup_safe_print()\cell objc-lang.c\cell\row
\cell print_object_command()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable let_po_run_all_threads\par}
{\s5\f1\fs20\ql\sb50\sa50 int let_po_run_all_threads\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell objc-lang.c\cell\cell\row
Used in:\cell _initialize_objc_lang()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable objc_builtin_types\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type** const objc_builtin_types[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell objc-lang.c\cell\cell\row
Used in:\cell objc-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable objc_language_defn\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct language_defn objc_language_defn\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell objc-lang.c\cell\cell\row
Used in:\cell _initialize_objc_language()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable objcplus_language_defn\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct language_defn objcplus_language_defn\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell objc-lang.c\cell\cell\row
Used in:\cell _initialize_objc_language()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable debug_objc\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_objc\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_objc_lang()\cell\cell\row
\cell find_implementation()\cell\cell\row
\cell find_implementation_from_class()\cell\cell\row
\cell get_class_address_from_object()\cell\cell\row
\cell new_objc_runtime_class_getClass()\cell\cell\row
\cell new_objc_runtime_find_impl()\cell\cell\row
\cell read_objc_object()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable debug_mode_set_p\par}
{\s5\f1\fs20\ql\sb50\sa50 static enum debug_modes debug_mode_set_p\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell do_end_debugger_mode()\cell\cell\row
\cell do_reset_debug_mode_flag()\cell\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell\cell\row
\cell reinitialize_objc()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable debug_mode_set_reason\par}
{\s5\f1\fs20\ql\sb50\sa50 static enum objc_debugger_mode_result debug_mode_set_reason\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell do_end_debugger_mode()\cell\cell\row
\cell do_reset_debug_mode_flag()\cell\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell\cell\row
\cell reinitialize_objc()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable objc_class_method_limit\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned int objc_class_method_limit\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_objc_language()\cell\cell\row
\cell find_implementation_from_class()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable objc_runtime_version_user_override\par}
{\s5\f1\fs20\ql\sb50\sa50 static int objc_runtime_version_user_override\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_objc_lang()\cell\cell\row
\cell new_objc_runtime_internals()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable objc_runtime_version\par}
{\s5\f1\fs20\ql\sb50\sa50 static int objc_runtime_version\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell new_objc_runtime_internals()\cell\cell\row
\cell objc_init_runtime_version()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable implementation_tree\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct rb_tree_node* implementation_tree\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell add_implementation_to_cache()\cell\cell\row
\cell lookup_implementation_in_cache()\cell\cell\row
\cell objc_clear_caches()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable real_class_tree\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct rb_tree_node* real_class_tree\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell add_class_to_cache()\cell\cell\row
\cell class_valid_p()\cell\cell\row
\cell lookup_real_class_in_cache()\cell\cell\row
\cell objc_clear_caches()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable classname_tree\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct rb_tree_node* classname_tree\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell add_classname_to_cache()\cell\cell\row
\cell lookup_classname_in_cache()\cell\cell\row
\cell objc_clear_caches()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable cached_objc_objfile\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct objfile* cached_objc_objfile\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell find_libobjc_objfile()\cell\cell\row
\cell reinitialize_objc()\cell\cell\row
\cell tell_objc_msgsend_cacher_objfile_changed()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable objc_library_name\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* objc_library_name\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell find_libobjc_objfile()\cell\cell\row
\cell tell_objc_msgsend_cacher_objfile_changed()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable selector_hash\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct selector_entry* selector_hash[127]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell lookup_child_selector()\cell\cell\row
\cell reset_child_selector_cache()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable selector_hash_generation\par}
{\s5\f1\fs20\ql\sb50\sa50 static int selector_hash_generation\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell lookup_child_selector()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable objc_trampolines\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct objc_trampolines objc_trampolines\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell objc_clear_trampoline_data()\cell\cell\row
\cell objc_handle_update()\cell\cell\row
\cell objc_init_trampoline_observer()\cell\cell\row
\cell pc_in_objc_trampoline_p()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable objc_op_print_tab\par}
{\s5\f1\fs20\ql\sb50\sa50 static const struct op_print objc_op_print_tab[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell objc-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable msglist_len\par}
{\s5\f1\fs20\ql\sb50\sa50 static size_t msglist_len\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell add_msglist()\cell\cell\row
\cell end_msglist()\cell\cell\row
\cell start_msglist()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable selname_chain\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct selname* selname_chain\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell end_msglist()\cell\cell\row
\cell start_msglist()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable msglist_sel\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* msglist_sel\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell add_msglist()\cell\cell\row
\cell end_msglist()\cell\cell\row
\cell start_msglist()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable methcalls\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct objc_methcall methcalls[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell find_objc_msgcall()\cell\cell\row
\cell find_objc_msgsend()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable cached_objc_msgsend_table_is_valid\par}
{\s5\f1\fs20\ql\sb50\sa50 static int cached_objc_msgsend_table_is_valid\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell find_objc_msgsend()\cell\cell\row
\cell tell_objc_msgsend_cacher_objfile_changed()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable bits_per_byte\par}
{\s5\f1\fs20\ql\sb50\sa50 static int bits_per_byte\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell objc_fixup_ivar_offset()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable first_bitfield_index\par}
{\s5\f1\fs20\ql\sb50\sa50 static int first_bitfield_index\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell objc_fixup_class_length()\cell\cell\row
\cell objc_fixup_ivar_offset()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable first_bitfield_offset\par}
{\s5\f1\fs20\ql\sb50\sa50 static int first_bitfield_offset\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell objc_fixup_class_length()\cell\cell\row
\cell objc_fixup_ivar_offset()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable spinlock_lock_is_present\par}
{\s5\f1\fs20\ql\sb50\sa50 static int spinlock_lock_is_present\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell make_cleanup_set_restore_debugger_mode()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable malloc_lock_is_present\par}
{\s5\f1\fs20\ql\sb50\sa50 static int malloc_lock_is_present\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell make_cleanup_set_restore_debugger_mode()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable debug_mode_timer\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_mode_timer\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell do_end_debugger_mode()\cell\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable debugger_mode_fail_breakpoint\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct breakpoint* debugger_mode_fail_breakpoint\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell init_debugger_mode_fail_notification()\cell\cell\row
\cell objc_pc_at_fail_point()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable objc_exception_throw_breakpoint\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct breakpoint* objc_exception_throw_breakpoint\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell do_cleanup_objc_exception_breakpoint()\cell\cell\row
\cell is_objc_exception_throw_breakpoint()\cell\cell\row
\cell make_cleanup_init_objc_exception_catcher()\cell\cell\row
\cell objc_pc_at_fail_point()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable use_non_blocking_mode\par}
{\s5\f1\fs20\ql\sb50\sa50 static int use_non_blocking_mode\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_objc_lang()\cell\cell\row
\cell objc_runtime_check_enabled_p()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_objc_lang()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_objc_lang ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell  add_setshow_boolean_cmd(), add_setshow_zinteger_cmd()\cell\cell\row
Refs Func:\cell set_non_blocking_mode_func()\cell objc-lang.c\cell\row
Refs Var:\cell debug_objc\cell objc-lang.c\cell\row
\cell let_po_run_all_threads\cell objc-lang.c\cell\row
\cell lookup_objc_class_p\cell objc-lang.c\cell\row
\cell objc_runtime_version_user_override\cell objc-lang.c\cell\row
\cell po_and_print_run_all_threads\cell objc-lang.c\cell\row
\cell use_non_blocking_mode\cell objc-lang.c\cell\row
\cell  setdebuglist, setlist, showdebuglist, showlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_objc_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_objc_language ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell add_language()\cell language.c\cell\row
\cell  add_com(), add_com_alias(), add_info(), add_setshow_uinteger_cmd()\cell\cell\row
Refs Func:\cell classes_info()\cell objc-lang.c\cell\row
\cell print_object_command()\cell objc-lang.c\cell\row
\cell selectors_info()\cell objc-lang.c\cell\row
Refs Var:\cell objc_class_method_limit\cell objc-lang.c\cell\row
\cell objc_language_defn\cell objc-lang.c\cell\row
\cell objcplus_language_defn\cell objc-lang.c\cell\row
\cell  setlist, showlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function add_msglist()\par}
{\s5\f1\fs20\ql\sb50\sa50 void add_msglist ( struct stoken* str, int addcolon )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin___strncat_chk(), __builtin_object_size(), __inline_strcpy_chk(), __inline_strncat_chk(), strlen()\cell\cell\row
Called by:\cell c_parse()\cell c-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
Refs Var:\cell msglist_len\cell objc-lang.c\cell\row
\cell msglist_sel\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function end_msglist()\par}
{\s5\f1\fs20\ql\sb50\sa50 int end_msglist ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell lookup_child_selector()\cell objc-lang.c\cell\row
\cell write_exp_elt_longcst()\cell parse.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell c_parse()\cell c-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
Refs Var:\cell msglist_len\cell objc-lang.c\cell\row
\cell msglist_sel\cell objc-lang.c\cell\row
\cell selname_chain\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_implementation()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR find_implementation ( CORE_ADDR object, CORE_ADDR sel, int stret )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell add_implementation_to_cache()\cell objc-lang.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell find_implementation_from_class()\cell objc-lang.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell get_class_address_from_object()\cell objc-lang.c\cell\row
\cell lookup_implementation_in_cache()\cell objc-lang.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell new_objc_runtime_internals()\cell objc-lang.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell resolve_msgsend()\cell objc-lang.c\cell\row
\cell resolve_msgsend_stret()\cell objc-lang.c\cell\row
\cell resolve_newruntime_objc_msgsend()\cell objc-lang.c\cell\row
Refs Var:\cell debug_objc\cell objc-lang.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_imps()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* find_imps ( struct symtab* symtab, struct block* block, const char* method, struct symbol** syms, unsigned int* nsym, unsigned int* ndebug )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell find_methods()\cell objc-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_symbol()\cell symtab.c\cell\row
\cell parse_method()\cell objc-lang.c\cell\row
\cell parse_selector()\cell objc-lang.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcpy_chk(), qsort(), strlen()\cell\cell\row
Called by:\cell decode_objc()\cell linespec.c\cell\row
Refs Func:\cell compare_classes()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_libobjc_objfile()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct objfile* find_libobjc_objfile ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objfiles.h\cell\cell\row
Calls: \cell executable_objfile()\cell objfiles.c\cell\row
\cell find_objfile_by_name()\cell objfiles.c\cell\row
Called by:\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell objc_init_runtime_version()\cell objc-lang.c\cell\row
\cell objc_init_trampoline_observer()\cell objc-lang.c\cell\row
\cell reread_symbols_for_objfile()\cell symfile.c\cell\row
Refs Var:\cell cached_objc_objfile\cell objc-lang.c\cell\row
\cell objc_library_name\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_objc_msgcall()\par}
{\s5\f1\fs20\ql\sb50\sa50 int find_objc_msgcall ( CORE_ADDR pc, CORE_ADDR* new_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell find_objc_msgcall_submethod()\cell objc-lang.c\cell\row
\cell find_objc_msgsend()\cell objc-lang.c\cell\row
\cell pc_in_objc_trampoline_p()\cell objc-lang.c\cell\row
\cell resolve_msgsend_fixedup()\cell objc-lang.c\cell\row
\cell resolve_msgsend_stret_fixedup()\cell objc-lang.c\cell\row
Called by:\cell objc_skip_trampoline()\cell objc-lang.c\cell\row
Refs Var:\cell methcalls\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function is_objc_exception_throw_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 int is_objc_exception_throw_breakpoint ( struct breakpoint* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Called by:\cell disable_user_breakpoints_before_operation()\cell breakpoint.c\cell\row
Refs Var:\cell objc_exception_throw_breakpoint\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function lookup_child_selector()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR lookup_child_selector ( const char* selname )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell lookup_child_selector_nocache()\cell objc-lang.c\cell\row
\cell msymbol_hash()\cell minsyms.c\cell\row
\cell ptid_get_pid()\cell infrun.c\cell\row
\cell reset_child_selector_cache()\cell objc-lang.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  strcmp(), xstrdup()\cell\cell\row
Called by:\cell end_msglist()\cell objc-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell get_class_address_from_object()\cell objc-lang.c\cell\row
\cell resolve_newruntime_objc_msgsend()\cell objc-lang.c\cell\row
\cell resolve_newruntime_objc_msgsendsuper()\cell objc-lang.c\cell\row
\cell value_nsstring()\cell objc-lang.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\cell selector_hash\cell objc-lang.c\cell\row
\cell selector_hash_generation\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function lookup_child_selector_nocache()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR lookup_child_selector_nocache ( const char* selname )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell call_function_by_hand()\cell infcall.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell create_cached_function()\cell value.c\cell\row
\cell lookup_cached_function()\cell value.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_coerce_array()\cell valops.c\cell\row
\cell value_string()\cell valops.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell lookup_child_selector()\cell objc-lang.c\cell\row
Refs Var:\cell builtin_type_voidptrfuncptr\cell gdbtypes.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function lookup_objc_class()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR lookup_objc_class ( const char* classname )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell call_function_by_hand()\cell infcall.c\cell\row
\cell create_cached_function()\cell value.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell lookup_cached_function()\cell value.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell make_cleanup_set_restore_scheduler_locking_mode()\cell utils.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_coerce_array()\cell valops.c\cell\row
\cell value_string()\cell valops.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell c_lex()\cell c-exp.c\cell\row
\cell c_parse()\cell c-exp.c\cell\row
\cell find_implementation_from_class()\cell objc-lang.c\cell\row
\cell objc_lex()\cell objc-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell value_nsstring()\cell objc-lang.c\cell\row
Refs Var:\cell builtin_type_voidptrfuncptr\cell gdbtypes.c\cell\row
\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function lookup_struct_typedef()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* lookup_struct_typedef ( const char* name, struct block* block, int noerr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell lookup_symbol()\cell symtab.c\cell\row
Called by:\cell c_lex()\cell c-exp.c\cell\row
\cell objc_lex()\cell objc-exp.c\cell\row
\cell value_nsstring()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function make_cleanup_init_objc_exception_catcher()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct cleanup* make_cleanup_init_objc_exception_catcher ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell create_objc_hook_breakpoint()\cell breakpoint.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell enable_breakpoint()\cell breakpoint.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_ui_out_suppress_output()\cell utils.c\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
Refs Func:\cell do_cleanup_objc_exception_breakpoint()\cell objc-lang.c\cell\row
Refs Var:\cell objc_exception_throw_breakpoint\cell objc-lang.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function make_cleanup_set_restore_debugger_mode()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum objc_debugger_mode_result make_cleanup_set_restore_debugger_mode ( struct cleanup** cleanup, int level )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell call_function_by_hand()\cell infcall.c\cell\row
\cell create_cached_function()\cell value.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell do_hand_call_cleanups()\cell utils.c\cell\row
\cell find_libobjc_objfile()\cell objc-lang.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell init_debugger_mode_fail_notification()\cell objc-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_cached_function()\cell value.c\cell\row
\cell lookup_function_type()\cell gdbtypes.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_enable_disable_bpts_during_operation()\cell breakpoint.c\cell\row
\cell make_cleanup_set_restore_scheduler_locking_mode()\cell utils.c\cell\row
\cell make_cleanup_set_restore_unwind_on_signal()\cell infcall.c\cell\row
\cell make_hand_call_cleanup()\cell utils.c\cell\row
\cell objc_runtime_check_enabled_p()\cell objc-lang.c\cell\row
\cell release_value()\cell value.c\cell\row
\cell start_timer()\cell maint.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell  exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp(), throw_exception()\cell\cell\row
Called by:\cell find_implementation()\cell objc-lang.c\cell\row
\cell get_class_address_from_object()\cell objc-lang.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell lookup_objc_class()\cell objc-lang.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell new_objc_runtime_get_classname()\cell objc-lang.c\cell\row
\cell objc_setup_safe_print()\cell objc-lang.c\cell\row
\cell print_object_command()\cell objc-lang.c\cell\row
Refs Func:\cell do_end_debugger_mode()\cell objc-lang.c\cell\row
\cell do_reset_debug_mode_flag()\cell objc-lang.c\cell\row
\cell null_cleanup()\cell utils.c\cell\row
\cell value_free()\cell value.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell builtin_type_voidptrfuncptr\cell gdbtypes.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell debug_handcall_setup\cell infrun.c\cell\row
\cell debug_mode_set_p\cell objc-lang.c\cell\row
\cell debug_mode_set_reason\cell objc-lang.c\cell\row
\cell debug_mode_timer\cell objc-lang.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell maint_use_timers\cell maint.c\cell\row
\cell malloc_lock_is_present\cell objc-lang.c\cell\row
\cell spinlock_lock_is_present\cell objc-lang.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function new_objc_runtime_internals()\par}
{\s5\f1\fs20\ql\sb50\sa50 int new_objc_runtime_internals ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell gdbarch_long_bit()\cell gdbarch.c\cell\row
Called by:\cell find_implementation()\cell objc-lang.c\cell\row
\cell find_implementation_from_class()\cell objc-lang.c\cell\row
\cell objc_invalidate_objc_class()\cell objc-lang.c\cell\row
\cell objc_target_type_from_object()\cell objc-lang.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell objc_runtime_version\cell objc-lang.c\cell\row
\cell objc_runtime_version_user_override\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function objc_check_safe_to_run_all_threads()\par}
{\s5\f1\fs20\ql\sb50\sa50 int objc_check_safe_to_run_all_threads ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell warning()\cell utils.c\cell\row
Called by:\cell objc_setup_safe_print()\cell objc-lang.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function objc_clear_caches()\par}
{\s5\f1\fs20\ql\sb50\sa50 void objc_clear_caches ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell free_rb_tree_data()\cell objc-lang.c\cell\row
Called by:\cell reinitialize_objc()\cell objc-lang.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell classname_tree\cell objc-lang.c\cell\row
\cell implementation_tree\cell objc-lang.c\cell\row
\cell real_class_tree\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function objc_demangle()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* objc_demangle ( const char* mangled, int options )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), strchr(), strlen()\cell\cell\row
Called by:\cell maintenance_demangle()\cell maint.c\cell\row
\cell objcplus_demangle()\cell objc-lang.c\cell\row
\cell symbol_find_demangled_name()\cell symtab.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function objc_fixup_class_length()\par}
{\s5\f1\fs20\ql\sb50\sa50 int objc_fixup_class_length ( const struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbtypes.h\cell\cell\row
Calls: \cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell ada_template_to_fixed_record_type_1()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell ada_value_binop()\cell ada-lang.c\cell\row
\cell ada_value_equal()\cell ada-lang.c\cell\row
\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell ada_value_print()\cell ada-valprint.c\cell\row
\cell ada_value_slice_ptr()\cell ada-lang.c\cell\row
\cell address_to_signed_pointer()\cell findvar.c\cell\row
\cell adjust_field_bitsize()\cell stabsread.c\cell\row
\cell allocate_value()\cell value.c\cell\row
\cell append_composite_type_field()\cell gdbtypes.c\cell\row
\cell basic_lookup_transparent_type()\cell symtab.c\cell\row
\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell build_gdb_vtable_type()\cell gnu-v3-abi.c\cell\row
\cell c_number_of_children()\cell varobj.c\cell\row
\cell c_parse()\cell c-exp.c\cell\row
\cell c_type_print_base()\cell c-typeprint.c\cell\row
\cell c_type_print_varspec_suffix()\cell c-typeprint.c\cell\row
\cell c_val_print()\cell c-valprint.c\cell\row
\cell can_use_hardware_watchpoint()\cell breakpoint.c\cell\row
\cell cast_into_complex()\cell valops.c\cell\row
\cell check_field_in()\cell valops.c\cell\row
\cell check_size()\cell ada-lang.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell cleanup_undefined_arrays()\cell gdbtypes.c\cell\row
\cell coerce_for_assign()\cell ada-lang.c\cell\row
\cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
\cell collect_symbol()\cell tracepoint.c\cell\row
\cell convert_actual()\cell ada-lang.c\cell\row
\cell convert_typed_floating()\cell doublest.c\cell\row
\cell cp_print_value()\cell cp-valprint.c\cell\row
\cell create_array_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell dbx_fixup_variants()\cell stabsread.c\cell\row
\cell decode_frame_entry_1()\cell dwarf2-frame.c\cell\row
\cell decode_packed_array()\cell ada-lang.c\cell\row
\cell default_region_size_ok_for_hw_watchpoint()\cell target/target.c\cell\row
\cell define_symbol()\cell stabsread.c\cell\row
\cell desc_bound_bitsize()\cell ada-lang.c\cell\row
\cell desc_bounds()\cell ada-lang.c\cell\row
\cell dwarf2_add_field()\cell dwarf2read.c\cell\row
\cell dwarf2_const_value()\cell dwarf2read.c\cell\row
\cell encode_actions()\cell tracepoint.c\cell\row
\cell ensure_lval()\cell ada-lang.c\cell\row
\cell evaluate_struct_tuple()\cell eval.c\cell\row
\cell evaluate_subexp_for_sizeof()\cell eval.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell extract_typed_floating()\cell doublest.c\cell\row
\cell f77_create_arrayprint_offset_tbl()\cell f-valprint.c\cell\row
\cell f77_get_dynamic_length_of_aggregate()\cell f-valprint.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell f_type_print_base()\cell f-typeprint.c\cell\row
\cell f_val_print()\cell f-valprint.c\cell\row
\cell fat_pntr_bounds_bitsize()\cell ada-lang.c\cell\row
\cell fat_pntr_data_bitsize()\cell ada-lang.c\cell\row
\cell find_function_addr()\cell infcall.c\cell\row
\cell find_size_for_pointer_math()\cell valarith.c\cell\row
\cell floatformat_from_type()\cell doublest.c\cell\row
\cell gen_conversion()\cell ax-gdb.c\cell\row
\cell gen_extend()\cell ax-gdb.c\cell\row
\cell gen_fetch()\cell ax-gdb.c\cell\row
\cell gen_scale()\cell ax-gdb.c\cell\row
\cell gen_sign_extend()\cell ax-gdb.c\cell\row
\cell gen_sizeof()\cell ax-gdb.c\cell\row
\cell gen_sub()\cell ax-gdb.c\cell\row
\cell gen_traced_pop()\cell ax-gdb.c\cell\row
\cell generic_register_size()\cell arch-utils.c\cell\row
\cell generic_use_struct_convention()\cell value.c\cell\row
\cell get_discrete_bounds()\cell gdbtypes.c\cell\row
\cell get_java_object_header_size()\cell jv-lang.c\cell\row
\cell get_java_utf8_name()\cell jv-lang.c\cell\row
\cell gnuv2_value_rtti_type()\cell gnu-v2-abi.c\cell\row
\cell gnuv3_baseclass_offset()\cell gnu-v3-abi.c\cell\row
\cell gnuv3_rtti_type()\cell gnu-v3-abi.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell hpacc_value_rtti_type()\cell hpacc-abi.c\cell\row
\cell init_array_element()\cell eval.c\cell\row
\cell init_regcache_descr()\cell regcache.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell is_pascal_string_type()\cell p-lang.c\cell\row
\cell java_class_from_object()\cell jv-lang.c\cell\row
\cell java_link_class_type()\cell jv-lang.c\cell\row
\cell java_val_print()\cell jv-valprint.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell legacy_store_return_value()\cell arch-utils.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell make_cvr_type()\cell gdbtypes.c\cell\row
\cell make_qualified_type()\cell gdbtypes.c\cell\row
\cell max_of_type()\cell ada-lang.c\cell\row
\cell min_of_type()\cell ada-lang.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell pack_long()\cell value.c\cell\row
\cell parse_symbol()\cell mdebugread.c\cell\row
\cell pascal_object_print_value()\cell p-valprint.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
\cell pascal_type_print_varspec_prefix()\cell p-typeprint.c\cell\row
\cell pascal_val_print()\cell p-valprint.c\cell\row
\cell patch_opaque_types()\cell coffread.c\cell\row
\cell patch_type()\cell coffread.c\cell\row
\cell print_equivalent_f77_float_type()\cell f-typeprint.c\cell\row
\cell print_floating()\cell valprint.c\cell\row
\cell print_floating_in_hex()\cell valprint.c\cell\row
\cell print_formatted()\cell printcmd.c\cell\row
\cell print_frame_args()\cell stack.c\cell\row
\cell print_scalar_formatted()\cell printcmd.c\cell\row
\cell print_symbol()\cell symmisc.c\cell\row
\cell printf_command()\cell printcmd.c\cell\row
\cell process_coff_symbol()\cell coffread.c\cell\row
\cell rank_one_type()\cell gdbtypes.c\cell\row
\cell read_memory_typed_address()\cell corefile.c\cell\row
\cell read_tag_pointer_type()\cell dwarf2read.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell recursive_dump_type()\cell gdbtypes.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\cell replace_type()\cell gdbtypes.c\cell\row
\cell scm_get_field()\cell scm-lang.c\cell\row
\cell scm_ipruk()\cell scm-valprint.c\cell\row
\cell scm_lreadr()\cell scm-exp.c\cell\row
\cell scm_unpack()\cell scm-lang.c\cell\row
\cell scm_val_print()\cell scm-valprint.c\cell\row
\cell scope_info()\cell tracepoint.c\cell\row
\cell search_struct_field()\cell valops.c\cell\row
\cell search_struct_method()\cell valops.c\cell\row
\cell set_internalvar_component()\cell value.c\cell\row
\cell signed_pointer_to_address()\cell findvar.c\cell\row
\cell size_of_encoded_value()\cell dwarf2-frame.c\cell\row
\cell store_typed_floating()\cell doublest.c\cell\row
\cell struct_type()\cell dwarfread.c\cell\row
\cell to_fixed_array_type()\cell ada-lang.c\cell\row
\cell to_record_with_fixed_variant_part()\cell ada-lang.c\cell\row
\cell type_wider_than()\cell ax-gdb.c\cell\row
\cell unpack_double()\cell value.c\cell\row
\cell unpack_long()\cell value.c\cell\row
\cell unsigned_address_to_pointer()\cell findvar.c\cell\row
\cell unsigned_pointer_to_address()\cell findvar.c\cell\row
\cell upgrade_type()\cell mdebugread.c\cell\row
\cell val_elt_addr()\cell valprint.c\cell\row
\cell val_print_array_elements()\cell valprint.c\cell\row
\cell val_print_packed_array_elements()\cell ada-valprint.c\cell\row
\cell val_print_type_code_int()\cell valprint.c\cell\row
\cell value_arg_coerce()\cell infcall.c\cell\row
\cell value_array()\cell valops.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_at()\cell valops.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_bitstring()\cell valops.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_change_enclosing_type()\cell value.c\cell\row
\cell value_complement()\cell valarith.c\cell\row
\cell value_concat()\cell valarith.c\cell\row
\cell value_contents_equal()\cell value.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_equal()\cell valarith.c\cell\row
\cell value_fetch_lazy()\cell valops.c\cell\row
\cell value_from_contents_and_address()\cell ada-lang.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_from_register()\cell findvar.c\cell\row
\cell value_literal_complex()\cell valops.c\cell\row
\cell value_logical_not()\cell valarith.c\cell\row
\cell value_neg()\cell valarith.c\cell\row
\cell value_of_builtin_frame_fp_reg()\cell std-regs.c\cell\row
\cell value_of_builtin_frame_pc_reg()\cell std-regs.c\cell\row
\cell value_of_builtin_frame_reg()\cell std-regs.c\cell\row
\cell value_pos()\cell valarith.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
\cell value_repeat()\cell valops.c\cell\row
\cell value_slice()\cell valops.c\cell\row
\cell value_strcmp()\cell valarith.c\cell\row
\cell value_sub()\cell valarith.c\cell\row
\cell value_subscripted_rvalue()\cell valarith.c\cell\row
\cell watchpoint_equal()\cell breakpoint.c\cell\row
Refs Var:\cell first_bitfield_index\cell objc-lang.c\cell\row
\cell first_bitfield_offset\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function objc_fixup_ivar_offset()\par}
{\s5\f1\fs20\ql\sb50\sa50 int objc_fixup_ivar_offset ( const struct type* type, int ivar )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbtypes.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell safe_read_memory_unsigned_integer()\cell corefile.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___snprintf_chk(), __builtin_object_size(), strlen()\cell\cell\row
Called by:\cell ada_aligned_value_addr()\cell ada-lang.c\cell\row
\cell ada_lookup_struct_elt_type()\cell ada-lang.c\cell\row
\cell ada_print_scalar()\cell ada-valprint.c\cell\row
\cell ada_search_struct_field()\cell ada-lang.c\cell\row
\cell ada_template_to_fixed_record_type_1()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell ada_value_primitive_field()\cell ada-lang.c\cell\row
\cell c_type_print_base()\cell c-typeprint.c\cell\row
\cell c_val_print()\cell c-valprint.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell convert_char_literal()\cell ada-exp.c\cell\row
\cell cp_print_class_member()\cell cp-valprint.c\cell\row
\cell cp_print_value_fields()\cell cp-valprint.c\cell\row
\cell desc_bound_bitpos()\cell ada-lang.c\cell\row
\cell discrete_type_low_bound()\cell ada-lang.c\cell\row
\cell evaluate_struct_tuple()\cell eval.c\cell\row
\cell fat_pntr_bounds_bitpos()\cell ada-lang.c\cell\row
\cell fat_pntr_data_bitpos()\cell ada-lang.c\cell\row
\cell find_method_list()\cell valops.c\cell\row
\cell find_struct_field()\cell ada-lang.c\cell\row
\cell gen_struct_ref()\cell ax-gdb.c\cell\row
\cell get_discrete_bounds()\cell gdbtypes.c\cell\row
\cell gnuv2_baseclass_offset()\cell gnu-v2-abi.c\cell\row
\cell gnuv2_value_rtti_type()\cell gnu-v2-abi.c\cell\row
\cell gnuv3_baseclass_offset()\cell gnu-v3-abi.c\cell\row
\cell is_pascal_string_type()\cell p-lang.c\cell\row
\cell java_print_value_fields()\cell jv-valprint.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell pascal_object_print_class_member()\cell p-valprint.c\cell\row
\cell pascal_object_print_value_fields()\cell p-valprint.c\cell\row
\cell pascal_type_print_base()\cell p-typeprint.c\cell\row
\cell pascal_val_print()\cell p-valprint.c\cell\row
\cell pos_atr()\cell ada-lang.c\cell\row
\cell print_enum_type()\cell ada-typeprint.c\cell\row
\cell print_field_values()\cell ada-valprint.c\cell\row
\cell print_optional_low_bound()\cell ada-valprint.c\cell\row
\cell print_range()\cell ada-typeprint.c\cell\row
\cell print_type_scalar()\cell typeprint.c\cell\row
\cell print_variant_part()\cell ada-valprint.c\cell\row
\cell recursive_dump_type()\cell gdbtypes.c\cell\row
\cell search_struct_field()\cell valops.c\cell\row
\cell search_struct_method()\cell valops.c\cell\row
\cell to_record_with_fixed_variant_part()\cell ada-lang.c\cell\row
\cell unpack_field_as_long()\cell value.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
\cell value_struct_elt_for_reference()\cell valops.c\cell\row
\cell value_val_atr()\cell ada-lang.c\cell\row
\cell vtable_address_point_offset()\cell gnu-v3-abi.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell bits_per_byte\cell objc-lang.c\cell\row
\cell cplus_struct_default\cell gdbtypes.c\cell\row
\cell first_bitfield_index\cell objc-lang.c\cell\row
\cell first_bitfield_offset\cell objc-lang.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell info_verbose\cell top.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function objc_handle_update()\par}
{\s5\f1\fs20\ql\sb50\sa50 int objc_handle_update ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell gdbarch_fetch_pointer_argument()\cell gdbarch.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell objc_read_trampoline_region()\cell objc-lang.c\cell\row
Refs Var:\cell builtin_type_void_func_ptr\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell objc_trampolines\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function objc_init_runtime_version()\par}
{\s5\f1\fs20\ql\sb50\sa50 void objc_init_runtime_version ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell find_libobjc_objfile()\cell objc-lang.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell reread_symbols_for_objfile()\cell symfile.c\cell\row
Refs Var:\cell objc_runtime_version\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function objc_init_trampoline_observer()\par}
{\s5\f1\fs20\ql\sb50\sa50 void objc_init_trampoline_observer ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell create_solib_event_breakpoint()\cell breakpoint.c\cell\row
\cell find_libobjc_objfile()\cell objc-lang.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell objc_clear_trampoline_data()\cell objc-lang.c\cell\row
\cell objc_read_trampoline_region()\cell objc-lang.c\cell\row
\cell objfile_set_load_state()\cell objfiles.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell read_memory_unsigned_integer()\cell corefile.c\cell\row
\cell  exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp(), xstrdup()\cell\cell\row
Called by:\cell reread_symbols_for_objfile()\cell symfile.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell info_verbose\cell top.c\cell\row
\cell objc_trampolines\cell objc-lang.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function objc_invalidate_objc_class()\par}
{\s5\f1\fs20\ql\sb50\sa50 void objc_invalidate_objc_class ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell new_objc_runtime_internals()\cell objc-lang.c\cell\row
Called by:\cell read_structure_type()\cell dwarf2read.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function objc_pc_at_fail_point()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum objc_handcall_fail_reasons objc_pc_at_fail_point ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell debugger_mode_fail_breakpoint\cell objc-lang.c\cell\row
\cell objc_exception_throw_breakpoint\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function objc_runtime_check_enabled_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int objc_runtime_check_enabled_p ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell objc_setup_safe_print()\cell objc-lang.c\cell\row
\cell set_non_blocking_mode_func()\cell objc-lang.c\cell\row
Refs Var:\cell use_non_blocking_mode\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function objc_runtime_lock_taken_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int objc_runtime_lock_taken_p ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell call_function_by_hand()\cell infcall.c\cell\row
\cell create_cached_function()\cell value.c\cell\row
\cell lookup_cached_function()\cell value.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell  exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()\cell\cell\row
Refs Var:\cell builtin_type_voidptrfuncptr\cell gdbtypes.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function objc_setup_safe_print()\par}
{\s5\f1\fs20\ql\sb50\sa50 int objc_setup_safe_print ( struct cleanup** cleanup )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell cli_out_new()\cell cli-out.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell make_cleanup_set_restore_scheduler_locking_mode()\cell utils.c\cell\row
\cell objc_check_safe_to_run_all_threads()\cell objc-lang.c\cell\row
\cell objc_runtime_check_enabled_p()\cell objc-lang.c\cell\row
\cell scheduler_lock_on_p()\cell infrun.c\cell\row
\cell ui_file_data()\cell ui-file.c\cell\row
\cell ui_file_rewind()\cell ui-file.c\cell\row
\cell  exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()\cell\cell\row
Used in:\cell init_remote_macosx_ops()\cell remote.c\cell\row
Refs Func:\cell null_cleanup()\cell utils.c\cell\row
Refs Var:\cell debug_handcall_setup\cell infrun.c\cell\row
\cell gdb_null\cell main.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell info_verbose\cell top.c\cell\row
\cell po_and_print_run_all_threads\cell objc-lang.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function objc_target_type_from_object()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* objc_target_type_from_object ( CORE_ADDR object_addr, struct block* block, int addrsize, char** class_name_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell add_classname_to_cache()\cell objc-lang.c\cell\row
\cell get_class_address_from_object()\cell objc-lang.c\cell\row
\cell lookup_classname_in_cache()\cell objc-lang.c\cell\row
\cell lookup_symbol()\cell symtab.c\cell\row
\cell new_objc_runtime_get_classname()\cell objc-lang.c\cell\row
\cell new_objc_runtime_internals()\cell objc-lang.c\cell\row
\cell read_memory_string()\cell corefile.c\cell\row
\cell read_memory_unsigned_integer()\cell corefile.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  isalnum(), isalpha(), xstrdup()\cell\cell\row
Called by:\cell value_objc_target_type()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function objcplus_demangle()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* objcplus_demangle ( const char* mangled, int options )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell objc_demangle()\cell objc-lang.c\cell\row
\cell  cplus_demangle()\cell\cell\row
Called by:\cell maintenance_demangle()\cell maint.c\cell\row
\cell symbol_find_demangled_name()\cell symtab.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function parse_method()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* parse_method ( char* method, char* type, char** class_str, char** category, char** selector )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell  isalnum(), isspace()\cell\cell\row
Called by:\cell find_imps()\cell objc-lang.c\cell\row
\cell find_methods()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function parse_selector()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* parse_selector ( char* method, char** selector )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell  isalnum(), isspace()\cell\cell\row
Called by:\cell find_imps()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function pc_in_objc_trampoline_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int pc_in_objc_trampoline_p ( CORE_ADDR pc, uint32_t* flags )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Called by:\cell find_objc_msgcall()\cell objc-lang.c\cell\row
\cell x86_frame_cache()\cell target/x86-shared-tdep.c\cell\row
Refs Var:\cell objc_trampolines\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function reinitialize_objc()\par}
{\s5\f1\fs20\ql\sb50\sa50 void reinitialize_objc ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell objc_clear_caches()\cell objc-lang.c\cell\row
\cell objc_clear_trampoline_data()\cell objc-lang.c\cell\row
Called by:\cell generic_mourn_inferior()\cell target/target.c\cell\row
Refs Var:\cell cached_objc_objfile\cell objc-lang.c\cell\row
\cell debug_mode_set_p\cell objc-lang.c\cell\row
\cell debug_mode_set_reason\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function should_lookup_objc_class()\par}
{\s5\f1\fs20\ql\sb50\sa50 int should_lookup_objc_class ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Called by:\cell c_lex()\cell c-exp.c\cell\row
Refs Var:\cell lookup_objc_class_p\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function start_msglist()\par}
{\s5\f1\fs20\ql\sb50\sa50 void start_msglist ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell c_parse()\cell c-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
Refs Var:\cell msglist_len\cell objc-lang.c\cell\row
\cell msglist_sel\cell objc-lang.c\cell\row
\cell selname_chain\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function tell_objc_msgsend_cacher_objfile_changed()\par}
{\s5\f1\fs20\ql\sb50\sa50 void tell_objc_msgsend_cacher_objfile_changed ( struct objfile* obj )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell objc_clear_trampoline_data()\cell objc-lang.c\cell\row
\cell  strstr()\cell\cell\row
Called by:\cell remove_symbol_file_command()\cell symfile.c\cell\row
\cell reopen_exec_file()\cell corefile.c\cell\row
\cell replace_psymbols_with_correct_psymbols()\cell symfile.c\cell\row
\cell reread_symbols_for_objfile()\cell symfile.c\cell\row
\cell slide_objfile()\cell objfiles.c\cell\row
Refs Var:\cell cached_objc_msgsend_table_is_valid\cell objc-lang.c\cell\row
\cell cached_objc_objfile\cell objc-lang.c\cell\row
\cell objc_library_name\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_nsstring()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_nsstring ( char* ptr, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell alloc_type()\cell gdbtypes.c\cell\row
\cell call_function_by_hand()\cell infcall.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_function_in_inferior()\cell valops.c\cell\row
\cell lookup_child_selector()\cell objc-lang.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_objc_class()\cell objc-lang.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell lookup_struct_typedef()\cell objc-lang.c\cell\row
\cell make_function_type()\cell gdbtypes.c\cell\row
\cell value_coerce_array()\cell valops.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_string()\cell valops.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
Refs Var:\cell builtin_type_long\cell gdbtypes.c\cell\row
\cell builtin_type_void\cell gdbtypes.c\cell\row
\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_objc_target_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* value_objc_target_type ( struct value* val, struct block* block, char** dynamic_type_handle )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell objc_target_type_from_object()\cell objc-lang.c\cell\row
\cell strcmp_iw()\cell utils.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell safe_value_objc_target_type()\cell wrapper.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_class_to_cache()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct rb_tree_node* add_class_to_cache ( CORE_ADDR objc_class )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell rb_tree_find_node()\cell dwarf2read.c\cell\row
\cell rb_tree_insert()\cell dwarf2read.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell add_real_class_to_cache()\cell objc-lang.c\cell\row
\cell new_objc_runtime_class_getClass()\cell objc-lang.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
Refs Var:\cell real_class_tree\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_classname_to_cache()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_classname_to_cache ( CORE_ADDR objc_class, char* classname )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell rb_tree_insert()\cell dwarf2read.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  xstrdup()\cell\cell\row
Called by:\cell objc_target_type_from_object()\cell objc-lang.c\cell\row
Refs Var:\cell classname_tree\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_implementation_to_cache()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_implementation_to_cache ( CORE_ADDR objc_class, CORE_ADDR sel, CORE_ADDR implementation )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell rb_tree_insert()\cell dwarf2read.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell find_implementation()\cell objc-lang.c\cell\row
\cell find_implementation_from_class()\cell objc-lang.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
Refs Var:\cell implementation_tree\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_real_class_to_cache()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_real_class_to_cache ( CORE_ADDR objc_class, CORE_ADDR real_class )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell add_class_to_cache()\cell objc-lang.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell get_class_address_from_object()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function class_valid_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int class_valid_p ( CORE_ADDR objc_class )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell rb_tree_find_node()\cell dwarf2read.c\cell\row
Called by:\cell new_objc_runtime_class_getClass()\cell objc-lang.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
Refs Var:\cell real_class_tree\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function classes_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void classes_info ( const char* regexp, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell begin_line()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell puts_filtered_tabular()\cell utils.c\cell\row
\cell quit()\cell utils.c\cell\row
\cell re_comp()\cell utils.c\cell\row
\cell re_exec()\cell utils.c\cell\row
\cell specialcmp()\cell objc-lang.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell  __builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), qsort(), strchr(), strlen()\cell\cell\row
Used in:\cell _initialize_objc_language()\cell objc-lang.c\cell\row
Refs Func:\cell compare_classes()\cell objc-lang.c\cell\row
Refs Var:\cell quit_flag\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function compare_classes()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int compare_classes ( const void* a, const void* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
\cell specialcmp()\cell objc-lang.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
Used in:\cell classes_info()\cell objc-lang.c\cell\row
\cell find_imps()\cell objc-lang.c\cell\row
Refs Var:\cell demangle\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function compare_selectors()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int compare_selectors ( const void* a, const void* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
\cell specialcmp()\cell objc-lang.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell  strchr()\cell\cell\row
Used in:\cell selectors_info()\cell objc-lang.c\cell\row
Refs Var:\cell demangle\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_cleanup_objc_exception_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_cleanup_objc_exception_breakpoint ( void* unused )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell delete_breakpoint()\cell breakpoint.c\cell\row
Used in:\cell make_cleanup_init_objc_exception_catcher()\cell objc-lang.c\cell\row
Refs Var:\cell objc_exception_throw_breakpoint\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_end_debugger_mode()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_end_debugger_mode ( void* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell call_function_by_hand()\cell infcall.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell hide_step_resume_breakpoint()\cell infrun.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_cached_function()\cell value.c\cell\row
\cell make_cleanup_enable_disable_bpts_during_operation()\cell breakpoint.c\cell\row
\cell make_cleanup_set_restore_scheduler_locking_mode()\cell utils.c\cell\row
\cell make_cleanup_set_restore_unwind_on_signal()\cell infcall.c\cell\row
\cell restore_step_resume_breakpoint()\cell infrun.c\cell\row
\cell start_timer()\cell maint.c\cell\row
\cell  exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp(), throw_exception()\cell\cell\row
Used in:\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell debug_handcall_setup\cell infrun.c\cell\row
\cell debug_mode_set_p\cell objc-lang.c\cell\row
\cell debug_mode_set_reason\cell objc-lang.c\cell\row
\cell debug_mode_timer\cell objc-lang.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell maint_use_timers\cell maint.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_reset_debug_mode_flag()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_reset_debug_mode_flag ( void* unused )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
Refs Var:\cell debug_handcall_setup\cell infrun.c\cell\row
\cell debug_mode_set_p\cell objc-lang.c\cell\row
\cell debug_mode_set_reason\cell objc-lang.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_implementation_from_class()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR find_implementation_from_class ( CORE_ADDR objc_class, CORE_ADDR sel )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell add_implementation_to_cache()\cell objc-lang.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell lookup_implementation_in_cache()\cell objc-lang.c\cell\row
\cell lookup_objc_class()\cell objc-lang.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell new_objc_runtime_internals()\cell objc-lang.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell read_memory_string()\cell corefile.c\cell\row
\cell read_memory_unsigned_integer()\cell corefile.c\cell\row
\cell read_objc_class()\cell objc-lang.c\cell\row
\cell read_objc_method_list_method()\cell objc-lang.c\cell\row
\cell read_objc_method_list_nmethods()\cell objc-lang.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), isprint(), sigsetjmp(), strcmp()\cell\cell\row
Called by:\cell find_implementation()\cell objc-lang.c\cell\row
\cell resolve_msgsend_super()\cell objc-lang.c\cell\row
\cell resolve_msgsend_super_stret()\cell objc-lang.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell debug_objc\cell objc-lang.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell info_verbose\cell top.c\cell\row
\cell objc_class_method_limit\cell objc-lang.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_methods()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void find_methods ( struct symtab* symtab, char type, const char* class_str, const char* category, const char* selector, struct symbol** syms, unsigned int* nsym, unsigned int* ndebug )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell block_contains_pc()\cell block.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell find_pc_sect_function()\cell blockframe.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup_restrict_to_objfile()\cell objfiles.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell parse_method()\cell objc-lang.c\cell\row
\cell quit()\cell utils.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), strcmp(), strlen()\cell\cell\row
Called by:\cell find_imps()\cell objc-lang.c\cell\row
Refs Var:\cell quit_flag\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_objc_msgcall_submethod()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int find_objc_msgcall_submethod ( int (*f)(CORE_ADDR,CORE_ADDR*), CORE_ADDR pc, CORE_ADDR* new_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  catch_errors()\cell\cell\row
Called by:\cell find_objc_msgcall()\cell objc-lang.c\cell\row
Refs Func:\cell find_objc_msgcall_submethod_helper()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_objc_msgcall_submethod_helper()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int find_objc_msgcall_submethod_helper ( void* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell find_objc_msgcall_submethod()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_objc_msgsend()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void find_objc_msgsend ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell find_pc_partial_function_no_inlined()\cell blockframe.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
Called by:\cell find_objc_msgcall()\cell objc-lang.c\cell\row
Refs Var:\cell cached_objc_msgsend_table_is_valid\cell objc-lang.c\cell\row
\cell methcalls\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function free_rb_tree_data()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void free_rb_tree_data ( struct rb_tree_node* root, void (*free_fn)(void*) )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell free_rb_tree_data()\cell objc-lang.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell free_rb_tree_data()\cell objc-lang.c\cell\row
\cell objc_clear_caches()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_class_address_from_object()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR get_class_address_from_object ( CORE_ADDR object_addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell add_real_class_to_cache()\cell objc-lang.c\cell\row
\cell call_function_by_hand()\cell infcall.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell gdbarch_addr_bits_remove()\cell gdbarch.c\cell\row
\cell lookup_child_selector()\cell objc-lang.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell lookup_real_class_in_cache()\cell objc-lang.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell make_cleanup_set_restore_scheduler_locking_mode()\cell utils.c\cell\row
\cell make_cleanup_set_restore_unwind_on_signal()\cell infcall.c\cell\row
\cell make_cleanup_ui_out_suppress_output()\cell utils.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
Called by:\cell find_implementation()\cell objc-lang.c\cell\row
\cell objc_target_type_from_object()\cell objc-lang.c\cell\row
Refs Var:\cell builtin_type_void_data_ptr\cell gdbtypes.c\cell\row
\cell builtin_type_voidptrfuncptr\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell debug_objc\cell objc-lang.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function init_debugger_mode_fail_notification()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int init_debugger_mode_fail_notification ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell create_objc_hook_breakpoint()\cell breakpoint.c\cell\row
Called by:\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
Refs Var:\cell debugger_mode_fail_breakpoint\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function lookup_classname_in_cache()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* lookup_classname_in_cache ( CORE_ADDR objc_class )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell rb_tree_find_node_all_keys()\cell dwarf2read.c\cell\row
Called by:\cell objc_target_type_from_object()\cell objc-lang.c\cell\row
Refs Var:\cell classname_tree\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function lookup_implementation_in_cache()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR lookup_implementation_in_cache ( CORE_ADDR objc_class, CORE_ADDR sel )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell rb_tree_find_node_all_keys()\cell dwarf2read.c\cell\row
Called by:\cell find_implementation()\cell objc-lang.c\cell\row
\cell find_implementation_from_class()\cell objc-lang.c\cell\row
\cell resolve_newruntime_objc_msgsendsuper()\cell objc-lang.c\cell\row
Refs Var:\cell implementation_tree\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function lookup_real_class_in_cache()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR lookup_real_class_in_cache ( CORE_ADDR objc_class )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell rb_tree_find_node()\cell dwarf2read.c\cell\row
Called by:\cell get_class_address_from_object()\cell objc-lang.c\cell\row
Refs Var:\cell real_class_tree\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function new_objc_runtime_class_getClass()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR new_objc_runtime_class_getClass ( struct value* infargs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell add_class_to_cache()\cell objc-lang.c\cell\row
\cell call_function_by_hand()\cell infcall.c\cell\row
\cell class_valid_p()\cell objc-lang.c\cell\row
\cell create_cached_function()\cell value.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell hand_function_call_timeout_p()\cell infcall.c\cell\row
\cell lookup_cached_function()\cell value.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell set_hand_function_call_timeout()\cell infcall.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()\cell\cell\row
Called by:\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell new_objc_runtime_get_classname()\cell objc-lang.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
Refs Var:\cell builtin_type_voidptrfuncptr\cell gdbtypes.c\cell\row
\cell debug_objc\cell objc-lang.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function new_objc_runtime_find_impl()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR new_objc_runtime_find_impl ( CORE_ADDR objc_class, CORE_ADDR sel, int stret )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell add_implementation_to_cache()\cell objc-lang.c\cell\row
\cell call_function_by_hand()\cell infcall.c\cell\row
\cell create_cached_function()\cell value.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell find_pc_partial_function_no_inlined()\cell blockframe.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell gdbarch_addr_bits_remove()\cell gdbarch.c\cell\row
\cell lookup_cached_function()\cell value.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell make_cleanup_set_restore_scheduler_locking_mode()\cell utils.c\cell\row
\cell make_cleanup_set_restore_unwind_on_signal()\cell infcall.c\cell\row
\cell make_cleanup_ui_out_suppress_output()\cell utils.c\cell\row
\cell new_objc_runtime_class_getClass()\cell objc-lang.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell release_value()\cell value.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell find_implementation()\cell objc-lang.c\cell\row
\cell find_implementation_from_class()\cell objc-lang.c\cell\row
\cell get_class_address_from_object()\cell objc-lang.c\cell\row
\cell resolve_newruntime_objc_msgsendsuper()\cell objc-lang.c\cell\row
Refs Func:\cell value_free()\cell value.c\cell\row
Refs Var:\cell builtin_type_void_data_ptr\cell gdbtypes.c\cell\row
\cell builtin_type_voidptrfuncptr\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell debug_objc\cell objc-lang.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function new_objc_runtime_get_classname()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int new_objc_runtime_get_classname ( CORE_ADDR objc_class, char* class_name, int size )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell call_function_by_hand()\cell infcall.c\cell\row
\cell create_cached_function()\cell value.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell lookup_cached_function()\cell value.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell make_cleanup_set_restore_scheduler_locking_mode()\cell utils.c\cell\row
\cell make_cleanup_set_restore_unwind_on_signal()\cell infcall.c\cell\row
\cell make_cleanup_ui_out_suppress_output()\cell utils.c\cell\row
\cell new_objc_runtime_class_getClass()\cell objc-lang.c\cell\row
\cell read_memory_string()\cell corefile.c\cell\row
\cell release_value()\cell value.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
\cell  exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()\cell\cell\row
Called by:\cell objc_target_type_from_object()\cell objc-lang.c\cell\row
Refs Func:\cell value_free()\cell value.c\cell\row
Refs Var:\cell builtin_type_void_data_ptr\cell gdbtypes.c\cell\row
\cell builtin_type_voidptrfuncptr\cell gdbtypes.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function objc_clear_trampoline_data()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void objc_clear_trampoline_data ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell objc_init_trampoline_observer()\cell objc-lang.c\cell\row
\cell reinitialize_objc()\cell objc-lang.c\cell\row
\cell tell_objc_msgsend_cacher_objfile_changed()\cell objc-lang.c\cell\row
Refs Var:\cell objc_trampolines\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function objc_create_fundamental_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* objc_create_fundamental_type ( struct objfile* objfile, int c_typeid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_double_bit()\cell gdbarch.c\cell\row
\cell gdbarch_float_bit()\cell gdbarch.c\cell\row
\cell gdbarch_int_bit()\cell gdbarch.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell gdbarch_long_double_bit()\cell gdbarch.c\cell\row
\cell gdbarch_long_long_bit()\cell gdbarch.c\cell\row
\cell gdbarch_short_bit()\cell gdbarch.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell warning()\cell utils.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function objc_emit_char()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void objc_emit_char ( int c, struct ui_file* stream, int quoter )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
Called by:\cell objc_printchar()\cell objc-lang.c\cell\row
\cell objc_printstr()\cell objc-lang.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
Refs Var:\cell sevenbit_strings\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function objc_printchar()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void objc_printchar ( int c, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fputs_filtered()\cell utils.c\cell\row
\cell objc_emit_char()\cell objc-lang.c\cell\row
Called by:\cell objc_printstr()\cell objc-lang.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function objc_printstr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void objc_printstr ( struct ui_file* stream, const gdb_byte* string, unsigned int length, int width, int force_ellipses )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell objc_emit_char()\cell objc-lang.c\cell\row
\cell objc_printchar()\cell objc-lang.c\cell\row
\cell quit()\cell utils.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
Refs Var:\cell inspect_it\cell printcmd.c\cell\row
\cell print_max\cell valprint.c\cell\row
\cell quit_flag\cell utils.c\cell\row
\cell repeat_count_threshold\cell valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function objc_read_trampoline_region()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct objc_trampoline_region* objc_read_trampoline_region ( CORE_ADDR addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell discard_cleanups()\cell utils.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell read_memory_unsigned_integer()\cell corefile.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell objc_handle_update()\cell objc-lang.c\cell\row
\cell objc_init_trampoline_observer()\cell objc-lang.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function objc_skip_trampoline()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR objc_skip_trampoline ( CORE_ADDR stop_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell find_objc_msgcall()\cell objc-lang.c\cell\row
\cell gdbarch_skip_trampoline_code()\cell gdbarch.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_object_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_object_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell call_function_by_hand()\cell infcall.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_function_in_inferior()\cell valops.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_typename()\cell gdbtypes.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell make_cleanup_set_restore_unwind_on_signal()\cell infcall.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell parse_expression()\cell parse.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell quit()\cell utils.c\cell\row
\cell read_memory()\cell corefile.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
\cell scheduler_lock_on_p()\cell infrun.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
Used in:\cell _initialize_objc_language()\cell objc-lang.c\cell\row
Refs Func:\cell free_current_contents()\cell utils.c\cell\row
Refs Var:\cell builtin_type_void_data_ptr\cell gdbtypes.c\cell\row
\cell builtin_type_voidptrfuncptr\cell gdbtypes.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell innermost_block\cell parse.c\cell\row
\cell po_and_print_run_all_threads\cell objc-lang.c\cell\row
\cell quit_flag\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_objc_class()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_objc_class ( CORE_ADDR addr, struct objc_class* inf_objc_class )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell read_memory_unsigned_integer()\cell corefile.c\cell\row
Called by:\cell find_implementation_from_class()\cell objc-lang.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_objc_method()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_objc_method ( CORE_ADDR addr, struct objc_method* method )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell read_memory_unsigned_integer()\cell corefile.c\cell\row
Called by:\cell read_objc_method_list_method()\cell objc-lang.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_objc_method_list_method()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_objc_method_list_method ( CORE_ADDR addr, unsigned long num, struct objc_method* method )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell read_objc_method()\cell objc-lang.c\cell\row
\cell read_objc_method_list_nmethods()\cell objc-lang.c\cell\row
Called by:\cell find_implementation_from_class()\cell objc-lang.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_objc_method_list_nmethods()\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned long read_objc_method_list_nmethods ( CORE_ADDR addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell read_memory_unsigned_integer()\cell corefile.c\cell\row
Called by:\cell find_implementation_from_class()\cell objc-lang.c\cell\row
\cell read_objc_method_list_method()\cell objc-lang.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_objc_object()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_objc_object ( CORE_ADDR addr, struct objc_object* object )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell add_class_to_cache()\cell objc-lang.c\cell\row
\cell call_function_by_hand()\cell infcall.c\cell\row
\cell class_valid_p()\cell objc-lang.c\cell\row
\cell create_cached_function()\cell value.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell hand_function_call_timeout_p()\cell infcall.c\cell\row
\cell lookup_cached_function()\cell value.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell make_cleanup_set_restore_unwind_on_signal()\cell infcall.c\cell\row
\cell make_cleanup_ui_out_suppress_output()\cell utils.c\cell\row
\cell new_objc_runtime_class_getClass()\cell objc-lang.c\cell\row
\cell new_objc_runtime_internals()\cell objc-lang.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell safe_read_memory_unsigned_integer()\cell corefile.c\cell\row
\cell set_hand_function_call_timeout()\cell infcall.c\cell\row
\cell ui_file_rewind()\cell ui-file.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()\cell\cell\row
Called by:\cell find_implementation()\cell objc-lang.c\cell\row
\cell get_class_address_from_object()\cell objc-lang.c\cell\row
\cell print_object_command()\cell objc-lang.c\cell\row
Refs Var:\cell builtin_type_void_data_ptr\cell gdbtypes.c\cell\row
\cell builtin_type_voidptrfuncptr\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell debug_objc\cell objc-lang.c\cell\row
\cell gdb_null\cell main.c\cell\row
\cell gdb_stderr\cell main.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell info_verbose\cell top.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_objc_super()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_objc_super ( CORE_ADDR addr, struct objc_super* super )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell read_memory_unsigned_integer()\cell corefile.c\cell\row
Called by:\cell resolve_msgsend_super()\cell objc-lang.c\cell\row
\cell resolve_msgsend_super_stret()\cell objc-lang.c\cell\row
\cell resolve_newruntime_objc_msgsendsuper()\cell objc-lang.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function reset_child_selector_cache()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void reset_child_selector_cache ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xfree()\cell utils.c\cell\row
Called by:\cell lookup_child_selector()\cell objc-lang.c\cell\row
Refs Var:\cell selector_hash\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve_msgsend()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int resolve_msgsend ( CORE_ADDR pc, CORE_ADDR* new_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell find_implementation()\cell objc-lang.c\cell\row
\cell gdbarch_fetch_pointer_argument()\cell gdbarch.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
Refs Var:\cell builtin_type_void_func_ptr\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve_msgsend_fixedup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int resolve_msgsend_fixedup ( CORE_ADDR pc, CORE_ADDR* new_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell resolve_newruntime_objc_msgsend()\cell objc-lang.c\cell\row
Called by:\cell find_objc_msgcall()\cell objc-lang.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve_msgsend_fixup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int resolve_msgsend_fixup ( CORE_ADDR pc, CORE_ADDR* new_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell resolve_newruntime_objc_msgsend()\cell objc-lang.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve_msgsend_stret()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int resolve_msgsend_stret ( CORE_ADDR pc, CORE_ADDR* new_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell find_implementation()\cell objc-lang.c\cell\row
\cell gdbarch_fetch_pointer_argument()\cell gdbarch.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
Refs Var:\cell builtin_type_void_func_ptr\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve_msgsend_stret_fixedup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int resolve_msgsend_stret_fixedup ( CORE_ADDR pc, CORE_ADDR* new_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell resolve_newruntime_objc_msgsend()\cell objc-lang.c\cell\row
Called by:\cell find_objc_msgcall()\cell objc-lang.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve_msgsend_stret_fixup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int resolve_msgsend_stret_fixup ( CORE_ADDR pc, CORE_ADDR* new_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell resolve_newruntime_objc_msgsend()\cell objc-lang.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve_msgsend_super()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int resolve_msgsend_super ( CORE_ADDR pc, CORE_ADDR* new_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell find_implementation_from_class()\cell objc-lang.c\cell\row
\cell gdbarch_fetch_pointer_argument()\cell gdbarch.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell read_objc_super()\cell objc-lang.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
Refs Var:\cell builtin_type_void_func_ptr\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve_msgsend_super_stret()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int resolve_msgsend_super_stret ( CORE_ADDR pc, CORE_ADDR* new_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell find_implementation_from_class()\cell objc-lang.c\cell\row
\cell gdbarch_fetch_pointer_argument()\cell gdbarch.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell read_objc_super()\cell objc-lang.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
Refs Var:\cell builtin_type_void_func_ptr\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve_msgsendsuper2()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int resolve_msgsendsuper2 ( CORE_ADDR pc, CORE_ADDR* new_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell resolve_newruntime_objc_msgsendsuper()\cell objc-lang.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve_msgsendsuper2_fixedup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int resolve_msgsendsuper2_fixedup ( CORE_ADDR pc, CORE_ADDR* new_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell resolve_newruntime_objc_msgsendsuper()\cell objc-lang.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve_msgsendsuper2_fixup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int resolve_msgsendsuper2_fixup ( CORE_ADDR pc, CORE_ADDR* new_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell resolve_newruntime_objc_msgsendsuper()\cell objc-lang.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve_msgsendsuper2_stret()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int resolve_msgsendsuper2_stret ( CORE_ADDR pc, CORE_ADDR* new_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell resolve_newruntime_objc_msgsendsuper()\cell objc-lang.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve_msgsendsuper2_stret_fixedup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int resolve_msgsendsuper2_stret_fixedup ( CORE_ADDR pc, CORE_ADDR* new_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell resolve_newruntime_objc_msgsendsuper()\cell objc-lang.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve_msgsendsuper2_stret_fixup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int resolve_msgsendsuper2_stret_fixup ( CORE_ADDR pc, CORE_ADDR* new_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell objc-lang.c\cell\cell\row
Calls: \cell resolve_newruntime_objc_msgsendsuper()\cell objc-lang.c\cell\row
Used in:\cell objc-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve_newruntime_objc_msgsend()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int resolve_newruntime_objc_msgsend ( CORE_ADDR pc, CORE_ADDR* new_pc, int fixedup, int stret )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell find_implementation()\cell objc-lang.c\cell\row
\cell gdbarch_fetch_pointer_argument()\cell gdbarch.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell lookup_child_selector()\cell objc-lang.c\cell\row
\cell read_memory_string()\cell corefile.c\cell\row
\cell read_memory_unsigned_integer()\cell corefile.c\cell\row
Called by:\cell resolve_msgsend_fixedup()\cell objc-lang.c\cell\row
\cell resolve_msgsend_fixup()\cell objc-lang.c\cell\row
\cell resolve_msgsend_stret_fixedup()\cell objc-lang.c\cell\row
\cell resolve_msgsend_stret_fixup()\cell objc-lang.c\cell\row
Refs Var:\cell builtin_type_void_func_ptr\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve_newruntime_objc_msgsendsuper()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int resolve_newruntime_objc_msgsendsuper ( CORE_ADDR pc, CORE_ADDR* new_pc, int fixedup, int stret )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_fetch_pointer_argument()\cell gdbarch.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell lookup_child_selector()\cell objc-lang.c\cell\row
\cell lookup_implementation_in_cache()\cell objc-lang.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell read_memory_string()\cell corefile.c\cell\row
\cell read_memory_unsigned_integer()\cell corefile.c\cell\row
\cell read_objc_super()\cell objc-lang.c\cell\row
Called by:\cell resolve_msgsendsuper2()\cell objc-lang.c\cell\row
\cell resolve_msgsendsuper2_fixedup()\cell objc-lang.c\cell\row
\cell resolve_msgsendsuper2_fixup()\cell objc-lang.c\cell\row
\cell resolve_msgsendsuper2_stret()\cell objc-lang.c\cell\row
\cell resolve_msgsendsuper2_stret_fixedup()\cell objc-lang.c\cell\row
\cell resolve_msgsendsuper2_stret_fixup()\cell objc-lang.c\cell\row
Refs Var:\cell builtin_type_void_func_ptr\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function selectors_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void selectors_info ( const char* regexp, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell begin_line()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell puts_filtered_tabular()\cell utils.c\cell\row
\cell quit()\cell utils.c\cell\row
\cell re_comp()\cell utils.c\cell\row
\cell re_exec()\cell utils.c\cell\row
\cell specialcmp()\cell objc-lang.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell  __builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), qsort(), strchr(), strlen()\cell\cell\row
Used in:\cell _initialize_objc_language()\cell objc-lang.c\cell\row
Refs Func:\cell compare_selectors()\cell objc-lang.c\cell\row
Refs Var:\cell quit_flag\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_non_blocking_mode_func()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_non_blocking_mode_func ( const char* args, int from_tty, struct cmd_list_element* c )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell do_hand_call_cleanups()\cell utils.c\cell\row
\cell objc_runtime_check_enabled_p()\cell objc-lang.c\cell\row
Used in:\cell _initialize_objc_lang()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function specialcmp()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int specialcmp ( const char* a, const char* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell classes_info()\cell objc-lang.c\cell\row
\cell compare_classes()\cell objc-lang.c\cell\row
\cell compare_selectors()\cell objc-lang.c\cell\row
\cell selectors_info()\cell objc-lang.c\cell\row
\intbl0
}
