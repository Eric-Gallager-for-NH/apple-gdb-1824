<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF wrapper.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for wrapper.c of gdb.cxref.
<author>cxref

<sect>File wrapper.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;wrapper.h&quot;</tt>
<itemize>
<item><tt>#include &quot;gdb.h&quot;</tt>
<item><tt>#include &quot;varobj.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;varobj.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;objc-lang.h&quot;</tt>
<itemize>
<item><tt>#include &lt;Availability.h&gt;</tt>
</itemize>
</itemize>

<sect1>Global Function gdb_evaluate_expression()

<p><tt>int gdb_evaluate_expression ( struct expression* exp, struct value** value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>wrapper.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>evaluate_expression()  :  eval.c
<item>set_unwind_on_signal()  :  infcall.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_evaluate_expression()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function gdb_evaluate_type()

<p><tt>int gdb_evaluate_type ( struct expression* exp, struct value** value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>wrapper.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>evaluate_type()  :  eval.c
<item>set_unwind_on_signal()  :  infcall.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_evaluate_type()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function gdb_parse_and_eval_type()

<p><tt>int gdb_parse_and_eval_type ( char* p, int length, struct type** type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>wrapper.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>parse_and_eval_type()  :  eval.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>safe_parse_type()  :  gdbtypes.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function gdb_parse_exp_1()

<p><tt>int gdb_parse_exp_1 ( const char** stringptr, struct block* block, int comma, struct expression** expression )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>wrapper.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>parse_exp_1()  :  parse.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>condition_command_1()  :  breakpoint.c
<item>create_breakpoints()  :  breakpoint.c
<item>varobj_parse_exp_1()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function gdb_print_expression()

<p><tt>int gdb_print_expression ( struct expression* exp, struct ui_file* stb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>wrapper.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>print_expression()  :  expprint.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>mention()  :  breakpoint.c
<item>print_one_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function gdb_value_assign()

<p><tt>int gdb_value_assign ( struct value* val1, struct value* val2, struct value** result )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>wrapper.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_assign()  :  valops.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_set_value()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function gdb_value_cast()

<p><tt>int gdb_value_cast ( struct type* type, struct value* val, struct value** result )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>wrapper.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_cast()  :  valops.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_fixup_value()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function gdb_value_equal()

<p><tt>int gdb_value_equal ( struct value* val1, struct value* val2, int* result )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>wrapper.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_equal()  :  valarith.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>my_value_equal()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function gdb_value_fetch_lazy()

<p><tt>int gdb_value_fetch_lazy ( struct value* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>wrapper.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_fetch_lazy()  :  valops.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_value_of_root()  :  varobj.c
<item>c_value_of_variable()  :  varobj.c
<item>insert_breakpoints()  :  breakpoint.c
<item>value_of_child()  :  varobj.c
<item>varobj_create()  :  varobj.c
<item>varobj_update()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function gdb_value_ind()

<p><tt>int gdb_value_ind ( struct value* val, struct value** result )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>wrapper.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_ind()  :  valops.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_value_of_child()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function gdb_value_struct_elt()

<p><tt>enum gdb_rc gdb_value_struct_elt ( struct ui_out* uiout, struct value** result, struct value** argp, struct value** args, char* name, int* static_memfuncp, char* err )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>wrapper.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_struct_elt()  :  valops.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
</descrip>

<sect1>Global Function gdb_value_subscript()

<p><tt>int gdb_value_subscript ( struct value* val1, struct value* val2, struct value** result )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>wrapper.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_subscript()  :  valarith.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_value_of_child()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function gdb_varobj_get_value()

<p><tt>int gdb_varobj_get_value ( struct varobj* val1, char** result )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>wrapper.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>varobj_get_value()  :  varobj.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function safe_value_objc_target_type()

<p><tt>int safe_value_objc_target_type ( struct value* val, struct block* block, struct type** dynamic_type, char** dynamic_type_handle )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>wrapper.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ui_file_new()  :  ui-file.c
<item>value_objc_target_type()  :  objc-lang.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>varobj_fixup_value()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stderr  :  main.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

</article>
