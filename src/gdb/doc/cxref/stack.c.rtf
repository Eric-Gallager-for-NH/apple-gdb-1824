{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF stack.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File stack.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <ctype.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "source.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/demangle.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "annotate.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "stack.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dictionary.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exceptions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <setjmp.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "reggroups.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "regcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "solib.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct print_stack_frame_args\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct print_stack_frame_args}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct frame_info* fi;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int print_level;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum print_what print_what;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int print_args;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct print_args_args\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct print_args_args}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct symbol* func;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct frame_info* fi;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct ui_file* stream;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct backtrace_command_args\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct backtrace_command_args}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* count_exp;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int show_locals;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int from_tty;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct function_bounds\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct function_bounds}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR low;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR high;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable annotation_level\par}
{\s5\f1\fs20\ql\sb50\sa50 int annotation_level\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell ax-general.c\cell\cell\row
\cell bcache.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell charset.c\cell\cell\row
\cell cli-out.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell complaints.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-abi.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell demangle.c\cell\cell\row
\cell dictionary.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell doublest.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell environ.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-loop.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame-base.c\cell\cell\row
\cell frame-unwind.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell gnu-v2-abi.c\cell\cell\row
\cell gnu-v3-abi.c\cell\cell\row
\cell hpacc-abi.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell interps.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell kod-cisco.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell m2-valprint.c\cell\cell\row
\cell macrocmd.c\cell\cell\row
\cell macroexp.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell observer.c\cell\cell\row
\cell osabi.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell reggroups.c\cell\cell\row
\cell remote-fileio.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell ser-base.c\cell\cell\row
\cell ser-unix.c\cell\cell\row
\cell serial.c\cell\cell\row
\cell solib-null.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell std-regs.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell trad-frame.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-file.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell user-regs.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
\cell wrapper.c\cell\cell\row
Used in:\cell captured_main()\cell main.c\cell\row
\cell change_annotation_level()\cell event-top.c\cell\row
\cell command_line_handler()\cell event-top.c\cell\row
\cell command_line_input()\cell top.c\cell\row
\cell defaulted_query()\cell utils.c\cell\row
\cell init_main()\cell top.c\cell\row
\cell line_info()\cell source.c\cell\row
\cell print_frame_info()\cell stack.c\cell\row
\cell prompt_for_continue()\cell utils.c\cell\row
\cell query()\cell utils.c\cell\row
\cell step_1_inlining()\cell infcmd.c\cell\row
\cell step_once()\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable deprecated_selected_frame_level_changed_hook\par}
{\s5\f1\fs20\ql\sb50\sa50 void (*deprecated_selected_frame_level_changed_hook)(int)\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell ax-general.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-abi.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame-base.c\cell\cell\row
\cell frame-unwind.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell gnu-v2-abi.c\cell\cell\row
\cell gnu-v3-abi.c\cell\cell\row
\cell hpacc-abi.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell m2-valprint.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell std-regs.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell trad-frame.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell user-regs.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
\cell wrapper.c\cell\cell\row
Used in:\cell select_frame()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep External Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable addressprint\par}
{\s5\f1\fs20\ql\sb50\sa50 extern int addressprint\par}
\trowd\trgaph120\cellx1440\cellx5220
\intbl\plain
Defined in:\cell valprint.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_stack()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_stack ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell  add_com(), add_com_alias(), add_info(), add_info_alias()\cell\cell\row
Refs Func:\cell args_info()\cell stack.c\cell\row
\cell args_plus_locals_info()\cell stack.c\cell\row
\cell backtrace_command()\cell stack.c\cell\row
\cell backtrace_full_command()\cell stack.c\cell\row
\cell catch_info()\cell stack.c\cell\row
\cell current_frame_command()\cell stack.c\cell\row
\cell down_command()\cell stack.c\cell\row
\cell down_silently_command()\cell stack.c\cell\row
\cell frame_command()\cell stack.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell func_command()\cell stack.c\cell\row
\cell locals_info()\cell stack.c\cell\row
\cell return_command()\cell stack.c\cell\row
\cell select_frame_command()\cell stack.c\cell\row
\cell up_command()\cell stack.c\cell\row
\cell up_silently_command()\cell stack.c\cell\row
Refs Var:\cell dbx_commands\cell main.c\cell\row
\cell xdb_commands\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function args_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 void args_info ( const char* ignore, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell get_selected_frame()\cell frame.c\cell\row
\cell print_frame_arg_vars()\cell stack.c\cell\row
Called by:\cell args_plus_locals_info()\cell stack.c\cell\row
\cell trace_dump_command()\cell tracepoint.c\cell\row
Used in:\cell _initialize_stack()\cell stack.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_relative_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_info* find_relative_frame ( struct frame_info* frame, int* level_offset_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell get_next_frame()\cell frame.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
Called by:\cell down_silently_base()\cell stack.c\cell\row
\cell func_command()\cell stack.c\cell\row
\cell parse_frame_specification_1()\cell stack.c\cell\row
\cell up_silently_base()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 void frame_command ( const char* level_exp, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell clear_inlined_subroutine_print_frames()\cell inlining.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell print_stack_frame()\cell stack.c\cell\row
\cell select_frame_command()\cell stack.c\cell\row
Called by:\cell return_command()\cell stack.c\cell\row
Used in:\cell _initialize_stack()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum language get_frame_language ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell language.h\cell\cell\row
Calls: \cell find_pc_function()\cell blockframe.c\cell\row
\cell find_pc_symtab()\cell symtab.c\cell\row
\cell get_frame_address_in_block()\cell frame.c\cell\row
\cell get_frame_pc()\cell frame.c\cell\row
Called by:\cell execute_command()\cell top.c\cell\row
\cell set_language_command()\cell language.c\cell\row
\cell show_language_command()\cell language.c\cell\row
Refs Var:\cell deprecated_selected_frame\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_selected_block()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct block* get_selected_block ( CORE_ADDR* addr_in_block )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell block_for_pc()\cell block.c\cell\row
\cell get_frame_block()\cell blockframe.c\cell\row
\cell read_pc()\cell regcache.c\cell\row
Called by:\cell ada_find_any_symbol()\cell ada-lang.c\cell\row
\cell address_info()\cell printcmd.c\cell\row
\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell cp_lookup_transparent_type()\cell cp-namespace.c\cell\row
\cell decode_all_variables()\cell linespec.c\cell\row
\cell decode_objc()\cell linespec.c\cell\row
\cell decode_packed_array_type()\cell ada-lang.c\cell\row
\cell decode_variable()\cell linespec.c\cell\row
\cell display_info()\cell printcmd.c\cell\row
\cell do_one_display()\cell printcmd.c\cell\row
\cell get_var_value()\cell ada-lang.c\cell\row
\cell make_symbol_completion_list()\cell symtab.c\cell\row
\cell make_symbol_overload_list_qualified()\cell cp-support.c\cell\row
\cell make_symbol_overload_list_using()\cell cp-support.c\cell\row
\cell parse_exp_in_context()\cell parse.c\cell\row
\cell value_maybe_namespace_elt()\cell valops.c\cell\row
\cell write_object_renaming()\cell ada-exp.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell deprecated_selected_frame\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function locals_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 void locals_info ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell get_selected_frame()\cell frame.c\cell\row
\cell print_frame_local_vars()\cell stack.c\cell\row
Called by:\cell args_plus_locals_info()\cell stack.c\cell\row
\cell trace_dump_command()\cell tracepoint.c\cell\row
Used in:\cell _initialize_stack()\cell stack.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function parse_frame_specification()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_info* parse_frame_specification ( const char* frame_exp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell parse_frame_specification_1()\cell stack.c\cell\row
Called by:\cell func_command()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function parse_frame_specification_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_info* parse_frame_specification_1 ( const char* frame_exp, const char* message, int* selected_frame_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell create_new_frame()\cell frame.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_relative_frame()\cell stack.c\cell\row
\cell frame_id_build_wild()\cell frame.c\cell\row
\cell frame_id_eq()\cell frame.c\cell\row
\cell frame_unwind_id()\cell frame.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell parse_and_eval()\cell eval.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell  isspace()\cell\cell\row
Called by:\cell frame_info()\cell stack.c\cell\row
\cell parse_frame_specification()\cell stack.c\cell\row
\cell select_frame_command()\cell stack.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function print_frame_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 void print_frame_info ( struct frame_info* fi, int print_level, enum print_what print_what, int print_args )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell at_inlined_call_site_p()\cell inlining.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell find_frame_sal()\cell frame.c\cell\row
\cell find_pc_symtab()\cell symtab.c\cell\row
\cell frame_relative_level()\cell frame.c\cell\row
\cell gdb_flush()\cell ui-file.c\cell\row
\cell get_frame_base()\cell frame.c\cell\row
\cell get_frame_pc()\cell frame.c\cell\row
\cell get_frame_type()\cell frame.c\cell\row
\cell identify_source_line()\cell source.c\cell\row
\cell make_cleanup_ui_out_tuple_begin_end()\cell ui-out.c\cell\row
\cell pc_set_load_state()\cell objfiles.c\cell\row
\cell print_frame()\cell stack.c\cell\row
\cell print_source_lines()\cell source.c\cell\row
\cell set_default_breakpoint()\cell breakpoint.c\cell\row
\cell ui_out_field_core_addr()\cell ui-out.c\cell\row
\cell ui_out_field_fmt_int()\cell ui-out.c\cell\row
\cell ui_out_field_string()\cell ui-out.c\cell\row
\cell ui_out_is_mi_like_p()\cell ui-out.c\cell\row
\cell ui_out_text()\cell ui-out.c\cell\row
\cell  annotate_frame_address(), annotate_frame_address_end(), annotate_frame_begin(), annotate_frame_end(), annotate_function_call(), annotate_signal_handler_caller(), deprecated_print_frame_info_listing_hook(), strcmp()\cell\cell\row
Called by:\cell backtrace_command_1()\cell stack.c\cell\row
\cell print_stack_frame_stub()\cell stack.c\cell\row
Refs Var:\cell addressprint\cell valprint.c\cell\row
\cell annotation_level\cell stack.c\cell\row
\cell deprecated_print_frame_info_listing_hook\cell top.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell stop_pc\cell infcmd.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function print_stack_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 void print_stack_frame ( struct frame_info* fi, int print_level, enum print_what print_what )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell  catch_errors()\cell\cell\row
Called by:\cell current_frame_command()\cell stack.c\cell\row
\cell do_captured_thread_select()\cell thread.c\cell\row
\cell down_command()\cell stack.c\cell\row
\cell finish_command()\cell infcmd.c\cell\row
\cell finish_tfind_command()\cell tracepoint.c\cell\row
\cell frame_command()\cell stack.c\cell\row
\cell info_threads_command()\cell thread.c\cell\row
\cell kill_command()\cell inflow.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell restore_current_thread()\cell thread.c\cell\row
\cell select_and_print_frame()\cell stack.c\cell\row
\cell up_command()\cell stack.c\cell\row
Refs Func:\cell print_stack_frame_stub()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function return_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 void return_command ( const char* retval_exp, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell adjust_current_inlined_subroutine_stack_position()\cell inlining.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell current_inlined_subroutine_call_site_line()\cell inlining.c\cell\row
\cell current_inlined_subroutine_calling_function_name()\cell inlining.c\cell\row
\cell current_inlined_subroutine_function_name()\cell inlining.c\cell\row
\cell error()\cell utils.c\cell\row
\cell frame_command()\cell stack.c\cell\row
\cell frame_id_eq()\cell frame.c\cell\row
\cell frame_id_inner()\cell frame.c\cell\row
\cell frame_pop()\cell frame.c\cell\row
\cell gdbarch_return_value()\cell gdbarch.c\cell\row
\cell gdbarch_return_value_p()\cell gdbarch.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell get_frame_function()\cell blockframe.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell get_frame_type()\cell frame.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell in_inlined_function_call_p()\cell inlining.c\cell\row
\cell inlined_subroutine_restore_after_dummy_call()\cell inlining.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell parse_and_eval()\cell eval.c\cell\row
\cell query()\cell utils.c\cell\row
\cell select_frame_command()\cell stack.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell ui_out_text_fmt()\cell ui-out.c\cell\row
\cell using_struct_return()\cell value.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_fetch_lazy()\cell valops.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell  stack_changed_hook()\cell\cell\row
Used in:\cell _initialize_stack()\cell stack.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_regcache\cell regcache.c\cell\row
\cell demangle\cell utils.c\cell\row
\cell stack_changed_hook\cell top.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function select_frame_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 void select_frame_command ( const char* level_exp, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.h\cell\cell\row
Calls: \cell parse_frame_specification_1()\cell stack.c\cell\row
\cell select_frame()\cell frame.c\cell\row
Called by:\cell frame_command()\cell stack.c\cell\row
\cell return_command()\cell stack.c\cell\row
Used in:\cell _initialize_stack()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function show_stack_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 void show_stack_frame ( struct frame_info* fi )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Called by:\cell info_threads_command()\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function args_plus_locals_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void args_plus_locals_info ( const char* ignore, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell args_info()\cell stack.c\cell\row
\cell locals_info()\cell stack.c\cell\row
Used in:\cell _initialize_stack()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function backtrace_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void backtrace_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell make_cleanup_freeargv()\cell utils.c\cell\row
\cell nomem()\cell utils.c\cell\row
\cell subset_compare()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin___strcat_chk(), __builtin_object_size(), __inline_memset_chk(), __inline_strcat_chk(), buildargv(), catch_errors(), strlen(), tolower()\cell\cell\row
Used in:\cell _initialize_stack()\cell stack.c\cell\row
Refs Func:\cell backtrace_command_stub()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function backtrace_command_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void backtrace_command_1 ( const char* count_exp, int show_locals, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell find_pc_psymtab()\cell symtab.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell get_current_source_symtab_and_line()\cell source.c\cell\row
\cell get_frame_address_in_block()\cell frame.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
\cell inlined_function_reset_frame_stack()\cell inlining.c\cell\row
\cell parse_and_eval_long()\cell eval.c\cell\row
\cell print_frame_info()\cell stack.c\cell\row
\cell print_frame_local_vars()\cell stack.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell psymtab_to_symtab()\cell symfile.c\cell\row
\cell quit()\cell utils.c\cell\row
\cell set_current_source_symtab_and_line()\cell source.c\cell\row
\cell  exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()\cell\cell\row
Called by:\cell backtrace_command_stub()\cell stack.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell info_verbose\cell top.c\cell\row
\cell quit_flag\cell utils.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function backtrace_command_stub()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int backtrace_command_stub ( void* data )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell backtrace_command_1()\cell stack.c\cell\row
Used in:\cell backtrace_command()\cell stack.c\cell\row
\cell backtrace_full_command()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function backtrace_full_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void backtrace_full_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell  catch_errors()\cell\cell\row
Used in:\cell _initialize_stack()\cell stack.c\cell\row
Refs Func:\cell backtrace_command_stub()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function catch_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void catch_info ( const char* ignore, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell print_frame_label_vars()\cell stack.c\cell\row
\cell xfree()\cell utils.c\cell\row
Used in:\cell _initialize_stack()\cell stack.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function current_frame_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void current_frame_command ( const char* level_exp, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell clear_inlined_subroutine_print_frames()\cell inlining.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell print_stack_frame()\cell stack.c\cell\row
Used in:\cell _initialize_stack()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function down_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void down_command ( const char* count_exp, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell clear_inlined_subroutine_print_frames()\cell inlining.c\cell\row
\cell down_silently_base()\cell stack.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell print_stack_frame()\cell stack.c\cell\row
Used in:\cell _initialize_stack()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function down_silently_base()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void down_silently_base ( const char* count_exp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell find_relative_frame()\cell stack.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell parse_and_eval_long()\cell eval.c\cell\row
\cell select_frame()\cell frame.c\cell\row
Called by:\cell down_command()\cell stack.c\cell\row
\cell down_silently_command()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function down_silently_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void down_silently_command ( const char* count_exp, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell down_silently_base()\cell stack.c\cell\row
Used in:\cell _initialize_stack()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function frame_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void frame_info ( const char* addr_exp, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell deprecated_print_address_numeric()\cell printcmd.c\cell\row
\cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell find_frame_sal()\cell frame.c\cell\row
\cell find_pc_symtab()\cell symtab.c\cell\row
\cell fprintf_symbol_filtered()\cell utils.c\cell\row
\cell frame_pc_unwind()\cell frame.c\cell\row
\cell frame_register_unwind()\cell frame.c\cell\row
\cell frame_relative_level()\cell frame.c\cell\row
\cell gdbarch_frame_num_args()\cell gdbarch.c\cell\row
\cell gdbarch_frame_num_args_p()\cell gdbarch.c\cell\row
\cell gdbarch_num_pseudo_regs()\cell gdbarch.c\cell\row
\cell gdbarch_num_regs()\cell gdbarch.c\cell\row
\cell gdbarch_pc_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_register_name()\cell gdbarch.c\cell\row
\cell gdbarch_register_reggroup_p()\cell gdbarch.c\cell\row
\cell gdbarch_sp_regnum()\cell gdbarch.c\cell\row
\cell get_frame_args_address()\cell frame.c\cell\row
\cell get_frame_base()\cell frame.c\cell\row
\cell get_frame_function()\cell blockframe.c\cell\row
\cell get_frame_locals_address()\cell frame.c\cell\row
\cell get_frame_pc()\cell frame.c\cell\row
\cell get_next_frame()\cell frame.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell language_str()\cell language.c\cell\row
\cell lookup_minimal_symbol_by_pc()\cell minsyms.c\cell\row
\cell parse_frame_specification_1()\cell stack.c\cell\row
\cell print_frame_args()\cell stack.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell puts_filtered()\cell utils.c\cell\row
\cell register_size()\cell regcache.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell wrap_here()\cell utils.c\cell\row
\cell  cplus_demangle()\cell\cell\row
Used in:\cell _initialize_stack()\cell stack.c\cell\row
Refs Var:\cell all_reggroup\cell reggroups.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell demangle\cell utils.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function func_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void func_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell decode_line_spec()\cell symtab.c\cell\row
\cell find_pc_partial_function()\cell blockframe.c\cell\row
\cell find_relative_frame()\cell stack.c\cell\row
\cell get_frame_pc()\cell frame.c\cell\row
\cell parse_frame_specification()\cell stack.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell select_and_print_frame()\cell stack.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Used in:\cell _initialize_stack()\cell stack.c\cell\row
Refs Var:\cell deprecated_selected_frame\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_args_stub()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int print_args_stub ( void* args )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell gdbarch_frame_num_args()\cell gdbarch.c\cell\row
\cell gdbarch_frame_num_args_p()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell print_frame_args()\cell stack.c\cell\row
Used in:\cell print_frame()\cell stack.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_block_frame_labels()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int print_block_frame_labels ( struct block* b, int* have_default, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell deprecated_print_address_numeric()\cell printcmd.c\cell\row
\cell dict_iterator_first()\cell dictionary.c\cell\row
\cell dict_iterator_next()\cell dictionary.c\cell\row
\cell find_pc_line()\cell symtab.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell print_frame_label_vars()\cell stack.c\cell\row
Refs Var:\cell addressprint\cell valprint.c\cell\row
\cell demangle\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_block_frame_locals()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int print_block_frame_locals ( struct block* b, struct frame_info* fi, int num_tabs, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell dict_iterator_first()\cell dictionary.c\cell\row
\cell dict_iterator_next()\cell dictionary.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell print_variable_value()\cell printcmd.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
Called by:\cell print_frame_local_vars()\cell stack.c\cell\row
Refs Var:\cell demangle\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_frame ( struct frame_info* fi, int print_level, enum print_what print_what, int print_args, struct symtab_and_line sal )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell at_inlined_call_site_p()\cell inlining.c\cell\row
\cell current_inlined_bottom_call_site_line()\cell inlining.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell find_pc_function_no_inlined()\cell blockframe.c\cell\row
\cell find_pc_symtab()\cell symtab.c\cell\row
\cell fprintf_symbol_filtered()\cell utils.c\cell\row
\cell frame_relative_level()\cell frame.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell get_frame_address_in_block()\cell frame.c\cell\row
\cell get_frame_base()\cell frame.c\cell\row
\cell get_frame_pc()\cell frame.c\cell\row
\cell get_frame_type()\cell frame.c\cell\row
\cell get_next_frame()\cell frame.c\cell\row
\cell in_inlined_function_call_p()\cell inlining.c\cell\row
\cell last_inlined_call_site_filename()\cell inlining.c\cell\row
\cell lookup_minimal_symbol_by_pc()\cell minsyms.c\cell\row
\cell make_cleanup_ui_out_list_begin_end()\cell ui-out.c\cell\row
\cell make_cleanup_ui_out_stream_delete()\cell ui-out.c\cell\row
\cell make_cleanup_ui_out_tuple_begin_end()\cell ui-out.c\cell\row
\cell print_inlined_frame()\cell inlining.c\cell\row
\cell quit()\cell utils.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell symtab_clear_cached_lookup_values()\cell symtab.c\cell\row
\cell symtab_to_fullname()\cell source.c\cell\row
\cell ui_out_field_core_addr()\cell ui-out.c\cell\row
\cell ui_out_field_fmt_int()\cell ui-out.c\cell\row
\cell ui_out_field_int()\cell ui-out.c\cell\row
\cell ui_out_field_stream()\cell ui-out.c\cell\row
\cell ui_out_field_string()\cell ui-out.c\cell\row
\cell ui_out_is_mi_like_p()\cell ui-out.c\cell\row
\cell ui_out_stream_new()\cell ui-out.c\cell\row
\cell ui_out_text()\cell ui-out.c\cell\row
\cell ui_out_wrap_hint()\cell ui-out.c\cell\row
\cell  annotate_frame_address(), annotate_frame_address_end(), annotate_frame_args(), annotate_frame_begin(), annotate_frame_function_name(), annotate_frame_source_begin(), annotate_frame_source_end(), annotate_frame_source_file(), annotate_frame_source_file_end(), annotate_frame_source_line(), annotate_frame_where(), catch_errors(), cplus_demangle(), macosx_pc_solib(), print_frame_more_info_hook(), strcmp()\cell\cell\row
Called by:\cell print_frame_info()\cell stack.c\cell\row
Refs Func:\cell print_args_stub()\cell stack.c\cell\row
Refs Var:\cell addressprint\cell valprint.c\cell\row
\cell demangle\cell utils.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell print_frame_more_info_hook\cell top.c\cell\row
\cell quit_flag\cell utils.c\cell\row
\cell stop_pc\cell infcmd.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_frame_arg_vars()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_frame_arg_vars ( struct frame_info* fi, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell dict_iterator_first()\cell dictionary.c\cell\row
\cell dict_iterator_next()\cell dictionary.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell get_frame_function()\cell blockframe.c\cell\row
\cell lookup_symbol()\cell symtab.c\cell\row
\cell print_variable_value()\cell printcmd.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
Called by:\cell args_info()\cell stack.c\cell\row
Refs Var:\cell demangle\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_frame_args()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_frame_args ( struct symbol* func, struct frame_info* fi, int num, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell common_val_print()\cell valprint.c\cell\row
\cell dict_iterator_first()\cell dictionary.c\cell\row
\cell dict_iterator_next()\cell dictionary.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell fprintf_symbol_filtered()\cell utils.c\cell\row
\cell gdbarch_frame_args_skip()\cell gdbarch.c\cell\row
\cell lookup_symbol()\cell symtab.c\cell\row
\cell make_cleanup_ui_out_stream_delete()\cell ui-out.c\cell\row
\cell make_cleanup_ui_out_tuple_begin_end()\cell ui-out.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell print_frame_nameless_args()\cell stack.c\cell\row
\cell quit()\cell utils.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell ui_out_field_stream()\cell ui-out.c\cell\row
\cell ui_out_stream_new()\cell ui-out.c\cell\row
\cell ui_out_text()\cell ui-out.c\cell\row
\cell ui_out_wrap_hint()\cell ui-out.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell  annotate_arg_begin(), annotate_arg_end(), annotate_arg_name_end(), annotate_arg_value()\cell\cell\row
Called by:\cell frame_info()\cell stack.c\cell\row
\cell print_args_stub()\cell stack.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell demangle\cell utils.c\cell\row
\cell quit_flag\cell utils.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_frame_label_vars()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_frame_label_vars ( struct frame_info* fi, int this_level_only, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell block_contains_pc()\cell block.c\cell\row
\cell blockvector_for_pc()\cell block.c\cell\row
\cell contained_in()\cell block.c\cell\row
\cell error()\cell utils.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell get_frame_block()\cell blockframe.c\cell\row
\cell get_frame_pc()\cell frame.c\cell\row
\cell print_block_frame_labels()\cell stack.c\cell\row
\cell  __builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell catch_info()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_frame_local_vars()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_frame_local_vars ( struct frame_info* fi, int num_tabs, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
\cell get_frame_block()\cell blockframe.c\cell\row
\cell print_block_frame_locals()\cell stack.c\cell\row
Called by:\cell backtrace_command_1()\cell stack.c\cell\row
\cell locals_info()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_frame_nameless_args()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_frame_nameless_args ( struct frame_info* fi, long start, int num, int first, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
\cell get_frame_args_address()\cell frame.c\cell\row
\cell quit()\cell utils.c\cell\row
\cell read_memory_integer()\cell corefile.c\cell\row
Called by:\cell print_frame_args()\cell stack.c\cell\row
Refs Var:\cell quit_flag\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_stack_frame_stub()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int print_stack_frame_stub ( void* args )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell print_frame_info()\cell stack.c\cell\row
\cell set_current_sal_from_frame()\cell stack.c\cell\row
Used in:\cell print_stack_frame()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function select_and_print_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void select_and_print_frame ( struct frame_info* fi )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell clear_inlined_subroutine_print_frames()\cell inlining.c\cell\row
\cell print_stack_frame()\cell stack.c\cell\row
\cell select_frame()\cell frame.c\cell\row
Called by:\cell func_command()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_current_sal_from_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_current_sal_from_frame ( struct frame_info* fi, int center )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell find_frame_sal()\cell frame.c\cell\row
\cell get_lines_to_list()\cell source.c\cell\row
\cell set_current_source_symtab_and_line()\cell source.c\cell\row
Called by:\cell print_stack_frame_stub()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function up_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void up_command ( const char* count_exp, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell clear_inlined_subroutine_print_frames()\cell inlining.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell print_stack_frame()\cell stack.c\cell\row
\cell up_silently_base()\cell stack.c\cell\row
Used in:\cell _initialize_stack()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function up_silently_base()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void up_silently_base ( const char* count_exp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell find_relative_frame()\cell stack.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell parse_and_eval_long()\cell eval.c\cell\row
\cell select_frame()\cell frame.c\cell\row
Called by:\cell up_command()\cell stack.c\cell\row
\cell up_silently_command()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function up_silently_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void up_silently_command ( const char* count_exp, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell stack.c\cell\cell\row
Calls: \cell up_silently_base()\cell stack.c\cell\row
Used in:\cell _initialize_stack()\cell stack.c\cell\row
\intbl0
}
