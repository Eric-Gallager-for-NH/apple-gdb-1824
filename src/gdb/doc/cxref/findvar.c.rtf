{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF findvar.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File findvar.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "regcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "user-regs.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function address_to_signed_pointer()\par}
{\s5\f1\fs20\ql\sb50\sa50 void address_to_signed_pointer ( struct type* type, gdb_byte* buf, CORE_ADDR addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell store_signed_integer()\cell findvar.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function extract_long_unsigned_integer()\par}
{\s5\f1\fs20\ql\sb50\sa50 int extract_long_unsigned_integer ( const gdb_byte* addr, int orig_len, long* pval )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Calls: \cell extract_long_unsigned_integer_with_byte_order()\cell findvar.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function extract_long_unsigned_integer_with_byte_order()\par}
{\s5\f1\fs20\ql\sb50\sa50 int extract_long_unsigned_integer_with_byte_order ( const gdb_byte* addr, int orig_len, long* pval, int byte_order )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Calls: \cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
Called by:\cell extract_long_unsigned_integer()\cell findvar.c\cell\row
\cell val_print_type_code_int()\cell valprint.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function extract_signed_integer()\par}
{\s5\f1\fs20\ql\sb50\sa50 long extract_signed_integer ( const gdb_byte* addr, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Calls: \cell extract_signed_integer_with_byte_order()\cell findvar.c\cell\row
Called by:\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\cell frame_unwind_register_signed()\cell frame.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell print_single_dwarf_location()\cell dwarf2loc.c\cell\row
\cell read_memory_integer()\cell corefile.c\cell\row
\cell regcache_cooked_read_signed()\cell regcache.c\cell\row
\cell regcache_raw_read_signed()\cell regcache.c\cell\row
\cell scm_get_field()\cell scm-lang.c\cell\row
\cell scm_lreadr()\cell scm-exp.c\cell\row
\cell scm_unpack()\cell scm-lang.c\cell\row
\cell scm_val_print()\cell scm-valprint.c\cell\row
\cell signed_pointer_to_address()\cell findvar.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function extract_signed_integer_with_byte_order()\par}
{\s5\f1\fs20\ql\sb50\sa50 long extract_signed_integer_with_byte_order ( const gdb_byte* addr, int len, int byte_order )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
Called by:\cell extract_signed_integer()\cell findvar.c\cell\row
\cell unpack_long()\cell value.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function extract_typed_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR extract_typed_address ( const gdb_byte* buf, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Calls: \cell gdbarch_pointer_to_address()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell c_val_print()\cell c-valprint.c\cell\row
\cell f_val_print()\cell f-valprint.c\cell\row
\cell read_memory_typed_address()\cell corefile.c\cell\row
\cell unpack_long()\cell value.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function extract_unsigned_integer()\par}
{\s5\f1\fs20\ql\sb50\sa50 unsigned long extract_unsigned_integer ( const gdb_byte* addr, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Calls: \cell extract_unsigned_integer_with_byte_order()\cell findvar.c\cell\row
Called by:\cell c_printstr()\cell c-lang.c\cell\row
\cell char_at()\cell ada-valprint.c\cell\row
\cell dwarf2_read_address()\cell dwarf2expr.c\cell\row
\cell dwarf_expr_read_reg()\cell dwarf2loc.c\cell\row
\cell execute_cfa_program()\cell dwarf2-frame.c\cell\row
\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\cell extract_long_unsigned_integer_with_byte_order()\cell findvar.c\cell\row
\cell find_location_expression()\cell dwarf2loc.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell frame_unwind_register_unsigned()\cell frame.c\cell\row
\cell frame_unwind_unsigned_register()\cell frame.c\cell\row
\cell get_target_memory_unsigned()\cell target/target.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell loclist_describe_location()\cell dwarf2loc.c\cell\row
\cell modify_field()\cell value.c\cell\row
\cell pascal_val_print()\cell p-valprint.c\cell\row
\cell read_memory_unsigned_integer()\cell corefile.c\cell\row
\cell read_reg()\cell dwarf2-frame.c\cell\row
\cell read_register()\cell regcache.c\cell\row
\cell read_target_long_array()\cell symfile.c\cell\row
\cell regcache_cooked_read_unsigned()\cell regcache.c\cell\row
\cell regcache_raw_read_unsigned()\cell regcache.c\cell\row
\cell tramp_frame_start()\cell tramp-frame.c\cell\row
\cell unpack_field_as_long()\cell value.c\cell\row
\cell unsigned_pointer_to_address()\cell findvar.c\cell\row
\cell val_print_string()\cell valprint.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell x86_finalize_saved_reg_locations()\cell target/x86-shared-tdep.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function extract_unsigned_integer_with_byte_order()\par}
{\s5\f1\fs20\ql\sb50\sa50 unsigned long extract_unsigned_integer_with_byte_order ( const gdb_byte* addr, int len, int byte_order )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
Called by:\cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell unpack_long()\cell value.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function locate_var_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* locate_var_value ( struct symbol* var, struct frame_info* frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell deprecated_value_regnum_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gdbarch_register_name()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
\cell value_lazy()\cell value.c\cell\row
Called by:\cell evaluate_subexp_for_address()\cell eval.c\cell\row
\cell evaluate_subexp_with_coercion()\cell eval.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell demangle\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function read_var_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* read_var_value ( struct symbol* var, struct frame_info* frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell deprecated_safe_get_selected_frame()\cell frame.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell get_frame_args_address()\cell frame.c\cell\row
\cell get_frame_block()\cell blockframe.c\cell\row
\cell get_frame_locals_address()\cell frame.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell set_value_lazy()\cell value.c\cell\row
\cell set_value_optimized_out()\cell value.c\cell\row
\cell store_signed_integer()\cell findvar.c\cell\row
\cell store_typed_address()\cell findvar.c\cell\row
\cell symbol_overlayed_address()\cell symfile.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_at()\cell valops.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell value_from_register()\cell findvar.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell locate_var_value()\cell findvar.c\cell\row
\cell print_frame_args()\cell stack.c\cell\row
\cell print_variable_value()\cell printcmd.c\cell\row
\cell value_of_local()\cell valops.c\cell\row
\cell value_of_variable()\cell valops.c\cell\row
\cell value_static_field()\cell value.c\cell\row
\cell value_struct_elt_for_reference()\cell valops.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function signed_pointer_to_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR signed_pointer_to_address ( struct type* type, const gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell extract_signed_integer()\cell findvar.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function store_signed_integer()\par}
{\s5\f1\fs20\ql\sb50\sa50 void store_signed_integer ( gdb_byte* addr, int len, long val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Calls: \cell store_signed_integer_with_byte_order()\cell findvar.c\cell\row
Called by:\cell address_to_signed_pointer()\cell findvar.c\cell\row
\cell pack_long()\cell value.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell regcache_cooked_write_signed()\cell regcache.c\cell\row
\cell regcache_raw_write_signed()\cell regcache.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell write_inferior_status_register()\cell infrun.c\cell\row
\cell write_memory_signed_integer()\cell corefile.c\cell\row
\cell write_register()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function store_signed_integer_with_byte_order()\par}
{\s5\f1\fs20\ql\sb50\sa50 void store_signed_integer_with_byte_order ( gdb_byte* addr, int len, long val, int byte_order )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Calls: \cell gdbarch_byte_order()\cell gdbarch.c\cell\row
Called by:\cell store_signed_integer()\cell findvar.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function store_typed_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 void store_typed_address ( gdb_byte* buf, struct type* type, CORE_ADDR addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Calls: \cell gdbarch_address_to_pointer()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell pack_long()\cell value.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function store_unsigned_integer()\par}
{\s5\f1\fs20\ql\sb50\sa50 void store_unsigned_integer ( gdb_byte* addr, int len, unsigned long val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Calls: \cell store_unsigned_integer_with_byte_order()\cell findvar.c\cell\row
Called by:\cell ada_value_binop()\cell ada-lang.c\cell\row
\cell dwarf2_const_value()\cell dwarf2read.c\cell\row
\cell dwarf2_frame_prev_register()\cell dwarf2-frame.c\cell\row
\cell modify_field()\cell value.c\cell\row
\cell regcache_cooked_write_unsigned()\cell regcache.c\cell\row
\cell regcache_raw_write_unsigned()\cell regcache.c\cell\row
\cell trad_frame_get_prev_register()\cell trad-frame.c\cell\row
\cell unsigned_address_to_pointer()\cell findvar.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell write_memory_unsigned_integer()\cell corefile.c\cell\row
\cell x86_frame_prev_register()\cell target/x86-shared-tdep.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function store_unsigned_integer_with_byte_order()\par}
{\s5\f1\fs20\ql\sb50\sa50 void store_unsigned_integer_with_byte_order ( gdb_byte* addr, int len, unsigned long val, int byte_order )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Calls: \cell gdbarch_byte_order()\cell gdbarch.c\cell\row
Called by:\cell store_unsigned_integer()\cell findvar.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function symbol_read_needs_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 int symbol_read_needs_frame ( struct symbol* sym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell c_parse()\cell c-exp.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
\cell push_variable()\cell jv-exp.c\cell\row
\cell value_of_variable()\cell valops.c\cell\row
\cell value_static_field()\cell value.c\cell\row
\cell write_var_from_sym()\cell ada-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function unsigned_address_to_pointer()\par}
{\s5\f1\fs20\ql\sb50\sa50 void unsigned_address_to_pointer ( struct type* type, gdb_byte* buf, CORE_ADDR addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell store_unsigned_integer()\cell findvar.c\cell\row
Used in:\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function unsigned_pointer_to_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR unsigned_pointer_to_address ( struct type* type, const gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Used in:\cell gdbarch_alloc()\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_from_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_from_register ( struct type* type, int regnum, struct frame_info* frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_frame_id_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell deprecated_value_regnum_hack()\cell value.c\cell\row
\cell frame_register()\cell frame.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell gdbarch_convert_register_p()\cell gdbarch.c\cell\row
\cell gdbarch_register_to_value()\cell gdbarch.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell register_cached()\cell regcache.c\cell\row
\cell register_size()\cell regcache.c\cell\row
\cell set_value_offset()\cell value.c\cell\row
\cell set_value_optimized_out()\cell value.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell dwarf2_evaluate_loc_desc()\cell dwarf2loc.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_of_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_of_register ( int regnum, struct frame_info* frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_frame_id_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell deprecated_value_regnum_hack()\cell value.c\cell\row
\cell frame_register()\cell frame.c\cell\row
\cell gdbarch_num_pseudo_regs()\cell gdbarch.c\cell\row
\cell gdbarch_num_regs()\cell gdbarch.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell register_cached()\cell regcache.c\cell\row
\cell register_size()\cell regcache.c\cell\row
\cell register_type()\cell regcache.c\cell\row
\cell set_value_optimized_out()\cell value.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell value_of_user_reg()\cell user-regs.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell value_of_builtin_frame_fp_reg()\cell std-regs.c\cell\row
\cell value_of_builtin_frame_pc_reg()\cell std-regs.c\cell\row
\cell value_of_builtin_frame_ps_reg()\cell std-regs.c\cell\row
\cell value_of_builtin_frame_sp_reg()\cell std-regs.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
}
