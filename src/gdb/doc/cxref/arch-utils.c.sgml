<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF arch-utils.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for arch-utils.c of gdb.cxref.
<author>cxref

<sect>File arch-utils.c
<descrip>
<tag>References Variables:</tag>
<itemize>
<item>endian_auto  :  arch-utils.c
<item>endian_big  :  arch-utils.c
<item>endian_little  :  arch-utils.c
<item> bfd_i386_arch, mach_o_le_vec
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;arch-utils.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;buildsym.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;regcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;sim-regno.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;osabi.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/libbfd.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/hashtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;version.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define bfd_powerpc_arch</tt><newline>

<sect1>Type enum set_arch

<p>
<itemize>
<item><tt>enum set_arch</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>set_arch_auto;</tt><newline>
<item><tt>set_arch_manual;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>External Variables

<p>
<bf>bfd_i386_arch</bf><newline>
<tt>extern const bfd_arch_info_type bfd_i386_arch</tt><newline>
<p>
<bf>mach_o_le_vec</bf><newline>
<tt>extern const bfd_target mach_o_le_vec</tt><newline>

<sect1>Local Variables

<p>
<bf>target_byte_order</bf><newline>
<tt>static int target_byte_order</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>selected_byte_order()
</itemize>
</descrip>
<p>
<bf>target_byte_order_auto</bf><newline>
<tt>static int target_byte_order_auto</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_info_fill()
<item>selected_byte_order()
<item>set_endian()
<item>show_endian()
</itemize>
</descrip>
<p>
<bf>endian_big</bf><newline>
<tt>static const char endian_big[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>arch-utils.c
<item>set_endian()
</itemize>
</descrip>
<p>
<bf>endian_little</bf><newline>
<tt>static const char endian_little[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>arch-utils.c
<item>set_endian()
</itemize>
</descrip>
<p>
<bf>endian_auto</bf><newline>
<tt>static const char endian_auto[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>arch-utils.c
<item>set_endian()
</itemize>
</descrip>
<p>
<bf>endian_enum</bf><newline>
<tt>static const char* endian_enum[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_gdbarch_utils()
</itemize>
</descrip>
<p>
<bf>set_endian_string</bf><newline>
<tt>static const char* set_endian_string</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_gdbarch_utils()
<item>set_endian()
</itemize>
</descrip>
<p>
<bf>target_architecture_auto</bf><newline>
<tt>static int target_architecture_auto</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_info_fill()
<item>selected_architecture_name()
<item>set_architecture()
<item>set_architecture_from_string()
<item>set_gdbarch_from_file()
<item>show_architecture()
</itemize>
</descrip>
<p>
<bf>set_architecture_string</bf><newline>
<tt>static const char* set_architecture_string</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>initialize_current_architecture()
<item>selected_architecture_name()
<item>set_architecture()
<item>set_architecture_from_string()
</itemize>
</descrip>
<p>
<bf>default_bfd_arch</bf><newline>
<tt>static const bfd_arch_info_type* default_bfd_arch</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>initialize_current_architecture()
</itemize>
</descrip>
<p>
<bf>default_bfd_vec</bf><newline>
<tt>static const bfd_target* default_bfd_vec</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>initialize_current_architecture()
</itemize>
</descrip>

<sect1>Global Function _initialize_gdbarch_utils()

<p><tt>void _initialize_gdbarch_utils ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_setshow_enum_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>set_endian()  :  arch-utils.c
<item>show_endian()  :  arch-utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>endian_enum  :  arch-utils.c
<item>set_endian_string  :  arch-utils.c
<item>setlist, showlist
</itemize>
</descrip>

<sect1>Global Function always_use_struct_convention()

<p><tt>int always_use_struct_convention ( int gcc_p, struct type* value_type )</tt><newline>

<sect1>Global Function cannot_register_not()

<p><tt>int cannot_register_not ( int regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function convert_from_func_ptr_addr_identity()

<p><tt>CORE_ADDR convert_from_func_ptr_addr_identity ( struct gdbarch* gdbarch, CORE_ADDR addr, struct target_ops* targ )</tt><newline>

<sect1>Global Function core_addr_greaterthan()

<p><tt>int core_addr_greaterthan ( CORE_ADDR lhs, CORE_ADDR rhs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
</descrip>

<sect1>Global Function core_addr_identity()

<p><tt>CORE_ADDR core_addr_identity ( CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function core_addr_lessthan()

<p><tt>int core_addr_lessthan ( CORE_ADDR lhs, CORE_ADDR rhs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
</descrip>

<sect1>Global Function default_adjust_ehframe_regnum()

<p><tt>int default_adjust_ehframe_regnum ( struct gdbarch* gdbarch, int regnum, int eh_frame_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch.c
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function default_coff_make_msymbol_special()

<p><tt>void default_coff_make_msymbol_special ( int val, struct minimal_symbol* msym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function default_dbx_make_msymbol_special()

<p><tt>void default_dbx_make_msymbol_special ( int16_t val, struct minimal_symbol* msym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function default_double_format()

<p><tt>const struct floatformat* default_double_format ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_byte_order()  :  gdbarch.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>verify_gdbarch()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>floatformat_ieee_double_big, floatformat_ieee_double_little
</itemize>
</descrip>

<sect1>Global Function default_elf_make_msymbol_special()

<p><tt>void default_elf_make_msymbol_special ( asymbol* sym, struct minimal_symbol* msym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function default_float_format()

<p><tt>const struct floatformat* default_float_format ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_byte_order()  :  gdbarch.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>verify_gdbarch()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>floatformat_ieee_single_big, floatformat_ieee_single_little
</itemize>
</descrip>

<sect1>Global Function default_stabs_argument_has_addr()

<p><tt>int default_stabs_argument_has_addr ( struct gdbarch* gdbarch, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>gdbarch_deprecated_reg_struct_has_addr()  :  gdbarch.c
<item>gdbarch_deprecated_reg_struct_has_addr_p()  :  gdbarch.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch.c
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>processing_gcc_compilation  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_from_bfd()

<p><tt>struct gdbarch* gdbarch_from_bfd ( bfd* abfd )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_find_by_info()  :  gdbarch.c
<item>gdbarch_info_init()  :  arch-utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_gdbarch_from_file()  :  arch-utils.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_info_fill()

<p><tt>void gdbarch_info_fill ( struct gdbarch* gdbarch, struct gdbarch_info* info )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>gdbarch_bfd_arch_info()  :  gdbarch.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>gdbarch_lookup_osabi()  :  osabi.c
<item>gdbarch_osabi()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>bfd_get_arch(), bfd_get_arch_info()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_arch_by_info()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
<item>target_architecture_auto  :  arch-utils.c
<item>target_byte_order_auto  :  arch-utils.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_info_init()

<p><tt>void gdbarch_info_init ( struct gdbarch_info* info )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_from_bfd()  :  arch-utils.c
<item>initialize_current_architecture()  :  arch-utils.c
<item>set_architecture()  :  arch-utils.c
<item>set_architecture_from_string()  :  arch-utils.c
<item>set_endian()  :  arch-utils.c
<item>set_osabi()  :  osabi.c
<item>set_osabi_from_string()  :  osabi.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_update_p()

<p><tt>int gdbarch_update_p ( struct gdbarch_info info )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_current_gdbarch_select_hack()  :  gdbarch.c
<item>fprintf_unfiltered()  :  utils.c
<item>gdbarch_bfd_arch_info()  :  gdbarch.c
<item>gdbarch_find_by_info()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>initialize_current_architecture()  :  arch-utils.c
<item>set_architecture()  :  arch-utils.c
<item>set_architecture_from_string()  :  arch-utils.c
<item>set_endian()  :  arch-utils.c
<item>set_osabi()  :  osabi.c
<item>set_osabi_from_string()  :  osabi.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function generic_convert_register_p()

<p><tt>int generic_convert_register_p ( int regnum, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function generic_in_function_epilogue_p()

<p><tt>int generic_in_function_epilogue_p ( struct gdbarch* gdbarch, CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch.c
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function generic_in_solib_return_trampoline()

<p><tt>int generic_in_solib_return_trampoline ( CORE_ADDR pc, const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function generic_instruction_nullified()

<p><tt>int generic_instruction_nullified ( struct gdbarch* gdbarch, struct regcache* regcache )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
</descrip>

<sect1>Global Function generic_register_byte()

<p><tt>int generic_register_byte ( int regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_num_pseudo_regs()  :  gdbarch.c
<item>gdbarch_num_regs()  :  gdbarch.c
<item>generic_register_size()  :  arch-utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch.c
<item>gdbarch_alloc()  :  gdbarch.c
<item>gdbarch_deprecated_register_byte_p()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function generic_register_size()

<p><tt>int generic_register_size ( int regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_num_pseudo_regs()  :  gdbarch.c
<item>gdbarch_num_regs()  :  gdbarch.c
<item>gdbarch_register_type()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>generic_register_byte()  :  arch-utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function generic_remote_translate_xfer_address()

<p><tt>void generic_remote_translate_xfer_address ( struct gdbarch* gdbarch, struct regcache* regcache, CORE_ADDR gdb_addr, int gdb_len, CORE_ADDR* rem_addr, int* rem_len )</tt><newline>

<sect1>Global Function generic_skip_solib_resolver()

<p><tt>CORE_ADDR generic_skip_solib_resolver ( struct gdbarch* gdbarch, CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch.c
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function generic_skip_trampoline_code()

<p><tt>CORE_ADDR generic_skip_trampoline_code ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function initialize_current_architecture()

<p><tt>void initialize_current_architecture ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_info_init()  :  arch-utils.c
<item>gdbarch_printable_names()  :  gdbarch.c
<item>gdbarch_update_p()  :  arch-utils.c
<item>internal_error()  :  utils.c
<item>xrealloc()  :  utils.c
<item>add_alias_cmd(), add_setshow_enum_cmd(), bfd_scan_arch(), strchr(), strcmp(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdb_init()  :  top.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>set_architecture()  :  arch-utils.c
<item>show_architecture()  :  arch-utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>default_bfd_arch  :  arch-utils.c
<item>default_bfd_vec  :  arch-utils.c
<item>set_architecture_string  :  arch-utils.c
<item>setlist, showlist, target_name
</itemize>
</descrip>

<sect1>Global Function legacy_extract_return_value()

<p><tt>void legacy_extract_return_value ( struct type* type, struct regcache* regcache, gdb_byte* valbuf )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>deprecated_grub_regcache_for_registers()  :  regcache.c
<item>gdbarch_deprecated_extract_return_value()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function legacy_pc_in_sigtramp()

<p><tt>int legacy_pc_in_sigtramp ( CORE_ADDR pc, char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
</descrip>

<sect1>Global Function legacy_register_sim_regno()

<p><tt>int legacy_register_sim_regno ( int regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_num_regs()  :  gdbarch.c
<item>gdbarch_register_name()  :  gdbarch.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function legacy_return_value()

<p><tt>enum return_value_convention legacy_return_value ( struct gdbarch* gdbarch, struct type* valtype, struct regcache* regcache, gdb_byte* readbuf, const gdb_byte* writebuf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_deprecated_use_struct_convention()  :  gdbarch.c
<item>gdbarch_extract_return_value()  :  gdbarch.c
<item>gdbarch_store_return_value()  :  gdbarch.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_alloc()  :  gdbarch.c
<item>gdbarch_return_value_p()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function legacy_store_return_value()

<p><tt>void legacy_store_return_value ( struct type* type, struct regcache* regcache, const gdb_byte* buf )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_deprecated_store_return_value()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_regcache  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function legacy_virtual_frame_pointer()

<p><tt>void legacy_virtual_frame_pointer ( CORE_ADDR pc, int* frame_regnum, long* frame_offset )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_deprecated_fp_regnum()  :  gdbarch.c
<item>gdbarch_num_regs()  :  gdbarch.c
<item>gdbarch_sp_regnum()  :  gdbarch.c
<item>internal_error()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function no_op_reg_to_regnum()

<p><tt>int no_op_reg_to_regnum ( int reg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function selected_architecture_name()

<p><tt>const char* selected_architecture_name ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>set_architecture_string  :  arch-utils.c
<item>target_architecture_auto  :  arch-utils.c
</itemize>
</descrip>

<sect1>Global Function selected_byte_order()

<p><tt>enum bfd_endian selected_byte_order ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>target_byte_order  :  arch-utils.c
<item>target_byte_order_auto  :  arch-utils.c
</itemize>
</descrip>

<sect1>Global Function set_architecture_from_string()

<p><tt>int set_architecture_from_string ( const char* new_arch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>arch-utils.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_info_init()  :  arch-utils.c
<item>gdbarch_update_p()  :  arch-utils.c
<item>internal_error()  :  utils.c
<item>warning()  :  utils.c
<item>bfd_scan_arch(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>captured_main()  :  main.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>set_architecture_string  :  arch-utils.c
<item>target_architecture_auto  :  arch-utils.c
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_from_file()

<p><tt>void set_gdbarch_from_file ( bfd* abfd )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_current_gdbarch_select_hack()  :  gdbarch.c
<item>error()  :  utils.c
<item>gdbarch_from_bfd()  :  arch-utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>target_architecture_auto  :  arch-utils.c
</itemize>
</descrip>

<sect1>Local Function set_architecture()

<p><tt>static void set_architecture ( const char* ignore_args, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_info_init()  :  arch-utils.c
<item>gdbarch_update_p()  :  arch-utils.c
<item>internal_error()  :  utils.c
<item>printf_unfiltered()  :  utils.c
<item>show_architecture()  :  arch-utils.c
<item>bfd_scan_arch(), strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>initialize_current_architecture()  :  arch-utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>set_architecture_string  :  arch-utils.c
<item>target_architecture_auto  :  arch-utils.c
</itemize>
</descrip>

<sect1>Local Function set_endian()

<p><tt>static void set_endian ( const char* ignore_args, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_info_init()  :  arch-utils.c
<item>gdbarch_update_p()  :  arch-utils.c
<item>internal_error()  :  utils.c
<item>printf_unfiltered()  :  utils.c
<item>show_endian()  :  arch-utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_gdbarch_utils()  :  arch-utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>endian_auto  :  arch-utils.c
<item>endian_big  :  arch-utils.c
<item>endian_little  :  arch-utils.c
<item>gdb_stdout  :  main.c
<item>set_endian_string  :  arch-utils.c
<item>target_byte_order_auto  :  arch-utils.c
</itemize>
</descrip>

<sect1>Local Function show_architecture()

<p><tt>static void show_architecture ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>gdbarch_bfd_arch_info()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_architecture()  :  arch-utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>initialize_current_architecture()  :  arch-utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>target_architecture_auto  :  arch-utils.c
</itemize>
</descrip>

<sect1>Local Function show_endian()

<p><tt>static void show_endian ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_byte_order()  :  gdbarch.c
<item>printf_unfiltered()  :  utils.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_endian()  :  arch-utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_gdbarch_utils()  :  arch-utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>target_byte_order_auto  :  arch-utils.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

</article>
