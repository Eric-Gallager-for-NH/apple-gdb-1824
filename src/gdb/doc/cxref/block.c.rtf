{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF block.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File block.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "cp-support.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct block_namespace_info\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct block_namespace_info}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* scope;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct using_direct* usingd;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function allocate_block()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct block* allocate_block ( struct obstack* obstack )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell block.h\cell\cell\row
Calls: \cell  _obstack_newchunk()\cell\cell\row
Called by:\cell finish_block()\cell buildsym.c\cell\row
\cell get_java_class_symtab()\cell jv-lang.c\cell\row
\cell initialize_namespace_symtab()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function block_contains_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 int block_contains_pc ( const struct block* bl, CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell block.h\cell\cell\row
Called by:\cell block_innermost_frame()\cell blockframe.c\cell\row
\cell blockvector_for_pc_sect()\cell block.c\cell\row
\cell find_function_start_sal()\cell symtab.c\cell\row
\cell find_methods()\cell objc-lang.c\cell\row
\cell find_pc_sect_symtab()\cell symtab.c\cell\row
\cell maintenance_check_symtabs()\cell symmisc.c\cell\row
\cell print_frame_label_vars()\cell stack.c\cell\row
\cell varobj_pc_in_valid_block_p()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function block_for_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct block* block_for_pc ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell block.h\cell\cell\row
Calls: \cell block_for_pc_sect()\cell block.c\cell\row
\cell find_pc_mapped_section()\cell symfile.c\cell\row
Called by:\cell add_local_symbols()\cell tracepoint.c\cell\row
\cell break_command_2()\cell breakpoint.c\cell\row
\cell condition_command_1()\cell breakpoint.c\cell\row
\cell create_breakpoints()\cell breakpoint.c\cell\row
\cell do_captured_breakpoint()\cell breakpoint.c\cell\row
\cell encode_actions()\cell tracepoint.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell get_frame_block()\cell blockframe.c\cell\row
\cell get_pc_function_start()\cell blockframe.c\cell\row
\cell get_selected_block()\cell stack.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell scope_info()\cell tracepoint.c\cell\row
\cell validate_actionline()\cell tracepoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function block_for_pc_sect()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct block* block_for_pc_sect ( CORE_ADDR pc, struct bfd_section* section )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell block.h\cell\cell\row
Calls: \cell blockvector_for_pc_sect()\cell block.c\cell\row
Called by:\cell block_for_pc()\cell block.c\cell\row
\cell find_pc_sect_function()\cell blockframe.c\cell\row
\cell find_pc_sect_function_no_inlined()\cell blockframe.c\cell\row
Refs Var:\cell cached_block\cell symtab.c\cell\row
\cell cached_mapped_section\cell symtab.c\cell\row
\cell last_block_lookup_pc\cell symtab.c\cell\row
\cell last_mapped_section_lookup_pc\cell symtab.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function block_function()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* block_function ( const struct block* bl )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell block.h\cell\cell\row
Called by:\cell ada_find_renaming_symbol()\cell ada-lang.c\cell\row
\cell find_pc_sect_function()\cell blockframe.c\cell\row
\cell find_pc_sect_function_no_inlined()\cell blockframe.c\cell\row
\cell get_frame_function()\cell blockframe.c\cell\row
\cell get_pc_function_start()\cell blockframe.c\cell\row
\cell remove_out_of_scope_renamings()\cell ada-lang.c\cell\row
\cell resolve_sal_pc()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function block_global_block()\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct block* block_global_block ( const struct block* block )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell block.h\cell\cell\row
Called by:\cell lookup_symbol_aux()\cell symtab.c\cell\row
\cell lookup_symbol_file()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function block_highest_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR block_highest_pc ( const struct block* bl )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell block.h\cell\cell\row
Called by:\cell ada_lookup_symbol()\cell ada-lang.c\cell\row
\cell addr_inside_main_func()\cell blockframe.c\cell\row
\cell blockvector_for_pc_sect()\cell block.c\cell\row
\cell find_pc_partial_function_impl()\cell blockframe.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function block_scope()\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* block_scope ( const struct block* block )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell block.h\cell\cell\row
Called by:\cell cp_lookup_symbol_nonlocal()\cell cp-namespace.c\cell\row
\cell cp_lookup_transparent_type()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function block_set_scope()\par}
{\s5\f1\fs20\ql\sb50\sa50 void block_set_scope ( struct block* block, const char* scope, struct obstack* obstack )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell block.h\cell\cell\row
Calls: \cell block_initialize_namespace()\cell block.c\cell\row
Called by:\cell cp_set_block_scope()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function block_set_using()\par}
{\s5\f1\fs20\ql\sb50\sa50 void block_set_using ( struct block* block, struct using_direct* usingd, struct obstack* obstack )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell block.h\cell\cell\row
Calls: \cell block_initialize_namespace()\cell block.c\cell\row
Called by:\cell cp_finalize_namespace()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function block_starts_and_ends()\par}
{\s5\f1\fs20\ql\sb50\sa50 int block_starts_and_ends ( struct block* bl, CORE_ADDR start, CORE_ADDR end )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell block.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function block_static_block()\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct block* block_static_block ( const struct block* block )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell block.h\cell\cell\row
Called by:\cell ada_lookup_symbol_nonlocal()\cell ada-lang.c\cell\row
\cell block_using()\cell block.c\cell\row
\cell lookup_symbol_all()\cell symtab.c\cell\row
\cell lookup_symbol_aux_local()\cell symtab.c\cell\row
\cell lookup_symbol_static()\cell symtab.c\cell\row
\cell make_symbol_overload_list_qualified()\cell cp-support.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function block_using()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct using_direct* block_using ( const struct block* block )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell block.h\cell\cell\row
Calls: \cell block_static_block()\cell block.c\cell\row
Called by:\cell cp_lookup_symbol_namespace()\cell cp-namespace.c\cell\row
\cell make_symbol_overload_list_using()\cell cp-support.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function blockvector_for_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct blockvector* blockvector_for_pc ( CORE_ADDR pc, int* pindex )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell block.h\cell\cell\row
Calls: \cell blockvector_for_pc_sect()\cell block.c\cell\row
\cell find_pc_mapped_section()\cell symfile.c\cell\row
Called by:\cell print_frame_label_vars()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function blockvector_for_pc_sect()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct blockvector* blockvector_for_pc_sect ( CORE_ADDR pc, struct bfd_section* section, int* pindex, struct symtab* symtab )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell block.h\cell\cell\row
Calls: \cell block_contains_pc()\cell block.c\cell\row
\cell block_highest_pc()\cell block.c\cell\row
\cell find_pc_sect_symtab()\cell symtab.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell block_for_pc_sect()\cell block.c\cell\row
\cell blockvector_for_pc()\cell block.c\cell\row
\cell decode_all_digits_exhaustive()\cell linespec.c\cell\row
\cell resolve_sal_pc()\cell breakpoint.c\cell\row
Refs Var:\cell cached_blockvector\cell symtab.c\cell\row
\cell cached_blockvector_index\cell symtab.c\cell\row
\cell cached_mapped_section\cell symtab.c\cell\row
\cell last_blockvector_lookup_pc\cell symtab.c\cell\row
\cell last_mapped_section_lookup_pc\cell symtab.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function contained_in()\par}
{\s5\f1\fs20\ql\sb50\sa50 int contained_in ( const struct block* a, const struct block* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell block.h\cell\cell\row
Called by:\cell c_parse()\cell c-exp.c\cell\row
\cell display_info()\cell printcmd.c\cell\row
\cell do_one_display()\cell printcmd.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell finish_block()\cell buildsym.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
\cell print_frame_label_vars()\cell stack.c\cell\row
\cell push_variable()\cell jv-exp.c\cell\row
\cell resolve_subexp()\cell ada-lang.c\cell\row
\cell write_var_from_sym()\cell ada-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function block_initialize_namespace()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void block_initialize_namespace ( struct block* block, struct obstack* obstack )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell block.c\cell\cell\row
Calls: \cell  _obstack_newchunk()\cell\cell\row
Called by:\cell block_set_scope()\cell block.c\cell\row
\cell block_set_using()\cell block.c\cell\row
\intbl0
}
