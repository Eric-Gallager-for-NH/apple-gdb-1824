<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF cp-valprint.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for cp-valprint.c of gdb.cxref.
<author>cxref

<sect>File cp-valprint.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;annotate.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;c-lang.h&quot;</tt>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;macroexp.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;cp-abi.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;valprint.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;cp-support.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>

<sect1>Global Variable vtblprint

<p>
<tt>int vtblprint</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>cp-valprint.c
<item>f-lang.c
<item>f-valprint.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>m2-lang.c
<item>m2-valprint.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>printcmd.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_cp_valprint()  :  cp-valprint.c
<item>c_val_print()  :  c-valprint.c
<item>cp_print_value_fields()  :  cp-valprint.c
<item>pascal_val_print()  :  p-valprint.c
</itemize>
</descrip>

<sect1>Global Variable static_field_print

<p>
<tt>int static_field_print</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>cp-valprint.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>m2-lang.c
<item>m2-valprint.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_cp_valprint()  :  cp-valprint.c
<item>cp_print_value_fields()  :  cp-valprint.c
<item>java_print_value_fields()  :  jv-valprint.c
</itemize>
</descrip>

<sect1>Global Variable objectprint

<p>
<tt>int objectprint</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-valprint.c
<item>c-lang.c
<item>c-valprint.c
<item>cp-valprint.c
<item>eval.c
<item>f-lang.c
<item>f-valprint.c
<item>jv-valprint.c
<item>m2-lang.c
<item>objc-lang.c
<item>p-lang.c
<item>p-valprint.c
<item>printcmd.c
<item>scm-valprint.c
<item>typeprint.c
<item>valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_cp_valprint()  :  cp-valprint.c
<item>c_value_print()  :  c-valprint.c
<item>evaluate_subexp_standard()  :  eval.c
<item>whatis_exp()  :  typeprint.c
</itemize>
</descrip>

<sect1>Global Variable vtbl_ptr_name

<p>
<tt>const char vtbl_ptr_name[]</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>cp-valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cp_is_vtbl_ptr_type()  :  cp-valprint.c
</itemize>
</descrip>

<sect1>Global Variable hpacc_vtbl_ptr_name

<p>
<tt>const char hpacc_vtbl_ptr_name[]</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>cp-valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cp_print_value_fields()  :  cp-valprint.c
</itemize>
</descrip>

<sect1>Global Variable hpacc_vtbl_ptr_type_name

<p>
<tt>const char hpacc_vtbl_ptr_type_name[]</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>cp-valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cp_print_value_fields()  :  cp-valprint.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>dont_print_vb_obstack</bf><newline>
<tt>static struct obstack dont_print_vb_obstack</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_cp_valprint()
<item>cp_print_value()
</itemize>
</descrip>
<p>
<bf>dont_print_statmem_obstack</bf><newline>
<tt>static struct obstack dont_print_statmem_obstack</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_cp_valprint()
<item>cp_print_static_field()
<item>cp_print_value_fields()
</itemize>
</descrip>

<sect1>Global Function _initialize_cp_valprint()

<p><tt>void _initialize_cp_valprint ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-valprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>_obstack_begin(), add_setshow_boolean_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>show_objectprint()  :  cp-valprint.c
<item>show_static_field_print()  :  cp-valprint.c
<item>show_vtblprint()  :  cp-valprint.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dont_print_statmem_obstack  :  cp-valprint.c
<item>dont_print_vb_obstack  :  cp-valprint.c
<item>objectprint  :  cp-valprint.c
<item>static_field_print  :  cp-valprint.c
<item>vtblprint  :  cp-valprint.c
<item>setprintlist, showprintlist
</itemize>
</descrip>

<sect1>Global Function cp_is_vtbl_member()

<p><tt>int cp_is_vtbl_member ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cp_is_vtbl_ptr_type()  :  cp-valprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_val_print()  :  c-valprint.c
</itemize>
</descrip>

<sect1>Global Function cp_is_vtbl_ptr_type()

<p><tt>int cp_is_vtbl_ptr_type ( struct type* the_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>type_name_no_tag()  :  gdbtypes.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_val_print()  :  c-valprint.c
<item>cp_is_vtbl_member()  :  cp-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>vtbl_ptr_name  :  cp-valprint.c
</itemize>
</descrip>

<sect1>Global Function cp_print_class_member()

<p><tt>void cp_print_class_member ( const gdb_byte* valaddr, struct type* domain, struct ui_file* stream, const char* prefix )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>c_type_print_base()  :  c-typeprint.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>quit()  :  utils.c
<item>type_name_no_tag()  :  gdbtypes.c
<item>unpack_long()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_val_print()  :  c-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>cplus_struct_default  :  gdbtypes.c
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Global Function cp_print_class_method()

<p><tt>void cp_print_class_method ( const gdb_byte* valaddr, struct type* type, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_stub_method_group()  :  gdbtypes.c
<item>check_typedef()  :  gdbtypes.c
<item>error()  :  utils.c
<item>find_pc_function()  :  blockframe.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>type_print()  :  typeprint.c
<item>unpack_pointer()  :  value.c
<item>xfree()  :  utils.c
<item>cplus_demangle(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_val_print()  :  c-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
<item>deprecated_hp_som_som_object_present  :  symtab.c
</itemize>
</descrip>

<sect1>Global Function cp_print_value_fields()

<p><tt>void cp_print_value_fields ( struct type* type, struct type* real_type, const gdb_byte* valaddr, int offset, CORE_ADDR address, struct ui_file* stream, int format, int recurse, enum val_prettyprint pretty, struct type** dont_print_vb, int dont_print_statmem )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>common_val_print()  :  valprint.c
<item>cp_print_static_field()  :  cp-valprint.c
<item>cp_print_value()  :  cp-valprint.c
<item>fprintf_filtered()  :  utils.c
<item>fprintf_symbol_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>n_spaces()  :  utils.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>print_spaces_filtered()  :  utils.c
<item>type_name_no_tag()  :  gdbtypes.c
<item>unpack_field_as_long()  :  value.c
<item>val_print()  :  valprint.c
<item>value_from_longest()  :  value.c
<item>value_from_pointer()  :  value.c
<item>value_static_field()  :  value.c
<item>warning()  :  utils.c
<item>wrap_here()  :  utils.c
<item>annotate_field_begin(), annotate_field_end(), annotate_field_name_end(), annotate_field_value(), strcmp(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_val_print()  :  c-valprint.c
<item>cp_print_static_field()  :  cp-valprint.c
<item>cp_print_value()  :  cp-valprint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>obstack_free()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_unsigned_long  :  gdbtypes.c
<item>cplus_struct_default  :  gdbtypes.c
<item>current_language  :  language.c
<item>dont_print_statmem_obstack  :  cp-valprint.c
<item>hpacc_vtbl_ptr_name  :  cp-valprint.c
<item>hpacc_vtbl_ptr_type_name  :  cp-valprint.c
<item>inspect_it  :  printcmd.c
<item>static_field_print  :  cp-valprint.c
<item>vtblprint  :  cp-valprint.c
</itemize>
</descrip>

<sect1>Local Function cp_print_hpacc_virtual_table_entries()

<p><tt>static void cp_print_hpacc_virtual_table_entries ( struct type* type, int* vfuncs, struct value* v, struct ui_file* stream, int format, int recurse, enum val_prettyprint pretty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-valprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>common_val_print()  :  valprint.c
<item>cp_print_hpacc_virtual_table_entries()  :  cp-valprint.c
<item>deprecated_set_value_type()  :  value.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>primary_base_class()  :  gdbtypes.c
<item>value_contents_writeable()  :  value.c
<item>value_copy()  :  value.c
<item>value_fetch_lazy()  :  valops.c
<item>value_ind()  :  valops.c
<item>value_lazy()  :  value.c
<item>value_type()  :  value.c
<item>cplus_demangle()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_print_hpacc_virtual_table_entries()  :  cp-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function cp_print_static_field()

<p><tt>static void cp_print_static_field ( struct type* type, struct value* val, struct ui_file* stream, int format, int recurse, enum val_prettyprint pretty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-valprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>cp_print_value_fields()  :  cp-valprint.c
<item>deprecated_value_address_hack()  :  value.c
<item>fputs_filtered()  :  utils.c
<item>val_print()  :  valprint.c
<item>value_contents_all()  :  value.c
<item>value_embedded_offset()  :  value.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_print_value_fields()  :  cp-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dont_print_statmem_obstack  :  cp-valprint.c
</itemize>
</descrip>

<sect1>Local Function cp_print_value()

<p><tt>static void cp_print_value ( struct type* type, struct type* real_type, const gdb_byte* valaddr, int offset, CORE_ADDR address, struct ui_file* stream, int format, int recurse, enum val_prettyprint pretty, struct type** dont_print_vb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-valprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>baseclass_offset()  :  cp-abi.c
<item>check_typedef()  :  gdbtypes.c
<item>cp_print_value_fields()  :  cp-valprint.c
<item>error()  :  utils.c
<item>find_rt_vbase_offset()  :  valops.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>print_spaces_filtered()  :  utils.c
<item>target_read_memory()  :  target/target.c
<item>warning()  :  utils.c
<item>__builtin_alloca(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_print_value_fields()  :  cp-valprint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>obstack_free()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
<item>dont_print_vb_obstack  :  cp-valprint.c
</itemize>
</descrip>

<sect1>Local Function show_objectprint()

<p><tt>static void show_objectprint ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_cp_valprint()  :  cp-valprint.c
</itemize>
</descrip>

<sect1>Local Function show_static_field_print()

<p><tt>static void show_static_field_print ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_cp_valprint()  :  cp-valprint.c
</itemize>
</descrip>

<sect1>Local Function show_vtblprint()

<p><tt>static void show_vtblprint ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_cp_valprint()  :  cp-valprint.c
</itemize>
</descrip>

</article>
