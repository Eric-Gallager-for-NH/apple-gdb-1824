{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF thread.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File thread.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "environ.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbthread.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exceptions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <setjmp.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "regcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "wrapper.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "varobj.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <ctype.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-infthread.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct current_thread_cleanup\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct current_thread_cleanup}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 ptid_t inferior_ptid;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int print;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct select_thread_args\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct select_thread_args}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* tidstr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int print;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable thread_list\par}
{\s5\f1\fs20\ql\sb50\sa50 struct thread_info* thread_list\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell breakpoint.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell add_thread()\cell thread.c\cell\row
\cell delete_step_resume_breakpoint()\cell thread.c\cell\row
\cell delete_thread()\cell thread.c\cell\row
\cell do_captured_list_thread_ids()\cell thread.c\cell\row
\cell find_thread_id()\cell thread.c\cell\row
\cell find_thread_pid()\cell thread.c\cell\row
\cell in_thread_list()\cell thread.c\cell\row
\cell info_threads_command()\cell thread.c\cell\row
\cell init_thread_list()\cell thread.c\cell\row
\cell iterate_over_threads()\cell thread.c\cell\row
\cell pid_to_thread_id()\cell thread.c\cell\row
\cell prune_threads()\cell thread.c\cell\row
\cell thread_apply_all_command()\cell thread.c\cell\row
\cell valid_thread_id()\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable highest_thread_num\par}
{\s5\f1\fs20\ql\sb50\sa50 int highest_thread_num\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell breakpoint.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell add_thread()\cell thread.c\cell\row
\cell init_thread_list()\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable thread_cmd_list\par}
{\s5\f1\fs20\ql\sb50\sa50 struct cmd_list_element* thread_cmd_list\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell breakpoint.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell _initialize_thread()\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep External Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable scheduler_lock_ptid\par}
{\s5\f1\fs20\ql\sb50\sa50 extern struct ptid scheduler_lock_ptid\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_thread()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_thread ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell thread.c\cell\cell\row
Calls: \cell  add_cmd(), add_com_alias(), add_info(), add_prefix_cmd()\cell\cell\row
Refs Func:\cell info_threads_command()\cell thread.c\cell\row
\cell thread_apply_all_command()\cell thread.c\cell\row
\cell thread_apply_command()\cell thread.c\cell\row
\cell thread_command()\cell thread.c\cell\row
Refs Var:\cell thread_cmd_list\cell thread.c\cell\row
\cell xdb_commands\cell main.c\cell\row
\cell  cmdlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function add_thread()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct thread_info* add_thread ( ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbthread.h\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
\cell record_currthread()\cell remote.c\cell\row
\cell remote_newthread_step()\cell remote.c\cell\row
\cell remote_threads_info()\cell remote.c\cell\row
Refs Var:\cell highest_thread_num\cell thread.c\cell\row
\cell thread_list\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function delete_step_resume_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void delete_step_resume_breakpoint ( void* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbthread.h\cell\cell\row
Calls: \cell delete_breakpoint()\cell breakpoint.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
Used in:\cell fetch_inferior_event()\cell infrun.c\cell\row
\cell wait_for_inferior()\cell infrun.c\cell\row
Refs Var:\cell thread_list\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function delete_thread()\par}
{\s5\f1\fs20\ql\sb50\sa50 void delete_thread ( ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbthread.h\cell\cell\row
Calls: \cell free_thread()\cell thread.c\cell\row
\cell ptid_equal()\cell infrun.c\cell\row
Called by:\cell prune_threads()\cell thread.c\cell\row
Refs Var:\cell thread_list\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_thread_id()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct thread_info* find_thread_id ( int num )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbthread.h\cell\cell\row
Called by:\cell do_captured_thread_select()\cell thread.c\cell\row
\cell load_infrun_state()\cell thread.c\cell\row
\cell restore_thread_inlined_call_stack()\cell inlining.c\cell\row
\cell save_infrun_state()\cell thread.c\cell\row
\cell save_thread_inlined_call_stack()\cell inlining.c\cell\row
\cell thread_apply_command()\cell thread.c\cell\row
\cell thread_id_to_pid()\cell thread.c\cell\row
Refs Var:\cell thread_list\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_thread_pid()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct thread_info* find_thread_pid ( ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbthread.h\cell\cell\row
Calls: \cell ptid_equal()\cell infrun.c\cell\row
Refs Var:\cell thread_list\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdb_list_thread_ids()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum gdb_rc gdb_list_thread_ids ( struct ui_out* uiout, char** error_message )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdb.h\cell\cell\row
Calls: \cell  catch_exceptions_with_msg()\cell\cell\row
Refs Func:\cell do_captured_list_thread_ids()\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdb_thread_select()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum gdb_rc gdb_thread_select ( struct ui_out* uiout, const char* tidstr, int print, char** error_message )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdb.h\cell\cell\row
Calls: \cell  catch_exceptions_with_msg()\cell\cell\row
Called by:\cell thread_command()\cell thread.c\cell\row
Refs Func:\cell do_captured_thread_select()\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function in_thread_list()\par}
{\s5\f1\fs20\ql\sb50\sa50 int in_thread_list ( ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbthread.h\cell\cell\row
Calls: \cell ptid_equal()\cell infrun.c\cell\row
Called by:\cell breakpoint_re_set_thread()\cell breakpoint.c\cell\row
\cell context_switch()\cell infrun.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell record_currthread()\cell remote.c\cell\row
\cell remote_newthread_step()\cell remote.c\cell\row
\cell remote_threads_info()\cell remote.c\cell\row
\cell resume()\cell infrun.c\cell\row
\cell set_momentary_breakpoint()\cell breakpoint.c\cell\row
Refs Var:\cell thread_list\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function init_thread_list()\par}
{\s5\f1\fs20\ql\sb50\sa50 void init_thread_list ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbthread.h\cell\cell\row
Calls: \cell free_thread()\cell thread.c\cell\row
Called by:\cell kill_command()\cell inflow.c\cell\row
\cell start_remote()\cell infrun.c\cell\row
Refs Var:\cell highest_thread_num\cell thread.c\cell\row
\cell thread_list\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function iterate_over_threads()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct thread_info* iterate_over_threads ( int (*callback)(struct thread_info*,void*), void* data )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbthread.h\cell\cell\row
Called by:\cell check_safe_call()\cell valops.c\cell\row
Refs Var:\cell thread_list\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function load_infrun_state()\par}
{\s5\f1\fs20\ql\sb50\sa50 void load_infrun_state ( ptid_t ptid, CORE_ADDR* prev_pc, int* trap_expected, struct breakpoint** step_resume_breakpoint, CORE_ADDR* step_range_start, CORE_ADDR* step_range_end, struct address_range_list** stepping_ranges, struct frame_id* step_frame_id, int* handling_longjmp, int* another_trap, int* stepping_through_solib_after_catch, bpstat* stepping_through_solib_catchpoints, int* current_line, struct symtab** current_symtab )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbthread.h\cell\cell\row
Calls: \cell find_thread_id()\cell thread.c\cell\row
\cell pid_to_thread_id()\cell thread.c\cell\row
\cell restore_thread_inlined_call_stack()\cell inlining.c\cell\row
Called by:\cell context_switch()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function make_cleanup_restore_current_thread()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct cleanup* make_cleanup_restore_current_thread ( ptid_t inferior_ptid, int print )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdb.h\cell\cell\row
Calls: \cell make_cleanup()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell check_safe_call()\cell valops.c\cell\row
\cell safe_check_is_thread_unsafe()\cell valops.c\cell\row
\cell thread_apply_all_command()\cell thread.c\cell\row
\cell thread_apply_command()\cell thread.c\cell\row
Refs Func:\cell do_restore_current_thread_cleanup()\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function pid_to_thread_id()\par}
{\s5\f1\fs20\ql\sb50\sa50 int pid_to_thread_id ( ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbthread.h\cell\cell\row
Calls: \cell ptid_equal()\cell infrun.c\cell\row
Called by:\cell bpstat_find_step_resume_breakpoint()\cell breakpoint.c\cell\row
\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell breakpoint_re_set_thread()\cell breakpoint.c\cell\row
\cell breakpoint_thread_match()\cell breakpoint.c\cell\row
\cell do_captured_thread_select()\cell thread.c\cell\row
\cell do_check_is_thread_unsafe()\cell valops.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell load_infrun_state()\cell thread.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell restore_thread_inlined_call_stack()\cell inlining.c\cell\row
\cell save_infrun_state()\cell thread.c\cell\row
\cell save_thread_inlined_call_stack()\cell inlining.c\cell\row
\cell set_momentary_breakpoint()\cell breakpoint.c\cell\row
\cell thread_command()\cell thread.c\cell\row
Refs Var:\cell thread_list\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function prune_threads()\par}
{\s5\f1\fs20\ql\sb50\sa50 void prune_threads ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbthread.h\cell\cell\row
Calls: \cell delete_thread()\cell thread.c\cell\row
\cell thread_alive()\cell thread.c\cell\row
Called by:\cell do_captured_list_thread_ids()\cell thread.c\cell\row
\cell info_threads_command()\cell thread.c\cell\row
Refs Var:\cell thread_list\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function save_infrun_state()\par}
{\s5\f1\fs20\ql\sb50\sa50 void save_infrun_state ( ptid_t ptid, CORE_ADDR prev_pc, int trap_expected, struct breakpoint* step_resume_breakpoint, CORE_ADDR step_range_start, CORE_ADDR step_range_end, struct address_range_list* stepping_ranges, const struct frame_id* step_frame_id, int handling_longjmp, int another_trap, int stepping_through_solib_after_catch, bpstat stepping_through_solib_catchpoints, int current_line, struct symtab* current_symtab )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbthread.h\cell\cell\row
Calls: \cell find_thread_id()\cell thread.c\cell\row
\cell pid_to_thread_id()\cell thread.c\cell\row
\cell save_thread_inlined_call_stack()\cell inlining.c\cell\row
Called by:\cell context_switch()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function switch_to_thread()\par}
{\s5\f1\fs20\ql\sb50\sa50 void switch_to_thread ( ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbthread.h\cell\cell\row
Calls: \cell do_hand_call_cleanups()\cell utils.c\cell\row
\cell flush_cached_frames()\cell frame.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell inlined_function_call_stack_pc()\cell inlining.c\cell\row
\cell inlined_function_update_call_stack()\cell inlining.c\cell\row
\cell ptid_equal()\cell infrun.c\cell\row
\cell read_pc()\cell regcache.c\cell\row
\cell registers_changed()\cell regcache.c\cell\row
\cell restore_thread_inlined_call_stack()\cell inlining.c\cell\row
\cell save_thread_inlined_call_stack()\cell inlining.c\cell\row
\cell scheduler_lock_on_p()\cell infrun.c\cell\row
\cell scheduler_run_this_ptid()\cell infrun.c\cell\row
\cell select_frame()\cell frame.c\cell\row
Called by:\cell do_captured_thread_select()\cell thread.c\cell\row
\cell do_check_is_thread_unsafe()\cell valops.c\cell\row
\cell info_threads_command()\cell thread.c\cell\row
\cell restore_current_thread()\cell thread.c\cell\row
\cell thread_apply_all_command()\cell thread.c\cell\row
\cell thread_apply_command()\cell thread.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\cell stop_pc\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function thread_id_to_pid()\par}
{\s5\f1\fs20\ql\sb50\sa50 ptid_t thread_id_to_pid ( int num )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbthread.h\cell\cell\row
Calls: \cell find_thread_id()\cell thread.c\cell\row
\cell pid_to_ptid()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function valid_thread_id()\par}
{\s5\f1\fs20\ql\sb50\sa50 int valid_thread_id ( int num )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbthread.h\cell\cell\row
Called by:\cell break_command_2()\cell breakpoint.c\cell\row
Refs Var:\cell thread_list\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_captured_list_thread_ids()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int do_captured_list_thread_ids ( struct ui_out* uiout, void* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell make_cleanup_ui_out_list_begin_end()\cell ui-out.c\cell\row
\cell make_cleanup_ui_out_tuple_begin_end()\cell ui-out.c\cell\row
\cell prune_threads()\cell thread.c\cell\row
\cell ui_out_field_int()\cell ui-out.c\cell\row
\cell  macosx_print_thread_details()\cell\cell\row
Used in:\cell gdb_list_thread_ids()\cell thread.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell thread_list\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_captured_thread_select()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int do_captured_thread_select ( struct ui_out* uiout, void* in_args )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell clear_inlined_subroutine_print_frames()\cell inlining.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_thread_id()\cell thread.c\cell\row
\cell frame_relative_level()\cell frame.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell get_frame_type()\cell frame.c\cell\row
\cell parse_and_eval()\cell eval.c\cell\row
\cell pid_to_thread_id()\cell thread.c\cell\row
\cell print_stack_frame()\cell stack.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell switch_to_thread()\cell thread.c\cell\row
\cell thread_alive()\cell thread.c\cell\row
\cell ui_out_field_int()\cell ui-out.c\cell\row
\cell ui_out_field_string()\cell ui-out.c\cell\row
\cell ui_out_text()\cell ui-out.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell  deprecated_context_hook()\cell\cell\row
Used in:\cell gdb_thread_select()\cell thread.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell deprecated_context_hook\cell top.c\cell\row
\cell deprecated_selected_frame\cell frame.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_restore_current_thread_cleanup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_restore_current_thread_cleanup ( void* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell restore_current_thread()\cell thread.c\cell\row
\cell xfree()\cell utils.c\cell\row
Used in:\cell make_cleanup_restore_current_thread()\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function free_thread()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void free_thread ( struct thread_info* tp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell delete_thread()\cell thread.c\cell\row
\cell init_thread_list()\cell thread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function info_threads_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void info_threads_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell thread.c\cell\cell\row
Calls: \cell clear_inlined_subroutine_print_frames()\cell inlining.c\cell\row
\cell frame_find_by_id()\cell frame.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell print_stack_frame()\cell stack.c\cell\row
\cell prune_threads()\cell thread.c\cell\row
\cell ptid_equal()\cell infrun.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell show_stack_frame()\cell stack.c\cell\row
\cell switch_to_thread()\cell thread.c\cell\row
\cell ui_out_field_int()\cell ui-out.c\cell\row
\cell ui_out_field_string()\cell ui-out.c\cell\row
\cell ui_out_text()\cell ui-out.c\cell\row
\cell ui_out_text_fmt()\cell ui-out.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  __builtin___snprintf_chk(), __builtin_object_size(), strlcat(), strlcpy(), strlen()\cell\cell\row
Used in:\cell _initialize_thread()\cell thread.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell thread_list\cell thread.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function restore_current_thread()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void restore_current_thread ( ptid_t ptid, int print )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell thread.c\cell\cell\row
Calls: \cell clear_inlined_subroutine_print_frames()\cell inlining.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell print_stack_frame()\cell stack.c\cell\row
\cell ptid_equal()\cell infrun.c\cell\row
\cell switch_to_thread()\cell thread.c\cell\row
Called by:\cell do_restore_current_thread_cleanup()\cell thread.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function thread_alive()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int thread_alive ( struct thread_info* tp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell thread.c\cell\cell\row
Calls: \cell pid_to_ptid()\cell infrun.c\cell\row
\cell ptid_get_pid()\cell infrun.c\cell\row
Called by:\cell do_captured_thread_select()\cell thread.c\cell\row
\cell prune_threads()\cell thread.c\cell\row
\cell thread_apply_all_command()\cell thread.c\cell\row
\cell thread_apply_command()\cell thread.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function thread_apply_all_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void thread_apply_all_command ( const char* cmd, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell thread.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_restore_current_thread()\cell thread.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell switch_to_thread()\cell thread.c\cell\row
\cell thread_alive()\cell thread.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), safe_execute_command(), xstrdup()\cell\cell\row
Used in:\cell _initialize_thread()\cell thread.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell thread_list\cell thread.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function thread_apply_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void thread_apply_command ( const char* tidlist, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell thread.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell execute_command()\cell top.c\cell\row
\cell find_thread_id()\cell thread.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_restore_current_thread()\cell thread.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell switch_to_thread()\cell thread.c\cell\row
\cell thread_alive()\cell thread.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), isalpha(), strtol(), xstrdup()\cell\cell\row
Used in:\cell _initialize_thread()\cell thread.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function thread_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void thread_command ( const char* tidstr, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell thread.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell gdb_thread_select()\cell thread.c\cell\row
\cell pid_to_thread_id()\cell thread.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_thread()\cell thread.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
}
