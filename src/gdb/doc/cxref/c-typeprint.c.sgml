<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF c-typeprint.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for c-typeprint.c of gdb.cxref.
<author>cxref

<sect>File c-typeprint.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;c-lang.h&quot;</tt>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;macroexp.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;typeprint.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;cp-abi.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;errno.h&gt;</tt>
</itemize>

<sect1>Type enum possible_secttypes_e

<p>
<itemize>
<item><tt>enum possible_secttypes_e</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>s_none;</tt><newline>
<item><tt>s_public;</tt><newline>
<item><tt>s_private;</tt><newline>
<item><tt>s_protected;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Function c_print_type()

<p><tt>void c_print_type ( struct type* type, const char* varstring, struct ui_file* stream, int show, int level )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>c_type_print_base()  :  c-typeprint.c
<item>c_type_print_varspec_prefix()  :  c-typeprint.c
<item>c_type_print_varspec_suffix()  :  c-typeprint.c
<item>check_typedef()  :  gdbtypes.c
<item>fputs_filtered()  :  utils.c
<item>strchr(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_type()  :  ada-typeprint.c
<item>c_type_print_args()  :  c-typeprint.c
<item>c_type_print_base()  :  c-typeprint.c
<item>c_type_print_varspec_suffix()  :  c-typeprint.c
<item>m2_print_type()  :  m2-typeprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c-lang.c
<item>objc-lang.c
<item>scm-lang.c
</itemize>
</descrip>

<sect1>Global Function c_type_print_base()

<p><tt>void c_type_print_base ( struct type* type, struct ui_file* stream, int show, int level )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>c_print_type()  :  c-typeprint.c
<item>c_print_typename_possibly_quoted()  :  c-typeprint.c
<item>c_type_print_base()  :  c-typeprint.c
<item>c_type_print_modifier()  :  c-typeprint.c
<item>check_typedef()  :  gdbtypes.c
<item>cp_type_print_derivation_info()  :  c-typeprint.c
<item>cp_type_print_method_args()  :  c-typeprint.c
<item>fprintf_filtered()  :  utils.c
<item>fprintfi_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>gdb_mangle_name()  :  symtab.c
<item>is_constructor_name()  :  cp-abi.c
<item>is_cplus_marker()  :  demangle.c
<item>is_destructor_name()  :  cp-abi.c
<item>is_type_conversion_operator()  :  c-typeprint.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>print_spaces_filtered()  :  utils.c
<item>quit()  :  utils.c
<item>remove_qualifiers()  :  c-typeprint.c
<item>type_name_no_tag()  :  gdbtypes.c
<item>type_print()  :  typeprint.c
<item>wrap_here()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), cplus_demangle(), strcmp(), strncmp(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_print_type()  :  c-typeprint.c
<item>c_type_print_base()  :  c-typeprint.c
<item>c_type_print_varspec_prefix()  :  c-typeprint.c
<item>cp_print_class_member()  :  cp-valprint.c
<item>java_type_print_base()  :  jv-typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
<item>deprecated_hp_som_som_object_present  :  symtab.c
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Global Function c_type_print_varspec_prefix()

<p><tt>void c_type_print_varspec_prefix ( struct type* type, struct ui_file* stream, int show, int passed_a_ptr, int need_post_space )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-typeprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>c_type_print_base()  :  c-typeprint.c
<item>c_type_print_modifier()  :  c-typeprint.c
<item>c_type_print_varspec_prefix()  :  c-typeprint.c
<item>error()  :  utils.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>quit()  :  utils.c
<item>type_name_no_tag()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_print_type()  :  c-typeprint.c
<item>c_type_print_varspec_prefix()  :  c-typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Global Function c_type_print_varspec_suffix()

<p><tt>void c_type_print_varspec_suffix ( struct type* type, struct ui_file* stream, int show, int passed_a_ptr, int demangled_args )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>typeprint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>c_print_type()  :  c-typeprint.c
<item>c_type_print_args()  :  c-typeprint.c
<item>c_type_print_varspec_suffix()  :  c-typeprint.c
<item>error()  :  utils.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>quit()  :  utils.c
<item>wrap_here()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_print_type()  :  c-typeprint.c
<item>c_type_print_varspec_suffix()  :  c-typeprint.c
<item>java_print_type()  :  jv-typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Local Function c_print_typename_possibly_quoted()

<p><tt>static void c_print_typename_possibly_quoted ( struct type* type, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-typeprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>c_type_print_modifier()  :  c-typeprint.c
<item>fputs_filtered()  :  utils.c
<item>get_single_quote_typename()  :  typeprint.c
<item>strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_type_print_base()  :  c-typeprint.c
</itemize>
</descrip>

<sect1>Local Function c_type_print_args()

<p><tt>static void c_type_print_args ( struct type* type, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-typeprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>c_print_type()  :  c-typeprint.c
<item>fprintf_filtered()  :  utils.c
<item>wrap_here()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_type_print_varspec_suffix()  :  c-typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Local Function c_type_print_modifier()

<p><tt>static void c_type_print_modifier ( struct type* type, struct ui_file* stream, int need_pre_space, int need_post_space )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-typeprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>address_space_int_to_name()  :  gdbtypes.c
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_print_typename_possibly_quoted()  :  c-typeprint.c
<item>c_type_print_base()  :  c-typeprint.c
<item>c_type_print_varspec_prefix()  :  c-typeprint.c
</itemize>
</descrip>

<sect1>Local Function cp_type_print_derivation_info()

<p><tt>static void cp_type_print_derivation_info ( struct ui_file* stream, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-typeprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>type_name_no_tag()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_type_print_base()  :  c-typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function cp_type_print_method_args()

<p><tt>static void cp_type_print_method_args ( struct type* mtype, const char* prefix, const char* varstring, int staticp, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-typeprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>fprintf_symbol_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>type_print()  :  typeprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_type_print_base()  :  c-typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Local Function is_type_conversion_operator()

<p><tt>static int is_type_conversion_operator ( struct type* type, int i, int j )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>strchr(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_type_print_base()  :  c-typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function remove_qualifiers()

<p><tt>static char* remove_qualifiers ( char* qid )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>__builtin_alloca(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_type_print_base()  :  c-typeprint.c
</itemize>
</descrip>

</article>
