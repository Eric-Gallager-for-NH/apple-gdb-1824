<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF minsyms.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for minsyms.c of gdb.cxref.
<author>cxref

<sect>File minsyms.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;cp-abi.h&quot;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define BUNCH_SIZE 127</tt><newline>

<sect1>Type struct msym_bunch

<p>
<itemize>
<item><tt>struct msym_bunch</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct msym_bunch* next;</tt><newline>
<item><tt>struct minimal_symbol contents[127];</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Local Variables

<p>
<bf>msym_bunch</bf><newline>
<tt>static struct msym_bunch* msym_bunch</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>do_discard_minimal_symbols_cleanup()
<item>init_minimal_symbol_collection()
<item>install_minimal_symbols()
<item>prim_record_minimal_symbol_and_info()
</itemize>
</descrip>
<p>
<bf>msym_bunch_index</bf><newline>
<tt>static int msym_bunch_index</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>init_minimal_symbol_collection()
<item>install_minimal_symbols()
<item>prim_record_minimal_symbol_and_info()
</itemize>
</descrip>
<p>
<bf>bunches_seen</bf><newline>
<tt>static int bunches_seen</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>prim_record_minimal_symbol_and_info()
</itemize>
</descrip>
<p>
<bf>msym_count</bf><newline>
<tt>static int msym_count</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>init_minimal_symbol_collection()
<item>install_minimal_symbols()
<item>prim_record_minimal_symbol_and_info()
</itemize>
</descrip>

<sect1>Global Function add_minsym_to_hash_table()

<p><tt>void add_minsym_to_hash_table ( struct minimal_symbol* sym, struct minimal_symbol** table )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>msymbol_hash()  :  minsyms.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>build_minimal_symbol_hash_tables()  :  minsyms.c
</itemize>
</descrip>

<sect1>Global Function find_solib_trampoline_target()

<p><tt>CORE_ADDR find_solib_trampoline_target ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>lookup_solib_trampoline_symbol_by_pc()  :  minsyms.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>strcmp()
</itemize>
</descrip>

<sect1>Global Function init_minimal_symbol_collection()

<p><tt>void init_minimal_symbol_collection ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>append_psymbols_as_msymbols()  :  symfile.c
<item>coff_symfile_read()  :  coffread.c
<item>dbx_symfile_read()  :  dbxread.c
<item>elf_symfile_read()  :  elfread.c
<item>elfmdebug_build_psymtabs()  :  mdebugread.c
<item>mipscoff_symfile_read()  :  mipsread.c
<item>nlm_symfile_read()  :  nlmread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>msym_bunch  :  minsyms.c
<item>msym_bunch_index  :  minsyms.c
<item>msym_count  :  minsyms.c
</itemize>
</descrip>

<sect1>Global Function install_minimal_symbols()

<p><tt>void install_minimal_symbols ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>build_minimal_symbol_hash_tables()  :  minsyms.c
<item>compact_minimal_symbols()  :  minsyms.c
<item>cp_abi_is_auto_p()  :  cp-abi.c
<item>equivalence_table_build()  :  symmisc.c
<item>set_cp_abi_as_auto_default()  :  cp-abi.c
<item>symbol_demangled_name()  :  symtab.c
<item>symbol_init_language_specific()  :  symtab.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), _obstack_newchunk(), qsort()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>append_psymbols_as_msymbols()  :  symfile.c
<item>coff_symfile_read()  :  coffread.c
<item>dbx_symfile_read()  :  dbxread.c
<item>elf_symfile_read()  :  elfread.c
<item>elfmdebug_build_psymtabs()  :  mdebugread.c
<item>mipscoff_symfile_read()  :  mipsread.c
<item>nlm_symfile_read()  :  nlmread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>compare_minimal_symbols()  :  minsyms.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>msym_bunch  :  minsyms.c
<item>msym_bunch_index  :  minsyms.c
<item>msym_count  :  minsyms.c
</itemize>
</descrip>

<sect1>Global Function lookup_minimal_symbol()

<p><tt>struct minimal_symbol* lookup_minimal_symbol ( const char* name, const char* sfile, struct objfile* objf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>msymbol_hash()  :  minsyms.c
<item>msymbol_hash_iw()  :  minsyms.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>strcmp_iw()  :  utils.c
<item>symbol_demangled_name()  :  symtab.c
<item>warning()  :  utils.c
<item>strcmp(), strrchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_main_name()  :  ada-lang.c
<item>ada_update_initial_language()  :  ada-lang.c
<item>add_kext_command()  :  symfile.c
<item>addr_inside_main_func()  :  blockframe.c
<item>address_info()  :  printcmd.c
<item>c_parse()  :  c-exp.c
<item>convert_oso_map_to_final_map()  :  dwarf2read.c
<item>create_kext_addr_map()  :  dwarf2read.c
<item>create_objc_hook_breakpoint()  :  breakpoint.c
<item>decode_dollar()  :  linespec.c
<item>decode_variable()  :  linespec.c
<item>end_psymtab()  :  dbxread.c
<item>evaluate_subexp_standard()  :  eval.c
<item>f_parse()  :  f-exp.c
<item>find_function_in_inferior()  :  valops.c
<item>find_imps()  :  objc-lang.c
<item>find_objc_msgsend()  :  objc-lang.c
<item>find_stab_function_addr()  :  dbxread.c
<item>fixup_section()  :  symtab.c
<item>gen_var_ref()  :  ax-gdb.c
<item>hand_function_call()  :  infcall.c
<item>inside_main_func()  :  frame.c
<item>lookup_child_selector_nocache()  :  objc-lang.c
<item>lookup_objc_class()  :  objc-lang.c
<item>m2_parse()  :  m2-exp.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>new_objc_runtime_class_getClass()  :  objc-lang.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>new_objc_runtime_get_classname()  :  objc-lang.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>objc_init_trampoline_observer()  :  objc-lang.c
<item>objc_parse()  :  objc-exp.c
<item>objc_runtime_lock_taken_p()  :  objc-lang.c
<item>pascal_parse()  :  p-exp.c
<item>print_object_command()  :  objc-lang.c
<item>push_expression_name()  :  jv-exp.c
<item>read_objc_object()  :  objc-lang.c
<item>read_var_value()  :  findvar.c
<item>remote_check_symbols()  :  remote.c
<item>scope_info()  :  tracepoint.c
<item>simple_overlay_update()  :  symfile.c
<item>simple_read_overlay_table()  :  symfile.c
<item>value_fn_field()  :  value.c
<item>value_nsstring()  :  objc-lang.c
<item>value_static_field()  :  value.c
<item>write_dollar_variable()  :  parse.c
</itemize>
</descrip>

<sect1>Global Function lookup_minimal_symbol_all()

<p><tt>struct minimal_symbol* lookup_minimal_symbol_all ( const char* name, const char* sfile, struct objfile* objf, struct symbol_search** sym_list )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>msymbol_hash()  :  minsyms.c
<item>msymbol_hash_iw()  :  minsyms.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>strcmp_iw()  :  utils.c
<item>symbol_demangled_name()  :  symtab.c
<item>warning()  :  utils.c
<item>xmalloc()  :  utils.c
<item>strcmp(), strrchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_all_variables()  :  linespec.c
</itemize>
</descrip>

<sect1>Global Function lookup_minimal_symbol_by_pc()

<p><tt>struct minimal_symbol* lookup_minimal_symbol_by_pc ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>lookup_minimal_symbol_by_pc_section()  :  minsyms.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_val_print()  :  c-valprint.c
<item>find_pc_sect_line()  :  symtab.c
<item>frame_info()  :  stack.c
<item>get_pc_function_start()  :  blockframe.c
<item>get_prev_frame()  :  frame.c
<item>gnuv2_value_rtti_type()  :  gnu-v2-abi.c
<item>gnuv3_rtti_type()  :  gnu-v3-abi.c
<item>hand_function_call()  :  infcall.c
<item>info_common_command()  :  f-valprint.c
<item>lookup_solib_trampoline_symbol_by_pc()  :  minsyms.c
<item>maintenance_translate_address()  :  maint.c
<item>pascal_val_print()  :  p-valprint.c
<item>print_frame()  :  stack.c
<item>resolve_sal_pc()  :  breakpoint.c
<item>until_next_command()  :  infcmd.c
<item>x86_cxx_virtual_override_thunk_trampline()  :  target/x86-shared-tdep.c
<item>x86_frame_this_id()  :  target/x86-shared-tdep.c
</itemize>
</descrip>

<sect1>Global Function lookup_minimal_symbol_by_pc_section()

<p><tt>struct minimal_symbol* lookup_minimal_symbol_by_pc_section ( CORE_ADDR pc, asection* section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_sect_in_ordered_sections()  :  objfiles.c
<item>find_pc_section()  :  objfiles.c
<item>lookup_minimal_symbol_by_pc_section_from_objfile()  :  minsyms.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>build_address_symbolic()  :  printcmd.c
<item>find_pc_partial_function_impl()  :  blockframe.c
<item>find_pc_sect_psymtab()  :  symtab.c
<item>find_pc_sect_symtab()  :  symtab.c
<item>lookup_minimal_symbol_by_pc()  :  minsyms.c
<item>maintenance_translate_address()  :  maint.c
<item>sym_info()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>object_files  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function lookup_minimal_symbol_by_pc_section_from_objfile()

<p><tt>struct minimal_symbol* lookup_minimal_symbol_by_pc_section_from_objfile ( CORE_ADDR pc, asection* section, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>append_psymbols_as_msymbols()  :  symfile.c
<item>convert_oso_map_to_final_map()  :  dwarf2read.c
<item>create_kext_addr_map()  :  dwarf2read.c
<item>lookup_minimal_symbol_by_pc_section()  :  minsyms.c
</itemize>
</descrip>

<sect1>Global Function lookup_minimal_symbol_solib_trampoline()

<p><tt>struct minimal_symbol* lookup_minimal_symbol_solib_trampoline ( const char* name, struct objfile* objf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>msymbol_hash()  :  minsyms.c
<item>strcmp()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>object_files  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function lookup_minimal_symbol_text()

<p><tt>struct minimal_symbol* lookup_minimal_symbol_text ( const char* name, struct objfile* objf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>msymbol_hash()  :  minsyms.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_longjmp_breakpoint()  :  breakpoint.c
<item>create_overlay_event_breakpoint()  :  breakpoint.c
<item>find_pc_sect_line()  :  symtab.c
</itemize>
</descrip>

<sect1>Global Function lookup_solib_trampoline_symbol_by_pc()

<p><tt>struct minimal_symbol* lookup_solib_trampoline_symbol_by_pc ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>lookup_minimal_symbol_by_pc()  :  minsyms.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_solib_trampoline_target()  :  minsyms.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_discard_minimal_symbols()

<p><tt>struct cleanup* make_cleanup_discard_minimal_symbols ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>append_psymbols_as_msymbols()  :  symfile.c
<item>coff_symfile_read()  :  coffread.c
<item>dbx_symfile_read()  :  dbxread.c
<item>elf_symfile_read()  :  elfread.c
<item>elfmdebug_build_psymtabs()  :  mdebugread.c
<item>mipscoff_symfile_read()  :  mipsread.c
<item>nlm_symfile_read()  :  nlmread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_discard_minimal_symbols_cleanup()  :  minsyms.c
</itemize>
</descrip>

<sect1>Global Function msymbol_hash()

<p><tt>unsigned int msymbol_hash ( const char* string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_bincl_to_list()  :  dbxread.c
<item>add_minsym_to_hash_table()  :  minsyms.c
<item>equivalence_table_add()  :  symmisc.c
<item>find_corresponding_bincl_psymtab()  :  dbxread.c
<item>find_equivalent_msymbol()  :  symmisc.c
<item>gnu_v3_update_exception_catchpoints()  :  breakpoint.c
<item>lookup_child_selector()  :  objc-lang.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_minimal_symbol_all()  :  minsyms.c
<item>lookup_minimal_symbol_solib_trampoline()  :  minsyms.c
<item>lookup_minimal_symbol_text()  :  minsyms.c
</itemize>
</descrip>

<sect1>Global Function msymbol_hash_iw()

<p><tt>unsigned int msymbol_hash_iw ( const char* string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>isspace()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_minsym_to_demangled_hash_table()  :  minsyms.c
<item>insert_symbol_hashed()  :  dictionary.c
<item>iter_name_first_hashed()  :  dictionary.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_minimal_symbol_all()  :  minsyms.c
</itemize>
</descrip>

<sect1>Global Function msymbols_sort()

<p><tt>void msymbols_sort ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>build_minimal_symbol_hash_tables()  :  minsyms.c
<item>equivalence_table_build()  :  symmisc.c
<item>equivalence_table_delete()  :  symmisc.c
<item>qsort()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>objfile_relocate()  :  objfiles.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>compare_minimal_symbols()  :  minsyms.c
</itemize>
</descrip>

<sect1>Global Function prim_record_minimal_symbol()

<p><tt>void prim_record_minimal_symbol ( const char* name, CORE_ADDR address, enum minimal_symbol_type ms_type, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>executable_objfile()  :  objfiles.c
<item>internal_error()  :  utils.c
<item>prim_record_minimal_symbol_and_info()  :  minsyms.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_partial_symbol()  :  dwarf2read.c
<item>add_pe_exported_sym()  :  coff-pe-read.c
<item>nlm_symtab_read()  :  nlmread.c
<item>read_alphacoff_dynamic_symtab()  :  mipsread.c
<item>read_dbx_dynamic_symtab()  :  dbxread.c
<item>record_minimal_symbol()  :  coffread.c
</itemize>
</descrip>

<sect1>Global Function prim_record_minimal_symbol_and_info()

<p><tt>struct minimal_symbol* prim_record_minimal_symbol_and_info ( const char* name, const CORE_ADDR address, const enum minimal_symbol_type ms_type, const char* info, const int section, const asection* bfd_section, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_symbol_leading_char()  :  minsyms.c
<item>internal_error()  :  utils.c
<item>printf_filtered()  :  utils.c
<item>symbol_init_language_specific()  :  symtab.c
<item>symbol_set_names()  :  symtab.c
<item>warning()  :  utils.c
<item>xmalloc()  :  utils.c
<item>strcmp(), strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>append_psymbols_as_msymbols()  :  symfile.c
<item>coff_symtab_read()  :  coffread.c
<item>parse_partial_symbols()  :  mdebugread.c
<item>prim_record_minimal_symbol()  :  minsyms.c
<item>record_minimal_symbol()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bunches_seen  :  minsyms.c
<item>msym_bunch  :  minsyms.c
<item>msym_bunch_index  :  minsyms.c
<item>msym_count  :  minsyms.c
</itemize>
</descrip>

<sect1>Local Function add_minsym_to_demangled_hash_table()

<p><tt>static void add_minsym_to_demangled_hash_table ( struct minimal_symbol* sym, struct minimal_symbol** table )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>msymbol_hash_iw()  :  minsyms.c
<item>symbol_demangled_name()  :  symtab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>build_minimal_symbol_hash_tables()  :  minsyms.c
</itemize>
</descrip>

<sect1>Local Function build_minimal_symbol_hash_tables()

<p><tt>static void build_minimal_symbol_hash_tables ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>add_minsym_to_demangled_hash_table()  :  minsyms.c
<item>add_minsym_to_hash_table()  :  minsyms.c
<item>symbol_search_name()  :  symtab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>install_minimal_symbols()  :  minsyms.c
<item>msymbols_sort()  :  minsyms.c
</itemize>
</descrip>

<sect1>Local Function compact_minimal_symbols()

<p><tt>static int compact_minimal_symbols ( struct minimal_symbol* msymbol, int mcount, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>install_minimal_symbols()  :  minsyms.c
</itemize>
</descrip>

<sect1>Local Function compare_minimal_symbols()

<p><tt>static int compare_minimal_symbols ( const void* fn1p, const void* fn2p )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>install_minimal_symbols()  :  minsyms.c
<item>msymbols_sort()  :  minsyms.c
</itemize>
</descrip>

<sect1>Local Function do_discard_minimal_symbols_cleanup()

<p><tt>static void do_discard_minimal_symbols_cleanup ( void* arg )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_discard_minimal_symbols()  :  minsyms.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>msym_bunch  :  minsyms.c
</itemize>
</descrip>

<sect1>Local Function get_symbol_leading_char()

<p><tt>static int get_symbol_leading_char ( bfd* abfd )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>minsyms.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>prim_record_minimal_symbol_and_info()  :  minsyms.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_objfile  :  objfiles.c
</itemize>
</descrip>

</article>
