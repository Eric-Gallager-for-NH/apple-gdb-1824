<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF buildsym.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for buildsym.c of gdb.cxref.
<author>cxref

<sect>File buildsym.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;complaints.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;bcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/filenames.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/hashtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;macrotab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;cp-support.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;dictionary.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;buildsym.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;stabsread.h&quot;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define EXTERN</tt><newline>
<p>
<tt>#define INITIAL_CONTEXT_STACK_SIZE 10</tt><newline>
<p>
<tt>#define INITIAL_LINE_VECTOR_LENGTH 1000</tt><newline>
<p>
<tt>#define PROCESS_LINENUMBER_HOOK</tt><newline>

<sect1>Global Variable last_source_file

<p>
<tt>const char* last_source_file</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>coff_end_symtab()  :  coffread.c
<item>coff_symtab_read()  :  coffread.c
<item>complete_symtab()  :  coffread.c
<item>end_symtab()  :  buildsym.c
<item>parse_partial_symbols()  :  mdebugread.c
<item>patch_subfile_names()  :  buildsym.c
<item>process_one_symbol()  :  dbxread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
<item>read_dbx_symtab()  :  dbxread.c
<item>read_ofile_symtab()  :  dbxread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
<item>start_symtab()  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Variable last_source_start_addr

<p>
<tt>CORE_ADDR last_source_start_addr</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>coff_end_symtab()  :  coffread.c
<item>end_symtab()  :  buildsym.c
<item>read_ofile_symtab()  :  dbxread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
<item>start_symtab()  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Variable subfiles

<p>
<tt>struct subfile* subfiles</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>check_inlined_function_calls()  :  dwarf2read.c
<item>dwarf2_start_subfile()  :  dwarf2read.c
<item>end_symtab()  :  buildsym.c
<item>start_subfile()  :  buildsym.c
<item>start_symtab()  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Variable current_subfile

<p>
<tt>struct subfile* current_subfile</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
<item>decode_line_numbers()  :  dwarfread.c
<item>define_symbol()  :  stabsread.c
<item>dwarf2_record_line()  :  dwarf2read.c
<item>dwarf2_start_subfile()  :  dwarf2read.c
<item>end_symtab()  :  buildsym.c
<item>enter_linenos()  :  coffread.c
<item>process_dies()  :  dwarfread.c
<item>process_one_symbol()  :  dbxread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
<item>push_subfile()  :  buildsym.c
<item>read_enum_type()  :  stabsread.c
<item>record_debugformat()  :  buildsym.c
<item>record_producer()  :  buildsym.c
<item>start_subfile()  :  buildsym.c
<item>start_symtab()  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Variable processing_gcc_compilation

<p>
<tt>unsigned char processing_gcc_compilation</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>default_stabs_argument_has_addr()  :  arch-utils.c
<item>define_symbol()  :  stabsread.c
<item>finish_block()  :  buildsym.c
<item>handle_producer()  :  dwarfread.c
<item>parse_partial_symbols()  :  mdebugread.c
<item>parse_procedure()  :  mdebugread.c
<item>process_one_symbol()  :  dbxread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
<item>read_dbx_symtab()  :  dbxread.c
<item>read_file_scope()  :  dwarf2read.c
<item>read_ofile_symtab()  :  dbxread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Variable processing_acc_compilation

<p>
<tt>unsigned char processing_acc_compilation</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>coffstab_build_psymtabs()  :  dbxread.c
<item>elfstab_build_psymtabs()  :  dbxread.c
<item>read_dbx_symtab()  :  dbxread.c
<item>read_ofile_symtab()  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Variable symnum

<p>
<tt>unsigned int symnum</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>add_old_header_file()  :  dbxread.c
<item>coff_read_enum_type()  :  coffread.c
<item>coff_read_struct_type()  :  coffread.c
<item>coff_symtab_read()  :  coffread.c
<item>dbx_lookup_type()  :  stabsread.c
<item>dbx_next_symbol_text()  :  dbxread.c
<item>find_corresponding_bincl_psymtab()  :  dbxread.c
<item>oso_scan_partial_symtab()  :  dbxread.c
<item>parse_partial_symbols()  :  mdebugread.c
<item>process_one_symbol()  :  dbxread.c
<item>read_cpp_abbrev()  :  stabsread.c
<item>read_dbx_symtab()  :  dbxread.c
<item>read_ofile_symtab()  :  dbxread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
<item>read_one_sym()  :  coffread.c
<item>read_oso_nlists()  :  dbxread.c
<item>read_type()  :  stabsread.c
<item>set_namestring_1()  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Variable file_symbols

<p>
<tt>struct pending* file_symbols</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarfread.c
<item>buildsym_init()  :  buildsym.c
<item>cleanup_undefined_types()  :  stabsread.c
<item>coff_read_enum_type()  :  coffread.c
<item>define_symbol()  :  stabsread.c
<item>dwarf2_build_psymtabs_hard()  :  dwarf2read.c
<item>end_symtab()  :  buildsym.c
<item>find_debug_info_for_pst()  :  dwarf2read.c
<item>new_symbol()  :  dwarf2read.c
<item>process_coff_symbol()  :  coffread.c
<item>process_full_comp_unit()  :  dwarf2read.c
<item>read_enum_type()  :  stabsread.c
<item>read_func_scope()  :  dwarf2read.c
<item>read_type()  :  stabsread.c
<item>really_free_pendings()  :  buildsym.c
<item>start_symtab()  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Variable global_symbols

<p>
<tt>struct pending* global_symbols</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>buildsym_init()  :  buildsym.c
<item>define_symbol()  :  stabsread.c
<item>end_symtab()  :  buildsym.c
<item>finish_global_stabs()  :  stabsread.c
<item>new_symbol()  :  dwarf2read.c
<item>patch_block_stabs()  :  stabsread.c
<item>process_coff_symbol()  :  coffread.c
<item>read_common_block()  :  dwarf2read.c
<item>really_free_pendings()  :  buildsym.c
<item>start_symtab()  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Variable local_symbols

<p>
<tt>struct pending* local_symbols</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>coff_read_enum_type()  :  coffread.c
<item>coff_symtab_read()  :  coffread.c
<item>common_block_end()  :  stabsread.c
<item>common_block_start()  :  stabsread.c
<item>define_symbol()  :  stabsread.c
<item>end_symtab()  :  buildsym.c
<item>process_coff_symbol()  :  coffread.c
<item>process_one_symbol()  :  dbxread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
<item>push_context()  :  buildsym.c
<item>read_func_scope()  :  dwarf2read.c
<item>read_inlined_subroutine_scope()  :  dwarf2read.c
<item>read_lexical_block_scope()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Variable param_symbols

<p>
<tt>struct pending* param_symbols</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>push_context()  :  buildsym.c
<item>read_func_scope()  :  dwarf2read.c
<item>read_inlined_subroutine_scope()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Variable context_stack

<p>
<tt>struct context_stack* context_stack</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>pop_context()  :  buildsym.c
<item>push_context()  :  buildsym.c
<item>start_symtab()  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Variable context_stack_depth

<p>
<tt>int context_stack_depth</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
<item>end_symtab()  :  buildsym.c
<item>pop_context()  :  buildsym.c
<item>process_one_symbol()  :  dbxread.c
<item>push_context()  :  buildsym.c
<item>read_func_scope()  :  dwarf2read.c
<item>start_symtab()  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Variable context_stack_size

<p>
<tt>int context_stack_size</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>push_context()  :  buildsym.c
<item>start_symtab()  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Variable within_function

<p>
<tt>int within_function</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>coff_read_enum_type()  :  coffread.c
<item>coff_symtab_read()  :  coffread.c
<item>define_symbol()  :  stabsread.c
<item>process_coff_symbol()  :  coffread.c
<item>process_one_symbol()  :  dbxread.c
<item>start_symtab()  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Variable pending_blocks

<p>
<tt>struct pending_block* pending_blocks</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>buildsym_init()  :  buildsym.c
<item>end_symtab()  :  buildsym.c
<item>finish_block()  :  buildsym.c
<item>free_pending_blocks()  :  buildsym.c
<item>make_blockvector()  :  buildsym.c
<item>push_context()  :  buildsym.c
<item>record_pending_block()  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Variable subfile_stack

<p>
<tt>struct subfile_stack* subfile_stack</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>pop_subfile()  :  buildsym.c
<item>push_subfile()  :  buildsym.c
<item>read_ofile_symtab()  :  dbxread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Variable next_symbol_text_func

<p>
<tt>const char* (*next_symbol_text_func)(struct objfile*)</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dbx_psymtab_to_symtab()  :  dbxread.c
<item>define_symbol()  :  stabsread.c
<item>error_type()  :  stabsread.c
<item>mdebug_psymtab_to_symtab()  :  mdebugread.c
<item>parse_partial_symbols()  :  mdebugread.c
<item>process_symbol_types_only()  :  stabsread.c
<item>read_args()  :  stabsread.c
<item>read_baseclasses()  :  stabsread.c
<item>read_dbx_symtab()  :  dbxread.c
<item>read_enum_type()  :  stabsread.c
<item>read_member_functions()  :  stabsread.c
<item>read_struct_fields()  :  stabsread.c
<item>read_tilde_fields()  :  stabsread.c
</itemize>
</descrip>

<sect1>Global Variable type_vector

<p>
<tt>struct type** type_vector</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>coff_lookup_type()  :  coffread.c
<item>coff_symtab_read()  :  coffread.c
<item>dbx_lookup_type()  :  stabsread.c
<item>end_stabs()  :  stabsread.c
<item>start_stabs()  :  stabsread.c
</itemize>
</descrip>

<sect1>Global Variable type_vector_length

<p>
<tt>int type_vector_length</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>coff_lookup_type()  :  coffread.c
<item>coff_symtab_read()  :  coffread.c
<item>dbx_lookup_type()  :  stabsread.c
<item>end_stabs()  :  stabsread.c
<item>start_stabs()  :  stabsread.c
</itemize>
</descrip>

<sect1>Global Variable pending_macros

<p>
<tt>struct macro_table* pending_macros</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>arch-utils.c
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>dictionary.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>inlining.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>objfiles.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>buildsym_init()  :  buildsym.c
<item>end_symtab()  :  buildsym.c
<item>macro_start_file()  :  dwarf2read.c
<item>really_free_pendings()  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>free_pendings</bf><newline>
<tt>static struct pending* free_pendings</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_free_pendings()
<item>add_symbol_to_list()
<item>buildsym_init()
<item>finish_block()
<item>merge_symbol_lists()
<item>really_free_pendings()
</itemize>
</descrip>
<p>
<bf>have_line_numbers</bf><newline>
<tt>static int have_line_numbers</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>end_symtab()
<item>record_line()
<item>start_symtab()
</itemize>
</descrip>

<sect1>Global Function add_free_pendings()

<p><tt>void add_free_pendings ( struct pending* list )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>free_pendings  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function add_symbol_to_list()

<p><tt>void add_symbol_to_list ( struct symbol* symbol, struct pending** listhead )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cp_scan_for_anonymous_namespaces()  :  cp-namespace.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_read_enum_type()  :  coffread.c
<item>common_block_end()  :  stabsread.c
<item>define_symbol()  :  stabsread.c
<item>enum_type()  :  dwarfread.c
<item>merge_symbol_lists()  :  buildsym.c
<item>new_symbol()  :  dwarf2read.c
<item>patch_block_stabs()  :  stabsread.c
<item>process_coff_symbol()  :  coffread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
<item>read_common_block()  :  dwarf2read.c
<item>read_enum_type()  :  stabsread.c
<item>synthesize_typedef()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>free_pendings  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function buildsym_init()

<p><tt>void buildsym_init ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>buildsym_new_init()  :  buildsym.c
<item>dbx_psymtab_to_symtab_1()  :  dbxread.c
<item>process_full_comp_unit()  :  dwarf2read.c
<item>psymtab_to_symtab_1()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>file_symbols  :  buildsym.c
<item>free_pendings  :  buildsym.c
<item>global_symbols  :  buildsym.c
<item>pending_blocks  :  buildsym.c
<item>pending_macros  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function buildsym_new_init()

<p><tt>void buildsym_new_init ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>buildsym_init()  :  buildsym.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coffstab_build_psymtabs()  :  dbxread.c
<item>dbx_new_init()  :  dbxread.c
<item>elf_new_init()  :  elfread.c
<item>elfstab_build_psymtabs()  :  dbxread.c
<item>mdebug_build_psymtabs()  :  mdebugread.c
<item>mipscoff_new_init()  :  mipsread.c
<item>nlm_new_init()  :  nlmread.c
<item>stabsect_build_psymtabs()  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Function compare_line_numbers()

<p><tt>int compare_line_numbers ( const void* ln1p, const void* ln2p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>end_symtab()  :  buildsym.c
<item>objfile_relocate()  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function end_symtab()

<p><tt>struct symtab* end_symtab ( CORE_ADDR end_addr, struct objfile* objfile, int section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_symtab()  :  symfile.c
<item>cleanup_undefined_arrays()  :  gdbtypes.c
<item>cleanup_undefined_fields()  :  stabsread.c
<item>cleanup_undefined_types()  :  stabsread.c
<item>complaint()  :  complaints.c
<item>cp_finalize_namespace()  :  cp-namespace.c
<item>finish_block()  :  buildsym.c
<item>finish_global_stabs()  :  stabsread.c
<item>internal_error()  :  utils.c
<item>make_blockvector()  :  buildsym.c
<item>obsavestring()  :  symfile.c
<item>pop_context()  :  buildsym.c
<item>xfree()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin___strcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), __inline_strcpy_chk(), _obstack_newchunk(), qsort(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_end_symtab()  :  coffread.c
<item>process_full_comp_unit()  :  dwarf2read.c
<item>process_one_symbol()  :  dbxread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
<item>read_file_scope()  :  dwarfread.c
<item>read_ofile_symtab()  :  dbxread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>compare_line_numbers()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>context_stack_depth  :  buildsym.c
<item>current_subfile  :  buildsym.c
<item>file_symbols  :  buildsym.c
<item>global_symbols  :  buildsym.c
<item>have_line_numbers  :  buildsym.c
<item>last_source_file  :  buildsym.c
<item>last_source_start_addr  :  buildsym.c
<item>local_symbols  :  buildsym.c
<item>pending_blocks  :  buildsym.c
<item>pending_macros  :  buildsym.c
<item>subfiles  :  buildsym.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Global Function find_symbol_in_list()

<p><tt>struct symbol* find_symbol_in_list ( struct pending* list, char* name, int length )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>patch_block_stabs()  :  stabsread.c
</itemize>
</descrip>

<sect1>Global Function finish_block()

<p><tt>void finish_block ( struct symbol* symbol, struct pending** listhead, struct pending_block* old_blocks, CORE_ADDR start, CORE_ADDR end, struct address_range_list* ranges, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_block()  :  block.c
<item>complaint()  :  complaints.c
<item>contained_in()  :  block.c
<item>cp_set_block_scope()  :  cp-namespace.c
<item>dict_create_hashed()  :  dictionary.c
<item>dict_create_linear()  :  dictionary.c
<item>dict_iterator_first()  :  dictionary.c
<item>dict_iterator_next()  :  dictionary.c
<item>paddr_nz()  :  utils.c
<item>record_pending_block()  :  buildsym.c
<item>symbol_natural_name()  :  symtab.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
<item>end_symtab()  :  buildsym.c
<item>process_one_symbol()  :  dbxread.c
<item>read_func_scope()  :  dwarf2read.c
<item>read_inlined_subroutine_scope()  :  dwarf2read.c
<item>read_lexical_block_scope()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle  :  utils.c
<item>free_pendings  :  buildsym.c
<item>pending_blocks  :  buildsym.c
<item>processing_gcc_compilation  :  buildsym.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Global Function free_pending_blocks()

<p><tt>void free_pending_blocks ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dbx_symfile_read()  :  dbxread.c
<item>really_free_pendings()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>pending_blocks  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function hashname()

<p><tt>int hashname ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>hash()  :  bcache.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>common_block_end()  :  stabsread.c
<item>define_symbol()  :  stabsread.c
<item>parse_symbol()  :  mdebugread.c
<item>patch_opaque_types()  :  coffread.c
<item>process_coff_symbol()  :  coffread.c
<item>scan_file_globals()  :  stabsread.c
</itemize>
</descrip>

<sect1>Global Function merge_symbol_lists()

<p><tt>void merge_symbol_lists ( struct pending** srclist, struct pending** targetlist )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_symbol_to_list()  :  buildsym.c
<item>merge_symbol_lists()  :  buildsym.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>merge_symbol_lists()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>free_pendings  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function patch_subfile_names()

<p><tt>void patch_subfile_names ( struct subfile* subfile, const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deduce_language_from_filename()  :  symfile.c
<item>savestring()  :  utils.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_one_symbol()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>last_source_file  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function pop_context()

<p><tt>struct context_stack* pop_context ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
<item>end_symtab()  :  buildsym.c
<item>process_one_symbol()  :  dbxread.c
<item>read_func_scope()  :  dwarf2read.c
<item>read_inlined_subroutine_scope()  :  dwarf2read.c
<item>read_lexical_block_scope()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>context_stack  :  buildsym.c
<item>context_stack_depth  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function pop_subfile()

<p><tt>char* pop_subfile ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_one_symbol()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>subfile_stack  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function push_context()

<p><tt>struct context_stack* push_context ( int desc, CORE_ADDR valu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
<item>process_one_symbol()  :  dbxread.c
<item>read_func_scope()  :  dwarf2read.c
<item>read_inlined_subroutine_scope()  :  dwarf2read.c
<item>read_lexical_block_scope()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>context_stack  :  buildsym.c
<item>context_stack_depth  :  buildsym.c
<item>context_stack_size  :  buildsym.c
<item>local_symbols  :  buildsym.c
<item>param_symbols  :  buildsym.c
<item>pending_blocks  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function push_subfile()

<p><tt>void push_subfile ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_one_symbol()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_subfile  :  buildsym.c
<item>subfile_stack  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function really_free_pendings()

<p><tt>void really_free_pendings ( void* dummy )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_macro_table()  :  macrotab.c
<item>free_pending_blocks()  :  buildsym.c
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dbx_psymtab_to_symtab_1()  :  dbxread.c
<item>dbx_symfile_read()  :  dbxread.c
<item>process_full_comp_unit()  :  dwarf2read.c
<item>psymtab_to_symtab_1()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>file_symbols  :  buildsym.c
<item>free_pendings  :  buildsym.c
<item>global_symbols  :  buildsym.c
<item>pending_macros  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function record_debugformat()

<p><tt>void record_debugformat ( const char* format )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>savestring()  :  utils.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_start_symtab()  :  coffread.c
<item>process_one_symbol()  :  dbxread.c
<item>read_file_scope()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_subfile  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function record_line()

<p><tt>void record_line ( struct subfile* subfile, int line, CORE_ADDR pc, CORE_ADDR end_pc, enum line_table_entry_type entry_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>gdbarch_addr_bits_remove()  :  gdbarch.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>check_inlined_function_calls()  :  dwarf2read.c
<item>coff_symtab_read()  :  coffread.c
<item>decode_line_numbers()  :  dwarfread.c
<item>dwarf2_record_line()  :  dwarf2read.c
<item>enter_linenos()  :  coffread.c
<item>process_one_symbol()  :  dbxread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>dwarf2_debug_inlined_stepping  :  dwarf2read.c
<item>gdb_stdout  :  main.c
<item>have_line_numbers  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function record_pending_block()

<p><tt>void record_pending_block ( struct objfile* objfile, struct block* block, struct pending_block* opblock )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>finish_block()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>pending_blocks  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function record_producer()

<p><tt>void record_producer ( const char* producer )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>savestring()  :  utils.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_file_scope()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_subfile  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function start_subfile()

<p><tt>void start_subfile ( const char* name, char* dirname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deduce_language_from_filename()  :  symfile.c
<item>savestring()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_start_subfile()  :  dwarf2read.c
<item>process_one_symbol()  :  dbxread.c
<item>start_symtab()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_subfile  :  buildsym.c
<item>subfiles  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function start_symtab()

<p><tt>void start_symtab ( const char* name, char* dirname, CORE_ADDR start_addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cp_initialize_namespace()  :  cp-namespace.c
<item>start_subfile()  :  buildsym.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_start_symtab()  :  coffread.c
<item>process_one_symbol()  :  dbxread.c
<item>read_file_scope()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>context_stack  :  buildsym.c
<item>context_stack_depth  :  buildsym.c
<item>context_stack_size  :  buildsym.c
<item>current_subfile  :  buildsym.c
<item>file_symbols  :  buildsym.c
<item>global_symbols  :  buildsym.c
<item>have_line_numbers  :  buildsym.c
<item>last_source_file  :  buildsym.c
<item>last_source_start_addr  :  buildsym.c
<item>subfiles  :  buildsym.c
<item>within_function  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function compare_blocks()

<p><tt>static int compare_blocks ( const void* v1, const void* v2 )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>make_blockvector()  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function make_blockvector()

<p><tt>static struct blockvector* make_blockvector ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>hex_string()  :  utils.c
<item>_obstack_newchunk(), qsort()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>end_symtab()  :  buildsym.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>compare_blocks()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>pending_blocks  :  buildsym.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

</article>
