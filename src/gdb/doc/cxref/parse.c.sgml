<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF parse.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for parse.c of gdb.cxref.
<author>cxref

<sect>File parse.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>dump_subexp_body_standard()  :  expprint.c
<item>evaluate_subexp_standard()  :  eval.c
<item>op_name_standard()  :  expprint.c
<item>operator_length_standard()  :  parse.c
<item>print_subexp_standard()  :  expprint.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;parser-defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>

<sect1>Type struct funcall

<p>
<itemize>
<item><tt>struct funcall</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct funcall* next;</tt><newline>
<item><tt>int arglist_len;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable innermost_block

<p>
<tt>struct block* innermost_block</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>coff-pe-read.c
<item>coffread.c
<item>completer.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>disasm.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>eval.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>ui-out.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>agent_command()  :  ax-gdb.c
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>c_parse()  :  c-exp.c
<item>display_command()  :  printcmd.c
<item>f_parse()  :  f-exp.c
<item>invoke_block_command()  :  printcmd.c
<item>m2_parse()  :  m2-exp.c
<item>maintenance_print_type()  :  typeprint.c
<item>objc_parse()  :  objc-exp.c
<item>output_command()  :  printcmd.c
<item>parse_and_eval()  :  eval.c
<item>parse_and_eval_address()  :  eval.c
<item>parse_and_eval_address_1()  :  eval.c
<item>parse_and_eval_long()  :  eval.c
<item>parse_and_eval_type()  :  eval.c
<item>parse_exp_in_context()  :  parse.c
<item>parse_to_comma_and_eval()  :  eval.c
<item>pascal_parse()  :  p-exp.c
<item>print_command_1()  :  printcmd.c
<item>print_object_command()  :  objc-lang.c
<item>ptype_command()  :  typeprint.c
<item>push_variable()  :  jv-exp.c
<item>resolve_subexp()  :  ada-lang.c
<item>set_command()  :  printcmd.c
<item>varobj_create()  :  varobj.c
<item>watch_command_1()  :  breakpoint.c
<item>whatis_exp()  :  typeprint.c
<item>write_var_from_sym()  :  ada-exp.c
<item>x_command()  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Variable expout

<p>
<tt>struct expression* expout</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>c-exp.c
<item>c-lang.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>infcmd.c
<item>jv-exp.c
<item>jv-lang.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>parse.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>valarith.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>fix_references_to_optimized_out_variables()  :  parse.c
<item>insert_exp()  :  jv-exp.c
<item>java_parse()  :  jv-exp.c
<item>parse_exp_in_context()  :  parse.c
<item>write_exp_bitstring()  :  parse.c
<item>write_exp_elt()  :  parse.c
<item>write_exp_elt_sym()  :  parse.c
<item>write_exp_string()  :  parse.c
</itemize>
</descrip>

<sect1>Global Variable expout_size

<p>
<tt>int expout_size</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>c-exp.c
<item>c-lang.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>infcmd.c
<item>jv-exp.c
<item>jv-lang.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>parse.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>valarith.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>insert_exp()  :  jv-exp.c
<item>parse_exp_in_context()  :  parse.c
<item>write_exp_bitstring()  :  parse.c
<item>write_exp_elt()  :  parse.c
<item>write_exp_string()  :  parse.c
</itemize>
</descrip>

<sect1>Global Variable expout_ptr

<p>
<tt>int expout_ptr</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>c-exp.c
<item>c-lang.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>infcmd.c
<item>jv-exp.c
<item>jv-lang.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>parse.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>valarith.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>fix_references_to_optimized_out_variables()  :  parse.c
<item>insert_exp()  :  jv-exp.c
<item>java_parse()  :  jv-exp.c
<item>parse_exp_in_context()  :  parse.c
<item>write_exp_bitstring()  :  parse.c
<item>write_exp_elt()  :  parse.c
<item>write_exp_elt_sym()  :  parse.c
<item>write_exp_string()  :  parse.c
</itemize>
</descrip>

<sect1>Global Variable expression_context_block

<p>
<tt>struct block* expression_context_block</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>c-exp.c
<item>c-lang.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>infcmd.c
<item>jv-exp.c
<item>jv-lang.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>parse.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>valarith.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
<item>c_parse()  :  c-exp.c
<item>c_preprocess_and_parse()  :  c-lang.c
<item>f_lex()  :  f-exp.c
<item>java_lookup_class()  :  jv-lang.c
<item>m2_lex()  :  m2-exp.c
<item>m2_parse()  :  m2-exp.c
<item>name_lookup()  :  ada-exp.c
<item>objc_lex()  :  objc-exp.c
<item>objc_parse()  :  objc-exp.c
<item>parse_exp_in_context()  :  parse.c
<item>pascal_lex()  :  p-exp.c
<item>pascal_parse()  :  p-exp.c
<item>push_variable()  :  jv-exp.c
<item>scm_lookup_name()  :  scm-lang.c
</itemize>
</descrip>

<sect1>Global Variable expression_context_pc

<p>
<tt>CORE_ADDR expression_context_pc</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>c-exp.c
<item>c-lang.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>infcmd.c
<item>jv-exp.c
<item>jv-lang.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>parse.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>valarith.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c_preprocess_and_parse()  :  c-lang.c
<item>parse_exp_in_context()  :  parse.c
</itemize>
</descrip>

<sect1>Global Variable arglist_len

<p>
<tt>int arglist_len</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>c-exp.c
<item>c-lang.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>infcmd.c
<item>jv-exp.c
<item>jv-lang.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>parse.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>valarith.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>end_arglist()  :  parse.c
<item>f_parse()  :  f-exp.c
<item>java_parse()  :  jv-exp.c
<item>m2_parse()  :  m2-exp.c
<item>objc_parse()  :  objc-exp.c
<item>pascal_parse()  :  p-exp.c
<item>start_arglist()  :  parse.c
</itemize>
</descrip>

<sect1>Global Variable type_stack

<p>
<tt>union type_stack_elt* type_stack</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>c-exp.c
<item>c-lang.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>infcmd.c
<item>jv-exp.c
<item>jv-lang.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>parse.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>valarith.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_parse()  :  parse.c
<item>check_type_stack_depth()  :  parse.c
<item>pop_type()  :  parse.c
<item>pop_type_int()  :  parse.c
<item>push_type()  :  parse.c
<item>push_type_int()  :  parse.c
</itemize>
</descrip>

<sect1>Global Variable type_stack_depth

<p>
<tt>int type_stack_depth</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>c-exp.c
<item>c-lang.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>infcmd.c
<item>jv-exp.c
<item>jv-lang.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>parse.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>valarith.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_parse()  :  parse.c
<item>check_type_stack_depth()  :  parse.c
<item>parse_exp_in_context()  :  parse.c
<item>pop_type()  :  parse.c
<item>pop_type_int()  :  parse.c
<item>push_type()  :  parse.c
<item>push_type_int()  :  parse.c
</itemize>
</descrip>

<sect1>Global Variable type_stack_size

<p>
<tt>int type_stack_size</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>c-exp.c
<item>c-lang.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>infcmd.c
<item>jv-exp.c
<item>jv-lang.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>parse.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>valarith.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_parse()  :  parse.c
<item>check_type_stack_depth()  :  parse.c
</itemize>
</descrip>

<sect1>Global Variable lexptr

<p>
<tt>const char* lexptr</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>c-exp.c
<item>c-lang.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>infcmd.c
<item>jv-exp.c
<item>jv-lang.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>parse.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>valarith.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_error()  :  ada-exp.c
<item>ada_lex()  :  ada-exp.c
<item>c_error()  :  c-exp.c
<item>c_lex()  :  c-exp.c
<item>f_error()  :  f-exp.c
<item>f_lex()  :  f-exp.c
<item>finished_macro_expansion()  :  c-lang.c
<item>java_error()  :  jv-exp.c
<item>java_lex()  :  jv-exp.c
<item>m2_error()  :  m2-exp.c
<item>m2_lex()  :  m2-exp.c
<item>match_string_literal()  :  f-exp.c
<item>objc_error()  :  objc-exp.c
<item>objc_lex()  :  objc-exp.c
<item>parse_exp_in_context()  :  parse.c
<item>parse_number()  :  m2-exp.c
<item>pascal_error()  :  p-exp.c
<item>pascal_lex()  :  p-exp.c
<item>scan_macro_expansion()  :  c-lang.c
<item>scm_lreadparen()  :  scm-exp.c
<item>scm_lreadr()  :  scm-exp.c
<item>scm_parse()  :  scm-exp.c
<item>scm_read_token()  :  scm-exp.c
<item>scm_skip_ws()  :  scm-exp.c
<item>yy_get_next_buffer()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Variable prev_lexptr

<p>
<tt>const char* prev_lexptr</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>c-exp.c
<item>c-lang.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>infcmd.c
<item>jv-exp.c
<item>jv-lang.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>parse.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>valarith.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c_error()  :  c-exp.c
<item>c_lex()  :  c-exp.c
<item>f_error()  :  f-exp.c
<item>f_lex()  :  f-exp.c
<item>java_error()  :  jv-exp.c
<item>java_lex()  :  jv-exp.c
<item>m2_error()  :  m2-exp.c
<item>m2_lex()  :  m2-exp.c
<item>parse_exp_in_context()  :  parse.c
<item>pascal_error()  :  p-exp.c
<item>pascal_lex()  :  p-exp.c
</itemize>
</descrip>

<sect1>Global Variable namecopy

<p>
<tt>char* namecopy</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>c-exp.c
<item>c-lang.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>infcmd.c
<item>jv-exp.c
<item>jv-lang.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>parse.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>valarith.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>copy_name()  :  parse.c
</itemize>
</descrip>

<sect1>Global Variable paren_depth

<p>
<tt>int paren_depth</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>c-exp.c
<item>c-lang.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>infcmd.c
<item>jv-exp.c
<item>jv-lang.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>parse.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>valarith.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
<item>c_lex()  :  c-exp.c
<item>f_lex()  :  f-exp.c
<item>java_lex()  :  jv-exp.c
<item>m2_lex()  :  m2-exp.c
<item>objc_lex()  :  objc-exp.c
<item>parse_exp_in_context()  :  parse.c
<item>pascal_lex()  :  p-exp.c
</itemize>
</descrip>

<sect1>Global Variable comma_terminates

<p>
<tt>int comma_terminates</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>c-exp.c
<item>c-lang.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>infcmd.c
<item>jv-exp.c
<item>jv-lang.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>parse.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>valarith.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
<item>c_lex()  :  c-exp.c
<item>f_lex()  :  f-exp.c
<item>java_lex()  :  jv-exp.c
<item>m2_lex()  :  m2-exp.c
<item>objc_lex()  :  objc-exp.c
<item>parse_exp_in_context()  :  parse.c
<item>pascal_lex()  :  p-exp.c
</itemize>
</descrip>

<sect1>Global Variable exp_descriptor_standard

<p>
<tt>const struct exp_descriptor exp_descriptor_standard</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>c-exp.c
<item>c-lang.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>infcmd.c
<item>jv-exp.c
<item>jv-lang.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>parse.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>valarith.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c-lang.c
<item>f-lang.c
<item>language.c
<item>m2-lang.c
<item>objc-lang.c
<item>p-lang.c
</itemize>
</descrip>

<sect1>Global Variable namecopy_size

<p>
<tt>size_t namecopy_size</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>parse.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>copy_name()  :  parse.c
</itemize>
</descrip>

<sect1>Global Variable msym_text_symbol_type

<p>
<tt>struct type* msym_text_symbol_type</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>parse.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_parse()  :  parse.c
<item>build_parse()  :  parse.c
<item>find_function_in_inferior()  :  valops.c
<item>write_exp_msymbol()  :  parse.c
</itemize>
</descrip>

<sect1>Global Variable msym_data_symbol_type

<p>
<tt>struct type* msym_data_symbol_type</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>parse.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_parse()  :  parse.c
<item>build_parse()  :  parse.c
<item>write_exp_msymbol()  :  parse.c
</itemize>
</descrip>

<sect1>Global Variable msym_unknown_symbol_type

<p>
<tt>struct type* msym_unknown_symbol_type</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>parse.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_parse()  :  parse.c
<item>build_parse()  :  parse.c
<item>write_exp_msymbol()  :  parse.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>expressiondebug</bf><newline>
<tt>static int expressiondebug</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_parse()
<item>parse_exp_in_context()
</itemize>
</descrip>
<p>
<bf>funcall_chain</bf><newline>
<tt>static struct funcall* funcall_chain</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>end_arglist()
<item>free_funcalls()
<item>parse_exp_in_context()
<item>start_arglist()
</itemize>
</descrip>
<p>
<bf>coloncolon</bf><newline>
<tt>static const char coloncolon[2]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>parse_nested_classes_for_hpacc()
</itemize>
</descrip>
<p>
<bf>ftype_no_debug_info_name</bf><newline>
<tt>static const char* ftype_no_debug_info_name</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>build_parse()
<item>ftype_has_debug_info_p()
</itemize>
</descrip>

<sect1>Global Function _initialize_parse()

<p><tt>void _initialize_parse ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parse.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>build_parse()  :  parse.c
<item>deprecated_register_gdbarch_swap()  :  gdbarch.c
<item>xmalloc()  :  utils.c
<item>add_setshow_zinteger_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>build_parse()  :  parse.c
<item>show_expressiondebug()  :  parse.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>expressiondebug  :  parse.c
<item>msym_data_symbol_type  :  parse.c
<item>msym_text_symbol_type  :  parse.c
<item>msym_unknown_symbol_type  :  parse.c
<item>type_stack  :  parse.c
<item>type_stack_depth  :  parse.c
<item>type_stack_size  :  parse.c
<item>setdebuglist, showdebuglist
</itemize>
</descrip>

<sect1>Global Function copy_name()

<p><tt>char* copy_name ( struct stoken token )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
<item>c_parse()  :  c-exp.c
<item>f_lex()  :  f-exp.c
<item>f_parse()  :  f-exp.c
<item>java_type_from_name()  :  jv-exp.c
<item>m2_lex()  :  m2-exp.c
<item>m2_parse()  :  m2-exp.c
<item>objc_lex()  :  objc-exp.c
<item>objc_parse()  :  objc-exp.c
<item>pascal_lex()  :  p-exp.c
<item>pascal_parse()  :  p-exp.c
<item>push_expression_name()  :  jv-exp.c
<item>push_qualified_expression_name()  :  jv-exp.c
<item>push_variable()  :  jv-exp.c
<item>write_dollar_variable()  :  parse.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>namecopy  :  parse.c
<item>namecopy_size  :  parse.c
</itemize>
</descrip>

<sect1>Global Function end_arglist()

<p><tt>int end_arglist ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>f_parse()  :  f-exp.c
<item>java_parse()  :  jv-exp.c
<item>m2_parse()  :  m2-exp.c
<item>objc_parse()  :  objc-exp.c
<item>pascal_parse()  :  p-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>arglist_len  :  parse.c
<item>funcall_chain  :  parse.c
</itemize>
</descrip>

<sect1>Global Function find_template_name_end()

<p><tt>const char* find_template_name_end ( const char* p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
<item>decode_compound()  :  linespec.c
<item>locate_first_half()  :  linespec.c
<item>objc_lex()  :  objc-exp.c
<item>parse_nested_classes_for_hpacc()  :  parse.c
</itemize>
</descrip>

<sect1>Global Function follow_types()

<p><tt>struct type* follow_types ( struct type* follow_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
<item>lookup_function_type()  :  gdbtypes.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>lookup_reference_type()  :  gdbtypes.c
<item>make_cvr_type()  :  gdbtypes.c
<item>make_type_with_address_space()  :  gdbtypes.c
<item>pop_type()  :  parse.c
<item>pop_type_int()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>objc_parse()  :  objc-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function ftype_has_debug_info_p()

<p><tt>int ftype_has_debug_info_p ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbtypes.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ftype_no_debug_info_name  :  parse.c
</itemize>
</descrip>

<sect1>Global Function length_of_subexp()

<p><tt>int length_of_subexp ( struct expression* expr, int endpos )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>length_of_subexp()  :  parse.c
<item>operator_length()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>copy_exp()  :  jv-exp.c
<item>java_parse()  :  jv-exp.c
<item>length_of_subexp()  :  parse.c
<item>prefixify_subexp()  :  parse.c
</itemize>
</descrip>

<sect1>Global Function null_post_parser()

<p><tt>void null_post_parser ( struct expression** exp, int void_context_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c-lang.c
<item>f-lang.c
<item>jv-lang.c
<item>language.c
<item>m2-lang.c
<item>objc-lang.c
<item>p-lang.c
<item>scm-lang.c
</itemize>
</descrip>

<sect1>Global Function operator_length()

<p><tt>void operator_length ( struct expression* expr, int endpos, int* oplenp, int* argsp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>length_of_subexp()  :  parse.c
<item>prefixify_subexp()  :  parse.c
</itemize>
</descrip>

<sect1>Global Function operator_length_standard()

<p><tt>void operator_length_standard ( struct expression* expr, int endpos, int* oplenp, int* argsp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>longest_to_int()  :  valprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_operator_length()  :  ada-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>jv-lang.c
<item>parse.c
<item>scm-lang.c
</itemize>
</descrip>

<sect1>Global Function parse_exp_1()

<p><tt>struct expression* parse_exp_1 ( const char** stringptr, struct block* block, int comma )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>expression.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>parse_exp_in_context()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>do_captured_breakpoint()  :  breakpoint.c
<item>encode_actions()  :  tracepoint.c
<item>gdb_parse_exp_1()  :  wrapper.c
<item>parse_and_eval_address_1()  :  eval.c
<item>parse_expression()  :  parse.c
<item>parse_to_comma_and_eval()  :  eval.c
<item>validate_actionline()  :  tracepoint.c
<item>watch_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function parse_expression()

<p><tt>struct expression* parse_expression ( const char* string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>expression.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>parse_exp_1()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>agent_command()  :  ax-gdb.c
<item>display_command()  :  printcmd.c
<item>invoke_block_command()  :  printcmd.c
<item>maintenance_print_type()  :  typeprint.c
<item>output_command()  :  printcmd.c
<item>parse_and_eval()  :  eval.c
<item>parse_and_eval_address()  :  eval.c
<item>parse_and_eval_long()  :  eval.c
<item>parse_and_eval_type()  :  eval.c
<item>print_command_1()  :  printcmd.c
<item>print_object_command()  :  objc-lang.c
<item>ptype_command()  :  typeprint.c
<item>set_command()  :  printcmd.c
<item>whatis_exp()  :  typeprint.c
<item>x_command()  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function parse_expression_in_context()

<p><tt>struct expression* parse_expression_in_context ( const char* string, int void_context_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>expression.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>parse_exp_in_context()  :  parse.c
</itemize>
</descrip>

<sect1>Global Function parse_nested_classes_for_hpacc()

<p><tt>struct symbol* parse_nested_classes_for_hpacc ( char* name, int len, char** token, int* class_prefix, const char** argptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>find_template_name_end()  :  parse.c
<item>lookup_symbol()  :  symtab.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), isalnum(), isalpha(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>coloncolon  :  parse.c
<item>deprecated_hp_som_som_object_present  :  symtab.c
</itemize>
</descrip>

<sect1>Global Function parser_fprintf()

<p><tt>void parser_fprintf ( FILE* x, const char* y, ... )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>vfprintf_unfiltered()  :  utils.c
<item>__builtin_va_end(), __builtin_va_start()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
<item>c_parse()  :  c-exp.c
<item>f_parse()  :  f-exp.c
<item>fix_references_to_optimized_out_variables()  :  parse.c
<item>java_parse()  :  jv-exp.c
<item>m2_parse()  :  m2-exp.c
<item>pascal_parse()  :  p-exp.c
<item>yy_reduce_print()  :  p-exp.c
<item>yy_stack_print()  :  p-exp.c
<item>yy_symbol_print()  :  p-exp.c
<item>yydestruct()  :  p-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stderr  :  main.c
</itemize>
</descrip>

<sect1>Global Function pop_type()

<p><tt>enum type_pieces pop_type ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>f_parse()  :  f-exp.c
<item>follow_types()  :  parse.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>type_stack  :  parse.c
<item>type_stack_depth  :  parse.c
</itemize>
</descrip>

<sect1>Global Function pop_type_int()

<p><tt>int pop_type_int ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>f_parse()  :  f-exp.c
<item>follow_types()  :  parse.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>type_stack  :  parse.c
<item>type_stack_depth  :  parse.c
</itemize>
</descrip>

<sect1>Global Function push_type()

<p><tt>void push_type ( enum type_pieces tp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_type_stack_depth()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>f_parse()  :  f-exp.c
<item>objc_parse()  :  objc-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>type_stack  :  parse.c
<item>type_stack_depth  :  parse.c
</itemize>
</descrip>

<sect1>Global Function push_type_address_space()

<p><tt>void push_type_address_space ( char* string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>address_space_name_to_int()  :  gdbtypes.c
<item>push_type_int()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
</itemize>
</descrip>

<sect1>Global Function push_type_int()

<p><tt>void push_type_int ( int n )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_type_stack_depth()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>objc_parse()  :  objc-exp.c
<item>push_type_address_space()  :  parse.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>type_stack  :  parse.c
<item>type_stack_depth  :  parse.c
</itemize>
</descrip>

<sect1>Global Function start_arglist()

<p><tt>void start_arglist ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>f_parse()  :  f-exp.c
<item>java_parse()  :  jv-exp.c
<item>m2_parse()  :  m2-exp.c
<item>objc_parse()  :  objc-exp.c
<item>pascal_parse()  :  p-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>arglist_len  :  parse.c
<item>funcall_chain  :  parse.c
</itemize>
</descrip>

<sect1>Global Function write_dollar_variable()

<p><tt>void write_dollar_variable ( struct stoken str )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>copy_name()  :  parse.c
<item>frame_map_name_to_regnum()  :  frame.c
<item>lookup_function_type()  :  gdbtypes.c
<item>lookup_internalvar()  :  value.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_symbol()  :  symtab.c
<item>write_exp_elt_block()  :  parse.c
<item>write_exp_elt_intern()  :  parse.c
<item>write_exp_elt_longcst()  :  parse.c
<item>write_exp_elt_opcode()  :  parse.c
<item>write_exp_elt_sym()  :  parse.c
<item>write_exp_msymbol()  :  parse.c
<item>atoi()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
<item>c_lex()  :  c-exp.c
<item>f_lex()  :  f-exp.c
<item>java_lex()  :  jv-exp.c
<item>m2_lex()  :  m2-exp.c
<item>objc_lex()  :  objc-exp.c
<item>pascal_lex()  :  p-exp.c
<item>scm_lreadr()  :  scm-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>block_found  :  symtab.c
<item>builtin_type_int  :  gdbtypes.c
<item>deprecated_selected_frame  :  frame.c
</itemize>
</descrip>

<sect1>Global Function write_exp_bitstring()

<p><tt>void write_exp_bitstring ( struct stoken str )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>write_exp_elt_longcst()  :  parse.c
<item>xrealloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>expout  :  parse.c
<item>expout_ptr  :  parse.c
<item>expout_size  :  parse.c
</itemize>
</descrip>

<sect1>Global Function write_exp_elt()

<p><tt>void write_exp_elt ( union exp_element expelt )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>write_exp_elt_block()  :  parse.c
<item>write_exp_elt_dblcst()  :  parse.c
<item>write_exp_elt_intern()  :  parse.c
<item>write_exp_elt_longcst()  :  parse.c
<item>write_exp_elt_opcode()  :  parse.c
<item>write_exp_elt_sym()  :  parse.c
<item>write_exp_elt_type()  :  parse.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>expout  :  parse.c
<item>expout_ptr  :  parse.c
<item>expout_size  :  parse.c
</itemize>
</descrip>

<sect1>Global Function write_exp_elt_block()

<p><tt>void write_exp_elt_block ( struct block* b )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>write_exp_elt()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>f_parse()  :  f-exp.c
<item>m2_parse()  :  m2-exp.c
<item>objc_parse()  :  objc-exp.c
<item>pascal_parse()  :  p-exp.c
<item>push_variable()  :  jv-exp.c
<item>write_dollar_variable()  :  parse.c
<item>write_var_from_name()  :  ada-exp.c
<item>write_var_from_sym()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function write_exp_elt_dblcst()

<p><tt>void write_exp_elt_dblcst ( DOUBLEST expelt )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>write_exp_elt()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
<item>c_parse()  :  c-exp.c
<item>f_parse()  :  f-exp.c
<item>java_parse()  :  jv-exp.c
<item>m2_parse()  :  m2-exp.c
<item>objc_parse()  :  objc-exp.c
<item>pascal_parse()  :  p-exp.c
</itemize>
</descrip>

<sect1>Global Function write_exp_elt_intern()

<p><tt>void write_exp_elt_intern ( struct internalvar* expelt )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>write_exp_elt()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>write_dollar_variable()  :  parse.c
</itemize>
</descrip>

<sect1>Global Function write_exp_elt_longcst()

<p><tt>void write_exp_elt_longcst ( long expelt )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>write_exp_elt()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
<item>c_parse()  :  c-exp.c
<item>end_msglist()  :  objc-lang.c
<item>f_parse()  :  f-exp.c
<item>java_parse()  :  jv-exp.c
<item>m2_parse()  :  m2-exp.c
<item>objc_parse()  :  objc-exp.c
<item>pascal_parse()  :  p-exp.c
<item>scm_lreadr()  :  scm-exp.c
<item>write_dollar_variable()  :  parse.c
<item>write_exp_bitstring()  :  parse.c
<item>write_exp_msymbol()  :  parse.c
<item>write_exp_string()  :  parse.c
<item>write_int()  :  ada-exp.c
<item>write_object_renaming()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function write_exp_elt_opcode()

<p><tt>void write_exp_elt_opcode ( enum exp_opcode expelt )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>write_exp_elt()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
<item>c_parse()  :  c-exp.c
<item>f_parse()  :  f-exp.c
<item>java_parse()  :  jv-exp.c
<item>m2_parse()  :  m2-exp.c
<item>objc_parse()  :  objc-exp.c
<item>pascal_parse()  :  p-exp.c
<item>push_expression_name()  :  jv-exp.c
<item>push_fieldnames()  :  jv-exp.c
<item>push_qualified_expression_name()  :  jv-exp.c
<item>push_variable()  :  jv-exp.c
<item>scm_lreadr()  :  scm-exp.c
<item>write_dollar_variable()  :  parse.c
<item>write_exp_msymbol()  :  parse.c
<item>write_int()  :  ada-exp.c
<item>write_object_renaming()  :  ada-exp.c
<item>write_var_from_name()  :  ada-exp.c
<item>write_var_from_sym()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function write_exp_elt_sym()

<p><tt>void write_exp_elt_sym ( struct symbol* expelt )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>write_exp_elt()  :  parse.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>f_parse()  :  f-exp.c
<item>m2_parse()  :  m2-exp.c
<item>objc_parse()  :  objc-exp.c
<item>pascal_parse()  :  p-exp.c
<item>push_variable()  :  jv-exp.c
<item>write_dollar_variable()  :  parse.c
<item>write_var_from_name()  :  ada-exp.c
<item>write_var_from_sym()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>expout  :  parse.c
<item>expout_ptr  :  parse.c
</itemize>
</descrip>

<sect1>Global Function write_exp_elt_type()

<p><tt>void write_exp_elt_type ( struct type* expelt )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>write_exp_elt()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
<item>c_parse()  :  c-exp.c
<item>f_parse()  :  f-exp.c
<item>java_parse()  :  jv-exp.c
<item>m2_parse()  :  m2-exp.c
<item>objc_parse()  :  objc-exp.c
<item>pascal_parse()  :  p-exp.c
<item>push_expression_name()  :  jv-exp.c
<item>push_qualified_expression_name()  :  jv-exp.c
<item>scm_lreadr()  :  scm-exp.c
<item>write_exp_msymbol()  :  parse.c
<item>write_int()  :  ada-exp.c
<item>write_object_renaming()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function write_exp_msymbol()

<p><tt>void write_exp_msymbol ( struct minimal_symbol* msymbol, struct type* text_symbol_type, struct type* data_symbol_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>symbol_overlayed_address()  :  symfile.c
<item>write_exp_elt_longcst()  :  parse.c
<item>write_exp_elt_opcode()  :  parse.c
<item>write_exp_elt_type()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>f_parse()  :  f-exp.c
<item>m2_parse()  :  m2-exp.c
<item>objc_parse()  :  objc-exp.c
<item>pascal_parse()  :  p-exp.c
<item>push_expression_name()  :  jv-exp.c
<item>write_dollar_variable()  :  parse.c
<item>write_var_from_name()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_CORE_ADDR  :  gdbtypes.c
<item>msym_data_symbol_type  :  parse.c
<item>msym_text_symbol_type  :  parse.c
<item>msym_unknown_symbol_type  :  parse.c
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function write_exp_string()

<p><tt>void write_exp_string ( struct stoken str )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>write_exp_elt_longcst()  :  parse.c
<item>xrealloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
<item>c_parse()  :  c-exp.c
<item>f_parse()  :  f-exp.c
<item>java_parse()  :  jv-exp.c
<item>m2_parse()  :  m2-exp.c
<item>objc_parse()  :  objc-exp.c
<item>pascal_parse()  :  p-exp.c
<item>push_fieldnames()  :  jv-exp.c
<item>push_qualified_expression_name()  :  jv-exp.c
<item>push_variable()  :  jv-exp.c
<item>scm_lreadr()  :  scm-exp.c
<item>write_object_renaming()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>expout  :  parse.c
<item>expout_ptr  :  parse.c
<item>expout_size  :  parse.c
</itemize>
</descrip>

<sect1>Local Function build_parse()

<p><tt>static void build_parse ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parse.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>init_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_parse()  :  parse.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_parse()  :  parse.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_error  :  symtab.c
<item>ftype_no_debug_info_name  :  parse.c
<item>msym_data_symbol_type  :  parse.c
<item>msym_text_symbol_type  :  parse.c
<item>msym_unknown_symbol_type  :  parse.c
</itemize>
</descrip>

<sect1>Local Function check_type_stack_depth()

<p><tt>static void check_type_stack_depth ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>push_type()  :  parse.c
<item>push_type_int()  :  parse.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>type_stack  :  parse.c
<item>type_stack_depth  :  parse.c
<item>type_stack_size  :  parse.c
</itemize>
</descrip>

<sect1>Local Function fix_references_to_optimized_out_variables()

<p><tt>static void fix_references_to_optimized_out_variables ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parse.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>parser_fprintf()  :  parse.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_exp_in_context()  :  parse.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>expout  :  parse.c
<item>expout_ptr  :  parse.c
</itemize>
</descrip>

<sect1>Local Function free_funcalls()

<p><tt>static void free_funcalls ( void* ignore )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parse.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>parse_exp_in_context()  :  parse.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>funcall_chain  :  parse.c
</itemize>
</descrip>

<sect1>Local Function parse_exp_in_context()

<p><tt>static struct expression* parse_exp_in_context ( const char** stringptr, struct block* block, int comma, int void_context_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parse.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>discard_cleanups()  :  utils.c
<item>do_cleanups()  :  utils.c
<item>dump_prefix_expression()  :  expprint.c
<item>dump_raw_expression()  :  expprint.c
<item>fix_references_to_optimized_out_variables()  :  parse.c
<item>get_selected_block()  :  stack.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_suppress_hook_stop()  :  infrun.c
<item>prefixify_expression()  :  parse.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>error_no_arg()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_exp_1()  :  parse.c
<item>parse_expression_in_context()  :  parse.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
<item>free_funcalls()  :  parse.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>comma_terminates  :  parse.c
<item>current_language  :  language.c
<item>expout  :  parse.c
<item>expout_ptr  :  parse.c
<item>expout_size  :  parse.c
<item>expression_context_block  :  parse.c
<item>expression_context_pc  :  parse.c
<item>expressiondebug  :  parse.c
<item>funcall_chain  :  parse.c
<item>gdb_stdlog  :  main.c
<item>innermost_block  :  parse.c
<item>lexptr  :  parse.c
<item>paren_depth  :  parse.c
<item>prev_lexptr  :  parse.c
<item>type_stack_depth  :  parse.c
</itemize>
</descrip>

<sect1>Local Function prefixify_expression()

<p><tt>static void prefixify_expression ( struct expression* expr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parse.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>prefixify_subexp()  :  parse.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_exp_in_context()  :  parse.c
</itemize>
</descrip>

<sect1>Local Function prefixify_subexp()

<p><tt>static void prefixify_subexp ( struct expression* inexpr, struct expression* outexpr, int inend, int outbeg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parse.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>length_of_subexp()  :  parse.c
<item>operator_length()  :  parse.c
<item>prefixify_subexp()  :  parse.c
<item>__builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>prefixify_expression()  :  parse.c
<item>prefixify_subexp()  :  parse.c
</itemize>
</descrip>

<sect1>Local Function show_expressiondebug()

<p><tt>static void show_expressiondebug ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_parse()  :  parse.c
</itemize>
</descrip>

</article>
