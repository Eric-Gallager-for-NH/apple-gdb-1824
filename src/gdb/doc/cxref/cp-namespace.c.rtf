{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF cp-namespace.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File cp-namespace.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "cp-support.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dictionary.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define ANONYMOUS_NAMESPACE_LEN 21\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable processing_has_namespace_info\par}
{\s5\f1\fs20\ql\sb50\sa50 unsigned char processing_has_namespace_info\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell block.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell gnu-v2-abi.c\cell\cell\row
\cell gnu-v3-abi.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell cp_initialize_namespace()\cell cp-namespace.c\cell\row
\cell cp_scan_for_anonymous_namespaces()\cell cp-namespace.c\cell\row
\cell cp_set_block_scope()\cell cp-namespace.c\cell\row
\cell determine_class_name()\cell dwarf2read.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell process_die()\cell dwarf2read.c\cell\row
\cell read_enumeration_type()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable processing_current_prefix\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* processing_current_prefix\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell block.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell gnu-v2-abi.c\cell\cell\row
\cell gnu-v3-abi.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell cp_set_block_scope()\cell cp-namespace.c\cell\row
\cell determine_class_name()\cell dwarf2read.c\cell\row
\cell determine_prefix()\cell dwarf2read.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell process_full_comp_unit()\cell dwarf2read.c\cell\row
\cell process_structure_scope()\cell dwarf2read.c\cell\row
\cell read_enumeration_type()\cell dwarf2read.c\cell\row
\cell read_func_scope()\cell dwarf2read.c\cell\row
\cell read_namespace()\cell dwarf2read.c\cell\row
\cell read_structure_type()\cell dwarf2read.c\cell\row
\cell read_type_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable using_list\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct using_direct* using_list\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell cp_add_using_directive()\cell\cell\row
\cell cp_finalize_namespace()\cell\cell\row
\cell cp_initialize_namespace()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_cp_namespace()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_cp_namespace ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-namespace.c\cell\cell\row
Calls: \cell  add_cmd()\cell\cell\row
Refs Func:\cell maintenance_cplus_namespace()\cell cp-namespace.c\cell\row
Refs Var:\cell maint_cplus_cmd_list\cell cp-support.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cp_add_using_directive()\par}
{\s5\f1\fs20\ql\sb50\sa50 void cp_add_using_directive ( const char* name, unsigned int outer_length, unsigned int inner_length )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Calls: \cell cp_add_using()\cell cp-namespace.c\cell\row
\cell  strlen(), strncmp()\cell\cell\row
Called by:\cell cp_scan_for_anonymous_namespaces()\cell cp-namespace.c\cell\row
\cell read_namespace()\cell dwarf2read.c\cell\row
Refs Var:\cell using_list\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cp_check_possible_namespace_symbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 void cp_check_possible_namespace_symbols ( const char* name, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Calls: \cell check_possible_namespace_symbols_loop()\cell cp-namespace.c\cell\row
\cell cp_find_first_component()\cell cp-support.c\cell\row
Called by:\cell add_partial_symbol()\cell dwarf2read.c\cell\row
\cell scan_partial_inlined_function_symbols()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cp_finalize_namespace()\par}
{\s5\f1\fs20\ql\sb50\sa50 void cp_finalize_namespace ( struct block* static_block, struct obstack* obstack )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Calls: \cell block_set_using()\cell block.c\cell\row
\cell cp_copy_usings()\cell cp-namespace.c\cell\row
Called by:\cell end_symtab()\cell buildsym.c\cell\row
Refs Var:\cell using_list\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cp_initialize_namespace()\par}
{\s5\f1\fs20\ql\sb50\sa50 void cp_initialize_namespace ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Called by:\cell start_symtab()\cell buildsym.c\cell\row
Refs Var:\cell processing_has_namespace_info\cell cp-namespace.c\cell\row
\cell using_list\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cp_is_anonymous()\par}
{\s5\f1\fs20\ql\sb50\sa50 int cp_is_anonymous ( const char* cp_namespace )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Calls: \cell  strstr()\cell\cell\row
Called by:\cell cp_lookup_symbol_namespace()\cell cp-namespace.c\cell\row
\cell cp_scan_for_anonymous_namespaces()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cp_lookup_nested_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* cp_lookup_nested_type ( struct type* parent_type, const char* nested_name, const struct block* block )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Calls: \cell cp_lookup_symbol_namespace()\cell cp-namespace.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell c_parse()\cell c-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cp_lookup_symbol_namespace()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* cp_lookup_symbol_namespace ( const char* symnamespace, const char* name, const char* linkage_name, const struct block* block, const domain_enum domain, struct symtab** symtab )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Calls: \cell block_using()\cell block.c\cell\row
\cell cp_is_anonymous()\cell cp-namespace.c\cell\row
\cell cp_lookup_symbol_namespace()\cell cp-namespace.c\cell\row
\cell lookup_symbol_file()\cell cp-namespace.c\cell\row
\cell  __builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), strcmp(), strlen()\cell\cell\row
Called by:\cell cp_lookup_nested_type()\cell cp-namespace.c\cell\row
\cell cp_lookup_symbol_namespace()\cell cp-namespace.c\cell\row
\cell lookup_namespace_scope()\cell cp-namespace.c\cell\row
\cell value_maybe_namespace_elt()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cp_lookup_symbol_nonlocal()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* cp_lookup_symbol_nonlocal ( const char* name, const char* linkage_name, const struct block* block, const domain_enum domain, struct symtab** symtab )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Calls: \cell block_scope()\cell block.c\cell\row
\cell lookup_namespace_scope()\cell cp-namespace.c\cell\row
Used in:\cell c-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cp_lookup_transparent_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* cp_lookup_transparent_type ( const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Calls: \cell basic_lookup_transparent_type()\cell symtab.c\cell\row
\cell block_scope()\cell block.c\cell\row
\cell cp_lookup_transparent_type_loop()\cell cp-namespace.c\cell\row
\cell get_selected_block()\cell stack.c\cell\row
Used in:\cell c-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cp_scan_for_anonymous_namespaces()\par}
{\s5\f1\fs20\ql\sb50\sa50 void cp_scan_for_anonymous_namespaces ( const struct symbol* symbol )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Calls: \cell cp_add_using_directive()\cell cp-namespace.c\cell\row
\cell cp_find_first_component()\cell cp-support.c\cell\row
\cell cp_is_anonymous()\cell cp-namespace.c\cell\row
\cell  strncmp()\cell\cell\row
Called by:\cell add_symbol_to_list()\cell buildsym.c\cell\row
Refs Var:\cell processing_has_namespace_info\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function cp_set_block_scope()\par}
{\s5\f1\fs20\ql\sb50\sa50 void cp_set_block_scope ( const struct symbol* symbol, struct block* block, struct obstack* obstack )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-support.h\cell\cell\row
Calls: \cell block_set_scope()\cell block.c\cell\row
\cell cp_entire_prefix_len()\cell cp-support.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell finish_block()\cell buildsym.c\cell\row
Refs Var:\cell processing_current_prefix\cell cp-namespace.c\cell\row
\cell processing_has_namespace_info\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function check_one_possible_namespace_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int check_one_possible_namespace_symbol ( const char* name, int len, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-namespace.c\cell\cell\row
Calls: \cell dict_add_symbol()\cell dictionary.c\cell\row
\cell get_possible_namespace_block()\cell cp-namespace.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell lookup_block_symbol()\cell symtab.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell symbol_set_names()\cell symtab.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell check_possible_namespace_symbols_loop()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function check_possible_namespace_symbols_loop()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int check_possible_namespace_symbols_loop ( const char* name, int len, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-namespace.c\cell\cell\row
Calls: \cell check_one_possible_namespace_symbol()\cell cp-namespace.c\cell\row
\cell check_possible_namespace_symbols_loop()\cell cp-namespace.c\cell\row
\cell cp_find_first_component()\cell cp-support.c\cell\row
Called by:\cell check_possible_namespace_symbols_loop()\cell cp-namespace.c\cell\row
\cell cp_check_possible_namespace_symbols()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cp_add_using()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct using_direct* cp_add_using ( const char* name, unsigned int inner_len, unsigned int outer_len, struct using_direct* next )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-namespace.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell cp_add_using_directive()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cp_copy_usings()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct using_direct* cp_copy_usings ( struct using_direct* usingd, struct obstack* obstack )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-namespace.c\cell\cell\row
Calls: \cell cp_copy_usings()\cell cp-namespace.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  _obstack_newchunk(), strlen()\cell\cell\row
Called by:\cell cp_copy_usings()\cell cp-namespace.c\cell\row
\cell cp_finalize_namespace()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cp_lookup_transparent_type_loop()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* cp_lookup_transparent_type_loop ( const char* name, const char* scope, int length )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-namespace.c\cell\cell\row
Calls: \cell basic_lookup_transparent_type()\cell symtab.c\cell\row
\cell cp_find_first_component()\cell cp-support.c\cell\row
\cell cp_lookup_transparent_type_loop()\cell cp-namespace.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcpy_chk(), __inline_strncpy_chk(), strlen()\cell\cell\row
Called by:\cell cp_lookup_transparent_type()\cell cp-namespace.c\cell\row
\cell cp_lookup_transparent_type_loop()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function free_namespace_block()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void free_namespace_block ( struct symtab* symtab )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-namespace.c\cell\cell\row
Calls: \cell dict_free()\cell dictionary.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Used in:\cell initialize_namespace_symtab()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_possible_namespace_block()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct block* get_possible_namespace_block ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-namespace.c\cell\cell\row
Calls: \cell initialize_namespace_symtab()\cell cp-namespace.c\cell\row
Called by:\cell check_one_possible_namespace_symbol()\cell cp-namespace.c\cell\row
\cell lookup_possible_namespace_symbol()\cell cp-namespace.c\cell\row
\cell maintenance_cplus_namespace()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function initialize_namespace_symtab()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void initialize_namespace_symtab ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-namespace.c\cell\cell\row
Calls: \cell allocate_block()\cell block.c\cell\row
\cell allocate_symtab()\cell symfile.c\cell\row
\cell dict_create_hashed_expandable()\cell dictionary.c\cell\row
\cell dict_create_linear()\cell dictionary.c\cell\row
\cell  _obstack_newchunk()\cell\cell\row
Called by:\cell get_possible_namespace_block()\cell cp-namespace.c\cell\row
Refs Func:\cell free_namespace_block()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function lookup_namespace_scope()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* lookup_namespace_scope ( const char* name, const char* linkage_name, const struct block* block, const domain_enum domain, struct symtab** symtab, const char* scope, int scope_len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-namespace.c\cell\cell\row
Calls: \cell cp_find_first_component()\cell cp-support.c\cell\row
\cell cp_lookup_symbol_namespace()\cell cp-namespace.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_namespace_scope()\cell cp-namespace.c\cell\row
\cell  __builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strncpy_chk()\cell\cell\row
Called by:\cell cp_lookup_symbol_nonlocal()\cell cp-namespace.c\cell\row
\cell lookup_namespace_scope()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function lookup_possible_namespace_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* lookup_possible_namespace_symbol ( const char* name, struct symtab** symtab )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-namespace.c\cell\cell\row
Calls: \cell get_possible_namespace_block()\cell cp-namespace.c\cell\row
\cell lookup_block_symbol()\cell symtab.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
Called by:\cell lookup_symbol_file()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function lookup_symbol_file()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* lookup_symbol_file ( const char* name, const char* linkage_name, const struct block* block, const domain_enum domain, struct symtab** symtab, int anonymous_namespace )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-namespace.c\cell\cell\row
Calls: \cell block_global_block()\cell block.c\cell\row
\cell lookup_possible_namespace_symbol()\cell cp-namespace.c\cell\row
\cell lookup_symbol_aux_block()\cell symtab.c\cell\row
\cell lookup_symbol_global()\cell symtab.c\cell\row
\cell lookup_symbol_static()\cell symtab.c\cell\row
Called by:\cell cp_lookup_symbol_namespace()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function maintenance_cplus_namespace()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void maintenance_cplus_namespace ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell cp-namespace.c\cell\cell\row
Calls: \cell dict_iterator_first()\cell dictionary.c\cell\row
\cell dict_iterator_next()\cell dictionary.c\cell\row
\cell get_possible_namespace_block()\cell cp-namespace.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
Used in:\cell _initialize_cp_namespace()\cell cp-namespace.c\cell\row
Refs Var:\cell demangle\cell utils.c\cell\row
\intbl0
}
