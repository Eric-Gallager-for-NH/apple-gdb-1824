{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF dwarf2expr.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File dwarf2expr.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/elf/dwarf2.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dwarf2expr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dwarf2loc.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "dwarf2read.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exceptions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <setjmp.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dwarf2-frame.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dwarf2loc.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function add_bits_piece()\par}
{\s5\f1\fs20\ql\sb50\sa50 void add_bits_piece ( struct dwarf_expr_context* ctx, int in_reg, CORE_ADDR value, uint64_t bitmask, int offset_in_bits, unsigned long size )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2expr.h\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function add_piece()\par}
{\s5\f1\fs20\ql\sb50\sa50 void add_piece ( struct dwarf_expr_context* ctx, int in_reg, CORE_ADDR value, unsigned long size )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2expr.h\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
Called by:\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\cell print_single_dwarf_location()\cell dwarf2loc.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf2_read_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR dwarf2_read_address ( gdb_byte* buf, gdb_byte* buf_end, int* bytes_read )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2expr.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell gdbarch_addr_bit()\cell gdbarch.c\cell\row
Called by:\cell execute_cfa_program()\cell dwarf2-frame.c\cell\row
\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\cell find_location_expression()\cell dwarf2loc.c\cell\row
\cell locexpr_describe_location()\cell dwarf2loc.c\cell\row
\cell loclist_describe_location()\cell dwarf2loc.c\cell\row
\cell print_single_dwarf_location()\cell dwarf2loc.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf_expr_eval()\par}
{\s5\f1\fs20\ql\sb50\sa50 void dwarf_expr_eval ( struct dwarf_expr_context* ctx, gdb_byte* addr, size_t len, int eh_frame_p, struct dwarf2_address_translation* addr_translation )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2expr.h\cell\cell\row
Calls: \cell execute_stack_op()\cell dwarf2expr.c\cell\row
Called by:\cell dwarf2_evaluate_loc_desc()\cell dwarf2loc.c\cell\row
\cell dwarf2_loc_desc_needs_frame()\cell dwarf2loc.c\cell\row
\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf_expr_fetch()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR dwarf_expr_fetch ( struct dwarf_expr_context* ctx, int n )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2expr.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Called by:\cell dwarf2_evaluate_loc_desc()\cell dwarf2loc.c\cell\row
\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\cell print_single_dwarf_location()\cell dwarf2loc.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf_expr_pop()\par}
{\s5\f1\fs20\ql\sb50\sa50 void dwarf_expr_pop ( struct dwarf_expr_context* ctx )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2expr.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Called by:\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\cell print_single_dwarf_location()\cell dwarf2loc.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf_expr_push()\par}
{\s5\f1\fs20\ql\sb50\sa50 void dwarf_expr_push ( struct dwarf_expr_context* ctx, CORE_ADDR value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2expr.h\cell\cell\row
Calls: \cell dwarf_expr_grow_stack()\cell dwarf2expr.c\cell\row
Called by:\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function free_dwarf_expr_context()\par}
{\s5\f1\fs20\ql\sb50\sa50 void free_dwarf_expr_context ( struct dwarf_expr_context* ctx )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2expr.h\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
Called by:\cell dwarf2_evaluate_loc_desc()\cell dwarf2loc.c\cell\row
\cell dwarf2_loc_desc_needs_frame()\cell dwarf2loc.c\cell\row
\cell execute_stack_op()\cell dwarf2-frame.c\cell\row
\cell loclist_describe_location()\cell dwarf2loc.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function new_dwarf_expr_context()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct dwarf_expr_context* new_dwarf_expr_context ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2expr.h\cell\cell\row
Calls: \cell xcalloc()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell dwarf2_evaluate_loc_desc()\cell dwarf2loc.c\cell\row
\cell dwarf2_loc_desc_needs_frame()\cell dwarf2loc.c\cell\row
\cell execute_stack_op()\cell dwarf2-frame.c\cell\row
\cell locexpr_describe_location()\cell dwarf2loc.c\cell\row
\cell loclist_describe_location()\cell dwarf2loc.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function read_sleb128()\par}
{\s5\f1\fs20\ql\sb50\sa50 gdb_byte* read_sleb128 ( gdb_byte* buf, gdb_byte* buf_end, long* r )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2expr.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Called by:\cell dwarf2_tracepoint_var_ref()\cell dwarf2loc.c\cell\row
\cell execute_cfa_program()\cell dwarf2-frame.c\cell\row
\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\cell print_single_dwarf_location()\cell dwarf2loc.c\cell\row
\cell read_encoded_value()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function read_uleb128()\par}
{\s5\f1\fs20\ql\sb50\sa50 gdb_byte* read_uleb128 ( gdb_byte* buf, gdb_byte* buf_end, unsigned long* r )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2expr.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Called by:\cell dwarf2_tracepoint_var_ref()\cell dwarf2loc.c\cell\row
\cell execute_cfa_program()\cell dwarf2-frame.c\cell\row
\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\cell print_single_dwarf_location()\cell dwarf2loc.c\cell\row
\cell read_encoded_value()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function signed_address_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* signed_address_type ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2expr.h\cell\cell\row
Calls: \cell gdbarch_addr_bit()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\cell print_single_dwarf_location()\cell dwarf2loc.c\cell\row
Refs Var:\cell builtin_type_int16\cell gdbtypes.c\cell\row
\cell builtin_type_int32\cell gdbtypes.c\cell\row
\cell builtin_type_int64\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function unsigned_address_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* unsigned_address_type ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2expr.h\cell\cell\row
Calls: \cell gdbarch_addr_bit()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\cell print_single_dwarf_location()\cell dwarf2loc.c\cell\row
Refs Var:\cell builtin_type_uint16\cell gdbtypes.c\cell\row
\cell builtin_type_uint32\cell gdbtypes.c\cell\row
\cell builtin_type_uint64\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf_expr_grow_stack()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf_expr_grow_stack ( struct dwarf_expr_context* ctx, size_t need )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xrealloc()\cell utils.c\cell\row
Called by:\cell dwarf_expr_push()\cell dwarf2expr.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function execute_stack_op()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void execute_stack_op ( struct dwarf_expr_context* ctx, gdb_byte* op_ptr, gdb_byte* op_end, int eh_frame_p, struct dwarf2_address_translation* addr_translation )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2expr.c\cell\cell\row
Calls: \cell add_piece()\cell dwarf2expr.c\cell\row
\cell dwarf2_frame_adjust_regnum()\cell dwarf2-frame.c\cell\row
\cell dwarf2_read_address()\cell dwarf2expr.c\cell\row
\cell dwarf_expr_eval()\cell dwarf2expr.c\cell\row
\cell dwarf_expr_fetch()\cell dwarf2expr.c\cell\row
\cell dwarf_expr_pop()\cell dwarf2expr.c\cell\row
\cell dwarf_expr_push()\cell dwarf2expr.c\cell\row
\cell error()\cell utils.c\cell\row
\cell extract_signed_integer()\cell findvar.c\cell\row
\cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell gdbarch_addr_bit()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objfile_section_offset()\cell objfiles.c\cell\row
\cell read_sleb128()\cell dwarf2expr.c\cell\row
\cell read_uleb128()\cell dwarf2expr.c\cell\row
\cell signed_address_type()\cell dwarf2expr.c\cell\row
\cell translate_debug_map_address()\cell dwarf2read.c\cell\row
\cell unsigned_address_type()\cell dwarf2expr.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
Called by:\cell dwarf_expr_eval()\cell dwarf2expr.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
}
