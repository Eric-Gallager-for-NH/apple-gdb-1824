<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF breakpoint.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for breakpoint.c of gdb.cxref.
<author>cxref

<sect>File breakpoint.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>print_exception_catchpoint()  :  breakpoint.c
<item>print_mention_exception_catchpoint()  :  breakpoint.c
<item>print_one_exception_catchpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;time.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbthread.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;annotate.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;source.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;linespec.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;completer.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;cli/cli-script.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;cli-out.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;wrapper.h&quot;</tt>
<itemize>
<item><tt>#include &quot;gdb.h&quot;</tt>
<item><tt>#include &quot;varobj.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;solib.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;solist.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;observer.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../readline/tilde.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;mi/mi-common.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;objc-lang.h&quot;</tt>
<itemize>
<item><tt>#include &lt;Availability.h&gt;</tt>
</itemize>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define BREAKPOINT_C_NOT_ON_i386 1</tt><newline>
<p>
<tt>#define ALL_BREAKPOINTS( B )</tt><newline>
<p>
<tt>#define ALL_BREAKPOINTS_SAFE( B, TMP )</tt><newline>
<p>
<tt>#define ALL_BP_LOCATIONS( B )</tt><newline>
<p>
<tt>#define ALL_BP_LOCATIONS_SAFE( B, TMP )</tt><newline>
<p>
<tt>#define WP_DELETED 1</tt><newline>
<p>
<tt>#define WP_VALUE_CHANGED 2</tt><newline>
<p>
<tt>#define WP_VALUE_NOT_CHANGED 3</tt><newline>
<p>
<tt>#define BP_TEMPFLAG 1</tt><newline>
<p>
<tt>#define BP_HARDWAREFLAG 2</tt><newline>
<p>
<tt>#define BP_FUTUREFLAG 4</tt><newline>
<p>
<tt>#define kc BPSTAT_WHAT_KEEP_CHECKING</tt><newline>
<p>
<tt>#define ss BPSTAT_WHAT_STOP_SILENT</tt><newline>
<p>
<tt>#define sn BPSTAT_WHAT_STOP_NOISY</tt><newline>
<p>
<tt>#define sgl BPSTAT_WHAT_SINGLE</tt><newline>
<p>
<tt>#define slr BPSTAT_WHAT_SET_LONGJMP_RESUME</tt><newline>
<p>
<tt>#define clr BPSTAT_WHAT_CLEAR_LONGJMP_RESUME</tt><newline>
<p>
<tt>#define clrs BPSTAT_WHAT_CLEAR_LONGJMP_RESUME_SINGLE</tt><newline>
<p>
<tt>#define sr BPSTAT_WHAT_STEP_RESUME</tt><newline>
<p>
<tt>#define ts BPSTAT_WHAT_THROUGH_SIGTRAMP</tt><newline>
<p>
<tt>#define shl BPSTAT_WHAT_CHECK_SHLIBS</tt><newline>
<p>
<tt>#define shlr BPSTAT_WHAT_CHECK_SHLIBS_RESUME_FROM_HOOK</tt><newline>
<p>
<tt>#define err BPSTAT_WHAT_STOP_NOISY</tt><newline>

<sect1>Type struct breakpoint_list

<p>
<itemize>
<item><tt>struct breakpoint_list</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct breakpoint_list* next;</tt><newline>
<item><tt>struct breakpoint* bp;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Typedef insertion_state_t

<p>
<tt>typedef enum {...} insertion_state_t</tt><newline>
<itemize>
<item><tt>enum</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>mark_inserted;</tt><newline>
<item><tt>mark_uninserted;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Typedef args_for_catchpoint_enable

<p>
<tt>typedef struct {...} args_for_catchpoint_enable</tt><newline>
<itemize>
<item><tt>struct</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>enum exception_event_kind kind;</tt><newline>
<item><tt>int enable_p;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type enum bpstat_class

<p>
<itemize>
<item><tt>enum bpstat_class</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>no_effect;</tt><newline>
<item><tt>wp_silent;</tt><newline>
<item><tt>wp_noisy;</tt><newline>
<item><tt>bp_nostop;</tt><newline>
<item><tt>bp_silent;</tt><newline>
<item><tt>bp_noisy;</tt><newline>
<item><tt>long_jump;</tt><newline>
<item><tt>long_resume;</tt><newline>
<item><tt>step_resume;</tt><newline>
<item><tt>through_sig;</tt><newline>
<item><tt>shlib_event;</tt><newline>
<item><tt>catch_shlib_event;</tt><newline>
<item><tt>class_last;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct ep_type_description

<p>
<itemize>
<item><tt>struct ep_type_description</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>enum bptype type;</tt><newline>
<item><tt>const char* description;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct captured_breakpoint_query_args

<p>
<itemize>
<item><tt>struct captured_breakpoint_query_args</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int bnum;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct captured_parse_breakpoint_args

<p>
<itemize>
<item><tt>struct captured_parse_breakpoint_args</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const char** arg_p;</tt><newline>
<item><tt>struct symtabs_and_lines* sals_p;</tt><newline>
<item><tt>char*** addr_string_p;</tt><newline>
<item><tt>char* requested_shlib;</tt><newline>
<item><tt>int* not_found_ptr;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct lang_and_radix

<p>
<itemize>
<item><tt>struct lang_and_radix</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>enum language lang;</tt><newline>
<item><tt>int radix;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct safe_sals_to_pc_args

<p>
<itemize>
<item><tt>struct safe_sals_to_pc_args</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct symtabs_and_lines* sals;</tt><newline>
<item><tt>const char* address;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct captured_breakpoint_args

<p>
<itemize>
<item><tt>struct captured_breakpoint_args</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>char* address;</tt><newline>
<item><tt>char* condition;</tt><newline>
<item><tt>int hardwareflag;</tt><newline>
<item><tt>int tempflag;</tt><newline>
<item><tt>int thread;</tt><newline>
<item><tt>int ignore_count;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Typedef catch_fork_kind

<p>
<tt>typedef enum {...} catch_fork_kind</tt><newline>
<itemize>
<item><tt>enum</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>catch_fork;</tt><newline>
<item><tt>catch_vfork;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct sal_chain

<p>
<itemize>
<item><tt>struct sal_chain</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct sal_chain* next;</tt><newline>
<item><tt>struct symtab_and_line sal;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable deprecated_exception_catchpoints_are_fragile

<p>
<tt>int deprecated_exception_catchpoints_are_fragile</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>coffread.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>linespec.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>breakpoint_init_inferior()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Variable deprecated_exception_support_initialized

<p>
<tt>int deprecated_exception_support_initialized</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>coffread.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>linespec.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>breakpoint_init_inferior()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Variable symbol_generation

<p>
<tt>int symbol_generation</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
<item>valops.c
<item>value.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>breakpoint_re_set()  :  breakpoint.c
<item>breakpoint_update()  :  breakpoint.c
<item>lookup_cached_function()  :  value.c
</itemize>
</descrip>

<sect1>Global Variable breakpoint_generation

<p>
<tt>int breakpoint_generation</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>breakpoint_update()  :  breakpoint.c
<item>tell_breakpoints_objfile_changed_internal()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Variable show_breakpoint_hit_counts

<p>
<tt>int show_breakpoint_hit_counts</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
<item>target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
<item>generic_mourn_inferior()  :  target/target.c
<item>print_one_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Variable breakpoint_chain

<p>
<tt>struct breakpoint* breakpoint_chain</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
<item>bpstat_should_step()  :  breakpoint.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>breakpoint_1()  :  breakpoint.c
<item>breakpoint_auto_delete()  :  breakpoint.c
<item>breakpoint_clear_ignore_counts()  :  breakpoint.c
<item>breakpoint_init_inferior()  :  breakpoint.c
<item>breakpoint_re_set_all()  :  breakpoint.c
<item>breakpoint_update()  :  breakpoint.c
<item>breakpoints_relocate()  :  breakpoint.c
<item>clear_breakpoint_hit_counts()  :  breakpoint.c
<item>clear_command()  :  breakpoint.c
<item>commands_command()  :  breakpoint.c
<item>commands_from_control_command()  :  breakpoint.c
<item>condition_command()  :  breakpoint.c
<item>create_breakpoints()  :  breakpoint.c
<item>delete_breakpoint()  :  breakpoint.c
<item>delete_command()  :  breakpoint.c
<item>describe_other_breakpoints()  :  breakpoint.c
<item>disable_breakpoints_in_shlibs()  :  breakpoint.c
<item>disable_breakpoints_in_unloaded_shlib()  :  breakpoint.c
<item>disable_command()  :  breakpoint.c
<item>disable_exception_catch()  :  breakpoint.c
<item>disable_longjmp_breakpoint()  :  breakpoint.c
<item>disable_overlay_breakpoints()  :  breakpoint.c
<item>disable_user_breakpoints_before_operation()  :  breakpoint.c
<item>disable_watchpoints_before_interactive_call_start()  :  breakpoint.c
<item>do_captured_breakpoint_query()  :  breakpoint.c
<item>enable_command()  :  breakpoint.c
<item>enable_longjmp_breakpoint()  :  breakpoint.c
<item>enable_overlay_breakpoints()  :  breakpoint.c
<item>enable_user_breakpoints_after_operation()  :  breakpoint.c
<item>enable_watchpoints_after_interactive_call_stop()  :  breakpoint.c
<item>find_breakpoint()  :  breakpoint.c
<item>find_finish_breakpoint()  :  breakpoint.c
<item>gnu_v3_update_exception_catchpoints()  :  breakpoint.c
<item>hw_breakpoint_used_count()  :  breakpoint.c
<item>hw_watchpoint_used_count()  :  breakpoint.c
<item>map_breakpoint_numbers()  :  breakpoint.c
<item>re_enable_breakpoints_in_shlibs()  :  breakpoint.c
<item>remove_solib_event_breakpoints()  :  breakpoint.c
<item>remove_thread_event_breakpoints()  :  breakpoint.c
<item>save_breakpoints_command()  :  breakpoint.c
<item>set_ignore_count()  :  breakpoint.c
<item>set_longjmp_resume_breakpoint()  :  breakpoint.c
<item>set_raw_breakpoint()  :  breakpoint.c
<item>tell_breakpoints_objfile_changed_internal()  :  breakpoint.c
<item>update_breakpoints_after_exec()  :  breakpoint.c
<item>update_exception_catchpoints()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Variable bp_location_chain

<p>
<tt>struct bp_location* bp_location_chain</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>allocate_bp_location()  :  breakpoint.c
<item>bpstat_have_active_hw_watchpoints()  :  breakpoint.c
<item>breakpoint_here_p()  :  breakpoint.c
<item>breakpoint_init_inferior()  :  breakpoint.c
<item>breakpoint_inserted_here_p()  :  breakpoint.c
<item>breakpoint_thread_match()  :  breakpoint.c
<item>check_duplicates()  :  breakpoint.c
<item>delete_breakpoint()  :  breakpoint.c
<item>deprecated_read_memory_nobpt()  :  breakpoint.c
<item>detach_breakpoints()  :  breakpoint.c
<item>insert_breakpoints()  :  breakpoint.c
<item>mark_breakpoints_out()  :  breakpoint.c
<item>reattach_breakpoints()  :  breakpoint.c
<item>remove_breakpoints()  :  breakpoint.c
<item>remove_hw_watchpoints()  :  breakpoint.c
<item>software_breakpoint_inserted_here_p()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Variable breakpoint_count

<p>
<tt>int breakpoint_count</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
<item>break_command_2()  :  breakpoint.c
<item>create_breakpoints()  :  breakpoint.c
<item>create_exception_catchpoint()  :  breakpoint.c
<item>create_exec_event_catchpoint()  :  breakpoint.c
<item>create_fork_vfork_event_catchpoint()  :  breakpoint.c
<item>get_number_trailer()  :  breakpoint.c
<item>set_breakpoint_count()  :  breakpoint.c
<item>set_breakpoint_sal()  :  breakpoint.c
<item>solib_load_unload_1()  :  breakpoint.c
<item>watch_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Variable default_breakpoint_valid

<p>
<tt>int default_breakpoint_valid</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>decode_line_spec_1()  :  breakpoint.c
<item>parse_breakpoint_sals()  :  breakpoint.c
<item>set_default_breakpoint()  :  breakpoint.c
<item>until_break_command()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Variable default_breakpoint_address

<p>
<tt>CORE_ADDR default_breakpoint_address</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>clear_command()  :  breakpoint.c
<item>parse_breakpoint_sals()  :  breakpoint.c
<item>set_default_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Variable default_breakpoint_symtab

<p>
<tt>struct symtab* default_breakpoint_symtab</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>clear_command()  :  breakpoint.c
<item>decode_line_spec_1()  :  breakpoint.c
<item>parse_breakpoint_sals()  :  breakpoint.c
<item>set_default_breakpoint()  :  breakpoint.c
<item>until_break_command()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Variable default_breakpoint_line

<p>
<tt>int default_breakpoint_line</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>clear_command()  :  breakpoint.c
<item>decode_line_spec_1()  :  breakpoint.c
<item>parse_breakpoint_sals()  :  breakpoint.c
<item>set_default_breakpoint()  :  breakpoint.c
<item>until_break_command()  :  breakpoint.c
</itemize>
</descrip>

<sect1>External Variables

<p>
<bf>addressprint</bf><newline>
<tt>extern int addressprint</tt><newline>
<descrip>
<tag>Defined in:</tag>
<itemize>
<item>addressprint</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>exception_throw_type_regexp</bf><newline>
<tt>static char* exception_throw_type_regexp</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()
<item>current_exception_should_stop()
</itemize>
</descrip>
<p>
<bf>exception_catch_type_regexp</bf><newline>
<tt>static char* exception_catch_type_regexp</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()
<item>current_exception_should_stop()
</itemize>
</descrip>
<p>
<bf>exception_catchpoint_catch_enabled</bf><newline>
<tt>static int exception_catchpoint_catch_enabled</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>catch_command_1()
<item>disable_exception_catch()
<item>exception_catchpoints_enabled()
<item>gnu_v3_update_exception_catchpoints()
<item>handle_gnu_v3_exceptions()
<item>update_exception_catchpoints()
</itemize>
</descrip>
<p>
<bf>exception_catchpoint_throw_enabled</bf><newline>
<tt>static int exception_catchpoint_throw_enabled</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>catch_command_1()
<item>disable_exception_catch()
<item>exception_catchpoints_enabled()
<item>gnu_v3_update_exception_catchpoints()
<item>handle_gnu_v3_exceptions()
<item>update_exception_catchpoints()
</itemize>
</descrip>
<p>
<bf>dont_mention</bf><newline>
<tt>static int dont_mention</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>mention()
</itemize>
</descrip>
<p>
<bf>can_use_hw_watchpoints</bf><newline>
<tt>static int can_use_hw_watchpoints</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()
<item>can_use_hardware_watchpoint()
</itemize>
</descrip>
<p>
<bf>pending_break_support</bf><newline>
<tt>static enum auto_boolean pending_break_support</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()
<item>break_command_2()
<item>future_break_command()
<item>gdb_breakpoint()
<item>parse_breakpoint_sals()
<item>rbr_break_command()
<item>restore_saved_pending_break_support()
</itemize>
</descrip>
<p>
<bf>executing_breakpoint_commands</bf><newline>
<tt>static int executing_breakpoint_commands</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>bpstat_do_actions()
<item>cleanup_executing_breakpoints()
<item>commands_command()
<item>commands_from_control_command()
</itemize>
</descrip>
<p>
<bf>overlay_events_enabled</bf><newline>
<tt>static int overlay_events_enabled</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>create_overlay_event_breakpoint()
<item>disable_overlay_breakpoints()
<item>enable_overlay_breakpoints()
<item>insert_bp_location()
<item>remove_breakpoint()
</itemize>
</descrip>
<p>
<bf>current_exception_event</bf><newline>
<tt>static struct exception_event_record* current_exception_event</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>bpstat_stop_status()
<item>bpstat_what_to_do()
<item>current_exception_should_stop()
<item>print_catch_info()
<item>print_exception_catchpoint()
</itemize>
</descrip>
<p>
<bf>gnu_v3_catch_symbol</bf><newline>
<tt>static const char* gnu_v3_catch_symbol</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>create_exception_catchpoint()
<item>gnu_v3_update_exception_catchpoints()
</itemize>
</descrip>
<p>
<bf>gnu_v3_throw_symbol</bf><newline>
<tt>static const char* gnu_v3_throw_symbol</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>create_exception_catchpoint()
<item>gnu_v3_update_exception_catchpoints()
</itemize>
</descrip>
<p>
<bf>gnu_v3_exception_catchpoint_ops</bf><newline>
<tt>static struct breakpoint_ops gnu_v3_exception_catchpoint_ops</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>create_exception_catchpoint()
</itemize>
</descrip>

<sect1>Global Function _initialize_breakpoint()

<p><tt>void _initialize_breakpoint ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>observer_attach_solib_unloaded()  :  observer.c
<item>add_abbrev_prefix_cmd(), add_cmd(), add_com(), add_com_alias(), add_info(), add_prefix_cmd(), add_setshow_auto_boolean_cmd(), add_setshow_string_cmd(), add_setshow_zinteger_cmd(), set_cmd_completer()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>awatch_command()  :  breakpoint.c
<item>break_command()  :  breakpoint.c
<item>breakpoints_info()  :  breakpoint.c
<item>catch_command()  :  breakpoint.c
<item>clear_command()  :  breakpoint.c
<item>commands_command()  :  breakpoint.c
<item>condition_command()  :  breakpoint.c
<item>delete_command()  :  breakpoint.c
<item>disable_breakpoints_in_unloaded_shlib()  :  breakpoint.c
<item>disable_command()  :  breakpoint.c
<item>enable_command()  :  breakpoint.c
<item>enable_delete_command()  :  breakpoint.c
<item>enable_once_command()  :  breakpoint.c
<item>filename_completer()  :  completer.c
<item>future_break_command()  :  breakpoint.c
<item>hbreak_command()  :  breakpoint.c
<item>ignore_command()  :  breakpoint.c
<item>location_completer()  :  completer.c
<item>maintenance_info_breakpoints()  :  breakpoint.c
<item>rwatch_command()  :  breakpoint.c
<item>save_breakpoints_command()  :  breakpoint.c
<item>set_breakpoint_cmd()  :  breakpoint.c
<item>show_breakpoint_cmd()  :  breakpoint.c
<item>show_can_use_hw_watchpoints()  :  breakpoint.c
<item>show_pending_break_support()  :  breakpoint.c
<item>stop_command()  :  breakpoint.c
<item>stopat_command()  :  breakpoint.c
<item>stopin_command()  :  breakpoint.c
<item>tbreak_command()  :  breakpoint.c
<item>tcatch_command()  :  breakpoint.c
<item>thbreak_command()  :  breakpoint.c
<item>watch_command()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>breakpoint_count  :  breakpoint.c
<item>can_use_hw_watchpoints  :  breakpoint.c
<item>dbx_commands  :  main.c
<item>exception_catch_type_regexp  :  breakpoint.c
<item>exception_throw_type_regexp  :  breakpoint.c
<item>pending_break_support  :  breakpoint.c
<item>show_breakpoint_hit_counts  :  breakpoint.c
<item>xdb_commands  :  main.c
<item>cmdlist, deletelist, disablelist, enablebreaklist, enablelist, maintenanceinfolist, setlist, showlist, stoplist
</itemize>
</descrip>

<sect1>Global Function awatch_command_wrapper()

<p><tt>void awatch_command_wrapper ( const char* arg, int by_location, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>watch_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function bpstat_clear()

<p><tt>void bpstat_clear ( bpstat* bsp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_free()  :  value.c
<item>xfree()  :  utils.c
<item>free_command_lines()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_get_triggered_catchpoints()  :  breakpoint.c
<item>clear_proceed_status()  :  infrun.c
<item>discard_inferior_status()  :  infrun.c
<item>handle_inferior_event()  :  infrun.c
<item>restore_inferior_status()  :  infrun.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>bpstat_do_actions()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function bpstat_clear_actions()

<p><tt>void bpstat_clear_actions ( bpstat bs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_free()  :  value.c
<item>free_command_lines()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_do_actions()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function bpstat_copy()

<p><tt>bpstat bpstat_copy ( bpstat bs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>release_value()  :  value.c
<item>value_copy()  :  value.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), copy_command_lines()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_do_actions()  :  breakpoint.c
<item>handle_inferior_event()  :  infrun.c
<item>save_inferior_status()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function bpstat_do_actions()

<p><tt>void bpstat_do_actions ( bpstat* bsp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_continuation()  :  utils.c
<item>bpstat_clear_actions()  :  breakpoint.c
<item>bpstat_copy()  :  breakpoint.c
<item>do_cleanups()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_ui_out_notify_begin_end()  :  ui-out.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
<item>execute_control_command()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>async_breakpoint_command_continuation()  :  breakpoint.c
<item>command_handler()  :  event-top.c
<item>command_line_handler_continuation()  :  event-top.c
<item>command_loop()  :  top.c
<item>simplified_command_loop()  :  top.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>async_breakpoint_command_continuation()  :  breakpoint.c
<item>bpstat_clear()  :  breakpoint.c
<item>cleanup_executing_breakpoints()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_proceeded  :  infcmd.c
<item>current_target  :  target/target.c
<item>executing_breakpoint_commands  :  breakpoint.c
<item>gdb_override_async  :  target/target.c
<item>target_executing  :  top.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function bpstat_find_breakpoint()

<p><tt>bpstat bpstat_find_breakpoint ( bpstat bsp, struct breakpoint* breakpoint )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>finish_command()  :  infcmd.c
<item>finish_command_continuation()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function bpstat_find_step_resume_breakpoint()

<p><tt>struct breakpoint* bpstat_find_step_resume_breakpoint ( bpstat bsp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>pid_to_thread_id()  :  thread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function bpstat_get_triggered_catchpoints()

<p><tt>bpstat* bpstat_get_triggered_catchpoints ( bpstat ep_list, bpstat* cp_list )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bpstat_alloc()  :  breakpoint.c
<item>bpstat_clear()  :  breakpoint.c
<item>internal_error()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function bpstat_have_active_hw_watchpoints()

<p><tt>int bpstat_have_active_hw_watchpoints ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_enabled()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bp_location_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function bpstat_num()

<p><tt>int bpstat_num ( bpstat* bsp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>continue_command()  :  infcmd.c
<item>normal_stop()  :  infrun.c
<item>program_info()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function bpstat_print()

<p><tt>enum print_stop_action bpstat_print ( bpstat bs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>print_bp_stop_message()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>normal_stop()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function bpstat_should_step()

<p><tt>int bpstat_should_step ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_enabled()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>currently_stepping()  :  infrun.c
<item>proceed()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function bpstat_stop_status()

<p><tt>bpstat bpstat_stop_status ( CORE_ADDR bp_addr, ptid_t ptid, int stopped_by_watchpoint )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>at_inlined_call_site_p()  :  inlining.c
<item>bpstat_alloc()  :  breakpoint.c
<item>breakpoint_enabled()  :  breakpoint.c
<item>check_typedef()  :  gdbtypes.c
<item>current_exception_should_stop()  :  breakpoint.c
<item>current_inlined_subroutine_call_site_line()  :  inlining.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>do_cleanups()  :  utils.c
<item>do_hand_call_cleanups()  :  utils.c
<item>ep_is_exception_catchpoint()  :  breakpoint.c
<item>frame_id_eq()  :  frame.c
<item>frame_id_p()  :  frame.c
<item>free_all_values()  :  value.c
<item>gdb_parse_exp_1()  :  wrapper.c
<item>gdbarch_addr_bits_remove()  :  gdbarch.c
<item>get_current_frame()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>get_frame_type()  :  frame.c
<item>get_selected_block()  :  stack.c
<item>inferior_has_execd()  :  infrun.c
<item>inferior_has_forked()  :  infrun.c
<item>inferior_has_vforked()  :  infrun.c
<item>inlined_subroutine_adjust_position_for_breakpoint()  :  inlining.c
<item>insert_breakpoints()  :  breakpoint.c
<item>make_cleanup()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>pid_to_thread_id()  :  thread.c
<item>printf_filtered()  :  utils.c
<item>ptid_get_pid()  :  infrun.c
<item>remove_breakpoints()  :  breakpoint.c
<item>section_is_mapped()  :  symfile.c
<item>section_is_overlay()  :  symfile.c
<item>select_frame()  :  frame.c
<item>value_lazy()  :  value.c
<item>value_next()  :  value.c
<item>value_offset()  :  value.c
<item>value_type()  :  value.c
<item>warning()  :  utils.c
<item>xstrprintf()  :  utils.c
<item>annotate_ignore_count_change(), atoi(), catch_errors(), copy_command_lines(), isdigit(), strcmp(), strrchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>breakpoint_cond_eval()  :  breakpoint.c
<item>watchpoint_check()  :  breakpoint.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>current_exception_event  :  breakpoint.c
<item>current_gdbarch  :  gdbarch.c
<item>current_target  :  target/target.c
<item>global_inlined_call_stack  :  inlining.c
<item>inferior_ptid  :  infcmd.c
<item>overlay_debugging  :  symfile.c
<item>step_frame_id  :  infcmd.c
<item>step_range_start  :  infcmd.c
<item>xdb_commands  :  main.c
</itemize>
</descrip>

<sect1>Global Function bpstat_what_to_do()

<p><tt>struct bpstat_what bpstat_what_to_do ( bpstat bs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_exception_event  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function break_command()

<p><tt>void break_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>break_command_1()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function breakpoint_add_commands()

<p><tt>void breakpoint_add_commands ( struct breakpoint* b, struct command_line* commands )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_modify_event(), breakpoints_changed(), free_command_lines()
</itemize>
</descrip>

<sect1>Global Function breakpoint_auto_delete()

<p><tt>void breakpoint_auto_delete ( bpstat bs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>delete_breakpoint()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_auto_delete_contents()  :  infcall.c
<item>normal_stop()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function breakpoint_clear_ignore_counts()

<p><tt>void breakpoint_clear_ignore_counts ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>generic_mourn_inferior()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function breakpoint_here_p()

<p><tt>enum breakpoint_here breakpoint_here_p ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_enabled()  :  breakpoint.c
<item>section_is_mapped()  :  symfile.c
<item>section_is_overlay()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>default_memory_remove_breakpoint()  :  mem-break.c
<item>handle_inferior_event()  :  infrun.c
<item>prepare_to_proceed()  :  infrun.c
<item>proceed()  :  infrun.c
<item>resume()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bp_location_chain  :  breakpoint.c
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function breakpoint_init_inferior()

<p><tt>void breakpoint_init_inferior ( enum inf_context context )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>delete_breakpoint()  :  breakpoint.c
<item>ep_is_exception_catchpoint()  :  breakpoint.c
<item>value_free()  :  value.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>generic_mourn_inferior()  :  target/target.c
<item>init_wait_for_inferior()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bp_location_chain  :  breakpoint.c
<item>breakpoint_chain  :  breakpoint.c
<item>deprecated_exception_catchpoints_are_fragile  :  breakpoint.c
<item>deprecated_exception_support_initialized  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function breakpoint_inserted_here_p()

<p><tt>int breakpoint_inserted_here_p ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>section_is_mapped()  :  symfile.c
<item>section_is_overlay()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bp_location_chain  :  breakpoint.c
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function breakpoint_print_commands()

<p><tt>void breakpoint_print_commands ( struct ui_out* uiout, struct breakpoint* b )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>make_cleanup_ui_out_list_begin_end()  :  ui-out.c
<item>print_command_lines()
</itemize>
</descrip>

<sect1>Global Function breakpoint_re_set()

<p><tt>void breakpoint_re_set ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objfile_add_to_restrict_list()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>follow_inferior_reset_breakpoints()  :  infrun.c
<item>new_symfile_objfile()  :  symfile.c
<item>objfile_relocate()  :  objfiles.c
<item>reread_symbols_for_objfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symbol_generation  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function breakpoint_re_set_thread()

<p><tt>void breakpoint_re_set_thread ( struct breakpoint* b )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>in_thread_list()  :  thread.c
<item>pid_to_thread_id()  :  thread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>follow_inferior_reset_breakpoints()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function breakpoint_thread_match()

<p><tt>int breakpoint_thread_match ( CORE_ADDR pc, ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_enabled()  :  breakpoint.c
<item>pid_to_thread_id()  :  thread.c
<item>section_is_mapped()  :  symfile.c
<item>section_is_overlay()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bp_location_chain  :  breakpoint.c
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function breakpoint_update()

<p><tt>void breakpoint_update ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_re_set_all()  :  breakpoint.c
<item>do_cleanups()  :  utils.c
<item>exception_catchpoints_enabled()  :  breakpoint.c
<item>gnu_v3_update_exception_catchpoints()  :  breakpoint.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_restrict_to_objfile()  :  objfiles.c
<item>objfile_restrict_search()  :  objfiles.c
<item>user_settable_breakpoint()  :  breakpoint.c
<item>xstrprintf()  :  utils.c
<item>catch_errors()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_kext_command()  :  symfile.c
<item>insert_breakpoints()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>restrict_search_cleanup()  :  breakpoint.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>breakpoint_generation  :  breakpoint.c
<item>current_target  :  target/target.c
<item>symbol_generation  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function breakpoints_relocate()

<p><tt>void breakpoints_relocate ( struct objfile* objfile, struct section_offsets* delta )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>executable_objfile()  :  objfiles.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>objfile_relocate()  :  objfiles.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function clear_breakpoint_hit_counts()

<p><tt>void clear_breakpoint_hit_counts ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>run_command_1()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function commands_from_control_command()

<p><tt>enum command_control_type commands_from_control_command ( char* arg, struct command_line* cmd )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>get_number()  :  breakpoint.c
<item>breakpoint_modify_event(), breakpoints_changed(), copy_command_lines(), free_command_lines()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>executing_breakpoint_commands  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function create_exception_catchpoint()

<p><tt>struct breakpoint* create_exception_catchpoint ( int tempflag, const char* cond_string, int gnu_v3_p, enum exception_event_kind ex_event, struct symtab_and_line* sal )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>mention()  :  breakpoint.c
<item>savestring()  :  utils.c
<item>set_breakpoint_count()  :  breakpoint.c
<item>set_raw_breakpoint()  :  breakpoint.c
<item>strlen(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gnu_v3_update_exception_catchpoints()  :  breakpoint.c
<item>update_exception_catchpoints()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_count  :  breakpoint.c
<item>gnu_v3_catch_symbol  :  breakpoint.c
<item>gnu_v3_exception_catchpoint_ops  :  breakpoint.c
<item>gnu_v3_throw_symbol  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function create_exec_event_catchpoint()

<p><tt>void create_exec_event_catchpoint ( int tempflag, const char* cond_string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>init_sal()  :  symtab.c
<item>mention()  :  breakpoint.c
<item>savestring()  :  utils.c
<item>set_breakpoint_count()  :  breakpoint.c
<item>set_raw_breakpoint()  :  breakpoint.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>catch_exec_command_1()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_count  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function create_fork_event_catchpoint()

<p><tt>void create_fork_event_catchpoint ( int tempflag, const char* cond_string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_fork_vfork_event_catchpoint()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>catch_fork_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function create_objc_hook_breakpoint()

<p><tt>struct breakpoint* create_objc_hook_breakpoint ( const char* hookname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_internal_breakpoint()  :  breakpoint.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>init_debugger_mode_fail_notification()  :  objc-lang.c
<item>make_cleanup_init_objc_exception_catcher()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function create_solib_event_breakpoint()

<p><tt>struct breakpoint* create_solib_event_breakpoint ( CORE_ADDR address )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_internal_breakpoint()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>objc_init_trampoline_observer()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function create_solib_load_event_breakpoint()

<p><tt>void create_solib_load_event_breakpoint ( char* hookname, int tempflag, char* dll_pathname, char* cond_string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>solib_load_unload_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function create_solib_unload_event_breakpoint()

<p><tt>void create_solib_unload_event_breakpoint ( char* hookname, int tempflag, char* dll_pathname, char* cond_string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>solib_load_unload_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function create_thread_event_breakpoint()

<p><tt>struct breakpoint* create_thread_event_breakpoint ( CORE_ADDR address )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_internal_breakpoint()  :  breakpoint.c
<item>paddr()  :  utils.c
<item>xstrprintf()  :  utils.c
</itemize>
</descrip>

<sect1>Global Function create_vfork_event_catchpoint()

<p><tt>void create_vfork_event_catchpoint ( int tempflag, const char* cond_string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_fork_vfork_event_catchpoint()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>catch_fork_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function decode_line_spec_1()

<p><tt>struct symtabs_and_lines decode_line_spec_1 ( const char* string, int funfirstline )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>decode_line_1()  :  linespec.c
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>jump_command()  :  infcmd.c
<item>line_info()  :  source.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>default_breakpoint_line  :  breakpoint.c
<item>default_breakpoint_symtab  :  breakpoint.c
<item>default_breakpoint_valid  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function delete_breakpoint()

<p><tt>void delete_breakpoint ( struct breakpoint* bpt )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_duplicates()  :  breakpoint.c
<item>deprecated_print_address_numeric()  :  printcmd.c
<item>do_cleanups()  :  utils.c
<item>ep_is_exception_catchpoint()  :  breakpoint.c
<item>error_stream()  :  utils.c
<item>fprintf_filtered()  :  utils.c
<item>fprintf_unfiltered()  :  utils.c
<item>free_valchain()  :  breakpoint.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_ui_file_delete()  :  utils.c
<item>mem_fileopen()  :  ui-file.c
<item>remove_breakpoint()  :  breakpoint.c
<item>safe_strerror()  :  utils.c
<item>value_free()  :  value.c
<item>xfree()  :  utils.c
<item>xstrprintf()  :  utils.c
<item>breakpoint_delete_event(), catch_errors(), deprecated_delete_breakpoint_hook(), free_command_lines()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_auto_delete()  :  breakpoint.c
<item>breakpoint_init_inferior()  :  breakpoint.c
<item>breakpoint_re_set_all()  :  breakpoint.c
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>clear_command()  :  breakpoint.c
<item>delete_command()  :  breakpoint.c
<item>delete_step_resume_breakpoint()  :  thread.c
<item>disable_exception_catch()  :  breakpoint.c
<item>do_cleanup_objc_exception_breakpoint()  :  objc-lang.c
<item>do_delete_breakpoint_cleanup()  :  breakpoint.c
<item>free_thread()  :  thread.c
<item>objc_clear_trampoline_data()  :  objc-lang.c
<item>remove_solib_event_breakpoints()  :  breakpoint.c
<item>remove_thread_event_breakpoints()  :  breakpoint.c
<item>resolve_pending_breakpoint()  :  breakpoint.c
<item>update_breakpoints_after_exec()  :  breakpoint.c
<item>update_exception_catchpoints()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>delete_command()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>cover_target_enable_exception_callback()  :  breakpoint.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bp_location_chain  :  breakpoint.c
<item>breakpoint_chain  :  breakpoint.c
<item>current_target  :  target/target.c
<item>deprecated_delete_breakpoint_hook  :  top.c
<item>stop_bpstat  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function delete_command()

<p><tt>void delete_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>delete_breakpoint()  :  breakpoint.c
<item>dont_repeat()  :  top.c
<item>map_breakpoint_numbers()  :  breakpoint.c
<item>query()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>delete_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function deprecated_read_memory_nobpt()

<p><tt>int deprecated_read_memory_nobpt ( CORE_ADDR memaddr, gdb_byte* myaddr, unsigned int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_read_memory_nobpt()  :  breakpoint.c
<item>gdbarch_breakpoint_from_pc()  :  gdbarch.c
<item>target_read_memory()  :  target/target.c
<item>warning()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>deprecated_read_memory_nobpt()  :  breakpoint.c
<item>safe_frame_unwind_memory()  :  frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bp_location_chain  :  breakpoint.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function detach_breakpoints()

<p><tt>int detach_breakpoints ( int pid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>pid_to_ptid()  :  infrun.c
<item>ptid_get_pid()  :  infrun.c
<item>remove_breakpoint()  :  breakpoint.c
<item>save_inferior_ptid()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bp_location_chain  :  breakpoint.c
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function detect_location_arg()

<p><tt>int detect_location_arg ( const char** arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strlen(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>awatch_command()  :  breakpoint.c
<item>rwatch_command()  :  breakpoint.c
<item>watch_command()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function disable_breakpoint()

<p><tt>void disable_breakpoint ( struct breakpoint* bpt )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_duplicates()  :  breakpoint.c
<item>breakpoint_modify_event(), deprecated_modify_breakpoint_hook()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>disable_command()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>disable_command()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>deprecated_modify_breakpoint_hook  :  top.c
</itemize>
</descrip>

<sect1>Global Function disable_breakpoints_in_shlibs()

<p><tt>void disable_breakpoints_in_shlibs ( int silent )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_enabled()  :  breakpoint.c
<item>printf_filtered()  :  utils.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>clear_solib()  :  solib.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function disable_breakpoints_in_unloaded_shlib()

<p><tt>void disable_breakpoints_in_unloaded_shlib ( struct so_list* solib )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_enabled()  :  breakpoint.c
<item>warning()  :  utils.c
<item>macosx_pc_solib(), strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function disable_exception_catch()

<p><tt>void disable_exception_catch ( enum exception_event_kind ex_event )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>delete_breakpoint()  :  breakpoint.c
<item>handle_gnu_v3_exceptions()  :  breakpoint.c
<item>internal_error()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>current_target  :  target/target.c
<item>exception_catchpoint_catch_enabled  :  breakpoint.c
<item>exception_catchpoint_throw_enabled  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function disable_longjmp_breakpoint()

<p><tt>void disable_longjmp_breakpoint ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_duplicates()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>disable_longjmp_breakpoint_cleanup()  :  infcmd.c
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function disable_overlay_breakpoints()

<p><tt>void disable_overlay_breakpoints ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_duplicates()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>overlay_manual_command()  :  symfile.c
<item>overlay_off_command()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>overlay_events_enabled  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function disable_watchpoints_before_interactive_call_start()

<p><tt>void disable_watchpoints_before_interactive_call_start ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_enabled()  :  breakpoint.c
<item>check_duplicates()  :  breakpoint.c
<item>ep_is_exception_catchpoint()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function enable_breakpoint()

<p><tt>void enable_breakpoint ( struct breakpoint* bpt )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_enable_breakpoint()  :  breakpoint.c
<item>ui_out_field_int()  :  ui-out.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>enable_command()  :  breakpoint.c
<item>make_cleanup_init_objc_exception_catcher()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>enable_command()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function enable_longjmp_breakpoint()

<p><tt>void enable_longjmp_breakpoint ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_duplicates()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function enable_overlay_breakpoints()

<p><tt>void enable_overlay_breakpoints ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_duplicates()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>overlay_auto_command()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>overlay_events_enabled  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function enable_user_breakpoints_after_operation()

<p><tt>void enable_user_breakpoints_after_operation ( void* unused )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_duplicates()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_enable_disable_bpts_during_operation()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function enable_watchpoints_after_interactive_call_stop()

<p><tt>void enable_watchpoints_after_interactive_call_stop ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_duplicates()  :  breakpoint.c
<item>ep_is_exception_catchpoint()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function ep_is_catchpoint()

<p><tt>int ep_is_catchpoint ( struct breakpoint* ep )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_one_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function ep_is_exception_catchpoint()

<p><tt>int ep_is_exception_catchpoint ( struct breakpoint* ep )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
<item>breakpoint_init_inferior()  :  breakpoint.c
<item>delete_breakpoint()  :  breakpoint.c
<item>disable_watchpoints_before_interactive_call_start()  :  breakpoint.c
<item>enable_watchpoints_after_interactive_call_stop()  :  breakpoint.c
<item>insert_bp_location()  :  breakpoint.c
<item>remove_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function ep_is_shlib_catchpoint()

<p><tt>int ep_is_shlib_catchpoint ( struct breakpoint* ep )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
</descrip>

<sect1>Global Function exception_catchpoints_enabled()

<p><tt>int exception_catchpoints_enabled ( enum exception_event_kind ex_event )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_update()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>exception_catchpoint_catch_enabled  :  breakpoint.c
<item>exception_catchpoint_throw_enabled  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function find_breakpoint()

<p><tt>struct breakpoint* find_breakpoint ( int bpnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function find_finish_breakpoint()

<p><tt>struct breakpoint* find_finish_breakpoint ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function fsf_gdb_breakpoint()

<p><tt>enum gdb_rc fsf_gdb_breakpoint ( char* address, char* condition, int hardwareflag, int tempflag, int thread, int ignore_count, char** error_message )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdb.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>catch_exceptions_with_msg()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_captured_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function future_break_command()

<p><tt>void future_break_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>break_command_1()  :  breakpoint.c
<item>do_cleanups()  :  utils.c
<item>make_cleanup()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>restore_saved_pending_break_support()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>pending_break_support  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function gdb_breakpoint()

<p><tt>enum gdb_rc gdb_breakpoint ( char* address, char* condition, int hardwareflag, int tempflag, int futureflag, int thread, int ignore_count, int* indices, char* requested_shlib, char** error_message )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdb.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
<item>clear_new_breakpoint_list()  :  breakpoint.c
<item>condition_command_1()  :  breakpoint.c
<item>do_cleanups()  :  utils.c
<item>make_cleanup()  :  utils.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>restore_saved_pending_break_support()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>pending_break_support  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function gdb_breakpoint_query()

<p><tt>enum gdb_rc gdb_breakpoint_query ( struct ui_out* uiout, int bnum, char** error_message )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdb.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>catch_exceptions_with_msg()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_captured_breakpoint_query()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function get_number()

<p><tt>int get_number ( const char** pp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_number_trailer()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>commands_command()  :  breakpoint.c
<item>commands_from_control_command()  :  breakpoint.c
<item>condition_command()  :  breakpoint.c
<item>get_number_or_range()  :  breakpoint.c
<item>get_tracepoint_by_number()  :  tracepoint.c
<item>ignore_command()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function get_number_or_range()

<p><tt>int get_number_or_range ( const char** pp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>get_number()  :  breakpoint.c
<item>get_number_trailer()  :  breakpoint.c
<item>isspace()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_tracepoint_by_number()  :  tracepoint.c
<item>map_breakpoint_numbers()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function gnu_v3_update_exception_catchpoints()

<p><tt>void gnu_v3_update_exception_catchpoints ( enum exception_event_kind ex_event, int tempflag, const char* cond_string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_exception_catchpoint()  :  breakpoint.c
<item>gdbarch_skip_prologue()  :  gdbarch.c
<item>init_sal()  :  symtab.c
<item>internal_error()  :  utils.c
<item>msymbol_hash()  :  minsyms.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>strcmp_iw()  :  utils.c
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_update()  :  breakpoint.c
<item>catch_exception_command_1()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>current_gdbarch  :  gdbarch.c
<item>current_target  :  target/target.c
<item>exception_catchpoint_catch_enabled  :  breakpoint.c
<item>exception_catchpoint_throw_enabled  :  breakpoint.c
<item>gnu_v3_catch_symbol  :  breakpoint.c
<item>gnu_v3_throw_symbol  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function handle_gnu_v3_exceptions()

<p><tt>int handle_gnu_v3_exceptions ( enum exception_event_kind ex_event )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>catch_exception_command_1()  :  breakpoint.c
<item>disable_exception_catch()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>exception_catchpoint_catch_enabled  :  breakpoint.c
<item>exception_catchpoint_throw_enabled  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function insert_breakpoints()

<p><tt>int insert_breakpoints ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_enabled()  :  breakpoint.c
<item>breakpoint_update()  :  breakpoint.c
<item>evaluate_expression()  :  eval.c
<item>fprintf_unfiltered()  :  utils.c
<item>gdb_value_fetch_lazy()  :  wrapper.c
<item>insert_bp_location()  :  breakpoint.c
<item>make_cleanup_ui_file_delete()  :  utils.c
<item>mem_fileopen()  :  ui-file.c
<item>release_value()  :  value.c
<item>ui_file_put()  :  ui-file.c
<item>value_lazy()  :  value.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
<item>extended_remote_async_create_inferior()  :  remote.c
<item>extended_remote_create_inferior()  :  remote.c
<item>follow_exec()  :  infrun.c
<item>follow_inferior_reset_breakpoints()  :  infrun.c
<item>handle_inferior_event()  :  infrun.c
<item>insert_step_resume_breakpoint_at_sal()  :  infrun.c
<item>keep_going()  :  infrun.c
<item>proceed()  :  infrun.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>ui_file_write()  :  ui-file.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bp_location_chain  :  breakpoint.c
<item>current_target  :  target/target.c
<item>gdb_stderr  :  main.c
</itemize>
</descrip>

<sect1>Global Function make_breakpoint_permanent()

<p><tt>void make_breakpoint_permanent ( struct breakpoint* b )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
</descrip>

<sect1>Global Function make_cleanup_delete_breakpoint()

<p><tt>struct cleanup* make_cleanup_delete_breakpoint ( struct breakpoint* b )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>finish_command()  :  infcmd.c
<item>until_break_command()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_delete_breakpoint_cleanup()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_enable_disable_bpts_during_operation()

<p><tt>struct cleanup* make_cleanup_enable_disable_bpts_during_operation ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>disable_user_breakpoints_before_operation()  :  breakpoint.c
<item>make_cleanup()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_end_debugger_mode()  :  objc-lang.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>enable_user_breakpoints_after_operation()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function make_exec_cleanup_delete_breakpoint()

<p><tt>struct cleanup* make_exec_cleanup_delete_breakpoint ( struct breakpoint* b )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_exec_cleanup()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>finish_command()  :  infcmd.c
<item>until_break_command()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_delete_breakpoint_cleanup()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function mark_breakpoints_out()

<p><tt>void mark_breakpoints_out ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>update_breakpoints_after_exec()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bp_location_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function rbr_break_command()

<p><tt>void rbr_break_command ( const char* arg, int from_tty, int use_msymbol_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>break_command_1()  :  breakpoint.c
<item>do_cleanups()  :  utils.c
<item>make_cleanup()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>rbreak_command()  :  symtab.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>restore_saved_pending_break_support()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>pending_break_support  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function re_enable_breakpoints_in_shlibs()

<p><tt>void re_enable_breakpoints_in_shlibs ( int silent )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>printf_filtered()  :  utils.c
<item>target_read_memory()  :  target/target.c
<item>xstrprintf()  :  utils.c
<item>catch_errors()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_symbol_file_command()  :  symfile.c
<item>attach_command()  :  infcmd.c
<item>handle_inferior_event()  :  infrun.c
<item>remote_open_1()  :  remote.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>resolve_pending_breakpoint()  :  breakpoint.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function reattach_breakpoints()

<p><tt>int reattach_breakpoints ( int pid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>pid_to_ptid()  :  infrun.c
<item>remove_breakpoint()  :  breakpoint.c
<item>save_inferior_ptid()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bp_location_chain  :  breakpoint.c
<item>current_target  :  target/target.c
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function remove_breakpoints()

<p><tt>int remove_breakpoints ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>paddr_nz()  :  utils.c
<item>remove_breakpoint()  :  breakpoint.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
<item>extended_remote_async_create_inferior()  :  remote.c
<item>extended_remote_create_inferior()  :  remote.c
<item>handle_inferior_event()  :  infrun.c
<item>normal_stop()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bp_location_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function remove_duplicate_sals()

<p><tt>void remove_duplicate_sals ( struct symtabs_and_lines* new_sals, struct symtabs_and_lines old_sals, char** new_canonical )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_breakpoints()  :  breakpoint.c
<item>decode_all_variables()  :  linespec.c
</itemize>
</descrip>

<sect1>Global Function remove_hw_watchpoints()

<p><tt>int remove_hw_watchpoints ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>remove_breakpoint()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>resume()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bp_location_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function remove_solib_event_breakpoints()

<p><tt>void remove_solib_event_breakpoints ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>delete_breakpoint()  :  breakpoint.c
<item>gdb_check_fatal()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function remove_thread_event_breakpoints()

<p><tt>void remove_thread_event_breakpoints ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>delete_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function resolve_sal_pc()

<p><tt>void resolve_sal_pc ( struct symtab_and_line* sal )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_function()  :  block.c
<item>blockvector_for_pc_sect()  :  block.c
<item>error()  :  utils.c
<item>find_line_pc_range()  :  symtab.c
<item>fixup_symbol_section()  :  symtab.c
<item>lookup_minimal_symbol_by_pc()  :  minsyms.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>breakpoint_sals_to_pc()  :  breakpoint.c
<item>jump_command()  :  infcmd.c
<item>scope_info()  :  tracepoint.c
<item>solib_load_unload_1()  :  breakpoint.c
<item>trace_command()  :  tracepoint.c
<item>until_break_command()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function rwatch_command_wrapper()

<p><tt>void rwatch_command_wrapper ( const char* arg, int by_location, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>watch_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function set_breakpoint_count()

<p><tt>void set_breakpoint_count ( int num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>lookup_internalvar()  :  value.c
<item>set_internalvar()  :  value.c
<item>value_from_longest()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
<item>create_breakpoints()  :  breakpoint.c
<item>create_exception_catchpoint()  :  breakpoint.c
<item>create_exec_event_catchpoint()  :  breakpoint.c
<item>create_fork_vfork_event_catchpoint()  :  breakpoint.c
<item>set_breakpoint_sal()  :  breakpoint.c
<item>solib_load_unload_1()  :  breakpoint.c
<item>watch_command_1()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_count  :  breakpoint.c
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function set_breakpoint_sal()

<p><tt>struct breakpoint* set_breakpoint_sal ( struct symtab_and_line sal )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>set_breakpoint_count()  :  breakpoint.c
<item>set_raw_breakpoint()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_count  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function set_default_breakpoint()

<p><tt>void set_default_breakpoint ( int valid, CORE_ADDR addr, struct symtab* symtab, int line )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>clear_symtab_users()  :  symfile.c
<item>print_frame_info()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>default_breakpoint_address  :  breakpoint.c
<item>default_breakpoint_line  :  breakpoint.c
<item>default_breakpoint_symtab  :  breakpoint.c
<item>default_breakpoint_valid  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function set_ignore_count()

<p><tt>void set_ignore_count ( int bptnum, int count, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>printf_filtered()  :  utils.c
<item>breakpoint_modify_event(), breakpoints_changed()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>continue_command()  :  infcmd.c
<item>ignore_command()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function set_longjmp_resume_breakpoint()

<p><tt>void set_longjmp_resume_breakpoint ( CORE_ADDR pc, struct frame_id frame_id )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>adjust_breakpoint_address()  :  breakpoint.c
<item>check_duplicates()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function set_momentary_breakpoint()

<p><tt>struct breakpoint* set_momentary_breakpoint ( struct symtab_and_line sal, struct frame_id frame_id, enum bptype type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>in_thread_list()  :  thread.c
<item>pid_to_thread_id()  :  thread.c
<item>set_raw_breakpoint()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>finish_command()  :  infcmd.c
<item>hand_function_call()  :  infcall.c
<item>insert_step_resume_breakpoint_at_sal()  :  infrun.c
<item>until_break_command()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function set_raw_breakpoint()

<p><tt>struct breakpoint* set_raw_breakpoint ( struct symtab_and_line sal, enum bptype bptype, int pending_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>adjust_breakpoint_address()  :  breakpoint.c
<item>allocate_bp_location()  :  breakpoint.c
<item>check_duplicates()  :  breakpoint.c
<item>savestring()  :  utils.c
<item>set_bp_objfile()  :  breakpoint.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), breakpoints_changed(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
<item>create_breakpoints()  :  breakpoint.c
<item>create_exception_catchpoint()  :  breakpoint.c
<item>create_exec_event_catchpoint()  :  breakpoint.c
<item>create_fork_vfork_event_catchpoint()  :  breakpoint.c
<item>create_internal_breakpoint()  :  breakpoint.c
<item>set_breakpoint_sal()  :  breakpoint.c
<item>set_momentary_breakpoint()  :  breakpoint.c
<item>solib_load_unload_1()  :  breakpoint.c
<item>watch_command_1()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>current_language  :  language.c
<item>input_radix  :  valprint.c
<item>null_frame_id  :  frame.c
</itemize>
</descrip>

<sect1>Global Function software_breakpoint_inserted_here_p()

<p><tt>int software_breakpoint_inserted_here_p ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_enabled()  :  breakpoint.c
<item>section_is_mapped()  :  symfile.c
<item>section_is_overlay()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>adjust_pc_after_break()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bp_location_chain  :  breakpoint.c
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function tbreak_command()

<p><tt>void tbreak_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>break_command_1()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>go_command()  :  infcmd.c
<item>run_command_1()  :  infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function tell_breakpoints_objfile_changed()

<p><tt>void tell_breakpoints_objfile_changed ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>tell_breakpoints_objfile_changed_internal()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remove_symbol_file_command()  :  symfile.c
<item>reopen_exec_file()  :  corefile.c
<item>replace_psymbols_with_correct_psymbols()  :  symfile.c
<item>reread_symbols_for_objfile()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function tell_breakpoints_objfile_removed()

<p><tt>void tell_breakpoints_objfile_removed ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>tell_breakpoints_objfile_changed_internal()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_objfile()  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function until_break_command()

<p><tt>void until_break_command ( const char* arg, int from_tty, int anywhere )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_continuation()  :  utils.c
<item>clear_proceed_status()  :  infrun.c
<item>decode_line_1()  :  linespec.c
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>find_pc_line()  :  symtab.c
<item>get_frame_id()  :  frame.c
<item>get_frame_pc()  :  frame.c
<item>get_prev_frame()  :  frame.c
<item>make_cleanup_delete_breakpoint()  :  breakpoint.c
<item>make_exec_cleanup_delete_breakpoint()  :  breakpoint.c
<item>proceed()  :  infrun.c
<item>resolve_sal_pc()  :  breakpoint.c
<item>set_momentary_breakpoint()  :  breakpoint.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>advance_command()  :  infcmd.c
<item>until_command()  :  infcmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>until_break_command_continuation()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>default_breakpoint_line  :  breakpoint.c
<item>default_breakpoint_symtab  :  breakpoint.c
<item>default_breakpoint_valid  :  breakpoint.c
<item>deprecated_selected_frame  :  frame.c
<item>gdb_override_async  :  target/target.c
<item>null_frame_id  :  frame.c
</itemize>
</descrip>

<sect1>Global Function update_breakpoints_after_exec()

<p><tt>void update_breakpoints_after_exec ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_overlay_event_breakpoint()  :  breakpoint.c
<item>delete_breakpoint()  :  breakpoint.c
<item>mark_breakpoints_out()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>follow_exec()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function update_exception_catchpoints()

<p><tt>int update_exception_catchpoints ( enum exception_event_kind ex_event, int tempflag, const char* cond_string, int delete_it, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_exception_catchpoint()  :  breakpoint.c
<item>delete_breakpoint()  :  breakpoint.c
<item>internal_error()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>catch_exception_command_1()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>current_target  :  target/target.c
<item>exception_catchpoint_catch_enabled  :  breakpoint.c
<item>exception_catchpoint_throw_enabled  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function watch_command_wrapper()

<p><tt>void watch_command_wrapper ( const char* arg, int by_location, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>watch_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function add_breakpoint_to_new_list()

<p><tt>static void add_breakpoint_to_new_list ( struct breakpoint_list** new_breakpoints, struct breakpoint* bp )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
<item>create_breakpoints()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function adjust_breakpoint_address()

<p><tt>static CORE_ADDR adjust_breakpoint_address ( CORE_ADDR bpaddr, enum bptype bptype )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_adjustment_warning()  :  breakpoint.c
<item>gdbarch_adjust_breakpoint_address()  :  gdbarch.c
<item>gdbarch_adjust_breakpoint_address_p()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>set_longjmp_resume_breakpoint()  :  breakpoint.c
<item>set_raw_breakpoint()  :  breakpoint.c
<item>watch_command_1()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function allocate_bp_location()

<p><tt>static struct bp_location* allocate_bp_location ( struct breakpoint* bpt, enum bptype bp_type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_raw_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bp_location_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function async_breakpoint_command_continuation()

<p><tt>static void async_breakpoint_command_continuation ( struct continuation_arg* arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bpstat_do_actions()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>bpstat_do_actions()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>stop_bpstat  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function awatch_command()

<p><tt>static void awatch_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>detect_location_arg()  :  breakpoint.c
<item>watch_command_1()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function bpstat_alloc()

<p><tt>static bpstat bpstat_alloc ( struct breakpoint* b, bpstat cbs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_get_triggered_catchpoints()  :  breakpoint.c
<item>bpstat_stop_status()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function break_command_1()

<p><tt>static int break_command_1 ( const char* arg, int flag, int from_tty, struct breakpoint* pending_bp, int use_msymbol_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
<item>error()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), isspace(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>break_command()  :  breakpoint.c
<item>future_break_command()  :  breakpoint.c
<item>hbreak_command()  :  breakpoint.c
<item>rbr_break_command()  :  breakpoint.c
<item>stopat_command()  :  breakpoint.c
<item>stopin_command()  :  breakpoint.c
<item>tbreak_command()  :  breakpoint.c
<item>thbreak_command()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function break_command_2()

<p><tt>static int break_command_2 ( const char* arg, int flag, int from_tty, struct breakpoint* pending_bp, char* requested_shlib, int* indices, struct breakpoint_list** new_breakpoints, int use_msymbol_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_breakpoint_to_new_list()  :  breakpoint.c
<item>block_for_pc()  :  block.c
<item>create_breakpoints()  :  breakpoint.c
<item>discard_cleanups()  :  utils.c
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>find_pc_sect_function()  :  blockframe.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_ui_out_list_begin_end()  :  ui-out.c
<item>mention()  :  breakpoint.c
<item>nquery()  :  utils.c
<item>parse_exp_1()  :  parse.c
<item>remove_duplicates()  :  breakpoint.c
<item>remove_non_msymbol_sals()  :  breakpoint.c
<item>safe_breakpoint_sals_to_pc()  :  breakpoint.c
<item>savestring()  :  utils.c
<item>set_breakpoint_count()  :  breakpoint.c
<item>set_raw_breakpoint()  :  breakpoint.c
<item>symbol_natural_name()  :  symtab.c
<item>ui_out_field_core_addr()  :  ui-out.c
<item>ui_out_field_int()  :  ui-out.c
<item>ui_out_field_skip()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
<item>valid_thread_id()  :  thread.c
<item>warning()  :  utils.c
<item>xcalloc()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>catch_exception(), exception_print(), strncmp(), strtol(), throw_exception(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>break_command_1()  :  breakpoint.c
<item>gdb_breakpoint()  :  breakpoint.c
<item>resolve_pending_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_captured_parse_breakpoint()  :  breakpoint.c
<item>null_cleanup()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_count  :  breakpoint.c
<item>demangle  :  utils.c
<item>gdb_stderr  :  main.c
<item>pending_break_support  :  breakpoint.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function breakpoint_1()

<p><tt>static void breakpoint_1 ( int bnum, int allflag )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>gdbarch_addr_bit()  :  gdbarch.c
<item>make_cleanup_ui_out_table_begin_end()  :  ui-out.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>set_next_address()  :  printcmd.c
<item>ui_out_message()  :  ui-out.c
<item>ui_out_table_body()  :  ui-out.c
<item>ui_out_table_header()  :  ui-out.c
<item>user_settable_breakpoint()  :  breakpoint.c
<item>annotate_breakpoints_headers(), annotate_breakpoints_table(), annotate_breakpoints_table_end(), annotate_field()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoints_info()  :  breakpoint.c
<item>maintenance_info_breakpoints()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>addressprint  :  valprint.c
<item>breakpoint_chain  :  breakpoint.c
<item>current_gdbarch  :  gdbarch.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function breakpoint_address_is_meaningful()

<p><tt>static int breakpoint_address_is_meaningful ( struct breakpoint* bpt )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>check_duplicates()  :  breakpoint.c
<item>describe_other_breakpoints()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function breakpoint_adjustment_warning()

<p><tt>static void breakpoint_adjustment_warning ( CORE_ADDR from_addr, CORE_ADDR to_addr, int bnum, int have_bnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>hex_string_custom()  :  utils.c
<item>warning()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>adjust_breakpoint_address()  :  breakpoint.c
<item>print_it_typical()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function breakpoint_cond_eval()

<p><tt>static int breakpoint_cond_eval ( void* exp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>evaluate_expression()  :  eval.c
<item>value_free_to_mark()  :  value.c
<item>value_mark()  :  value.c
<item>value_true()  :  language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function breakpoint_enabled()

<p><tt>static int breakpoint_enabled ( struct breakpoint* b )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>bpstat_have_active_hw_watchpoints()  :  breakpoint.c
<item>bpstat_should_step()  :  breakpoint.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>breakpoint_here_p()  :  breakpoint.c
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>breakpoint_thread_match()  :  breakpoint.c
<item>disable_breakpoints_in_shlibs()  :  breakpoint.c
<item>disable_breakpoints_in_unloaded_shlib()  :  breakpoint.c
<item>disable_user_breakpoints_before_operation()  :  breakpoint.c
<item>disable_watchpoints_before_interactive_call_start()  :  breakpoint.c
<item>hw_watchpoint_used_count()  :  breakpoint.c
<item>insert_bp_location()  :  breakpoint.c
<item>insert_breakpoints()  :  breakpoint.c
<item>remove_breakpoint()  :  breakpoint.c
<item>software_breakpoint_inserted_here_p()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function breakpoint_re_set_all()

<p><tt>static void breakpoint_re_set_all ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_longjmp_breakpoint()  :  breakpoint.c
<item>delete_breakpoint()  :  breakpoint.c
<item>do_cleanups()  :  utils.c
<item>gdbarch_get_longjmp_target_p()  :  gdbarch.c
<item>make_cleanup()  :  utils.c
<item>objfile_restrict_search()  :  objfiles.c
<item>set_language()  :  language.c
<item>user_settable_breakpoint()  :  breakpoint.c
<item>xstrprintf()  :  utils.c
<item>catch_errors()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_update()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>current_gdbarch  :  gdbarch.c
<item>current_language  :  language.c
<item>input_radix  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function breakpoint_re_set_one()

<p><tt>static int breakpoint_re_set_one ( void* bint )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>adjust_breakpoint_address()  :  breakpoint.c
<item>breakpoint_enabled()  :  breakpoint.c
<item>check_duplicates()  :  breakpoint.c
<item>decode_line_1()  :  linespec.c
<item>delete_breakpoint()  :  breakpoint.c
<item>do_cleanups()  :  utils.c
<item>evaluate_expression()  :  eval.c
<item>find_pc_sect_section()  :  objfiles.c
<item>find_pc_section()  :  objfiles.c
<item>gdb_parse_exp_1()  :  wrapper.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_restrict_to_objfile_by_name()  :  objfiles.c
<item>make_cleanup_restrict_to_shlib()  :  objfiles.c
<item>mention()  :  breakpoint.c
<item>objfile_name_set_load_state()  :  objfiles.c
<item>parse_exp_1()  :  parse.c
<item>printf_filtered()  :  utils.c
<item>release_value()  :  value.c
<item>resolve_sal_pc()  :  breakpoint.c
<item>savestring()  :  utils.c
<item>set_bp_objfile()  :  breakpoint.c
<item>set_language()  :  language.c
<item>value_fetch_lazy()  :  valops.c
<item>value_free()  :  value.c
<item>value_free_to_mark()  :  value.c
<item>value_lazy()  :  value.c
<item>value_mark()  :  value.c
<item>warning()  :  utils.c
<item>xfree()  :  utils.c
<item>breakpoints_changed(), deprecated_modify_breakpoint_hook(), strcmp(), strlen()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>breakpoint_re_set_all()  :  breakpoint.c
<item>breakpoint_update()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>null_cleanup()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>deprecated_modify_breakpoint_hook  :  top.c
<item>innermost_block  :  parse.c
<item>input_radix  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function breakpoint_sals_to_pc()

<p><tt>static void breakpoint_sals_to_pc ( struct symtabs_and_lines* sals, const char* address )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>resolve_sal_pc()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_captured_breakpoint()  :  breakpoint.c
<item>wrap_breakpoint_sals_to_pc()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function breakpoints_info()

<p><tt>static void breakpoints_info ( const char* bnum_exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_1()  :  breakpoint.c
<item>parse_and_eval_long()  :  eval.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function can_use_hardware_watchpoint()

<p><tt>static int can_use_hardware_watchpoint ( struct value* v )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>deprecated_value_modifiable()  :  value.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_lazy()  :  value.c
<item>value_next()  :  value.c
<item>value_offset()  :  value.c
<item>value_type()  :  value.c
<item>warning()  :  utils.c
<item>i386_region_ok_for_watchpoint()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_enable_breakpoint()  :  breakpoint.c
<item>watch_command_1()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>can_use_hw_watchpoints  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function catch_command()

<p><tt>static void catch_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>catch_command_1()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function catch_command_1()

<p><tt>static void catch_command_1 ( const char* arg, int tempflag, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>catch_exception_command_1()  :  breakpoint.c
<item>catch_exec_command_1()  :  breakpoint.c
<item>catch_fork_command_1()  :  breakpoint.c
<item>catch_load_command_1()  :  breakpoint.c
<item>catch_unload_command_1()  :  breakpoint.c
<item>ep_find_event_name_end()  :  breakpoint.c
<item>error()  :  utils.c
<item>strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>catch_command()  :  breakpoint.c
<item>tcatch_command()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>exception_catchpoint_catch_enabled  :  breakpoint.c
<item>exception_catchpoint_throw_enabled  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function catch_exception_command_1()

<p><tt>static void catch_exception_command_1 ( enum exception_event_kind ex_event, const char* arg, int tempflag, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ep_parse_optional_if_clause()  :  breakpoint.c
<item>ep_skip_leading_whitespace()  :  breakpoint.c
<item>error()  :  utils.c
<item>gnu_v3_update_exception_catchpoints()  :  breakpoint.c
<item>handle_gnu_v3_exceptions()  :  breakpoint.c
<item>update_exception_catchpoints()  :  breakpoint.c
<item>warning()  :  utils.c
<item>isspace()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>catch_command_1()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function catch_exec_command_1()

<p><tt>static void catch_exec_command_1 ( const char* arg, int tempflag, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>create_exec_event_catchpoint()  :  breakpoint.c
<item>ep_parse_optional_if_clause()  :  breakpoint.c
<item>ep_skip_leading_whitespace()  :  breakpoint.c
<item>error()  :  utils.c
<item>isspace()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>catch_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function catch_fork_command_1()

<p><tt>static void catch_fork_command_1 ( catch_fork_kind fork_kind, const char* arg, int tempflag, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>create_fork_event_catchpoint()  :  breakpoint.c
<item>create_vfork_event_catchpoint()  :  breakpoint.c
<item>ep_parse_optional_if_clause()  :  breakpoint.c
<item>ep_skip_leading_whitespace()  :  breakpoint.c
<item>error()  :  utils.c
<item>isspace()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>catch_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function catch_load_command_1()

<p><tt>static void catch_load_command_1 ( const char* arg, int tempflag, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ep_parse_optional_filename()  :  breakpoint.c
<item>ep_parse_optional_if_clause()  :  breakpoint.c
<item>ep_skip_leading_whitespace()  :  breakpoint.c
<item>error()  :  utils.c
<item>internal_error()  :  utils.c
<item>warning()  :  utils.c
<item>isspace()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>catch_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function catch_unload_command_1()

<p><tt>static void catch_unload_command_1 ( const char* arg, int tempflag, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ep_parse_optional_filename()  :  breakpoint.c
<item>ep_parse_optional_if_clause()  :  breakpoint.c
<item>ep_skip_leading_whitespace()  :  breakpoint.c
<item>error()  :  utils.c
<item>internal_error()  :  utils.c
<item>warning()  :  utils.c
<item>isspace()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>catch_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function check_duplicates()

<p><tt>static void check_duplicates ( struct breakpoint* bpt )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_address_is_meaningful()  :  breakpoint.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>delete_breakpoint()  :  breakpoint.c
<item>disable_breakpoint()  :  breakpoint.c
<item>disable_longjmp_breakpoint()  :  breakpoint.c
<item>disable_overlay_breakpoints()  :  breakpoint.c
<item>disable_user_breakpoints_before_operation()  :  breakpoint.c
<item>disable_watchpoints_before_interactive_call_start()  :  breakpoint.c
<item>do_enable_breakpoint()  :  breakpoint.c
<item>enable_longjmp_breakpoint()  :  breakpoint.c
<item>enable_overlay_breakpoints()  :  breakpoint.c
<item>enable_user_breakpoints_after_operation()  :  breakpoint.c
<item>enable_watchpoints_after_interactive_call_stop()  :  breakpoint.c
<item>set_longjmp_resume_breakpoint()  :  breakpoint.c
<item>set_raw_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>bp_location_chain  :  breakpoint.c
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function cleanup_executing_breakpoints()

<p><tt>static void cleanup_executing_breakpoints ( void* ignore )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>bpstat_do_actions()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>executing_breakpoint_commands  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function clear_command()

<p><tt>static void clear_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>decode_line_spec()  :  symtab.c
<item>delete_breakpoint()  :  breakpoint.c
<item>error()  :  utils.c
<item>init_sal()  :  symtab.c
<item>make_cleanup()  :  utils.c
<item>printf_unfiltered()  :  utils.c
<item>putchar_unfiltered()  :  utils.c
<item>section_is_overlay()  :  symfile.c
<item>xmalloc()  :  utils.c
<item>breakpoints_changed(), strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>default_breakpoint_address  :  breakpoint.c
<item>default_breakpoint_line  :  breakpoint.c
<item>default_breakpoint_symtab  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function clear_new_breakpoint_list()

<p><tt>static void clear_new_breakpoint_list ( struct breakpoint_list* new_breakpoints )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdb_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function commands_command()

<p><tt>static void commands_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>get_number()  :  breakpoint.c
<item>make_cleanup()  :  utils.c
<item>xstrprintf()  :  utils.c
<item>breakpoint_modify_event(), breakpoints_changed(), free_command_lines(), read_command_lines()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>executing_breakpoint_commands  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function condition_command()

<p><tt>static void condition_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>condition_command_1()  :  breakpoint.c
<item>error()  :  utils.c
<item>get_number()  :  breakpoint.c
<item>breakpoint_modify_event(), breakpoints_changed(), error_no_arg()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function condition_command_1()

<p><tt>static void condition_command_1 ( struct breakpoint* b, const char* condition, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_for_pc()  :  block.c
<item>error()  :  utils.c
<item>gdb_parse_exp_1()  :  wrapper.c
<item>printf_filtered()  :  utils.c
<item>savestring()  :  utils.c
<item>xfree()  :  utils.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>condition_command()  :  breakpoint.c
<item>gdb_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function cover_target_enable_exception_callback()

<p><tt>static int cover_target_enable_exception_callback ( void* arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>delete_breakpoint()  :  breakpoint.c
<item>insert_bp_location()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function create_breakpoints()

<p><tt>static void create_breakpoints ( struct symtabs_and_lines sals, char** addr_string, struct expression** cond, char** cond_string, char* requested_shlib, enum bptype type, enum bpdisp disposition, int thread, int ignore_count, int from_tty, struct breakpoint* pending_bp, struct breakpoint_list** new_breakpoints )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>add_breakpoint_to_new_list()  :  breakpoint.c
<item>block_for_pc()  :  block.c
<item>check_for_additional_inlined_breakpoint_locations()  :  inlining.c
<item>create_breakpoints()  :  breakpoint.c
<item>describe_other_breakpoints()  :  breakpoint.c
<item>error()  :  utils.c
<item>gdb_parse_exp_1()  :  wrapper.c
<item>hw_breakpoint_used_count()  :  breakpoint.c
<item>mention()  :  breakpoint.c
<item>paddr()  :  utils.c
<item>remove_duplicate_sals()  :  breakpoint.c
<item>savestring()  :  utils.c
<item>set_bp_objfile()  :  breakpoint.c
<item>set_breakpoint_count()  :  breakpoint.c
<item>set_raw_breakpoint()  :  breakpoint.c
<item>warning()  :  utils.c
<item>xfree()  :  utils.c
<item>xstrprintf()  :  utils.c
<item>breakpoint_resolve_event(), copy_command_lines(), strlen(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
<item>create_breakpoints()  :  breakpoint.c
<item>do_captured_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>breakpoint_count  :  breakpoint.c
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function create_fork_vfork_event_catchpoint()

<p><tt>static void create_fork_vfork_event_catchpoint ( int tempflag, const char* cond_string, enum bptype bp_kind )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>init_sal()  :  symtab.c
<item>mention()  :  breakpoint.c
<item>savestring()  :  utils.c
<item>set_breakpoint_count()  :  breakpoint.c
<item>set_raw_breakpoint()  :  breakpoint.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_fork_event_catchpoint()  :  breakpoint.c
<item>create_vfork_event_catchpoint()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_count  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function create_internal_breakpoint()

<p><tt>static struct breakpoint* create_internal_breakpoint ( CORE_ADDR address, enum bptype type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>find_pc_overlay()  :  symfile.c
<item>init_sal()  :  symtab.c
<item>set_raw_breakpoint()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_longjmp_breakpoint()  :  breakpoint.c
<item>create_objc_hook_breakpoint()  :  breakpoint.c
<item>create_overlay_event_breakpoint()  :  breakpoint.c
<item>create_solib_event_breakpoint()  :  breakpoint.c
<item>create_thread_event_breakpoint()  :  breakpoint.c
<item>watch_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function create_longjmp_breakpoint()

<p><tt>static void create_longjmp_breakpoint ( const char* func_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_internal_breakpoint()  :  breakpoint.c
<item>lookup_minimal_symbol_text()  :  minsyms.c
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_re_set_all()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function create_overlay_event_breakpoint()

<p><tt>static void create_overlay_event_breakpoint ( const char* func_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_internal_breakpoint()  :  breakpoint.c
<item>lookup_minimal_symbol_text()  :  minsyms.c
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>update_breakpoints_after_exec()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>overlay_debugging  :  symfile.c
<item>overlay_events_enabled  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function current_exception_should_stop()

<p><tt>static int current_exception_should_stop ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>re_comp()  :  utils.c
<item>re_exec()  :  utils.c
<item>re_set_syntax()  :  utils.c
<item>warning()  :  utils.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_exception_event  :  breakpoint.c
<item>exception_catch_type_regexp  :  breakpoint.c
<item>exception_throw_type_regexp  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function describe_other_breakpoints()

<p><tt>static void describe_other_breakpoints ( CORE_ADDR pc, asection* section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_address_is_meaningful()  :  breakpoint.c
<item>deprecated_print_address_numeric()  :  printcmd.c
<item>printf_filtered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_breakpoints()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>gdb_stdout  :  main.c
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Local Function disable_command()

<p><tt>static void disable_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>disable_breakpoint()  :  breakpoint.c
<item>map_breakpoint_numbers()  :  breakpoint.c
<item>warning()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>disable_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function disable_user_breakpoints_before_operation()

<p><tt>static void disable_user_breakpoints_before_operation ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_enabled()  :  breakpoint.c
<item>check_duplicates()  :  breakpoint.c
<item>is_objc_exception_throw_breakpoint()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_cleanup_enable_disable_bpts_during_operation()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function do_captured_breakpoint()

<p><tt>static int do_captured_breakpoint ( struct ui_out* uiout, void* data )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>block_for_pc()  :  block.c
<item>breakpoint_sals_to_pc()  :  breakpoint.c
<item>create_breakpoints()  :  breakpoint.c
<item>discard_cleanups()  :  utils.c
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>parse_breakpoint_sals()  :  breakpoint.c
<item>parse_exp_1()  :  parse.c
<item>remove_duplicates()  :  breakpoint.c
<item>xcalloc()  :  utils.c
<item>xstrdup()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>fsf_gdb_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>null_cleanup()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function do_captured_breakpoint_query()

<p><tt>static int do_captured_breakpoint_query ( struct ui_out* uiout, void* data )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>print_one_breakpoint()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdb_breakpoint_query()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function do_captured_parse_breakpoint()

<p><tt>static void do_captured_parse_breakpoint ( struct ui_out* ui, void* data )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>parse_breakpoint_sals()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function do_delete_breakpoint_cleanup()

<p><tt>static void do_delete_breakpoint_cleanup ( void* b )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>delete_breakpoint()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_delete_breakpoint()  :  breakpoint.c
<item>make_exec_cleanup_delete_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function do_enable_breakpoint()

<p><tt>static void do_enable_breakpoint ( struct breakpoint* bpt, enum bpdisp disposition )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>can_use_hardware_watchpoint()  :  breakpoint.c
<item>check_duplicates()  :  breakpoint.c
<item>error()  :  utils.c
<item>evaluate_expression()  :  eval.c
<item>frame_find_by_id()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>get_selected_frame()  :  frame.c
<item>hw_breakpoint_used_count()  :  breakpoint.c
<item>hw_watchpoint_used_count()  :  breakpoint.c
<item>printf_filtered()  :  utils.c
<item>release_value()  :  value.c
<item>resolve_pending_breakpoint()  :  breakpoint.c
<item>select_frame()  :  frame.c
<item>value_fetch_lazy()  :  valops.c
<item>value_free()  :  value.c
<item>value_free_to_mark()  :  value.c
<item>value_lazy()  :  value.c
<item>value_mark()  :  value.c
<item>breakpoint_modify_event(), breakpoints_changed(), deprecated_modify_breakpoint_hook()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>enable_breakpoint()  :  breakpoint.c
<item>enable_delete_breakpoint()  :  breakpoint.c
<item>enable_once_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>deprecated_modify_breakpoint_hook  :  top.c
</itemize>
</descrip>

<sect1>Local Function do_restore_lang_radix_cleanup()

<p><tt>static void do_restore_lang_radix_cleanup ( void* old )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>set_language()  :  language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>resolve_pending_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>input_radix  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function enable_command()

<p><tt>static void enable_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>enable_breakpoint()  :  breakpoint.c
<item>map_breakpoint_numbers()  :  breakpoint.c
<item>warning()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>enable_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function enable_delete_breakpoint()

<p><tt>static void enable_delete_breakpoint ( struct breakpoint* bpt )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_enable_breakpoint()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>enable_delete_command()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function enable_delete_command()

<p><tt>static void enable_delete_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>map_breakpoint_numbers()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>enable_delete_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function enable_once_breakpoint()

<p><tt>static void enable_once_breakpoint ( struct breakpoint* bpt )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_enable_breakpoint()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>enable_once_command()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function enable_once_command()

<p><tt>static void enable_once_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>map_breakpoint_numbers()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>enable_once_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function ep_find_event_name_end()

<p><tt>static const char* ep_find_event_name_end ( const char* arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>isalnum()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>catch_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function ep_parse_optional_filename()

<p><tt>static char* ep_parse_optional_filename ( const char** arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>isspace()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>catch_load_command_1()  :  breakpoint.c
<item>catch_unload_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function ep_parse_optional_if_clause()

<p><tt>static const char* ep_parse_optional_if_clause ( const char** arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ep_skip_leading_whitespace()  :  breakpoint.c
<item>isspace(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>catch_exception_command_1()  :  breakpoint.c
<item>catch_exec_command_1()  :  breakpoint.c
<item>catch_fork_command_1()  :  breakpoint.c
<item>catch_load_command_1()  :  breakpoint.c
<item>catch_unload_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function ep_skip_leading_whitespace()

<p><tt>static void ep_skip_leading_whitespace ( const char** s )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>isspace()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>catch_exception_command_1()  :  breakpoint.c
<item>catch_exec_command_1()  :  breakpoint.c
<item>catch_fork_command_1()  :  breakpoint.c
<item>catch_load_command_1()  :  breakpoint.c
<item>catch_unload_command_1()  :  breakpoint.c
<item>ep_parse_optional_if_clause()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function free_valchain()

<p><tt>static void free_valchain ( struct bp_location* b )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>value_free()  :  value.c
<item>value_next()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>delete_breakpoint()  :  breakpoint.c
<item>insert_bp_location()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function get_number_trailer()

<p><tt>static int get_number_trailer ( const char** pp, int trailer )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>lookup_internalvar()  :  value.c
<item>printf_filtered()  :  utils.c
<item>value_as_long()  :  value.c
<item>value_of_internalvar()  :  value.c
<item>value_type()  :  value.c
<item>__builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strncpy_chk(), atoi(), isalnum(), isspace()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_number()  :  breakpoint.c
<item>get_number_or_range()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_count  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function hbreak_command()

<p><tt>static void hbreak_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>break_command_1()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function hw_breakpoint_used_count()

<p><tt>static int hw_breakpoint_used_count ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_breakpoints()  :  breakpoint.c
<item>do_enable_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function hw_watchpoint_used_count()

<p><tt>static int hw_watchpoint_used_count ( enum bptype type, int* other_type_used )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_enabled()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_enable_breakpoint()  :  breakpoint.c
<item>watch_command_1()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function ignore_command()

<p><tt>static void ignore_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>get_number()  :  breakpoint.c
<item>longest_to_int()  :  valprint.c
<item>parse_and_eval()  :  eval.c
<item>printf_filtered()  :  utils.c
<item>set_ignore_count()  :  breakpoint.c
<item>value_as_long()  :  value.c
<item>error_no_arg()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function insert_bp_location()

<p><tt>static int insert_bp_location ( struct bp_location* bpt, struct ui_file* tmp_error_stream, int* disabled_breaks, int* process_warning, int* hw_breakpoint_error )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_enabled()  :  breakpoint.c
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_print_address_numeric()  :  printcmd.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>do_cleanups()  :  utils.c
<item>ep_is_exception_catchpoint()  :  breakpoint.c
<item>evaluate_expression()  :  eval.c
<item>fprintf_filtered()  :  utils.c
<item>fprintf_unfiltered()  :  utils.c
<item>frame_find_by_id()  :  frame.c
<item>free_valchain()  :  breakpoint.c
<item>get_frame_id()  :  frame.c
<item>make_cleanup()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>overlay_unmapped_address()  :  symfile.c
<item>printf_filtered()  :  utils.c
<item>remove_breakpoint()  :  breakpoint.c
<item>safe_strerror()  :  utils.c
<item>section_is_mapped()  :  symfile.c
<item>section_is_overlay()  :  symfile.c
<item>select_frame()  :  frame.c
<item>value_contents()  :  value.c
<item>value_lazy()  :  value.c
<item>value_mark()  :  value.c
<item>value_next()  :  value.c
<item>value_offset()  :  value.c
<item>value_release_to_mark()  :  value.c
<item>value_type()  :  value.c
<item>warning()  :  utils.c
<item>xstrprintf()  :  utils.c
<item>catch_errors(), catch_exception(), exception_fprintf()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>insert_breakpoints()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>cover_target_enable_exception_callback()  :  breakpoint.c
<item>insert_catchpoint()  :  breakpoint.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>deprecated_selected_frame  :  frame.c
<item>gdb_stderr  :  main.c
<item>overlay_debugging  :  symfile.c
<item>overlay_events_enabled  :  breakpoint.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function insert_catchpoint()

<p><tt>static void insert_catchpoint ( struct ui_out* uo, void* args )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>ptid_get_pid()  :  infrun.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>insert_bp_location()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function maintenance_info_breakpoints()

<p><tt>static void maintenance_info_breakpoints ( const char* bnum_exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_1()  :  breakpoint.c
<item>parse_and_eval_long()  :  eval.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function map_breakpoint_numbers()

<p><tt>static void map_breakpoint_numbers ( const char* args, void (*function)(struct breakpoint*) )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_number_or_range()  :  breakpoint.c
<item>printf_unfiltered()  :  utils.c
<item>warning()  :  utils.c
<item>error_no_arg()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>delete_command()  :  breakpoint.c
<item>disable_command()  :  breakpoint.c
<item>enable_command()  :  breakpoint.c
<item>enable_delete_command()  :  breakpoint.c
<item>enable_once_command()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function mention()

<p><tt>static void mention ( struct breakpoint* b )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_print_address_numeric()  :  printcmd.c
<item>do_cleanups()  :  utils.c
<item>gdb_print_expression()  :  wrapper.c
<item>internal_error()  :  utils.c
<item>make_cleanup_ui_out_stream_delete()  :  ui-out.c
<item>make_cleanup_ui_out_tuple_begin_end()  :  ui-out.c
<item>printf_filtered()  :  utils.c
<item>ui_out_field_int()  :  ui-out.c
<item>ui_out_field_stream()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
<item>ui_out_stream_new()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>breakpoint_create_event(), deprecated_create_breakpoint_hook()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>create_breakpoints()  :  breakpoint.c
<item>create_exception_catchpoint()  :  breakpoint.c
<item>create_exec_event_catchpoint()  :  breakpoint.c
<item>create_fork_vfork_event_catchpoint()  :  breakpoint.c
<item>print_it_typical()  :  breakpoint.c
<item>solib_load_unload_1()  :  breakpoint.c
<item>watch_command_1()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>addressprint  :  valprint.c
<item>deprecated_create_breakpoint_hook  :  top.c
<item>dont_mention  :  breakpoint.c
<item>gdb_stdout  :  main.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function parse_breakpoint_sals()

<p><tt>static void parse_breakpoint_sals ( const char** address, struct symtabs_and_lines* sals, char*** addr_string, char* requested_shlib, int* not_found_ptr )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>decode_line_1()  :  linespec.c
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>find_pc_overlay()  :  symfile.c
<item>get_current_source_symtab_and_line()  :  source.c
<item>init_sal()  :  symtab.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_restrict_to_shlib()  :  objfiles.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>objfile_set_load_state()  :  objfiles.c
<item>paddr_u()  :  utils.c
<item>savestring()  :  utils.c
<item>xcalloc()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___snprintf_chk(), __builtin_object_size(), isspace(), strchr(), strlen(), strncmp(), throw_error()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_captured_breakpoint()  :  breakpoint.c
<item>do_captured_parse_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>null_cleanup()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>default_breakpoint_address  :  breakpoint.c
<item>default_breakpoint_line  :  breakpoint.c
<item>default_breakpoint_symtab  :  breakpoint.c
<item>default_breakpoint_valid  :  breakpoint.c
<item>pending_break_support  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function print_bp_stop_message()

<p><tt>static enum print_stop_action print_bp_stop_message ( bpstat bs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>print_it_typical()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_print()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function print_catch_info()

<p><tt>static void print_catch_info ( struct breakpoint* b )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ui_out_field_int()  :  ui-out.c
<item>ui_out_field_skip()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_exception_catchpoint()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_exception_event  :  breakpoint.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function print_exception_catchpoint()

<p><tt>static enum print_stop_action print_exception_catchpoint ( struct breakpoint* b )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>print_catch_info()  :  breakpoint.c
<item>printf_filtered()  :  utils.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
<item>ui_out_print_annotation_string()  :  ui-out.c
<item>annotate_catchpoint()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_it_typical()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_exception_event  :  breakpoint.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function print_it_typical()

<p><tt>static enum print_stop_action print_it_typical ( bpstat bs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_adjustment_warning()  :  breakpoint.c
<item>do_cleanups()  :  utils.c
<item>make_cleanup_ui_out_stream_delete()  :  ui-out.c
<item>make_cleanup_ui_out_tuple_begin_end()  :  ui-out.c
<item>mention()  :  breakpoint.c
<item>print_exception_catchpoint()  :  breakpoint.c
<item>printf_filtered()  :  utils.c
<item>ui_out_field_stream()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
<item>ui_out_print_annotation_int()  :  ui-out.c
<item>ui_out_print_annotation_string()  :  ui-out.c
<item>ui_out_stream_new()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>value_free()  :  value.c
<item>value_print()  :  valprint.c
<item>annotate_breakpoint(), annotate_catchpoint(), annotate_watchpoint(), async_reason_lookup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_bp_stop_message()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function print_mention_exception_catchpoint()

<p><tt>static void print_mention_exception_catchpoint ( struct breakpoint* b )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>printf_filtered()  :  utils.c
<item>strstr()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
</descrip>

<sect1>Local Function print_one_breakpoint()

<p><tt>static void print_one_breakpoint ( struct breakpoint* b, CORE_ADDR* last_addr )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>ep_is_catchpoint()  :  breakpoint.c
<item>find_pc_sect_function()  :  blockframe.c
<item>frame_id_p()  :  frame.c
<item>gdb_print_expression()  :  wrapper.c
<item>gdbarch_addr_bit()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>make_cleanup_ui_out_stream_delete()  :  ui-out.c
<item>make_cleanup_ui_out_tuple_begin_end()  :  ui-out.c
<item>print_address_symbolic()  :  printcmd.c
<item>print_one_exception_catchpoint()  :  breakpoint.c
<item>symbol_natural_name()  :  symtab.c
<item>ui_out_field_core_addr()  :  ui-out.c
<item>ui_out_field_fmt()  :  ui-out.c
<item>ui_out_field_int()  :  ui-out.c
<item>ui_out_field_skip()  :  ui-out.c
<item>ui_out_field_stream()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
<item>ui_out_spaces()  :  ui-out.c
<item>ui_out_stream_new()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>ui_out_wrap_hint()  :  ui-out.c
<item>__builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), annotate_field(), annotate_record(), print_command_lines()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_1()  :  breakpoint.c
<item>do_captured_breakpoint_query()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>addressprint  :  valprint.c
<item>current_gdbarch  :  gdbarch.c
<item>demangle  :  utils.c
<item>gdb_null  :  main.c
<item>gdb_stderr  :  main.c
<item>show_breakpoint_hit_counts  :  breakpoint.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function print_one_exception_catchpoint()

<p><tt>static void print_one_exception_catchpoint ( struct breakpoint* b, CORE_ADDR* last_addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>ui_out_field_core_addr()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_spaces()  :  ui-out.c
<item>annotate_field()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_one_breakpoint()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>addressprint  :  valprint.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function remove_breakpoint()

<p><tt>static int remove_breakpoint ( struct bp_location* b, insertion_state_t is )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_enabled()  :  breakpoint.c
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>ep_is_exception_catchpoint()  :  breakpoint.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>overlay_unmapped_address()  :  symfile.c
<item>ptid_get_pid()  :  infrun.c
<item>section_is_overlay()  :  symfile.c
<item>value_lazy()  :  value.c
<item>value_next()  :  value.c
<item>value_offset()  :  value.c
<item>value_type()  :  value.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>delete_breakpoint()  :  breakpoint.c
<item>detach_breakpoints()  :  breakpoint.c
<item>insert_bp_location()  :  breakpoint.c
<item>reattach_breakpoints()  :  breakpoint.c
<item>remove_breakpoints()  :  breakpoint.c
<item>remove_hw_watchpoints()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>inferior_ptid  :  infcmd.c
<item>overlay_debugging  :  symfile.c
<item>overlay_events_enabled  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function remove_duplicates()

<p><tt>static void remove_duplicates ( struct symtabs_and_lines* sals )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
<item>do_captured_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function remove_non_msymbol_sals()

<p><tt>static void remove_non_msymbol_sals ( struct symtabs_and_lines* sals )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function resolve_pending_breakpoint()

<p><tt>static int resolve_pending_breakpoint ( struct breakpoint* b )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
<item>delete_breakpoint()  :  breakpoint.c
<item>do_cleanups()  :  utils.c
<item>find_objfile_by_name()  :  objfiles.c
<item>make_cleanup()  :  utils.c
<item>printf_filtered()  :  utils.c
<item>set_language()  :  language.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_enable_breakpoint()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>re_enable_breakpoints_in_shlibs()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_restore_lang_radix_cleanup()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
<item>input_radix  :  valprint.c
</itemize>
</descrip>

<sect1>Local Function restore_saved_pending_break_support()

<p><tt>static void restore_saved_pending_break_support ( void* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>future_break_command()  :  breakpoint.c
<item>gdb_breakpoint()  :  breakpoint.c
<item>rbr_break_command()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>pending_break_support  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function restrict_search_cleanup()

<p><tt>static void restrict_search_cleanup ( void* ignored )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>objfile_clear_restrict_list()  :  objfiles.c
<item>objfile_restrict_search()  :  objfiles.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>breakpoint_update()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function rwatch_command()

<p><tt>static void rwatch_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>detect_location_arg()  :  breakpoint.c
<item>watch_command_1()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function safe_breakpoint_sals_to_pc()

<p><tt>static int safe_breakpoint_sals_to_pc ( struct symtabs_and_lines* sals, const char* address )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>catch_errors()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>wrap_breakpoint_sals_to_pc()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function save_breakpoints_command()

<p><tt>static void save_breakpoints_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>cli_out_new()  :  cli-out.c
<item>do_cleanups()  :  utils.c
<item>dont_repeat()  :  top.c
<item>error()  :  utils.c
<item>fprintf_unfiltered()  :  utils.c
<item>fputc_unfiltered()  :  utils.c
<item>fputs_unfiltered()  :  ui-file.c
<item>gdb_fopen()  :  ui-file.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_freeargv()  :  utils.c
<item>make_cleanup_ui_file_delete()  :  utils.c
<item>make_cleanup_ui_out_delete()  :  utils.c
<item>nomem()  :  utils.c
<item>printf_filtered()  :  utils.c
<item>safe_strerror()  :  utils.c
<item>write_one_breakpoint()  :  breakpoint.c
<item>xmalloc()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __error(), __inline_strcpy_chk(), buildargv(), localtime(), setlocale(), strftime(), strlen(), tilde_expand(), time()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function set_bp_objfile()

<p><tt>static void set_bp_objfile ( struct breakpoint* b, struct symtab_and_line* sal )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_sect_section()  :  objfiles.c
<item>find_pc_section()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>create_breakpoints()  :  breakpoint.c
<item>set_raw_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function set_breakpoint_cmd()

<p><tt>static void set_breakpoint_cmd ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function show_breakpoint_cmd()

<p><tt>static void show_breakpoint_cmd ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function show_can_use_hw_watchpoints()

<p><tt>static void show_can_use_hw_watchpoints ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function show_pending_break_support()

<p><tt>static void show_pending_break_support ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function solib_load_unload_1()

<p><tt>static void solib_load_unload_1 ( const char* hookname, int tempflag, char* dll_pathname, char* cond_string, enum bptype bp_kind )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>decode_line_1()  :  linespec.c
<item>discard_cleanups()  :  utils.c
<item>do_cleanups()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>mention()  :  breakpoint.c
<item>resolve_sal_pc()  :  breakpoint.c
<item>savestring()  :  utils.c
<item>set_breakpoint_count()  :  breakpoint.c
<item>set_raw_breakpoint()  :  breakpoint.c
<item>warning()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_solib_load_event_breakpoint()  :  breakpoint.c
<item>create_solib_unload_event_breakpoint()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>null_cleanup()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_count  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function stop_command()

<p><tt>static void stop_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>printf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function stopat_command()

<p><tt>static void stopat_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>break_command_1()  :  breakpoint.c
<item>printf_filtered()  :  utils.c
<item>isdigit()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function stopin_command()

<p><tt>static void stopin_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>break_command_1()  :  breakpoint.c
<item>printf_filtered()  :  utils.c
<item>isdigit()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function tcatch_command()

<p><tt>static void tcatch_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>catch_command_1()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function tell_breakpoints_objfile_changed_internal()

<p><tt>static void tell_breakpoints_objfile_changed_internal ( struct objfile* objfile, int set_pending )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>bundle_basename()  :  utils.c
<item>lbasename(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>tell_breakpoints_objfile_changed()  :  breakpoint.c
<item>tell_breakpoints_objfile_removed()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_chain  :  breakpoint.c
<item>breakpoint_generation  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function thbreak_command()

<p><tt>static void thbreak_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>break_command_1()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function until_break_command_continuation()

<p><tt>static void until_break_command_continuation ( struct continuation_arg* arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_exec_cleanups()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>until_break_command()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function user_settable_breakpoint()

<p><tt>static int user_settable_breakpoint ( const struct breakpoint* b )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_1()  :  breakpoint.c
<item>breakpoint_re_set_all()  :  breakpoint.c
<item>breakpoint_update()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function watch_command()

<p><tt>static void watch_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>detect_location_arg()  :  breakpoint.c
<item>watch_command_1()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function watch_command_1()

<p><tt>static void watch_command_1 ( const char* arg, int accessflag, int by_location, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>adjust_breakpoint_address()  :  breakpoint.c
<item>block_innermost_frame()  :  blockframe.c
<item>can_use_hardware_watchpoint()  :  breakpoint.c
<item>create_internal_breakpoint()  :  breakpoint.c
<item>error()  :  utils.c
<item>evaluate_expression()  :  eval.c
<item>get_frame_id()  :  frame.c
<item>get_frame_pc()  :  frame.c
<item>get_prev_frame()  :  frame.c
<item>hw_watchpoint_used_count()  :  breakpoint.c
<item>init_sal()  :  symtab.c
<item>internal_error()  :  utils.c
<item>mention()  :  breakpoint.c
<item>paddr_nz()  :  utils.c
<item>parse_exp_1()  :  parse.c
<item>release_value()  :  value.c
<item>savestring()  :  utils.c
<item>set_breakpoint_count()  :  breakpoint.c
<item>set_raw_breakpoint()  :  breakpoint.c
<item>type_sprint_quoted()  :  typeprint.c
<item>value_addr()  :  valops.c
<item>value_as_address()  :  value.c
<item>value_fetch_lazy()  :  valops.c
<item>value_free_to_mark()  :  value.c
<item>value_lazy()  :  value.c
<item>value_mark()  :  value.c
<item>value_type()  :  value.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin___snprintf_chk(), __builtin_object_size(), __inline_memset_chk(), strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>awatch_command()  :  breakpoint.c
<item>awatch_command_wrapper()  :  breakpoint.c
<item>rwatch_command()  :  breakpoint.c
<item>rwatch_command_wrapper()  :  breakpoint.c
<item>watch_command()  :  breakpoint.c
<item>watch_command_wrapper()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>breakpoint_count  :  breakpoint.c
<item>current_target  :  target/target.c
<item>innermost_block  :  parse.c
</itemize>
</descrip>

<sect1>Local Function watchpoint_check()

<p><tt>static int watchpoint_check ( void* p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>evaluate_expression()  :  eval.c
<item>frame_find_by_id()  :  frame.c
<item>gdbarch_in_function_epilogue_p()  :  gdbarch.c
<item>get_current_frame()  :  frame.c
<item>read_pc()  :  regcache.c
<item>reinit_frame_cache()  :  frame.c
<item>release_value()  :  value.c
<item>select_frame()  :  frame.c
<item>ui_out_field_int()  :  ui-out.c
<item>ui_out_print_annotation_string()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>value_free_to_mark()  :  value.c
<item>value_mark()  :  value.c
<item>watchpoint_equal()  :  breakpoint.c
<item>async_reason_lookup()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function watchpoint_equal()

<p><tt>static int watchpoint_equal ( struct value* arg1, struct value* arg2 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_contents()  :  value.c
<item>value_equal()  :  valarith.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>watchpoint_check()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function wrap_breakpoint_sals_to_pc()

<p><tt>static int wrap_breakpoint_sals_to_pc ( char* a )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_sals_to_pc()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>safe_breakpoint_sals_to_pc()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function write_one_breakpoint()

<p><tt>static void write_one_breakpoint ( struct breakpoint* b, struct ui_file* stream, struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>fputc_unfiltered()  :  utils.c
<item>fputs_unfiltered()  :  ui-file.c
<item>hex_string_custom()  :  utils.c
<item>internal_error()  :  utils.c
<item>print_command_lines(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>save_breakpoints_command()  :  breakpoint.c
</itemize>
</descrip>

</article>
