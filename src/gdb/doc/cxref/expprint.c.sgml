<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF expprint.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for expprint.c of gdb.cxref.
<author>cxref

<sect>File expprint.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;parser-defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;user-regs.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>

<sect1>Global Function dump_prefix_expression()

<p><tt>void dump_prefix_expression ( struct expression* exp, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>expression.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dump_subexp()  :  expprint.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>gdb_print_host_address()  :  utils.c
<item>print_expression()  :  expprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_exp_in_context()  :  parse.c
</itemize>
</descrip>

<sect1>Global Function dump_raw_expression()

<p><tt>void dump_raw_expression ( struct expression* exp, struct ui_file* stream, const char* note )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>expression.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>gdb_print_host_address()  :  utils.c
<item>op_name()  :  expprint.c
<item>print_longest()  :  valprint.c
<item>isprint()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_exp_in_context()  :  parse.c
</itemize>
</descrip>

<sect1>Global Function dump_subexp()

<p><tt>int dump_subexp ( struct expression* exp, struct ui_file* stream, int elt )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dump_subexp_body()  :  expprint.c
<item>fprintf_filtered()  :  utils.c
<item>op_name()  :  expprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_dump_subexp_body()  :  ada-lang.c
<item>dump_prefix_expression()  :  expprint.c
<item>dump_subexp_body_standard()  :  expprint.c
</itemize>
</descrip>

<sect1>Global Function dump_subexp_body_standard()

<p><tt>int dump_subexp_body_standard ( struct expression* exp, struct ui_file* stream, int elt )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dump_subexp()  :  expprint.c
<item>fprintf_filtered()  :  utils.c
<item>gdb_print_host_address()  :  utils.c
<item>longest_to_int()  :  valprint.c
<item>type_print()  :  typeprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_dump_subexp_body()  :  ada-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>jv-lang.c
<item>parse.c
<item>scm-lang.c
</itemize>
</descrip>

<sect1>Global Function op_name_standard()

<p><tt>const char* op_name_standard ( enum exp_opcode opcode )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>__builtin___snprintf_chk(), __builtin_object_size()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_op_name()  :  ada-lang.c
<item>value_binop()  :  valarith.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>jv-lang.c
<item>parse.c
<item>scm-lang.c
</itemize>
</descrip>

<sect1>Global Function op_string()

<p><tt>const char* op_string ( enum exp_opcode op )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>expression.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_binop()  :  ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Global Function print_expression()

<p><tt>void print_expression ( struct expression* exp, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>expression.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>print_subexp()  :  expprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>display_info()  :  printcmd.c
<item>do_one_display()  :  printcmd.c
<item>dump_prefix_expression()  :  expprint.c
<item>gdb_print_expression()  :  wrapper.c
</itemize>
</descrip>

<sect1>Global Function print_subexp()

<p><tt>void print_subexp ( struct expression* exp, int* pos, struct ui_file* stream, enum precedence prec )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_subexp()  :  ada-lang.c
<item>print_expression()  :  expprint.c
<item>print_subexp_standard()  :  expprint.c
</itemize>
</descrip>

<sect1>Global Function print_subexp_standard()

<p><tt>void print_subexp_standard ( struct expression* exp, int* pos, struct ui_file* stream, enum precedence prec )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>parser-defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>fprintf_filtered()  :  utils.c
<item>fprintf_unfiltered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>internalvar_name()  :  value.c
<item>longest_to_int()  :  valprint.c
<item>print_subexp()  :  expprint.c
<item>symbol_natural_name()  :  symtab.c
<item>target_read_string()  :  target/target.c
<item>type_name_no_tag()  :  gdbtypes.c
<item>type_print()  :  typeprint.c
<item>user_reg_map_regnum_to_name()  :  user-regs.c
<item>value_at_lazy()  :  valops.c
<item>value_from_double()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_print()  :  valprint.c
<item>xfree()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcpy_chk(), strchr(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_print_subexp()  :  ada-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>jv-lang.c
<item>parse.c
<item>scm-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_char  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
<item>current_language  :  language.c
<item>demangle  :  utils.c
</itemize>
</descrip>

<sect1>Local Function dump_subexp_body()

<p><tt>static int dump_subexp_body ( struct expression* exp, struct ui_file* stream, int elt )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>expprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dump_subexp()  :  expprint.c
</itemize>
</descrip>

<sect1>Local Function op_name()

<p><tt>static const char* op_name ( struct expression* exp, enum exp_opcode opcode )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>expprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dump_raw_expression()  :  expprint.c
<item>dump_subexp()  :  expprint.c
</itemize>
</descrip>

</article>
