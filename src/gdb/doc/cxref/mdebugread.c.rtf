{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF mdebugread.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File mdebugread.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "buildsym.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "stabsread.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "complaints.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/demangle.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dictionary.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "mdebugread.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/coff/sym.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/coff/symconst.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_stat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/stat.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/coff/ecoff.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/libaout.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/bfdlink.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/aout/aout64.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/aout/stab_gnu.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/aout/stab.def"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define ECOFF_IN_ELF( bfd )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define PST_PRIVATE( p )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define FDR_IDX( p )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define CUR_BFD( p )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DEBUG_SWAP( p )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DEBUG_INFO( p )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define PENDING_LIST( p )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SC_IS_TEXT( sc )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SC_IS_DATA( sc )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SC_IS_COMMON( sc )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SC_IS_BSS( sc )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SC_IS_SBSS( sc )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SC_IS_UNDEF( sc )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define MIN_GLEVEL GLEVEL_0\par}
{\s5\f1\fs20\ql\sb50\sa50 #define compare_glevel( a, b )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define mdebug_type_int mdebug_type_int_32\par}
{\s5\f1\fs20\ql\sb50\sa50 #define PARSE_TQ( tq )\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct symloc\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct symloc}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int fdr_idx;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bfd* cur_bfd;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const struct ecoff_debug_swap* debug_swap;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct ecoff_debug_info* debug_info;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct mdebug_pending** pending_list;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 EXTR* extern_tab;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int extern_count;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum language pst_language;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type enum block_type\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum block_type}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 FUNCTION_BLOCK;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 NON_FUNCTION_BLOCK;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct pst_map\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct pst_map}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct partial_symtab* pst;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 long n_globals;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 long globals_offset;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct parse_stack\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct parse_stack}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct parse_stack* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct parse_stack* prev;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct symtab* cur_st;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct block* cur_block;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int blocktype;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct type* cur_type;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int cur_field;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR procadr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int numargs;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct mdebug_pending\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct mdebug_pending}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct mdebug_pending* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* s;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct type* t;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable psymtab_language\par}
{\s5\f1\fs20\ql\sb50\sa50 static enum language psymtab_language\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell handle_psymbol_enumerators()\cell\cell\row
\cell new_symbol()\cell\cell\row
\cell parse_partial_symbols()\cell\cell\row
\cell psymtab_to_symtab_1()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable cur_bfd\par}
{\s5\f1\fs20\ql\sb50\sa50 static bfd* cur_bfd\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell cross_ref()\cell\cell\row
\cell get_rfd()\cell\cell\row
\cell handle_psymbol_enumerators()\cell\cell\row
\cell mdebug_build_psymtabs()\cell\cell\row
\cell mdebug_next_symbol_text()\cell\cell\row
\cell new_psymtab()\cell\cell\row
\cell parse_partial_symbols()\cell\cell\row
\cell parse_procedure()\cell\cell\row
\cell parse_symbol()\cell\cell\row
\cell psymtab_to_symtab_1()\cell\cell\row
\cell record_minimal_symbol()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable debug_swap\par}
{\s5\f1\fs20\ql\sb50\sa50 static const struct ecoff_debug_swap* debug_swap\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell cross_ref()\cell\cell\row
\cell get_rfd()\cell\cell\row
\cell handle_psymbol_enumerators()\cell\cell\row
\cell has_opaque_xref()\cell\cell\row
\cell mdebug_build_psymtabs()\cell\cell\row
\cell mdebug_next_symbol_text()\cell\cell\row
\cell new_psymtab()\cell\cell\row
\cell parse_partial_symbols()\cell\cell\row
\cell parse_procedure()\cell\cell\row
\cell parse_symbol()\cell\cell\row
\cell parse_type()\cell\cell\row
\cell psymtab_to_symtab_1()\cell\cell\row
\cell upgrade_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable debug_info\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct ecoff_debug_info* debug_info\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell add_pending()\cell\cell\row
\cell cross_ref()\cell\cell\row
\cell fdr_name()\cell\cell\row
\cell get_rfd()\cell\cell\row
\cell handle_psymbol_enumerators()\cell\cell\row
\cell has_opaque_xref()\cell\cell\row
\cell is_pending_symbol()\cell\cell\row
\cell mdebug_build_psymtabs()\cell\cell\row
\cell mdebug_next_symbol_text()\cell\cell\row
\cell new_psymtab()\cell\cell\row
\cell parse_external()\cell\cell\row
\cell parse_lines()\cell\cell\row
\cell parse_partial_symbols()\cell\cell\row
\cell parse_procedure()\cell\cell\row
\cell parse_symbol()\cell\cell\row
\cell parse_type()\cell\cell\row
\cell psymtab_to_symtab_1()\cell\cell\row
\cell upgrade_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable cur_fdr\par}
{\s5\f1\fs20\ql\sb50\sa50 static FDR* cur_fdr\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell handle_psymbol_enumerators()\cell\cell\row
\cell mdebug_next_symbol_text()\cell\cell\row
\cell parse_external()\cell\cell\row
\cell parse_partial_symbols()\cell\cell\row
\cell parse_procedure()\cell\cell\row
\cell parse_symbol()\cell\cell\row
\cell psymtab_to_symtab_1()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable cur_fd\par}
{\s5\f1\fs20\ql\sb50\sa50 static int cur_fd\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell parse_external()\cell\cell\row
\cell parse_symbol()\cell\cell\row
\cell psymtab_to_symtab_1()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable cur_sdx\par}
{\s5\f1\fs20\ql\sb50\sa50 static int cur_sdx\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell handle_psymbol_enumerators()\cell\cell\row
\cell mdebug_next_symbol_text()\cell\cell\row
\cell parse_partial_symbols()\cell\cell\row
\cell psymtab_to_symtab_1()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable max_gdbinfo\par}
{\s5\f1\fs20\ql\sb50\sa50 static int max_gdbinfo\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell mdebug_build_psymtabs()\cell\cell\row
\cell parse_partial_symbols()\cell\cell\row
\cell parse_symbol()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable max_glevel\par}
{\s5\f1\fs20\ql\sb50\sa50 static int max_glevel\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell mdebug_build_psymtabs()\cell\cell\row
\cell parse_partial_symbols()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable n_undef_symbols\par}
{\s5\f1\fs20\ql\sb50\sa50 static int n_undef_symbols\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell parse_external()\cell\cell\row
\cell psymtab_to_symtab_1()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable n_undef_labels\par}
{\s5\f1\fs20\ql\sb50\sa50 static int n_undef_labels\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell parse_external()\cell\cell\row
\cell psymtab_to_symtab_1()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable n_undef_vars\par}
{\s5\f1\fs20\ql\sb50\sa50 static int n_undef_vars\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell parse_external()\cell\cell\row
\cell psymtab_to_symtab_1()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable n_undef_procs\par}
{\s5\f1\fs20\ql\sb50\sa50 static int n_undef_procs\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell parse_external()\cell\cell\row
\cell psymtab_to_symtab_1()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable stabs_symbol\par}
{\s5\f1\fs20\ql\sb50\sa50 static char stabs_symbol[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell parse_partial_symbols()\cell\cell\row
\cell psymtab_to_symtab_1()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_void\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_void\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_symbol()\cell\cell\row
\cell parse_type()\cell\cell\row
\cell psymtab_to_symtab_1()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_char\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_char\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_short\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_short\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_int_32\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_int_32\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_symbol()\cell\cell\row
\cell parse_type()\cell\cell\row
\cell upgrade_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_int_64\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_int_64\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_long_32\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_long_32\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_long_64\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_long_64\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_long_long_64\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_long_long_64\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_unsigned_char\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_unsigned_char\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_unsigned_short\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_unsigned_short\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_unsigned_int_32\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_unsigned_int_32\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_unsigned_int_64\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_unsigned_int_64\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_unsigned_long_32\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_unsigned_long_32\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_unsigned_long_64\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_unsigned_long_64\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_unsigned_long_long_64\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_unsigned_long_long_64\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_adr_32\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_adr_32\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_adr_64\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_adr_64\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_float\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_float\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_double\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_double\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_complex\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_complex\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_double_complex\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_double_complex\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_fixed_dec\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_fixed_dec\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_float_dec\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_float_dec\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mdebug_type_string\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* mdebug_type_string\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable nodebug_func_symbol_type\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* nodebug_func_symbol_type\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_procedure()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable nodebug_var_symbol_type\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* nodebug_var_symbol_type\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_mdebugread()\cell\cell\row
\cell parse_symbol()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable found_ecoff_debugging_info\par}
{\s5\f1\fs20\ql\sb50\sa50 static int found_ecoff_debugging_info\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell parse_procedure()\cell\cell\row
\cell parse_symbol()\cell\cell\row
\cell psymtab_to_symtab_1()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable top_stack\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct parse_stack* top_stack\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell parse_procedure()\cell\cell\row
\cell parse_symbol()\cell\cell\row
\cell pop_parse_stack()\cell\cell\row
\cell psymtab_to_symtab_1()\cell\cell\row
\cell push_parse_stack()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable pending_list\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct mdebug_pending** pending_list\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell add_pending()\cell\cell\row
\cell is_pending_symbol()\cell\cell\row
\cell new_psymtab()\cell\cell\row
\cell parse_partial_symbols()\cell\cell\row
\cell psymtab_to_symtab_1()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_mdebugread()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_mdebugread ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell gdbarch_double_bit()\cell gdbarch.c\cell\row
\cell gdbarch_float_bit()\cell gdbarch.c\cell\row
\cell gdbarch_int_bit()\cell gdbarch.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell mdebug_type_adr_32\cell mdebugread.c\cell\row
\cell mdebug_type_adr_64\cell mdebugread.c\cell\row
\cell mdebug_type_char\cell mdebugread.c\cell\row
\cell mdebug_type_complex\cell mdebugread.c\cell\row
\cell mdebug_type_double\cell mdebugread.c\cell\row
\cell mdebug_type_double_complex\cell mdebugread.c\cell\row
\cell mdebug_type_fixed_dec\cell mdebugread.c\cell\row
\cell mdebug_type_float\cell mdebugread.c\cell\row
\cell mdebug_type_float_dec\cell mdebugread.c\cell\row
\cell mdebug_type_int_32\cell mdebugread.c\cell\row
\cell mdebug_type_int_64\cell mdebugread.c\cell\row
\cell mdebug_type_long_32\cell mdebugread.c\cell\row
\cell mdebug_type_long_64\cell mdebugread.c\cell\row
\cell mdebug_type_long_long_64\cell mdebugread.c\cell\row
\cell mdebug_type_short\cell mdebugread.c\cell\row
\cell mdebug_type_string\cell mdebugread.c\cell\row
\cell mdebug_type_unsigned_char\cell mdebugread.c\cell\row
\cell mdebug_type_unsigned_int_32\cell mdebugread.c\cell\row
\cell mdebug_type_unsigned_int_64\cell mdebugread.c\cell\row
\cell mdebug_type_unsigned_long_32\cell mdebugread.c\cell\row
\cell mdebug_type_unsigned_long_64\cell mdebugread.c\cell\row
\cell mdebug_type_unsigned_long_long_64\cell mdebugread.c\cell\row
\cell mdebug_type_unsigned_short\cell mdebugread.c\cell\row
\cell mdebug_type_void\cell mdebugread.c\cell\row
\cell nodebug_func_symbol_type\cell mdebugread.c\cell\row
\cell nodebug_var_symbol_type\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function elfmdebug_build_psymtabs()\par}
{\s5\f1\fs20\ql\sb50\sa50 void elfmdebug_build_psymtabs ( struct objfile* objfile, const struct ecoff_debug_swap* swap, asection* sec )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell init_minimal_symbol_collection()\cell minsyms.c\cell\row
\cell install_minimal_symbols()\cell minsyms.c\cell\row
\cell make_cleanup_discard_minimal_symbols()\cell minsyms.c\cell\row
\cell mdebug_build_psymtabs()\cell mdebugread.c\cell\row
\cell  _obstack_newchunk(), bfd_errmsg(), bfd_get_error()\cell\cell\row
Called by:\cell elf_symfile_read()\cell elfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function mdebug_build_psymtabs()\par}
{\s5\f1\fs20\ql\sb50\sa50 void mdebug_build_psymtabs ( struct objfile* objfile, const struct ecoff_debug_swap* swap, struct ecoff_debug_info* info )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell buildsym_new_init()\cell buildsym.c\cell\row
\cell free_header_files()\cell dbxread.c\cell\row
\cell gdb_flush()\cell ui-file.c\cell\row
\cell init_header_files()\cell dbxread.c\cell\row
\cell parse_partial_symbols()\cell mdebugread.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell stabsread_new_init()\cell stabsread.c\cell\row
\cell  _obstack_newchunk()\cell\cell\row
Called by:\cell elfmdebug_build_psymtabs()\cell mdebugread.c\cell\row
\cell mipscoff_symfile_read()\cell mipsread.c\cell\row
Refs Var:\cell cur_bfd\cell mdebugread.c\cell\row
\cell debug_info\cell mdebugread.c\cell\row
\cell debug_swap\cell mdebugread.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell max_gdbinfo\cell mdebugread.c\cell\row
\cell max_glevel\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_block()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_block ( struct block* b, struct symtab* s )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell xrealloc()\cell utils.c\cell\row
Called by:\cell parse_symbol()\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_line()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int add_line ( struct linetable* lt, int lineno, CORE_ADDR adr, int last )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Called by:\cell parse_lines()\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_pending()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_pending ( FDR* fh, char* sh, struct type* t )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell is_pending_symbol()\cell mdebugread.c\cell\row
\cell  _obstack_newchunk()\cell\cell\row
Called by:\cell cross_ref()\cell mdebugread.c\cell\row
\cell parse_symbol()\cell mdebugread.c\cell\row
Refs Var:\cell current_objfile\cell objfiles.c\cell\row
\cell debug_info\cell mdebugread.c\cell\row
\cell pending_list\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_symbol ( struct symbol* s, struct block* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell dict_add_symbol()\cell dictionary.c\cell\row
Called by:\cell parse_symbol()\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function bad_rfd_entry_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void bad_rfd_entry_complaint ( const char* arg1, int arg2, int arg3 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell cross_ref()\cell mdebugread.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function bad_tag_guess_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void bad_tag_guess_complaint ( const char* arg1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell parse_type()\cell mdebugread.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function basic_type_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void basic_type_complaint ( int arg1, const char* arg2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell parse_type()\cell mdebugread.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function compare_blocks()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int compare_blocks ( const void* arg1, const void* arg2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell sort_blocks()\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cross_ref()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int cross_ref ( int fd, union aux_ext* ax, struct type** tpp, enum type_code type_code, const char** pname, int bigend, const char* sym_name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell add_pending()\cell mdebugread.c\cell\row
\cell bad_rfd_entry_complaint()\cell mdebugread.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell cross_ref()\cell mdebugread.c\cell\row
\cell get_rfd()\cell mdebugread.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell is_pending_symbol()\cell mdebugread.c\cell\row
\cell parse_type()\cell mdebugread.c\cell\row
\cell  bfd_getb32(), bfd_getl32()\cell\cell\row
Called by:\cell cross_ref()\cell mdebugread.c\cell\row
\cell parse_type()\cell mdebugread.c\cell\row
Refs Var:\cell cur_bfd\cell mdebugread.c\cell\row
\cell current_objfile\cell objfiles.c\cell\row
\cell debug_info\cell mdebugread.c\cell\row
\cell debug_swap\cell mdebugread.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function fdr_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* fdr_name ( FDR* f )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell parse_external()\cell mdebugread.c\cell\row
\cell parse_lines()\cell mdebugread.c\cell\row
\cell parse_partial_symbols()\cell mdebugread.c\cell\row
Refs Var:\cell debug_info\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function function_outside_compilation_unit_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void function_outside_compilation_unit_complaint ( const char* arg1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell parse_partial_symbols()\cell mdebugread.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_rfd()\par}
{\s5\f1\fs20\ql\sb50\sa50 static FDR* get_rfd ( int cf, int rf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell cross_ref()\cell mdebugread.c\cell\row
\cell parse_type()\cell mdebugread.c\cell\row
\cell upgrade_type()\cell mdebugread.c\cell\row
Refs Var:\cell cur_bfd\cell mdebugread.c\cell\row
\cell debug_info\cell mdebugread.c\cell\row
\cell debug_swap\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function handle_psymbol_enumerators()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void handle_psymbol_enumerators ( struct objfile* objfile, FDR* fh, int stype, CORE_ADDR svalue )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell add_psymbol_to_list()\cell symfile.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell parse_partial_symbols()\cell mdebugread.c\cell\row
Refs Var:\cell cur_bfd\cell mdebugread.c\cell\row
\cell cur_fdr\cell mdebugread.c\cell\row
\cell cur_sdx\cell mdebugread.c\cell\row
\cell debug_info\cell mdebugread.c\cell\row
\cell debug_swap\cell mdebugread.c\cell\row
\cell psymtab_language\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function has_opaque_xref()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int has_opaque_xref ( FDR* fh, SYMR* sh )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell  bfd_getb32(), bfd_getl32()\cell\cell\row
Called by:\cell parse_partial_symbols()\cell mdebugread.c\cell\row
\cell parse_symbol()\cell mdebugread.c\cell\row
Refs Var:\cell debug_info\cell mdebugread.c\cell\row
\cell debug_swap\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function index_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void index_complaint ( const char* arg1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell parse_partial_symbols()\cell mdebugread.c\cell\row
\cell parse_type()\cell mdebugread.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_pending_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct mdebug_pending* is_pending_symbol ( FDR* fh, char* sh )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell add_pending()\cell mdebugread.c\cell\row
\cell cross_ref()\cell mdebugread.c\cell\row
\cell parse_symbol()\cell mdebugread.c\cell\row
Refs Var:\cell debug_info\cell mdebugread.c\cell\row
\cell pending_list\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function mdebug_next_symbol_text()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* mdebug_next_symbol_text ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Used in:\cell mdebug_psymtab_to_symtab()\cell mdebugread.c\cell\row
\cell parse_partial_symbols()\cell mdebugread.c\cell\row
Refs Var:\cell cur_bfd\cell mdebugread.c\cell\row
\cell cur_fdr\cell mdebugread.c\cell\row
\cell cur_sdx\cell mdebugread.c\cell\row
\cell debug_info\cell mdebugread.c\cell\row
\cell debug_swap\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function mdebug_psymtab_to_symtab()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void mdebug_psymtab_to_symtab ( struct partial_symtab* pst )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdb_flush()\cell ui-file.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell psymtab_to_symtab_1()\cell mdebugread.c\cell\row
\cell scan_file_globals()\cell stabsread.c\cell\row
Used in:\cell new_psymtab()\cell mdebugread.c\cell\row
\cell parse_partial_symbols()\cell mdebugread.c\cell\row
Refs Func:\cell mdebug_next_symbol_text()\cell mdebugread.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\cell info_verbose\cell top.c\cell\row
\cell next_symbol_text_func\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function mylookup_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* mylookup_symbol ( const char* name, struct block* block, domain_enum domain, enum address_class addrclass )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell dict_iterator_first()\cell dictionary.c\cell\row
\cell dict_iterator_next()\cell dictionary.c\cell\row
\cell mylookup_symbol()\cell mdebugread.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell mylookup_symbol()\cell mdebugread.c\cell\row
\cell parse_procedure()\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function new_block()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct block* new_block ( enum block_type type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell dict_create_hashed_expandable()\cell dictionary.c\cell\row
\cell dict_create_linear_expandable()\cell dictionary.c\cell\row
\cell xzalloc()\cell utils.c\cell\row
Called by:\cell new_symtab()\cell mdebugread.c\cell\row
\cell parse_symbol()\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function new_bvect()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct blockvector* new_bvect ( int nblocks )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell xzalloc()\cell utils.c\cell\row
Called by:\cell new_symtab()\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function new_linetable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct linetable* new_linetable ( int size )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell new_symtab()\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function new_psymtab()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct partial_symtab* new_psymtab ( const char* name, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell allocate_psymtab()\cell symfile.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell parse_partial_symbols()\cell mdebugread.c\cell\row
Refs Func:\cell mdebug_psymtab_to_symtab()\cell mdebugread.c\cell\row
Refs Var:\cell cur_bfd\cell mdebugread.c\cell\row
\cell debug_info\cell mdebugread.c\cell\row
\cell debug_swap\cell mdebugread.c\cell\row
\cell pending_list\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function new_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* new_symbol ( const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell symbol_set_names()\cell symtab.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strlen()\cell\cell\row
Called by:\cell parse_symbol()\cell mdebugread.c\cell\row
\cell psymtab_to_symtab_1()\cell mdebugread.c\cell\row
Refs Var:\cell current_objfile\cell objfiles.c\cell\row
\cell psymtab_language\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function new_symtab()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtab* new_symtab ( const char* name, int maxlines, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell allocate_symtab()\cell symfile.c\cell\row
\cell new_block()\cell mdebugread.c\cell\row
\cell new_bvect()\cell mdebugread.c\cell\row
\cell new_linetable()\cell mdebugread.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
Called by:\cell psymtab_to_symtab_1()\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function new_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* new_type ( char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell alloc_type()\cell gdbtypes.c\cell\row
Called by:\cell parse_symbol()\cell mdebugread.c\cell\row
Refs Var:\cell current_objfile\cell objfiles.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function parse_external()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void parse_external ( EXTR* es, int bigend, struct section_offsets* section_offsets, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell fdr_name()\cell mdebugread.c\cell\row
\cell parse_symbol()\cell mdebugread.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
Called by:\cell psymtab_to_symtab_1()\cell mdebugread.c\cell\row
Refs Var:\cell cur_fd\cell mdebugread.c\cell\row
\cell cur_fdr\cell mdebugread.c\cell\row
\cell debug_info\cell mdebugread.c\cell\row
\cell info_verbose\cell top.c\cell\row
\cell n_undef_labels\cell mdebugread.c\cell\row
\cell n_undef_procs\cell mdebugread.c\cell\row
\cell n_undef_symbols\cell mdebugread.c\cell\row
\cell n_undef_vars\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function parse_lines()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void parse_lines ( FDR* fh, PDR* pr, struct linetable* lt, int maxlines, struct partial_symtab* pst, CORE_ADDR lowest_pdr_addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell add_line()\cell mdebugread.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell fdr_name()\cell mdebugread.c\cell\row
Called by:\cell psymtab_to_symtab_1()\cell mdebugread.c\cell\row
Refs Var:\cell debug_info\cell mdebugread.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function parse_partial_symbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void parse_partial_symbols ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell add_psymbol_to_list()\cell symfile.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell deduce_language_from_filename()\cell symfile.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell end_psymtab()\cell dbxread.c\cell\row
\cell executable_objfile()\cell objfiles.c\cell\row
\cell fdr_name()\cell mdebugread.c\cell\row
\cell function_outside_compilation_unit_complaint()\cell mdebugread.c\cell\row
\cell get_section_index()\cell symfile.c\cell\row
\cell handle_psymbol_enumerators()\cell mdebugread.c\cell\row
\cell has_opaque_xref()\cell mdebugread.c\cell\row
\cell hex_string()\cell utils.c\cell\row
\cell index_complaint()\cell mdebugread.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell new_psymtab()\cell mdebugread.c\cell\row
\cell prim_record_minimal_symbol_and_info()\cell minsyms.c\cell\row
\cell psymtab_get_first()\cell objfiles.c\cell\row
\cell psymtab_get_next()\cell objfiles.c\cell\row
\cell record_minimal_symbol()\cell mdebugread.c\cell\row
\cell start_psymtab_common()\cell symfile.c\cell\row
\cell unknown_ext_complaint()\cell mdebugread.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell xzalloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin___memset_chk(), __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk(), __inline_strcpy_chk(), _obstack_newchunk(), bfd_get_section_by_name(), bfd_getb32(), bfd_getl32(), strchr(), strcmp(), strlen(), strrchr()\cell\cell\row
Called by:\cell mdebug_build_psymtabs()\cell mdebugread.c\cell\row
Refs Func:\cell mdebug_next_symbol_text()\cell mdebugread.c\cell\row
\cell mdebug_psymtab_to_symtab()\cell mdebugread.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell cur_bfd\cell mdebugread.c\cell\row
\cell cur_fdr\cell mdebugread.c\cell\row
\cell cur_sdx\cell mdebugread.c\cell\row
\cell debug_info\cell mdebugread.c\cell\row
\cell debug_swap\cell mdebugread.c\cell\row
\cell last_source_file\cell buildsym.c\cell\row
\cell max_gdbinfo\cell mdebugread.c\cell\row
\cell max_glevel\cell mdebugread.c\cell\row
\cell next_symbol_text_func\cell buildsym.c\cell\row
\cell pending_list\cell mdebugread.c\cell\row
\cell processing_gcc_compilation\cell buildsym.c\cell\row
\cell psymtab_language\cell mdebugread.c\cell\row
\cell stabs_symbol\cell mdebugread.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\cell symnum\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function parse_procedure()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void parse_procedure ( PDR* pr, struct symtab* search_symtab, struct partial_symtab* pst )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell mylookup_symbol()\cell mdebugread.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell psymtab_to_symtab_1()\cell mdebugread.c\cell\row
Refs Var:\cell cur_bfd\cell mdebugread.c\cell\row
\cell cur_fdr\cell mdebugread.c\cell\row
\cell debug_info\cell mdebugread.c\cell\row
\cell debug_swap\cell mdebugread.c\cell\row
\cell found_ecoff_debugging_info\cell mdebugread.c\cell\row
\cell nodebug_func_symbol_type\cell mdebugread.c\cell\row
\cell processing_gcc_compilation\cell buildsym.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\cell top_stack\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function parse_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int parse_symbol ( SYMR* sh, union aux_ext* ax, char* ext_sh, int bigend, struct section_offsets* section_offsets, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell add_block()\cell mdebugread.c\cell\row
\cell add_pending()\cell mdebugread.c\cell\row
\cell add_symbol()\cell mdebugread.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell dict_iterator_first()\cell dictionary.c\cell\row
\cell dict_iterator_next()\cell dictionary.c\cell\row
\cell executable_objfile()\cell objfiles.c\cell\row
\cell gdbarch_ecoff_reg_to_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_int_bit()\cell gdbarch.c\cell\row
\cell has_opaque_xref()\cell mdebugread.c\cell\row
\cell hashname()\cell buildsym.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell is_cplus_marker()\cell demangle.c\cell\row
\cell is_pending_symbol()\cell mdebugread.c\cell\row
\cell lookup_function_type()\cell gdbtypes.c\cell\row
\cell make_pointer_type()\cell gdbtypes.c\cell\row
\cell new_block()\cell mdebugread.c\cell\row
\cell new_symbol()\cell mdebugread.c\cell\row
\cell new_type()\cell mdebugread.c\cell\row
\cell obconcat()\cell symfile.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell parse_type()\cell mdebugread.c\cell\row
\cell pop_parse_stack()\cell mdebugread.c\cell\row
\cell push_parse_stack()\cell mdebugread.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strcmp(), strlen()\cell\cell\row
Called by:\cell parse_external()\cell mdebugread.c\cell\row
\cell psymtab_to_symtab_1()\cell mdebugread.c\cell\row
Refs Var:\cell cur_bfd\cell mdebugread.c\cell\row
\cell cur_fd\cell mdebugread.c\cell\row
\cell cur_fdr\cell mdebugread.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_objfile\cell objfiles.c\cell\row
\cell debug_info\cell mdebugread.c\cell\row
\cell debug_swap\cell mdebugread.c\cell\row
\cell found_ecoff_debugging_info\cell mdebugread.c\cell\row
\cell global_sym_chain\cell stabsread.c\cell\row
\cell max_gdbinfo\cell mdebugread.c\cell\row
\cell mdebug_type_int_32\cell mdebugread.c\cell\row
\cell mdebug_type_void\cell mdebugread.c\cell\row
\cell nodebug_var_symbol_type\cell mdebugread.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\cell top_stack\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function parse_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* parse_type ( int fd, union aux_ext* ax, unsigned int aux_index, int* bs, int bigend, const char* sym_name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell bad_tag_guess_complaint()\cell mdebugread.c\cell\row
\cell basic_type_complaint()\cell mdebugread.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell cross_ref()\cell mdebugread.c\cell\row
\cell get_rfd()\cell mdebugread.c\cell\row
\cell index_complaint()\cell mdebugread.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell parse_type()\cell mdebugread.c\cell\row
\cell unexpected_type_code_complaint()\cell mdebugread.c\cell\row
\cell upgrade_type()\cell mdebugread.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  _obstack_newchunk(), bfd_getb32(), bfd_getl32(), strcmp(), strlen()\cell\cell\row
Called by:\cell cross_ref()\cell mdebugread.c\cell\row
\cell parse_symbol()\cell mdebugread.c\cell\row
\cell parse_type()\cell mdebugread.c\cell\row
\cell upgrade_type()\cell mdebugread.c\cell\row
Refs Var:\cell current_objfile\cell objfiles.c\cell\row
\cell debug_info\cell mdebugread.c\cell\row
\cell debug_swap\cell mdebugread.c\cell\row
\cell mdebug_type_adr_32\cell mdebugread.c\cell\row
\cell mdebug_type_adr_64\cell mdebugread.c\cell\row
\cell mdebug_type_char\cell mdebugread.c\cell\row
\cell mdebug_type_complex\cell mdebugread.c\cell\row
\cell mdebug_type_double\cell mdebugread.c\cell\row
\cell mdebug_type_double_complex\cell mdebugread.c\cell\row
\cell mdebug_type_fixed_dec\cell mdebugread.c\cell\row
\cell mdebug_type_float\cell mdebugread.c\cell\row
\cell mdebug_type_float_dec\cell mdebugread.c\cell\row
\cell mdebug_type_int_32\cell mdebugread.c\cell\row
\cell mdebug_type_int_64\cell mdebugread.c\cell\row
\cell mdebug_type_long_32\cell mdebugread.c\cell\row
\cell mdebug_type_long_64\cell mdebugread.c\cell\row
\cell mdebug_type_long_long_64\cell mdebugread.c\cell\row
\cell mdebug_type_short\cell mdebugread.c\cell\row
\cell mdebug_type_string\cell mdebugread.c\cell\row
\cell mdebug_type_unsigned_char\cell mdebugread.c\cell\row
\cell mdebug_type_unsigned_int_32\cell mdebugread.c\cell\row
\cell mdebug_type_unsigned_int_64\cell mdebugread.c\cell\row
\cell mdebug_type_unsigned_long_32\cell mdebugread.c\cell\row
\cell mdebug_type_unsigned_long_64\cell mdebugread.c\cell\row
\cell mdebug_type_unsigned_long_long_64\cell mdebugread.c\cell\row
\cell mdebug_type_unsigned_short\cell mdebugread.c\cell\row
\cell mdebug_type_void\cell mdebugread.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function pop_parse_stack()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void pop_parse_stack ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell parse_symbol()\cell mdebugread.c\cell\row
\cell psymtab_to_symtab_1()\cell mdebugread.c\cell\row
Refs Var:\cell top_stack\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function psymtab_to_symtab_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void psymtab_to_symtab_1 ( struct partial_symtab* pst, char* filename )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell add_symbol_to_list()\cell buildsym.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell end_stabs()\cell stabsread.c\cell\row
\cell end_symtab()\cell buildsym.c\cell\row
\cell executable_objfile()\cell objfiles.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell gdb_flush()\cell ui-file.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell new_symbol()\cell mdebugread.c\cell\row
\cell new_symtab()\cell mdebugread.c\cell\row
\cell parse_external()\cell mdebugread.c\cell\row
\cell parse_lines()\cell mdebugread.c\cell\row
\cell parse_procedure()\cell mdebugread.c\cell\row
\cell parse_symbol()\cell mdebugread.c\cell\row
\cell pop_parse_stack()\cell mdebugread.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell process_one_symbol()\cell dbxread.c\cell\row
\cell psymtab_to_symtab_1()\cell mdebugread.c\cell\row
\cell push_parse_stack()\cell mdebugread.c\cell\row
\cell record_line()\cell buildsym.c\cell\row
\cell shrink_linetable()\cell mdebugread.c\cell\row
\cell sort_blocks()\cell mdebugread.c\cell\row
\cell wrap_here()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strcmp()\cell\cell\row
Called by:\cell mdebug_psymtab_to_symtab()\cell mdebugread.c\cell\row
\cell psymtab_to_symtab_1()\cell mdebugread.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell cur_bfd\cell mdebugread.c\cell\row
\cell cur_fd\cell mdebugread.c\cell\row
\cell cur_fdr\cell mdebugread.c\cell\row
\cell cur_sdx\cell mdebugread.c\cell\row
\cell current_objfile\cell objfiles.c\cell\row
\cell current_subfile\cell buildsym.c\cell\row
\cell debug_info\cell mdebugread.c\cell\row
\cell debug_swap\cell mdebugread.c\cell\row
\cell found_ecoff_debugging_info\cell mdebugread.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell info_verbose\cell top.c\cell\row
\cell last_source_file\cell buildsym.c\cell\row
\cell local_symbols\cell buildsym.c\cell\row
\cell mdebug_type_void\cell mdebugread.c\cell\row
\cell n_undef_labels\cell mdebugread.c\cell\row
\cell n_undef_procs\cell mdebugread.c\cell\row
\cell n_undef_symbols\cell mdebugread.c\cell\row
\cell n_undef_vars\cell mdebugread.c\cell\row
\cell pending_list\cell mdebugread.c\cell\row
\cell previous_stab_code\cell stabsread.c\cell\row
\cell processing_gcc_compilation\cell buildsym.c\cell\row
\cell psymtab_language\cell mdebugread.c\cell\row
\cell stabs_symbol\cell mdebugread.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\cell top_stack\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function push_parse_stack()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void push_parse_stack ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xzalloc()\cell utils.c\cell\row
Called by:\cell parse_symbol()\cell mdebugread.c\cell\row
\cell psymtab_to_symtab_1()\cell mdebugread.c\cell\row
Refs Var:\cell top_stack\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function record_minimal_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void record_minimal_symbol ( const char* name, const CORE_ADDR address, enum minimal_symbol_type ms_type, int storage_class, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell executable_objfile()\cell objfiles.c\cell\row
\cell get_section_index()\cell symfile.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell prim_record_minimal_symbol_and_info()\cell minsyms.c\cell\row
\cell  bfd_get_section_by_name()\cell\cell\row
Called by:\cell parse_partial_symbols()\cell mdebugread.c\cell\row
Refs Var:\cell cur_bfd\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function shrink_linetable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct linetable* shrink_linetable ( struct linetable* lt )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell xrealloc()\cell utils.c\cell\row
Called by:\cell psymtab_to_symtab_1()\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function sort_blocks()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void sort_blocks ( struct symtab* s )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell  qsort()\cell\cell\row
Called by:\cell psymtab_to_symtab_1()\cell mdebugread.c\cell\row
Refs Func:\cell compare_blocks()\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unexpected_type_code_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void unexpected_type_code_complaint ( const char* arg1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell parse_type()\cell mdebugread.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unknown_ext_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void unknown_ext_complaint ( const char* arg1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell parse_partial_symbols()\cell mdebugread.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function upgrade_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int upgrade_type ( int fd, struct type** tpp, int tq, union aux_ext* ax, int bigend, const char* sym_name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell mdebugread.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell create_array_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell get_rfd()\cell mdebugread.c\cell\row
\cell lookup_function_type()\cell gdbtypes.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell parse_type()\cell mdebugread.c\cell\row
\cell  bfd_getb32(), bfd_getl32()\cell\cell\row
Called by:\cell parse_type()\cell mdebugread.c\cell\row
Refs Var:\cell debug_info\cell mdebugread.c\cell\row
\cell debug_swap\cell mdebugread.c\cell\row
\cell mdebug_type_int_32\cell mdebugread.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
}
