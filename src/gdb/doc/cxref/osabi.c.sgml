<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF osabi.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for osabi.c of gdb.cxref.
<author>cxref

<sect>File osabi.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;osabi.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;arch-utils.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/elf-bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;../include/elf/common.h&quot;</tt>
<item><tt>#include &quot;../include/elf/internal.h&quot;</tt>
<item><tt>#include &quot;../include/elf/external.h&quot;</tt>
<item><tt>#include &quot;../include/bfdlink.h&quot;</tt>
</itemize>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define GDB_OSABI_DEFAULT GDB_OSABI_UNKNOWN</tt><newline>
<p>
<tt>#define MAX_NOTESZ 128</tt><newline>

<sect1>Type struct gdb_osabi_handler

<p>
<itemize>
<item><tt>struct gdb_osabi_handler</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct gdb_osabi_handler* next;</tt><newline>
<item><tt>const struct bfd_arch_info* arch_info;</tt><newline>
<item><tt>enum gdb_osabi osabi;</tt><newline>
<item><tt>void (*init_osabi)(struct gdbarch_info,struct gdbarch*);</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct gdb_osabi_sniffer

<p>
<itemize>
<item><tt>struct gdb_osabi_sniffer</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct gdb_osabi_sniffer* next;</tt><newline>
<item><tt>enum bfd_architecture arch;</tt><newline>
<item><tt>enum bfd_flavour flavour;</tt><newline>
<item><tt>enum gdb_osabi (*sniffer)(bfd*);</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Local Variables

<p>
<bf>user_osabi_state</bf><newline>
<tt>static enum {...} user_osabi_state</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_gdb_osabi()
<item>gdbarch_lookup_osabi()
<item>set_osabi()
<item>set_osabi_from_string()
<item>show_osabi()
</itemize>
</descrip>
<p>
<bf>user_selected_osabi</bf><newline>
<tt>static enum gdb_osabi user_selected_osabi</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_lookup_osabi()
<item>set_osabi()
<item>set_osabi_from_string()
<item>show_osabi()
</itemize>
</descrip>
<p>
<bf>gdb_osabi_available_names</bf><newline>
<tt>static const char* gdb_osabi_available_names[GDB_OSABI_INVALID+3]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_gdb_osabi()
<item>gdbarch_register_osabi()
</itemize>
</descrip>
<p>
<bf>set_osabi_string</bf><newline>
<tt>static const char* set_osabi_string</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_gdb_osabi()
<item>set_osabi()
<item>set_osabi_from_string()
<item>set_osabi_option()
</itemize>
</descrip>
<p>
<bf>gdb_osabi_names</bf><newline>
<tt>static const char* const gdb_osabi_names[GDB_OSABI_INVALID+2]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_gdb_osabi()
<item>gdbarch_osabi_name()
</itemize>
</descrip>
<p>
<bf>gdb_osabi_handler_list</bf><newline>
<tt>static struct gdb_osabi_handler* gdb_osabi_handler_list</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_init_osabi()
<item>gdbarch_register_osabi()
</itemize>
</descrip>
<p>
<bf>gdb_osabi_sniffer_list</bf><newline>
<tt>static struct gdb_osabi_sniffer* gdb_osabi_sniffer_list</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_lookup_osabi_from_bfd()
<item>gdbarch_register_osabi_sniffer()
</itemize>
</descrip>

<sect1>Global Function _initialize_gdb_osabi()

<p><tt>void _initialize_gdb_osabi ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>osabi.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_register_osabi_sniffer()  :  osabi.c
<item>internal_error()  :  utils.c
<item>add_setshow_enum_cmd(), strncmp()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>generic_elf_osabi_sniffer()  :  osabi.c
<item>set_osabi()  :  osabi.c
<item>show_osabi()  :  osabi.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_osabi_available_names  :  osabi.c
<item>gdb_osabi_names  :  osabi.c
<item>set_osabi_string  :  osabi.c
<item>user_osabi_state  :  osabi.c
<item>setlist, showlist
</itemize>
</descrip>

<sect1>Global Function gdbarch_init_osabi()

<p><tt>void gdbarch_init_osabi ( struct gdbarch_info info, struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>osabi.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>can_run_code_for()  :  osabi.c
<item>gdbarch_osabi_name()  :  osabi.c
<item>warning()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_osabi_handler_list  :  osabi.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_lookup_osabi()

<p><tt>enum gdb_osabi gdbarch_lookup_osabi ( bfd* abfd )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>osabi.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_lookup_osabi_from_bfd()  :  osabi.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_info_fill()  :  arch-utils.c
<item>open_bfd_matching_arch()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>user_osabi_state  :  osabi.c
<item>user_selected_osabi  :  osabi.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_lookup_osabi_from_bfd()

<p><tt>enum gdb_osabi gdbarch_lookup_osabi_from_bfd ( bfd* abfd )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>osabi.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_osabi_name()  :  osabi.c
<item>internal_error()  :  utils.c
<item>bfd_get_arch(), bfd_printable_arch_mach()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_lookup_osabi()  :  osabi.c
<item>open_bfd_matching_arch()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_osabi_sniffer_list  :  osabi.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_osabi_name()

<p><tt>const char* gdbarch_osabi_name ( enum gdb_osabi osabi )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>osabi.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_arch_by_info()  :  gdbarch.c
<item>gdbarch_init_osabi()  :  osabi.c
<item>gdbarch_lookup_osabi_from_bfd()  :  osabi.c
<item>gdbarch_register_osabi()  :  osabi.c
<item>set_osabi()  :  osabi.c
<item>set_osabi_from_string()  :  osabi.c
<item>show_osabi()  :  osabi.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_osabi_names  :  osabi.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_register_osabi()

<p><tt>void gdbarch_register_osabi ( enum bfd_architecture arch, unsigned long machine, enum gdb_osabi osabi, void (*init_osabi)(struct gdbarch_info,struct gdbarch*) )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>osabi.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_osabi_name()  :  osabi.c
<item>internal_error()  :  utils.c
<item>xmalloc()  :  utils.c
<item>bfd_lookup_arch(), bfd_printable_arch_mach()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_osabi_available_names  :  osabi.c
<item>gdb_osabi_handler_list  :  osabi.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_register_osabi_sniffer()

<p><tt>void gdbarch_register_osabi_sniffer ( enum bfd_architecture arch, enum bfd_flavour flavour, enum gdb_osabi (*sniffer_fn)(bfd*) )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>osabi.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_gdb_osabi()  :  osabi.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_osabi_sniffer_list  :  osabi.c
</itemize>
</descrip>

<sect1>Global Function generic_elf_osabi_sniff_abi_tag_sections()

<p><tt>void generic_elf_osabi_sniff_abi_tag_sections ( bfd* abfd, asection* sect, void* obj )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>osabi.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_note()  :  osabi.c
<item>internal_error()  :  utils.c
<item>__builtin_alloca(), bfd_get_section_contents(), strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>generic_elf_osabi_sniffer()  :  osabi.c
</itemize>
</descrip>

<sect1>Global Function set_osabi_from_string()

<p><tt>int set_osabi_from_string ( const char* in_osabi_string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>osabi.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_info_init()  :  arch-utils.c
<item>gdbarch_osabi_name()  :  osabi.c
<item>gdbarch_update_p()  :  arch-utils.c
<item>strcmp(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>captured_main()  :  main.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>set_osabi_string  :  osabi.c
<item>user_osabi_state  :  osabi.c
<item>user_selected_osabi  :  osabi.c
</itemize>
</descrip>

<sect1>Global Function set_osabi_option()

<p><tt>void set_osabi_option ( const char* osabi_str )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>osabi.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>set_osabi()  :  osabi.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>captured_main()  :  main.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>set_osabi_string  :  osabi.c
</itemize>
</descrip>

<sect1>Local Function can_run_code_for()

<p><tt>static int can_run_code_for ( const struct bfd_arch_info* a, const struct bfd_arch_info* b )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_init_osabi()  :  osabi.c
</itemize>
</descrip>

<sect1>Local Function check_note()

<p><tt>static int check_note ( bfd* abfd, asection* sect, const char* note, const char* name, unsigned long descsz, unsigned long type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>generic_elf_osabi_sniff_abi_tag_sections()  :  osabi.c
</itemize>
</descrip>

<sect1>Local Function generic_elf_osabi_sniffer()

<p><tt>static enum gdb_osabi generic_elf_osabi_sniffer ( bfd* abfd )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>bfd_map_over_sections(), strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_gdb_osabi()  :  osabi.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>generic_elf_osabi_sniff_abi_tag_sections()  :  osabi.c
</itemize>
</descrip>

<sect1>Local Function set_osabi()

<p><tt>static void set_osabi ( const char* args, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_info_init()  :  arch-utils.c
<item>gdbarch_osabi_name()  :  osabi.c
<item>gdbarch_update_p()  :  arch-utils.c
<item>internal_error()  :  utils.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_osabi_option()  :  osabi.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_gdb_osabi()  :  osabi.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>set_osabi_string  :  osabi.c
<item>user_osabi_state  :  osabi.c
<item>user_selected_osabi  :  osabi.c
</itemize>
</descrip>

<sect1>Local Function show_osabi()

<p><tt>static void show_osabi ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>gdbarch_osabi()  :  gdbarch.c
<item>gdbarch_osabi_name()  :  osabi.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_gdb_osabi()  :  osabi.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>user_osabi_state  :  osabi.c
<item>user_selected_osabi  :  osabi.c
</itemize>
</descrip>

</article>
