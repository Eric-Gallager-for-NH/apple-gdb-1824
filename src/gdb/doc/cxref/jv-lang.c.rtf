{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF jv-lang.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File jv-lang.c\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Refs Func:\cell basic_lookup_symbol_nonlocal()\cell symtab.c\cell\row
\cell basic_lookup_transparent_type()\cell symtab.c\cell\row
\cell c_language_arch_info()\cell c-lang.c\cell\row
\cell c_printchar()\cell c-lang.c\cell\row
\cell c_printstr()\cell c-lang.c\cell\row
\cell default_word_break_characters()\cell language.c\cell\row
\cell dump_subexp_body_standard()\cell expprint.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell java_class_name_from_physname()\cell jv-lang.c\cell\row
\cell java_create_fundamental_type()\cell jv-lang.c\cell\row
\cell java_demangle()\cell jv-lang.c\cell\row
\cell java_emit_char()\cell jv-lang.c\cell\row
\cell java_error()\cell jv-exp.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell java_print_type()\cell jv-typeprint.c\cell\row
\cell java_val_print()\cell jv-valprint.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell null_post_parser()\cell parse.c\cell\row
\cell op_name_standard()\cell expprint.c\cell\row
\cell operator_length_standard()\cell parse.c\cell\row
\cell print_subexp_standard()\cell expprint.c\cell\row
\cell value_of_this()\cell valops.c\cell\row
Refs Var:\cell exp_descriptor_java\cell jv-lang.c\cell\row
\cell java_op_print_tab\cell jv-lang.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "parser-defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "c-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "macroexp.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "jv-lang.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/demangle.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dictionary.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <ctype.h>\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable java_int_type\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* java_int_type\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell language.c\cell\cell\row
Used in:\cell _initialize_java_language()\cell jv-lang.c\cell\row
\cell java_create_fundamental_type()\cell jv-lang.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell java_primitive_type()\cell jv-lang.c\cell\row
\cell java_primitive_type_from_name()\cell jv-lang.c\cell\row
\cell parse_number()\cell jv-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable java_byte_type\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* java_byte_type\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell language.c\cell\cell\row
Used in:\cell _initialize_java_language()\cell jv-lang.c\cell\row
\cell java_create_fundamental_type()\cell jv-lang.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell java_primitive_type()\cell jv-lang.c\cell\row
\cell java_primitive_type_from_name()\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable java_short_type\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* java_short_type\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell language.c\cell\cell\row
Used in:\cell _initialize_java_language()\cell jv-lang.c\cell\row
\cell java_create_fundamental_type()\cell jv-lang.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell java_primitive_type()\cell jv-lang.c\cell\row
\cell java_primitive_type_from_name()\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable java_long_type\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* java_long_type\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell language.c\cell\cell\row
Used in:\cell _initialize_java_language()\cell jv-lang.c\cell\row
\cell java_create_fundamental_type()\cell jv-lang.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell java_primitive_type()\cell jv-lang.c\cell\row
\cell java_primitive_type_from_name()\cell jv-lang.c\cell\row
\cell parse_number()\cell jv-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable java_boolean_type\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* java_boolean_type\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell language.c\cell\cell\row
Used in:\cell _initialize_java_language()\cell jv-lang.c\cell\row
\cell java_create_fundamental_type()\cell jv-lang.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell java_primitive_type()\cell jv-lang.c\cell\row
\cell java_primitive_type_from_name()\cell jv-lang.c\cell\row
\cell lang_bool_type()\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable java_char_type\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* java_char_type\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell language.c\cell\cell\row
Used in:\cell _initialize_java_language()\cell jv-lang.c\cell\row
\cell java_create_fundamental_type()\cell jv-lang.c\cell\row
\cell java_lex()\cell jv-exp.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell java_primitive_type()\cell jv-lang.c\cell\row
\cell java_primitive_type_from_name()\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable java_float_type\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* java_float_type\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell language.c\cell\cell\row
Used in:\cell _initialize_java_language()\cell jv-lang.c\cell\row
\cell java_create_fundamental_type()\cell jv-lang.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell java_primitive_type()\cell jv-lang.c\cell\row
\cell java_primitive_type_from_name()\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable java_double_type\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* java_double_type\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell language.c\cell\cell\row
Used in:\cell _initialize_java_language()\cell jv-lang.c\cell\row
\cell java_create_fundamental_type()\cell jv-lang.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell java_primitive_type()\cell jv-lang.c\cell\row
\cell java_primitive_type_from_name()\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable java_void_type\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* java_void_type\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell language.c\cell\cell\row
Used in:\cell _initialize_java_language()\cell jv-lang.c\cell\row
\cell java_create_fundamental_type()\cell jv-lang.c\cell\row
\cell java_link_class_type()\cell jv-lang.c\cell\row
\cell java_primitive_type()\cell jv-lang.c\cell\row
\cell java_primitive_type_from_name()\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable java_op_print_tab\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct op_print java_op_print_tab[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell jv-lang.c\cell\cell\row
Used in:\cell jv-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable exp_descriptor_java\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct exp_descriptor exp_descriptor_java\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell jv-lang.c\cell\cell\row
Used in:\cell jv-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable java_language_defn\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct language_defn java_language_defn\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell jv-lang.c\cell\cell\row
Used in:\cell _initialize_java_language()\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dynamics_objfile\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct objfile* dynamics_objfile\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell add_class_symbol()\cell\cell\row
\cell get_dynamics_objfile()\cell\cell\row
\cell java_link_class_type()\cell\cell\row
\cell java_rerun_cleanup()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable class_symtab\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtab* class_symtab\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell get_java_class_symtab()\cell\cell\row
\cell java_rerun_cleanup()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable java_object_type\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* java_object_type\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell get_java_object_type()\cell\cell\row
\cell is_object_type()\cell\cell\row
\cell java_rerun_cleanup()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_java_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_java_language ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.c\cell\cell\row
Calls: \cell add_language()\cell language.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
Refs Var:\cell java_boolean_type\cell jv-lang.c\cell\row
\cell java_byte_type\cell jv-lang.c\cell\row
\cell java_char_type\cell jv-lang.c\cell\row
\cell java_double_type\cell jv-lang.c\cell\row
\cell java_float_type\cell jv-lang.c\cell\row
\cell java_int_type\cell jv-lang.c\cell\row
\cell java_language_defn\cell jv-lang.c\cell\row
\cell java_long_type\cell jv-lang.c\cell\row
\cell java_short_type\cell jv-lang.c\cell\row
\cell java_void_type\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_java_object_header_size()\par}
{\s5\f1\fs20\ql\sb50\sa50 int get_java_object_header_size ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.h\cell\cell\row
Calls: \cell gdbarch_ptr_bit()\cell gdbarch.c\cell\row
\cell get_java_object_type()\cell jv-lang.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_java_object_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* get_java_object_type ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell lookup_symbol()\cell symtab.c\cell\row
Called by:\cell get_java_object_header_size()\cell jv-lang.c\cell\row
\cell java_class_from_object()\cell jv-lang.c\cell\row
\cell java_link_class_type()\cell jv-lang.c\cell\row
Refs Var:\cell java_object_type\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_java_utf8_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* get_java_utf8_name ( struct obstack* obstack, struct value* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.c\cell\cell\row
Calls: \cell deprecated_value_address_hack()\cell value.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell read_memory()\cell corefile.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell  _obstack_newchunk()\cell\cell\row
Called by:\cell java_link_class_type()\cell jv-lang.c\cell\row
\cell type_from_class()\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function is_object_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 int is_object_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\cell java_object_type\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function java_array_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* java_array_type ( struct type* type, int dims )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.h\cell\cell\row
Calls: \cell create_array_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
Called by:\cell java_parse()\cell jv-exp.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function java_class_from_object()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* java_class_from_object ( struct value* obj_val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.h\cell\cell\row
Calls: \cell get_java_object_type()\cell jv-lang.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_at()\cell valops.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function java_demangle_type_signature()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* java_demangle_type_signature ( const char* signature )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.h\cell\cell\row
Calls: \cell java_demangled_signature_copy()\cell jv-lang.c\cell\row
\cell java_demangled_signature_length()\cell jv-lang.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell java_type_print_base()\cell jv-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function java_link_class_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* java_link_class_type ( struct type* type, struct value* clas )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.c\cell\cell\row
Calls: \cell deprecated_value_address_hack()\cell value.c\cell\row
\cell get_dynamics_objfile()\cell jv-lang.c\cell\row
\cell get_java_object_type()\cell jv-lang.c\cell\row
\cell get_java_utf8_name()\cell jv-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell make_function_type()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell set_value_lazy()\cell value.c\cell\row
\cell type_from_class()\cell jv-lang.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk(), _obstack_newchunk(), strcmp(), strlen(), strrchr()\cell\cell\row
Called by:\cell type_from_class()\cell jv-lang.c\cell\row
Refs Func:\cell  obstack_free()\cell\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\cell dynamics_objfile\cell jv-lang.c\cell\row
\cell java_void_type\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function java_lookup_class()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* java_lookup_class ( char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.h\cell\cell\row
Calls: \cell lookup_symbol()\cell symtab.c\cell\row
Called by:\cell java_type_from_name()\cell jv-exp.c\cell\row
\cell push_expression_name()\cell jv-exp.c\cell\row
\cell push_qualified_expression_name()\cell jv-exp.c\cell\row
\cell type_from_class()\cell jv-lang.c\cell\row
Refs Var:\cell expression_context_block\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function java_primitive_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* java_primitive_type ( int signature )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Called by:\cell java_demangled_signature_copy()\cell jv-lang.c\cell\row
\cell java_demangled_signature_length()\cell jv-lang.c\cell\row
\cell type_from_class()\cell jv-lang.c\cell\row
Refs Var:\cell java_boolean_type\cell jv-lang.c\cell\row
\cell java_byte_type\cell jv-lang.c\cell\row
\cell java_char_type\cell jv-lang.c\cell\row
\cell java_double_type\cell jv-lang.c\cell\row
\cell java_float_type\cell jv-lang.c\cell\row
\cell java_int_type\cell jv-lang.c\cell\row
\cell java_long_type\cell jv-lang.c\cell\row
\cell java_short_type\cell jv-lang.c\cell\row
\cell java_void_type\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function java_primitive_type_from_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* java_primitive_type_from_name ( const char* name, int namelen )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.h\cell\cell\row
Calls: \cell  memcmp()\cell\cell\row
Called by:\cell java_value_print()\cell jv-valprint.c\cell\row
Refs Var:\cell java_boolean_type\cell jv-lang.c\cell\row
\cell java_byte_type\cell jv-lang.c\cell\row
\cell java_char_type\cell jv-lang.c\cell\row
\cell java_double_type\cell jv-lang.c\cell\row
\cell java_float_type\cell jv-lang.c\cell\row
\cell java_int_type\cell jv-lang.c\cell\row
\cell java_long_type\cell jv-lang.c\cell\row
\cell java_short_type\cell jv-lang.c\cell\row
\cell java_void_type\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function java_rerun_cleanup()\par}
{\s5\f1\fs20\ql\sb50\sa50 void java_rerun_cleanup ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.c\cell\cell\row
Calls: \cell free_objfile()\cell objfiles.c\cell\row
\cell free_symtab()\cell symmisc.c\cell\row
Refs Var:\cell class_symtab\cell jv-lang.c\cell\row
\cell dynamics_objfile\cell jv-lang.c\cell\row
\cell java_object_type\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function type_from_class()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* type_from_class ( struct value* clas )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.h\cell\cell\row
Calls: \cell add_class_symbol()\cell jv-lang.c\cell\row
\cell add_class_symtab_symbol()\cell jv-lang.c\cell\row
\cell alloc_type()\cell gdbtypes.c\cell\row
\cell allocate_cplus_struct_type()\cell gdbtypes.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell deprecated_set_value_type()\cell value.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell get_dynamics_objfile()\cell jv-lang.c\cell\row
\cell get_java_utf8_name()\cell jv-lang.c\cell\row
\cell java_class_is_primitive()\cell jv-lang.c\cell\row
\cell java_demangled_signature_copy()\cell jv-lang.c\cell\row
\cell java_demangled_signature_length()\cell jv-lang.c\cell\row
\cell java_link_class_type()\cell jv-lang.c\cell\row
\cell java_lookup_class()\cell jv-lang.c\cell\row
\cell java_primitive_type()\cell jv-lang.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell type_from_class()\cell jv-lang.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_logical_not()\cell valarith.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell  _obstack_newchunk(), strlen()\cell\cell\row
Called by:\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell java_link_class_type()\cell jv-lang.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell type_from_class()\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_class_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* add_class_symbol ( struct type* type, CORE_ADDR addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.c\cell\cell\row
Calls: \cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell type_from_class()\cell jv-lang.c\cell\row
Refs Var:\cell dynamics_objfile\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_class_symtab_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_class_symtab_symbol ( struct symbol* sym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell dict_add_symbol()\cell dictionary.c\cell\row
\cell get_java_class_symtab()\cell jv-lang.c\cell\row
Called by:\cell type_from_class()\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function evaluate_subexp_java()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* evaluate_subexp_java ( struct type* expect_type, struct expression* exp, int* pos, enum noside noside )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell deprecated_set_value_type()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell evaluate_subexp_with_coercion()\cell eval.c\cell\row
\cell extract_signed_integer()\cell findvar.c\cell\row
\cell get_java_object_header_size()\cell jv-lang.c\cell\row
\cell is_object_type()\cell jv-lang.c\cell\row
\cell java_class_from_object()\cell jv-lang.c\cell\row
\cell java_value_string()\cell jv-lang.c\cell\row
\cell longest_to_int()\cell valprint.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell read_memory()\cell corefile.c\cell\row
\cell type_from_class()\cell jv-lang.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_at()\cell valops.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell value_zero()\cell valops.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
Used in:\cell jv-lang.c\cell\cell\row
Refs Var:\cell builtin_type_long\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function free_class_block()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void free_class_block ( struct symtab* symtab )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.c\cell\cell\row
Calls: \cell dict_free()\cell dictionary.c\cell\row
Used in:\cell get_java_class_symtab()\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_dynamics_objfile()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct objfile* get_dynamics_objfile ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell allocate_objfile()\cell objfiles.c\cell\row
Called by:\cell get_java_class_symtab()\cell jv-lang.c\cell\row
\cell java_link_class_type()\cell jv-lang.c\cell\row
\cell type_from_class()\cell jv-lang.c\cell\row
Refs Var:\cell dynamics_objfile\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_java_class_symtab()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtab* get_java_class_symtab ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.c\cell\cell\row
Calls: \cell allocate_block()\cell block.c\cell\row
\cell allocate_symtab()\cell symfile.c\cell\row
\cell dict_create_hashed_expandable()\cell dictionary.c\cell\row
\cell dict_create_linear()\cell dictionary.c\cell\row
\cell get_dynamics_objfile()\cell jv-lang.c\cell\row
\cell  _obstack_newchunk()\cell\cell\row
Called by:\cell add_class_symtab_symbol()\cell jv-lang.c\cell\row
Refs Func:\cell free_class_block()\cell jv-lang.c\cell\row
Refs Var:\cell class_symtab\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function java_class_is_primitive()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int java_class_is_primitive ( struct value* clas )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.c\cell\cell\row
Calls: \cell value_as_address()\cell value.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
Called by:\cell type_from_class()\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function java_class_name_from_physname()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* java_class_name_from_physname ( const char* physname )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.c\cell\cell\row
Calls: \cell java_demangle()\cell jv-lang.c\cell\row
\cell java_find_last_component()\cell jv-lang.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Used in:\cell jv-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function java_create_fundamental_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* java_create_fundamental_type ( struct objfile* objfile, int jtypeid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell c_create_fundamental_type()\cell c-lang.c\cell\row
Used in:\cell jv-lang.c\cell\cell\row
Refs Var:\cell java_boolean_type\cell jv-lang.c\cell\row
\cell java_byte_type\cell jv-lang.c\cell\row
\cell java_char_type\cell jv-lang.c\cell\row
\cell java_double_type\cell jv-lang.c\cell\row
\cell java_float_type\cell jv-lang.c\cell\row
\cell java_int_type\cell jv-lang.c\cell\row
\cell java_long_type\cell jv-lang.c\cell\row
\cell java_short_type\cell jv-lang.c\cell\row
\cell java_void_type\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function java_demangle()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* java_demangle ( const char* mangled, int options )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  cplus_demangle()\cell\cell\row
Called by:\cell java_class_name_from_physname()\cell jv-lang.c\cell\row
Used in:\cell jv-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function java_demangled_signature_copy()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void java_demangled_signature_copy ( char* result, const char* signature )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.c\cell\cell\row
Calls: \cell java_primitive_type()\cell jv-lang.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), strlen()\cell\cell\row
Called by:\cell java_demangle_type_signature()\cell jv-lang.c\cell\row
\cell type_from_class()\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function java_demangled_signature_length()\par}
{\s5\f1\fs20\ql\sb50\sa50 static size_t java_demangled_signature_length ( const char* signature )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.c\cell\cell\row
Calls: \cell java_primitive_type()\cell jv-lang.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell java_demangle_type_signature()\cell jv-lang.c\cell\row
\cell type_from_class()\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function java_emit_char()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void java_emit_char ( int c, struct ui_file* stream, int quoter )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.c\cell\cell\row
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
\cell fputc_filtered()\cell utils.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell  isprint()\cell\cell\row
Used in:\cell jv-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function java_find_last_component()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* java_find_last_component ( const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  strchr()\cell\cell\row
Called by:\cell java_class_name_from_physname()\cell jv-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function java_value_string()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* java_value_string ( char* ptr, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell jv-lang.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Called by:\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\intbl0
}
