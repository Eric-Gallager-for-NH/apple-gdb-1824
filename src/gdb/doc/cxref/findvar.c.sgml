<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF findvar.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for findvar.c of gdb.cxref.
<author>cxref

<sect>File findvar.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;regcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;user-regs.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>

<sect1>Global Function address_to_signed_pointer()

<p><tt>void address_to_signed_pointer ( struct type* type, gdb_byte* buf, CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objc_fixup_class_length()  :  objc-lang.c
<item>store_signed_integer()  :  findvar.c
</itemize>
</descrip>

<sect1>Global Function extract_long_unsigned_integer()

<p><tt>int extract_long_unsigned_integer ( const gdb_byte* addr, int orig_len, long* pval )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_long_unsigned_integer_with_byte_order()  :  findvar.c
</itemize>
</descrip>

<sect1>Global Function extract_long_unsigned_integer_with_byte_order()

<p><tt>int extract_long_unsigned_integer_with_byte_order ( const gdb_byte* addr, int orig_len, long* pval, int byte_order )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_unsigned_integer()  :  findvar.c
<item>gdbarch_byte_order()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>extract_long_unsigned_integer()  :  findvar.c
<item>val_print_type_code_int()  :  valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function extract_signed_integer()

<p><tt>long extract_signed_integer ( const gdb_byte* addr, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_signed_integer_with_byte_order()  :  findvar.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_java()  :  jv-lang.c
<item>execute_stack_op()  :  dwarf2expr.c
<item>frame_unwind_register_signed()  :  frame.c
<item>java_value_print()  :  jv-valprint.c
<item>print_single_dwarf_location()  :  dwarf2loc.c
<item>read_memory_integer()  :  corefile.c
<item>regcache_cooked_read_signed()  :  regcache.c
<item>regcache_raw_read_signed()  :  regcache.c
<item>scm_get_field()  :  scm-lang.c
<item>scm_lreadr()  :  scm-exp.c
<item>scm_unpack()  :  scm-lang.c
<item>scm_val_print()  :  scm-valprint.c
<item>signed_pointer_to_address()  :  findvar.c
</itemize>
</descrip>

<sect1>Global Function extract_signed_integer_with_byte_order()

<p><tt>long extract_signed_integer_with_byte_order ( const gdb_byte* addr, int len, int byte_order )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>gdbarch_byte_order()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>extract_signed_integer()  :  findvar.c
<item>unpack_long()  :  value.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function extract_typed_address()

<p><tt>CORE_ADDR extract_typed_address ( const gdb_byte* buf, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_pointer_to_address()  :  gdbarch.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
<item>c_val_print()  :  c-valprint.c
<item>f_val_print()  :  f-valprint.c
<item>read_memory_typed_address()  :  corefile.c
<item>unpack_long()  :  value.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function extract_unsigned_integer()

<p><tt>unsigned long extract_unsigned_integer ( const gdb_byte* addr, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_unsigned_integer_with_byte_order()  :  findvar.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_printstr()  :  c-lang.c
<item>char_at()  :  ada-valprint.c
<item>dwarf2_read_address()  :  dwarf2expr.c
<item>dwarf_expr_read_reg()  :  dwarf2loc.c
<item>execute_cfa_program()  :  dwarf2-frame.c
<item>execute_stack_op()  :  dwarf2expr.c
<item>extract_long_unsigned_integer_with_byte_order()  :  findvar.c
<item>find_location_expression()  :  dwarf2loc.c
<item>frame_info()  :  stack.c
<item>frame_unwind_register_unsigned()  :  frame.c
<item>frame_unwind_unsigned_register()  :  frame.c
<item>get_target_memory_unsigned()  :  target/target.c
<item>java_value_print()  :  jv-valprint.c
<item>loclist_describe_location()  :  dwarf2loc.c
<item>modify_field()  :  value.c
<item>pascal_val_print()  :  p-valprint.c
<item>read_memory_unsigned_integer()  :  corefile.c
<item>read_reg()  :  dwarf2-frame.c
<item>read_register()  :  regcache.c
<item>read_target_long_array()  :  symfile.c
<item>regcache_cooked_read_unsigned()  :  regcache.c
<item>regcache_raw_read_unsigned()  :  regcache.c
<item>tramp_frame_start()  :  tramp-frame.c
<item>unpack_field_as_long()  :  value.c
<item>unsigned_pointer_to_address()  :  findvar.c
<item>val_print_string()  :  valprint.c
<item>value_cast_1()  :  valops.c
<item>x86_finalize_saved_reg_locations()  :  target/x86-shared-tdep.c
</itemize>
</descrip>

<sect1>Global Function extract_unsigned_integer_with_byte_order()

<p><tt>unsigned long extract_unsigned_integer_with_byte_order ( const gdb_byte* addr, int len, int byte_order )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>gdbarch_byte_order()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>extract_unsigned_integer()  :  findvar.c
<item>unpack_long()  :  value.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function locate_var_value()

<p><tt>struct value* locate_var_value ( struct symbol* var, struct frame_info* frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>deprecated_value_regnum_hack()  :  value.c
<item>error()  :  utils.c
<item>gdbarch_register_name()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>read_var_value()  :  findvar.c
<item>symbol_natural_name()  :  symtab.c
<item>value_from_pointer()  :  value.c
<item>value_lazy()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_for_address()  :  eval.c
<item>evaluate_subexp_with_coercion()  :  eval.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>demangle  :  utils.c
</itemize>
</descrip>

<sect1>Global Function read_var_value()

<p><tt>struct value* read_var_value ( struct symbol* var, struct frame_info* frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>deprecated_safe_get_selected_frame()  :  frame.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>error()  :  utils.c
<item>get_frame_args_address()  :  frame.c
<item>get_frame_block()  :  blockframe.c
<item>get_frame_locals_address()  :  frame.c
<item>internal_error()  :  utils.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>set_value_lazy()  :  value.c
<item>set_value_optimized_out()  :  value.c
<item>store_signed_integer()  :  findvar.c
<item>store_typed_address()  :  findvar.c
<item>symbol_overlayed_address()  :  symfile.c
<item>value_as_address()  :  value.c
<item>value_at()  :  valops.c
<item>value_contents_raw()  :  value.c
<item>value_from_register()  :  findvar.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>locate_var_value()  :  findvar.c
<item>print_frame_args()  :  stack.c
<item>print_variable_value()  :  printcmd.c
<item>value_of_local()  :  valops.c
<item>value_of_variable()  :  valops.c
<item>value_static_field()  :  value.c
<item>value_struct_elt_for_reference()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>overlay_debugging  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function signed_pointer_to_address()

<p><tt>CORE_ADDR signed_pointer_to_address ( struct type* type, const gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_signed_integer()  :  findvar.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function store_signed_integer()

<p><tt>void store_signed_integer ( gdb_byte* addr, int len, long val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>store_signed_integer_with_byte_order()  :  findvar.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>address_to_signed_pointer()  :  findvar.c
<item>pack_long()  :  value.c
<item>read_var_value()  :  findvar.c
<item>regcache_cooked_write_signed()  :  regcache.c
<item>regcache_raw_write_signed()  :  regcache.c
<item>value_binop()  :  valarith.c
<item>value_from_longest()  :  value.c
<item>write_inferior_status_register()  :  infrun.c
<item>write_memory_signed_integer()  :  corefile.c
<item>write_register()  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function store_signed_integer_with_byte_order()

<p><tt>void store_signed_integer_with_byte_order ( gdb_byte* addr, int len, long val, int byte_order )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_byte_order()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>store_signed_integer()  :  findvar.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function store_typed_address()

<p><tt>void store_typed_address ( gdb_byte* buf, struct type* type, CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_address_to_pointer()  :  gdbarch.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>pack_long()  :  value.c
<item>read_var_value()  :  findvar.c
<item>value_from_longest()  :  value.c
<item>value_from_pointer()  :  value.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function store_unsigned_integer()

<p><tt>void store_unsigned_integer ( gdb_byte* addr, int len, unsigned long val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>store_unsigned_integer_with_byte_order()  :  findvar.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_binop()  :  ada-lang.c
<item>dwarf2_const_value()  :  dwarf2read.c
<item>dwarf2_frame_prev_register()  :  dwarf2-frame.c
<item>modify_field()  :  value.c
<item>regcache_cooked_write_unsigned()  :  regcache.c
<item>regcache_raw_write_unsigned()  :  regcache.c
<item>trad_frame_get_prev_register()  :  trad-frame.c
<item>unsigned_address_to_pointer()  :  findvar.c
<item>value_binop()  :  valarith.c
<item>write_memory_unsigned_integer()  :  corefile.c
<item>x86_frame_prev_register()  :  target/x86-shared-tdep.c
</itemize>
</descrip>

<sect1>Global Function store_unsigned_integer_with_byte_order()

<p><tt>void store_unsigned_integer_with_byte_order ( gdb_byte* addr, int len, unsigned long val, int byte_order )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_byte_order()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>store_unsigned_integer()  :  findvar.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function symbol_read_needs_frame()

<p><tt>int symbol_read_needs_frame ( struct symbol* sym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>f_parse()  :  f-exp.c
<item>m2_parse()  :  m2-exp.c
<item>objc_parse()  :  objc-exp.c
<item>pascal_parse()  :  p-exp.c
<item>push_variable()  :  jv-exp.c
<item>value_of_variable()  :  valops.c
<item>value_static_field()  :  value.c
<item>write_var_from_sym()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function unsigned_address_to_pointer()

<p><tt>void unsigned_address_to_pointer ( struct type* type, gdb_byte* buf, CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objc_fixup_class_length()  :  objc-lang.c
<item>store_unsigned_integer()  :  findvar.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function unsigned_pointer_to_address()

<p><tt>CORE_ADDR unsigned_pointer_to_address ( struct type* type, const gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_unsigned_integer()  :  findvar.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function value_from_register()

<p><tt>struct value* value_from_register ( struct type* type, int regnum, struct frame_info* frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_frame_id_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>deprecated_value_regnum_hack()  :  value.c
<item>frame_register()  :  frame.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>gdbarch_convert_register_p()  :  gdbarch.c
<item>gdbarch_register_to_value()  :  gdbarch.c
<item>get_frame_id()  :  frame.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>register_cached()  :  regcache.c
<item>register_size()  :  regcache.c
<item>set_value_offset()  :  value.c
<item>set_value_optimized_out()  :  value.c
<item>value_contents_raw()  :  value.c
<item>value_offset()  :  value.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_evaluate_loc_desc()  :  dwarf2loc.c
<item>read_var_value()  :  findvar.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function value_of_register()

<p><tt>struct value* value_of_register ( int regnum, struct frame_info* frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_frame_id_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>deprecated_value_regnum_hack()  :  value.c
<item>frame_register()  :  frame.c
<item>gdbarch_num_pseudo_regs()  :  gdbarch.c
<item>gdbarch_num_regs()  :  gdbarch.c
<item>get_frame_id()  :  frame.c
<item>register_cached()  :  regcache.c
<item>register_size()  :  regcache.c
<item>register_type()  :  regcache.c
<item>set_value_optimized_out()  :  value.c
<item>value_contents_raw()  :  value.c
<item>value_of_user_reg()  :  user-regs.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
<item>value_of_builtin_frame_fp_reg()  :  std-regs.c
<item>value_of_builtin_frame_pc_reg()  :  std-regs.c
<item>value_of_builtin_frame_ps_reg()  :  std-regs.c
<item>value_of_builtin_frame_sp_reg()  :  std-regs.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

</article>
