<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF ui-out.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for ui-out.c of gdb.cxref.
<author>cxref

<sect>File ui-out.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>default_begin()  :  ui-out.c
<item>default_end()  :  ui-out.c
<item>default_field_fmt()  :  ui-out.c
<item>default_field_int()  :  ui-out.c
<item>default_field_skip()  :  ui-out.c
<item>default_field_string()  :  ui-out.c
<item>default_flush()  :  ui-out.c
<item>default_message()  :  ui-out.c
<item>default_notify_begin()  :  ui-out.c
<item>default_notify_end()  :  ui-out.c
<item>default_spaces()  :  ui-out.c
<item>default_table_begin()  :  ui-out.c
<item>default_table_body()  :  ui-out.c
<item>default_table_end()  :  ui-out.c
<item>default_table_header()  :  ui-out.c
<item>default_text()  :  ui-out.c
<item>default_text_fmt()  :  ui-out.c
<item>default_wrap_hint()  :  ui-out.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>def_uiout  :  ui-out.c
<item>default_ui_out_impl  :  ui-out.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>

<sect1>Type struct ui_out_hdr

<p>
<itemize>
<item><tt>struct ui_out_hdr</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int colno;</tt><newline>
<item><tt>int width;</tt><newline>
<item><tt>int alignment;</tt><newline>
<item><tt>char* col_name;</tt><newline>
<item><tt>char* colhdr;</tt><newline>
<item><tt>struct ui_out_hdr* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct ui_out_level

<p>
<itemize>
<item><tt>struct ui_out_level</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int field_count;</tt><newline>
<item><tt>enum ui_out_type type;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct ui_out_table

<p>
<itemize>
<item><tt>struct ui_out_table</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int flag;</tt><newline>
<item><tt>int body_flag;</tt><newline>
<item><tt>int entry_level;</tt><newline>
<item><tt>int columns;</tt><newline>
<item><tt>char* id;</tt><newline>
<item><tt>struct ui_out_hdr* header_first;</tt><newline>
<item><tt>struct ui_out_hdr* header_last;</tt><newline>
<item><tt>struct ui_out_hdr* header_next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct ui_out

<p>
<itemize>
<item><tt>struct ui_out</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int flags;</tt><newline>
<item><tt>struct ui_out_impl* impl;</tt><newline>
<item><tt>struct ui_out_data* data;</tt><newline>
<item><tt>int level;</tt><newline>
<item><tt>struct ui_out_level levels[MAX_UI_OUT_LEVELS];</tt><newline>
<item><tt>struct ui_out_table table;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct ui_out_end_cleanup_data

<p>
<itemize>
<item><tt>struct ui_out_end_cleanup_data</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct ui_out* uiout;</tt><newline>
<item><tt>enum ui_out_type type;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable uiout

<p>
<tt>struct ui_out* uiout</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>blockframe.c
<item>breakpoint.c
<item>charset.c
<item>cli-out.c
<item>complaints.c
<item>completer.c
<item>corefile.c
<item>cp-abi.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>demangle.c
<item>disasm.c
<item>dummy-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>event-loop.c
<item>event-top.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>interps.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>macrocmd.c
<item>main.c
<item>maint.c
<item>memattr.c
<item>objc-lang.c
<item>objfiles.c
<item>observer.c
<item>osabi.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>reggroups.c
<item>remote-fileio.c
<item>remote.c
<item>serial.c
<item>solib.c
<item>source.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>typeprint.c
<item>ui-out.c
<item>utils.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>add_dsym_command()  :  symfile.c
<item>add_vsyscall_page()  :  symfile-mem.c
<item>backtrace_command_1()  :  stack.c
<item>bpstat_do_actions()  :  breakpoint.c
<item>break_command_2()  :  breakpoint.c
<item>breakpoint_1()  :  breakpoint.c
<item>check_bfd_for_matching_uuid()  :  symfile.c
<item>decode_all_digits_exhaustive()  :  linespec.c
<item>decode_objc()  :  linespec.c
<item>do_check_is_thread_unsafe()  :  valops.c
<item>do_end_debugger_mode()  :  objc-lang.c
<item>do_restore_output()  :  utils.c
<item>do_restore_uiout_cleanup()  :  utils.c
<item>dwarf_expr_tls_address()  :  dwarf2loc.c
<item>enable_breakpoint()  :  breakpoint.c
<item>field_separator()  :  cli-out.c
<item>find_implementation_from_class()  :  objc-lang.c
<item>find_method()  :  linespec.c
<item>find_pc_offset()  :  disasm.c
<item>fsf_gdb_breakpoint()  :  breakpoint.c
<item>gdb_evaluate_expression()  :  wrapper.c
<item>gdb_evaluate_type()  :  wrapper.c
<item>gdb_parse_and_eval_type()  :  wrapper.c
<item>gdb_parse_exp_1()  :  wrapper.c
<item>gdb_print_expression()  :  wrapper.c
<item>gdb_print_insn()  :  disasm.c
<item>gdb_value_assign()  :  wrapper.c
<item>gdb_value_cast()  :  wrapper.c
<item>gdb_value_equal()  :  wrapper.c
<item>gdb_value_fetch_lazy()  :  wrapper.c
<item>gdb_value_ind()  :  wrapper.c
<item>gdb_value_subscript()  :  wrapper.c
<item>gdb_varobj_get_value()  :  wrapper.c
<item>generic_load()  :  symfile.c
<item>get_binary_file_uuids()  :  utils.c
<item>get_class_address_from_object()  :  objc-lang.c
<item>get_closure_dynamic_type()  :  gdbtypes.c
<item>get_closure_implementation_fn()  :  gdbtypes.c
<item>get_current_frame()  :  frame.c
<item>hand_function_call()  :  infcall.c
<item>handle_inferior_event()  :  infrun.c
<item>inferior_event_handler()  :  inf-loop.c
<item>info_threads_command()  :  thread.c
<item>insert_bp_location()  :  breakpoint.c
<item>interp_set()  :  interps.c
<item>kill_command()  :  inflow.c
<item>length_of_this_instruction()  :  target/target.c
<item>list_cp_abis()  :  cp-abi.c
<item>list_interpreter_cmd()  :  interps.c
<item>load_section_callback()  :  symfile.c
<item>make_cleanup_init_objc_exception_catcher()  :  objc-lang.c
<item>make_cleanup_set_restore_debugger_mode()  :  objc-lang.c
<item>make_cleanup_ui_out_suppress_output()  :  utils.c
<item>mention()  :  breakpoint.c
<item>new_objc_runtime_class_getClass()  :  objc-lang.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>new_objc_runtime_get_classname()  :  objc-lang.c
<item>normal_stop()  :  infrun.c
<item>objc_init_trampoline_observer()  :  objc-lang.c
<item>objc_runtime_lock_taken_p()  :  objc-lang.c
<item>objc_setup_safe_print()  :  objc-lang.c
<item>pid_info()  :  infcmd.c
<item>print_catch_info()  :  breakpoint.c
<item>print_exception_catchpoint()  :  breakpoint.c
<item>print_frame()  :  stack.c
<item>print_frame_args()  :  stack.c
<item>print_frame_info()  :  stack.c
<item>print_inlined_frame()  :  inlining.c
<item>print_it_typical()  :  breakpoint.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>print_one_exception_catchpoint()  :  breakpoint.c
<item>print_return_value()  :  infcmd.c
<item>print_source_lines_base()  :  source.c
<item>print_stop_reason()  :  infrun.c
<item>print_transfer_performance()  :  symfile.c
<item>read_objc_object()  :  objc-lang.c
<item>record_currthread()  :  remote.c
<item>remote_fileio_request()  :  remote-fileio.c
<item>remote_macosx_complete_create_or_attach()  :  remote.c
<item>remote_open_1()  :  remote.c
<item>report_timer_internal()  :  maint.c
<item>return_command()  :  stack.c
<item>run_command_1()  :  infcmd.c
<item>safe_value_objc_target_type()  :  wrapper.c
<item>safe_value_rtti_target_type()  :  varobj.c
<item>show_cp_abi_cmd()  :  cp-abi.c
<item>show_endian()  :  arch-utils.c
<item>start_event_loop()  :  event-loop.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
<item>thread_apply_all_command()  :  thread.c
<item>thread_command()  :  thread.c
<item>type_sprint_quoted()  :  typeprint.c
<item>value_assign()  :  valops.c
<item>value_full_object()  :  valops.c
<item>varobj_delete_objfiles_vars()  :  varobj.c
<item>varobj_value_struct_elt_by_index()  :  varobj.c
<item>watchpoint_check()  :  breakpoint.c
<item>x86_frame_this_id()  :  target/x86-shared-tdep.c
</itemize>
</descrip>

<sect1>Global Variable ui_out_c_inited

<p>
<tt>int ui_out_c_inited</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>blockframe.c
<item>breakpoint.c
<item>charset.c
<item>cli-out.c
<item>complaints.c
<item>completer.c
<item>corefile.c
<item>cp-abi.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>demangle.c
<item>disasm.c
<item>dummy-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>event-loop.c
<item>event-top.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>interps.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>macrocmd.c
<item>main.c
<item>maint.c
<item>memattr.c
<item>objc-lang.c
<item>objfiles.c
<item>observer.c
<item>osabi.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>reggroups.c
<item>remote-fileio.c
<item>remote.c
<item>serial.c
<item>solib.c
<item>source.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>typeprint.c
<item>ui-out.c
<item>utils.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ui_out()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Variable default_ui_out_impl

<p>
<tt>struct ui_out_impl default_ui_out_impl</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Global Variable def_uiout

<p>
<tt>struct ui_out def_uiout</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>ui_out_annotation_printer</bf><newline>
<tt>static void (*ui_out_annotation_printer)(const char*,const char*)</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>ui_out_print_annotation_string()
<item>ui_out_set_annotation_printer()
</itemize>
</descrip>

<sect1>Global Function _initialize_ui_out()

<p><tt>void _initialize_ui_out ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ui_out_c_inited  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function access_ui_out_data()

<p><tt>struct ui_out_data* access_ui_out_data ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cli_begin()  :  cli-out.c
<item>cli_end()  :  cli-out.c
<item>cli_field_fmt()  :  cli-out.c
<item>cli_field_int()  :  cli-out.c
<item>cli_field_skip()  :  cli-out.c
<item>cli_field_string()  :  cli-out.c
<item>cli_flush()  :  cli-out.c
<item>cli_message()  :  cli-out.c
<item>cli_out_set_stream()  :  cli-out.c
<item>cli_redirect()  :  cli-out.c
<item>cli_spaces()  :  cli-out.c
<item>cli_table_begin()  :  cli-out.c
<item>cli_table_body()  :  cli-out.c
<item>cli_table_end()  :  cli-out.c
<item>cli_table_header()  :  cli-out.c
<item>cli_text()  :  cli-out.c
<item>cli_text_fmt()  :  cli-out.c
<item>cli_wrap_hint()  :  cli-out.c
<item>field_separator()  :  cli-out.c
<item>out_field_fmt()  :  cli-out.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_ui_out_list_begin_end()

<p><tt>struct cleanup* make_cleanup_ui_out_list_begin_end ( struct ui_out* uiout, const char* id )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup_ui_out_end()  :  ui-out.c
<item>ui_out_begin()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
<item>breakpoint_print_commands()  :  breakpoint.c
<item>do_assembly_only()  :  disasm.c
<item>do_captured_list_thread_ids()  :  thread.c
<item>do_mixed_source_and_assembly()  :  disasm.c
<item>list_interpreter_cmd()  :  interps.c
<item>print_frame()  :  stack.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_ui_out_notify_begin_end()

<p><tt>struct cleanup* make_cleanup_ui_out_notify_begin_end ( struct ui_out* uiout, const char* class_in )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
<item>ui_out_notify_begin()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_do_actions()  :  breakpoint.c
<item>check_bfd_for_matching_uuid()  :  symfile.c
<item>print_stop_reason()  :  infrun.c
<item>report_timer_internal()  :  maint.c
<item>varobj_delete_objfiles_vars()  :  varobj.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>ui_out_notify_end()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_ui_out_stream_delete()

<p><tt>struct cleanup* make_cleanup_ui_out_stream_delete ( struct ui_stream* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdb_disassembly()  :  disasm.c
<item>gdb_print_insn()  :  disasm.c
<item>mention()  :  breakpoint.c
<item>print_frame()  :  stack.c
<item>print_frame_args()  :  stack.c
<item>print_inlined_frame()  :  inlining.c
<item>print_it_typical()  :  breakpoint.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>print_return_value()  :  infcmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_stream_delete()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_ui_out_table_begin_end()

<p><tt>struct cleanup* make_cleanup_ui_out_table_begin_end ( struct ui_out* ui_out, int nr_cols, int nr_rows, const char* tblid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
<item>ui_out_table_begin()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_1()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_cleanup_table_end()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_ui_out_tuple_begin_end()

<p><tt>struct cleanup* make_cleanup_ui_out_tuple_begin_end ( struct ui_out* uiout, const char* id )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup_ui_out_end()  :  ui-out.c
<item>ui_out_begin()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_dsym_command()  :  symfile.c
<item>do_captured_list_thread_ids()  :  thread.c
<item>do_check_is_thread_unsafe()  :  valops.c
<item>do_mixed_source_and_assembly()  :  disasm.c
<item>dump_insns()  :  disasm.c
<item>gdb_print_insn()  :  disasm.c
<item>list_cp_abis()  :  cp-abi.c
<item>mention()  :  breakpoint.c
<item>print_frame()  :  stack.c
<item>print_frame_args()  :  stack.c
<item>print_frame_info()  :  stack.c
<item>print_inlined_frame()  :  inlining.c
<item>print_inlined_frames_lite()  :  inlining.c
<item>print_it_typical()  :  breakpoint.c
<item>print_one_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function ui_out_begin()

<p><tt>void ui_out_begin ( struct ui_out* uiout, enum ui_out_type type, const char* id )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>push_level()  :  ui-out.c
<item>uo_begin()  :  ui-out.c
<item>verify_field()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_cleanup_ui_out_list_begin_end()  :  ui-out.c
<item>make_cleanup_ui_out_tuple_begin_end()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function ui_out_cleanup_after_error()

<p><tt>void ui_out_cleanup_after_error ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>current_level()  :  ui-out.c
<item>ui_out_end()  :  ui-out.c
<item>ui_out_table_end()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function ui_out_clear_flags()

<p><tt>int ui_out_clear_flags ( struct ui_out* uiout, int mask )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
</descrip>

<sect1>Global Function ui_out_delete()

<p><tt>void ui_out_delete ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_ui_out_delete()  :  utils.c
</itemize>
</descrip>

<sect1>Global Function ui_out_end()

<p><tt>void ui_out_end ( struct ui_out* uiout, enum ui_out_type type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>pop_level()  :  ui-out.c
<item>uo_end()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_cleanup_end()  :  ui-out.c
<item>ui_out_cleanup_after_error()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function ui_out_field_core_addr()

<p><tt>void ui_out_field_core_addr ( struct ui_out* uiout, const char* fldname, CORE_ADDR address )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_addr_bit()  :  gdbarch.c
<item>hex_string_custom()  :  utils.c
<item>ui_out_field_string()  :  ui-out.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
<item>dump_insns()  :  disasm.c
<item>print_frame()  :  stack.c
<item>print_frame_info()  :  stack.c
<item>print_inlined_frame()  :  inlining.c
<item>print_inlined_frames_lite()  :  inlining.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>print_one_exception_catchpoint()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function ui_out_field_fmt()

<p><tt>void ui_out_field_fmt ( struct ui_out* uiout, const char* fldname, const char* format, ... )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>uo_field_fmt()  :  ui-out.c
<item>verify_field()  :  ui-out.c
<item>__builtin_va_end(), __builtin_va_start()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_check_is_thread_unsafe()  :  valops.c
<item>generic_load()  :  symfile.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>print_return_value()  :  infcmd.c
<item>print_stop_reason()  :  infrun.c
<item>print_transfer_performance()  :  symfile.c
<item>report_timer_internal()  :  maint.c
</itemize>
</descrip>

<sect1>Global Function ui_out_field_fmt_int()

<p><tt>void ui_out_field_fmt_int ( struct ui_out* uiout, int input_width, enum ui_align input_align, const char* fldname, int value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>uo_field_int()  :  ui-out.c
<item>verify_field()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_frame()  :  stack.c
<item>print_frame_info()  :  stack.c
<item>print_inlined_frame()  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function ui_out_field_int()

<p><tt>void ui_out_field_int ( struct ui_out* uiout, const char* fldname, int value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>uo_field_int()  :  ui-out.c
<item>verify_field()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
<item>do_captured_list_thread_ids()  :  thread.c
<item>do_captured_thread_select()  :  thread.c
<item>do_check_is_thread_unsafe()  :  valops.c
<item>dump_insns()  :  disasm.c
<item>enable_breakpoint()  :  breakpoint.c
<item>info_threads_command()  :  thread.c
<item>mention()  :  breakpoint.c
<item>pid_info()  :  infcmd.c
<item>print_catch_info()  :  breakpoint.c
<item>print_frame()  :  stack.c
<item>print_inlined_frame()  :  inlining.c
<item>print_inlined_frames_lite()  :  inlining.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>print_source_lines_base()  :  source.c
<item>watchpoint_check()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function ui_out_field_skip()

<p><tt>void ui_out_field_skip ( struct ui_out* uiout, const char* fldname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>uo_field_skip()  :  ui-out.c
<item>verify_field()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
<item>print_catch_info()  :  breakpoint.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>ui_out_field_stream()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function ui_out_field_stream()

<p><tt>void ui_out_field_stream ( struct ui_out* uiout, const char* fldname, struct ui_stream* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>ui_file_rewind()  :  ui-file.c
<item>ui_file_xstrdup()  :  ui-file.c
<item>ui_out_field_skip()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dump_insns()  :  disasm.c
<item>gdb_print_insn()  :  disasm.c
<item>mention()  :  breakpoint.c
<item>print_frame()  :  stack.c
<item>print_frame_args()  :  stack.c
<item>print_inlined_frame()  :  inlining.c
<item>print_it_typical()  :  breakpoint.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>print_return_value()  :  infcmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
</descrip>

<sect1>Global Function ui_out_field_string()

<p><tt>void ui_out_field_string ( struct ui_out* uiout, const char* fldname, const char* string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>uo_field_string()  :  ui-out.c
<item>verify_field()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_dsym_command()  :  symfile.c
<item>break_command_2()  :  breakpoint.c
<item>check_bfd_for_matching_uuid()  :  symfile.c
<item>do_captured_thread_select()  :  thread.c
<item>dump_insns()  :  disasm.c
<item>inferior_event_handler()  :  inf-loop.c
<item>info_threads_command()  :  thread.c
<item>list_cp_abis()  :  cp-abi.c
<item>list_interpreter_cmd()  :  interps.c
<item>mention()  :  breakpoint.c
<item>print_catch_info()  :  breakpoint.c
<item>print_frame()  :  stack.c
<item>print_frame_info()  :  stack.c
<item>print_inlined_frame()  :  inlining.c
<item>print_inlined_frames_lite()  :  inlining.c
<item>print_it_typical()  :  breakpoint.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>print_one_exception_catchpoint()  :  breakpoint.c
<item>print_return_value()  :  infcmd.c
<item>print_source_lines_base()  :  source.c
<item>report_timer_internal()  :  maint.c
<item>run_command_1()  :  infcmd.c
<item>show_cp_abi_cmd()  :  cp-abi.c
<item>show_endian()  :  arch-utils.c
<item>ui_out_field_core_addr()  :  ui-out.c
<item>ui_out_field_stream()  :  ui-out.c
<item>ui_out_print_annotation_string()  :  ui-out.c
<item>varobj_delete_objfiles_vars()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function ui_out_flush()

<p><tt>void ui_out_flush ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>uo_flush()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>interp_set()  :  interps.c
<item>pid_info()  :  infcmd.c
<item>run_command_1()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function ui_out_get_field_separator()

<p><tt>void ui_out_get_field_separator ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
</descrip>

<sect1>Global Function ui_out_get_verblvl()

<p><tt>int ui_out_get_verblvl ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cli_message()  :  cli-out.c
</itemize>
</descrip>

<sect1>Global Function ui_out_is_mi_like_p()

<p><tt>int ui_out_is_mi_like_p ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_do_actions()  :  breakpoint.c
<item>break_command_2()  :  breakpoint.c
<item>check_bfd_for_matching_uuid()  :  symfile.c
<item>decode_objc()  :  linespec.c
<item>enable_breakpoint()  :  breakpoint.c
<item>find_method()  :  linespec.c
<item>find_pc_offset()  :  disasm.c
<item>hand_function_call()  :  infcall.c
<item>handle_inferior_event()  :  infrun.c
<item>inferior_event_handler()  :  inf-loop.c
<item>kill_command()  :  inflow.c
<item>mention()  :  breakpoint.c
<item>normal_stop()  :  infrun.c
<item>print_exception_catchpoint()  :  breakpoint.c
<item>print_frame()  :  stack.c
<item>print_frame_info()  :  stack.c
<item>print_inlined_frame()  :  inlining.c
<item>print_it_typical()  :  breakpoint.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>print_stop_reason()  :  infrun.c
<item>show_endian()  :  arch-utils.c
<item>ui_out_print_annotation_string()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function ui_out_message()

<p><tt>void ui_out_message ( struct ui_out* uiout, int verbosity, const char* format, ... )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>uo_message()  :  ui-out.c
<item>__builtin_va_end(), __builtin_va_start()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_1()  :  breakpoint.c
<item>dump_insns()  :  disasm.c
<item>gdb_print_insn()  :  disasm.c
<item>load_section_callback()  :  symfile.c
</itemize>
</descrip>

<sect1>Global Function ui_out_new()

<p><tt>struct ui_out* ui_out_new ( struct ui_out_impl* impl, struct ui_out_data* data, int flags )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cli_out_new()  :  cli-out.c
<item>cli_quoted_out_new()  :  cli-out.c
</itemize>
</descrip>

<sect1>Global Function ui_out_print_annotation_int()

<p><tt>void ui_out_print_annotation_int ( struct ui_out* uiout, int tee, const char* name, const int value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ui_out_print_annotation_string()  :  ui-out.c
<item>__builtin___snprintf_chk(), __builtin_object_size()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>normal_stop()  :  infrun.c
<item>print_it_typical()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function ui_out_print_annotation_string()

<p><tt>void ui_out_print_annotation_string ( struct ui_out* uiout, int tee, const char* name, const char* reason )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
<item>ui_out_annotation_printer()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>normal_stop()  :  infrun.c
<item>print_exception_catchpoint()  :  breakpoint.c
<item>print_it_typical()  :  breakpoint.c
<item>print_stop_reason()  :  infrun.c
<item>ui_out_print_annotation_int()  :  ui-out.c
<item>watchpoint_check()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ui_out_annotation_printer  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function ui_out_redirect()

<p><tt>int ui_out_redirect ( struct ui_out* uiout, struct ui_file* outstream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>uo_redirect()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function ui_out_set_annotation_printer()

<p><tt>void ui_out_set_annotation_printer ( void (*printer)(const char*,const char*) )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ui_out_annotation_printer  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function ui_out_set_flags()

<p><tt>int ui_out_set_flags ( struct ui_out* uiout, int mask )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
</descrip>

<sect1>Global Function ui_out_spaces()

<p><tt>void ui_out_spaces ( struct ui_out* uiout, int numspaces )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>uo_spaces()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cli_field_string()  :  cli-out.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>print_one_exception_catchpoint()  :  breakpoint.c
<item>run_command_1()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function ui_out_stream_delete()

<p><tt>void ui_out_stream_delete ( struct ui_stream* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ui_file_delete()  :  ui-file.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_stream_delete()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function ui_out_stream_new()

<p><tt>struct ui_stream* ui_out_stream_new ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>mem_fileopen()  :  ui-file.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdb_disassembly()  :  disasm.c
<item>gdb_print_insn()  :  disasm.c
<item>length_of_this_instruction()  :  target/target.c
<item>mention()  :  breakpoint.c
<item>print_frame()  :  stack.c
<item>print_frame_args()  :  stack.c
<item>print_inlined_frame()  :  inlining.c
<item>print_it_typical()  :  breakpoint.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>print_return_value()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function ui_out_table_body()

<p><tt>void ui_out_table_body ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>uo_table_body()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function ui_out_table_header()

<p><tt>void ui_out_table_header ( struct ui_out* uiout, int width, enum ui_align alignment, const char* col_name, const char* colhdr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>append_header_to_list()  :  ui-out.c
<item>internal_error()  :  utils.c
<item>uo_table_header()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function ui_out_test_flags()

<p><tt>int ui_out_test_flags ( struct ui_out* uiout, int mask )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_source_lines_base()  :  source.c
</itemize>
</descrip>

<sect1>Global Function ui_out_text()

<p><tt>void ui_out_text ( struct ui_out* uiout, const char* string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>uo_text()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_dsym_command()  :  symfile.c
<item>do_captured_thread_select()  :  thread.c
<item>do_check_is_thread_unsafe()  :  valops.c
<item>do_mixed_source_and_assembly()  :  disasm.c
<item>dump_insns()  :  disasm.c
<item>gdb_print_insn()  :  disasm.c
<item>generic_load()  :  symfile.c
<item>handle_inferior_event()  :  infrun.c
<item>info_threads_command()  :  thread.c
<item>interp_set()  :  interps.c
<item>list_cp_abis()  :  cp-abi.c
<item>list_interpreter_cmd()  :  interps.c
<item>mention()  :  breakpoint.c
<item>pid_info()  :  infcmd.c
<item>print_catch_info()  :  breakpoint.c
<item>print_frame()  :  stack.c
<item>print_frame_args()  :  stack.c
<item>print_frame_info()  :  stack.c
<item>print_inlined_frame()  :  inlining.c
<item>print_inlined_frames_lite()  :  inlining.c
<item>print_it_typical()  :  breakpoint.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>print_return_value()  :  infcmd.c
<item>print_source_lines_base()  :  source.c
<item>print_stop_reason()  :  infrun.c
<item>print_transfer_performance()  :  symfile.c
<item>record_currthread()  :  remote.c
<item>report_timer_internal()  :  maint.c
<item>run_command_1()  :  infcmd.c
<item>show_cp_abi_cmd()  :  cp-abi.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
<item>watchpoint_check()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function ui_out_text_fmt()

<p><tt>void ui_out_text_fmt ( struct ui_out* uiout, const char* format, ... )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>uo_text_fmt()  :  ui-out.c
<item>__builtin_va_end(), __builtin_va_start()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>info_threads_command()  :  thread.c
<item>print_source_lines_base()  :  source.c
<item>return_command()  :  stack.c
</itemize>
</descrip>

<sect1>Global Function ui_out_wrap_hint()

<p><tt>void ui_out_wrap_hint ( struct ui_out* uiout, const char* identstring )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>uo_wrap_hint()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_frame()  :  stack.c
<item>print_frame_args()  :  stack.c
<item>print_inlined_frame()  :  inlining.c
<item>print_one_breakpoint()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function uo_begin()

<p><tt>void uo_begin ( struct ui_out* uiout, enum ui_out_type type, int level, const char* id )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_begin()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function uo_end()

<p><tt>void uo_end ( struct ui_out* uiout, enum ui_out_type type, int level )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_end()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function uo_field_fmt()

<p><tt>void uo_field_fmt ( struct ui_out* uiout, int fldno, int width, enum ui_align align, const char* fldname, const char* format, va_list args )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_field_fmt()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function uo_field_int()

<p><tt>void uo_field_int ( struct ui_out* uiout, int fldno, int width, enum ui_align align, const char* fldname, int value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_field_fmt_int()  :  ui-out.c
<item>ui_out_field_int()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function uo_field_skip()

<p><tt>void uo_field_skip ( struct ui_out* uiout, int fldno, int width, enum ui_align align, const char* fldname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_field_skip()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function uo_field_string()

<p><tt>void uo_field_string ( struct ui_out* uiout, int fldno, int width, enum ui_align align, const char* fldname, const char* string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_field_string()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function uo_flush()

<p><tt>void uo_flush ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_flush()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function uo_message()

<p><tt>void uo_message ( struct ui_out* uiout, int verbosity, const char* format, va_list args )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_message()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function uo_redirect()

<p><tt>int uo_redirect ( struct ui_out* uiout, struct ui_file* outstream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_redirect()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function uo_spaces()

<p><tt>void uo_spaces ( struct ui_out* uiout, int numspaces )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_spaces()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function uo_table_begin()

<p><tt>void uo_table_begin ( struct ui_out* uiout, int nbrofcols, int nr_rows, const char* tblid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_table_begin()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function uo_table_body()

<p><tt>void uo_table_body ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_table_body()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function uo_table_end()

<p><tt>void uo_table_end ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_table_end()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function uo_table_header()

<p><tt>void uo_table_header ( struct ui_out* uiout, int width, enum ui_align align, const char* col_name, const char* colhdr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_table_header()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function uo_text()

<p><tt>void uo_text ( struct ui_out* uiout, const char* string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_text()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function uo_text_fmt()

<p><tt>void uo_text_fmt ( struct ui_out* uiout, const char* format, va_list args )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_text_fmt()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function uo_wrap_hint()

<p><tt>void uo_wrap_hint ( struct ui_out* uiout, const char* identstring )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_wrap_hint()  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function append_header_to_list()

<p><tt>static void append_header_to_list ( struct ui_out* uiout, int width, int alignment, const char* col_name, const char* colhdr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_table_header()  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function clear_header_list()

<p><tt>static void clear_header_list ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_table_begin()  :  ui-out.c
<item>ui_out_table_end()  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function current_level()

<p><tt>static struct ui_out_level* current_level ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>pop_level()  :  ui-out.c
<item>push_level()  :  ui-out.c
<item>ui_out_cleanup_after_error()  :  ui-out.c
<item>verify_field()  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function default_begin()

<p><tt>static void default_begin ( struct ui_out* uiout, enum ui_out_type type, int level, const char* id )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Function default_end()

<p><tt>static void default_end ( struct ui_out* uiout, enum ui_out_type type, int level )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Function default_field_fmt()

<p><tt>static void default_field_fmt ( struct ui_out* uiout, int fldno, int width, enum ui_align align, const char* fldname, const char* format, va_list args )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Function default_field_int()

<p><tt>static void default_field_int ( struct ui_out* uiout, int fldno, int width, enum ui_align align, const char* fldname, int value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Function default_field_skip()

<p><tt>static void default_field_skip ( struct ui_out* uiout, int fldno, int width, enum ui_align align, const char* fldname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Function default_field_string()

<p><tt>static void default_field_string ( struct ui_out* uiout, int fldno, int width, enum ui_align align, const char* fldname, const char* string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Function default_flush()

<p><tt>static void default_flush ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Function default_message()

<p><tt>static void default_message ( struct ui_out* uiout, int verbosity, const char* format, va_list args )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Function default_notify_begin()

<p><tt>static void default_notify_begin ( struct ui_out* uiout, const char* unused_class )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Function default_notify_end()

<p><tt>static void default_notify_end ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Function default_spaces()

<p><tt>static void default_spaces ( struct ui_out* uiout, int numspaces )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Function default_table_begin()

<p><tt>static void default_table_begin ( struct ui_out* uiout, int nbrofcols, int nr_rows, const char* tblid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Function default_table_body()

<p><tt>static void default_table_body ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Function default_table_end()

<p><tt>static void default_table_end ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Function default_table_header()

<p><tt>static void default_table_header ( struct ui_out* uiout, int width, enum ui_align alignment, const char* col_name, const char* colhdr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Function default_text()

<p><tt>static void default_text ( struct ui_out* uiout, const char* string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Function default_text_fmt()

<p><tt>static void default_text_fmt ( struct ui_out* uiout, const char* format, va_list args )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Function default_wrap_hint()

<p><tt>static void default_wrap_hint ( struct ui_out* uiout, const char* identstring )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ui-out.c
</itemize>
</descrip>

<sect1>Local Function do_cleanup_end()

<p><tt>static void do_cleanup_end ( void* data )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ui_out_end()  :  ui-out.c
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_ui_out_end()  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function do_cleanup_table_end()

<p><tt>static void do_cleanup_table_end ( void* data )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ui_out_table_end()  :  ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_ui_out_table_begin_end()  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function do_stream_delete()

<p><tt>static void do_stream_delete ( void* buf )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ui_out_stream_delete()  :  ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_ui_out_stream_delete()  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function get_next_header()

<p><tt>static int get_next_header ( struct ui_out* uiout, int* colno, int* width, int* alignment, char** colhdr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>verify_field()  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function make_cleanup_ui_out_end()

<p><tt>static struct cleanup* make_cleanup_ui_out_end ( struct ui_out* uiout, enum ui_out_type type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_cleanup_ui_out_list_begin_end()  :  ui-out.c
<item>make_cleanup_ui_out_tuple_begin_end()  :  ui-out.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_cleanup_end()  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function pop_level()

<p><tt>static int pop_level ( struct ui_out* uiout, enum ui_out_type type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>current_level()  :  ui-out.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_end()  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function push_level()

<p><tt>static int push_level ( struct ui_out* uiout, enum ui_out_type type, const char* id )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>current_level()  :  ui-out.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_begin()  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function ui_out_notify_begin()

<p><tt>static void ui_out_notify_begin ( struct ui_out* uiout, const char* the_class )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>uo_notify_begin()  :  ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_cleanup_ui_out_notify_begin_end()  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function ui_out_notify_end()

<p><tt>static void ui_out_notify_end ( void* uiout )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>uo_notify_end()  :  ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_ui_out_notify_begin_end()  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function ui_out_table_begin()

<p><tt>static void ui_out_table_begin ( struct ui_out* uiout, int nbrofcols, int nr_rows, const char* tblid )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>clear_header_list()  :  ui-out.c
<item>internal_error()  :  utils.c
<item>uo_table_begin()  :  ui-out.c
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_cleanup_ui_out_table_begin_end()  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function ui_out_table_end()

<p><tt>static void ui_out_table_end ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_header_list()  :  ui-out.c
<item>internal_error()  :  utils.c
<item>uo_table_end()  :  ui-out.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_cleanup_table_end()  :  ui-out.c
<item>ui_out_cleanup_after_error()  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function uo_notify_begin()

<p><tt>static void uo_notify_begin ( struct ui_out* uiout, const char* classp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_notify_begin()  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function uo_notify_end()

<p><tt>static void uo_notify_end ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_notify_end()  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function verify_field()

<p><tt>static void verify_field ( struct ui_out* uiout, int* fldno, int* width, int* align )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ui-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>current_level()  :  ui-out.c
<item>get_next_header()  :  ui-out.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ui_out_begin()  :  ui-out.c
<item>ui_out_field_fmt()  :  ui-out.c
<item>ui_out_field_fmt_int()  :  ui-out.c
<item>ui_out_field_int()  :  ui-out.c
<item>ui_out_field_skip()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
</itemize>
</descrip>

</article>
