<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF frame.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for frame.c of gdb.cxref.
<author>cxref

<sect>File frame.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;regcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;user-regs.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;dummy-frame.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;sentinel-frame.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;annotate.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;frame-unwind.h&quot;</tt>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;frame-base.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;observer.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;top.h&quot;</tt>
</itemize>

<sect1>Type struct frame_info

<p>
<itemize>
<item><tt>struct frame_info</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int level;</tt><newline>
<item><tt>void* prologue_cache;</tt><newline>
<item><tt>const struct frame_unwind* unwind;</tt><newline>
<item><tt>struct</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int p;</tt><newline>
<item><tt>CORE_ADDR value;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>prev_pc;</tt><newline>
<item><tt>struct</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>CORE_ADDR addr;</tt><newline>
<item><tt>int p;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>prev_func;</tt><newline>
<item><tt>struct</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int p;</tt><newline>
<item><tt>struct frame_id value;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>this_id;</tt><newline>
<item><tt>const struct frame_base* base;</tt><newline>
<item><tt>void* base_cache;</tt><newline>
<item><tt>struct frame_info* next;</tt><newline>
<item><tt>int prev_p;</tt><newline>
<item><tt>struct frame_info* prev;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable null_frame_id

<p>
<tt>const struct frame_id null_frame_id</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>disasm.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>eval.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>check_safe_call()  :  valops.c
<item>clear_proceed_status()  :  infrun.c
<item>create_sentinel_frame()  :  frame.c
<item>frame_id_build()  :  frame.c
<item>frame_id_build_special()  :  frame.c
<item>frame_id_build_wild()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>handle_inferior_event()  :  infrun.c
<item>new_root_variable()  :  varobj.c
<item>set_raw_breakpoint()  :  breakpoint.c
<item>step_into_function()  :  infrun.c
<item>until_break_command()  :  breakpoint.c
<item>varobj_create()  :  varobj.c
<item>x86_frame_this_id()  :  target/x86-shared-tdep.c
</itemize>
</descrip>

<sect1>Global Variable deprecated_selected_frame

<p>
<tt>struct frame_info* deprecated_selected_frame</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>disasm.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>eval.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>default_macro_scope()  :  macroscope.c
<item>do_captured_thread_select()  :  thread.c
<item>f77_get_dynamic_lowerbound()  :  f-valprint.c
<item>f77_get_dynamic_upperbound()  :  f-valprint.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>float_info()  :  infcmd.c
<item>func_command()  :  stack.c
<item>get_frame_language()  :  stack.c
<item>get_selected_block()  :  stack.c
<item>get_selected_frame()  :  frame.c
<item>info_common_command()  :  f-valprint.c
<item>insert_bp_location()  :  breakpoint.c
<item>kill_command()  :  inflow.c
<item>normal_stop()  :  infrun.c
<item>print_float_info()  :  infcmd.c
<item>print_vector_info()  :  infcmd.c
<item>registers_info()  :  infcmd.c
<item>select_frame()  :  frame.c
<item>until_break_command()  :  breakpoint.c
<item>value_assign()  :  valops.c
<item>value_of_local()  :  valops.c
<item>varobj_create()  :  varobj.c
<item>varobj_update()  :  varobj.c
<item>vector_info()  :  infcmd.c
<item>write_dollar_variable()  :  parse.c
</itemize>
</descrip>

<sect1>Global Variable backtrace_past_main

<p>
<tt>int backtrace_past_main</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>disasm.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>eval.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_frame()  :  frame.c
<item>get_prev_frame()  :  frame.c
</itemize>
</descrip>

<sect1>Global Variable frame_debug

<p>
<tt>int frame_debug</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>frame.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_frame()  :  frame.c
<item>create_new_frame()  :  frame.c
<item>create_sentinel_frame()  :  frame.c
<item>deprecated_update_frame_base_hack()  :  frame.c
<item>deprecated_update_frame_pc_hack()  :  frame.c
<item>flush_cached_frames()  :  frame.c
<item>frame_debug_got_null_frame()  :  frame.c
<item>frame_func_unwind()  :  frame.c
<item>frame_id_eq()  :  frame.c
<item>frame_id_inner()  :  frame.c
<item>frame_id_p()  :  frame.c
<item>frame_pc_unwind()  :  frame.c
<item>frame_register_unwind()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>get_prev_frame_1()  :  frame.c
</itemize>
</descrip>

<sect1>Global Variable backtrace_sanity_checks

<p>
<tt>int backtrace_sanity_checks</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>frame.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_frame()  :  frame.c
<item>get_prev_frame_1()  :  frame.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>backtrace_past_entry</bf><newline>
<tt>static int backtrace_past_entry</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_frame()
<item>get_prev_frame()
</itemize>
</descrip>
<p>
<bf>backtrace_limit</bf><newline>
<tt>static int backtrace_limit</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_frame()
<item>get_prev_frame()
</itemize>
</descrip>
<p>
<bf>current_frame</bf><newline>
<tt>static struct frame_info* current_frame</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>flush_cached_frames()
<item>get_current_frame()
<item>get_prev_frame()
<item>unwind_to_current_frame()
</itemize>
</descrip>
<p>
<bf>frame_cache_obstack</bf><newline>
<tt>static struct obstack frame_cache_obstack</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_frame()
<item>flush_cached_frames()
<item>frame_obstack_zalloc()
</itemize>
</descrip>
<p>
<bf>set_backtrace_cmdlist</bf><newline>
<tt>static struct cmd_list_element* set_backtrace_cmdlist</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_frame()
<item>set_backtrace_cmd()
</itemize>
</descrip>
<p>
<bf>show_backtrace_cmdlist</bf><newline>
<tt>static struct cmd_list_element* show_backtrace_cmdlist</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_frame()
<item>show_backtrace_cmd()
</itemize>
</descrip>

<sect1>Global Function _initialize_frame()

<p><tt>void _initialize_frame ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>observer_attach_target_changed()  :  observer.c
<item>_obstack_begin(), add_prefix_cmd(), add_setshow_boolean_cmd(), add_setshow_integer_cmd(), add_setshow_zinteger_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>frame_observer_target_changed()  :  frame.c
<item>set_backtrace_cmd()  :  frame.c
<item>show_backtrace_cmd()  :  frame.c
<item>show_backtrace_limit()  :  frame.c
<item>show_backtrace_past_entry()  :  frame.c
<item>show_backtrace_past_main()  :  frame.c
<item>show_frame_debug()  :  frame.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>backtrace_limit  :  frame.c
<item>backtrace_past_entry  :  frame.c
<item>backtrace_past_main  :  frame.c
<item>backtrace_sanity_checks  :  frame.c
<item>frame_cache_obstack  :  frame.c
<item>frame_debug  :  frame.c
<item>set_backtrace_cmdlist  :  frame.c
<item>show_backtrace_cmdlist  :  frame.c
<item>setdebuglist, setlist, showdebuglist, showlist
</itemize>
</descrip>

<sect1>Global Function create_new_frame()

<p><tt>struct frame_info* create_new_frame ( CORE_ADDR addr, CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_sentinel_frame()  :  frame.c
<item>deprecated_update_frame_base_hack()  :  frame.c
<item>deprecated_update_frame_pc_hack()  :  frame.c
<item>fprint_frame()  :  frame.c
<item>fprintf_unfiltered()  :  utils.c
<item>frame_obstack_zalloc()  :  frame.c
<item>frame_unwind_find_by_frame()  :  frame-unwind.c
<item>paddr_nz()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_frame_specification_1()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_regcache  :  regcache.c
<item>frame_debug  :  frame.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Global Function deprecated_safe_get_selected_frame()

<p><tt>struct frame_info* deprecated_safe_get_selected_frame ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_selected_frame()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>check_safe_call()  :  valops.c
<item>read_var_value()  :  findvar.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function deprecated_update_frame_base_hack()

<p><tt>void deprecated_update_frame_base_hack ( struct frame_info* frame, CORE_ADDR base )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>paddr_nz()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_new_frame()  :  frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>frame_debug  :  frame.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Global Function deprecated_update_frame_pc_hack()

<p><tt>void deprecated_update_frame_pc_hack ( struct frame_info* frame, CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>paddr_nz()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_new_frame()  :  frame.c
<item>normal_stop()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>frame_debug  :  frame.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Global Function find_frame_sal()

<p><tt>void find_frame_sal ( struct frame_info* frame, struct symtab_and_line* sal )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>current_inlined_subroutine_call_stack_end_pc()  :  inlining.c
<item>find_pc_line()  :  symtab.c
<item>get_frame_pc()  :  frame.c
<item>get_frame_type()  :  frame.c
<item>pc_notcurrent()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_info()  :  stack.c
<item>print_frame_info()  :  stack.c
<item>set_current_sal_from_frame()  :  stack.c
</itemize>
</descrip>

<sect1>Global Function flush_cached_frames()

<p><tt>void flush_cached_frames ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>flush_inlined_subroutine_frames()  :  inlining.c
<item>fprintf_unfiltered()  :  utils.c
<item>select_frame()  :  frame.c
<item>_obstack_begin(), annotate_frames_invalid()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>deprecated_current_gdbarch_select_hack()  :  gdbarch.c
<item>finish_tfind_command()  :  tracepoint.c
<item>frame_observer_target_changed()  :  frame.c
<item>frame_pop()  :  frame.c
<item>handle_inferior_event()  :  infrun.c
<item>prepare_to_proceed()  :  infrun.c
<item>reinit_frame_cache()  :  frame.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
<item>switch_to_thread()  :  thread.c
<item>verify_stack()  :  inlining.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>obstack_free()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_frame  :  frame.c
<item>frame_cache_obstack  :  frame.c
<item>frame_debug  :  frame.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Global Function fprint_frame_id()

<p><tt>void fprint_frame_id ( struct ui_file* file, struct frame_id id )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprint_field()  :  frame.c
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>fprint_dummy_frames()  :  dummy-frame.c
<item>fprint_frame()  :  frame.c
<item>frame_id_eq()  :  frame.c
<item>frame_id_inner()  :  frame.c
<item>frame_id_p()  :  frame.c
<item>get_frame_id()  :  frame.c
</itemize>
</descrip>

<sect1>Global Function frame_cache_hack()

<p><tt>void* frame_cache_hack ( struct frame_info* frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
</descrip>

<sect1>Global Function frame_find_by_id()

<p><tt>struct frame_info* frame_find_by_id ( struct frame_id id )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_id_eq()  :  frame.c
<item>frame_id_inner()  :  frame.c
<item>frame_id_p()  :  frame.c
<item>get_current_frame()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>get_prev_frame()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_value_of_root()  :  varobj.c
<item>check_safe_call()  :  valops.c
<item>do_enable_breakpoint()  :  breakpoint.c
<item>info_threads_command()  :  thread.c
<item>insert_bp_location()  :  breakpoint.c
<item>restore_selected_frame()  :  infrun.c
<item>value_assign()  :  valops.c
<item>varobj_create()  :  varobj.c
<item>varobj_pc_in_valid_block_p()  :  varobj.c
<item>varobj_update()  :  varobj.c
<item>watchpoint_check()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function frame_func_unwind()

<p><tt>CORE_ADDR frame_func_unwind ( struct frame_info* fi )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>frame_unwind_address_in_block()  :  frame.c
<item>get_pc_function_start()  :  blockframe.c
<item>paddr_nz()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_this_id()  :  dwarf2-frame.c
<item>dwarf2_signal_frame_this_id()  :  dwarf2-frame.c
<item>get_frame_func()  :  frame.c
<item>x86_frame_cache()  :  target/x86-shared-tdep.c
<item>x86_frame_prev_register()  :  target/x86-shared-tdep.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>frame_debug  :  frame.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Global Function frame_id_build()

<p><tt>struct frame_id frame_id_build ( CORE_ADDR stack_addr, CORE_ADDR code_addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_this_id()  :  dwarf2-frame.c
<item>dwarf2_signal_frame_this_id()  :  dwarf2-frame.c
<item>hand_function_call()  :  infcall.c
<item>x86_frame_this_id()  :  target/x86-shared-tdep.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>null_frame_id  :  frame.c
</itemize>
</descrip>

<sect1>Global Function frame_id_build_special()

<p><tt>struct frame_id frame_id_build_special ( CORE_ADDR stack_addr, CORE_ADDR code_addr, CORE_ADDR special_addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>null_frame_id  :  frame.c
</itemize>
</descrip>

<sect1>Global Function frame_id_build_wild()

<p><tt>struct frame_id frame_id_build_wild ( CORE_ADDR stack_addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_frame_specification_1()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>null_frame_id  :  frame.c
</itemize>
</descrip>

<sect1>Global Function frame_id_eq()

<p><tt>int frame_id_eq ( struct frame_id l, struct frame_id r )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprint_frame_id()  :  frame.c
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
<item>check_safe_call()  :  valops.c
<item>dummy_frame_sniffer()  :  dummy-frame.c
<item>frame_find_by_id()  :  frame.c
<item>get_prev_frame_1()  :  frame.c
<item>handle_inferior_event()  :  infrun.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>normal_stop()  :  infrun.c
<item>parse_frame_specification_1()  :  stack.c
<item>return_command()  :  stack.c
<item>value_of_root()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>frame_debug  :  frame.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Global Function frame_id_inner()

<p><tt>int frame_id_inner ( struct frame_id l, struct frame_id r )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprint_frame_id()  :  frame.c
<item>fprintf_unfiltered()  :  utils.c
<item>gdbarch_inner_than()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dummy_frame_push()  :  dummy-frame.c
<item>frame_find_by_id()  :  frame.c
<item>get_prev_frame_1()  :  frame.c
<item>handle_inferior_event()  :  infrun.c
<item>return_command()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>frame_debug  :  frame.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Global Function frame_id_p()

<p><tt>int frame_id_p ( struct frame_id l )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprint_frame_id()  :  frame.c
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
<item>frame_find_by_id()  :  frame.c
<item>get_prev_frame_1()  :  frame.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>varobj_create()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>frame_debug  :  frame.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Global Function frame_map_name_to_regnum()

<p><tt>int frame_map_name_to_regnum ( struct frame_info* frame, const char* name, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_frame_arch()  :  frame.c
<item>user_reg_map_name_to_regnum()  :  user-regs.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>registers_info()  :  infcmd.c
<item>write_dollar_variable()  :  parse.c
</itemize>
</descrip>

<sect1>Global Function frame_map_regnum_to_name()

<p><tt>const char* frame_map_regnum_to_name ( struct frame_info* frame, int regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_frame_arch()  :  frame.c
<item>user_reg_map_regnum_to_name()  :  user-regs.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
<item>frame_register_unwind()  :  frame.c
</itemize>
</descrip>

<sect1>Global Function frame_next_hack()

<p><tt>struct frame_info* frame_next_hack ( struct frame_info* frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
</descrip>

<sect1>Global Function frame_observer_target_changed()

<p><tt>void frame_observer_target_changed ( struct target_ops* target )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>flush_cached_frames()  :  frame.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_frame()  :  frame.c
</itemize>
</descrip>

<sect1>Global Function frame_obstack_zalloc()

<p><tt>void* frame_obstack_zalloc ( unsigned long size )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_new_frame()  :  frame.c
<item>create_sentinel_frame()  :  frame.c
<item>dummy_frame_sniffer()  :  dummy-frame.c
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
<item>get_prev_frame_1()  :  frame.c
<item>sentinel_frame_cache()  :  sentinel-frame.c
<item>trad_frame_alloc_saved_regs()  :  trad-frame.c
<item>trad_frame_cache_zalloc()  :  trad-frame.c
<item>tramp_frame_sniffer()  :  tramp-frame.c
<item>x86_alloc_frame_cache()  :  target/x86-shared-tdep.c
<item>x86_initialize_frame_cache()  :  target/x86-shared-tdep.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>frame_cache_obstack  :  frame.c
</itemize>
</descrip>

<sect1>Global Function frame_pc_unwind()

<p><tt>CORE_ADDR frame_pc_unwind ( struct frame_info* this_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>frame_unwind_find_by_frame()  :  frame-unwind.c
<item>gdbarch_unwind_pc()  :  gdbarch.c
<item>gdbarch_unwind_pc_p()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>paddr_nz()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>execute_cfa_program()  :  dwarf2-frame.c
<item>frame_info()  :  stack.c
<item>frame_unwind_address_in_block()  :  frame.c
<item>get_frame_pc()  :  frame.c
<item>get_prev_frame()  :  frame.c
<item>tramp_frame_sniffer()  :  tramp-frame.c
<item>x86_frame_cache()  :  target/x86-shared-tdep.c
<item>x86_frame_prev_register()  :  target/x86-shared-tdep.c
<item>x86_frame_this_id()  :  target/x86-shared-tdep.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>frame_debug  :  frame.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Global Function frame_pop()

<p><tt>void frame_pop ( struct frame_info* this_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>flush_cached_frames()  :  frame.c
<item>frame_save_as_regcache()  :  frame.c
<item>get_prev_frame_1()  :  frame.c
<item>make_cleanup_regcache_xfree()  :  regcache.c
<item>regcache_cpy()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
<item>normal_stop()  :  infrun.c
<item>return_command()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_regcache  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function frame_register()

<p><tt>void frame_register ( struct frame_info* frame, int regnum, enum opt_state* optimizedp, enum lval_type* lvalp, CORE_ADDR* addrp, int* realnump, gdb_byte* bufferp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_register_unwind()  :  frame.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf_expr_read_reg()  :  dwarf2loc.c
<item>frame_register_read()  :  frame.c
<item>put_frame_register()  :  frame.c
<item>value_from_register()  :  findvar.c
<item>value_of_register()  :  findvar.c
</itemize>
</descrip>

<sect1>Global Function frame_register_read()

<p><tt>int frame_register_read ( struct frame_info* frame, int regnum, gdb_byte* myaddr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_register()  :  frame.c
<item>register_cached()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>default_print_registers_info()  :  infcmd.c
<item>do_frame_register_read()  :  frame.c
<item>value_assign()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function frame_register_unwind()

<p><tt>void frame_register_unwind ( struct frame_info* frame, int regnum, enum opt_state* optimizedp, enum lval_type* lvalp, CORE_ADDR* addrp, int* realnump, gdb_byte* bufferp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>frame_map_regnum_to_name()  :  frame.c
<item>frame_unwind_find_by_frame()  :  frame-unwind.c
<item>internal_error()  :  utils.c
<item>paddr_nz()  :  utils.c
<item>register_size()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_info()  :  stack.c
<item>frame_register()  :  frame.c
<item>frame_unwind_register()  :  frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>frame_debug  :  frame.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Global Function frame_relative_level()

<p><tt>int frame_relative_level ( struct frame_info* fi )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_captured_thread_select()  :  thread.c
<item>do_check_is_thread_unsafe()  :  valops.c
<item>frame_info()  :  stack.c
<item>func_sym_has_inlining()  :  inlining.c
<item>inlined_frame_this_id()  :  inlining.c
<item>last_inlined_call_site_filename()  :  inlining.c
<item>print_frame()  :  stack.c
<item>print_frame_info()  :  stack.c
<item>print_inlined_frame()  :  inlining.c
<item>select_frame()  :  frame.c
<item>value_assign()  :  valops.c
<item>varobj_pc_in_valid_block_p()  :  varobj.c
<item>x86_frame_cache()  :  target/x86-shared-tdep.c
<item>x86_frame_prev_register()  :  target/x86-shared-tdep.c
<item>x86_frame_this_id()  :  target/x86-shared-tdep.c
</itemize>
</descrip>

<sect1>Global Function frame_save_as_regcache()

<p><tt>struct regcache* frame_save_as_regcache ( struct frame_info* this_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>discard_cleanups()  :  utils.c
<item>make_cleanup_regcache_xfree()  :  regcache.c
<item>regcache_save()  :  regcache.c
<item>regcache_xmalloc()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_pop()  :  frame.c
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_frame_register_read()  :  frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function frame_sp_unwind()

<p><tt>CORE_ADDR frame_sp_unwind ( struct frame_info* next_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_unwind_unsigned_register()  :  frame.c
<item>gdbarch_read_sp()  :  gdbarch.c
<item>gdbarch_read_sp_p()  :  gdbarch.c
<item>gdbarch_sp_regnum()  :  gdbarch.c
<item>gdbarch_unwind_sp()  :  gdbarch.c
<item>gdbarch_unwind_sp_p()  :  gdbarch.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_frame_sp()  :  frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function frame_unwind_address_in_block()

<p><tt>CORE_ADDR frame_unwind_address_in_block ( struct frame_info* next_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_pc_unwind()  :  frame.c
<item>get_frame_type()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_base_sniffer()  :  dwarf2-frame.c
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
<item>dwarf2_frame_sniffer()  :  dwarf2-frame.c
<item>frame_func_unwind()  :  frame.c
<item>get_frame_address_in_block()  :  frame.c
</itemize>
</descrip>

<sect1>Global Function frame_unwind_id()

<p><tt>struct frame_id frame_unwind_id ( struct frame_info* next_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_unwind_id()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>get_frame_type()  :  frame.c
<item>get_prev_frame_1()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_unwind_id()  :  frame.c
<item>handle_inferior_event()  :  infrun.c
<item>parse_frame_specification_1()  :  stack.c
</itemize>
</descrip>

<sect1>Global Function frame_unwind_register()

<p><tt>void frame_unwind_register ( struct frame_info* frame, int regnum, gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_register_unwind()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_prev_register()  :  dwarf2-frame.c
<item>frame_unwind_register_signed()  :  frame.c
<item>frame_unwind_register_unsigned()  :  frame.c
<item>frame_unwind_unsigned_register()  :  frame.c
<item>get_frame_register()  :  frame.c
<item>read_reg()  :  dwarf2-frame.c
<item>trad_frame_get_prev_register()  :  trad-frame.c
<item>x86_finalize_saved_reg_locations()  :  target/x86-shared-tdep.c
<item>x86_frame_prev_register()  :  target/x86-shared-tdep.c
</itemize>
</descrip>

<sect1>Global Function frame_unwind_register_signed()

<p><tt>long frame_unwind_register_signed ( struct frame_info* frame, int regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_signed_integer()  :  findvar.c
<item>frame_unwind_register()  :  frame.c
<item>get_frame_arch()  :  frame.c
<item>register_size()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_frame_register_signed()  :  frame.c
</itemize>
</descrip>

<sect1>Global Function frame_unwind_register_unsigned()

<p><tt>unsigned long frame_unwind_register_unsigned ( struct frame_info* frame, int regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_unsigned_integer()  :  findvar.c
<item>frame_unwind_register()  :  frame.c
<item>get_frame_arch()  :  frame.c
<item>register_size()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_prev_register()  :  dwarf2-frame.c
<item>get_frame_register_unsigned()  :  frame.c
</itemize>
</descrip>

<sect1>Global Function frame_unwind_unsigned_register()

<p><tt>void frame_unwind_unsigned_register ( struct frame_info* frame, int regnum, unsigned long* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_unsigned_integer()  :  findvar.c
<item>frame_unwind_register()  :  frame.c
<item>get_frame_arch()  :  frame.c
<item>register_size()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_sp_unwind()  :  frame.c
</itemize>
</descrip>

<sect1>Global Function get_current_frame()

<p><tt>struct frame_info* get_current_frame ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_sentinel_frame()  :  frame.c
<item>error()  :  utils.c
<item>catch_exceptions()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>agent_command()  :  ax-gdb.c
<item>backtrace_command_1()  :  stack.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>do_captured_thread_select()  :  thread.c
<item>do_check_is_thread_unsafe()  :  valops.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>finish_tfind_command()  :  tracepoint.c
<item>frame_find_by_id()  :  frame.c
<item>get_selected_frame()  :  frame.c
<item>hand_function_call()  :  infcall.c
<item>handle_inferior_event()  :  infrun.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>jump_command()  :  infcmd.c
<item>normal_stop()  :  infrun.c
<item>objc_handle_update()  :  objc-lang.c
<item>parse_frame_specification_1()  :  stack.c
<item>prepare_to_proceed()  :  infrun.c
<item>print_frame()  :  stack.c
<item>proceed()  :  infrun.c
<item>re_exec_1()  :  infcmd.c
<item>re_exec_once()  :  infcmd.c
<item>read_sp()  :  regcache.c
<item>reinit_frame_cache()  :  frame.c
<item>resolve_msgsend()  :  objc-lang.c
<item>resolve_msgsend_stret()  :  objc-lang.c
<item>resolve_msgsend_super()  :  objc-lang.c
<item>resolve_msgsend_super_stret()  :  objc-lang.c
<item>resolve_newruntime_objc_msgsend()  :  objc-lang.c
<item>resolve_newruntime_objc_msgsendsuper()  :  objc-lang.c
<item>restore_current_thread()  :  thread.c
<item>restore_inferior_status()  :  infrun.c
<item>return_command()  :  stack.c
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
<item>switch_to_thread()  :  thread.c
<item>trace_find_line_command()  :  tracepoint.c
<item>until_next_command()  :  infcmd.c
<item>value_assign()  :  valops.c
<item>watchpoint_check()  :  breakpoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>unwind_to_current_frame()  :  frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_frame  :  frame.c
<item>current_regcache  :  regcache.c
<item>current_target  :  target/target.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function get_frame_address_in_block()

<p><tt>CORE_ADDR get_frame_address_in_block ( struct frame_info* this_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_unwind_address_in_block()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>backtrace_command_1()  :  stack.c
<item>block_innermost_frame()  :  blockframe.c
<item>get_frame_block()  :  blockframe.c
<item>get_frame_language()  :  stack.c
<item>print_frame()  :  stack.c
<item>select_frame()  :  frame.c
</itemize>
</descrip>

<sect1>Global Function get_frame_arch()

<p><tt>struct gdbarch* get_frame_arch ( struct frame_info* this_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dummy_frame_sniffer()  :  dummy-frame.c
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
<item>dwarf2_frame_prev_register()  :  dwarf2-frame.c
<item>dwarf2_frame_sniffer()  :  dwarf2-frame.c
<item>execute_cfa_program()  :  dwarf2-frame.c
<item>frame_base_find_by_frame()  :  frame-base.c
<item>frame_map_name_to_regnum()  :  frame.c
<item>frame_map_regnum_to_name()  :  frame.c
<item>frame_unwind_find_by_frame()  :  frame-unwind.c
<item>frame_unwind_register_signed()  :  frame.c
<item>frame_unwind_register_unsigned()  :  frame.c
<item>frame_unwind_unsigned_register()  :  frame.c
<item>inlined_frame_this_id()  :  inlining.c
<item>put_frame_register()  :  frame.c
<item>read_reg()  :  dwarf2-frame.c
<item>sentinel_frame_prev_pc()  :  sentinel-frame.c
<item>trad_frame_get_prev_register()  :  trad-frame.c
<item>value_of_user_reg()  :  user-regs.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function get_frame_args_address()

<p><tt>CORE_ADDR get_frame_args_address ( struct frame_info* fi )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_base_find_by_frame()  :  frame-base.c
<item>get_frame_type()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_info()  :  stack.c
<item>print_frame_nameless_args()  :  stack.c
<item>read_var_value()  :  findvar.c
</itemize>
</descrip>

<sect1>Global Function get_frame_base()

<p><tt>CORE_ADDR get_frame_base ( struct frame_info* fi )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_frame_id()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>default_frame_base_address()  :  frame-base.c
<item>f77_get_dynamic_lowerbound()  :  f-valprint.c
<item>f77_get_dynamic_upperbound()  :  f-valprint.c
<item>finish_tfind_command()  :  tracepoint.c
<item>frame_info()  :  stack.c
<item>print_frame()  :  stack.c
<item>print_frame_info()  :  stack.c
<item>print_inlined_frame()  :  inlining.c
<item>value_of_builtin_frame_reg()  :  std-regs.c
</itemize>
</descrip>

<sect1>Global Function get_frame_base_address()

<p><tt>CORE_ADDR get_frame_base_address ( struct frame_info* fi )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_base_find_by_frame()  :  frame-base.c
<item>get_frame_type()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_frame_addr_in_frame_chain()  :  varobj.c
<item>value_of_builtin_frame_fp_reg()  :  std-regs.c
</itemize>
</descrip>

<sect1>Global Function get_frame_func()

<p><tt>CORE_ADDR get_frame_func ( struct frame_info* fi )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_func_unwind()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>inside_entry_func()  :  frame.c
<item>inside_main_func()  :  frame.c
</itemize>
</descrip>

<sect1>Global Function get_frame_id()

<p><tt>struct frame_id get_frame_id ( struct frame_info* fi )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprint_frame_id()  :  frame.c
<item>fprintf_unfiltered()  :  utils.c
<item>frame_unwind_find_by_frame()  :  frame-unwind.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
<item>check_safe_call()  :  valops.c
<item>do_enable_breakpoint()  :  breakpoint.c
<item>finish_command()  :  infcmd.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>frame_find_by_id()  :  frame.c
<item>frame_unwind_id()  :  frame.c
<item>get_frame_base()  :  frame.c
<item>get_prev_frame_1()  :  frame.c
<item>handle_inferior_event()  :  infrun.c
<item>info_threads_command()  :  thread.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>insert_bp_location()  :  breakpoint.c
<item>insert_step_resume_breakpoint_at_frame()  :  infrun.c
<item>normal_stop()  :  infrun.c
<item>parse_frame_specification_1()  :  stack.c
<item>re_exec_1()  :  infcmd.c
<item>re_exec_once()  :  infcmd.c
<item>return_command()  :  stack.c
<item>save_inferior_status()  :  infrun.c
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
<item>until_break_command()  :  breakpoint.c
<item>until_next_command()  :  infcmd.c
<item>value_assign()  :  valops.c
<item>value_from_register()  :  findvar.c
<item>value_of_register()  :  findvar.c
<item>value_of_user_reg()  :  user-regs.c
<item>varobj_create()  :  varobj.c
<item>varobj_update()  :  varobj.c
<item>watch_command_1()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>frame_debug  :  frame.c
<item>gdb_stdlog  :  main.c
<item>null_frame_id  :  frame.c
</itemize>
</descrip>

<sect1>Global Function get_frame_locals_address()

<p><tt>CORE_ADDR get_frame_locals_address ( struct frame_info* fi )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_base_find_by_frame()  :  frame-base.c
<item>get_frame_type()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_info()  :  stack.c
<item>read_var_value()  :  findvar.c
</itemize>
</descrip>

<sect1>Global Function get_frame_memory()

<p><tt>void get_frame_memory ( struct frame_info* this_frame, CORE_ADDR addr, gdb_byte* buf, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>read_memory()  :  corefile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>trad_frame_get_prev_register()  :  trad-frame.c
</itemize>
</descrip>

<sect1>Global Function get_frame_memory_signed()

<p><tt>long get_frame_memory_signed ( struct frame_info* this_frame, CORE_ADDR addr, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>read_memory_integer()  :  corefile.c
</itemize>
</descrip>

<sect1>Global Function get_frame_memory_unsigned()

<p><tt>unsigned long get_frame_memory_unsigned ( struct frame_info* this_frame, CORE_ADDR addr, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>read_memory_unsigned_integer()  :  corefile.c
</itemize>
</descrip>

<sect1>Global Function get_frame_pc()

<p><tt>CORE_ADDR get_frame_pc ( struct frame_info* frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_pc_unwind()  :  frame.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>agent_command()  :  ax-gdb.c
<item>default_macro_scope()  :  macroscope.c
<item>do_check_is_thread_unsafe()  :  valops.c
<item>dwarf_expr_frame_base()  :  dwarf2loc.c
<item>find_frame_sal()  :  frame.c
<item>finish_command()  :  infcmd.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>frame_info()  :  stack.c
<item>func_command()  :  stack.c
<item>func_sym_has_inlining()  :  inlining.c
<item>get_frame_language()  :  stack.c
<item>get_prev_frame()  :  frame.c
<item>info_common_command()  :  f-valprint.c
<item>insert_step_resume_breakpoint_at_frame()  :  infrun.c
<item>loclist_read_variable()  :  dwarf2loc.c
<item>print_frame()  :  stack.c
<item>print_frame_info()  :  stack.c
<item>print_frame_label_vars()  :  stack.c
<item>print_inlined_frame()  :  inlining.c
<item>select_frame()  :  frame.c
<item>trace_find_line_command()  :  tracepoint.c
<item>until_break_command()  :  breakpoint.c
<item>value_of_builtin_frame_pc_reg()  :  std-regs.c
<item>varobj_create()  :  varobj.c
<item>varobj_pc_in_valid_block_p()  :  varobj.c
<item>watch_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function get_frame_register()

<p><tt>void get_frame_register ( struct frame_info* frame, int regnum, gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_unwind_register()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_evaluate_loc_desc()  :  dwarf2loc.c
</itemize>
</descrip>

<sect1>Global Function get_frame_register_signed()

<p><tt>long get_frame_register_signed ( struct frame_info* frame, int regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_unwind_register_signed()  :  frame.c
</itemize>
</descrip>

<sect1>Global Function get_frame_register_unsigned()

<p><tt>unsigned long get_frame_register_unsigned ( struct frame_info* frame, int regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_unwind_register_unsigned()  :  frame.c
</itemize>
</descrip>

<sect1>Global Function get_frame_sp()

<p><tt>CORE_ADDR get_frame_sp ( struct frame_info* this_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_sp_unwind()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_sp()  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function get_frame_type()

<p><tt>enum frame_type get_frame_type ( struct frame_info* frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_unwind_find_by_frame()  :  frame-unwind.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
<item>do_captured_thread_select()  :  thread.c
<item>find_frame_sal()  :  frame.c
<item>frame_unwind_address_in_block()  :  frame.c
<item>frame_unwind_id()  :  frame.c
<item>get_frame_args_address()  :  frame.c
<item>get_frame_base_address()  :  frame.c
<item>get_frame_locals_address()  :  frame.c
<item>get_prev_frame()  :  frame.c
<item>get_prev_frame_1()  :  frame.c
<item>handle_inferior_event()  :  infrun.c
<item>normal_stop()  :  infrun.c
<item>pc_notcurrent()  :  frame.c
<item>print_frame()  :  stack.c
<item>print_frame_info()  :  stack.c
<item>return_command()  :  stack.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
<item>x86_frame_cache()  :  target/x86-shared-tdep.c
<item>x86_frame_this_id()  :  target/x86-shared-tdep.c
</itemize>
</descrip>

<sect1>Global Function get_next_frame()

<p><tt>struct frame_info* get_next_frame ( struct frame_info* this_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_relative_frame()  :  stack.c
<item>frame_info()  :  stack.c
<item>get_prev_frame()  :  frame.c
<item>pc_notcurrent()  :  frame.c
<item>print_frame()  :  stack.c
</itemize>
</descrip>

<sect1>Global Function get_prev_frame()

<p><tt>struct frame_info* get_prev_frame ( struct frame_info* this_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_debug_got_null_frame()  :  frame.c
<item>frame_pc_unwind()  :  frame.c
<item>get_frame_pc()  :  frame.c
<item>get_frame_type()  :  frame.c
<item>get_next_frame()  :  frame.c
<item>get_prev_frame_1()  :  frame.c
<item>inside_entry_func()  :  frame.c
<item>inside_main_func()  :  frame.c
<item>internal_error()  :  utils.c
<item>lookup_minimal_symbol_by_pc()  :  minsyms.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>backtrace_command_1()  :  stack.c
<item>block_innermost_frame()  :  blockframe.c
<item>default_frame_base_address()  :  frame-base.c
<item>do_check_is_thread_unsafe()  :  valops.c
<item>find_frame_addr_in_frame_chain()  :  varobj.c
<item>find_relative_frame()  :  stack.c
<item>finish_command()  :  infcmd.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>frame_find_by_id()  :  frame.c
<item>frame_info()  :  stack.c
<item>handle_inferior_event()  :  infrun.c
<item>normal_stop()  :  infrun.c
<item>parse_frame_specification_1()  :  stack.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
<item>until_break_command()  :  breakpoint.c
<item>unwind_to_current_frame()  :  frame.c
<item>watch_command_1()  :  breakpoint.c
<item>x86_frame_this_id()  :  target/x86-shared-tdep.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>backtrace_limit  :  frame.c
<item>backtrace_past_entry  :  frame.c
<item>backtrace_past_main  :  frame.c
<item>current_frame  :  frame.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Global Function get_selected_frame()

<p><tt>struct frame_info* get_selected_frame ( const char* message )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>get_current_frame()  :  frame.c
<item>internal_error()  :  utils.c
<item>select_frame()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>args_info()  :  stack.c
<item>catch_info()  :  stack.c
<item>current_frame_command()  :  stack.c
<item>deprecated_safe_get_selected_frame()  :  frame.c
<item>do_enable_breakpoint()  :  breakpoint.c
<item>down_command()  :  stack.c
<item>down_silently_base()  :  stack.c
<item>evaluate_subexp_standard()  :  eval.c
<item>finish_command()  :  infcmd.c
<item>finish_tfind_command()  :  tracepoint.c
<item>frame_command()  :  stack.c
<item>info_threads_command()  :  thread.c
<item>kill_command()  :  inflow.c
<item>locals_info()  :  stack.c
<item>normal_stop()  :  infrun.c
<item>parse_frame_specification_1()  :  stack.c
<item>return_command()  :  stack.c
<item>save_inferior_status()  :  infrun.c
<item>up_command()  :  stack.c
<item>up_silently_base()  :  stack.c
<item>value_of_this()  :  valops.c
<item>varobj_create()  :  varobj.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>deprecated_selected_frame  :  frame.c
</itemize>
</descrip>

<sect1>Global Function inlined_frame_prev_register()

<p><tt>void inlined_frame_prev_register ( struct frame_info* next_frame, void** this_prologue_cache, int prev_regnum, enum opt_state* optimized, enum lval_type* lvalp, CORE_ADDR* addrp, int* realnump, gdb_byte* valuep )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>inlining.c
</itemize>
</descrip>

<sect1>Global Function inside_main_func()

<p><tt>int inside_main_func ( struct frame_info* this_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_convert_from_func_ptr_addr()  :  gdbarch.c
<item>get_frame_func()  :  frame.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>main_name()  :  symtab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_prev_frame()  :  frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_target  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function put_frame_register()

<p><tt>void put_frame_register ( struct frame_info* frame, int regnum, const gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>frame_register()  :  frame.c
<item>get_frame_arch()  :  frame.c
<item>regcache_cooked_write()  :  regcache.c
<item>register_size()  :  regcache.c
<item>write_memory()  :  corefile.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_assign()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_regcache  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function refine_prologue_limit()

<p><tt>CORE_ADDR refine_prologue_limit ( CORE_ADDR pc, CORE_ADDR lim_pc, int max_skip_non_prologue_insns )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_line()  :  symtab.c
</itemize>
</descrip>

<sect1>Global Function reinit_frame_cache()

<p><tt>void reinit_frame_cache ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>flush_cached_frames()  :  frame.c
<item>get_current_frame()  :  frame.c
<item>ptid_get_pid()  :  infrun.c
<item>select_frame()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_kext_command()  :  symfile.c
<item>add_symbol_file_command()  :  symfile.c
<item>c_value_of_root()  :  varobj.c
<item>generic_mourn_inferior()  :  target/target.c
<item>remove_symbol_file_command()  :  symfile.c
<item>reread_symbols_for_objfile()  :  symfile.c
<item>solib_add()  :  solib.c
<item>symbol_file_add_from_memory()  :  symfile-mem.c
<item>symbol_file_add_main_1()  :  symfile.c
<item>value_assign()  :  valops.c
<item>watchpoint_check()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function safe_frame_unwind_memory()

<p><tt>int safe_frame_unwind_memory ( struct frame_info* this_frame, CORE_ADDR addr, gdb_byte* buf, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_read_memory_nobpt()  :  breakpoint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>tramp_frame_start()  :  tramp-frame.c
</itemize>
</descrip>

<sect1>Global Function select_frame()

<p><tt>void select_frame ( struct frame_info* fi )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_function()  :  blockframe.c
<item>find_pc_symtab()  :  symtab.c
<item>frame_relative_level()  :  frame.c
<item>get_frame_address_in_block()  :  frame.c
<item>get_frame_pc()  :  frame.c
<item>set_language()  :  language.c
<item>deprecated_selected_frame_level_changed_hook(), frame_changed_hook()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
<item>c_value_of_root()  :  varobj.c
<item>check_safe_call()  :  valops.c
<item>do_captured_thread_select()  :  thread.c
<item>do_enable_breakpoint()  :  breakpoint.c
<item>down_silently_base()  :  stack.c
<item>finish_tfind_command()  :  tracepoint.c
<item>flush_cached_frames()  :  frame.c
<item>get_selected_frame()  :  frame.c
<item>info_threads_command()  :  thread.c
<item>insert_bp_location()  :  breakpoint.c
<item>normal_stop()  :  infrun.c
<item>prepare_to_proceed()  :  infrun.c
<item>reinit_frame_cache()  :  frame.c
<item>restore_inferior_status()  :  infrun.c
<item>restore_selected_frame()  :  infrun.c
<item>select_and_print_frame()  :  stack.c
<item>select_frame_command()  :  stack.c
<item>switch_to_thread()  :  thread.c
<item>up_silently_base()  :  stack.c
<item>value_assign()  :  valops.c
<item>varobj_create()  :  varobj.c
<item>varobj_update()  :  varobj.c
<item>watchpoint_check()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
<item>currently_inside_optimized_code  :  infrun.c
<item>deprecated_selected_frame  :  frame.c
<item>deprecated_selected_frame_level_changed_hook  :  stack.c
<item>frame_changed_hook  :  top.c
<item>language_mode  :  language.c
</itemize>
</descrip>

<sect1>Local Function create_sentinel_frame()

<p><tt>static struct frame_info* create_sentinel_frame ( struct regcache* regcache )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprint_frame()  :  frame.c
<item>fprintf_unfiltered()  :  utils.c
<item>frame_obstack_zalloc()  :  frame.c
<item>sentinel_frame_cache()  :  sentinel-frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_new_frame()  :  frame.c
<item>get_current_frame()  :  frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>frame_debug  :  frame.c
<item>gdb_stdlog  :  main.c
<item>null_frame_id  :  frame.c
<item>sentinel_frame_unwind  :  sentinel-frame.c
</itemize>
</descrip>

<sect1>Local Function do_frame_register_read()

<p><tt>static int do_frame_register_read ( void* src, int regnum, gdb_byte* buf )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>frame_register_read()  :  frame.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>frame_save_as_regcache()  :  frame.c
</itemize>
</descrip>

<sect1>Local Function fprint_field()

<p><tt>static void fprint_field ( struct ui_file* file, const char* name, int p, CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>paddr_nz()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>fprint_frame_id()  :  frame.c
</itemize>
</descrip>

<sect1>Local Function fprint_frame()

<p><tt>static void fprint_frame ( struct ui_file* file, struct frame_info* fi )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprint_frame_id()  :  frame.c
<item>fprint_frame_type()  :  frame.c
<item>fprintf_unfiltered()  :  utils.c
<item>gdb_print_host_address()  :  utils.c
<item>paddr_nz()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_new_frame()  :  frame.c
<item>create_sentinel_frame()  :  frame.c
<item>get_prev_frame_1()  :  frame.c
</itemize>
</descrip>

<sect1>Local Function fprint_frame_type()

<p><tt>static void fprint_frame_type ( struct ui_file* file, enum frame_type type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>fprint_frame()  :  frame.c
</itemize>
</descrip>

<sect1>Local Function frame_debug_got_null_frame()

<p><tt>static void frame_debug_got_null_frame ( struct ui_file* file, struct frame_info* this_frame, const char* reason )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_prev_frame()  :  frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>frame_debug  :  frame.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function get_prev_frame_1()

<p><tt>static struct frame_info* get_prev_frame_1 ( struct frame_info* this_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>fprint_frame()  :  frame.c
<item>fprintf_unfiltered()  :  utils.c
<item>frame_id_eq()  :  frame.c
<item>frame_id_inner()  :  frame.c
<item>frame_id_p()  :  frame.c
<item>frame_obstack_zalloc()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>get_frame_type()  :  frame.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_pop()  :  frame.c
<item>frame_unwind_id()  :  frame.c
<item>get_prev_frame()  :  frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>backtrace_sanity_checks  :  frame.c
<item>frame_debug  :  frame.c
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Local Function inside_entry_func()

<p><tt>static int inside_entry_func ( struct frame_info* this_frame )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>entry_point_address()  :  objfiles.c
<item>get_frame_func()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_prev_frame()  :  frame.c
</itemize>
</descrip>

<sect1>Local Function pc_notcurrent()

<p><tt>static int pc_notcurrent ( struct frame_info* frame )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>get_frame_type()  :  frame.c
<item>get_next_frame()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_frame_sal()  :  frame.c
</itemize>
</descrip>

<sect1>Local Function set_backtrace_cmd()

<p><tt>static void set_backtrace_cmd ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>help_list()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_frame()  :  frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>set_backtrace_cmdlist  :  frame.c
</itemize>
</descrip>

<sect1>Local Function show_backtrace_cmd()

<p><tt>static void show_backtrace_cmd ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>cmd_show_list()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_frame()  :  frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>show_backtrace_cmdlist  :  frame.c
</itemize>
</descrip>

<sect1>Local Function show_backtrace_limit()

<p><tt>static void show_backtrace_limit ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_frame()  :  frame.c
</itemize>
</descrip>

<sect1>Local Function show_backtrace_past_entry()

<p><tt>static void show_backtrace_past_entry ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_frame()  :  frame.c
</itemize>
</descrip>

<sect1>Local Function show_backtrace_past_main()

<p><tt>static void show_backtrace_past_main ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_frame()  :  frame.c
</itemize>
</descrip>

<sect1>Local Function show_frame_debug()

<p><tt>static void show_frame_debug ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_frame()  :  frame.c
</itemize>
</descrip>

<sect1>Local Function unwind_to_current_frame()

<p><tt>static int unwind_to_current_frame ( struct ui_out* ui_out, void* args )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>get_prev_frame()  :  frame.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>get_current_frame()  :  frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_frame  :  frame.c
</itemize>
</descrip>

</article>
