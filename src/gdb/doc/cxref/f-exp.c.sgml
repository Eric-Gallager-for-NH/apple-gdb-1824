<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF f-exp.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for f-exp.c of gdb.cxref.
<author>cxref

<sect>File f-exp.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;parser-defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;f-lang.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define YYBISON 1</tt><newline>
<p>
<tt>#define YYBISON_VERSION &quot;3.0.4&quot;</tt><newline>
<p>
<tt>#define YYSKELETON_NAME &quot;yacc.c&quot;</tt><newline>
<p>
<tt>#define YYPURE 0</tt><newline>
<p>
<tt>#define YYPUSH 0</tt><newline>
<p>
<tt>#define YYPULL 1</tt><newline>
<p>
<tt>#define yymaxdepth f_maxdepth</tt><newline>
<p>
<tt>#define yyparse f_parse</tt><newline>
<p>
<tt>#define yylex f_lex</tt><newline>
<p>
<tt>#define yyerror f_error</tt><newline>
<p>
<tt>#define yylval f_lval</tt><newline>
<p>
<tt>#define yychar f_char</tt><newline>
<p>
<tt>#define yydebug f_debug</tt><newline>
<p>
<tt>#define yypact f_pact</tt><newline>
<p>
<tt>#define yyr1 f_r1</tt><newline>
<p>
<tt>#define yyr2 f_r2</tt><newline>
<p>
<tt>#define yydef f_def</tt><newline>
<p>
<tt>#define yychk f_chk</tt><newline>
<p>
<tt>#define yypgo f_pgo</tt><newline>
<p>
<tt>#define yyact f_act</tt><newline>
<p>
<tt>#define yyexca f_exca</tt><newline>
<p>
<tt>#define yyerrflag f_errflag</tt><newline>
<p>
<tt>#define yynerrs f_nerrs</tt><newline>
<p>
<tt>#define yyps f_ps</tt><newline>
<p>
<tt>#define yypv f_pv</tt><newline>
<p>
<tt>#define yys f_s</tt><newline>
<p>
<tt>#define yy_yys f_yys</tt><newline>
<p>
<tt>#define yystate f_state</tt><newline>
<p>
<tt>#define yytmp f_tmp</tt><newline>
<p>
<tt>#define yyv f_v</tt><newline>
<p>
<tt>#define yy_yyv f_yyv</tt><newline>
<p>
<tt>#define yyval f_val</tt><newline>
<p>
<tt>#define yylloc f_lloc</tt><newline>
<p>
<tt>#define yyreds f_reds</tt><newline>
<p>
<tt>#define yytoks f_toks</tt><newline>
<p>
<tt>#define yyname f_name</tt><newline>
<p>
<tt>#define yyrule f_rule</tt><newline>
<p>
<tt>#define yylhs f_yylhs</tt><newline>
<p>
<tt>#define yylen f_yylen</tt><newline>
<p>
<tt>#define yydefred f_yydefred</tt><newline>
<p>
<tt>#define yydgoto f_yydgoto</tt><newline>
<p>
<tt>#define yysindex f_yysindex</tt><newline>
<p>
<tt>#define yyrindex f_yyrindex</tt><newline>
<p>
<tt>#define yygindex f_yygindex</tt><newline>
<p>
<tt>#define yytable f_yytable</tt><newline>
<p>
<tt>#define yycheck f_yycheck</tt><newline>
<p>
<tt>#define YYDEBUG 1</tt><newline>
<p>
<tt>#define YYFPRINTF parser_fprintf</tt><newline>
<p>
<tt>#define YY_NULLPTR 0</tt><newline>
<p>
<tt>#define YYERROR_VERBOSE 0</tt><newline>
<p>
<tt>#define YY_YY_Y_TAB_H_INCLUDED</tt><newline>
<p>
<tt>#define YYTOKENTYPE</tt><newline>
<p>
<tt>#define INT 258</tt><newline>
<p>
<tt>#define FLOAT 259</tt><newline>
<p>
<tt>#define STRING_LITERAL 260</tt><newline>
<p>
<tt>#define BOOLEAN_LITERAL 261</tt><newline>
<p>
<tt>#define NAME 262</tt><newline>
<p>
<tt>#define TYPENAME 263</tt><newline>
<p>
<tt>#define NAME_OR_INT 264</tt><newline>
<p>
<tt>#define SIZEOF 265</tt><newline>
<p>
<tt>#define ERROR 266</tt><newline>
<p>
<tt>#define INT_KEYWORD 267</tt><newline>
<p>
<tt>#define INT_S2_KEYWORD 268</tt><newline>
<p>
<tt>#define LOGICAL_S1_KEYWORD 269</tt><newline>
<p>
<tt>#define LOGICAL_S2_KEYWORD 270</tt><newline>
<p>
<tt>#define LOGICAL_KEYWORD 271</tt><newline>
<p>
<tt>#define REAL_KEYWORD 272</tt><newline>
<p>
<tt>#define REAL_S8_KEYWORD 273</tt><newline>
<p>
<tt>#define REAL_S16_KEYWORD 274</tt><newline>
<p>
<tt>#define COMPLEX_S8_KEYWORD 275</tt><newline>
<p>
<tt>#define COMPLEX_S16_KEYWORD 276</tt><newline>
<p>
<tt>#define COMPLEX_S32_KEYWORD 277</tt><newline>
<p>
<tt>#define BOOL_AND 278</tt><newline>
<p>
<tt>#define BOOL_OR 279</tt><newline>
<p>
<tt>#define BOOL_NOT 280</tt><newline>
<p>
<tt>#define CHARACTER 281</tt><newline>
<p>
<tt>#define VARIABLE 282</tt><newline>
<p>
<tt>#define ASSIGN_MODIFY 283</tt><newline>
<p>
<tt>#define ABOVE_COMMA 284</tt><newline>
<p>
<tt>#define EQUAL 285</tt><newline>
<p>
<tt>#define NOTEQUAL 286</tt><newline>
<p>
<tt>#define LESSTHAN 287</tt><newline>
<p>
<tt>#define GREATERTHAN 288</tt><newline>
<p>
<tt>#define LEQ 289</tt><newline>
<p>
<tt>#define GEQ 290</tt><newline>
<p>
<tt>#define LSH 291</tt><newline>
<p>
<tt>#define RSH 292</tt><newline>
<p>
<tt>#define STARSTAR 293</tt><newline>
<p>
<tt>#define UNARY 294</tt><newline>
<p>
<tt>#define YYSTYPE_IS_TRIVIAL 1</tt><newline>
<p>
<tt>#define YYSTYPE_IS_DECLARED 1</tt><newline>
<p>
<tt>#define YYSIZE_T __SIZE_TYPE__</tt><newline>
<p>
<tt>#define YYSIZE_MAXIMUM</tt><newline>
<p>
<tt>#define YY_( Msgid )</tt><newline>
<p>
<tt>#define YY_ATTRIBUTE( Spec )</tt><newline>
<p>
<tt>#define YY_ATTRIBUTE_PURE</tt><newline>
<p>
<tt>#define YY_ATTRIBUTE_UNUSED</tt><newline>
<p>
<tt>#define _Noreturn</tt><newline>
<p>
<tt>#define YYUSE( E )</tt><newline>
<p>
<tt>#define YY_INITIAL_VALUE( Value )</tt><newline>
<p>
<tt>#define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN</tt><newline>
<p>
<tt>#define YY_IGNORE_MAYBE_UNINITIALIZED_END</tt><newline>
<p>
<tt>#define YYSTACK_ALLOC YYMALLOC</tt><newline>
<p>
<tt>#define YYSTACK_FREE YYFREE</tt><newline>
<p>
<tt>#define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM</tt><newline>
<p>
<tt>#define YYMALLOC xmalloc</tt><newline>
<p>
<tt>#define YYFREE xfree</tt><newline>
<p>
<tt>#define YYSTACK_GAP_MAXIMUM</tt><newline>
<p>
<tt>#define YYSTACK_BYTES( N )</tt><newline>
<p>
<tt>#define YYCOPY_NEEDED 1</tt><newline>
<p>
<tt>#define YYSTACK_RELOCATE( Stack_alloc, Stack )</tt><newline>
<p>
<tt>#define YYCOPY( Dst, Src, Count )</tt><newline>
<p>
<tt>#define YYFINAL 46</tt><newline>
<p>
<tt>#define YYLAST 501</tt><newline>
<p>
<tt>#define YYNTOKENS 56</tt><newline>
<p>
<tt>#define YYNNTS 17</tt><newline>
<p>
<tt>#define YYNRULES 81</tt><newline>
<p>
<tt>#define YYNSTATES 127</tt><newline>
<p>
<tt>#define YYUNDEFTOK 2</tt><newline>
<p>
<tt>#define YYMAXUTOK 294</tt><newline>
<p>
<tt>#define YYTRANSLATE( YYX )</tt><newline>
<p>
<tt>#define YYPACT_NINF -56</tt><newline>
<p>
<tt>#define yypact_value_is_default( Yystate )</tt><newline>
<p>
<tt>#define YYTABLE_NINF -1</tt><newline>
<p>
<tt>#define yytable_value_is_error( Yytable_value )</tt><newline>
<p>
<tt>#define yyerrok</tt><newline>
<p>
<tt>#define yyclearin</tt><newline>
<p>
<tt>#define YYEMPTY -2</tt><newline>
<p>
<tt>#define YYEOF 0</tt><newline>
<p>
<tt>#define YYACCEPT</tt><newline>
<p>
<tt>#define YYABORT</tt><newline>
<p>
<tt>#define YYERROR</tt><newline>
<p>
<tt>#define YYRECOVERING</tt><newline>
<p>
<tt>#define YYBACKUP( Token, Value )</tt><newline>
<p>
<tt>#define YYTERROR 1</tt><newline>
<p>
<tt>#define YYERRCODE 256</tt><newline>
<p>
<tt>#define YYDPRINTF( Args )</tt><newline>
<p>
<tt>#define YY_LOCATION_PRINT( File, Loc )</tt><newline>
<p>
<tt>#define YY_SYMBOL_PRINT( Title, Type, Value, Location )</tt><newline>
<p>
<tt>#define YY_STACK_PRINT( Bottom, Top )</tt><newline>
<p>
<tt>#define YY_REDUCE_PRINT( Rule )</tt><newline>
<p>
<tt>#define YYINITDEPTH 200</tt><newline>
<p>
<tt>#define YYMAXDEPTH 10000</tt><newline>
<p>
<tt>#define YYPOPSTACK( N )</tt><newline>
<p>
<tt>#define GROWBY_MIN_SIZE 64</tt><newline>
<p>
<tt>#define CHECKBUF( size )</tt><newline>

<sect1>Type enum yytokentype

<p>
<itemize>
<item><tt>enum yytokentype</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>INT;</tt><newline>
<item><tt>FLOAT;</tt><newline>
<item><tt>STRING_LITERAL;</tt><newline>
<item><tt>BOOLEAN_LITERAL;</tt><newline>
<item><tt>NAME;</tt><newline>
<item><tt>TYPENAME;</tt><newline>
<item><tt>NAME_OR_INT;</tt><newline>
<item><tt>SIZEOF;</tt><newline>
<item><tt>ERROR;</tt><newline>
<item><tt>INT_KEYWORD;</tt><newline>
<item><tt>INT_S2_KEYWORD;</tt><newline>
<item><tt>LOGICAL_S1_KEYWORD;</tt><newline>
<item><tt>LOGICAL_S2_KEYWORD;</tt><newline>
<item><tt>LOGICAL_KEYWORD;</tt><newline>
<item><tt>REAL_KEYWORD;</tt><newline>
<item><tt>REAL_S8_KEYWORD;</tt><newline>
<item><tt>REAL_S16_KEYWORD;</tt><newline>
<item><tt>COMPLEX_S8_KEYWORD;</tt><newline>
<item><tt>COMPLEX_S16_KEYWORD;</tt><newline>
<item><tt>COMPLEX_S32_KEYWORD;</tt><newline>
<item><tt>BOOL_AND;</tt><newline>
<item><tt>BOOL_OR;</tt><newline>
<item><tt>BOOL_NOT;</tt><newline>
<item><tt>CHARACTER;</tt><newline>
<item><tt>VARIABLE;</tt><newline>
<item><tt>ASSIGN_MODIFY;</tt><newline>
<item><tt>ABOVE_COMMA;</tt><newline>
<item><tt>EQUAL;</tt><newline>
<item><tt>NOTEQUAL;</tt><newline>
<item><tt>LESSTHAN;</tt><newline>
<item><tt>GREATERTHAN;</tt><newline>
<item><tt>LEQ;</tt><newline>
<item><tt>GEQ;</tt><newline>
<item><tt>LSH;</tt><newline>
<item><tt>RSH;</tt><newline>
<item><tt>STARSTAR;</tt><newline>
<item><tt>UNARY;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type union YYSTYPE

<p>
<itemize>
<item><tt>union YYSTYPE</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>long lval;</tt><newline>
<item><tt>struct</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>long val;</tt><newline>
<item><tt>struct type* type;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>typed_val;</tt><newline>
<item><tt>DOUBLEST dval;</tt><newline>
<item><tt>struct symbol* sym;</tt><newline>
<item><tt>struct type* tval;</tt><newline>
<item><tt>struct stoken sval;</tt><newline>
<item><tt>struct ttype tsym;</tt><newline>
<item><tt>struct symtoken ssym;</tt><newline>
<item><tt>int voidval;</tt><newline>
<item><tt>struct block* bval;</tt><newline>
<item><tt>enum exp_opcode opcode;</tt><newline>
<item><tt>struct internalvar* ivar;</tt><newline>
<item><tt>struct type** tvec;</tt><newline>
<item><tt>int* ivec;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Typedef YYSTYPE

<p>
<tt>typedef union YYSTYPE YYSTYPE</tt><newline>
<descrip>
<tag>See:</tag>
<itemize>
<item>Type union YYSTYPE
</itemize>
</descrip>

<sect1>Typedef yytype_uint8

<p>
<tt>typedef unsigned char yytype_uint8</tt><newline>

<sect1>Typedef yytype_int8

<p>
<tt>typedef signed char yytype_int8</tt><newline>

<sect1>Typedef yytype_uint16

<p>
<tt>typedef unsigned short int yytype_uint16</tt><newline>

<sect1>Typedef yytype_int16

<p>
<tt>typedef short int yytype_int16</tt><newline>

<sect1>Type union yyalloc

<p>
<itemize>
<item><tt>union yyalloc</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>yytype_int16 yyss_alloc;</tt><newline>
<item><tt>YYSTYPE yyvs_alloc;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct token

<p>
<itemize>
<item><tt>struct token</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const char* foperator;</tt><newline>
<item><tt>int token;</tt><newline>
<item><tt>enum exp_opcode opcode;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct f77_boolean_val

<p>
<itemize>
<item><tt>struct f77_boolean_val</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const char* name;</tt><newline>
<item><tt>int value;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable f_debug

<p>
<tt>int f_debug</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>f-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>f_parse()  :  f-exp.c
<item>yydestruct()  :  f-exp.c
</itemize>
</descrip>

<sect1>Global Variable f_lval

<p>
<tt>YYSTYPE f_lval</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>f-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>f_lex()  :  f-exp.c
<item>f_parse()  :  f-exp.c
<item>match_string_literal()  :  f-exp.c
</itemize>
</descrip>

<sect1>Global Variable f_char

<p>
<tt>int f_char</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>f-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>f_parse()  :  f-exp.c
</itemize>
</descrip>

<sect1>Global Variable f_nerrs

<p>
<tt>int f_nerrs</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>f-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>f_parse()  :  f-exp.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>yytranslate</bf><newline>
<tt>static const yytype_uint8 yytranslate[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>f_parse()
</itemize>
</descrip>
<p>
<bf>yyrline</bf><newline>
<tt>static const yytype_uint16 yyrline[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>yy_reduce_print()
</itemize>
</descrip>
<p>
<bf>yytname</bf><newline>
<tt>static const char* const yytname[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>yy_symbol_print()
</itemize>
</descrip>
<p>
<bf>f_pact</bf><newline>
<tt>static const yytype_int16 f_pact[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>f_parse()
</itemize>
</descrip>
<p>
<bf>yydefact</bf><newline>
<tt>static const yytype_uint8 yydefact[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>f_parse()
</itemize>
</descrip>
<p>
<bf>yypgoto</bf><newline>
<tt>static const yytype_int8 yypgoto[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>f_parse()
</itemize>
</descrip>
<p>
<bf>yydefgoto</bf><newline>
<tt>static const yytype_int8 yydefgoto[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>f_parse()
</itemize>
</descrip>
<p>
<bf>f_yytable</bf><newline>
<tt>static const yytype_uint8 f_yytable[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>f_parse()
</itemize>
</descrip>
<p>
<bf>f_yycheck</bf><newline>
<tt>static const yytype_int8 f_yycheck[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>f_parse()
</itemize>
</descrip>
<p>
<bf>yystos</bf><newline>
<tt>static const yytype_uint8 yystos[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>f_parse()
<item>yy_reduce_print()
</itemize>
</descrip>
<p>
<bf>f_r1</bf><newline>
<tt>static const yytype_uint8 f_r1[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>f_parse()
</itemize>
</descrip>
<p>
<bf>f_r2</bf><newline>
<tt>static const yytype_uint8 f_r2[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>f_parse()
<item>yy_reduce_print()
</itemize>
</descrip>
<p>
<bf>dot_ops</bf><newline>
<tt>static const struct token dot_ops[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>f_lex()
</itemize>
</descrip>
<p>
<bf>boolean_values</bf><newline>
<tt>static const struct f77_boolean_val boolean_values[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>f_lex()
</itemize>
</descrip>
<p>
<bf>f77_keywords</bf><newline>
<tt>static const struct token f77_keywords[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>f_lex()
</itemize>
</descrip>
<p>
<bf>tempbuf</bf><newline>
<tt>static char* tempbuf</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>growbuf_by_size()
<item>match_string_literal()
</itemize>
</descrip>
<p>
<bf>tempbufsize</bf><newline>
<tt>static int tempbufsize</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>growbuf_by_size()
<item>match_string_literal()
</itemize>
</descrip>
<p>
<bf>tempbufindex</bf><newline>
<tt>static int tempbufindex</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>match_string_literal()
</itemize>
</descrip>

<sect1>Global Function f_error()

<p><tt>void f_error ( const char* msg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>f-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>f_parse()  :  f-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>f-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>lexptr  :  parse.c
<item>prev_lexptr  :  parse.c
</itemize>
</descrip>

<sect1>Global Function f_parse()

<p><tt>int f_parse ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>f-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>contained_in()  :  block.c
<item>copy_name()  :  parse.c
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
<item>end_arglist()  :  parse.c
<item>error()  :  utils.c
<item>f_error()  :  f-exp.c
<item>f_lex()  :  f-exp.c
<item>have_full_symbols()  :  objfiles.c
<item>have_partial_symbols()  :  objfiles.c
<item>lookup_function_type()  :  gdbtypes.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>lookup_reference_type()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>parse_number()  :  f-exp.c
<item>parser_fprintf()  :  parse.c
<item>pop_type()  :  parse.c
<item>pop_type_int()  :  parse.c
<item>push_type()  :  parse.c
<item>start_arglist()  :  parse.c
<item>symbol_read_needs_frame()  :  findvar.c
<item>write_exp_elt_block()  :  parse.c
<item>write_exp_elt_dblcst()  :  parse.c
<item>write_exp_elt_longcst()  :  parse.c
<item>write_exp_elt_opcode()  :  parse.c
<item>write_exp_elt_sym()  :  parse.c
<item>write_exp_elt_type()  :  parse.c
<item>write_exp_msymbol()  :  parse.c
<item>write_exp_string()  :  parse.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>yy_reduce_print()  :  f-exp.c
<item>yy_stack_print()  :  f-exp.c
<item>yy_symbol_print()  :  f-exp.c
<item>yydestruct()  :  f-exp.c
<item>__builtin_memcpy()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>f-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>arglist_len  :  parse.c
<item>block_found  :  symtab.c
<item>builtin_type_f_character  :  f-lang.c
<item>builtin_type_f_complex_s16  :  f-lang.c
<item>builtin_type_f_complex_s32  :  f-lang.c
<item>builtin_type_f_complex_s8  :  f-lang.c
<item>builtin_type_f_integer  :  f-lang.c
<item>builtin_type_f_integer_s2  :  f-lang.c
<item>builtin_type_f_logical  :  f-lang.c
<item>builtin_type_f_logical_s1  :  f-lang.c
<item>builtin_type_f_logical_s2  :  f-lang.c
<item>builtin_type_f_real  :  f-lang.c
<item>builtin_type_f_real_s16  :  f-lang.c
<item>builtin_type_f_real_s8  :  f-lang.c
<item>builtin_type_int  :  gdbtypes.c
<item>f_char  :  f-exp.c
<item>f_debug  :  f-exp.c
<item>f_lval  :  f-exp.c
<item>f_nerrs  :  f-exp.c
<item>f_pact  :  f-exp.c
<item>f_r1  :  f-exp.c
<item>f_r2  :  f-exp.c
<item>f_yycheck  :  f-exp.c
<item>f_yytable  :  f-exp.c
<item>innermost_block  :  parse.c
<item>yydefact  :  f-exp.c
<item>yydefgoto  :  f-exp.c
<item>yypgoto  :  f-exp.c
<item>yystos  :  f-exp.c
<item>yytranslate  :  f-exp.c
</itemize>
</descrip>

<sect1>Local Function f_lex()

<p><tt>static int f_lex ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>f-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>copy_name()  :  parse.c
<item>error()  :  utils.c
<item>language_lookup_primitive_type_by_name()  :  language.c
<item>lookup_symbol()  :  symtab.c
<item>match_string_literal()  :  f-exp.c
<item>parse_number()  :  f-exp.c
<item>write_dollar_variable()  :  parse.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>f_parse()  :  f-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>boolean_values  :  f-exp.c
<item>comma_terminates  :  parse.c
<item>current_gdbarch  :  gdbarch.c
<item>current_language  :  language.c
<item>dot_ops  :  f-exp.c
<item>expression_context_block  :  parse.c
<item>f77_keywords  :  f-exp.c
<item>f_lval  :  f-exp.c
<item>input_radix  :  valprint.c
<item>lexptr  :  parse.c
<item>paren_depth  :  parse.c
<item>prev_lexptr  :  parse.c
</itemize>
</descrip>

<sect1>Local Function growbuf_by_size()

<p><tt>static void growbuf_by_size ( int count )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>f-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>match_string_literal()  :  f-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>tempbuf  :  f-exp.c
<item>tempbufsize  :  f-exp.c
</itemize>
</descrip>

<sect1>Local Function match_string_literal()

<p><tt>static int match_string_literal ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>f-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>growbuf_by_size()  :  f-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>f_lex()  :  f-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>f_lval  :  f-exp.c
<item>lexptr  :  parse.c
<item>tempbuf  :  f-exp.c
<item>tempbufindex  :  f-exp.c
<item>tempbufsize  :  f-exp.c
</itemize>
</descrip>

<sect1>Local Function parse_number()

<p><tt>static int parse_number ( char* p, int len, int parsed_float, YYSTYPE* putithere )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>f-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_int_bit()  :  gdbarch.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>range_error()  :  language.c
<item>xfree()  :  utils.c
<item>atof(), isupper(), tolower(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>f_lex()  :  f-exp.c
<item>f_parse()  :  f-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>builtin_type_long  :  gdbtypes.c
<item>builtin_type_unsigned_int  :  gdbtypes.c
<item>builtin_type_unsigned_long  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
<item>input_radix  :  valprint.c
<item>range_check  :  language.c
</itemize>
</descrip>

<sect1>Local Function yy_reduce_print()

<p><tt>static void yy_reduce_print ( yytype_int16* yyssp, YYSTYPE* yyvsp, int f_rule )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>parser_fprintf()  :  parse.c
<item>yy_symbol_print()  :  f-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>f_parse()  :  f-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>f_r2  :  f-exp.c
<item>yyrline  :  f-exp.c
<item>yystos  :  f-exp.c
</itemize>
</descrip>

<sect1>Local Function yy_stack_print()

<p><tt>static void yy_stack_print ( yytype_int16* yybottom, yytype_int16* yytop )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>parser_fprintf()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>f_parse()  :  f-exp.c
</itemize>
</descrip>

<sect1>Local Function yy_symbol_print()

<p><tt>static void yy_symbol_print ( FILE* yyoutput, int yytype, YYSTYPE const* const yyvaluep )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>parser_fprintf()  :  parse.c
<item>yy_symbol_value_print()  :  f-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>f_parse()  :  f-exp.c
<item>yy_reduce_print()  :  f-exp.c
<item>yydestruct()  :  f-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yytname  :  f-exp.c
</itemize>
</descrip>

<sect1>Local Function yy_symbol_value_print()

<p><tt>static void yy_symbol_value_print ( FILE* yyoutput, int yytype, YYSTYPE const* const yyvaluep )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>yy_symbol_print()  :  f-exp.c
</itemize>
</descrip>

<sect1>Local Function yydestruct()

<p><tt>static void yydestruct ( const char* yymsg, int yytype, YYSTYPE* yyvaluep )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>parser_fprintf()  :  parse.c
<item>yy_symbol_print()  :  f-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>f_parse()  :  f-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>f_debug  :  f-exp.c
</itemize>
</descrip>

</article>
