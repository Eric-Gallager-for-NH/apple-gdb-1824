<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF ax-general.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for ax-general.c of gdb.cxref.
<author>cxref

<sect>File ax-general.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;ax.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;stdbool.h&gt;</tt>
</itemize>

<sect1>Global Variable aop_map

<p>
<tt>struct aop_map aop_map[]</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ax-gdb.c
<item>ax-general.c
<item>dwarf2loc.c
<item>tracepoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ax_print()  :  ax-general.c
<item>ax_reqs()  :  ax-general.c
</itemize>
</descrip>

<sect1>Global Function ax_const_d()

<p><tt>void ax_const_d ( struct agent_expr* x, long d )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
</descrip>

<sect1>Global Function ax_const_l()

<p><tt>void ax_const_l ( struct agent_expr* x, long l )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>append_const()  :  ax-general.c
<item>ax_ext()  :  ax-general.c
<item>ax_simple()  :  ax-general.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_tracepoint_var_ref()  :  dwarf2loc.c
<item>gen_expr()  :  ax-gdb.c
<item>gen_int_literal()  :  ax-gdb.c
<item>gen_left_shift()  :  ax-gdb.c
<item>gen_offset()  :  ax-gdb.c
<item>gen_scale()  :  ax-gdb.c
<item>gen_sizeof()  :  ax-gdb.c
<item>gen_traced_pop()  :  ax-gdb.c
<item>gen_var_ref()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Global Function ax_ext()

<p><tt>void ax_ext ( struct agent_expr* x, int n )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>generic_ext()  :  ax-general.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ax_const_l()  :  ax-general.c
<item>gen_sign_extend()  :  ax-gdb.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gen_bitfield_ref()  :  ax-gdb.c
<item>gen_extend()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Global Function ax_goto()

<p><tt>int ax_goto ( struct agent_expr* x, enum agent_op op )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>grow_expr()  :  ax-general.c
</itemize>
</descrip>

<sect1>Global Function ax_label()

<p><tt>void ax_label ( struct agent_expr* x, int patch, int target )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
</descrip>

<sect1>Global Function ax_print()

<p><tt>void ax_print ( struct ui_file* f, struct agent_expr* x )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>print_longest()  :  valprint.c
<item>read_const()  :  ax-general.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>agent_command()  :  ax-gdb.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>aop_map  :  ax-general.c
</itemize>
</descrip>

<sect1>Global Function ax_reg()

<p><tt>void ax_reg ( struct agent_expr* x, int reg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>grow_expr()  :  ax-general.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_tracepoint_var_ref()  :  dwarf2loc.c
<item>gen_frame_args_address()  :  ax-gdb.c
<item>gen_frame_locals_address()  :  ax-gdb.c
<item>gen_traced_pop()  :  ax-gdb.c
<item>gen_var_ref()  :  ax-gdb.c
<item>require_rvalue()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Global Function ax_reqs()

<p><tt>void ax_reqs ( struct agent_expr* ax, struct agent_reqs* reqs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>read_const()  :  ax-general.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>encode_actions()  :  tracepoint.c
<item>validate_actionline()  :  tracepoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>aop_map  :  ax-general.c
</itemize>
</descrip>

<sect1>Global Function ax_simple()

<p><tt>void ax_simple ( struct agent_expr* x, enum agent_op op )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>grow_expr()  :  ax-general.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ax_const_l()  :  ax-general.c
<item>dwarf2_tracepoint_var_ref()  :  dwarf2loc.c
<item>gen_add()  :  ax-gdb.c
<item>gen_binop()  :  ax-gdb.c
<item>gen_bitfield_ref()  :  ax-gdb.c
<item>gen_complement()  :  ax-gdb.c
<item>gen_fetch()  :  ax-gdb.c
<item>gen_left_shift()  :  ax-gdb.c
<item>gen_logical_not()  :  ax-gdb.c
<item>gen_offset()  :  ax-gdb.c
<item>gen_scale()  :  ax-gdb.c
<item>gen_sub()  :  ax-gdb.c
<item>gen_trace_for_expr()  :  ax-gdb.c
<item>gen_traced_pop()  :  ax-gdb.c
<item>gen_usual_arithmetic()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Global Function ax_trace_quick()

<p><tt>void ax_trace_quick ( struct agent_expr* x, int n )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>grow_expr()  :  ax-general.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gen_bitfield_ref()  :  ax-gdb.c
<item>gen_fetch()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Global Function ax_zero_ext()

<p><tt>void ax_zero_ext ( struct agent_expr* x, int n )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>generic_ext()  :  ax-general.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gen_bitfield_ref()  :  ax-gdb.c
<item>gen_extend()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Global Function free_agent_expr()

<p><tt>void free_agent_expr ( struct agent_expr* x )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>clear_collection_list()  :  tracepoint.c
<item>do_free_agent_expr_cleanup()  :  ax-general.c
<item>is_nontrivial_conversion()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_free_agent_expr()

<p><tt>struct cleanup* make_cleanup_free_agent_expr ( struct agent_expr* x )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>agent_command()  :  ax-gdb.c
<item>encode_actions()  :  tracepoint.c
<item>expr_to_agent()  :  ax-gdb.c
<item>gen_trace_for_expr()  :  ax-gdb.c
<item>validate_actionline()  :  tracepoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_free_agent_expr_cleanup()  :  ax-general.c
</itemize>
</descrip>

<sect1>Global Function new_agent_expr()

<p><tt>struct agent_expr* new_agent_expr ( CORE_ADDR scope )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>expr_to_agent()  :  ax-gdb.c
<item>gen_trace_for_expr()  :  ax-gdb.c
<item>is_nontrivial_conversion()  :  ax-gdb.c
</itemize>
</descrip>

<sect1>Local Function append_const()

<p><tt>static void append_const ( struct agent_expr* x, long val, int n )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-general.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>grow_expr()  :  ax-general.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ax_const_l()  :  ax-general.c
</itemize>
</descrip>

<sect1>Local Function do_free_agent_expr_cleanup()

<p><tt>static void do_free_agent_expr_cleanup ( void* x )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>free_agent_expr()  :  ax-general.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_free_agent_expr()  :  ax-general.c
</itemize>
</descrip>

<sect1>Local Function generic_ext()

<p><tt>static void generic_ext ( struct agent_expr* x, enum agent_op op, int n )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-general.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>grow_expr()  :  ax-general.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ax_ext()  :  ax-general.c
<item>ax_zero_ext()  :  ax-general.c
</itemize>
</descrip>

<sect1>Local Function grow_expr()

<p><tt>static void grow_expr ( struct agent_expr* x, int n )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-general.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>append_const()  :  ax-general.c
<item>ax_goto()  :  ax-general.c
<item>ax_reg()  :  ax-general.c
<item>ax_simple()  :  ax-general.c
<item>ax_trace_quick()  :  ax-general.c
<item>generic_ext()  :  ax-general.c
</itemize>
</descrip>

<sect1>Local Function read_const()

<p><tt>static long read_const ( struct agent_expr* x, int o, int n )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ax-general.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ax_print()  :  ax-general.c
<item>ax_reqs()  :  ax-general.c
</itemize>
</descrip>

</article>
