{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF target/target.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File target/target.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_wait.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/wait.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "regcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "event-loop.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objc-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <Availability.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "checkpoint.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/dis-asm.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exceptions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <setjmp.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exec.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DEFAULT_ALLOCSIZE 10\par}
{\s5\f1\fs20\ql\sb50\sa50 #define INHERIT( FIELD, TARGET )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define de_fault( field, value )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define MIN( A, B )\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable target_activity_fd\par}
{\s5\f1\fs20\ql\sb50\sa50 int target_activity_fd\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell clear_sigio_trap()\cell inflow.c\cell\row
\cell handle_sigio()\cell inflow.c\cell\row
\cell set_sigio_trap()\cell inflow.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable target_activity_function\par}
{\s5\f1\fs20\ql\sb50\sa50 int (*target_activity_function)(void)\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell clear_sigio_trap()\cell inflow.c\cell\row
\cell handle_sigio()\cell inflow.c\cell\row
\cell set_sigio_trap()\cell inflow.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable current_target\par}
{\s5\f1\fs20\ql\sb50\sa50 struct target_ops current_target\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell ada_lookup_struct_elt_type()\cell ada-lang.c\cell\row
\cell advance_command()\cell infcmd.c\cell\row
\cell allocate_space_in_inferior()\cell valops.c\cell\row
\cell allocate_space_in_inferior_malloc()\cell valops.c\cell\row
\cell async_disable_stdin()\cell event-top.c\cell\row
\cell async_enable_stdin()\cell event-top.c\cell\row
\cell async_remote_interrupt()\cell remote.c\cell\row
\cell attach_command()\cell infcmd.c\cell\row
\cell backtrace_command_1()\cell stack.c\cell\row
\cell bpstat_do_actions()\cell breakpoint.c\cell\row
\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell breakpoint_update()\cell breakpoint.c\cell\row
\cell catch_exception_command_1()\cell breakpoint.c\cell\row
\cell catch_info()\cell stack.c\cell\row
\cell coff_symtab_read()\cell coffread.c\cell\row
\cell command_handler()\cell event-top.c\cell\row
\cell compare_sections_command()\cell remote.c\cell\row
\cell complete_execution()\cell inf-loop.c\cell\row
\cell continue_command()\cell infcmd.c\cell\row
\cell cover_target_enable_exception_callback()\cell breakpoint.c\cell\row
\cell create_breakpoints()\cell breakpoint.c\cell\row
\cell default_macro_scope()\cell macroscope.c\cell\row
\cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell deprecated_safe_get_selected_frame()\cell frame.c\cell\row
\cell deprecated_write_register_bytes()\cell regcache.c\cell\row
\cell disable_breakpoints_in_shlibs()\cell breakpoint.c\cell\row
\cell disable_breakpoints_in_unloaded_shlib()\cell breakpoint.c\cell\row
\cell disable_exception_catch()\cell breakpoint.c\cell\row
\cell discard_inferior_status()\cell infrun.c\cell\row
\cell display_command()\cell printcmd.c\cell\row
\cell display_gdb_prompt()\cell event-top.c\cell\row
\cell do_captured_list_thread_ids()\cell thread.c\cell\row
\cell do_captured_thread_select()\cell thread.c\cell\row
\cell do_enable_breakpoint()\cell breakpoint.c\cell\row
\cell do_end_debugger_mode()\cell objc-lang.c\cell\row
\cell do_monitor_command()\cell target/target.c\cell\row
\cell dwarf_expr_tls_address()\cell dwarf2loc.c\cell\row
\cell execute_command()\cell top.c\cell\row
\cell extended_remote_async_create_inferior()\cell remote.c\cell\row
\cell fetch_inferior_event()\cell infrun.c\cell\row
\cell find_function_addr()\cell infcall.c\cell\row
\cell find_function_in_inferior()\cell valops.c\cell\row
\cell find_pc_partial_function_impl()\cell blockframe.c\cell\row
\cell finish_command()\cell infcmd.c\cell\row
\cell finish_inlined_subroutine_command()\cell infcmd.c\cell\row
\cell follow_exec()\cell infrun.c\cell\row
\cell follow_fork()\cell infrun.c\cell\row
\cell gdb_kod_query()\cell kod.c\cell\row
\cell get_class_address_from_object()\cell objc-lang.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell get_selected_block()\cell stack.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell getpkt_sane()\cell remote.c\cell\row
\cell gnu_v3_update_exception_catchpoints()\cell breakpoint.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell handle_alarm_while_calling()\cell infcall.c\cell\row
\cell handle_command()\cell infrun.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell inferior_event_handler()\cell inf-loop.c\cell\row
\cell info_threads_command()\cell thread.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell insert_breakpoints()\cell breakpoint.c\cell\row
\cell insert_catchpoint()\cell breakpoint.c\cell\row
\cell inside_main_func()\cell frame.c\cell\row
\cell internal_vproblem()\cell utils.c\cell\row
\cell interrupt_query()\cell remote.c\cell\row
\cell interrupt_target_command()\cell infcmd.c\cell\row
\cell jump_command()\cell infcmd.c\cell\row
\cell kill_command()\cell inflow.c\cell\row
\cell kill_if_already_running()\cell infcmd.c\cell\row
\cell kill_or_be_killed()\cell target/target.c\cell\row
\cell load_section_callback()\cell symfile.c\cell\row
\cell lookup_cached_function()\cell value.c\cell\row
\cell lookup_child_selector_nocache()\cell objc-lang.c\cell\row
\cell lookup_objc_class()\cell objc-lang.c\cell\row
\cell lookup_struct_elt_type()\cell gdbtypes.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell maybe_kill_then_attach()\cell target/target.c\cell\row
\cell maybe_kill_then_create_inferior()\cell target/target.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell new_objc_runtime_get_classname()\cell objc-lang.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell objc_check_safe_to_run_all_threads()\cell objc-lang.c\cell\row
\cell pid_info()\cell infcmd.c\cell\row
\cell pop_target()\cell target/target.c\cell\row
\cell print_command_1()\cell printcmd.c\cell\row
\cell print_float_info()\cell infcmd.c\cell\row
\cell print_function_pointer_address()\cell c-valprint.c\cell\row
\cell print_object_command()\cell objc-lang.c\cell\row
\cell print_vector_info()\cell infcmd.c\cell\row
\cell printf_command()\cell printcmd.c\cell\row
\cell proceed()\cell infrun.c\cell\row
\cell program_info()\cell infcmd.c\cell\row
\cell quit()\cell utils.c\cell\row
\cell quit_confirm()\cell top.c\cell\row
\cell quit_target()\cell top.c\cell\row
\cell re_enable_breakpoints_in_shlibs()\cell breakpoint.c\cell\row
\cell re_exec_1()\cell infcmd.c\cell\row
\cell read_command_file()\cell top.c\cell\row
\cell read_dbx_symtab()\cell dbxread.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell readchar()\cell remote.c\cell\row
\cell reattach_breakpoints()\cell breakpoint.c\cell\row
\cell record_currthread()\cell remote.c\cell\row
\cell regcache_raw_read()\cell regcache.c\cell\row
\cell regcache_raw_write()\cell regcache.c\cell\row
\cell registers_info()\cell infcmd.c\cell\row
\cell remote_async()\cell remote.c\cell\row
\cell remote_async_kill()\cell remote.c\cell\row
\cell remote_async_resume()\cell remote.c\cell\row
\cell remote_async_wait()\cell remote.c\cell\row
\cell remote_can_async_p()\cell remote.c\cell\row
\cell remote_detach()\cell remote.c\cell\row
\cell remote_disconnect()\cell remote.c\cell\row
\cell remote_interrupt()\cell remote.c\cell\row
\cell remote_is_async_p()\cell remote.c\cell\row
\cell remote_kill()\cell remote.c\cell\row
\cell remote_macosx_complete_create_or_attach()\cell remote.c\cell\row
\cell remote_macosx_open()\cell remote.c\cell\row
\cell remote_open_1()\cell remote.c\cell\row
\cell remote_start_remote()\cell remote.c\cell\row
\cell remote_wait()\cell remote.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\cell reopen_exec_file()\cell corefile.c\cell\row
\cell restore_inferior_status()\cell infrun.c\cell\row
\cell resume()\cell infrun.c\cell\row
\cell run_command_1()\cell infcmd.c\cell\row
\cell save_inferior_status()\cell infrun.c\cell\row
\cell set_schedlock_helper()\cell infrun.c\cell\row
\cell setup_target_debug()\cell target/target.c\cell\row
\cell signal_command()\cell infcmd.c\cell\row
\cell step_1_inlining()\cell infcmd.c\cell\row
\cell step_1_no_inlining()\cell infcmd.c\cell\row
\cell step_once()\cell infcmd.c\cell\row
\cell target_async_mask()\cell target/target.c\cell\row
\cell target_detach()\cell target/target.c\cell\row
\cell target_disconnect()\cell target/target.c\cell\row
\cell target_is_remote()\cell tracepoint.c\cell\row
\cell target_kill()\cell target/target.c\cell\row
\cell target_load()\cell target/target.c\cell\row
\cell target_preopen()\cell target/target.c\cell\row
\cell target_read_memory()\cell target/target.c\cell\row
\cell target_resize_to_sections()\cell target/target.c\cell\row
\cell target_write_memory()\cell target/target.c\cell\row
\cell tcomplain()\cell target/target.c\cell\row
\cell term_info()\cell inflow.c\cell\row
\cell thread_alive()\cell thread.c\cell\row
\cell thread_apply_all_command()\cell thread.c\cell\row
\cell thread_apply_command()\cell thread.c\cell\row
\cell thread_command()\cell thread.c\cell\row
\cell until_break_command()\cell breakpoint.c\cell\row
\cell until_command()\cell infcmd.c\cell\row
\cell update_current_target()\cell target/target.c\cell\row
\cell update_exception_catchpoints()\cell breakpoint.c\cell\row
\cell value_allocate_space_in_inferior()\cell valops.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_nsstring()\cell objc-lang.c\cell\row
\cell varobj_lookup_struct_elt_type_by_index()\cell varobj.c\cell\row
\cell vwarning()\cell utils.c\cell\row
\cell wait_for_inferior()\cell infrun.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable target_dcache\par}
{\s5\f1\fs20\ql\sb50\sa50 DCACHE* target_dcache\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell handle_inferior_event()\cell infrun.c\cell\row
\cell initialize_targets()\cell target/target.c\cell\row
\cell mem_delete_command()\cell memattr.c\cell\row
\cell mem_disable_command()\cell memattr.c\cell\row
\cell mem_enable_command()\cell memattr.c\cell\row
\cell memory_xfer_partial()\cell target/target.c\cell\row
\cell resume()\cell infrun.c\cell\row
\cell target_load()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable gdb_override_async\par}
{\s5\f1\fs20\ql\sb50\sa50 int gdb_override_async\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell advance_command()\cell infcmd.c\cell\row
\cell bpstat_do_actions()\cell breakpoint.c\cell\row
\cell command_handler()\cell event-top.c\cell\row
\cell continue_command()\cell infcmd.c\cell\row
\cell execute_command()\cell top.c\cell\row
\cell extended_remote_async_create_inferior()\cell remote.c\cell\row
\cell finish_command()\cell infcmd.c\cell\row
\cell finish_inlined_subroutine_command()\cell infcmd.c\cell\row
\cell gdb_set_async_override()\cell target/target.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell interrupt_target_command()\cell infcmd.c\cell\row
\cell jump_command()\cell infcmd.c\cell\row
\cell proceed()\cell infrun.c\cell\row
\cell re_exec_1()\cell infcmd.c\cell\row
\cell read_command_file()\cell top.c\cell\row
\cell remote_async_resume()\cell remote.c\cell\row
\cell run_command_1()\cell infcmd.c\cell\row
\cell step_1_inlining()\cell infcmd.c\cell\row
\cell step_1_no_inlining()\cell infcmd.c\cell\row
\cell until_break_command()\cell breakpoint.c\cell\row
\cell until_command()\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable deprecated_child_ops\par}
{\s5\f1\fs20\ql\sb50\sa50 struct target_ops deprecated_child_ops\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable attach_flag\par}
{\s5\f1\fs20\ql\sb50\sa50 int attach_flag\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell captured_main()\cell main.c\cell\row
\cell clear_sigint_trap()\cell inflow.c\cell\row
\cell generic_mourn_inferior()\cell target/target.c\cell\row
\cell quit_confirm()\cell top.c\cell\row
\cell quit_target()\cell top.c\cell\row
\cell set_sigint_trap()\cell inflow.c\cell\row
\cell terminal_inferior()\cell inflow.c\cell\row
\cell terminal_ours_1()\cell inflow.c\cell\row
\cell update_solib_list()\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable target_structs\par}
{\s5\f1\fs20\ql\sb50\sa50 struct target_ops** target_structs\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell target/target.c\cell\cell\row
Used in:\cell add_target()\cell target/target.c\cell\row
\cell find_core_target()\cell target/target.c\cell\row
\cell find_default_run_target()\cell target/target.c\cell\row
\cell find_run_target()\cell target/target.c\cell\row
\cell remove_target_sections()\cell target/target.c\cell\row
\cell target_resize_to_sections()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable target_struct_size\par}
{\s5\f1\fs20\ql\sb50\sa50 unsigned int target_struct_size\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell target/target.c\cell\cell\row
Used in:\cell add_target()\cell target/target.c\cell\row
\cell find_core_target()\cell target/target.c\cell\row
\cell find_default_run_target()\cell target/target.c\cell\row
\cell find_run_target()\cell target/target.c\cell\row
\cell remove_target_sections()\cell target/target.c\cell\row
\cell target_resize_to_sections()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable target_struct_index\par}
{\s5\f1\fs20\ql\sb50\sa50 unsigned int target_struct_index\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell target/target.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable target_struct_allocsize\par}
{\s5\f1\fs20\ql\sb50\sa50 unsigned int target_struct_allocsize\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell target/target.c\cell\cell\row
Used in:\cell add_target()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep External Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable show_breakpoint_hit_counts\par}
{\s5\f1\fs20\ql\sb50\sa50 extern int show_breakpoint_hit_counts\par}
\trowd\trgaph120\cellx1440\cellx5220
\intbl\plain
Defined in:\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable debug_target\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct target_ops debug_target\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell debug_check_is_objfile_loaded()\cell\cell\row
\cell debug_free_thread_inferior_status()\cell\cell\row
\cell debug_keep_going()\cell\cell\row
\cell debug_load_solib()\cell\cell\row
\cell debug_restore_thread_inferior_status()\cell\cell\row
\cell debug_save_thread_inferior_status()\cell\cell\row
\cell debug_to_acknowledge_created_inferior()\cell\cell\row
\cell debug_to_attach()\cell\cell\row
\cell debug_to_can_run()\cell\cell\row
\cell debug_to_can_use_hw_breakpoint()\cell\cell\row
\cell debug_to_close()\cell\cell\row
\cell debug_to_create_inferior()\cell\cell\row
\cell debug_to_detach()\cell\cell\row
\cell debug_to_disconnect()\cell\cell\row
\cell debug_to_enable_exception_callback()\cell\cell\row
\cell debug_to_fetch_registers()\cell\cell\row
\cell debug_to_files_info()\cell\cell\row
\cell debug_to_find_exception_catchpoints()\cell\cell\row
\cell debug_to_find_new_threads()\cell\cell\row
\cell debug_to_follow_fork()\cell\cell\row
\cell debug_to_get_current_exception_event()\cell\cell\row
\cell debug_to_has_exited()\cell\cell\row
\cell debug_to_insert_breakpoint()\cell\cell\row
\cell debug_to_insert_exec_catchpoint()\cell\cell\row
\cell debug_to_insert_fork_catchpoint()\cell\cell\row
\cell debug_to_insert_hw_breakpoint()\cell\cell\row
\cell debug_to_insert_vfork_catchpoint()\cell\cell\row
\cell debug_to_insert_watchpoint()\cell\cell\row
\cell debug_to_kill()\cell\cell\row
\cell debug_to_load()\cell\cell\row
\cell debug_to_lookup_symbol()\cell\cell\row
\cell debug_to_mourn_inferior()\cell\cell\row
\cell debug_to_notice_signals()\cell\cell\row
\cell debug_to_open()\cell\cell\row
\cell debug_to_pid_to_exec_file()\cell\cell\row
\cell debug_to_pid_to_str()\cell\cell\row
\cell debug_to_post_attach()\cell\cell\row
\cell debug_to_post_startup_inferior()\cell\cell\row
\cell debug_to_prepare_to_store()\cell\cell\row
\cell debug_to_rcmd()\cell\cell\row
\cell debug_to_region_size_ok_for_hw_watchpoint()\cell\cell\row
\cell debug_to_remove_breakpoint()\cell\cell\row
\cell debug_to_remove_exec_catchpoint()\cell\cell\row
\cell debug_to_remove_fork_catchpoint()\cell\cell\row
\cell debug_to_remove_hw_breakpoint()\cell\cell\row
\cell debug_to_remove_vfork_catchpoint()\cell\cell\row
\cell debug_to_remove_watchpoint()\cell\cell\row
\cell debug_to_reported_exec_events_per_exec_call()\cell\cell\row
\cell debug_to_resume()\cell\cell\row
\cell debug_to_stop()\cell\cell\row
\cell debug_to_stopped_by_watchpoint()\cell\cell\row
\cell debug_to_stopped_data_address()\cell\cell\row
\cell debug_to_store_registers()\cell\cell\row
\cell debug_to_terminal_inferior()\cell\cell\row
\cell debug_to_terminal_info()\cell\cell\row
\cell debug_to_terminal_init()\cell\cell\row
\cell debug_to_terminal_ours()\cell\cell\row
\cell debug_to_terminal_ours_for_output()\cell\cell\row
\cell debug_to_terminal_save_ours()\cell\cell\row
\cell debug_to_thread_alive()\cell\cell\row
\cell debug_to_wait()\cell\cell\row
\cell deprecated_debug_xfer_memory()\cell\cell\row
\cell do_monitor_command()\cell\cell\row
\cell setup_target_debug()\cell\cell\row
\cell target_stopped_data_address_p()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dummy_target\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct target_ops dummy_target\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell init_dummy_target()\cell\cell\row
\cell initialize_targets()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable target_stack\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct target_ops* target_stack\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell pop_target()\cell\cell\row
\cell push_target()\cell\cell\row
\cell target_info()\cell\cell\row
\cell unpush_target()\cell\cell\row
\cell update_current_target()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable targetlist\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct cmd_list_element* targetlist\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell add_target()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable trust_readonly\par}
{\s5\f1\fs20\ql\sb50\sa50 static int trust_readonly\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell initialize_targets()\cell\cell\row
\cell memory_xfer_partial()\cell\cell\row
\cell set_trust_readonly()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable targetdebug\par}
{\s5\f1\fs20\ql\sb50\sa50 static int targetdebug\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell deprecated_debug_xfer_memory()\cell\cell\row
\cell initialize_targets()\cell\cell\row
\cell target_xfer_partial()\cell\cell\row
\cell update_current_target()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable debug_target_writes\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_target_writes\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell initialize_targets()\cell\cell\row
\cell target_xfer_partial()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable targ_desc\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char targ_desc[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell initialize_targets()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function add_target()\par}
{\s5\f1\fs20\ql\sb50\sa50 void add_target ( struct target_ops* t )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  add_cmd(), add_prefix_cmd()\cell\cell\row
Called by:\cell _initialize_remote()\cell remote.c\cell\row
Refs Func:\cell default_xfer_partial()\cell target/target.c\cell\row
\cell target_command()\cell target/target.c\cell\row
Refs Var:\cell target_struct_allocsize\cell target/target.c\cell\row
\cell target_struct_size\cell target/target.c\cell\row
\cell target_structs\cell target/target.c\cell\row
\cell targetlist\cell target/target.c\cell\row
\cell  cmdlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function debug_to_enable_exception_callback()\par}
{\s5\f1\fs20\ql\sb50\sa50 int debug_to_enable_exception_callback ( enum exception_event_kind kind, int enable )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function do_restore_target_async_mask()\par}
{\s5\f1\fs20\ql\sb50\sa50 void do_restore_target_async_mask ( int mask )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell target_async_mask()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_core_target()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct target_ops* find_core_target ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Called by:\cell core_file_attach()\cell corefile.c\cell\row
Refs Var:\cell target_struct_size\cell target/target.c\cell\row
\cell target_structs\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_default_attach()\par}
{\s5\f1\fs20\ql\sb50\sa50 void find_default_attach ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell find_default_run_target()\cell target/target.c\cell\row
Used in:\cell init_dummy_target()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_default_create_inferior()\par}
{\s5\f1\fs20\ql\sb50\sa50 void find_default_create_inferior ( char* exec_file, char* allargs, char** env, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell find_default_run_target()\cell target/target.c\cell\row
Used in:\cell init_dummy_target()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_run_target()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct target_ops* find_run_target ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Called by:\cell follow_exec()\cell infrun.c\cell\row
Refs Var:\cell target_struct_size\cell target/target.c\cell\row
\cell target_structs\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_target_beneath()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct target_ops* find_target_beneath ( struct target_ops* t )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdb_set_async_override()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gdb_set_async_override ( void* on )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Called by:\cell read_command_file()\cell top.c\cell\row
Used in:\cell read_command_file()\cell top.c\cell\row
Refs Var:\cell gdb_override_async\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function generic_mourn_inferior()\par}
{\s5\f1\fs20\ql\sb50\sa50 void generic_mourn_inferior ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell breakpoint_clear_ignore_counts()\cell breakpoint.c\cell\row
\cell breakpoint_init_inferior()\cell breakpoint.c\cell\row
\cell registers_changed()\cell regcache.c\cell\row
\cell reinit_frame_cache()\cell frame.c\cell\row
\cell reinitialize_objc()\cell objc-lang.c\cell\row
\cell reopen_exec_file()\cell corefile.c\cell\row
\cell value_clear_inferior_string_pool()\cell valops.c\cell\row
\cell  checkpoint_clear_inferior(), deprecated_detach_hook()\cell\cell\row
Called by:\cell remote_mourn_1()\cell remote.c\cell\row
Refs Var:\cell attach_flag\cell target/target.c\cell\row
\cell deprecated_detach_hook\cell top.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell null_ptid\cell infrun.c\cell\row
\cell show_breakpoint_hit_counts\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_target_memory()\par}
{\s5\f1\fs20\ql\sb50\sa50 void get_target_memory ( struct target_ops* ops, CORE_ADDR addr, gdb_byte* buf, long len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell memory_error()\cell corefile.c\cell\row
\cell target_read()\cell target/target.c\cell\row
Called by:\cell get_target_memory_unsigned()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_target_memory_unsigned()\par}
{\s5\f1\fs20\ql\sb50\sa50 unsigned long get_target_memory_unsigned ( struct target_ops* ops, CORE_ADDR addr, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell get_target_memory()\cell target/target.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function initialize_targets()\par}
{\s5\f1\fs20\ql\sb50\sa50 void initialize_targets ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell init_dummy_target()\cell target/target.c\cell\row
\cell push_target()\cell target/target.c\cell\row
\cell  add_com(), add_info(), add_setshow_boolean_cmd(), add_setshow_zinteger_cmd(), dcache_init()\cell\cell\row
Called by:\cell gdb_init()\cell top.c\cell\row
Refs Func:\cell do_monitor_command()\cell target/target.c\cell\row
\cell show_targetdebug()\cell target/target.c\cell\row
\cell show_trust_readonly()\cell target/target.c\cell\row
\cell target_info()\cell target/target.c\cell\row
Refs Var:\cell debug_target_writes\cell target/target.c\cell\row
\cell dummy_target\cell target/target.c\cell\row
\cell targ_desc\cell target/target.c\cell\row
\cell target_dcache\cell target/target.c\cell\row
\cell targetdebug\cell target/target.c\cell\row
\cell trust_readonly\cell target/target.c\cell\row
\cell  setdebuglist, setlist, showdebuglist, showlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function length_of_this_instruction()\par}
{\s5\f1\fs20\ql\sb50\sa50 int length_of_this_instruction ( CORE_ADDR memaddr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell gdb_disassemble_info_noprint()\cell target/target.c\cell\row
\cell gdbarch_print_insn()\cell gdbarch.c\cell\row
\cell ui_out_stream_new()\cell ui-out.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
\cell x86_analyze_prologue()\cell target/x86-shared-tdep.c\cell\row
\cell x86_blocks_context_var_copy_pattern_p()\cell target/x86-shared-tdep.c\cell\row
\cell x86_cxx_virtual_override_thunk_trampline()\cell target/x86-shared-tdep.c\cell\row
\cell x86_picbase_setup_pattern_p()\cell target/x86-shared-tdep.c\cell\row
\cell x86_unopt_arg_copy_to_local_stack_p()\cell target/x86-shared-tdep.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function noprocess()\par}
{\s5\f1\fs20\ql\sb50\sa50 void noprocess ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
\cell nosupport_runtime()\cell target/target.c\cell\row
Used in:\cell update_current_target()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function normal_pid_to_str()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* normal_pid_to_str ( ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell ptid_get_pid()\cell infrun.c\cell\row
\cell xsnprintf()\cell utils.c\cell\row
Used in:\cell init_dummy_target()\cell target/target.c\cell\row
\cell update_current_target()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function pop_target()\par}
{\s5\f1\fs20\ql\sb50\sa50 void pop_target ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell target_close()\cell target/target.c\cell\row
\cell unpush_target()\cell target/target.c\cell\row
Called by:\cell inferior_event_handler()\cell inf-loop.c\cell\row
\cell remote_macosx_complete_create_or_attach()\cell remote.c\cell\row
\cell remote_macosx_create_inferior()\cell remote.c\cell\row
\cell remote_open_1()\cell remote.c\cell\row
\cell target_preopen()\cell target/target.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell gdb_stderr\cell main.c\cell\row
\cell target_stack\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function push_target()\par}
{\s5\f1\fs20\ql\sb50\sa50 int push_target ( struct target_ops* t )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell target_close()\cell target/target.c\cell\row
\cell update_current_target()\cell target/target.c\cell\row
Called by:\cell follow_exec()\cell infrun.c\cell\row
\cell initialize_targets()\cell target/target.c\cell\row
\cell remote_open_1()\cell remote.c\cell\row
Refs Var:\cell gdb_stderr\cell main.c\cell\row
\cell target_stack\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function remove_target_sections()\par}
{\s5\f1\fs20\ql\sb50\sa50 void remove_target_sections ( bfd* abfd )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell target_resize_to_sections()\cell target/target.c\cell\row
Called by:\cell clear_solib()\cell solib.c\cell\row
\cell free_objfile_internal()\cell objfiles.c\cell\row
\cell reread_symbols_for_objfile()\cell symfile.c\cell\row
\cell update_solib_list()\cell solib.c\cell\row
Refs Var:\cell target_struct_size\cell target/target.c\cell\row
\cell target_structs\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_trust_readonly()\par}
{\s5\f1\fs20\ql\sb50\sa50 int set_trust_readonly ( int newval )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Called by:\cell default_memory_insert_breakpoint()\cell mem-break.c\cell\row
\cell default_memory_remove_breakpoint()\cell mem-break.c\cell\row
\cell set_trust_readonly_cleanup()\cell target/target.c\cell\row
Refs Var:\cell trust_readonly\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_trust_readonly_cleanup()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_trust_readonly_cleanup ( void* newone )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell set_trust_readonly()\cell target/target.c\cell\row
Used in:\cell default_memory_insert_breakpoint()\cell mem-break.c\cell\row
\cell default_memory_remove_breakpoint()\cell mem-break.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function store_waitstatus()\par}
{\s5\f1\fs20\ql\sb50\sa50 void store_waitstatus ( struct target_waitstatus* ourstatus, int hoststatus )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell  target_signal_from_host()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_async_mask()\par}
{\s5\f1\fs20\ql\sb50\sa50 int target_async_mask ( int mask )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Called by:\cell do_restore_target_async_mask()\cell target/target.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_close()\par}
{\s5\f1\fs20\ql\sb50\sa50 void target_close ( struct target_ops* targ, int quitting )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Called by:\cell debug_to_close()\cell target/target.c\cell\row
\cell pop_target()\cell target/target.c\cell\row
\cell push_target()\cell target/target.c\cell\row
\cell quit_target()\cell top.c\cell\row
\cell unpush_target()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_detach()\par}
{\s5\f1\fs20\ql\sb50\sa50 void target_detach ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell do_hand_call_cleanups()\cell utils.c\cell\row
Called by:\cell captured_main()\cell main.c\cell\row
\cell detach_command()\cell infcmd.c\cell\row
\cell quit_target()\cell top.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_disconnect()\par}
{\s5\f1\fs20\ql\sb50\sa50 void target_disconnect ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Called by:\cell disconnect_command()\cell infcmd.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_ignore()\par}
{\s5\f1\fs20\ql\sb50\sa50 void target_ignore ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Used in:\cell update_current_target()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_kill()\par}
{\s5\f1\fs20\ql\sb50\sa50 void target_kill ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Called by:\cell attach_command()\cell infcmd.c\cell\row
\cell kill_command()\cell inflow.c\cell\row
\cell kill_if_already_running()\cell infcmd.c\cell\row
\cell kill_or_be_killed()\cell target/target.c\cell\row
\cell quit_target()\cell top.c\cell\row
\cell target_preopen()\cell target/target.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_load()\par}
{\s5\f1\fs20\ql\sb50\sa50 void target_load ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell  dcache_invalidate()\cell\cell\row
Called by:\cell load_command()\cell symfile.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell target_dcache\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_preopen()\par}
{\s5\f1\fs20\ql\sb50\sa50 void target_preopen ( int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell dont_repeat()\cell top.c\cell\row
\cell error()\cell utils.c\cell\row
\cell pop_target()\cell target/target.c\cell\row
\cell query()\cell utils.c\cell\row
\cell target_kill()\cell target/target.c\cell\row
Called by:\cell remote_open_1()\cell remote.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_read()\par}
{\s5\f1\fs20\ql\sb50\sa50 long target_read ( struct target_ops* ops, enum target_object object, const char* annex, gdb_byte* buf, unsigned long offset, long len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell quit()\cell utils.c\cell\row
\cell target_read_partial()\cell target/target.c\cell\row
Called by:\cell get_target_memory()\cell target/target.c\cell\row
\cell target_read_memory()\cell target/target.c\cell\row
Refs Var:\cell quit_flag\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_read_memory()\par}
{\s5\f1\fs20\ql\sb50\sa50 int target_read_memory ( CORE_ADDR memaddr, gdb_byte* myaddr, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell target_read()\cell target/target.c\cell\row
Called by:\cell cp_print_value()\cell cp-valprint.c\cell\row
\cell default_memory_insert_breakpoint()\cell mem-break.c\cell\row
\cell default_memory_remove_breakpoint()\cell mem-break.c\cell\row
\cell deprecated_read_memory_nobpt()\cell breakpoint.c\cell\row
\cell dis_asm_read_memory()\cell disasm.c\cell\row
\cell dis_asm_read_memory_noprint()\cell target/target.c\cell\row
\cell extract_string()\cell ada-lang.c\cell\row
\cell load_progress()\cell symfile.c\cell\row
\cell partial_memory_read()\cell valprint.c\cell\row
\cell pascal_object_print_value()\cell p-valprint.c\cell\row
\cell re_enable_breakpoints_in_shlibs()\cell breakpoint.c\cell\row
\cell read_memory()\cell corefile.c\cell\row
\cell search_struct_field()\cell valops.c\cell\row
\cell search_struct_method()\cell valops.c\cell\row
\cell target_read_string()\cell target/target.c\cell\row
\cell val_print_string()\cell valprint.c\cell\row
Used in:\cell symbol_file_add_from_memory()\cell symfile-mem.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_read_partial()\par}
{\s5\f1\fs20\ql\sb50\sa50 long target_read_partial ( struct target_ops* ops, enum target_object object, const char* annex, gdb_byte* buf, unsigned long offset, long len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell target_xfer_partial()\cell target/target.c\cell\row
Called by:\cell gdb_kod_query()\cell kod.c\cell\row
\cell target_read()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_read_string()\par}
{\s5\f1\fs20\ql\sb50\sa50 int target_read_string ( CORE_ADDR memaddr, char** string, int len, int* errnop )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell target_read_memory()\cell target/target.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
Called by:\cell print_subexp_standard()\cell expprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_resize_to_sections()\par}
{\s5\f1\fs20\ql\sb50\sa50 int target_resize_to_sections ( struct target_ops* target, int num_added )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
Called by:\cell build_target_sections_from_bfd()\cell bfd-target.c\cell\row
\cell remove_target_sections()\cell target/target.c\cell\row
\cell update_solib_list()\cell solib.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell target_struct_size\cell target/target.c\cell\row
\cell target_structs\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_section_by_addr()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct section_table* target_section_by_addr ( struct target_ops* target, CORE_ADDR addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Called by:\cell target_bfd_xfer_partial()\cell bfd-target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_stopped_data_address_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int target_stopped_data_address_p ( struct target_ops* target )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Refs Func:\cell debug_to_stopped_data_address()\cell target/target.c\cell\row
\cell return_zero()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_write()\par}
{\s5\f1\fs20\ql\sb50\sa50 long target_write ( struct target_ops* ops, enum target_object object, const char* annex, const gdb_byte* buf, unsigned long offset, long len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell target_write_with_progress()\cell target/target.c\cell\row
Called by:\cell target_write_memory()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_write_memory()\par}
{\s5\f1\fs20\ql\sb50\sa50 int target_write_memory ( CORE_ADDR memaddr, const gdb_byte* myaddr, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell target_write()\cell target/target.c\cell\row
Called by:\cell default_memory_insert_breakpoint()\cell mem-break.c\cell\row
\cell default_memory_remove_breakpoint()\cell mem-break.c\cell\row
\cell write_memory()\cell corefile.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_write_partial()\par}
{\s5\f1\fs20\ql\sb50\sa50 long target_write_partial ( struct target_ops* ops, enum target_object object, const char* annex, const gdb_byte* buf, unsigned long offset, long len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell target_xfer_partial()\cell target/target.c\cell\row
Called by:\cell target_write_with_progress()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function target_write_with_progress()\par}
{\s5\f1\fs20\ql\sb50\sa50 long target_write_with_progress ( struct target_ops* ops, enum target_object object, const char* annex, const gdb_byte* buf, unsigned long offset, long len, void (*progress)(unsigned long,void*), void* baton )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell quit()\cell utils.c\cell\row
\cell target_write_partial()\cell target/target.c\cell\row
Called by:\cell load_section_callback()\cell symfile.c\cell\row
\cell target_write()\cell target/target.c\cell\row
Refs Var:\cell quit_flag\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function unpush_target()\par}
{\s5\f1\fs20\ql\sb50\sa50 int unpush_target ( struct target_ops* t )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell target_close()\cell target/target.c\cell\row
\cell update_current_target()\cell target/target.c\cell\row
Called by:\cell pop_target()\cell target/target.c\cell\row
\cell remote_mourn_1()\cell remote.c\cell\row
\cell remote_open_1()\cell remote.c\cell\row
Refs Var:\cell target_stack\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function update_current_target()\par}
{\s5\f1\fs20\ql\sb50\sa50 void update_current_target ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell setup_target_debug()\cell target/target.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell add_kext_command()\cell symfile.c\cell\row
\cell add_symbol_file_command()\cell symfile.c\cell\row
\cell push_target()\cell target/target.c\cell\row
\cell unpush_target()\cell target/target.c\cell\row
Refs Func:\cell allocate_space_in_inferior_malloc()\cell valops.c\cell\row
\cell default_region_size_ok_for_hw_watchpoint()\cell target/target.c\cell\row
\cell default_setup_safe_print()\cell target/target.c\cell\row
\cell default_terminal_info()\cell target/target.c\cell\row
\cell default_xfer_partial()\cell target/target.c\cell\row
\cell maybe_kill_then_attach()\cell target/target.c\cell\row
\cell maybe_kill_then_create_inferior()\cell target/target.c\cell\row
\cell memory_insert_breakpoint()\cell mem-break.c\cell\row
\cell memory_remove_breakpoint()\cell mem-break.c\cell\row
\cell nomemory()\cell target/target.c\cell\row
\cell noprocess()\cell target/target.c\cell\row
\cell normal_pid_to_str()\cell target/target.c\cell\row
\cell nosupport_runtime()\cell target/target.c\cell\row
\cell nosymbol()\cell target/target.c\cell\row
\cell return_minus_one()\cell target/target.c\cell\row
\cell return_one()\cell target/target.c\cell\row
\cell return_zero()\cell target/target.c\cell\row
\cell target_ignore()\cell target/target.c\cell\row
\cell tcomplain()\cell target/target.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell target_stack\cell target/target.c\cell\row
\cell targetdebug\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function current_xfer_partial()\par}
{\s5\f1\fs20\ql\sb50\sa50 static long current_xfer_partial ( struct target_ops* ops, enum target_object object, const char* annex, gdb_byte* readbuf, const gdb_byte* writebuf, unsigned long offset, long len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_check_is_objfile_loaded()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_check_is_objfile_loaded ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_free_thread_inferior_status()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_free_thread_inferior_status ( void* p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_keep_going()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_keep_going ( CORE_ADDR stop_pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell paddr()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_load_solib()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* debug_load_solib ( char* path, char* flags )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell value_as_address()\cell value.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_print_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_print_register ( const char* func, int regno )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell deprecated_read_register_gen()\cell regcache.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell gdbarch_num_pseudo_regs()\cell gdbarch.c\cell\row
\cell gdbarch_num_regs()\cell gdbarch.c\cell\row
\cell gdbarch_register_name()\cell gdbarch.c\cell\row
\cell paddr_d()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell read_register()\cell regcache.c\cell\row
\cell register_size()\cell regcache.c\cell\row
Called by:\cell debug_to_fetch_registers()\cell target/target.c\cell\row
\cell debug_to_store_registers()\cell target/target.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_restore_thread_inferior_status()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_restore_thread_inferior_status ( void* p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_save_thread_inferior_status()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void* debug_save_thread_inferior_status ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_acknowledge_created_inferior()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_acknowledge_created_inferior ( int pid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_attach()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_attach ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_can_run()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_can_run ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_can_use_hw_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_can_use_hw_breakpoint ( int type, int cnt, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_close()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_close ( int quitting )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell target_close()\cell target/target.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_create_inferior()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_create_inferior ( char* exec_file, char* args, char** env, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_detach()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_detach ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_disconnect()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_disconnect ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_fetch_registers()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_fetch_registers ( int regno )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell debug_print_register()\cell target/target.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_files_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_files_info ( struct target_ops* target )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_find_exception_catchpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtabs_and_lines* debug_to_find_exception_catchpoints ( enum exception_event_kind kind, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_find_new_threads()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_find_new_threads ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fputs_unfiltered()\cell ui-file.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_follow_fork()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_follow_fork ( int follow_child )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_get_current_exception_event()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct exception_event_record* debug_to_get_current_exception_event ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_has_exited()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_has_exited ( int pid, int wait_status, int* exit_status )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_insert_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_insert_breakpoint ( CORE_ADDR addr, gdb_byte* save )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_insert_exec_catchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_insert_exec_catchpoint ( int pid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_insert_fork_catchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_insert_fork_catchpoint ( int pid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_insert_hw_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_insert_hw_breakpoint ( CORE_ADDR addr, gdb_byte* save )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_insert_vfork_catchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_insert_vfork_catchpoint ( int pid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_insert_watchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_insert_watchpoint ( CORE_ADDR addr, int len, int type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_kill()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_kill ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_load()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_load ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_lookup_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_lookup_symbol ( const char* name, CORE_ADDR* addrp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_mourn_inferior()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_mourn_inferior ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_notice_signals()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_notice_signals ( ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell ptid_get_pid()\cell infrun.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_open()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_open ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_pid_to_exec_file()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* debug_to_pid_to_exec_file ( int pid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_pid_to_str()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* debug_to_pid_to_str ( ptid_t pid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell ptid_get_pid()\cell infrun.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_post_attach()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_post_attach ( int pid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_post_startup_inferior()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_post_startup_inferior ( ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell ptid_get_pid()\cell infrun.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_prepare_to_store()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_prepare_to_store ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_rcmd()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_rcmd ( const char* command, struct ui_file* outbuf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell do_monitor_command()\cell target/target.c\cell\row
\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_region_size_ok_for_hw_watchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_region_size_ok_for_hw_watchpoint ( int byte_count )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_remove_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_remove_breakpoint ( CORE_ADDR addr, gdb_byte* save )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_remove_exec_catchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_remove_exec_catchpoint ( int pid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_remove_fork_catchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_remove_fork_catchpoint ( int pid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_remove_hw_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_remove_hw_breakpoint ( CORE_ADDR addr, gdb_byte* save )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_remove_vfork_catchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_remove_vfork_catchpoint ( int pid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_remove_watchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_remove_watchpoint ( CORE_ADDR addr, int len, int type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_reported_exec_events_per_exec_call()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_reported_exec_events_per_exec_call ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_resume()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_resume ( ptid_t ptid, int step, enum target_signal siggnal )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell ptid_get_pid()\cell infrun.c\cell\row
\cell  target_signal_to_name()\cell\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_stop()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_stop ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_stopped_by_watchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_stopped_by_watchpoint ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_stopped_data_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_stopped_data_address ( struct target_ops* target, CORE_ADDR* addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
\cell target_stopped_data_address_p()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_store_registers()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_store_registers ( int regno )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell debug_print_register()\cell target/target.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_terminal_inferior()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_terminal_inferior ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_terminal_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_terminal_info ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_terminal_init()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_terminal_init ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_terminal_ours()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_terminal_ours ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_terminal_ours_for_output()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_terminal_ours_for_output ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_terminal_save_ours()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void debug_to_terminal_save_ours ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_thread_alive()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_to_thread_alive ( ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell ptid_get_pid()\cell infrun.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function debug_to_wait()\par}
{\s5\f1\fs20\ql\sb50\sa50 static ptid_t debug_to_wait ( ptid_t ptid, struct target_waitstatus* status, gdb_client_data client_data )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell ptid_get_pid()\cell infrun.c\cell\row
\cell  target_signal_to_name()\cell\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function default_region_size_ok_for_hw_watchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int default_region_size_ok_for_hw_watchpoint ( int byte_count )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Used in:\cell update_current_target()\cell target/target.c\cell\row
Refs Var:\cell builtin_type_void_data_ptr\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function default_setup_safe_print()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int default_setup_safe_print ( struct cleanup** ret_cleanup )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell make_cleanup()\cell utils.c\cell\row
Used in:\cell update_current_target()\cell target/target.c\cell\row
Refs Func:\cell null_cleanup()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function default_terminal_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void default_terminal_info ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell printf_unfiltered()\cell utils.c\cell\row
Used in:\cell update_current_target()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function default_xfer_partial()\par}
{\s5\f1\fs20\ql\sb50\sa50 static long default_xfer_partial ( struct target_ops* ops, enum target_object object, const char* annex, gdb_byte* readbuf, const gdb_byte* writebuf, unsigned long offset, long len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __error(), __inline_memcpy_chk()\cell\cell\row
Used in:\cell add_target()\cell target/target.c\cell\row
\cell init_dummy_target()\cell target/target.c\cell\row
\cell update_current_target()\cell target/target.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function deprecated_debug_xfer_memory()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int deprecated_debug_xfer_memory ( CORE_ADDR memaddr, bfd_byte* myaddr, int len, int write, struct mem_attrib* attrib, struct target_ops* target )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell fputc_unfiltered()\cell utils.c\cell\row
\cell fputs_unfiltered()\cell ui-file.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
Used in:\cell setup_target_debug()\cell target/target.c\cell\row
Refs Var:\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell targetdebug\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dis_asm_memory_error_noprint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dis_asm_memory_error_noprint ( int status, bfd_vma memaddr, struct disassemble_info* info )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell memory_error()\cell corefile.c\cell\row
Used in:\cell gdb_disassemble_info_noprint()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dis_asm_print_address_noprint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dis_asm_print_address_noprint ( bfd_vma addr, struct disassemble_info* info )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell gdb_disassemble_info_noprint()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dis_asm_read_memory_noprint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int dis_asm_read_memory_noprint ( bfd_vma memaddr, gdb_byte* myaddr, unsigned int len, struct disassemble_info* info )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell target_read_memory()\cell target/target.c\cell\row
Used in:\cell gdb_disassemble_info_noprint()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_monitor_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_monitor_command ( const char* cmd, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
Used in:\cell initialize_targets()\cell target/target.c\cell\row
Refs Func:\cell debug_to_rcmd()\cell target/target.c\cell\row
\cell tcomplain()\cell target/target.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell debug_target\cell target/target.c\cell\row
\cell gdb_stdtarg\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dummy_find_memory_regions()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int dummy_find_memory_regions ( int (*ignore1)(CORE_ADDR unused01,unsigned long uu02,int uu03,int uu04,int uu05,void* uu06), void* ignore2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
Used in:\cell init_dummy_target()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dummy_make_corefile_notes()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* dummy_make_corefile_notes ( bfd* ignore1, int* ignore2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
Used in:\cell init_dummy_target()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_default_run_target()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct target_ops* find_default_run_target ( const char* do_mesg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Called by:\cell find_default_attach()\cell target/target.c\cell\row
\cell find_default_create_inferior()\cell target/target.c\cell\row
Refs Var:\cell target_struct_size\cell target/target.c\cell\row
\cell target_structs\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function fprintf_disasm_noprint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int fprintf_disasm_noprint ( void* stream, const char* format, ... )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  __builtin_va_end(), __builtin_va_start()\cell\cell\row
Used in:\cell gdb_disassemble_info_noprint()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gdb_disassemble_info_noprint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct disassemble_info gdb_disassemble_info_noprint ( struct gdbarch* gdbarch, struct ui_file* file )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell gdbarch_bfd_arch_info()\cell gdbarch.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell  disassemble_init_for_target(), init_disassemble_info()\cell\cell\row
Called by:\cell length_of_this_instruction()\cell target/target.c\cell\row
Refs Func:\cell dis_asm_memory_error_noprint()\cell target/target.c\cell\row
\cell dis_asm_print_address_noprint()\cell target/target.c\cell\row
\cell dis_asm_read_memory_noprint()\cell target/target.c\cell\row
\cell fprintf_disasm_noprint()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function init_dummy_target()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void init_dummy_target ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Called by:\cell initialize_targets()\cell target/target.c\cell\row
Refs Func:\cell default_xfer_partial()\cell target/target.c\cell\row
\cell dummy_find_memory_regions()\cell target/target.c\cell\row
\cell dummy_make_corefile_notes()\cell target/target.c\cell\row
\cell find_default_attach()\cell target/target.c\cell\row
\cell find_default_create_inferior()\cell target/target.c\cell\row
\cell normal_pid_to_str()\cell target/target.c\cell\row
Refs Var:\cell dummy_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function kill_or_be_killed()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void kill_or_be_killed ( int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell query()\cell utils.c\cell\row
\cell target_kill()\cell target/target.c\cell\row
\cell tcomplain()\cell target/target.c\cell\row
Called by:\cell maybe_kill_then_attach()\cell target/target.c\cell\row
\cell maybe_kill_then_create_inferior()\cell target/target.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function maybe_kill_then_attach()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void maybe_kill_then_attach ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell kill_or_be_killed()\cell target/target.c\cell\row
Used in:\cell update_current_target()\cell target/target.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function maybe_kill_then_create_inferior()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void maybe_kill_then_create_inferior ( char* exec, char* args, char** env, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell kill_or_be_killed()\cell target/target.c\cell\row
Used in:\cell update_current_target()\cell target/target.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function memory_xfer_partial()\par}
{\s5\f1\fs20\ql\sb50\sa50 static long memory_xfer_partial ( struct target_ops* ops, void* readbuf, const void* writebuf, unsigned long memaddr, long len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell find_pc_sect_in_ordered_sections()\cell objfiles.c\cell\row
\cell lookup_mem_region()\cell memattr.c\cell\row
\cell  dcache_xfer_memory(), xfer_memory()\cell\cell\row
Called by:\cell target_xfer_partial()\cell target/target.c\cell\row
Refs Var:\cell target_dcache\cell target/target.c\cell\row
\cell trust_readonly\cell target/target.c\cell\row
\cell  only_read_from_live_memory\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function nomemory()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int nomemory ( CORE_ADDR memaddr, char* myaddr, int len, int write, struct target_ops* t )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell  __error()\cell\cell\row
Used in:\cell update_current_target()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function nosupport_runtime()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void nosupport_runtime ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell noprocess()\cell target/target.c\cell\row
\cell ptid_equal()\cell infrun.c\cell\row
Used in:\cell update_current_target()\cell target/target.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\cell null_ptid\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function nosymbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int nosymbol ( char* name, CORE_ADDR* addrp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Used in:\cell update_current_target()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function return_minus_one()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int return_minus_one ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Used in:\cell update_current_target()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function return_one()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int return_one ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Used in:\cell update_current_target()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function return_zero()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int return_zero ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Used in:\cell target_stopped_data_address_p()\cell target/target.c\cell\row
\cell update_current_target()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function setup_target_debug()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void setup_target_debug ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell update_current_target()\cell target/target.c\cell\row
Refs Func:\cell debug_check_is_objfile_loaded()\cell target/target.c\cell\row
\cell debug_free_thread_inferior_status()\cell target/target.c\cell\row
\cell debug_keep_going()\cell target/target.c\cell\row
\cell debug_load_solib()\cell target/target.c\cell\row
\cell debug_restore_thread_inferior_status()\cell target/target.c\cell\row
\cell debug_save_thread_inferior_status()\cell target/target.c\cell\row
\cell debug_to_acknowledge_created_inferior()\cell target/target.c\cell\row
\cell debug_to_attach()\cell target/target.c\cell\row
\cell debug_to_can_run()\cell target/target.c\cell\row
\cell debug_to_can_use_hw_breakpoint()\cell target/target.c\cell\row
\cell debug_to_close()\cell target/target.c\cell\row
\cell debug_to_create_inferior()\cell target/target.c\cell\row
\cell debug_to_detach()\cell target/target.c\cell\row
\cell debug_to_disconnect()\cell target/target.c\cell\row
\cell debug_to_enable_exception_callback()\cell target/target.c\cell\row
\cell debug_to_fetch_registers()\cell target/target.c\cell\row
\cell debug_to_files_info()\cell target/target.c\cell\row
\cell debug_to_find_exception_catchpoints()\cell target/target.c\cell\row
\cell debug_to_find_new_threads()\cell target/target.c\cell\row
\cell debug_to_follow_fork()\cell target/target.c\cell\row
\cell debug_to_get_current_exception_event()\cell target/target.c\cell\row
\cell debug_to_has_exited()\cell target/target.c\cell\row
\cell debug_to_insert_breakpoint()\cell target/target.c\cell\row
\cell debug_to_insert_exec_catchpoint()\cell target/target.c\cell\row
\cell debug_to_insert_fork_catchpoint()\cell target/target.c\cell\row
\cell debug_to_insert_hw_breakpoint()\cell target/target.c\cell\row
\cell debug_to_insert_vfork_catchpoint()\cell target/target.c\cell\row
\cell debug_to_insert_watchpoint()\cell target/target.c\cell\row
\cell debug_to_kill()\cell target/target.c\cell\row
\cell debug_to_load()\cell target/target.c\cell\row
\cell debug_to_lookup_symbol()\cell target/target.c\cell\row
\cell debug_to_mourn_inferior()\cell target/target.c\cell\row
\cell debug_to_notice_signals()\cell target/target.c\cell\row
\cell debug_to_open()\cell target/target.c\cell\row
\cell debug_to_pid_to_exec_file()\cell target/target.c\cell\row
\cell debug_to_pid_to_str()\cell target/target.c\cell\row
\cell debug_to_post_attach()\cell target/target.c\cell\row
\cell debug_to_post_startup_inferior()\cell target/target.c\cell\row
\cell debug_to_prepare_to_store()\cell target/target.c\cell\row
\cell debug_to_rcmd()\cell target/target.c\cell\row
\cell debug_to_region_size_ok_for_hw_watchpoint()\cell target/target.c\cell\row
\cell debug_to_remove_breakpoint()\cell target/target.c\cell\row
\cell debug_to_remove_exec_catchpoint()\cell target/target.c\cell\row
\cell debug_to_remove_fork_catchpoint()\cell target/target.c\cell\row
\cell debug_to_remove_hw_breakpoint()\cell target/target.c\cell\row
\cell debug_to_remove_vfork_catchpoint()\cell target/target.c\cell\row
\cell debug_to_remove_watchpoint()\cell target/target.c\cell\row
\cell debug_to_reported_exec_events_per_exec_call()\cell target/target.c\cell\row
\cell debug_to_resume()\cell target/target.c\cell\row
\cell debug_to_stop()\cell target/target.c\cell\row
\cell debug_to_stopped_by_watchpoint()\cell target/target.c\cell\row
\cell debug_to_stopped_data_address()\cell target/target.c\cell\row
\cell debug_to_store_registers()\cell target/target.c\cell\row
\cell debug_to_terminal_inferior()\cell target/target.c\cell\row
\cell debug_to_terminal_info()\cell target/target.c\cell\row
\cell debug_to_terminal_init()\cell target/target.c\cell\row
\cell debug_to_terminal_ours()\cell target/target.c\cell\row
\cell debug_to_terminal_ours_for_output()\cell target/target.c\cell\row
\cell debug_to_terminal_save_ours()\cell target/target.c\cell\row
\cell debug_to_thread_alive()\cell target/target.c\cell\row
\cell debug_to_wait()\cell target/target.c\cell\row
\cell deprecated_debug_xfer_memory()\cell target/target.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell debug_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_targetdebug()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_targetdebug ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell initialize_targets()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_trust_readonly()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_trust_readonly ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell initialize_targets()\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function target_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void target_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fputs_filtered()\cell utils.c\cell\row
Used in:\cell add_target()\cell target/target.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function target_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void target_info ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell printf_unfiltered()\cell utils.c\cell\row
Used in:\cell initialize_targets()\cell target/target.c\cell\row
Refs Var:\cell symfile_objfile\cell objfiles.c\cell\row
\cell target_stack\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function target_xfer_partial()\par}
{\s5\f1\fs20\ql\sb50\sa50 static long target_xfer_partial ( struct target_ops* ops, enum target_object object, const char* annex, void* readbuf, const void* writebuf, unsigned long offset, long len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell fputc_unfiltered()\cell utils.c\cell\row
\cell fputs_unfiltered()\cell ui-file.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell memory_xfer_partial()\cell target/target.c\cell\row
\cell paddr_d()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
Called by:\cell target_read_partial()\cell target/target.c\cell\row
\cell target_write_partial()\cell target/target.c\cell\row
Refs Var:\cell debug_target_writes\cell target/target.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell targetdebug\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function tcomplain()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void tcomplain ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell target/target.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Called by:\cell kill_or_be_killed()\cell target/target.c\cell\row
Used in:\cell do_monitor_command()\cell target/target.c\cell\row
\cell update_current_target()\cell target/target.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\intbl0
}
