<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF valarith.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for valarith.c of gdb.cxref.
<author>cxref

<sect>File valarith.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;math.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;infcall.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;parser-defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define TRUNCATION_TOWARDS_ZERO</tt><newline>

<sect1>Global Variable valarith_c_inited

<p>
<tt>int valarith_c_inited</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>disasm.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>eval.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_valarith()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function _initialize_valarith()

<p><tt>void _initialize_valarith ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valarith.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>valarith_c_inited  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function binop_user_defined_p()

<p><tt>int binop_user_defined_p ( enum exp_opcode op, struct value* arg1, struct value* arg2 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
</descrip>

<sect1>Global Function unop_user_defined_p()

<p><tt>int unop_user_defined_p ( enum exp_opcode op, struct value* arg1 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
</descrip>

<sect1>Global Function value_add()

<p><tt>struct value* value_add ( struct value* arg1, struct value* arg2 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>coerce_array()  :  value.c
<item>find_size_for_pointer_math()  :  valarith.c
<item>is_integral_type()  :  gdbtypes.c
<item>value_as_address()  :  value.c
<item>value_as_long()  :  value.c
<item>value_binop()  :  valarith.c
<item>value_from_pointer()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_value_ptr_subscript()  :  ada-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>gnuv2_virtual_fn_field()  :  gnu-v2-abi.c
<item>value_subscript()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Function value_binop()

<p><tt>struct value* value_binop ( struct value* arg1, struct value* arg2, enum exp_opcode op )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>check_typedef()  :  gdbtypes.c
<item>coerce_ref()  :  value.c
<item>error()  :  utils.c
<item>gdbarch_double_bit()  :  gdbarch.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>is_integral_type()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>op_name_standard()  :  expprint.c
<item>safe_strerror()  :  utils.c
<item>store_signed_integer()  :  findvar.c
<item>store_typed_floating()  :  doublest.c
<item>store_unsigned_integer()  :  findvar.c
<item>value_as_double()  :  value.c
<item>value_as_long()  :  value.c
<item>value_contents()  :  value.c
<item>value_contents_raw()  :  value.c
<item>value_contents_writeable()  :  value.c
<item>value_type()  :  value.c
<item>__error(), pow(), powl()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_value_binop()  :  ada-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>execute_stack_op()  :  dwarf2expr.c
<item>print_single_dwarf_location()  :  dwarf2loc.c
<item>value_add()  :  valarith.c
<item>value_equal()  :  valarith.c
<item>value_less()  :  valarith.c
<item>value_sub()  :  valarith.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_double  :  gdbtypes.c
<item>builtin_type_int  :  gdbtypes.c
<item>builtin_type_int128  :  gdbtypes.c
<item>builtin_type_long  :  gdbtypes.c
<item>builtin_type_long_double  :  gdbtypes.c
<item>builtin_type_long_long  :  gdbtypes.c
<item>builtin_type_uint128  :  gdbtypes.c
<item>builtin_type_unsigned_long  :  gdbtypes.c
<item>builtin_type_unsigned_long_long  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function value_bit_index()

<p><tt>int value_bit_index ( struct type* type, const gdb_byte* valaddr, int index )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_byte_order()  :  gdbarch.c
<item>get_discrete_bounds()  :  gdbtypes.c
<item>unpack_long()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>pascal_val_print()  :  p-valprint.c
<item>value_in()  :  valarith.c
<item>value_slice()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_unsigned_char  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function value_complement()

<p><tt>struct value* value_complement ( struct value* arg1 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>coerce_ref()  :  value.c
<item>error()  :  utils.c
<item>is_integral_type()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_as_long()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function value_concat()

<p><tt>struct value* value_concat ( struct value* arg1, struct value* arg2 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>error()  :  utils.c
<item>internal_error()  :  utils.c
<item>longest_to_int()  :  valprint.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>unpack_long()  :  value.c
<item>value_as_long()  :  value.c
<item>value_contents()  :  value.c
<item>value_string()  :  valops.c
<item>value_type()  :  value.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
</descrip>

<sect1>Global Function value_equal()

<p><tt>int value_equal ( struct value* arg1, struct value* arg2 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>coerce_array()  :  value.c
<item>error()  :  utils.c
<item>is_integral_type()  :  gdbtypes.c
<item>longest_to_int()  :  valprint.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_as_address()  :  value.c
<item>value_as_double()  :  value.c
<item>value_as_long()  :  value.c
<item>value_binop()  :  valarith.c
<item>value_contents()  :  value.c
<item>value_strcmp()  :  valarith.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_value_equal()  :  ada-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>gdb_value_equal()  :  wrapper.c
<item>watchpoint_equal()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function value_in()

<p><tt>struct value* value_in ( struct value* element, struct value* set )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>error()  :  utils.c
<item>lang_bool_type()  :  language.c
<item>value_as_long()  :  value.c
<item>value_bit_index()  :  valarith.c
<item>value_contents()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
</descrip>

<sect1>Global Function value_less()

<p><tt>int value_less ( struct value* arg1, struct value* arg2 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>coerce_array()  :  value.c
<item>error()  :  utils.c
<item>is_integral_type()  :  gdbtypes.c
<item>longest_to_int()  :  valprint.c
<item>value_as_address()  :  value.c
<item>value_as_double()  :  value.c
<item>value_as_long()  :  value.c
<item>value_binop()  :  valarith.c
<item>value_strcmp()  :  valarith.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
</descrip>

<sect1>Global Function value_logical_not()

<p><tt>int value_logical_not ( struct value* arg1 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>coerce_number()  :  value.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_as_double()  :  value.c
<item>value_contents()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>allocate_space_in_inferior_malloc()  :  valops.c
<item>evaluate_subexp_standard()  :  eval.c
<item>java_value_print()  :  jv-valprint.c
<item>scm_lookup_name()  :  scm-lang.c
<item>type_from_class()  :  jv-lang.c
<item>value_cast_1()  :  valops.c
<item>value_true()  :  language.c
</itemize>
</descrip>

<sect1>Global Function value_neg()

<p><tt>struct value* value_neg ( struct value* arg1 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>coerce_ref()  :  value.c
<item>error()  :  utils.c
<item>is_integral_type()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_as_double()  :  value.c
<item>value_as_long()  :  value.c
<item>value_from_double()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>const_expr()  :  ax-gdb.c
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function value_pos()

<p><tt>struct value* value_pos ( struct value* arg1 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>coerce_ref()  :  value.c
<item>error()  :  utils.c
<item>is_integral_type()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_as_double()  :  value.c
<item>value_as_long()  :  value.c
<item>value_from_double()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function value_sub()

<p><tt>struct value* value_sub ( struct value* arg1, struct value* arg2 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>coerce_array()  :  value.c
<item>error()  :  utils.c
<item>find_size_for_pointer_math()  :  valarith.c
<item>is_integral_type()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_as_address()  :  value.c
<item>value_as_long()  :  value.c
<item>value_binop()  :  valarith.c
<item>value_from_longest()  :  value.c
<item>value_from_pointer()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>ada_value_ptr_subscript()  :  ada-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>value_subscript()  :  valarith.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_long  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function value_subscript()

<p><tt>struct value* value_subscript ( struct value* array, struct value* idx )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>coerce_ref()  :  value.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_frame_id_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>error()  :  utils.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>get_array_bounds()  :  gdbtypes.c
<item>get_discrete_bounds()  :  gdbtypes.c
<item>internal_error()  :  utils.c
<item>lang_bool_type()  :  language.c
<item>set_value_bitpos()  :  value.c
<item>set_value_bitsize()  :  value.c
<item>set_value_offset()  :  value.c
<item>value_add()  :  valarith.c
<item>value_as_long()  :  value.c
<item>value_coerce_array()  :  valops.c
<item>value_contents()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_ind()  :  valops.c
<item>value_offset()  :  value.c
<item>value_sub()  :  valarith.c
<item>value_subscripted_rvalue()  :  valarith.c
<item>value_type()  :  value.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_subscript()  :  ada-lang.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>gdb_value_subscript()  :  wrapper.c
<item>gnuv2_virtual_fn_field()  :  gnu-v2-abi.c
<item>gnuv3_baseclass_offset()  :  gnu-v3-abi.c
<item>gnuv3_virtual_fn_field()  :  gnu-v3-abi.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Global Function value_x_binop()

<p><tt>struct value* value_x_binop ( struct value* arg1, struct value* arg2, enum exp_opcode op, enum exp_opcode otherop, enum noside noside )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>call_function_by_hand()  :  infcall.c
<item>check_typedef()  :  gdbtypes.c
<item>coerce_enum()  :  value.c
<item>coerce_ref()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>error()  :  utils.c
<item>value_addr()  :  valops.c
<item>value_struct_elt()  :  valops.c
<item>value_type()  :  value.c
<item>value_zero()  :  valops.c
<item>__builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
</descrip>

<sect1>Global Function value_x_unop()

<p><tt>struct value* value_x_unop ( struct value* arg1, enum exp_opcode op, enum noside noside )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>call_function_by_hand()  :  infcall.c
<item>check_typedef()  :  gdbtypes.c
<item>coerce_enum()  :  value.c
<item>coerce_ref()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>error()  :  utils.c
<item>value_addr()  :  valops.c
<item>value_from_longest()  :  value.c
<item>value_struct_elt()  :  valops.c
<item>value_type()  :  value.c
<item>value_zero()  :  valops.c
<item>__builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function find_size_for_pointer_math()

<p><tt>static long find_size_for_pointer_math ( struct type* ptr_type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_add()  :  valarith.c
<item>value_sub()  :  valarith.c
</itemize>
</descrip>

<sect1>Local Function value_strcmp()

<p><tt>static int value_strcmp ( struct value* arg1, struct value* arg2 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_contents()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_equal()  :  valarith.c
<item>value_less()  :  valarith.c
</itemize>
</descrip>

<sect1>Local Function value_subscripted_rvalue()

<p><tt>static struct value* value_subscripted_rvalue ( struct value* array, struct value* idx )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>valarith.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_frame_id_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>deprecated_value_regnum_hack()  :  value.c
<item>error()  :  utils.c
<item>get_array_bounds()  :  gdbtypes.c
<item>internal_error()  :  utils.c
<item>longest_to_int()  :  valprint.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>set_value_lazy()  :  value.c
<item>set_value_offset()  :  value.c
<item>value_as_long()  :  value.c
<item>value_contents()  :  value.c
<item>value_contents_writeable()  :  value.c
<item>value_lazy()  :  value.c
<item>value_offset()  :  value.c
<item>value_type()  :  value.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_subscript()  :  valarith.c
</itemize>
</descrip>

</article>
