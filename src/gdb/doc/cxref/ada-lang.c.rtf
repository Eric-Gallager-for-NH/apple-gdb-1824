{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF ada-lang.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File ada-lang.c\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Refs Func:\cell ada_create_fundamental_type()\cell ada-lang.c\cell\row
\cell ada_dump_subexp_body()\cell ada-lang.c\cell\row
\cell ada_error()\cell ada-exp.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_get_gdb_completer_word_break_characters()\cell ada-lang.c\cell\row
\cell ada_la_decode()\cell ada-lang.c\cell\row
\cell ada_language_arch_info()\cell ada-lang.c\cell\row
\cell ada_lookup_symbol_nonlocal()\cell ada-lang.c\cell\row
\cell ada_op_name()\cell ada-lang.c\cell\row
\cell ada_operator_length()\cell ada-lang.c\cell\row
\cell ada_print_subexp()\cell ada-lang.c\cell\row
\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell ada_printchar()\cell ada-valprint.c\cell\row
\cell ada_printstr()\cell ada-valprint.c\cell\row
\cell ada_val_print()\cell ada-valprint.c\cell\row
\cell ada_value_print()\cell ada-valprint.c\cell\row
\cell basic_lookup_transparent_type()\cell symtab.c\cell\row
\cell emit_char()\cell ada-lang.c\cell\row
\cell parse()\cell ada-lang.c\cell\row
\cell resolve()\cell ada-lang.c\cell\row
Refs Var:\cell ada_exp_descriptor\cell ada-lang.c\cell\row
\cell ada_op_print_tab\cell ada-lang.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <ctype.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/demangle.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "parser-defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "c-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "macroexp.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/hashtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "ada-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "completer.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_stat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/stat.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "infcall.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dictionary.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exceptions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <setjmp.h>\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define ADA_RETAIN_DOTS 0\par}
{\s5\f1\fs20\ql\sb50\sa50 #define TRUNCATION_TOWARDS_ZERO\par}
{\s5\f1\fs20\ql\sb50\sa50 #define MAX_ADA_DIMENS\par}
{\s5\f1\fs20\ql\sb50\sa50 #define EXP_OPCODE_OPERATORS\par}
{\s5\f1\fs20\ql\sb50\sa50 #define ADA_OPERATORS\par}
{\s5\f1\fs20\ql\sb50\sa50 #define OP_DEFN( op, len, args, binop )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define OP_DEFN( op, len, args, binop )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define OP_DEFN( op, len, args, binop )\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct tag_args\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct tag_args}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct value* tag;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* name;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type enum ada_primitive_types\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum ada_primitive_types}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 ada_primitive_type_int;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 ada_primitive_type_long;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 ada_primitive_type_short;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 ada_primitive_type_char;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 ada_primitive_type_float;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 ada_primitive_type_double;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 ada_primitive_type_void;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 ada_primitive_type_long_long;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 ada_primitive_type_long_double;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 ada_primitive_type_natural;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 ada_primitive_type_positive;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 ada_primitive_type_system_address;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 nr_ada_primitive_types;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable ada_opname_table\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct ada_opname_map ada_opname_table[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell symtab.c\cell\cell\row
Used in:\cell ada_decode()\cell ada-lang.c\cell\row
\cell ada_decoded_op_name()\cell ada-lang.c\cell\row
\cell ada_encode()\cell ada-lang.c\cell\row
\cell is_suppressed_name()\cell ada-lang.c\cell\row
\cell string_to_operator()\cell ada-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable ada_language_defn\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct language_defn ada_language_defn\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
Used in:\cell _initialize_ada_language()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable varsize_limit\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned int varsize_limit\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_ada_language()\cell\cell\row
\cell ada_template_to_fixed_record_type_1()\cell\cell\row
\cell check_size()\cell\cell\row
\cell to_fixed_array_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable ada_completer_word_break_characters\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* ada_completer_word_break_characters\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell ada_get_gdb_completer_word_break_characters()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable ADA_MAIN_PROGRAM_SYMBOL_NAME\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char ADA_MAIN_PROGRAM_SYMBOL_NAME[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell ada_main_name()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable warning_limit\par}
{\s5\f1\fs20\ql\sb50\sa50 static int warning_limit\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell lim_warning()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable warnings_issued\par}
{\s5\f1\fs20\ql\sb50\sa50 static int warnings_issued\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell lim_warning()\cell\cell\row
\cell parse()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable symbol_list_obstack\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct obstack symbol_list_obstack\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_ada_language()\cell\cell\row
\cell ada_lookup_symbol_list()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable decoded_names_store\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct htab* decoded_names_store\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_ada_language()\cell\cell\row
\cell ada_decode_symbol()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable bound_name\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* bound_name[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell desc_index_type()\cell\cell\row
\cell desc_one_bound()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable attribute_names\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* attribute_names[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell ada_attribute_name()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable ada_op_print_tab\par}
{\s5\f1\fs20\ql\sb50\sa50 static const struct op_print ada_op_print_tab[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell ada-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable ada_exp_descriptor\par}
{\s5\f1\fs20\ql\sb50\sa50 static const struct exp_descriptor ada_exp_descriptor\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell ada-lang.c\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_ada_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_ada_language ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell add_language()\cell language.c\cell\row
\cell  _obstack_begin(), htab_create_alloc()\cell\cell\row
Refs Func:\cell streq()\cell utils.c\cell\row
\cell xcalloc()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  htab_hash_string()\cell\cell\row
Refs Var:\cell ada_language_defn\cell ada-lang.c\cell\row
\cell decoded_names_store\cell ada-lang.c\cell\row
\cell symbol_list_obstack\cell ada-lang.c\cell\row
\cell varsize_limit\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_aligned_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* ada_aligned_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_aligned_type()\cell ada-lang.c\cell\row
\cell ada_get_base_type()\cell ada-lang.c\cell\row
\cell ada_is_aligner_type()\cell ada-lang.c\cell\row
Called by:\cell ada_aligned_type()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell printable_val_type()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_aligned_value_addr()\par}
{\s5\f1\fs20\ql\sb50\sa50 const gdb_byte* ada_aligned_value_addr ( struct type* type, const gdb_byte* valaddr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_aligned_value_addr()\cell ada-lang.c\cell\row
\cell ada_is_aligner_type()\cell ada-lang.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
Called by:\cell ada_aligned_value_addr()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_array_arity()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_array_arity ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell desc_arity()\cell ada-lang.c\cell\row
\cell desc_base_type()\cell ada-lang.c\cell\row
\cell desc_bounds_type()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell ada_array_element_type()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_index_type()\cell ada-lang.c\cell\row
\cell ada_is_string_type()\cell ada-lang.c\cell\row
\cell ada_type_of_array()\cell ada-lang.c\cell\row
\cell make_array_descriptor()\cell ada-lang.c\cell\row
\cell print_array_type()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_array_bound()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* ada_array_bound ( struct value* arr, int n, int which )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_array_bound()\cell ada-lang.c\cell\row
\cell ada_array_bound_from_type()\cell ada-lang.c\cell\row
\cell ada_is_packed_array_type()\cell ada-lang.c\cell\row
\cell ada_is_simple_array_type()\cell ada-lang.c\cell\row
\cell decode_packed_array()\cell ada-lang.c\cell\row
\cell desc_bounds()\cell ada-lang.c\cell\row
\cell desc_one_bound()\cell ada-lang.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_array_bound()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell make_array_descriptor()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_array_bound_from_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 long ada_array_bound_from_type ( struct type* arr_type, int n, int which, struct type** typep )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_find_parallel_type()\cell ada-lang.c\cell\row
\cell ada_is_packed_array_type()\cell ada-lang.c\cell\row
\cell ada_is_simple_array_type()\cell ada-lang.c\cell\row
\cell decode_packed_array_type()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell to_fixed_range_type()\cell ada-lang.c\cell\row
Called by:\cell ada_array_bound()\cell ada-lang.c\cell\row
\cell ada_array_length()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell builtin_type_long\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_array_element_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* ada_array_element_type ( struct type* type, int nindices )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_array_arity()\cell ada-lang.c\cell\row
\cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell desc_base_type()\cell ada-lang.c\cell\row
\cell desc_data_type()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_is_string_type()\cell ada-lang.c\cell\row
\cell ada_type_of_array()\cell ada-lang.c\cell\row
\cell empty_array()\cell ada-lang.c\cell\row
\cell print_array_type()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_array_length()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* ada_array_length ( struct value* arr, int n )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_array_bound_from_type()\cell ada-lang.c\cell\row
\cell ada_array_length()\cell ada-lang.c\cell\row
\cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_is_packed_array_type()\cell ada-lang.c\cell\row
\cell ada_is_simple_array_type()\cell ada-lang.c\cell\row
\cell decode_packed_array()\cell ada-lang.c\cell\row
\cell desc_bounds()\cell ada-lang.c\cell\row
\cell desc_one_bound()\cell ada-lang.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_array_length()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_attribute_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* ada_attribute_name ( enum exp_opcode n )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_print_subexp()\cell ada-lang.c\cell\row
Refs Var:\cell attribute_names\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_check_typedef()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* ada_check_typedef ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_find_any_type()\cell ada-lang.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
Called by:\cell ada_args_match()\cell ada-lang.c\cell\row
\cell ada_array_arity()\cell ada-lang.c\cell\row
\cell ada_array_element_type()\cell ada-lang.c\cell\row
\cell ada_array_length()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_is_aligner_type()\cell ada-lang.c\cell\row
\cell ada_is_array_descriptor_type()\cell ada-lang.c\cell\row
\cell ada_is_direct_array_type()\cell ada-lang.c\cell\row
\cell ada_is_packed_array_type()\cell ada-lang.c\cell\row
\cell ada_is_parent_field()\cell ada-lang.c\cell\row
\cell ada_is_simple_array_type()\cell ada-lang.c\cell\row
\cell ada_is_string_type()\cell ada-lang.c\cell\row
\cell ada_lookup_struct_elt_type()\cell ada-lang.c\cell\row
\cell ada_parent_type()\cell ada-lang.c\cell\row
\cell ada_print_scalar()\cell ada-valprint.c\cell\row
\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell ada_resolve_function()\cell ada-lang.c\cell\row
\cell ada_search_struct_field()\cell ada-lang.c\cell\row
\cell ada_to_fixed_type()\cell ada-lang.c\cell\row
\cell ada_type_match()\cell ada-lang.c\cell\row
\cell ada_type_of_array()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell ada_value_binop()\cell ada-lang.c\cell\row
\cell ada_value_primitive_field()\cell ada-lang.c\cell\row
\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell ada_value_struct_elt()\cell ada-lang.c\cell\row
\cell ada_value_subscript()\cell ada-lang.c\cell\row
\cell add_defn_to_vec()\cell ada-lang.c\cell\row
\cell coerce_for_assign()\cell ada-lang.c\cell\row
\cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
\cell convert_actual()\cell ada-lang.c\cell\row
\cell decode_packed_array_type()\cell ada-lang.c\cell\row
\cell desc_base_type()\cell ada-lang.c\cell\row
\cell desc_bounds()\cell ada-lang.c\cell\row
\cell desc_bounds_type()\cell ada-lang.c\cell\row
\cell dynamic_template_type()\cell ada-lang.c\cell\row
\cell ensure_lval()\cell ada-lang.c\cell\row
\cell fat_pntr_bounds_bitsize()\cell ada-lang.c\cell\row
\cell find_struct_field()\cell ada-lang.c\cell\row
\cell make_array_descriptor()\cell ada-lang.c\cell\row
\cell packed_array_type()\cell ada-lang.c\cell\row
\cell possible_user_operator_p()\cell ada-lang.c\cell\row
\cell print_record()\cell ada-valprint.c\cell\row
\cell static_unwrap_type()\cell ada-lang.c\cell\row
\cell template_to_static_fixed_type()\cell ada-lang.c\cell\row
\cell to_fixed_array_type()\cell ada-lang.c\cell\row
\cell to_static_fixed_type()\cell ada-lang.c\cell\row
\cell unwrap_value()\cell ada-lang.c\cell\row
\cell value_subscript_packed()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_coerce_to_simple_array_ptr()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* ada_coerce_to_simple_array_ptr ( struct value* arr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_is_array_descriptor_type()\cell ada-lang.c\cell\row
\cell ada_is_packed_array_type()\cell ada-lang.c\cell\row
\cell ada_type_of_array()\cell ada-lang.c\cell\row
\cell decode_packed_array()\cell ada-lang.c\cell\row
\cell desc_data()\cell ada-lang.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_coerce_to_simple_array()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_coerce_to_simple_array_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* ada_coerce_to_simple_array_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_type_of_array()\cell ada-lang.c\cell\row
\cell deprecated_set_value_type()\cell value.c\cell\row
\cell value_free_to_mark()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_mark()\cell value.c\cell\row
Called by:\cell print_array_type()\cell ada-typeprint.c\cell\row
Refs Var:\cell builtin_type_long\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_convert_actuals()\par}
{\s5\f1\fs20\ql\sb50\sa50 void ada_convert_actuals ( struct value* func, int nargs, struct value* args[], CORE_ADDR* sp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell convert_actual()\cell ada-lang.c\cell\row
\cell value_type()\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_decode()\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* ada_decode ( const char* encoded )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell grow_vect()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  __builtin___snprintf_chk(), __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), isalnum(), isalpha(), isdigit(), isupper(), strcmp(), strlen(), strncmp(), strstr()\cell\cell\row
Called by:\cell ada_decode_symbol()\cell ada-lang.c\cell\row
\cell ada_la_decode()\cell ada-lang.c\cell\row
\cell name_lookup()\cell ada-exp.c\cell\row
\cell write_object_renaming()\cell ada-exp.c\cell\row
Refs Var:\cell ada_opname_table\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_decode_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* ada_decode_symbol ( const struct general_symbol_info* gsymbol )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_decode()\cell ada-lang.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell  htab_find_slot(), strlen(), xstrdup()\cell\cell\row
Called by:\cell symbol_demangled_name()\cell symtab.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
Refs Var:\cell decoded_names_store\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_delta()\par}
{\s5\f1\fs20\ql\sb50\sa50 DOUBLEST ada_delta ( struct type* the_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell fixed_type_info()\cell ada-lang.c\cell\row
\cell  sscanf()\cell\cell\row
Called by:\cell print_fixed_point_type()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_encode()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* ada_encode ( const char* decoded )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell grow_vect()\cell ada-lang.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), strlen(), strncmp()\cell\cell\row
Called by:\cell ada_lex()\cell ada-exp.c\cell\row
\cell ada_lookup_symbol()\cell ada-lang.c\cell\row
\cell resolve_subexp()\cell ada-lang.c\cell\row
\cell type_from_tag()\cell ada-lang.c\cell\row
\cell write_var_from_name()\cell ada-exp.c\cell\row
Refs Var:\cell ada_opname_table\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_enum_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* ada_enum_name ( const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell grow_vect()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  __builtin___snprintf_chk(), __builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), isascii(), isdigit(), isprint(), sscanf(), strrchr(), strstr()\cell\cell\row
Called by:\cell ada_print_scalar()\cell ada-valprint.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell print_enum_type()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_evaluate_subexp()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* ada_evaluate_subexp ( struct type* expect_type, struct expression* exp, int* pos, enum noside noside )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_aligned_type()\cell ada-lang.c\cell\row
\cell ada_array_arity()\cell ada-lang.c\cell\row
\cell ada_array_bound()\cell ada-lang.c\cell\row
\cell ada_array_bound_from_type()\cell ada-lang.c\cell\row
\cell ada_array_element_type()\cell ada-lang.c\cell\row
\cell ada_array_length()\cell ada-lang.c\cell\row
\cell ada_attribute_name()\cell ada-lang.c\cell\row
\cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_coerce_ref()\cell ada-lang.c\cell\row
\cell ada_coerce_to_simple_array()\cell ada-lang.c\cell\row
\cell ada_coerce_to_simple_array_ptr()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_index_type()\cell ada-lang.c\cell\row
\cell ada_is_aligner_type()\cell ada-lang.c\cell\row
\cell ada_is_array_descriptor_type()\cell ada-lang.c\cell\row
\cell ada_is_fixed_point_type()\cell ada-lang.c\cell\row
\cell ada_is_modular_type()\cell ada-lang.c\cell\row
\cell ada_is_packed_array_type()\cell ada-lang.c\cell\row
\cell ada_is_simple_array_type()\cell ada-lang.c\cell\row
\cell ada_is_tagged_type()\cell ada-lang.c\cell\row
\cell ada_lookup_struct_elt_type()\cell ada-lang.c\cell\row
\cell ada_modulus()\cell ada-lang.c\cell\row
\cell ada_tag_type()\cell ada-lang.c\cell\row
\cell ada_to_fixed_value()\cell ada-lang.c\cell\row
\cell ada_to_fixed_value_create()\cell ada-lang.c\cell\row
\cell ada_type_name()\cell ada-lang.c\cell\row
\cell ada_type_of_array()\cell ada-lang.c\cell\row
\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell ada_value_binop()\cell ada-lang.c\cell\row
\cell ada_value_equal()\cell ada-lang.c\cell\row
\cell ada_value_ind()\cell ada-lang.c\cell\row
\cell ada_value_ptr_subscript()\cell ada-lang.c\cell\row
\cell ada_value_slice()\cell ada-lang.c\cell\row
\cell ada_value_slice_ptr()\cell ada-lang.c\cell\row
\cell ada_value_struct_elt()\cell ada-lang.c\cell\row
\cell ada_value_subscript()\cell ada-lang.c\cell\row
\cell ada_value_tag()\cell ada-lang.c\cell\row
\cell allocate_value()\cell value.c\cell\row
\cell call_function_by_hand()\cell infcall.c\cell\row
\cell cast_from_fixed_to_double()\cell ada-lang.c\cell\row
\cell cast_to_fixed()\cell ada-lang.c\cell\row
\cell check_size()\cell ada-lang.c\cell\row
\cell coerce_for_assign()\cell ada-lang.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell decode_packed_array_type()\cell ada-lang.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell desc_base_type()\cell ada-lang.c\cell\row
\cell discrete_type_high_bound()\cell ada-lang.c\cell\row
\cell discrete_type_low_bound()\cell ada-lang.c\cell\row
\cell discrete_type_p()\cell ada-lang.c\cell\row
\cell empty_array()\cell ada-lang.c\cell\row
\cell error()\cell utils.c\cell\row
\cell evaluate_subexp()\cell ada-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell evaluate_subexp_with_coercion()\cell eval.c\cell\row
\cell lang_bool_type()\cell language.c\cell\row
\cell lim_warning()\cell ada-lang.c\cell\row
\cell longest_to_int()\cell valprint.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell pos_atr()\cell ada-lang.c\cell\row
\cell static_unwrap_type()\cell ada-lang.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell to_fixed_array_type()\cell ada-lang.c\cell\row
\cell to_fixed_range_type()\cell ada-lang.c\cell\row
\cell to_static_fixed_type()\cell ada-lang.c\cell\row
\cell unwrap_value()\cell ada-lang.c\cell\row
\cell value_add()\cell valarith.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_at_lazy()\cell valops.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_equal()\cell valarith.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_less()\cell valarith.c\cell\row
\cell value_neg()\cell valarith.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_pos_atr()\cell ada-lang.c\cell\row
\cell value_sub()\cell valarith.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell value_val_atr()\cell ada-lang.c\cell\row
\cell value_zero()\cell valops.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
Used in:\cell ada-lang.c\cell\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell builtin_type_long\cell gdbtypes.c\cell\row
\cell builtin_type_void\cell gdbtypes.c\cell\row
\cell demangle\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_find_any_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* ada_find_any_symbol ( const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell get_selected_block()\cell stack.c\cell\row
\cell standard_lookup()\cell ada-lang.c\cell\row
Called by:\cell ada_find_any_type()\cell ada-lang.c\cell\row
\cell ada_find_renaming_symbol()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_find_any_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* ada_find_any_type ( const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_find_any_symbol()\cell ada-lang.c\cell\row
Called by:\cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_find_parallel_type()\cell ada-lang.c\cell\row
\cell ada_get_base_type()\cell ada-lang.c\cell\row
\cell print_range_type_named()\cell ada-typeprint.c\cell\row
\cell to_fixed_range_type()\cell ada-lang.c\cell\row
\cell type_from_tag()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_find_parallel_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* ada_find_parallel_type ( struct type* the_type, const char* suffix )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_find_any_type()\cell ada-lang.c\cell\row
\cell ada_type_name()\cell ada-lang.c\cell\row
\cell grow_vect()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), strlen()\cell\cell\row
Called by:\cell ada_array_bound_from_type()\cell ada-lang.c\cell\row
\cell ada_get_base_type()\cell ada-lang.c\cell\row
\cell ada_is_aligner_type()\cell ada-lang.c\cell\row
\cell dynamic_template_type()\cell ada-lang.c\cell\row
\cell print_array_type()\cell ada-typeprint.c\cell\row
\cell print_record_type()\cell ada-typeprint.c\cell\row
\cell print_variant_clauses()\cell ada-typeprint.c\cell\row
\cell thin_descriptor_type()\cell ada-lang.c\cell\row
\cell to_fixed_array_type()\cell ada-lang.c\cell\row
\cell to_fixed_variant_branch_type()\cell ada-lang.c\cell\row
\cell to_static_fixed_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_find_renaming_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* ada_find_renaming_symbol ( const char* name, struct block* block )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_find_any_symbol()\cell ada-lang.c\cell\row
\cell block_function()\cell block.c\cell\row
\cell  __builtin___snprintf_chk(), __builtin_alloca(), __builtin_object_size(), strlen(), strstr()\cell\cell\row
Called by:\cell name_lookup()\cell ada-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_fixed_to_float()\par}
{\s5\f1\fs20\ql\sb50\sa50 DOUBLEST ada_fixed_to_float ( struct type* type, long x )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell scaling_factor()\cell ada-lang.c\cell\row
Called by:\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell cast_from_fixed_to_double()\cell ada-lang.c\cell\row
\cell cast_to_fixed()\cell ada-lang.c\cell\row
\cell print_fixed_point_type()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_float_to_fixed()\par}
{\s5\f1\fs20\ql\sb50\sa50 long ada_float_to_fixed ( struct type* type, DOUBLEST x )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell scaling_factor()\cell ada-lang.c\cell\row
Called by:\cell cast_to_fixed()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_fold_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* ada_fold_name ( const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell grow_vect()\cell ada-lang.c\cell\row
\cell  __builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), strlen(), tolower()\cell\cell\row
Called by:\cell ada_lookup_symbol()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_get_base_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* ada_get_base_type ( struct type* raw_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_find_any_type()\cell ada-lang.c\cell\row
\cell ada_find_parallel_type()\cell ada-lang.c\cell\row
Called by:\cell ada_aligned_type()\cell ada-lang.c\cell\row
\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell ada_template_to_fixed_record_type_1()\cell ada-lang.c\cell\row
\cell ada_value_struct_elt()\cell ada-lang.c\cell\row
\cell static_unwrap_type()\cell ada-lang.c\cell\row
\cell unwrap_value()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_get_field_index()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_get_field_index ( const struct type* type, const char* field_name, int maybe_missing )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell field_name_match()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_in_variant()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_in_variant ( long val, struct type* type, int field_num )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_scan_number()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell ada_which_variant_applies()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_index_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* ada_index_type ( struct type* type, int n )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_array_arity()\cell ada-lang.c\cell\row
\cell ada_is_simple_array_type()\cell ada-lang.c\cell\row
\cell desc_base_type()\cell ada-lang.c\cell\row
\cell desc_bounds_type()\cell ada-lang.c\cell\row
\cell desc_index_type()\cell ada-lang.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_aligner_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_aligner_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_find_parallel_type()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell ada_aligned_type()\cell ada-lang.c\cell\row
\cell ada_aligned_value_addr()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell static_unwrap_type()\cell ada-lang.c\cell\row
\cell unwrap_value()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_array_descriptor_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_array_descriptor_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell desc_arity()\cell ada-lang.c\cell\row
\cell desc_bounds_type()\cell ada-lang.c\cell\row
\cell desc_data_type()\cell ada-lang.c\cell\row
Called by:\cell ada_coerce_to_simple_array()\cell ada-lang.c\cell\row
\cell ada_coerce_to_simple_array_ptr()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_is_bogus_array_descriptor()\cell ada-lang.c\cell\row
\cell ada_is_direct_array_type()\cell ada-lang.c\cell\row
\cell ada_is_string_type()\cell ada-lang.c\cell\row
\cell ada_prefer_type()\cell ada-lang.c\cell\row
\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell ada_type_match()\cell ada-lang.c\cell\row
\cell ada_type_of_array()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell ada_value_print()\cell ada-valprint.c\cell\row
\cell convert_actual()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_bogus_array_descriptor()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_bogus_array_descriptor ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_is_array_descriptor_type()\cell ada-lang.c\cell\row
\cell lookup_struct_elt_type()\cell gdbtypes.c\cell\row
Called by:\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell ada_value_print()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_character_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_character_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_type_name()\cell ada-lang.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell ada_is_string_type()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_fixed_point_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_fixed_point_type ( struct type* the_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell fixed_type_info()\cell ada-lang.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell cast_to_fixed()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_ignored_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_ignored_field ( struct type* type, int field_num )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell  strncmp()\cell\cell\row
Called by:\cell print_field_values()\cell ada-valprint.c\cell\row
\cell print_record_field_types()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_modular_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_modular_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell base_type()\cell ada-lang.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell decode_packed_array()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_object_renaming()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_object_renaming ( struct symbol* sym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_renaming_type()\cell ada-lang.c\cell\row
Called by:\cell name_lookup()\cell ada-exp.c\cell\row
\cell remove_out_of_scope_renamings()\cell ada-lang.c\cell\row
\cell write_object_renaming()\cell ada-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_others_clause()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_others_clause ( struct type* type, int field_num )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Called by:\cell ada_which_variant_applies()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_packed_array_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_packed_array_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_type_name()\cell ada-lang.c\cell\row
\cell desc_base_type()\cell ada-lang.c\cell\row
\cell  strstr()\cell\cell\row
Called by:\cell ada_array_bound()\cell ada-lang.c\cell\row
\cell ada_array_bound_from_type()\cell ada-lang.c\cell\row
\cell ada_array_length()\cell ada-lang.c\cell\row
\cell ada_coerce_to_simple_array()\cell ada-lang.c\cell\row
\cell ada_coerce_to_simple_array_ptr()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_prefer_type()\cell ada-lang.c\cell\row
\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell ada_type_of_array()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell print_array_type()\cell ada-typeprint.c\cell\row
\cell to_fixed_array_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_parent_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_parent_field ( struct type* type, int field_num )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell  strncmp()\cell\cell\row
Called by:\cell ada_parent_type()\cell ada-lang.c\cell\row
\cell print_record_field_types()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_range_type_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_range_type_name ( const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell  strstr()\cell\cell\row
Called by:\cell ada_print_type()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_simple_array_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_simple_array_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell ada_array_bound()\cell ada-lang.c\cell\row
\cell ada_array_bound_from_type()\cell ada-lang.c\cell\row
\cell ada_array_length()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_index_type()\cell ada-lang.c\cell\row
\cell ada_is_string_type()\cell ada-lang.c\cell\row
\cell print_array_type()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_string_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_string_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_array_arity()\cell ada-lang.c\cell\row
\cell ada_array_element_type()\cell ada-lang.c\cell\row
\cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_is_array_descriptor_type()\cell ada-lang.c\cell\row
\cell ada_is_character_type()\cell ada-lang.c\cell\row
\cell ada_is_simple_array_type()\cell ada-lang.c\cell\row
Called by:\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_system_address_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_system_address_type ( struct type* the_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell  strcmp()\cell\cell\row
Called by:\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_tag_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_tag_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_type_name()\cell ada-lang.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell ada_tag_name()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_tagged_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_tagged_type ( struct type* type, int refok )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_lookup_struct_elt_type()\cell ada-lang.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_to_fixed_type()\cell ada-lang.c\cell\row
\cell print_record_type()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_variant_part()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_variant_part ( struct type* type, int field_num )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell is_dynamic_field()\cell ada-lang.c\cell\row
Called by:\cell ada_lookup_struct_elt_type()\cell ada-lang.c\cell\row
\cell ada_search_struct_field()\cell ada-lang.c\cell\row
\cell ada_template_to_fixed_record_type_1()\cell ada-lang.c\cell\row
\cell find_struct_field()\cell ada-lang.c\cell\row
\cell print_field_values()\cell ada-valprint.c\cell\row
\cell print_record_field_types()\cell ada-typeprint.c\cell\row
\cell variant_field_index()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_vax_floating_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_vax_floating_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_type_name()\cell ada-lang.c\cell\row
\cell  strlen(), strncmp()\cell\cell\row
Called by:\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_is_wrapper_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_is_wrapper_field ( struct type* type, int field_num )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell  strcmp(), strncmp()\cell\cell\row
Called by:\cell ada_lookup_struct_elt_type()\cell ada-lang.c\cell\row
\cell ada_search_struct_field()\cell ada-lang.c\cell\row
\cell find_struct_field()\cell ada-lang.c\cell\row
\cell print_field_values()\cell ada-valprint.c\cell\row
\cell print_record_field_types()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_la_decode()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* ada_la_decode ( const char* encoded, int options )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_decode()\cell ada-lang.c\cell\row
\cell  xstrdup()\cell\cell\row
Used in:\cell ada-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_lookup_simple_minsym()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct minimal_symbol* ada_lookup_simple_minsym ( const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_match_name()\cell ada-lang.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell  strncmp(), strstr()\cell\cell\row
Called by:\cell name_lookup()\cell ada-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_lookup_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* ada_lookup_symbol ( const char* name, const struct block* block0, domain_enum anamespace, int* is_a_field_of_this, struct symtab** symtab )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_encode()\cell ada-lang.c\cell\row
\cell ada_fold_name()\cell ada-lang.c\cell\row
\cell ada_lookup_symbol_list()\cell ada-lang.c\cell\row
\cell block_highest_pc()\cell block.c\cell\row
\cell fixup_symbol_section()\cell symtab.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell symtab_get_first()\cell objfiles.c\cell\row
\cell symtab_get_next()\cell objfiles.c\cell\row
Called by:\cell ada_lookup_symbol_nonlocal()\cell ada-lang.c\cell\row
\cell name_lookup()\cell ada-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_lookup_symbol_list()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_lookup_symbol_list ( const char* name0, const struct block* block0, domain_enum anamespace, struct ada_symbol_info** results )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_add_block_symbols()\cell ada-lang.c\cell\row
\cell ada_lookup_partial_symbol()\cell ada-lang.c\cell\row
\cell ada_match_name()\cell ada-lang.c\cell\row
\cell add_defn_to_vec()\cell ada-lang.c\cell\row
\cell add_symbols_from_enclosing_procs()\cell ada-lang.c\cell\row
\cell cache_symbol()\cell ada-lang.c\cell\row
\cell defns_collected()\cell ada-lang.c\cell\row
\cell find_pc_symtab()\cell symtab.c\cell\row
\cell is_nonfunction()\cell ada-lang.c\cell\row
\cell lookup_cached_symbol()\cell ada-lang.c\cell\row
\cell num_defns_collected()\cell ada-lang.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell psymtab_get_first()\cell objfiles.c\cell\row
\cell psymtab_get_next()\cell objfiles.c\cell\row
\cell psymtab_to_symtab()\cell symfile.c\cell\row
\cell quit()\cell utils.c\cell\row
\cell remove_extra_symbols()\cell ada-lang.c\cell\row
\cell remove_out_of_scope_renamings()\cell ada-lang.c\cell\row
\cell symtab_get_first()\cell objfiles.c\cell\row
\cell symtab_get_next()\cell objfiles.c\cell\row
\cell  _obstack_begin(), strncmp(), strstr()\cell\cell\row
Called by:\cell ada_lookup_symbol()\cell ada-lang.c\cell\row
\cell block_lookup()\cell ada-exp.c\cell\row
\cell get_var_value()\cell ada-lang.c\cell\row
\cell name_lookup()\cell ada-exp.c\cell\row
\cell resolve_subexp()\cell ada-lang.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  obstack_free()\cell\cell\row
Refs Var:\cell quit_flag\cell utils.c\cell\row
\cell symbol_list_obstack\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_main_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* ada_main_name ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell extract_string()\cell ada-lang.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
Called by:\cell find_main_name()\cell symtab.c\cell\row
Refs Var:\cell ADA_MAIN_PROGRAM_SYMBOL_NAME\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_match_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_match_name ( const char* sym_name, const char* name, int wild )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell is_name_suffix()\cell ada-lang.c\cell\row
\cell wild_match()\cell ada-lang.c\cell\row
\cell  strlen(), strncmp()\cell\cell\row
Called by:\cell ada_lookup_simple_minsym()\cell ada-lang.c\cell\row
\cell ada_lookup_symbol_list()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_modulus()\par}
{\s5\f1\fs20\ql\sb50\sa50 unsigned long ada_modulus ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell decode_packed_array()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_name_prefix_len()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_name_prefix_len ( const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell  strlen(), strstr()\cell\cell\row
Called by:\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell ada_typedef_print()\cell ada-typeprint.c\cell\row
\cell print_field_values()\cell ada-valprint.c\cell\row
\cell print_range()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_parent_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* ada_parent_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_is_parent_field()\cell ada-lang.c\cell\row
Called by:\cell print_record_type()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_prefer_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_prefer_type ( struct type* type0, struct type* type1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_is_array_descriptor_type()\cell ada-lang.c\cell\row
\cell ada_is_packed_array_type()\cell ada-lang.c\cell\row
\cell ada_renaming_type()\cell ada-lang.c\cell\row
Called by:\cell name_lookup()\cell ada-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_renaming_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* ada_renaming_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell type_name_no_tag()\cell gdbtypes.c\cell\row
\cell  strchr(), strstr()\cell\cell\row
Called by:\cell ada_is_object_renaming()\cell ada-lang.c\cell\row
\cell ada_prefer_type()\cell ada-lang.c\cell\row
\cell name_lookup()\cell ada-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_scan_number()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_scan_number ( const char str[], int k, long* R, int* new_k )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell  isdigit()\cell\cell\row
Called by:\cell ada_in_variant()\cell ada-lang.c\cell\row
\cell print_choices()\cell ada-typeprint.c\cell\row
\cell print_range_bound()\cell ada-typeprint.c\cell\row
\cell to_fixed_range_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_simple_renamed_entity()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* ada_simple_renamed_entity ( struct symbol* sym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), strlen()\cell\cell\row
Called by:\cell name_lookup()\cell ada-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_suppress_symbol_printing()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_suppress_symbol_printing ( struct symbol* sym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell is_suppressed_name()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_tag_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* ada_tag_name ( struct value* tag )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_is_tag_type()\cell ada-lang.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell  catch_errors()\cell\cell\row
Called by:\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell type_from_tag()\cell ada-lang.c\cell\row
Refs Func:\cell ada_tag_name_1()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_tag_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* ada_tag_type ( struct value* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_lookup_struct_elt_type()\cell ada-lang.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_template_to_fixed_record_type_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* ada_template_to_fixed_record_type_1 ( struct type* type, const gdb_byte* valaddr, CORE_ADDR address, struct value* dval0, int keep_dynamic_fields )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_get_base_type()\cell ada-lang.c\cell\row
\cell ada_is_variant_part()\cell ada-lang.c\cell\row
\cell ada_to_fixed_type()\cell ada-lang.c\cell\row
\cell ada_type_name()\cell ada-lang.c\cell\row
\cell align_value()\cell ada-lang.c\cell\row
\cell alloc_type()\cell gdbtypes.c\cell\row
\cell cond_offset_host()\cell ada-lang.c\cell\row
\cell cond_offset_target()\cell ada-lang.c\cell\row
\cell error()\cell utils.c\cell\row
\cell field_alignment()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell is_dynamic_field()\cell ada-lang.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell to_fixed_variant_branch_type()\cell ada-lang.c\cell\row
\cell value_free_to_mark()\cell value.c\cell\row
\cell value_from_contents_and_address()\cell ada-lang.c\cell\row
\cell value_mark()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell template_to_fixed_record_type()\cell ada-lang.c\cell\row
Refs Var:\cell varsize_limit\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_to_fixed_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* ada_to_fixed_type ( struct type* type, const gdb_byte* valaddr, CORE_ADDR address, struct value* dval )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_is_tagged_type()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell to_fixed_array_type()\cell ada-lang.c\cell\row
\cell to_fixed_record_type()\cell ada-lang.c\cell\row
\cell to_fixed_variant_branch_type()\cell ada-lang.c\cell\row
\cell to_static_fixed_type()\cell ada-lang.c\cell\row
\cell type_from_tag()\cell ada-lang.c\cell\row
\cell value_tag_from_contents_and_address()\cell ada-lang.c\cell\row
Called by:\cell ada_template_to_fixed_record_type_1()\cell ada-lang.c\cell\row
\cell ada_to_fixed_value_create()\cell ada-lang.c\cell\row
\cell ada_value_print()\cell ada-valprint.c\cell\row
\cell ada_value_struct_elt()\cell ada-lang.c\cell\row
\cell printable_val_type()\cell ada-valprint.c\cell\row
\cell to_fixed_array_type()\cell ada-lang.c\cell\row
\cell unwrap_value()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_to_static_fixed_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* ada_to_static_fixed_value ( struct value* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
\cell static_unwrap_type()\cell ada-lang.c\cell\row
\cell to_static_fixed_type()\cell ada-lang.c\cell\row
\cell value_type()\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_type_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* ada_type_name ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_find_parallel_type()\cell ada-lang.c\cell\row
\cell ada_is_character_type()\cell ada-lang.c\cell\row
\cell ada_is_packed_array_type()\cell ada-lang.c\cell\row
\cell ada_is_tag_type()\cell ada-lang.c\cell\row
\cell ada_is_vax_floating_type()\cell ada-lang.c\cell\row
\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell ada_template_to_fixed_record_type_1()\cell ada-lang.c\cell\row
\cell ada_variant_discrim_name()\cell ada-lang.c\cell\row
\cell ada_vax_float_type_suffix()\cell ada-lang.c\cell\row
\cell decode_packed_array_type()\cell ada-lang.c\cell\row
\cell decoded_type_name()\cell ada-typeprint.c\cell\row
\cell dynamic_template_type()\cell ada-lang.c\cell\row
\cell equiv_types()\cell ada-lang.c\cell\row
\cell fixed_type_info()\cell ada-lang.c\cell\row
\cell is_nondebugging_type()\cell ada-lang.c\cell\row
\cell is_thin_pntr()\cell ada-lang.c\cell\row
\cell packed_array_type()\cell ada-lang.c\cell\row
\cell print_record_type()\cell ada-typeprint.c\cell\row
\cell static_unwrap_type()\cell ada-lang.c\cell\row
\cell template_to_static_fixed_type()\cell ada-lang.c\cell\row
\cell thin_descriptor_type()\cell ada-lang.c\cell\row
\cell to_record_with_fixed_variant_part()\cell ada-lang.c\cell\row
\cell unwrap_value()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_type_of_array()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* ada_type_of_array ( struct value* arr, int bounds )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_array_arity()\cell ada-lang.c\cell\row
\cell ada_array_element_type()\cell ada-lang.c\cell\row
\cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_is_array_descriptor_type()\cell ada-lang.c\cell\row
\cell ada_is_packed_array_type()\cell ada-lang.c\cell\row
\cell alloc_type()\cell gdbtypes.c\cell\row
\cell create_array_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell decode_packed_array_type()\cell ada-lang.c\cell\row
\cell desc_bounds()\cell ada-lang.c\cell\row
\cell desc_data_type()\cell ada-lang.c\cell\row
\cell desc_one_bound()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_coerce_to_simple_array_ptr()\cell ada-lang.c\cell\row
\cell ada_coerce_to_simple_array_type()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_update_initial_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum language ada_update_initial_language ( enum language lang, struct partial_symtab* main_pst )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_value_ind()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* ada_value_ind ( struct value* val0 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_to_fixed_value()\cell ada-lang.c\cell\row
\cell unwrap_value()\cell ada-lang.c\cell\row
\cell value_ind()\cell valops.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell ada_value_struct_elt()\cell ada-lang.c\cell\row
\cell coerce_for_assign()\cell ada-lang.c\cell\row
\cell convert_actual()\cell ada-lang.c\cell\row
\cell decode_packed_array()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_value_primitive_packed_val()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* ada_value_primitive_packed_val ( struct value* obj, const gdb_byte* valaddr, long offset, int bit_offset, size_t bit_size, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell allocate_value()\cell value.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell has_negatives()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell read_memory()\cell corefile.c\cell\row
\cell set_value_bitpos()\cell value.c\cell\row
\cell set_value_bitsize()\cell value.c\cell\row
\cell value_at()\cell valops.c\cell\row
\cell value_bitpos()\cell value.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell ada_value_primitive_field()\cell ada-lang.c\cell\row
\cell ada_value_struct_elt()\cell ada-lang.c\cell\row
\cell decode_packed_array()\cell ada-lang.c\cell\row
\cell print_field_values()\cell ada-valprint.c\cell\row
\cell val_print_packed_array_elements()\cell ada-valprint.c\cell\row
\cell value_subscript_packed()\cell ada-lang.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_value_ptr_subscript()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* ada_value_ptr_subscript ( struct value* arr, struct type* type, int arity, struct value** ind )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell get_discrete_bounds()\cell gdbtypes.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell value_add()\cell valarith.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_pos_atr()\cell ada-lang.c\cell\row
\cell value_sub()\cell valarith.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_value_struct_elt()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* ada_value_struct_elt ( struct value* arg, const char* name, const char* err )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_coerce_ref()\cell ada-lang.c\cell\row
\cell ada_get_base_type()\cell ada-lang.c\cell\row
\cell ada_search_struct_field()\cell ada-lang.c\cell\row
\cell ada_to_fixed_type()\cell ada-lang.c\cell\row
\cell ada_value_ind()\cell ada-lang.c\cell\row
\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_struct_field()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_reference_type()\cell gdbtypes.c\cell\row
\cell unpack_pointer()\cell value.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_tag_name_1()\cell ada-lang.c\cell\row
\cell ada_value_tag()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_value_subscript()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* ada_value_subscript ( struct value* arr, int arity, struct value** ind )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_coerce_to_simple_array()\cell ada-lang.c\cell\row
\cell error()\cell utils.c\cell\row
\cell value_pos_atr()\cell ada-lang.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\cell value_subscript_packed()\cell ada-lang.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_value_tag()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* ada_value_tag ( struct value* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_value_struct_elt()\cell ada-lang.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_variant_discrim_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* ada_variant_discrim_name ( struct type* type0 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_type_name()\cell ada-lang.c\cell\row
\cell grow_vect()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  __builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), strlen(), strncmp()\cell\cell\row
Called by:\cell ada_variant_discrim_type()\cell ada-lang.c\cell\row
\cell ada_which_variant_applies()\cell ada-lang.c\cell\row
\cell print_variant_part()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_variant_discrim_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* ada_variant_discrim_type ( struct type* var_type, struct type* outer_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_lookup_struct_elt_type()\cell ada-lang.c\cell\row
\cell ada_variant_discrim_name()\cell ada-lang.c\cell\row
Called by:\cell print_variant_clauses()\cell ada-typeprint.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_vax_float_print_function()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* ada_vax_float_print_function ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_vax_float_type_suffix()\cell ada-lang.c\cell\row
\cell error()\cell utils.c\cell\row
\cell get_var_value()\cell ada-lang.c\cell\row
Called by:\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_vax_float_type_suffix()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_vax_float_type_suffix ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_type_name()\cell ada-lang.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell ada_vax_float_print_function()\cell ada-lang.c\cell\row
\cell print_vax_floating_point_type()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_which_variant_applies()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ada_which_variant_applies ( struct type* var_type, struct type* outer_type, const gdb_byte* outer_valaddr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_in_variant()\cell ada-lang.c\cell\row
\cell ada_is_others_clause()\cell ada-lang.c\cell\row
\cell ada_lookup_struct_elt_type()\cell ada-lang.c\cell\row
\cell ada_variant_discrim_name()\cell ada-lang.c\cell\row
\cell unpack_long()\cell value.c\cell\row
Called by:\cell print_variant_part()\cell ada-valprint.c\cell\row
\cell to_fixed_variant_branch_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_int_var_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 long get_int_var_value ( char* name, int* flag )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell get_var_value()\cell ada-lang.c\cell\row
\cell value_as_long()\cell value.c\cell\row
Called by:\cell print_dynamic_range_bound()\cell ada-typeprint.c\cell\row
\cell to_fixed_range_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_selections()\par}
{\s5\f1\fs20\ql\sb50\sa50 int get_selections ( int* choices, int n_choices, int max_results, int is_all_choice, const char* annotation_suffix )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell command_line_input()\cell top.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gdb_flush()\cell ui-file.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell  error_no_arg(), getenv(), isspace(), strtol()\cell\cell\row
Called by:\cell user_select_syms()\cell ada-lang.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function grow_vect()\par}
{\s5\f1\fs20\ql\sb50\sa50 void* grow_vect ( void* vect, size_t* size, size_t min_size, int element_size )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell xrealloc()\cell utils.c\cell\row
Called by:\cell ada_decode()\cell ada-lang.c\cell\row
\cell ada_encode()\cell ada-lang.c\cell\row
\cell ada_enum_name()\cell ada-lang.c\cell\row
\cell ada_find_parallel_type()\cell ada-lang.c\cell\row
\cell ada_fold_name()\cell ada-lang.c\cell\row
\cell ada_variant_discrim_name()\cell ada-lang.c\cell\row
\cell print_dynamic_range_bound()\cell ada-typeprint.c\cell\row
\cell scan_discrim_bound()\cell ada-lang.c\cell\row
\cell to_fixed_range_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function lookup_symbol_in_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* lookup_symbol_in_language ( const char* name, const struct block* block, domain_enum domain, enum language lang, int* is_a_field_of_this, struct symtab** symtab )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell lookup_symbol()\cell symtab.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell set_language()\cell language.c\cell\row
Called by:\cell standard_lookup()\cell ada-lang.c\cell\row
Refs Func:\cell restore_language()\cell ada-lang.c\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function user_select_syms()\par}
{\s5\f1\fs20\ql\sb50\sa50 int user_select_syms ( struct ada_symbol_info* syms, int nsyms, int max_results )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_function_start_sal()\cell symtab.c\cell\row
\cell get_selections()\cell ada-lang.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell sort_choices()\cell ada-lang.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell symtab_for_sym()\cell ada-lang.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
Called by:\cell ada_resolve_function()\cell ada-lang.c\cell\row
\cell resolve_subexp()\cell ada-lang.c\cell\row
Refs Var:\cell demangle\cell utils.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_from_contents_and_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_from_contents_and_address ( struct type* type, const gdb_byte* valaddr, CORE_ADDR address )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell set_value_lazy()\cell value.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell ada_template_to_fixed_record_type_1()\cell ada-lang.c\cell\row
\cell ada_to_fixed_value_create()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell ada_value_print()\cell ada-valprint.c\cell\row
\cell to_record_with_fixed_variant_part()\cell ada-lang.c\cell\row
\cell value_tag_from_contents_and_address()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_add_block_symbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void ada_add_block_symbols ( struct obstack* obstackp, struct block* block, const char* name, domain_enum domain, struct objfile* objfile, struct symtab* symtab, int wild )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell add_defn_to_vec()\cell ada-lang.c\cell\row
\cell dict_iterator_first()\cell dictionary.c\cell\row
\cell dict_iterator_next()\cell dictionary.c\cell\row
\cell fixup_symbol_section()\cell symtab.c\cell\row
\cell is_name_suffix()\cell ada-lang.c\cell\row
\cell wild_match()\cell ada-lang.c\cell\row
\cell  strlen(), strncmp()\cell\cell\row
Called by:\cell ada_lookup_symbol_list()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_args_match()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int ada_args_match ( struct symbol* func, struct value** actuals, int n_actuals )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_type_match()\cell ada-lang.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_resolve_function()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_coerce_ref()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* ada_coerce_ref ( struct value* val0 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_to_fixed_value()\cell ada-lang.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell unwrap_value()\cell ada-lang.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_value_struct_elt()\cell ada-lang.c\cell\row
\cell decode_packed_array()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_coerce_to_simple_array()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* ada_coerce_to_simple_array ( struct value* arr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_coerce_to_simple_array_ptr()\cell ada-lang.c\cell\row
\cell ada_is_array_descriptor_type()\cell ada-lang.c\cell\row
\cell ada_is_packed_array_type()\cell ada-lang.c\cell\row
\cell decode_packed_array()\cell ada-lang.c\cell\row
\cell error()\cell utils.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_value_equal()\cell ada-lang.c\cell\row
\cell ada_value_subscript()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_create_fundamental_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* ada_create_fundamental_type ( struct objfile* objfile, int adatypeid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell gdbarch_double_bit()\cell gdbarch.c\cell\row
\cell gdbarch_float_bit()\cell gdbarch.c\cell\row
\cell gdbarch_int_bit()\cell gdbarch.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell gdbarch_long_double_bit()\cell gdbarch.c\cell\row
\cell gdbarch_long_long_bit()\cell gdbarch.c\cell\row
\cell gdbarch_short_bit()\cell gdbarch.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell warning()\cell utils.c\cell\row
Used in:\cell ada-lang.c\cell\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_decoded_op_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* ada_decoded_op_name ( enum exp_opcode op )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Called by:\cell resolve_subexp()\cell ada-lang.c\cell\row
Refs Var:\cell ada_opname_table\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_dump_subexp_body()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int ada_dump_subexp_body ( struct expression* exp, struct ui_file* stream, int elt )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_forward_operator_length()\cell ada-lang.c\cell\row
\cell dump_subexp()\cell expprint.c\cell\row
\cell dump_subexp_body_standard()\cell expprint.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell gdb_print_host_address()\cell utils.c\cell\row
\cell type_print()\cell typeprint.c\cell\row
Used in:\cell ada-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_forward_operator_length()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void ada_forward_operator_length ( struct expression* exp, int pc, int* oplenp, int* argsp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell ada_dump_subexp_body()\cell ada-lang.c\cell\row
\cell ada_print_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_get_gdb_completer_word_break_characters()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* ada_get_gdb_completer_word_break_characters ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell ada-lang.c\cell\cell\row
Refs Var:\cell ada_completer_word_break_characters\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_is_direct_array_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int ada_is_direct_array_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_is_array_descriptor_type()\cell ada-lang.c\cell\row
Called by:\cell ada_value_equal()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_language_arch_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void ada_language_arch_info ( struct gdbarch* current_gdbarch, struct language_arch_info* lai )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell gdbarch_double_bit()\cell gdbarch.c\cell\row
\cell gdbarch_float_bit()\cell gdbarch.c\cell\row
\cell gdbarch_int_bit()\cell gdbarch.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell gdbarch_long_double_bit()\cell gdbarch.c\cell\row
\cell gdbarch_long_long_bit()\cell gdbarch.c\cell\row
\cell gdbarch_obstack_zalloc()\cell gdbarch.c\cell\row
\cell gdbarch_short_bit()\cell gdbarch.c\cell\row
\cell get_builtin_type()\cell gdbtypes.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
Used in:\cell ada-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_lookup_partial_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct partial_symbol* ada_lookup_partial_symbol ( struct partial_symtab* pst, const char* name, int global, domain_enum anamespace, int wild )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell is_name_suffix()\cell ada-lang.c\cell\row
\cell wild_match()\cell ada-lang.c\cell\row
\cell  strcmp(), strlen(), strncmp()\cell\cell\row
Called by:\cell ada_lookup_symbol_list()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_lookup_struct_elt_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* ada_lookup_struct_elt_type ( struct type* type, const char* name, int refok, int noerr, int* dispp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_is_variant_part()\cell ada-lang.c\cell\row
\cell ada_is_wrapper_field()\cell ada-lang.c\cell\row
\cell ada_lookup_struct_elt_type()\cell ada-lang.c\cell\row
\cell error()\cell utils.c\cell\row
\cell field_name_match()\cell ada-lang.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell gdb_flush()\cell ui-file.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell to_static_fixed_type()\cell ada-lang.c\cell\row
\cell type_print()\cell typeprint.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_is_tagged_type()\cell ada-lang.c\cell\row
\cell ada_lookup_struct_elt_type()\cell ada-lang.c\cell\row
\cell ada_tag_type()\cell ada-lang.c\cell\row
\cell ada_variant_discrim_type()\cell ada-lang.c\cell\row
\cell ada_which_variant_applies()\cell ada-lang.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell gdb_stderr\cell main.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_lookup_symbol_nonlocal()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* ada_lookup_symbol_nonlocal ( const char* name, const char* linkage_name, const struct block* block, const domain_enum domain, struct symtab** symtab )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_lookup_symbol()\cell ada-lang.c\cell\row
\cell block_static_block()\cell block.c\cell\row
Used in:\cell ada-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_op_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* ada_op_name ( enum exp_opcode opcode )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell op_name_standard()\cell expprint.c\cell\row
Used in:\cell ada-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_operator_length()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void ada_operator_length ( struct expression* exp, int pc, int* oplenp, int* argsp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell operator_length_standard()\cell parse.c\cell\row
Used in:\cell ada-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_print_subexp()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void ada_print_subexp ( struct expression* exp, int* pos, struct ui_file* stream, enum precedence prec )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_attribute_name()\cell ada-lang.c\cell\row
\cell ada_forward_operator_length()\cell ada-lang.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell print_subexp()\cell expprint.c\cell\row
\cell print_subexp_standard()\cell expprint.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell type_print()\cell typeprint.c\cell\row
Used in:\cell ada-lang.c\cell\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_resolve_function()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int ada_resolve_function ( struct ada_symbol_info syms[], int nsyms, struct value** args, int nargs, const char* name, struct type* context_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_args_match()\cell ada-lang.c\cell\row
\cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell return_match()\cell ada-lang.c\cell\row
\cell user_select_syms()\cell ada-lang.c\cell\row
Called by:\cell resolve_subexp()\cell ada-lang.c\cell\row
Refs Var:\cell builtin_type_void\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_search_struct_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* ada_search_struct_field ( const char* name, struct value* arg, int offset, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_is_variant_part()\cell ada-lang.c\cell\row
\cell ada_is_wrapper_field()\cell ada-lang.c\cell\row
\cell ada_search_struct_field()\cell ada-lang.c\cell\row
\cell ada_value_primitive_field()\cell ada-lang.c\cell\row
\cell field_name_match()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
Called by:\cell ada_search_struct_field()\cell ada-lang.c\cell\row
\cell ada_value_struct_elt()\cell ada-lang.c\cell\row
\cell scan_discrim_bound()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_tag_name_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int ada_tag_name_1 ( void* args0 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_value_struct_elt()\cell ada-lang.c\cell\row
\cell read_memory_string()\cell corefile.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell  isalpha(), tolower()\cell\cell\row
Used in:\cell ada_tag_name()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_to_fixed_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* ada_to_fixed_value ( struct value* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_to_fixed_value_create()\cell ada-lang.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_coerce_ref()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_value_ind()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_to_fixed_value_create()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* ada_to_fixed_value_create ( struct type* type0, CORE_ADDR address, struct value* val0 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_to_fixed_type()\cell ada-lang.c\cell\row
\cell value_from_contents_and_address()\cell ada-lang.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_to_fixed_value()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_type_match()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int ada_type_match ( struct type* ftype, struct type* atype, int may_deref )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_is_array_descriptor_type()\cell ada-lang.c\cell\row
\cell ada_type_match()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell ada_args_match()\cell ada-lang.c\cell\row
\cell ada_type_match()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_value_assign()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* ada_value_assign ( struct value* toval, struct value* fromval )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell coerce_ref()\cell value.c\cell\row
\cell deprecated_set_value_type()\cell value.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell deprecated_value_modifiable()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell move_bits()\cell ada-lang.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell read_memory()\cell corefile.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_bitpos()\cell value.c\cell\row
\cell value_bitsize()\cell value.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell write_memory()\cell corefile.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_value_binop()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* ada_value_binop ( struct value* arg1, struct value* arg2, enum exp_opcode op )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell allocate_value()\cell value.c\cell\row
\cell base_type()\cell ada-lang.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell op_string()\cell expprint.c\cell\row
\cell store_unsigned_integer()\cell findvar.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_value_equal()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int ada_value_equal ( struct value* arg1, struct value* arg2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_coerce_to_simple_array()\cell ada-lang.c\cell\row
\cell ada_is_direct_array_type()\cell ada-lang.c\cell\row
\cell error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_equal()\cell valarith.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell  memcmp()\cell\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_value_primitive_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* ada_value_primitive_field ( struct value* arg1, int offset, int fieldno, struct type* arg_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
Called by:\cell ada_search_struct_field()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_value_slice()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* ada_value_slice ( struct value* array, int low, int high )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell create_array_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_slice()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ada_value_slice_ptr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* ada_value_slice_ptr ( struct value* array_ptr, struct type* type, int low, int high )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell create_array_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell lookup_reference_type()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_defn_to_vec()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_defn_to_vec ( struct obstack* obstackp, struct symbol* sym, struct block* block, struct symtab* symtab )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell defns_collected()\cell ada-lang.c\cell\row
\cell lesseq_defined_than()\cell ada-lang.c\cell\row
\cell num_defns_collected()\cell ada-lang.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell ada_add_block_symbols()\cell ada-lang.c\cell\row
\cell ada_lookup_symbol_list()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_symbols_from_enclosing_procs()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_symbols_from_enclosing_procs ( struct obstack* obstackp, const char* name, domain_enum anamespace, int wild_match )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell ada_lookup_symbol_list()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function align_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned int align_value ( unsigned int off, unsigned int alignment )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell ada_template_to_fixed_record_type_1()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function base_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* base_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell ada_is_modular_type()\cell ada-lang.c\cell\row
\cell ada_value_binop()\cell ada-lang.c\cell\row
\cell return_match()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cache_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void cache_symbol ( const char* name, domain_enum anamespace, struct symbol* sym, struct block* block, struct symtab* symtab )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell ada_lookup_symbol_list()\cell ada-lang.c\cell\row
\cell standard_lookup()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cast_from_fixed_to_double()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* cast_from_fixed_to_double ( struct value* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_fixed_to_float()\cell ada-lang.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_from_double()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
Refs Var:\cell builtin_type_double\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cast_to_fixed()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* cast_to_fixed ( struct type* type, struct value* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_fixed_to_float()\cell ada-lang.c\cell\row
\cell ada_float_to_fixed()\cell ada-lang.c\cell\row
\cell ada_is_fixed_point_type()\cell ada-lang.c\cell\row
\cell value_as_double()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
Refs Var:\cell builtin_type_double\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function check_size()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void check_size ( struct type* the_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
Refs Var:\cell varsize_limit\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function coerce_for_assign()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* coerce_for_assign ( struct type* type, struct value* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_value_ind()\cell ada-lang.c\cell\row
\cell deprecated_set_value_type()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function coerce_unspec_val_to_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* coerce_unspec_val_to_type ( struct value* val, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell allocate_value()\cell value.c\cell\row
\cell check_size()\cell ada-lang.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell set_value_bitpos()\cell value.c\cell\row
\cell set_value_bitsize()\cell value.c\cell\row
\cell set_value_lazy()\cell value.c\cell\row
\cell value_bitpos()\cell value.c\cell\row
\cell value_bitsize()\cell value.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell ada_to_static_fixed_value()\cell ada-lang.c\cell\row
\cell decode_packed_array()\cell ada-lang.c\cell\row
\cell unwrap_value()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cond_offset_host()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const gdb_byte* cond_offset_host ( const gdb_byte* valaddr, long offset )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell ada_template_to_fixed_record_type_1()\cell ada-lang.c\cell\row
\cell to_record_with_fixed_variant_part()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cond_offset_target()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR cond_offset_target ( CORE_ADDR address, long offset )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell ada_template_to_fixed_record_type_1()\cell ada-lang.c\cell\row
\cell to_record_with_fixed_variant_part()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function convert_actual()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* convert_actual ( struct value* actual, struct type* formal_type0, CORE_ADDR* sp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_is_array_descriptor_type()\cell ada-lang.c\cell\row
\cell ada_value_ind()\cell ada-lang.c\cell\row
\cell allocate_value()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell desc_data()\cell ada-lang.c\cell\row
\cell ensure_lval()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_array_descriptor()\cell ada-lang.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell ada_convert_actuals()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_packed_array()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* decode_packed_array ( struct value* arr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_coerce_ref()\cell ada-lang.c\cell\row
\cell ada_is_modular_type()\cell ada-lang.c\cell\row
\cell ada_modulus()\cell ada-lang.c\cell\row
\cell ada_value_ind()\cell ada-lang.c\cell\row
\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
\cell decode_packed_array_type()\cell ada-lang.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_array_bound()\cell ada-lang.c\cell\row
\cell ada_array_length()\cell ada-lang.c\cell\row
\cell ada_coerce_to_simple_array()\cell ada-lang.c\cell\row
\cell ada_coerce_to_simple_array_ptr()\cell ada-lang.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_packed_array_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* decode_packed_array_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_type_name()\cell ada-lang.c\cell\row
\cell desc_base_type()\cell ada-lang.c\cell\row
\cell get_selected_block()\cell stack.c\cell\row
\cell lim_warning()\cell ada-lang.c\cell\row
\cell packed_array_type()\cell ada-lang.c\cell\row
\cell standard_lookup()\cell ada-lang.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), sscanf(), strlen(), strstr()\cell\cell\row
Called by:\cell ada_array_bound_from_type()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_type_of_array()\cell ada-lang.c\cell\row
\cell decode_packed_array()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function defns_collected()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct ada_symbol_info* defns_collected ( struct obstack* obstackp, int finish )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Called by:\cell ada_lookup_symbol_list()\cell ada-lang.c\cell\row
\cell add_defn_to_vec()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function desc_arity()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int desc_arity ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell desc_base_type()\cell ada-lang.c\cell\row
Called by:\cell ada_array_arity()\cell ada-lang.c\cell\row
\cell ada_is_array_descriptor_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function desc_base_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* desc_base_type ( struct type* the_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
Called by:\cell ada_array_arity()\cell ada-lang.c\cell\row
\cell ada_array_element_type()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_index_type()\cell ada-lang.c\cell\row
\cell ada_is_packed_array_type()\cell ada-lang.c\cell\row
\cell decode_packed_array_type()\cell ada-lang.c\cell\row
\cell desc_arity()\cell ada-lang.c\cell\row
\cell desc_bound_bitpos()\cell ada-lang.c\cell\row
\cell desc_bound_bitsize()\cell ada-lang.c\cell\row
\cell desc_bounds_type()\cell ada-lang.c\cell\row
\cell desc_data_type()\cell ada-lang.c\cell\row
\cell desc_index_type()\cell ada-lang.c\cell\row
\cell fat_pntr_bounds_bitpos()\cell ada-lang.c\cell\row
\cell fat_pntr_bounds_bitsize()\cell ada-lang.c\cell\row
\cell fat_pntr_data_bitpos()\cell ada-lang.c\cell\row
\cell fat_pntr_data_bitsize()\cell ada-lang.c\cell\row
\cell is_thick_pntr()\cell ada-lang.c\cell\row
\cell is_thin_pntr()\cell ada-lang.c\cell\row
\cell make_array_descriptor()\cell ada-lang.c\cell\row
\cell thin_descriptor_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function desc_bound_bitpos()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int desc_bound_bitpos ( struct type* type, int i, int which )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell desc_base_type()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
Called by:\cell make_array_descriptor()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function desc_bound_bitsize()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int desc_bound_bitsize ( struct type* type, int i, int which )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell desc_base_type()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell make_array_descriptor()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function desc_bounds()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* desc_bounds ( struct value* arr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell desc_bounds_type()\cell ada-lang.c\cell\row
\cell error()\cell utils.c\cell\row
\cell is_thick_pntr()\cell ada-lang.c\cell\row
\cell is_thin_pntr()\cell ada-lang.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell thin_descriptor_type()\cell ada-lang.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_array_bound()\cell ada-lang.c\cell\row
\cell ada_array_length()\cell ada-lang.c\cell\row
\cell ada_type_of_array()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function desc_bounds_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* desc_bounds_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell desc_base_type()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell is_thin_pntr()\cell ada-lang.c\cell\row
\cell lookup_struct_elt_type()\cell gdbtypes.c\cell\row
\cell thin_descriptor_type()\cell ada-lang.c\cell\row
Called by:\cell ada_array_arity()\cell ada-lang.c\cell\row
\cell ada_index_type()\cell ada-lang.c\cell\row
\cell ada_is_array_descriptor_type()\cell ada-lang.c\cell\row
\cell desc_bounds()\cell ada-lang.c\cell\row
\cell make_array_descriptor()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function desc_data()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* desc_data ( struct value* arr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell is_thick_pntr()\cell ada-lang.c\cell\row
\cell is_thin_pntr()\cell ada-lang.c\cell\row
\cell thin_data_pntr()\cell ada-lang.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_coerce_to_simple_array_ptr()\cell ada-lang.c\cell\row
\cell convert_actual()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function desc_data_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* desc_data_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell desc_base_type()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell is_thick_pntr()\cell ada-lang.c\cell\row
\cell is_thin_pntr()\cell ada-lang.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell lookup_struct_elt_type()\cell gdbtypes.c\cell\row
\cell thin_descriptor_type()\cell ada-lang.c\cell\row
Called by:\cell ada_array_element_type()\cell ada-lang.c\cell\row
\cell ada_is_array_descriptor_type()\cell ada-lang.c\cell\row
\cell ada_type_of_array()\cell ada-lang.c\cell\row
\cell thin_data_pntr()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function desc_index_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* desc_index_type ( struct type* type, int i )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell desc_base_type()\cell ada-lang.c\cell\row
\cell lookup_struct_elt_type()\cell gdbtypes.c\cell\row
Called by:\cell ada_index_type()\cell ada-lang.c\cell\row
Refs Var:\cell bound_name\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function desc_one_bound()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* desc_one_bound ( struct value* bounds, int i, int which )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell value_struct_elt()\cell valops.c\cell\row
Called by:\cell ada_array_bound()\cell ada-lang.c\cell\row
\cell ada_array_length()\cell ada-lang.c\cell\row
\cell ada_type_of_array()\cell ada-lang.c\cell\row
Refs Var:\cell bound_name\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function discrete_type_high_bound()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* discrete_type_high_bound ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
\cell max_of_type()\cell ada-lang.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function discrete_type_low_bound()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* discrete_type_low_bound ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
\cell min_of_type()\cell ada-lang.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function discrete_type_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int discrete_type_p ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell pos_atr()\cell ada-lang.c\cell\row
\cell value_val_atr()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dynamic_template_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* dynamic_template_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_find_parallel_type()\cell ada-lang.c\cell\row
\cell ada_type_name()\cell ada-lang.c\cell\row
\cell  strcmp(), strlen()\cell\cell\row
Called by:\cell to_fixed_record_type()\cell ada-lang.c\cell\row
\cell to_static_fixed_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function emit_char()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void emit_char ( int c, struct ui_file* stream, int quoter )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_emit_char()\cell ada-valprint.c\cell\row
Used in:\cell ada-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function empty_array()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* empty_array ( struct type* arr_type, int low )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_array_element_type()\cell ada-lang.c\cell\row
\cell allocate_value()\cell value.c\cell\row
\cell create_array_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function empty_record()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* empty_record ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell alloc_type()\cell gdbtypes.c\cell\row
Called by:\cell to_fixed_variant_branch_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function encoded_ordered_before()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int encoded_ordered_before ( const char* N0, const char* N1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  atoi(), isdigit(), strcmp(), strlen(), strncmp()\cell\cell\row
Called by:\cell sort_choices()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ensure_lval()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* ensure_lval ( struct value* val, CORE_ADDR* sp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell gdbarch_frame_align()\cell gdbarch.c\cell\row
\cell gdbarch_frame_align_p()\cell gdbarch.c\cell\row
\cell gdbarch_inner_than()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell write_memory()\cell corefile.c\cell\row
Called by:\cell convert_actual()\cell ada-lang.c\cell\row
\cell make_array_descriptor()\cell ada-lang.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function equiv_types()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int equiv_types ( struct type* type0, struct type* type1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_type_name()\cell ada-lang.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell lesseq_defined_than()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function evaluate_subexp()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* evaluate_subexp ( struct type* expect_type, struct expression* exp, int* pos, enum noside noside )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function evaluate_subexp_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* evaluate_subexp_type ( struct expression* exp, int* pos )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Called by:\cell resolve_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function extract_string()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void extract_string ( CORE_ADDR addr, char* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell target_read_memory()\cell target/target.c\cell\row
Called by:\cell ada_main_name()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function fat_pntr_bounds_bitpos()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int fat_pntr_bounds_bitpos ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell desc_base_type()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
Called by:\cell make_array_descriptor()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function fat_pntr_bounds_bitsize()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int fat_pntr_bounds_bitsize ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell desc_base_type()\cell ada-lang.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell make_array_descriptor()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function fat_pntr_data_bitpos()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int fat_pntr_data_bitpos ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell desc_base_type()\cell ada-lang.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
Called by:\cell make_array_descriptor()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function fat_pntr_data_bitsize()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int fat_pntr_data_bitsize ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell desc_base_type()\cell ada-lang.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell make_array_descriptor()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function field_alignment()\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned int field_alignment ( struct type* type, int f )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell warning()\cell utils.c\cell\row
\cell  atoi(), isdigit(), strlen(), strncmp()\cell\cell\row
Called by:\cell ada_template_to_fixed_record_type_1()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function field_name_match()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int field_name_match ( const char* field_name, const char* target )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  strcmp(), strlen(), strncmp()\cell\cell\row
Called by:\cell ada_get_field_index()\cell ada-lang.c\cell\row
\cell ada_lookup_struct_elt_type()\cell ada-lang.c\cell\row
\cell ada_search_struct_field()\cell ada-lang.c\cell\row
\cell find_struct_field()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_struct_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int find_struct_field ( const char* name, struct type* type, int offset, struct type** field_type_p, int* byte_offset_p, int* bit_offset_p, int* bit_size_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_is_variant_part()\cell ada-lang.c\cell\row
\cell ada_is_wrapper_field()\cell ada-lang.c\cell\row
\cell field_name_match()\cell ada-lang.c\cell\row
\cell find_struct_field()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
Called by:\cell ada_value_struct_elt()\cell ada-lang.c\cell\row
\cell find_struct_field()\cell ada-lang.c\cell\row
\cell value_tag_from_contents_and_address()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function fixed_type_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* fixed_type_info ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_type_name()\cell ada-lang.c\cell\row
\cell fixed_type_info()\cell ada-lang.c\cell\row
\cell  strstr()\cell\cell\row
Called by:\cell ada_delta()\cell ada-lang.c\cell\row
\cell ada_is_fixed_point_type()\cell ada-lang.c\cell\row
\cell fixed_type_info()\cell ada-lang.c\cell\row
\cell scaling_factor()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_var_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* get_var_value ( const char* name, char* err_msg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_lookup_symbol_list()\cell ada-lang.c\cell\row
\cell error()\cell utils.c\cell\row
\cell get_selected_block()\cell stack.c\cell\row
\cell value_of_variable()\cell valops.c\cell\row
Called by:\cell ada_vax_float_print_function()\cell ada-lang.c\cell\row
\cell get_int_var_value()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function has_negatives()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int has_negatives ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function integer_type_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int integer_type_p ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell integer_type_p()\cell ada-lang.c\cell\row
Called by:\cell integer_type_p()\cell ada-lang.c\cell\row
\cell possible_user_operator_p()\cell ada-lang.c\cell\row
\cell value_val_atr()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_dot_digits_suffix()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int is_dot_digits_suffix ( const char* str )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  isdigit()\cell\cell\row
Called by:\cell wild_match()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_dynamic_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int is_dynamic_field ( struct type* templ_type, int field_num )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell  strstr()\cell\cell\row
Called by:\cell ada_is_variant_part()\cell ada-lang.c\cell\row
\cell ada_template_to_fixed_record_type_1()\cell ada-lang.c\cell\row
\cell template_to_static_fixed_type()\cell ada-lang.c\cell\row
\cell to_fixed_variant_branch_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_name_suffix()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int is_name_suffix ( const char* str )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell  isdigit(), strcmp(), strlen()\cell\cell\row
Called by:\cell ada_add_block_symbols()\cell ada-lang.c\cell\row
\cell ada_lookup_partial_symbol()\cell ada-lang.c\cell\row
\cell ada_match_name()\cell ada-lang.c\cell\row
\cell wild_match()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_nondebugging_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int is_nondebugging_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_type_name()\cell ada-lang.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell remove_extra_symbols()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_nonfunction()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int is_nonfunction ( struct ada_symbol_info syms[], int n )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Called by:\cell ada_lookup_symbol_list()\cell ada-lang.c\cell\row
\cell resolve_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_package_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int is_package_name ( const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell standard_lookup()\cell ada-lang.c\cell\row
\cell xstrprintf()\cell utils.c\cell\row
\cell  strstr()\cell\cell\row
Called by:\cell renaming_is_visible()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_suffix()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int is_suffix ( const char* str, const char* suffix )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  strcmp(), strlen()\cell\cell\row
Called by:\cell is_thin_pntr()\cell ada-lang.c\cell\row
\cell thin_descriptor_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_suppressed_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int is_suppressed_name ( const char* str )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  isupper(), strlen(), strncmp(), strstr()\cell\cell\row
Called by:\cell ada_suppress_symbol_printing()\cell ada-lang.c\cell\row
Refs Var:\cell ada_opname_table\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_thick_pntr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int is_thick_pntr ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell desc_base_type()\cell ada-lang.c\cell\row
\cell lookup_struct_elt_type()\cell gdbtypes.c\cell\row
Called by:\cell desc_bounds()\cell ada-lang.c\cell\row
\cell desc_data()\cell ada-lang.c\cell\row
\cell desc_data_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_thin_pntr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int is_thin_pntr ( struct type* the_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_type_name()\cell ada-lang.c\cell\row
\cell desc_base_type()\cell ada-lang.c\cell\row
\cell is_suffix()\cell ada-lang.c\cell\row
Called by:\cell desc_bounds()\cell ada-lang.c\cell\row
\cell desc_bounds_type()\cell ada-lang.c\cell\row
\cell desc_data()\cell ada-lang.c\cell\row
\cell desc_data_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function lesseq_defined_than()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int lesseq_defined_than ( struct symbol* sym0, struct symbol* sym1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell equiv_types()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  strlen(), strncmp()\cell\cell\row
Called by:\cell add_defn_to_vec()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function lim_warning()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void lim_warning ( const char* format, ... )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell vwarning()\cell utils.c\cell\row
\cell  __builtin_va_end(), __builtin_va_start()\cell\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell decode_packed_array_type()\cell ada-lang.c\cell\row
\cell to_fixed_range_type()\cell ada-lang.c\cell\row
\cell value_subscript_packed()\cell ada-lang.c\cell\row
Refs Var:\cell warning_limit\cell ada-lang.c\cell\row
\cell warnings_issued\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function lookup_cached_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int lookup_cached_symbol ( const char* name, domain_enum anamespace, struct symbol** sym, struct block** block, struct symtab** symtab )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell ada_lookup_symbol_list()\cell ada-lang.c\cell\row
\cell standard_lookup()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function make_array_descriptor()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* make_array_descriptor ( struct type* atype, struct value* arr, CORE_ADDR* sp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_array_arity()\cell ada-lang.c\cell\row
\cell ada_array_bound()\cell ada-lang.c\cell\row
\cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell allocate_value()\cell value.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell desc_base_type()\cell ada-lang.c\cell\row
\cell desc_bound_bitpos()\cell ada-lang.c\cell\row
\cell desc_bound_bitsize()\cell ada-lang.c\cell\row
\cell desc_bounds_type()\cell ada-lang.c\cell\row
\cell ensure_lval()\cell ada-lang.c\cell\row
\cell fat_pntr_bounds_bitpos()\cell ada-lang.c\cell\row
\cell fat_pntr_bounds_bitsize()\cell ada-lang.c\cell\row
\cell fat_pntr_data_bitpos()\cell ada-lang.c\cell\row
\cell fat_pntr_data_bitsize()\cell ada-lang.c\cell\row
\cell modify_general_field()\cell ada-lang.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_contents_writeable()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell convert_actual()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function max_of_size()\par}
{\s5\f1\fs20\ql\sb50\sa50 static long max_of_size ( int size )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell max_of_type()\cell ada-lang.c\cell\row
\cell min_of_size()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function max_of_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static long max_of_type ( struct type* t )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell max_of_size()\cell ada-lang.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell umax_of_size()\cell ada-lang.c\cell\row
Called by:\cell discrete_type_high_bound()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function min_of_size()\par}
{\s5\f1\fs20\ql\sb50\sa50 static long min_of_size ( int size )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell max_of_size()\cell ada-lang.c\cell\row
Called by:\cell min_of_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function min_of_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static long min_of_type ( struct type* t )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell min_of_size()\cell ada-lang.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell discrete_type_low_bound()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function modify_general_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void modify_general_field ( char* addr, long fieldval, int bitpos, int bitsize )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell modify_field()\cell value.c\cell\row
Called by:\cell make_array_descriptor()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function move_bits()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void move_bits ( gdb_byte* target, int targ_offset, const gdb_byte* source, int src_offset, int n )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_byte_order()\cell gdbarch.c\cell\row
Called by:\cell ada_value_assign()\cell ada-lang.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function num_defns_collected()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int num_defns_collected ( struct obstack* obstackp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Called by:\cell ada_lookup_symbol_list()\cell ada-lang.c\cell\row
\cell add_defn_to_vec()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function numeric_type_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int numeric_type_p ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell numeric_type_p()\cell ada-lang.c\cell\row
Called by:\cell numeric_type_p()\cell ada-lang.c\cell\row
\cell possible_user_operator_p()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function packed_array_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* packed_array_type ( struct type* type, long* elt_bits )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_type_name()\cell ada-lang.c\cell\row
\cell alloc_type()\cell gdbtypes.c\cell\row
\cell create_array_type()\cell gdbtypes.c\cell\row
\cell get_discrete_bounds()\cell gdbtypes.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell packed_array_type()\cell ada-lang.c\cell\row
Called by:\cell decode_packed_array_type()\cell ada-lang.c\cell\row
\cell packed_array_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function parse()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int parse ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_parse()\cell ada-exp.c\cell\row
Used in:\cell ada-lang.c\cell\cell\row
Refs Var:\cell warnings_issued\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function pos_atr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static long pos_atr ( struct value* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell discrete_type_p()\cell ada-lang.c\cell\row
\cell error()\cell utils.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell value_pos_atr()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function possible_user_operator_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int possible_user_operator_p ( enum exp_opcode op, struct value* args[] )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell integer_type_p()\cell ada-lang.c\cell\row
\cell numeric_type_p()\cell ada-lang.c\cell\row
\cell scalar_type_p()\cell ada-lang.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell resolve_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function remove_extra_symbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int remove_extra_symbols ( struct ada_symbol_info* syms, int nsyms )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell is_nondebugging_type()\cell ada-lang.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell ada_lookup_symbol_list()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function remove_out_of_scope_renamings()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int remove_out_of_scope_renamings ( struct ada_symbol_info* syms, int nsyms, struct block* current_block )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_is_object_renaming()\cell ada-lang.c\cell\row
\cell block_function()\cell block.c\cell\row
\cell renaming_is_visible()\cell ada-lang.c\cell\row
Called by:\cell ada_lookup_symbol_list()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function renaming_is_visible()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int renaming_is_visible ( const struct symbol* sym, const char* function_name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell is_package_name()\cell ada-lang.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell xget_renaming_scope()\cell ada-lang.c\cell\row
\cell  strlen(), strncmp()\cell\cell\row
Called by:\cell remove_out_of_scope_renamings()\cell ada-lang.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function replace_operator_with_call()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void replace_operator_with_call ( struct expression** expp, int pc, int nargs, int oplen, struct symbol* sym, struct block* block )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell resolve_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void resolve ( struct expression** expp, int void_context_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell resolve_subexp()\cell ada-lang.c\cell\row
Used in:\cell ada-lang.c\cell\cell\row
Refs Var:\cell builtin_type_void\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve_subexp()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* resolve_subexp ( struct expression** expp, int* pos, int deprocedure_p, struct type* context_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_decoded_op_name()\cell ada-lang.c\cell\row
\cell ada_encode()\cell ada-lang.c\cell\row
\cell ada_lookup_symbol_list()\cell ada-lang.c\cell\row
\cell ada_resolve_function()\cell ada-lang.c\cell\row
\cell contained_in()\cell block.c\cell\row
\cell error()\cell utils.c\cell\row
\cell evaluate_subexp_type()\cell ada-lang.c\cell\row
\cell is_nonfunction()\cell ada-lang.c\cell\row
\cell longest_to_int()\cell valprint.c\cell\row
\cell possible_user_operator_p()\cell ada-lang.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell replace_operator_with_call()\cell ada-lang.c\cell\row
\cell resolve_subexp()\cell ada-lang.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell user_select_syms()\cell ada-lang.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
Called by:\cell resolve()\cell ada-lang.c\cell\row
\cell resolve_subexp()\cell ada-lang.c\cell\row
Refs Var:\cell demangle\cell utils.c\cell\row
\cell innermost_block\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function restore_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void restore_language ( void* lang )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell set_language()\cell language.c\cell\row
Used in:\cell lookup_symbol_in_language()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function return_match()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int return_match ( struct type* func_type, struct type* context_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell base_type()\cell ada-lang.c\cell\row
Called by:\cell ada_resolve_function()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function scalar_type_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int scalar_type_p ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Called by:\cell possible_user_operator_p()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function scaling_factor()\par}
{\s5\f1\fs20\ql\sb50\sa50 static DOUBLEST scaling_factor ( struct type* the_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fixed_type_info()\cell ada-lang.c\cell\row
\cell  sscanf()\cell\cell\row
Called by:\cell ada_fixed_to_float()\cell ada-lang.c\cell\row
\cell ada_float_to_fixed()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function scan_discrim_bound()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int scan_discrim_bound ( char* str, int k, struct value* dval, long* px, int* pnew_k )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_search_struct_field()\cell ada-lang.c\cell\row
\cell grow_vect()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell  __builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), strlen(), strstr()\cell\cell\row
Called by:\cell to_fixed_range_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function sort_choices()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void sort_choices ( struct ada_symbol_info syms[], int nsyms )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell encoded_ordered_before()\cell ada-lang.c\cell\row
Called by:\cell user_select_syms()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function standard_lookup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* standard_lookup ( const char* name, const struct block* block, domain_enum domain )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell cache_symbol()\cell ada-lang.c\cell\row
\cell lookup_cached_symbol()\cell ada-lang.c\cell\row
\cell lookup_symbol_in_language()\cell ada-lang.c\cell\row
Called by:\cell ada_find_any_symbol()\cell ada-lang.c\cell\row
\cell decode_packed_array_type()\cell ada-lang.c\cell\row
\cell is_package_name()\cell ada-lang.c\cell\row
Refs Var:\cell block_found\cell symtab.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function static_unwrap_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* static_unwrap_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_get_base_type()\cell ada-lang.c\cell\row
\cell ada_is_aligner_type()\cell ada-lang.c\cell\row
\cell ada_type_name()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell static_unwrap_type()\cell ada-lang.c\cell\row
\cell to_static_fixed_type()\cell ada-lang.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_to_static_fixed_value()\cell ada-lang.c\cell\row
\cell static_unwrap_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function symtab_for_sym()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtab* symtab_for_sym ( struct symbol* sym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell dict_iterator_first()\cell dictionary.c\cell\row
\cell dict_iterator_next()\cell dictionary.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell symtab_get_first()\cell objfiles.c\cell\row
\cell symtab_get_next()\cell objfiles.c\cell\row
Called by:\cell user_select_syms()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function template_to_fixed_record_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* template_to_fixed_record_type ( struct type* type, const gdb_byte* valaddr, CORE_ADDR address, struct value* dval0 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_template_to_fixed_record_type_1()\cell ada-lang.c\cell\row
Called by:\cell to_fixed_record_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function template_to_static_fixed_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* template_to_static_fixed_type ( struct type* type0 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_type_name()\cell ada-lang.c\cell\row
\cell alloc_type()\cell gdbtypes.c\cell\row
\cell is_dynamic_field()\cell ada-lang.c\cell\row
\cell to_static_fixed_type()\cell ada-lang.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell to_static_fixed_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function thin_data_pntr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* thin_data_pntr ( struct value* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell deprecated_value_address_hack()\cell value.c\cell\row
\cell desc_data_type()\cell ada-lang.c\cell\row
\cell thin_descriptor_type()\cell ada-lang.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell desc_data()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function thin_descriptor_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* thin_descriptor_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_find_parallel_type()\cell ada-lang.c\cell\row
\cell ada_type_name()\cell ada-lang.c\cell\row
\cell desc_base_type()\cell ada-lang.c\cell\row
\cell is_suffix()\cell ada-lang.c\cell\row
Called by:\cell desc_bounds()\cell ada-lang.c\cell\row
\cell desc_bounds_type()\cell ada-lang.c\cell\row
\cell desc_data_type()\cell ada-lang.c\cell\row
\cell thin_data_pntr()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function to_fixed_array_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* to_fixed_array_type ( struct type* type0, struct value* dval, int ignore_too_big )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_find_parallel_type()\cell ada-lang.c\cell\row
\cell ada_is_packed_array_type()\cell ada-lang.c\cell\row
\cell ada_to_fixed_type()\cell ada-lang.c\cell\row
\cell alloc_type()\cell gdbtypes.c\cell\row
\cell create_array_type()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell to_fixed_range_type()\cell ada-lang.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_to_fixed_type()\cell ada-lang.c\cell\row
Refs Var:\cell varsize_limit\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function to_fixed_range_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* to_fixed_range_type ( const char* name, struct value* dval, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_find_any_type()\cell ada-lang.c\cell\row
\cell ada_scan_number()\cell ada-lang.c\cell\row
\cell alloc_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell get_int_var_value()\cell ada-lang.c\cell\row
\cell grow_vect()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lim_warning()\cell ada-lang.c\cell\row
\cell scan_discrim_bound()\cell ada-lang.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin___strncpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), __inline_strncpy_chk(), strchr(), strstr()\cell\cell\row
Called by:\cell ada_array_bound_from_type()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell to_fixed_array_type()\cell ada-lang.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function to_fixed_record_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* to_fixed_record_type ( struct type* type0, const gdb_byte* valaddr, CORE_ADDR address, struct value* dval )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell dynamic_template_type()\cell ada-lang.c\cell\row
\cell template_to_fixed_record_type()\cell ada-lang.c\cell\row
\cell to_record_with_fixed_variant_part()\cell ada-lang.c\cell\row
\cell variant_field_index()\cell ada-lang.c\cell\row
Called by:\cell ada_to_fixed_type()\cell ada-lang.c\cell\row
\cell to_fixed_variant_branch_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function to_fixed_variant_branch_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* to_fixed_variant_branch_type ( struct type* var_type0, const gdb_byte* valaddr, CORE_ADDR address, struct value* dval )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_find_parallel_type()\cell ada-lang.c\cell\row
\cell ada_which_variant_applies()\cell ada-lang.c\cell\row
\cell empty_record()\cell ada-lang.c\cell\row
\cell is_dynamic_field()\cell ada-lang.c\cell\row
\cell to_fixed_record_type()\cell ada-lang.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell variant_field_index()\cell ada-lang.c\cell\row
Called by:\cell ada_template_to_fixed_record_type_1()\cell ada-lang.c\cell\row
\cell ada_to_fixed_type()\cell ada-lang.c\cell\row
\cell to_record_with_fixed_variant_part()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function to_record_with_fixed_variant_part()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* to_record_with_fixed_variant_part ( struct type* type, const gdb_byte* valaddr, CORE_ADDR address, struct value* dval0 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_type_name()\cell ada-lang.c\cell\row
\cell alloc_type()\cell gdbtypes.c\cell\row
\cell cond_offset_host()\cell ada-lang.c\cell\row
\cell cond_offset_target()\cell ada-lang.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell to_fixed_variant_branch_type()\cell ada-lang.c\cell\row
\cell value_free_to_mark()\cell value.c\cell\row
\cell value_from_contents_and_address()\cell ada-lang.c\cell\row
\cell value_mark()\cell value.c\cell\row
\cell variant_field_index()\cell ada-lang.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell to_fixed_record_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function to_static_fixed_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* to_static_fixed_type ( struct type* type0 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_find_parallel_type()\cell ada-lang.c\cell\row
\cell dynamic_template_type()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell template_to_static_fixed_type()\cell ada-lang.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_lookup_struct_elt_type()\cell ada-lang.c\cell\row
\cell ada_to_fixed_type()\cell ada-lang.c\cell\row
\cell ada_to_static_fixed_value()\cell ada-lang.c\cell\row
\cell static_unwrap_type()\cell ada-lang.c\cell\row
\cell template_to_static_fixed_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function type_from_tag()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* type_from_tag ( struct value* tag )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_encode()\cell ada-lang.c\cell\row
\cell ada_find_any_type()\cell ada-lang.c\cell\row
\cell ada_tag_name()\cell ada-lang.c\cell\row
Called by:\cell ada_to_fixed_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function umax_of_size()\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned long umax_of_size ( int size )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell max_of_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unwrap_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* unwrap_value ( struct value* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_get_base_type()\cell ada-lang.c\cell\row
\cell ada_is_aligner_type()\cell ada-lang.c\cell\row
\cell ada_to_fixed_type()\cell ada-lang.c\cell\row
\cell ada_type_name()\cell ada-lang.c\cell\row
\cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell unwrap_value()\cell ada-lang.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_coerce_ref()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_value_ind()\cell ada-lang.c\cell\row
\cell unwrap_value()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function value_pos_atr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* value_pos_atr ( struct value* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell pos_atr()\cell ada-lang.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_value_ptr_subscript()\cell ada-lang.c\cell\row
\cell ada_value_subscript()\cell ada-lang.c\cell\row
\cell value_subscript_packed()\cell ada-lang.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function value_subscript_packed()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* value_subscript_packed ( struct value* arr, int arity, struct value** ind )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell get_discrete_bounds()\cell gdbtypes.c\cell\row
\cell lim_warning()\cell ada-lang.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_pos_atr()\cell ada-lang.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_value_subscript()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function value_tag_from_contents_and_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* value_tag_from_contents_and_address ( struct type* type, const gdb_byte* valaddr, CORE_ADDR address )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell find_struct_field()\cell ada-lang.c\cell\row
\cell value_from_contents_and_address()\cell ada-lang.c\cell\row
Called by:\cell ada_to_fixed_type()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function value_val_atr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* value_val_atr ( struct type* type, struct value* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell discrete_type_p()\cell ada-lang.c\cell\row
\cell error()\cell utils.c\cell\row
\cell integer_type_p()\cell ada-lang.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function variant_field_index()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int variant_field_index ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_is_variant_part()\cell ada-lang.c\cell\row
Called by:\cell to_fixed_record_type()\cell ada-lang.c\cell\row
\cell to_fixed_variant_branch_type()\cell ada-lang.c\cell\row
\cell to_record_with_fixed_variant_part()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function wild_match()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int wild_match ( const char* patn0, int patn_len, const char* name0 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell is_dot_digits_suffix()\cell ada-lang.c\cell\row
\cell is_name_suffix()\cell ada-lang.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcpy_chk(), __inline_strncpy_chk(), islower(), strlen(), strncmp(), strrchr()\cell\cell\row
Called by:\cell ada_add_block_symbols()\cell ada-lang.c\cell\row
\cell ada_lookup_partial_symbol()\cell ada-lang.c\cell\row
\cell ada_match_name()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function xget_renaming_scope()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* xget_renaming_scope ( struct type* renaming_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell type_name_no_tag()\cell gdbtypes.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), strstr()\cell\cell\row
Called by:\cell renaming_is_visible()\cell ada-lang.c\cell\row
\intbl0
}
