<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF corefile.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for corefile.c of gdb.cxref.
<author>cxref

<sect>File corefile.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;errno.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;signal.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;fcntl.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/dis-asm.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_stat.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;sys/stat.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;completer.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objc-lang.h&quot;</tt>
<itemize>
<item><tt>#include &lt;Availability.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define __4_12_OR_LATER__ 1</tt><newline>
<p>
<tt>#define IT_IS_TESTED 1</tt><newline>

<sect1>Typedef hook_type

<p>
<tt>typedef void (*hook_type)(const char*)</tt><newline>

<sect1>Type struct captured_read_memory_integer_arguments

<p>
<itemize>
<item><tt>struct captured_read_memory_integer_arguments</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>CORE_ADDR memaddr;</tt><newline>
<item><tt>int len;</tt><newline>
<item><tt>int signedp;</tt><newline>
<item><tt>union</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>long sresult;</tt><newline>
<item><tt>unsigned long uresult;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>result;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable deprecated_exec_file_display_hook

<p>
<tt>void (*deprecated_exec_file_display_hook)(const char* filename)</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>ada-typeprint.c
<item>arch-utils.c
<item>blockframe.c
<item>breakpoint.c
<item>c-typeprint.c
<item>corefile.c
<item>dbxread.c
<item>disasm.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame.c
<item>hpacc-abi.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>jv-lang.c
<item>jv-valprint.c
<item>m2-typeprint.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>objc-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>printcmd.c
<item>remote.c
<item>scm-lang.c
<item>scm-valprint.c
<item>solib.c
<item>source.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>tramp-frame.c
<item>typeprint.c
<item>valops.c
<item>valprint.c
<item>value.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>specify_exec_file_hook()  :  corefile.c
</itemize>
</descrip>

<sect1>Global Variable core_bfd

<p>
<tt>bfd* core_bfd</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>ada-typeprint.c
<item>arch-utils.c
<item>blockframe.c
<item>breakpoint.c
<item>c-typeprint.c
<item>corefile.c
<item>dbxread.c
<item>disasm.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame.c
<item>hpacc-abi.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>jv-lang.c
<item>jv-valprint.c
<item>m2-typeprint.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>objc-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>printcmd.c
<item>remote.c
<item>scm-lang.c
<item>scm-valprint.c
<item>solib.c
<item>source.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>tramp-frame.c
<item>typeprint.c
<item>valops.c
<item>valprint.c
<item>value.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>add_vsyscall_page()  :  symfile-mem.c
<item>maintenance_info_sections()  :  maint.c
<item>validate_files()  :  corefile.c
</itemize>
</descrip>

<sect1>Global Variable gnutarget

<p>
<tt>char* gnutarget</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>ada-typeprint.c
<item>arch-utils.c
<item>blockframe.c
<item>breakpoint.c
<item>c-typeprint.c
<item>corefile.c
<item>dbxread.c
<item>disasm.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame.c
<item>hpacc-abi.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>jv-lang.c
<item>jv-valprint.c
<item>m2-typeprint.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>objc-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>printcmd.c
<item>remote.c
<item>scm-lang.c
<item>scm-valprint.c
<item>solib.c
<item>source.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>tramp-frame.c
<item>typeprint.c
<item>valops.c
<item>valprint.c
<item>value.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>generic_load()  :  symfile.c
<item>open_bfd_from_oso()  :  dbxread.c
<item>reread_symbols_for_objfile()  :  symfile.c
<item>set_gnutarget_command()  :  corefile.c
<item>solib_map_sections()  :  solib.c
<item>symfile_bfd_open()  :  symfile.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>exec_file_extra_hooks</bf><newline>
<tt>static hook_type* exec_file_extra_hooks</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>call_extra_exec_file_hooks()
<item>specify_exec_file_hook()
</itemize>
</descrip>
<p>
<bf>exec_file_hook_count</bf><newline>
<tt>static int exec_file_hook_count</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>call_extra_exec_file_hooks()
<item>specify_exec_file_hook()
</itemize>
</descrip>
<p>
<bf>gnutarget_string</bf><newline>
<tt>static char* gnutarget_string</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_core()
<item>set_gnutarget()
<item>set_gnutarget_command()
</itemize>
</descrip>

<sect1>Global Function _initialize_core()

<p><tt>void _initialize_core ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>corefile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>set_gnutarget()  :  corefile.c
<item>add_cmd(), add_setshow_string_noescape_cmd(), getenv(), set_cmd_completer()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>core_file_command()  :  corefile.c
<item>filename_completer()  :  completer.c
<item>set_gnutarget_command()  :  corefile.c
<item>show_gnutarget_string()  :  corefile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gnutarget_string  :  corefile.c
<item>cmdlist, setlist, showlist
</itemize>
</descrip>

<sect1>Global Function close_exec_file()

<p><tt>void close_exec_file ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
</descrip>

<sect1>Global Function core_file_attach()

<p><tt>void core_file_attach ( const char* filename, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>find_core_target()  :  target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>core_file_command()  :  corefile.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>captured_main()  :  main.c
</itemize>
</descrip>

<sect1>Global Function core_file_command()

<p><tt>void core_file_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>core_file_attach()  :  corefile.c
<item>do_cleanups()  :  utils.c
<item>dont_repeat()  :  top.c
<item>error()  :  utils.c
<item>internal_error()  :  utils.c
<item>make_cleanup_freeargv()  :  utils.c
<item>nomem()  :  utils.c
<item>buildargv()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_core()  :  corefile.c
</itemize>
</descrip>

<sect1>Global Function generic_search()

<p><tt>void generic_search ( int len, char* data, char* mask, CORE_ADDR startaddr, int increment, CORE_ADDR lorange, CORE_ADDR hirange, CORE_ADDR* addr_found, char* data_found )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>read_memory()  :  corefile.c
</itemize>
</descrip>

<sect1>Global Function get_exec_file()

<p><tt>char* get_exec_file ( int err )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>attach_command()  :  infcmd.c
<item>load_command()  :  symfile.c
<item>run_command_1()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>exec_bfd
</itemize>
</descrip>

<sect1>Global Function memory_error()

<p><tt>void memory_error ( int status, CORE_ADDR memaddr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error_stream()  :  utils.c
<item>fprintf_filtered()  :  utils.c
<item>fprintf_unfiltered()  :  utils.c
<item>make_cleanup_ui_file_delete()  :  utils.c
<item>mem_fileopen()  :  ui-file.c
<item>phex_nz()  :  utils.c
<item>safe_strerror()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dis_asm_memory_error()  :  disasm.c
<item>dis_asm_memory_error_noprint()  :  target/target.c
<item>get_target_memory()  :  target/target.c
<item>read_memory()  :  corefile.c
<item>write_memory()  :  corefile.c
</itemize>
</descrip>

<sect1>Global Function read_memory()

<p><tt>void read_memory ( CORE_ADDR memaddr, gdb_byte* myaddr, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>memory_error()  :  corefile.c
<item>target_read_memory()  :  target/target.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_assign()  :  ada-lang.c
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>dwarf2_evaluate_loc_desc()  :  dwarf2loc.c
<item>dwarf2_frame_prev_register()  :  dwarf2-frame.c
<item>dwarf_expr_read_mem()  :  dwarf2loc.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>generic_search()  :  corefile.c
<item>get_frame_memory()  :  frame.c
<item>get_java_utf8_name()  :  jv-lang.c
<item>java_value_print()  :  jv-valprint.c
<item>pascal_val_print()  :  p-valprint.c
<item>print_object_command()  :  objc-lang.c
<item>printf_command()  :  printcmd.c
<item>read_mem()  :  dwarf2-frame.c
<item>read_memory_integer()  :  corefile.c
<item>read_memory_string()  :  corefile.c
<item>read_memory_typed_address()  :  corefile.c
<item>read_memory_unsigned_integer()  :  corefile.c
<item>read_target_long_array()  :  symfile.c
<item>scm_get_field()  :  scm-lang.c
<item>scm_scmval_print()  :  scm-valprint.c
<item>value_assign()  :  valops.c
<item>value_at()  :  valops.c
<item>value_fetch_lazy()  :  valops.c
<item>value_repeat()  :  valops.c
<item>x86_frame_prev_register()  :  target/x86-shared-tdep.c
<item>x86_frame_this_id()  :  target/x86-shared-tdep.c
<item>x86_quickie_analyze_prologue()  :  target/x86-shared-tdep.c
</itemize>
</descrip>

<sect1>Global Function read_memory_integer()

<p><tt>long read_memory_integer ( CORE_ADDR memaddr, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_signed_integer()  :  findvar.c
<item>read_memory()  :  corefile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_captured_read_memory_integer()  :  corefile.c
<item>f77_get_dynamic_lowerbound()  :  f-valprint.c
<item>f77_get_dynamic_upperbound()  :  f-valprint.c
<item>get_frame_memory_signed()  :  frame.c
<item>print_frame_nameless_args()  :  stack.c
<item>simple_read_overlay_table()  :  symfile.c
<item>x86_cxx_virtual_override_thunk_trampline()  :  target/x86-shared-tdep.c
<item>x86_sub_esp_pattern_p()  :  target/x86-shared-tdep.c
</itemize>
</descrip>

<sect1>Global Function read_memory_string()

<p><tt>void read_memory_string ( CORE_ADDR memaddr, char* buffer, int max_len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>read_memory()  :  corefile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_tag_name_1()  :  ada-lang.c
<item>find_implementation_from_class()  :  objc-lang.c
<item>hpacc_value_rtti_type()  :  hpacc-abi.c
<item>new_objc_runtime_get_classname()  :  objc-lang.c
<item>objc_target_type_from_object()  :  objc-lang.c
<item>resolve_newruntime_objc_msgsend()  :  objc-lang.c
<item>resolve_newruntime_objc_msgsendsuper()  :  objc-lang.c
</itemize>
</descrip>

<sect1>Global Function read_memory_typed_address()

<p><tt>CORE_ADDR read_memory_typed_address ( CORE_ADDR addr, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_typed_address()  :  findvar.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>read_memory()  :  corefile.c
<item>__builtin_alloca()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>f77_get_dynamic_lowerbound()  :  f-valprint.c
<item>f77_get_dynamic_upperbound()  :  f-valprint.c
</itemize>
</descrip>

<sect1>Global Function read_memory_unsigned_integer()

<p><tt>unsigned long read_memory_unsigned_integer ( CORE_ADDR memaddr, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_unsigned_integer()  :  findvar.c
<item>read_memory()  :  corefile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_captured_read_memory_integer()  :  corefile.c
<item>find_implementation_from_class()  :  objc-lang.c
<item>get_frame_memory_unsigned()  :  frame.c
<item>objc_init_trampoline_observer()  :  objc-lang.c
<item>objc_read_trampoline_region()  :  objc-lang.c
<item>objc_target_type_from_object()  :  objc-lang.c
<item>read_objc_class()  :  objc-lang.c
<item>read_objc_method()  :  objc-lang.c
<item>read_objc_method_list_nmethods()  :  objc-lang.c
<item>read_objc_super()  :  objc-lang.c
<item>resolve_newruntime_objc_msgsend()  :  objc-lang.c
<item>resolve_newruntime_objc_msgsendsuper()  :  objc-lang.c
<item>x86_analyze_prologue()  :  target/x86-shared-tdep.c
<item>x86_blocks_context_var_copy_pattern_p()  :  target/x86-shared-tdep.c
<item>x86_cxx_virtual_override_thunk_trampline()  :  target/x86-shared-tdep.c
<item>x86_frame_prev_register()  :  target/x86-shared-tdep.c
<item>x86_jump_insn_p()  :  target/x86-shared-tdep.c
<item>x86_mov_esp_ebp_pattern_p()  :  target/x86-shared-tdep.c
<item>x86_mov_func_arg_to_reg_p()  :  target/x86-shared-tdep.c
<item>x86_mov_reg_to_local_stack_frame_p()  :  target/x86-shared-tdep.c
<item>x86_picbase_setup_pattern_p()  :  target/x86-shared-tdep.c
<item>x86_pop_p()  :  target/x86-shared-tdep.c
<item>x86_push_ebp_pattern_p()  :  target/x86-shared-tdep.c
<item>x86_push_reg_p()  :  target/x86-shared-tdep.c
<item>x86_ret_pattern_p()  :  target/x86-shared-tdep.c
<item>x86_sub_esp_pattern_p()  :  target/x86-shared-tdep.c
</itemize>
</descrip>

<sect1>Global Function reopen_exec_file()

<p><tt>void reopen_exec_file ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
<item>safe_strerror()  :  utils.c
<item>symtab_clear_cached_lookup_values()  :  symtab.c
<item>tell_breakpoints_objfile_changed()  :  breakpoint.c
<item>tell_objc_msgsend_cacher_objfile_changed()  :  objc-lang.c
<item>warning()  :  utils.c
<item>__error(), bfd_get_mtime(), exec_open(), stat(), strcmp(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>attach_command()  :  infcmd.c
<item>generic_mourn_inferior()  :  target/target.c
<item>remote_open_1()  :  remote.c
<item>run_command_1()  :  infcmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>gdb_quitting  :  top.c
<item>exec_bfd
</itemize>
</descrip>

<sect1>Global Function safe_read_memory_integer()

<p><tt>int safe_read_memory_integer ( CORE_ADDR memaddr, int len, long* return_value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>catch_errors()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_captured_read_memory_integer()  :  corefile.c
</itemize>
</descrip>

<sect1>Global Function safe_read_memory_unsigned_integer()

<p><tt>int safe_read_memory_unsigned_integer ( CORE_ADDR memaddr, int len, unsigned long* return_value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>catch_errors()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>read_objc_object()  :  objc-lang.c
<item>x86_frame_this_id()  :  target/x86-shared-tdep.c
<item>x86_quickie_analyze_prologue()  :  target/x86-shared-tdep.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_captured_read_memory_integer()  :  corefile.c
</itemize>
</descrip>

<sect1>Global Function set_gnutarget()

<p><tt>void set_gnutarget ( const char* newtarget )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>savestring()  :  utils.c
<item>set_gnutarget_command()  :  corefile.c
<item>xfree()  :  utils.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_core()  :  corefile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gnutarget_string  :  corefile.c
</itemize>
</descrip>

<sect1>Global Function specify_exec_file_hook()

<p><tt>void specify_exec_file_hook ( void (*hook)(const char*) )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>call_extra_exec_file_hooks()  :  corefile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>deprecated_exec_file_display_hook  :  corefile.c
<item>exec_file_extra_hooks  :  corefile.c
<item>exec_file_hook_count  :  corefile.c
</itemize>
</descrip>

<sect1>Global Function validate_files()

<p><tt>void validate_files ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>warning()  :  utils.c
<item>bfd_get_mtime(), core_file_matches_executable_p()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>core_bfd  :  corefile.c
<item>exec_bfd
</itemize>
</descrip>

<sect1>Global Function write_memory()

<p><tt>void write_memory ( CORE_ADDR memaddr, const bfd_byte* myaddr, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>memory_error()  :  corefile.c
<item>target_write_memory()  :  target/target.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_assign()  :  ada-lang.c
<item>allocate_string_in_inferior()  :  valops.c
<item>ensure_lval()  :  ada-lang.c
<item>hand_function_call()  :  infcall.c
<item>put_frame_register()  :  frame.c
<item>scm_evaluate_string()  :  scm-lang.c
<item>scm_lookup_name()  :  scm-lang.c
<item>value_array()  :  valops.c
<item>value_assign()  :  valops.c
<item>write_memory_signed_integer()  :  corefile.c
<item>write_memory_unsigned_integer()  :  corefile.c
</itemize>
</descrip>

<sect1>Global Function write_memory_signed_integer()

<p><tt>void write_memory_signed_integer ( CORE_ADDR addr, int len, long value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>store_signed_integer()  :  findvar.c
<item>write_memory()  :  corefile.c
<item>__builtin_alloca()
</itemize>
</descrip>

<sect1>Global Function write_memory_unsigned_integer()

<p><tt>void write_memory_unsigned_integer ( CORE_ADDR addr, int len, unsigned long value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbcore.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>store_unsigned_integer()  :  findvar.c
<item>write_memory()  :  corefile.c
<item>__builtin_alloca()
</itemize>
</descrip>

<sect1>Local Function call_extra_exec_file_hooks()

<p><tt>static void call_extra_exec_file_hooks ( const char* filename )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>corefile.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>specify_exec_file_hook()  :  corefile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>exec_file_extra_hooks  :  corefile.c
<item>exec_file_hook_count  :  corefile.c
</itemize>
</descrip>

<sect1>Local Function do_captured_read_memory_integer()

<p><tt>static int do_captured_read_memory_integer ( void* data )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>read_memory_integer()  :  corefile.c
<item>read_memory_unsigned_integer()  :  corefile.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>safe_read_memory_integer()  :  corefile.c
<item>safe_read_memory_unsigned_integer()  :  corefile.c
</itemize>
</descrip>

<sect1>Local Function set_gnutarget_command()

<p><tt>static void set_gnutarget_command ( const char* ignore, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>corefile.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_gnutarget()  :  corefile.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_core()  :  corefile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gnutarget  :  corefile.c
<item>gnutarget_string  :  corefile.c
</itemize>
</descrip>

<sect1>Local Function show_gnutarget_string()

<p><tt>static void show_gnutarget_string ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_core()  :  corefile.c
</itemize>
</descrip>

</article>
