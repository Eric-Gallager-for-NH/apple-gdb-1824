<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF ada-exp.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for ada-exp.c of gdb.cxref.
<author>cxref

<sect>File ada-exp.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>input()  :  ada-exp.c
<item>string_to_operator()  :  ada-exp.c
<item>yy_fatal_error()  :  ada-exp.c
<item>yyunput()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;strings.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;parser-defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;ada-lang.h&quot;</tt>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;ada-lex.c&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &lt;strings.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;ctype.h&gt;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
</itemize>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define YYBISON 1</tt><newline>
<p>
<tt>#define YYBISON_VERSION &quot;3.3.2&quot;</tt><newline>
<p>
<tt>#define YYSKELETON_NAME &quot;yacc.c&quot;</tt><newline>
<p>
<tt>#define YYPURE 0</tt><newline>
<p>
<tt>#define YYPUSH 0</tt><newline>
<p>
<tt>#define YYPULL 1</tt><newline>
<p>
<tt>#define NO_POISON 1</tt><newline>
<p>
<tt>#define ADA_EXP_Y 1</tt><newline>
<p>
<tt>#define yymaxdepth ada_maxdepth</tt><newline>
<p>
<tt>#define yyparse _ada_parse</tt><newline>
<p>
<tt>#define yylex ada_lex</tt><newline>
<p>
<tt>#define yyerror ada_error</tt><newline>
<p>
<tt>#define yylval ada_lval</tt><newline>
<p>
<tt>#define yychar ada_char</tt><newline>
<p>
<tt>#define yydebug ada_debug</tt><newline>
<p>
<tt>#define yypact ada_pact</tt><newline>
<p>
<tt>#define yyr1 ada_r1</tt><newline>
<p>
<tt>#define yyr2 ada_r2</tt><newline>
<p>
<tt>#define yydef ada_def</tt><newline>
<p>
<tt>#define yychk ada_chk</tt><newline>
<p>
<tt>#define yypgo ada_pgo</tt><newline>
<p>
<tt>#define yyact ada_act</tt><newline>
<p>
<tt>#define yyexca ada_exca</tt><newline>
<p>
<tt>#define yyerrflag ada_errflag</tt><newline>
<p>
<tt>#define yynerrs ada_nerrs</tt><newline>
<p>
<tt>#define yyps ada_ps</tt><newline>
<p>
<tt>#define yypv ada_pv</tt><newline>
<p>
<tt>#define yys ada_s</tt><newline>
<p>
<tt>#define yy_yys ada_yys</tt><newline>
<p>
<tt>#define yystate ada_state</tt><newline>
<p>
<tt>#define yytmp ada_tmp</tt><newline>
<p>
<tt>#define yyv ada_v</tt><newline>
<p>
<tt>#define yy_yyv ada_yyv</tt><newline>
<p>
<tt>#define yyval ada_val</tt><newline>
<p>
<tt>#define yylloc ada_lloc</tt><newline>
<p>
<tt>#define yyreds ada_reds</tt><newline>
<p>
<tt>#define yytoks ada_toks</tt><newline>
<p>
<tt>#define yyname ada_name</tt><newline>
<p>
<tt>#define yyrule ada_rule</tt><newline>
<p>
<tt>#define yyinput input</tt><newline>
<p>
<tt>#define YYDEBUG 1</tt><newline>
<p>
<tt>#define YYFPRINTF parser_fprintf</tt><newline>
<p>
<tt>#define YY_NULLPTR</tt><newline>
<p>
<tt>#define YYERROR_VERBOSE 0</tt><newline>
<p>
<tt>#define YY_YY_Y_TAB_H_INCLUDED</tt><newline>
<p>
<tt>#define YYTOKENTYPE</tt><newline>
<p>
<tt>#define YYSTYPE_IS_TRIVIAL 1</tt><newline>
<p>
<tt>#define YYSTYPE_IS_DECLARED 1</tt><newline>
<p>
<tt>#define YYSIZE_T __SIZE_TYPE__</tt><newline>
<p>
<tt>#define YYSIZE_MAXIMUM</tt><newline>
<p>
<tt>#define YY_( Msgid )</tt><newline>
<p>
<tt>#define YY_ATTRIBUTE( Spec )</tt><newline>
<p>
<tt>#define YY_ATTRIBUTE_PURE</tt><newline>
<p>
<tt>#define YY_ATTRIBUTE_UNUSED</tt><newline>
<p>
<tt>#define YYUSE( E )</tt><newline>
<p>
<tt>#define YY_INITIAL_VALUE( Value )</tt><newline>
<p>
<tt>#define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN</tt><newline>
<p>
<tt>#define YY_IGNORE_MAYBE_UNINITIALIZED_END</tt><newline>
<p>
<tt>#define YYSTACK_ALLOC YYMALLOC</tt><newline>
<p>
<tt>#define YYSTACK_FREE YYFREE</tt><newline>
<p>
<tt>#define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM</tt><newline>
<p>
<tt>#define YYMALLOC xmalloc</tt><newline>
<p>
<tt>#define YYFREE xfree</tt><newline>
<p>
<tt>#define YYSTACK_GAP_MAXIMUM</tt><newline>
<p>
<tt>#define YYSTACK_BYTES( N )</tt><newline>
<p>
<tt>#define YYCOPY_NEEDED 1</tt><newline>
<p>
<tt>#define YYSTACK_RELOCATE( Stack_alloc, Stack )</tt><newline>
<p>
<tt>#define YYCOPY( Dst, Src, Count )</tt><newline>
<p>
<tt>#define YYFINAL 42</tt><newline>
<p>
<tt>#define YYLAST 1056</tt><newline>
<p>
<tt>#define YYNTOKENS 66</tt><newline>
<p>
<tt>#define YYNNTS 15</tt><newline>
<p>
<tt>#define YYNRULES 96</tt><newline>
<p>
<tt>#define YYNSTATES 182</tt><newline>
<p>
<tt>#define YYUNDEFTOK 2</tt><newline>
<p>
<tt>#define YYMAXUTOK 301</tt><newline>
<p>
<tt>#define YYTRANSLATE( YYX )</tt><newline>
<p>
<tt>#define YYPACT_NINF -42</tt><newline>
<p>
<tt>#define yypact_value_is_default( Yystate )</tt><newline>
<p>
<tt>#define YYTABLE_NINF -91</tt><newline>
<p>
<tt>#define yytable_value_is_error( Yytable_value )</tt><newline>
<p>
<tt>#define yyerrok</tt><newline>
<p>
<tt>#define yyclearin</tt><newline>
<p>
<tt>#define YYEMPTY -2</tt><newline>
<p>
<tt>#define YYEOF 0</tt><newline>
<p>
<tt>#define YYACCEPT</tt><newline>
<p>
<tt>#define YYABORT</tt><newline>
<p>
<tt>#define YYERROR</tt><newline>
<p>
<tt>#define YYRECOVERING</tt><newline>
<p>
<tt>#define YYBACKUP( Token, Value )</tt><newline>
<p>
<tt>#define YYTERROR 1</tt><newline>
<p>
<tt>#define YYERRCODE 256</tt><newline>
<p>
<tt>#define YYDPRINTF( Args )</tt><newline>
<p>
<tt>#define YY_LOCATION_PRINT( File, Loc )</tt><newline>
<p>
<tt>#define YY_SYMBOL_PRINT( Title, Type, Value, Location )</tt><newline>
<p>
<tt>#define YY_STACK_PRINT( Bottom, Top )</tt><newline>
<p>
<tt>#define YY_REDUCE_PRINT( Rule )</tt><newline>
<p>
<tt>#define YYINITDEPTH 200</tt><newline>
<p>
<tt>#define YYMAXDEPTH 10000</tt><newline>
<p>
<tt>#define YYPOPSTACK( N )</tt><newline>
<p>
<tt>#define yy_create_buffer ada_yy_create_buffer</tt><newline>
<p>
<tt>#define yy_delete_buffer ada_yy_delete_buffer</tt><newline>
<p>
<tt>#define yy_init_buffer ada_yy_init_buffer</tt><newline>
<p>
<tt>#define yy_load_buffer_state ada_yy_load_buffer_state</tt><newline>
<p>
<tt>#define yy_switch_to_buffer ada_yy_switch_to_buffer</tt><newline>
<p>
<tt>#define yyrestart ada_yyrestart</tt><newline>
<p>
<tt>#define yytext ada_yytext</tt><newline>
<p>
<tt>#define yywrap ada_yywrap</tt><newline>
<p>
<tt>#define qsort __qsort__dummy</tt><newline>

<sect1>Type struct name_info

<p>
<itemize>
<item><tt>struct name_info</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct symbol* sym;</tt><newline>
<item><tt>struct minimal_symbol* msym;</tt><newline>
<item><tt>struct block* block;</tt><newline>
<item><tt>struct stoken stoken;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type enum yytokentype

<p>
<itemize>
<item><tt>enum yytokentype</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>INT;</tt><newline>
<item><tt>NULL_PTR;</tt><newline>
<item><tt>CHARLIT;</tt><newline>
<item><tt>FLOAT;</tt><newline>
<item><tt>TYPENAME;</tt><newline>
<item><tt>BLOCKNAME;</tt><newline>
<item><tt>STRING;</tt><newline>
<item><tt>NAME;</tt><newline>
<item><tt>DOT_ID;</tt><newline>
<item><tt>OBJECT_RENAMING;</tt><newline>
<item><tt>DOT_ALL;</tt><newline>
<item><tt>SPECIAL_VARIABLE;</tt><newline>
<item><tt>ASSIGN;</tt><newline>
<item><tt>_AND_;</tt><newline>
<item><tt>OR;</tt><newline>
<item><tt>XOR;</tt><newline>
<item><tt>THEN;</tt><newline>
<item><tt>ELSE;</tt><newline>
<item><tt>NOTEQUAL;</tt><newline>
<item><tt>LEQ;</tt><newline>
<item><tt>GEQ;</tt><newline>
<item><tt>IN;</tt><newline>
<item><tt>DOTDOT;</tt><newline>
<item><tt>UNARY;</tt><newline>
<item><tt>MOD;</tt><newline>
<item><tt>REM;</tt><newline>
<item><tt>STARSTAR;</tt><newline>
<item><tt>ABS;</tt><newline>
<item><tt>NOT;</tt><newline>
<item><tt>TICK_ACCESS;</tt><newline>
<item><tt>TICK_ADDRESS;</tt><newline>
<item><tt>TICK_FIRST;</tt><newline>
<item><tt>TICK_LAST;</tt><newline>
<item><tt>TICK_LENGTH;</tt><newline>
<item><tt>TICK_MAX;</tt><newline>
<item><tt>TICK_MIN;</tt><newline>
<item><tt>TICK_MODULUS;</tt><newline>
<item><tt>TICK_POS;</tt><newline>
<item><tt>TICK_RANGE;</tt><newline>
<item><tt>TICK_SIZE;</tt><newline>
<item><tt>TICK_TAG;</tt><newline>
<item><tt>TICK_VAL;</tt><newline>
<item><tt>ARROW;</tt><newline>
<item><tt>NEW;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type union YYSTYPE

<p>
<itemize>
<item><tt>union YYSTYPE</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>long lval;</tt><newline>
<item><tt>struct</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>long val;</tt><newline>
<item><tt>struct type* type;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>typed_val;</tt><newline>
<item><tt>struct</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>DOUBLEST dval;</tt><newline>
<item><tt>struct type* type;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>typed_val_float;</tt><newline>
<item><tt>struct type* tval;</tt><newline>
<item><tt>struct stoken sval;</tt><newline>
<item><tt>struct name_info ssym;</tt><newline>
<item><tt>int voidval;</tt><newline>
<item><tt>struct block* bval;</tt><newline>
<item><tt>struct internalvar* ivar;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Typedef YYSTYPE

<p>
<tt>typedef union YYSTYPE YYSTYPE</tt><newline>
<descrip>
<tag>See:</tag>
<itemize>
<item>Type union YYSTYPE
</itemize>
</descrip>

<sect1>Typedef yytype_uint8

<p>
<tt>typedef unsigned char yytype_uint8</tt><newline>

<sect1>Typedef yytype_int8

<p>
<tt>typedef signed char yytype_int8</tt><newline>

<sect1>Typedef yytype_uint16

<p>
<tt>typedef unsigned short yytype_uint16</tt><newline>

<sect1>Typedef yytype_int16

<p>
<tt>typedef short yytype_int16</tt><newline>

<sect1>Type union yyalloc

<p>
<itemize>
<item><tt>union yyalloc</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>yytype_int16 yyss_alloc;</tt><newline>
<item><tt>YYSTYPE yyvs_alloc;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable ada_debug

<p>
<tt>int ada_debug</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
<item>yydestruct()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Variable ada_lval

<p>
<tt>YYSTYPE ada_lval</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
<item>ada_lex()  :  ada-exp.c
<item>block_lookup()  :  ada-exp.c
<item>name_lookup()  :  ada-exp.c
<item>processId()  :  ada-exp.c
<item>processInt()  :  ada-exp.c
<item>processReal()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Variable ada_char

<p>
<tt>int ada_char</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Variable ada_nerrs

<p>
<tt>int ada_nerrs</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Variable yyleng

<p>
<tt>int yyleng</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
<item>yyget_leng()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Variable yyin

<p>
<tt>FILE* yyin</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
<item>ada_parse()  :  ada-exp.c
<item>ada_yy_load_buffer_state()  :  ada-exp.c
<item>ada_yyrestart()  :  ada-exp.c
<item>input()  :  ada-exp.c
<item>yy_get_next_buffer()  :  ada-exp.c
<item>yy_init_globals()  :  ada-exp.c
<item>yyget_in()  :  ada-exp.c
<item>yyset_in()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Variable yyout

<p>
<tt>FILE* yyout</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
<item>yy_init_globals()  :  ada-exp.c
<item>yyget_out()  :  ada-exp.c
<item>yyset_out()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Variable yylineno

<p>
<tt>int yylineno</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>yyget_lineno()  :  ada-exp.c
<item>yyset_lineno()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Variable ada_yytext

<p>
<tt>char* ada_yytext</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
<item>ada_yy_load_buffer_state()  :  ada-exp.c
<item>input()  :  ada-exp.c
<item>yy_get_next_buffer()  :  ada-exp.c
<item>yy_get_previous_state()  :  ada-exp.c
<item>yyget_text()  :  ada-exp.c
<item>yyunput()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Variable yy_flex_debug

<p>
<tt>int yy_flex_debug</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>yyget_debug()  :  ada-exp.c
<item>yyset_debug()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Variable ada_flex_use

<p>
<tt>dummy_function ada_flex_use[]</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
</descrip>

<sect1>Global Variable dummy_string_to_ada_operator

<p>
<tt>struct stoken (*dummy_string_to_ada_operator)(struct stoken)</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>type_qualifier</bf><newline>
<tt>static struct type* type_qualifier</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_ada_parse()
<item>ada_parse()
</itemize>
</descrip>
<p>
<bf>yytranslate</bf><newline>
<tt>static const yytype_uint8 yytranslate[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_ada_parse()
</itemize>
</descrip>
<p>
<bf>yyrline</bf><newline>
<tt>static const yytype_uint16 yyrline[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>yy_reduce_print()
</itemize>
</descrip>
<p>
<bf>yytname</bf><newline>
<tt>static const char* const yytname[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>yy_symbol_print()
</itemize>
</descrip>
<p>
<bf>ada_pact</bf><newline>
<tt>static const yytype_int16 ada_pact[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_ada_parse()
</itemize>
</descrip>
<p>
<bf>yydefact</bf><newline>
<tt>static const yytype_uint8 yydefact[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_ada_parse()
</itemize>
</descrip>
<p>
<bf>yypgoto</bf><newline>
<tt>static const yytype_int8 yypgoto[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_ada_parse()
</itemize>
</descrip>
<p>
<bf>yydefgoto</bf><newline>
<tt>static const yytype_int16 yydefgoto[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_ada_parse()
</itemize>
</descrip>
<p>
<bf>yytable</bf><newline>
<tt>static const yytype_int16 yytable[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_ada_parse()
</itemize>
</descrip>
<p>
<bf>yycheck</bf><newline>
<tt>static const yytype_int16 yycheck[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_ada_parse()
</itemize>
</descrip>
<p>
<bf>yystos</bf><newline>
<tt>static const yytype_uint8 yystos[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_ada_parse()
<item>yy_reduce_print()
</itemize>
</descrip>
<p>
<bf>ada_r1</bf><newline>
<tt>static const yytype_uint8 ada_r1[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_ada_parse()
</itemize>
</descrip>
<p>
<bf>ada_r2</bf><newline>
<tt>static const yytype_uint8 ada_r2[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_ada_parse()
<item>yy_reduce_print()
</itemize>
</descrip>
<p>
<bf>temp_parse_space</bf><newline>
<tt>static struct obstack temp_parse_space</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ada_exp()
<item>ada_parse()
<item>name_lookup()
<item>processId()
<item>write_object_renaming()
<item>write_var_from_name()
</itemize>
</descrip>
<p>
<bf>yy_buffer_stack_top</bf><newline>
<tt>static size_t yy_buffer_stack_top</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>ada_yy_delete_buffer()
<item>ada_yy_init_buffer()
<item>ada_yy_load_buffer_state()
<item>ada_yy_switch_to_buffer()
<item>ada_yyrestart()
<item>input()
<item>yy_flush_buffer()
<item>yy_get_next_buffer()
<item>yy_init_globals()
<item>yyensure_buffer_stack()
<item>yylex_destroy()
<item>yypop_buffer_state()
<item>yypush_buffer_state()
<item>yyunput()
</itemize>
</descrip>
<p>
<bf>yy_buffer_stack_max</bf><newline>
<tt>static size_t yy_buffer_stack_max</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>yy_init_globals()
<item>yyensure_buffer_stack()
</itemize>
</descrip>
<p>
<bf>yy_buffer_stack</bf><newline>
<tt>static YY_BUFFER_STATE* yy_buffer_stack</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>ada_yy_delete_buffer()
<item>ada_yy_init_buffer()
<item>ada_yy_load_buffer_state()
<item>ada_yy_switch_to_buffer()
<item>ada_yyrestart()
<item>input()
<item>yy_flush_buffer()
<item>yy_get_next_buffer()
<item>yy_init_globals()
<item>yyensure_buffer_stack()
<item>yylex_destroy()
<item>yypop_buffer_state()
<item>yypush_buffer_state()
<item>yyunput()
</itemize>
</descrip>
<p>
<bf>yy_hold_char</bf><newline>
<tt>static char yy_hold_char</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>ada_yy_load_buffer_state()
<item>ada_yy_switch_to_buffer()
<item>input()
<item>yypush_buffer_state()
<item>yyunput()
</itemize>
</descrip>
<p>
<bf>yy_n_chars</bf><newline>
<tt>static int yy_n_chars</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>ada_yy_load_buffer_state()
<item>ada_yy_switch_to_buffer()
<item>input()
<item>yy_get_next_buffer()
<item>yypush_buffer_state()
<item>yyunput()
</itemize>
</descrip>
<p>
<bf>yy_c_buf_p</bf><newline>
<tt>static char* yy_c_buf_p</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>ada_yy_load_buffer_state()
<item>ada_yy_switch_to_buffer()
<item>input()
<item>yy_get_next_buffer()
<item>yy_get_previous_state()
<item>yy_init_globals()
<item>yy_try_NUL_trans()
<item>yypush_buffer_state()
<item>yyunput()
</itemize>
</descrip>
<p>
<bf>yy_init</bf><newline>
<tt>static int yy_init</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>yy_init_globals()
</itemize>
</descrip>
<p>
<bf>yy_start</bf><newline>
<tt>static int yy_start</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>lexer_init()
<item>yy_get_previous_state()
<item>yy_init_globals()
</itemize>
</descrip>
<p>
<bf>yy_did_buffer_switch_on_eof</bf><newline>
<tt>static int yy_did_buffer_switch_on_eof</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>ada_yy_switch_to_buffer()
<item>input()
<item>yypop_buffer_state()
<item>yypush_buffer_state()
</itemize>
</descrip>
<p>
<bf>yy_accept</bf><newline>
<tt>static const flex_int16_t yy_accept[343]</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>yy_get_previous_state()
<item>yy_try_NUL_trans()
</itemize>
</descrip>
<p>
<bf>yy_ec</bf><newline>
<tt>static const YY_CHAR yy_ec[256]</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>yy_get_previous_state()
</itemize>
</descrip>
<p>
<bf>yy_meta</bf><newline>
<tt>static const YY_CHAR yy_meta[66]</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>yy_get_previous_state()
<item>yy_try_NUL_trans()
</itemize>
</descrip>
<p>
<bf>yy_base</bf><newline>
<tt>static const flex_int16_t yy_base[371]</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>yy_get_previous_state()
<item>yy_try_NUL_trans()
</itemize>
</descrip>
<p>
<bf>yy_def</bf><newline>
<tt>static const flex_int16_t yy_def[371]</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>yy_get_previous_state()
<item>yy_try_NUL_trans()
</itemize>
</descrip>
<p>
<bf>yy_nxt</bf><newline>
<tt>static const flex_int16_t yy_nxt[2912]</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>yy_get_previous_state()
<item>yy_try_NUL_trans()
</itemize>
</descrip>
<p>
<bf>yy_chk</bf><newline>
<tt>static const flex_int16_t yy_chk[2912]</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>yy_get_previous_state()
<item>yy_try_NUL_trans()
</itemize>
</descrip>
<p>
<bf>yy_last_accepting_state</bf><newline>
<tt>static yy_state_type yy_last_accepting_state</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>yy_get_previous_state()
<item>yy_try_NUL_trans()
</itemize>
</descrip>
<p>
<bf>yy_last_accepting_cpos</bf><newline>
<tt>static char* yy_last_accepting_cpos</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>yy_get_previous_state()
<item>yy_try_NUL_trans()
</itemize>
</descrip>
<p>
<bf>numbuf</bf><newline>
<tt>static char numbuf[256]</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
</itemize>
</descrip>
<p>
<bf>tempbuf</bf><newline>
<tt>static char* tempbuf</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>resize_tempbuf()
</itemize>
</descrip>
<p>
<bf>tempbufsize</bf><newline>
<tt>static size_t tempbufsize</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>resize_tempbuf()
</itemize>
</descrip>
<p>
<bf>tempbuf_len</bf><newline>
<tt>static int tempbuf_len</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
</itemize>
</descrip>
<p>
<bf>left_block_context</bf><newline>
<tt>static struct block* left_block_context</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_lex()
<item>ada_parse()
<item>block_lookup()
<item>name_lookup()
</itemize>
</descrip>
<p>
<bf>attributes</bf><newline>
<tt>static struct {...} attributes[]</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>processAttribute()
</itemize>
</descrip>

<sect1>Global Function _ada_parse()

<p><tt>int _ada_parse ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_error()  :  ada-exp.c
<item>ada_lex()  :  ada-exp.c
<item>convert_char_literal()  :  ada-exp.c
<item>error()  :  utils.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>parser_fprintf()  :  parse.c
<item>type_int()  :  ada-exp.c
<item>type_system_address()  :  ada-exp.c
<item>write_dollar_variable()  :  parse.c
<item>write_exp_elt_dblcst()  :  parse.c
<item>write_exp_elt_longcst()  :  parse.c
<item>write_exp_elt_opcode()  :  parse.c
<item>write_exp_elt_type()  :  parse.c
<item>write_exp_string()  :  parse.c
<item>write_int()  :  ada-exp.c
<item>write_object_renaming()  :  ada-exp.c
<item>write_var_from_name()  :  ada-exp.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>yy_reduce_print()  :  ada-exp.c
<item>yy_stack_print()  :  ada-exp.c
<item>yy_symbol_print()  :  ada-exp.c
<item>yydestruct()  :  ada-exp.c
<item>__builtin_memcpy()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_parse()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_char  :  ada-exp.c
<item>ada_debug  :  ada-exp.c
<item>ada_lval  :  ada-exp.c
<item>ada_nerrs  :  ada-exp.c
<item>ada_pact  :  ada-exp.c
<item>ada_r1  :  ada-exp.c
<item>ada_r2  :  ada-exp.c
<item>builtin_type_void  :  gdbtypes.c
<item>type_qualifier  :  ada-exp.c
<item>yycheck  :  ada-exp.c
<item>yydefact  :  ada-exp.c
<item>yydefgoto  :  ada-exp.c
<item>yypgoto  :  ada-exp.c
<item>yystos  :  ada-exp.c
<item>yytable  :  ada-exp.c
<item>yytranslate  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function _initialize_ada_exp()

<p><tt>void _initialize_ada_exp ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>_obstack_begin()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>temp_parse_space  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function ada_error()

<p><tt>void ada_error ( const char* msg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>lexptr  :  parse.c
</itemize>
</descrip>

<sect1>Global Function ada_parse()

<p><tt>int ada_parse ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
<item>lexer_init()  :  ada-exp.c
<item>_obstack_begin()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse()  :  ada-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>obstack_free()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>left_block_context  :  ada-exp.c
<item>temp_parse_space  :  ada-exp.c
<item>type_qualifier  :  ada-exp.c
<item>yyin  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function ada_yy_create_buffer()

<p><tt>YY_BUFFER_STATE ada_yy_create_buffer ( FILE* file, int size )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_yy_fatal_error()  :  ada-exp.c
<item>ada_yy_init_buffer()  :  ada-exp.c
<item>yyalloc()  :  ada-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
<item>ada_yyrestart()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function ada_yy_delete_buffer()

<p><tt>void ada_yy_delete_buffer ( YY_BUFFER_STATE b )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>yyxfree()  :  ada-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>yylex_destroy()  :  ada-exp.c
<item>yypop_buffer_state()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yy_buffer_stack  :  ada-exp.c
<item>yy_buffer_stack_top  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function ada_yy_switch_to_buffer()

<p><tt>void ada_yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_yy_load_buffer_state()  :  ada-exp.c
<item>yyensure_buffer_stack()  :  ada-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>yy_scan_buffer()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yy_buffer_stack  :  ada-exp.c
<item>yy_buffer_stack_top  :  ada-exp.c
<item>yy_c_buf_p  :  ada-exp.c
<item>yy_did_buffer_switch_on_eof  :  ada-exp.c
<item>yy_hold_char  :  ada-exp.c
<item>yy_n_chars  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function ada_yyrestart()

<p><tt>void ada_yyrestart ( FILE* input_file )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_yy_create_buffer()  :  ada-exp.c
<item>ada_yy_init_buffer()  :  ada-exp.c
<item>ada_yy_load_buffer_state()  :  ada-exp.c
<item>yyensure_buffer_stack()  :  ada-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
<item>input()  :  ada-exp.c
<item>lexer_init()  :  ada-exp.c
<item>yy_get_next_buffer()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yy_buffer_stack  :  ada-exp.c
<item>yy_buffer_stack_top  :  ada-exp.c
<item>yyin  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function ada_yywrap()

<p><tt>int ada_yywrap ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
<item>input()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function lexer_init()

<p><tt>void lexer_init ( FILE* inp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_yy_fatal_error()  :  ada-exp.c
<item>ada_yyrestart()  :  ada-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_parse()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yy_start  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function strtoulst()

<p><tt>unsigned long strtoulst ( const char* num, const char** trailer, int base )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>digit_to_int()  :  ada-exp.c
<item>is_digit_in_base()  :  ada-exp.c
<item>__error()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>processInt()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yy_flush_buffer()

<p><tt>void yy_flush_buffer ( YY_BUFFER_STATE b )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_yy_load_buffer_state()  :  ada-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_yy_init_buffer()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yy_buffer_stack  :  ada-exp.c
<item>yy_buffer_stack_top  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yy_scan_buffer()

<p><tt>YY_BUFFER_STATE yy_scan_buffer ( char* base, yy_size_t size )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_yy_fatal_error()  :  ada-exp.c
<item>ada_yy_switch_to_buffer()  :  ada-exp.c
<item>yyalloc()  :  ada-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>yy_scan_bytes()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yy_scan_bytes()

<p><tt>YY_BUFFER_STATE yy_scan_bytes ( const char* yybytes, int _yybytes_len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_yy_fatal_error()  :  ada-exp.c
<item>yy_scan_buffer()  :  ada-exp.c
<item>yyalloc()  :  ada-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>yy_scan_string()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yy_scan_string()

<p><tt>YY_BUFFER_STATE yy_scan_string ( const char* yystr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>yy_scan_bytes()  :  ada-exp.c
<item>strlen()
</itemize>
</descrip>

<sect1>Global Function yyalloc()

<p><tt>void* yyalloc ( yy_size_t size )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_yy_create_buffer()  :  ada-exp.c
<item>yy_scan_buffer()  :  ada-exp.c
<item>yy_scan_bytes()  :  ada-exp.c
<item>yyensure_buffer_stack()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yyget_debug()

<p><tt>int yyget_debug ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yy_flex_debug  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yyget_in()

<p><tt>FILE* yyget_in ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yyin  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yyget_leng()

<p><tt>int yyget_leng ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yyleng  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yyget_lineno()

<p><tt>int yyget_lineno ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yylineno  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yyget_out()

<p><tt>FILE* yyget_out ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yyout  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yyget_text()

<p><tt>char* yyget_text ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_yytext  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yylex_destroy()

<p><tt>int yylex_destroy ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_yy_delete_buffer()  :  ada-exp.c
<item>yy_init_globals()  :  ada-exp.c
<item>yypop_buffer_state()  :  ada-exp.c
<item>yyxfree()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yy_buffer_stack  :  ada-exp.c
<item>yy_buffer_stack_top  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yypop_buffer_state()

<p><tt>void yypop_buffer_state ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_yy_delete_buffer()  :  ada-exp.c
<item>ada_yy_load_buffer_state()  :  ada-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>yylex_destroy()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yy_buffer_stack  :  ada-exp.c
<item>yy_buffer_stack_top  :  ada-exp.c
<item>yy_did_buffer_switch_on_eof  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yypush_buffer_state()

<p><tt>void yypush_buffer_state ( YY_BUFFER_STATE new_buffer )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_yy_load_buffer_state()  :  ada-exp.c
<item>yyensure_buffer_stack()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yy_buffer_stack  :  ada-exp.c
<item>yy_buffer_stack_top  :  ada-exp.c
<item>yy_c_buf_p  :  ada-exp.c
<item>yy_did_buffer_switch_on_eof  :  ada-exp.c
<item>yy_hold_char  :  ada-exp.c
<item>yy_n_chars  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yyset_debug()

<p><tt>void yyset_debug ( int _bdebug )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yy_flex_debug  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yyset_in()

<p><tt>void yyset_in ( FILE* _in_str )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yyin  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yyset_lineno()

<p><tt>void yyset_lineno ( int _line_number )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yylineno  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yyset_out()

<p><tt>void yyset_out ( FILE* _out_str )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yyout  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yyxfree()

<p><tt>void yyxfree ( void* ptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_yy_delete_buffer()  :  ada-exp.c
<item>yylex_destroy()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Global Function yyxrealloc()

<p><tt>void* yyxrealloc ( void* ptr, yy_size_t size )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>yy_get_next_buffer()  :  ada-exp.c
<item>yyensure_buffer_stack()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function ada_lex()

<p><tt>static int ada_lex ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_encode()  :  ada-lang.c
<item>ada_yy_create_buffer()  :  ada-exp.c
<item>ada_yy_fatal_error()  :  ada-exp.c
<item>ada_yy_load_buffer_state()  :  ada-exp.c
<item>ada_yyrestart()  :  ada-exp.c
<item>ada_yywrap()  :  ada-exp.c
<item>block_lookup()  :  ada-exp.c
<item>canonicalizeNumeral()  :  ada-exp.c
<item>error()  :  utils.c
<item>find_dot_all()  :  ada-exp.c
<item>name_lookup()  :  ada-exp.c
<item>processAttribute()  :  ada-exp.c
<item>processId()  :  ada-exp.c
<item>processInt()  :  ada-exp.c
<item>processReal()  :  ada-exp.c
<item>resize_tempbuf()  :  ada-exp.c
<item>type_char()  :  ada-exp.c
<item>yy_get_next_buffer()  :  ada-exp.c
<item>yy_get_previous_state()  :  ada-exp.c
<item>yy_try_NUL_trans()  :  ada-exp.c
<item>yyensure_buffer_stack()  :  ada-exp.c
<item>__builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), sscanf(), strchr(), strrchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_lval  :  ada-exp.c
<item>ada_yytext  :  ada-exp.c
<item>comma_terminates  :  parse.c
<item>left_block_context  :  ada-exp.c
<item>lexptr  :  parse.c
<item>numbuf  :  ada-exp.c
<item>paren_depth  :  parse.c
<item>tempbuf  :  ada-exp.c
<item>tempbuf_len  :  ada-exp.c
<item>yy_accept  :  ada-exp.c
<item>yy_base  :  ada-exp.c
<item>yy_buffer_stack  :  ada-exp.c
<item>yy_buffer_stack_top  :  ada-exp.c
<item>yy_c_buf_p  :  ada-exp.c
<item>yy_chk  :  ada-exp.c
<item>yy_def  :  ada-exp.c
<item>yy_did_buffer_switch_on_eof  :  ada-exp.c
<item>yy_ec  :  ada-exp.c
<item>yy_hold_char  :  ada-exp.c
<item>yy_init  :  ada-exp.c
<item>yy_last_accepting_cpos  :  ada-exp.c
<item>yy_last_accepting_state  :  ada-exp.c
<item>yy_meta  :  ada-exp.c
<item>yy_n_chars  :  ada-exp.c
<item>yy_nxt  :  ada-exp.c
<item>yy_start  :  ada-exp.c
<item>yyin  :  ada-exp.c
<item>yyleng  :  ada-exp.c
<item>yyout  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function ada_yy_fatal_error()

<p><tt>static void ada_yy_fatal_error ( const char* errormsg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>exit(), fprintf()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
<item>ada_yy_create_buffer()  :  ada-exp.c
<item>lexer_init()  :  ada-exp.c
<item>yy_get_next_buffer()  :  ada-exp.c
<item>yy_scan_buffer()  :  ada-exp.c
<item>yy_scan_bytes()  :  ada-exp.c
<item>yyensure_buffer_stack()  :  ada-exp.c
<item>yyunput()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function ada_yy_init_buffer()

<p><tt>static void ada_yy_init_buffer ( YY_BUFFER_STATE b, FILE* file )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>yy_flush_buffer()  :  ada-exp.c
<item>__error(), fileno(), isatty()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_yy_create_buffer()  :  ada-exp.c
<item>ada_yyrestart()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yy_buffer_stack  :  ada-exp.c
<item>yy_buffer_stack_top  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function ada_yy_load_buffer_state()

<p><tt>static void ada_yy_load_buffer_state ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
<item>ada_yy_switch_to_buffer()  :  ada-exp.c
<item>ada_yyrestart()  :  ada-exp.c
<item>yy_flush_buffer()  :  ada-exp.c
<item>yypop_buffer_state()  :  ada-exp.c
<item>yypush_buffer_state()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_yytext  :  ada-exp.c
<item>yy_buffer_stack  :  ada-exp.c
<item>yy_buffer_stack_top  :  ada-exp.c
<item>yy_c_buf_p  :  ada-exp.c
<item>yy_hold_char  :  ada-exp.c
<item>yy_n_chars  :  ada-exp.c
<item>yyin  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function block_lookup()

<p><tt>static void block_lookup ( char* name, char* err_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_lookup_symbol_list()  :  ada-lang.c
<item>error()  :  utils.c
<item>lookup_symtab()  :  symtab.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_lval  :  ada-exp.c
<item>left_block_context  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function canonicalizeNumeral()

<p><tt>static void canonicalizeNumeral ( char* s1, const char* s2 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>tolower()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function convert_char_literal()

<p><tt>static long convert_char_literal ( struct type* type, long val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>__builtin___snprintf_chk(), __builtin_object_size(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function digit_to_int()

<p><tt>static int digit_to_int ( unsigned char c )</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>isdigit(), tolower()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>strtoulst()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function find_dot_all()

<p><tt>static int find_dot_all ( const char* str )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>isalnum(), isspace(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function input()

<p><tt>static int input ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_yyrestart()  :  ada-exp.c
<item>ada_yywrap()  :  ada-exp.c
<item>input()  :  ada-exp.c
<item>yy_get_next_buffer()  :  ada-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>input()  :  ada-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_yytext  :  ada-exp.c
<item>yy_buffer_stack  :  ada-exp.c
<item>yy_buffer_stack_top  :  ada-exp.c
<item>yy_c_buf_p  :  ada-exp.c
<item>yy_did_buffer_switch_on_eof  :  ada-exp.c
<item>yy_hold_char  :  ada-exp.c
<item>yy_n_chars  :  ada-exp.c
<item>yyin  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function is_digit_in_base()

<p><tt>static int is_digit_in_base ( unsigned char digit, int base )</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>isdigit(), isxdigit(), tolower()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>strtoulst()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function name_lookup()

<p><tt>static int name_lookup ( char* name0, char* err_name, int* token_type, int depth )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_decode()  :  ada-lang.c
<item>ada_find_renaming_symbol()  :  ada-lang.c
<item>ada_is_object_renaming()  :  ada-lang.c
<item>ada_lookup_simple_minsym()  :  ada-lang.c
<item>ada_lookup_symbol()  :  ada-lang.c
<item>ada_lookup_symbol_list()  :  ada-lang.c
<item>ada_prefer_type()  :  ada-lang.c
<item>ada_renaming_type()  :  ada-lang.c
<item>ada_simple_renamed_entity()  :  ada-lang.c
<item>error()  :  utils.c
<item>have_full_symbols()  :  objfiles.c
<item>have_partial_symbols()  :  objfiles.c
<item>language_lookup_primitive_type_by_name()  :  language.c
<item>name_lookup()  :  ada-exp.c
<item>obsavestring()  :  symfile.c
<item>type_system_address()  :  ada-exp.c
<item>xfree()  :  utils.c
<item>__builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), _obstack_newchunk(), strcmp(), strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
<item>name_lookup()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_lval  :  ada-exp.c
<item>current_gdbarch  :  gdbarch.c
<item>current_language  :  language.c
<item>expression_context_block  :  parse.c
<item>left_block_context  :  ada-exp.c
<item>temp_parse_space  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function processAttribute()

<p><tt>static int processAttribute ( const char* str )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>subseqMatch()  :  ada-exp.c
<item>strcasecmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>attributes  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function processId()

<p><tt>static int processId ( const char* name0, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>_obstack_newchunk(), isalnum(), isspace(), tolower()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_lval  :  ada-exp.c
<item>temp_parse_space  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function processInt()

<p><tt>static int processInt ( const char* base0, const char* num0, const char* exp0 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>gdbarch_int_bit()  :  gdbarch.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>strtoulst()  :  ada-exp.c
<item>type_int()  :  ada-exp.c
<item>type_long()  :  ada-exp.c
<item>type_long_long()  :  ada-exp.c
<item>__error(), isxdigit(), strtol()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_lval  :  ada-exp.c
<item>builtin_type_unsigned_long  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function processReal()

<p><tt>static int processReal ( const char* num0 )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_double_bit()  :  gdbarch.c
<item>gdbarch_long_double_bit()  :  gdbarch.c
<item>type_double()  :  ada-exp.c
<item>type_float()  :  ada-exp.c
<item>type_long_double()  :  ada-exp.c
<item>sscanf()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_lval  :  ada-exp.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function resize_tempbuf()

<p><tt>static void resize_tempbuf ( unsigned int n )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>tempbuf  :  ada-exp.c
<item>tempbufsize  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function string_to_operator()

<p><tt>static struct stoken string_to_operator ( struct stoken string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>__builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), strlen(), strncasecmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_opname_table  :  ada-lang.c
</itemize>
</descrip>

<sect1>Local Function subseqMatch()

<p><tt>static int subseqMatch ( const char* subseq, const char* str )</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>subseqMatch()  :  ada-exp.c
<item>tolower()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>processAttribute()  :  ada-exp.c
<item>subseqMatch()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function type_char()

<p><tt>static struct type* type_char ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>language_string_char_type()  :  language.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Local Function type_double()

<p><tt>static struct type* type_double ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_builtin_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>processReal()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function type_float()

<p><tt>static struct type* type_float ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_builtin_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>processReal()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function type_int()

<p><tt>static struct type* type_int ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_builtin_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
<item>processInt()  :  ada-exp.c
<item>write_object_renaming()  :  ada-exp.c
<item>write_var_from_name()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function type_long()

<p><tt>static struct type* type_long ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_builtin_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>processInt()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function type_long_double()

<p><tt>static struct type* type_long_double ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_builtin_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>processReal()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function type_long_long()

<p><tt>static struct type* type_long_long ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_builtin_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>processInt()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function type_system_address()

<p><tt>static struct type* type_system_address ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>language_lookup_primitive_type_by_name()  :  language.c
<item>lookup_pointer_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
<item>name_lookup()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Local Function write_int()

<p><tt>static void write_int ( long arg, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>write_exp_elt_longcst()  :  parse.c
<item>write_exp_elt_opcode()  :  parse.c
<item>write_exp_elt_type()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function write_object_renaming()

<p><tt>static void write_object_renaming ( struct block* orig_left_context, struct symbol* renaming, int max_depth )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_decode()  :  ada-lang.c
<item>ada_is_object_renaming()  :  ada-lang.c
<item>error()  :  utils.c
<item>get_selected_block()  :  stack.c
<item>lookup_symbol()  :  symtab.c
<item>type_int()  :  ada-exp.c
<item>write_exp_elt_longcst()  :  parse.c
<item>write_exp_elt_opcode()  :  parse.c
<item>write_exp_elt_type()  :  parse.c
<item>write_exp_string()  :  parse.c
<item>write_object_renaming()  :  ada-exp.c
<item>write_var_from_sym()  :  ada-exp.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin___strncat_chk(), __builtin___strncpy_chk(), __builtin_object_size(), __inline_memset_chk(), __inline_strncat_chk(), __inline_strncpy_chk(), _obstack_newchunk(), isdigit(), strchr(), strlen(), strncmp(), strstr(), strtol()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
<item>write_object_renaming()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>block_found  :  symtab.c
<item>temp_parse_space  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function write_var_from_name()

<p><tt>static void write_var_from_name ( struct block* orig_left_context, struct name_info name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_encode()  :  ada-lang.c
<item>lookup_function_type()  :  gdbtypes.c
<item>obsavestring()  :  symfile.c
<item>type_int()  :  ada-exp.c
<item>write_exp_elt_block()  :  parse.c
<item>write_exp_elt_opcode()  :  parse.c
<item>write_exp_elt_sym()  :  parse.c
<item>write_exp_msymbol()  :  parse.c
<item>write_var_from_sym()  :  ada-exp.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>temp_parse_space  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function write_var_from_sym()

<p><tt>static void write_var_from_sym ( struct block* orig_left_context, struct block* block, struct symbol* sym )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>contained_in()  :  block.c
<item>symbol_read_needs_frame()  :  findvar.c
<item>write_exp_elt_block()  :  parse.c
<item>write_exp_elt_opcode()  :  parse.c
<item>write_exp_elt_sym()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>write_object_renaming()  :  ada-exp.c
<item>write_var_from_name()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>innermost_block  :  parse.c
</itemize>
</descrip>

<sect1>Local Function yy_fatal_error()

<p><tt>static void yy_fatal_error ( const char* msg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>exit(), fprintf()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
</descrip>

<sect1>Local Function yy_get_next_buffer()

<p><tt>static int yy_get_next_buffer ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_yy_fatal_error()  :  ada-exp.c
<item>ada_yyrestart()  :  ada-exp.c
<item>yyxrealloc()  :  ada-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
<item>input()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_yytext  :  ada-exp.c
<item>lexptr  :  parse.c
<item>yy_buffer_stack  :  ada-exp.c
<item>yy_buffer_stack_top  :  ada-exp.c
<item>yy_c_buf_p  :  ada-exp.c
<item>yy_n_chars  :  ada-exp.c
<item>yyin  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function yy_get_previous_state()

<p><tt>static yy_state_type yy_get_previous_state ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_yytext  :  ada-exp.c
<item>yy_accept  :  ada-exp.c
<item>yy_base  :  ada-exp.c
<item>yy_c_buf_p  :  ada-exp.c
<item>yy_chk  :  ada-exp.c
<item>yy_def  :  ada-exp.c
<item>yy_ec  :  ada-exp.c
<item>yy_last_accepting_cpos  :  ada-exp.c
<item>yy_last_accepting_state  :  ada-exp.c
<item>yy_meta  :  ada-exp.c
<item>yy_nxt  :  ada-exp.c
<item>yy_start  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function yy_init_globals()

<p><tt>static int yy_init_globals ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>yylex_destroy()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yy_buffer_stack  :  ada-exp.c
<item>yy_buffer_stack_max  :  ada-exp.c
<item>yy_buffer_stack_top  :  ada-exp.c
<item>yy_c_buf_p  :  ada-exp.c
<item>yy_init  :  ada-exp.c
<item>yy_start  :  ada-exp.c
<item>yyin  :  ada-exp.c
<item>yyout  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function yy_reduce_print()

<p><tt>static void yy_reduce_print ( yytype_int16* yyssp, YYSTYPE* yyvsp, int ada_rule )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>parser_fprintf()  :  parse.c
<item>yy_symbol_print()  :  ada-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_r2  :  ada-exp.c
<item>yyrline  :  ada-exp.c
<item>yystos  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function yy_stack_print()

<p><tt>static void yy_stack_print ( yytype_int16* yybottom, yytype_int16* yytop )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>parser_fprintf()  :  parse.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function yy_symbol_print()

<p><tt>static void yy_symbol_print ( FILE* yyo, int yytype, YYSTYPE const* const yyvaluep )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>parser_fprintf()  :  parse.c
<item>yy_symbol_value_print()  :  ada-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
<item>yy_reduce_print()  :  ada-exp.c
<item>yydestruct()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yytname  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function yy_symbol_value_print()

<p><tt>static void yy_symbol_value_print ( FILE* yyo, int yytype, YYSTYPE const* const yyvaluep )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>yy_symbol_print()  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function yy_try_NUL_trans()

<p><tt>static yy_state_type yy_try_NUL_trans ( yy_state_type yy_current_state )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yy_accept  :  ada-exp.c
<item>yy_base  :  ada-exp.c
<item>yy_c_buf_p  :  ada-exp.c
<item>yy_chk  :  ada-exp.c
<item>yy_def  :  ada-exp.c
<item>yy_last_accepting_cpos  :  ada-exp.c
<item>yy_last_accepting_state  :  ada-exp.c
<item>yy_meta  :  ada-exp.c
<item>yy_nxt  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function yydestruct()

<p><tt>static void yydestruct ( const char* yymsg, int yytype, YYSTYPE* yyvaluep )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>parser_fprintf()  :  parse.c
<item>yy_symbol_print()  :  ada-exp.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_ada_parse()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_debug  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function yyensure_buffer_stack()

<p><tt>static void yyensure_buffer_stack ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_yy_fatal_error()  :  ada-exp.c
<item>yyalloc()  :  ada-exp.c
<item>yyxrealloc()  :  ada-exp.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_lex()  :  ada-exp.c
<item>ada_yy_switch_to_buffer()  :  ada-exp.c
<item>ada_yyrestart()  :  ada-exp.c
<item>yypush_buffer_state()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yy_buffer_stack  :  ada-exp.c
<item>yy_buffer_stack_max  :  ada-exp.c
<item>yy_buffer_stack_top  :  ada-exp.c
</itemize>
</descrip>

<sect1>Local Function yyunput()

<p><tt>static void yyunput ( int c, char* yy_bp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Included from:</tag>
<itemize>
<item>ada-lex.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ada_yy_fatal_error()  :  ada-exp.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ada_yytext  :  ada-exp.c
<item>yy_buffer_stack  :  ada-exp.c
<item>yy_buffer_stack_top  :  ada-exp.c
<item>yy_c_buf_p  :  ada-exp.c
<item>yy_hold_char  :  ada-exp.c
<item>yy_n_chars  :  ada-exp.c
</itemize>
</descrip>

</article>
