<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF mdebugread.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for mdebugread.c of gdb.cxref.
<author>cxref

<sect>File mdebugread.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;buildsym.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;stabsread.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;complaints.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;dictionary.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;mdebugread.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/coff/sym.h&quot;</tt>
<item><tt>#include &quot;../include/coff/symconst.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_stat.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;sys/stat.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/coff/ecoff.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/libaout.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/bfdlink.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/aout/aout64.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/aout/stab_gnu.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/aout/stab.def&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define ECOFF_IN_ELF( bfd )</tt><newline>
<p>
<tt>#define PST_PRIVATE( p )</tt><newline>
<p>
<tt>#define FDR_IDX( p )</tt><newline>
<p>
<tt>#define CUR_BFD( p )</tt><newline>
<p>
<tt>#define DEBUG_SWAP( p )</tt><newline>
<p>
<tt>#define DEBUG_INFO( p )</tt><newline>
<p>
<tt>#define PENDING_LIST( p )</tt><newline>
<p>
<tt>#define SC_IS_TEXT( sc )</tt><newline>
<p>
<tt>#define SC_IS_DATA( sc )</tt><newline>
<p>
<tt>#define SC_IS_COMMON( sc )</tt><newline>
<p>
<tt>#define SC_IS_BSS( sc )</tt><newline>
<p>
<tt>#define SC_IS_SBSS( sc )</tt><newline>
<p>
<tt>#define SC_IS_UNDEF( sc )</tt><newline>
<p>
<tt>#define MIN_GLEVEL GLEVEL_0</tt><newline>
<p>
<tt>#define compare_glevel( a, b )</tt><newline>
<p>
<tt>#define mdebug_type_int mdebug_type_int_32</tt><newline>
<p>
<tt>#define PARSE_TQ( tq )</tt><newline>

<sect1>Type struct symloc

<p>
<itemize>
<item><tt>struct symloc</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int fdr_idx;</tt><newline>
<item><tt>bfd* cur_bfd;</tt><newline>
<item><tt>const struct ecoff_debug_swap* debug_swap;</tt><newline>
<item><tt>struct ecoff_debug_info* debug_info;</tt><newline>
<item><tt>struct mdebug_pending** pending_list;</tt><newline>
<item><tt>EXTR* extern_tab;</tt><newline>
<item><tt>int extern_count;</tt><newline>
<item><tt>enum language pst_language;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type enum block_type

<p>
<itemize>
<item><tt>enum block_type</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>FUNCTION_BLOCK;</tt><newline>
<item><tt>NON_FUNCTION_BLOCK;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct pst_map

<p>
<itemize>
<item><tt>struct pst_map</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct partial_symtab* pst;</tt><newline>
<item><tt>long n_globals;</tt><newline>
<item><tt>long globals_offset;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct parse_stack

<p>
<itemize>
<item><tt>struct parse_stack</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct parse_stack* next;</tt><newline>
<item><tt>struct parse_stack* prev;</tt><newline>
<item><tt>struct symtab* cur_st;</tt><newline>
<item><tt>struct block* cur_block;</tt><newline>
<item><tt>int blocktype;</tt><newline>
<item><tt>struct type* cur_type;</tt><newline>
<item><tt>int cur_field;</tt><newline>
<item><tt>CORE_ADDR procadr;</tt><newline>
<item><tt>int numargs;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct mdebug_pending

<p>
<itemize>
<item><tt>struct mdebug_pending</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct mdebug_pending* next;</tt><newline>
<item><tt>char* s;</tt><newline>
<item><tt>struct type* t;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Local Variables

<p>
<bf>psymtab_language</bf><newline>
<tt>static enum language psymtab_language</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>handle_psymbol_enumerators()
<item>new_symbol()
<item>parse_partial_symbols()
<item>psymtab_to_symtab_1()
</itemize>
</descrip>
<p>
<bf>cur_bfd</bf><newline>
<tt>static bfd* cur_bfd</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cross_ref()
<item>get_rfd()
<item>handle_psymbol_enumerators()
<item>mdebug_build_psymtabs()
<item>mdebug_next_symbol_text()
<item>new_psymtab()
<item>parse_partial_symbols()
<item>parse_procedure()
<item>parse_symbol()
<item>psymtab_to_symtab_1()
<item>record_minimal_symbol()
</itemize>
</descrip>
<p>
<bf>debug_swap</bf><newline>
<tt>static const struct ecoff_debug_swap* debug_swap</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cross_ref()
<item>get_rfd()
<item>handle_psymbol_enumerators()
<item>has_opaque_xref()
<item>mdebug_build_psymtabs()
<item>mdebug_next_symbol_text()
<item>new_psymtab()
<item>parse_partial_symbols()
<item>parse_procedure()
<item>parse_symbol()
<item>parse_type()
<item>psymtab_to_symtab_1()
<item>upgrade_type()
</itemize>
</descrip>
<p>
<bf>debug_info</bf><newline>
<tt>static struct ecoff_debug_info* debug_info</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_pending()
<item>cross_ref()
<item>fdr_name()
<item>get_rfd()
<item>handle_psymbol_enumerators()
<item>has_opaque_xref()
<item>is_pending_symbol()
<item>mdebug_build_psymtabs()
<item>mdebug_next_symbol_text()
<item>new_psymtab()
<item>parse_external()
<item>parse_lines()
<item>parse_partial_symbols()
<item>parse_procedure()
<item>parse_symbol()
<item>parse_type()
<item>psymtab_to_symtab_1()
<item>upgrade_type()
</itemize>
</descrip>
<p>
<bf>cur_fdr</bf><newline>
<tt>static FDR* cur_fdr</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>handle_psymbol_enumerators()
<item>mdebug_next_symbol_text()
<item>parse_external()
<item>parse_partial_symbols()
<item>parse_procedure()
<item>parse_symbol()
<item>psymtab_to_symtab_1()
</itemize>
</descrip>
<p>
<bf>cur_fd</bf><newline>
<tt>static int cur_fd</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>parse_external()
<item>parse_symbol()
<item>psymtab_to_symtab_1()
</itemize>
</descrip>
<p>
<bf>cur_sdx</bf><newline>
<tt>static int cur_sdx</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>handle_psymbol_enumerators()
<item>mdebug_next_symbol_text()
<item>parse_partial_symbols()
<item>psymtab_to_symtab_1()
</itemize>
</descrip>
<p>
<bf>max_gdbinfo</bf><newline>
<tt>static int max_gdbinfo</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>mdebug_build_psymtabs()
<item>parse_partial_symbols()
<item>parse_symbol()
</itemize>
</descrip>
<p>
<bf>max_glevel</bf><newline>
<tt>static int max_glevel</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>mdebug_build_psymtabs()
<item>parse_partial_symbols()
</itemize>
</descrip>
<p>
<bf>n_undef_symbols</bf><newline>
<tt>static int n_undef_symbols</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>parse_external()
<item>psymtab_to_symtab_1()
</itemize>
</descrip>
<p>
<bf>n_undef_labels</bf><newline>
<tt>static int n_undef_labels</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>parse_external()
<item>psymtab_to_symtab_1()
</itemize>
</descrip>
<p>
<bf>n_undef_vars</bf><newline>
<tt>static int n_undef_vars</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>parse_external()
<item>psymtab_to_symtab_1()
</itemize>
</descrip>
<p>
<bf>n_undef_procs</bf><newline>
<tt>static int n_undef_procs</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>parse_external()
<item>psymtab_to_symtab_1()
</itemize>
</descrip>
<p>
<bf>stabs_symbol</bf><newline>
<tt>static char stabs_symbol[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>parse_partial_symbols()
<item>psymtab_to_symtab_1()
</itemize>
</descrip>
<p>
<bf>mdebug_type_void</bf><newline>
<tt>static struct type* mdebug_type_void</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_symbol()
<item>parse_type()
<item>psymtab_to_symtab_1()
</itemize>
</descrip>
<p>
<bf>mdebug_type_char</bf><newline>
<tt>static struct type* mdebug_type_char</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_short</bf><newline>
<tt>static struct type* mdebug_type_short</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_int_32</bf><newline>
<tt>static struct type* mdebug_type_int_32</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_symbol()
<item>parse_type()
<item>upgrade_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_int_64</bf><newline>
<tt>static struct type* mdebug_type_int_64</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_long_32</bf><newline>
<tt>static struct type* mdebug_type_long_32</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_long_64</bf><newline>
<tt>static struct type* mdebug_type_long_64</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_long_long_64</bf><newline>
<tt>static struct type* mdebug_type_long_long_64</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_unsigned_char</bf><newline>
<tt>static struct type* mdebug_type_unsigned_char</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_unsigned_short</bf><newline>
<tt>static struct type* mdebug_type_unsigned_short</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_unsigned_int_32</bf><newline>
<tt>static struct type* mdebug_type_unsigned_int_32</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_unsigned_int_64</bf><newline>
<tt>static struct type* mdebug_type_unsigned_int_64</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_unsigned_long_32</bf><newline>
<tt>static struct type* mdebug_type_unsigned_long_32</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_unsigned_long_64</bf><newline>
<tt>static struct type* mdebug_type_unsigned_long_64</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_unsigned_long_long_64</bf><newline>
<tt>static struct type* mdebug_type_unsigned_long_long_64</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_adr_32</bf><newline>
<tt>static struct type* mdebug_type_adr_32</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_adr_64</bf><newline>
<tt>static struct type* mdebug_type_adr_64</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_float</bf><newline>
<tt>static struct type* mdebug_type_float</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_double</bf><newline>
<tt>static struct type* mdebug_type_double</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_complex</bf><newline>
<tt>static struct type* mdebug_type_complex</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_double_complex</bf><newline>
<tt>static struct type* mdebug_type_double_complex</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_fixed_dec</bf><newline>
<tt>static struct type* mdebug_type_fixed_dec</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_float_dec</bf><newline>
<tt>static struct type* mdebug_type_float_dec</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>mdebug_type_string</bf><newline>
<tt>static struct type* mdebug_type_string</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_type()
</itemize>
</descrip>
<p>
<bf>nodebug_func_symbol_type</bf><newline>
<tt>static struct type* nodebug_func_symbol_type</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_procedure()
</itemize>
</descrip>
<p>
<bf>nodebug_var_symbol_type</bf><newline>
<tt>static struct type* nodebug_var_symbol_type</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mdebugread()
<item>parse_symbol()
</itemize>
</descrip>
<p>
<bf>found_ecoff_debugging_info</bf><newline>
<tt>static int found_ecoff_debugging_info</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>parse_procedure()
<item>parse_symbol()
<item>psymtab_to_symtab_1()
</itemize>
</descrip>
<p>
<bf>top_stack</bf><newline>
<tt>static struct parse_stack* top_stack</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>parse_procedure()
<item>parse_symbol()
<item>pop_parse_stack()
<item>psymtab_to_symtab_1()
<item>push_parse_stack()
</itemize>
</descrip>
<p>
<bf>pending_list</bf><newline>
<tt>static struct mdebug_pending** pending_list</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_pending()
<item>is_pending_symbol()
<item>new_psymtab()
<item>parse_partial_symbols()
<item>psymtab_to_symtab_1()
</itemize>
</descrip>

<sect1>Global Function _initialize_mdebugread()

<p><tt>void _initialize_mdebugread ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_double_bit()  :  gdbarch.c
<item>gdbarch_float_bit()  :  gdbarch.c
<item>gdbarch_int_bit()  :  gdbarch.c
<item>init_type()  :  gdbtypes.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>mdebug_type_adr_32  :  mdebugread.c
<item>mdebug_type_adr_64  :  mdebugread.c
<item>mdebug_type_char  :  mdebugread.c
<item>mdebug_type_complex  :  mdebugread.c
<item>mdebug_type_double  :  mdebugread.c
<item>mdebug_type_double_complex  :  mdebugread.c
<item>mdebug_type_fixed_dec  :  mdebugread.c
<item>mdebug_type_float  :  mdebugread.c
<item>mdebug_type_float_dec  :  mdebugread.c
<item>mdebug_type_int_32  :  mdebugread.c
<item>mdebug_type_int_64  :  mdebugread.c
<item>mdebug_type_long_32  :  mdebugread.c
<item>mdebug_type_long_64  :  mdebugread.c
<item>mdebug_type_long_long_64  :  mdebugread.c
<item>mdebug_type_short  :  mdebugread.c
<item>mdebug_type_string  :  mdebugread.c
<item>mdebug_type_unsigned_char  :  mdebugread.c
<item>mdebug_type_unsigned_int_32  :  mdebugread.c
<item>mdebug_type_unsigned_int_64  :  mdebugread.c
<item>mdebug_type_unsigned_long_32  :  mdebugread.c
<item>mdebug_type_unsigned_long_64  :  mdebugread.c
<item>mdebug_type_unsigned_long_long_64  :  mdebugread.c
<item>mdebug_type_unsigned_short  :  mdebugread.c
<item>mdebug_type_void  :  mdebugread.c
<item>nodebug_func_symbol_type  :  mdebugread.c
<item>nodebug_var_symbol_type  :  mdebugread.c
</itemize>
</descrip>

<sect1>Global Function elfmdebug_build_psymtabs()

<p><tt>void elfmdebug_build_psymtabs ( struct objfile* objfile, const struct ecoff_debug_swap* swap, asection* sec )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>init_minimal_symbol_collection()  :  minsyms.c
<item>install_minimal_symbols()  :  minsyms.c
<item>make_cleanup_discard_minimal_symbols()  :  minsyms.c
<item>mdebug_build_psymtabs()  :  mdebugread.c
<item>_obstack_newchunk(), bfd_errmsg(), bfd_get_error()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>elf_symfile_read()  :  elfread.c
</itemize>
</descrip>

<sect1>Global Function mdebug_build_psymtabs()

<p><tt>void mdebug_build_psymtabs ( struct objfile* objfile, const struct ecoff_debug_swap* swap, struct ecoff_debug_info* info )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>buildsym_new_init()  :  buildsym.c
<item>free_header_files()  :  dbxread.c
<item>gdb_flush()  :  ui-file.c
<item>init_header_files()  :  dbxread.c
<item>parse_partial_symbols()  :  mdebugread.c
<item>printf_unfiltered()  :  utils.c
<item>stabsread_new_init()  :  stabsread.c
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>elfmdebug_build_psymtabs()  :  mdebugread.c
<item>mipscoff_symfile_read()  :  mipsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cur_bfd  :  mdebugread.c
<item>debug_info  :  mdebugread.c
<item>debug_swap  :  mdebugread.c
<item>gdb_stdout  :  main.c
<item>max_gdbinfo  :  mdebugread.c
<item>max_glevel  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function add_block()

<p><tt>static void add_block ( struct block* b, struct symtab* s )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_symbol()  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function add_line()

<p><tt>static int add_line ( struct linetable* lt, int lineno, CORE_ADDR adr, int last )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_lines()  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function add_pending()

<p><tt>static void add_pending ( FDR* fh, char* sh, struct type* t )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>is_pending_symbol()  :  mdebugread.c
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cross_ref()  :  mdebugread.c
<item>parse_symbol()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_objfile  :  objfiles.c
<item>debug_info  :  mdebugread.c
<item>pending_list  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function add_symbol()

<p><tt>static void add_symbol ( struct symbol* s, struct block* b )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dict_add_symbol()  :  dictionary.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_symbol()  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function bad_rfd_entry_complaint()

<p><tt>static void bad_rfd_entry_complaint ( const char* arg1, int arg2, int arg3 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cross_ref()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function bad_tag_guess_complaint()

<p><tt>static void bad_tag_guess_complaint ( const char* arg1 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_type()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function basic_type_complaint()

<p><tt>static void basic_type_complaint ( int arg1, const char* arg2 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_type()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function compare_blocks()

<p><tt>static int compare_blocks ( const void* arg1, const void* arg2 )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>sort_blocks()  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function cross_ref()

<p><tt>static int cross_ref ( int fd, union aux_ext* ax, struct type** tpp, enum type_code type_code, const char** pname, int bigend, const char* sym_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_pending()  :  mdebugread.c
<item>bad_rfd_entry_complaint()  :  mdebugread.c
<item>complaint()  :  complaints.c
<item>cross_ref()  :  mdebugread.c
<item>get_rfd()  :  mdebugread.c
<item>init_type()  :  gdbtypes.c
<item>is_pending_symbol()  :  mdebugread.c
<item>parse_type()  :  mdebugread.c
<item>bfd_getb32(), bfd_getl32()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cross_ref()  :  mdebugread.c
<item>parse_type()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cur_bfd  :  mdebugread.c
<item>current_objfile  :  objfiles.c
<item>debug_info  :  mdebugread.c
<item>debug_swap  :  mdebugread.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function fdr_name()

<p><tt>static const char* fdr_name ( FDR* f )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>parse_external()  :  mdebugread.c
<item>parse_lines()  :  mdebugread.c
<item>parse_partial_symbols()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_info  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function function_outside_compilation_unit_complaint()

<p><tt>static void function_outside_compilation_unit_complaint ( const char* arg1 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_partial_symbols()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function get_rfd()

<p><tt>static FDR* get_rfd ( int cf, int rf )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>cross_ref()  :  mdebugread.c
<item>parse_type()  :  mdebugread.c
<item>upgrade_type()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cur_bfd  :  mdebugread.c
<item>debug_info  :  mdebugread.c
<item>debug_swap  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function handle_psymbol_enumerators()

<p><tt>static void handle_psymbol_enumerators ( struct objfile* objfile, FDR* fh, int stype, CORE_ADDR svalue )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_psymbol_to_list()  :  symfile.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_partial_symbols()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cur_bfd  :  mdebugread.c
<item>cur_fdr  :  mdebugread.c
<item>cur_sdx  :  mdebugread.c
<item>debug_info  :  mdebugread.c
<item>debug_swap  :  mdebugread.c
<item>psymtab_language  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function has_opaque_xref()

<p><tt>static int has_opaque_xref ( FDR* fh, SYMR* sh )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bfd_getb32(), bfd_getl32()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_partial_symbols()  :  mdebugread.c
<item>parse_symbol()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_info  :  mdebugread.c
<item>debug_swap  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function index_complaint()

<p><tt>static void index_complaint ( const char* arg1 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_partial_symbols()  :  mdebugread.c
<item>parse_type()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function is_pending_symbol()

<p><tt>static struct mdebug_pending* is_pending_symbol ( FDR* fh, char* sh )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>add_pending()  :  mdebugread.c
<item>cross_ref()  :  mdebugread.c
<item>parse_symbol()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_info  :  mdebugread.c
<item>pending_list  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function mdebug_next_symbol_text()

<p><tt>static const char* mdebug_next_symbol_text ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>mdebug_psymtab_to_symtab()  :  mdebugread.c
<item>parse_partial_symbols()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cur_bfd  :  mdebugread.c
<item>cur_fdr  :  mdebugread.c
<item>cur_sdx  :  mdebugread.c
<item>debug_info  :  mdebugread.c
<item>debug_swap  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function mdebug_psymtab_to_symtab()

<p><tt>static void mdebug_psymtab_to_symtab ( struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdb_flush()  :  ui-file.c
<item>printf_filtered()  :  utils.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
<item>scan_file_globals()  :  stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>new_psymtab()  :  mdebugread.c
<item>parse_partial_symbols()  :  mdebugread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>mdebug_next_symbol_text()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>info_verbose  :  top.c
<item>next_symbol_text_func  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function mylookup_symbol()

<p><tt>static struct symbol* mylookup_symbol ( const char* name, struct block* block, domain_enum domain, enum address_class addrclass )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dict_iterator_first()  :  dictionary.c
<item>dict_iterator_next()  :  dictionary.c
<item>mylookup_symbol()  :  mdebugread.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>mylookup_symbol()  :  mdebugread.c
<item>parse_procedure()  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function new_block()

<p><tt>static struct block* new_block ( enum block_type type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dict_create_hashed_expandable()  :  dictionary.c
<item>dict_create_linear_expandable()  :  dictionary.c
<item>xzalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>new_symtab()  :  mdebugread.c
<item>parse_symbol()  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function new_bvect()

<p><tt>static struct blockvector* new_bvect ( int nblocks )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xzalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>new_symtab()  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function new_linetable()

<p><tt>static struct linetable* new_linetable ( int size )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>new_symtab()  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function new_psymtab()

<p><tt>static struct partial_symtab* new_psymtab ( const char* name, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_psymtab()  :  symfile.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_partial_symbols()  :  mdebugread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>mdebug_psymtab_to_symtab()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cur_bfd  :  mdebugread.c
<item>debug_info  :  mdebugread.c
<item>debug_swap  :  mdebugread.c
<item>pending_list  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function new_symbol()

<p><tt>static struct symbol* new_symbol ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>symbol_set_names()  :  symtab.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_symbol()  :  mdebugread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_objfile  :  objfiles.c
<item>psymtab_language  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function new_symtab()

<p><tt>static struct symtab* new_symtab ( const char* name, int maxlines, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_symtab()  :  symfile.c
<item>new_block()  :  mdebugread.c
<item>new_bvect()  :  mdebugread.c
<item>new_linetable()  :  mdebugread.c
<item>obsavestring()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>psymtab_to_symtab_1()  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function new_type()

<p><tt>static struct type* new_type ( char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_symbol()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_objfile  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function parse_external()

<p><tt>static void parse_external ( EXTR* es, int bigend, struct section_offsets* section_offsets, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fdr_name()  :  mdebugread.c
<item>parse_symbol()  :  mdebugread.c
<item>printf_filtered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>psymtab_to_symtab_1()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cur_fd  :  mdebugread.c
<item>cur_fdr  :  mdebugread.c
<item>debug_info  :  mdebugread.c
<item>info_verbose  :  top.c
<item>n_undef_labels  :  mdebugread.c
<item>n_undef_procs  :  mdebugread.c
<item>n_undef_symbols  :  mdebugread.c
<item>n_undef_vars  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function parse_lines()

<p><tt>static void parse_lines ( FDR* fh, PDR* pr, struct linetable* lt, int maxlines, struct partial_symtab* pst, CORE_ADDR lowest_pdr_addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_line()  :  mdebugread.c
<item>complaint()  :  complaints.c
<item>fdr_name()  :  mdebugread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>psymtab_to_symtab_1()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_info  :  mdebugread.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function parse_partial_symbols()

<p><tt>static void parse_partial_symbols ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_psymbol_to_list()  :  symfile.c
<item>complaint()  :  complaints.c
<item>deduce_language_from_filename()  :  symfile.c
<item>do_cleanups()  :  utils.c
<item>end_psymtab()  :  dbxread.c
<item>executable_objfile()  :  objfiles.c
<item>fdr_name()  :  mdebugread.c
<item>function_outside_compilation_unit_complaint()  :  mdebugread.c
<item>get_section_index()  :  symfile.c
<item>handle_psymbol_enumerators()  :  mdebugread.c
<item>has_opaque_xref()  :  mdebugread.c
<item>hex_string()  :  utils.c
<item>index_complaint()  :  mdebugread.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>new_psymtab()  :  mdebugread.c
<item>prim_record_minimal_symbol_and_info()  :  minsyms.c
<item>psymtab_get_first()  :  objfiles.c
<item>psymtab_get_next()  :  objfiles.c
<item>record_minimal_symbol()  :  mdebugread.c
<item>start_psymtab_common()  :  symfile.c
<item>unknown_ext_complaint()  :  mdebugread.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>xzalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin___memset_chk(), __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk(), __inline_strcpy_chk(), _obstack_newchunk(), bfd_get_section_by_name(), bfd_getb32(), bfd_getl32(), strchr(), strcmp(), strlen(), strrchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>mdebug_build_psymtabs()  :  mdebugread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>mdebug_next_symbol_text()  :  mdebugread.c
<item>mdebug_psymtab_to_symtab()  :  mdebugread.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cur_bfd  :  mdebugread.c
<item>cur_fdr  :  mdebugread.c
<item>cur_sdx  :  mdebugread.c
<item>debug_info  :  mdebugread.c
<item>debug_swap  :  mdebugread.c
<item>last_source_file  :  buildsym.c
<item>max_gdbinfo  :  mdebugread.c
<item>max_glevel  :  mdebugread.c
<item>next_symbol_text_func  :  buildsym.c
<item>pending_list  :  mdebugread.c
<item>processing_gcc_compilation  :  buildsym.c
<item>psymtab_language  :  mdebugread.c
<item>stabs_symbol  :  mdebugread.c
<item>symfile_complaints  :  complaints.c
<item>symnum  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function parse_procedure()

<p><tt>static void parse_procedure ( PDR* pr, struct symtab* search_symtab, struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>mylookup_symbol()  :  mdebugread.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>psymtab_to_symtab_1()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cur_bfd  :  mdebugread.c
<item>cur_fdr  :  mdebugread.c
<item>debug_info  :  mdebugread.c
<item>debug_swap  :  mdebugread.c
<item>found_ecoff_debugging_info  :  mdebugread.c
<item>nodebug_func_symbol_type  :  mdebugread.c
<item>processing_gcc_compilation  :  buildsym.c
<item>symfile_complaints  :  complaints.c
<item>top_stack  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function parse_symbol()

<p><tt>static int parse_symbol ( SYMR* sh, union aux_ext* ax, char* ext_sh, int bigend, struct section_offsets* section_offsets, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>add_block()  :  mdebugread.c
<item>add_pending()  :  mdebugread.c
<item>add_symbol()  :  mdebugread.c
<item>complaint()  :  complaints.c
<item>dict_iterator_first()  :  dictionary.c
<item>dict_iterator_next()  :  dictionary.c
<item>executable_objfile()  :  objfiles.c
<item>gdbarch_ecoff_reg_to_regnum()  :  gdbarch.c
<item>gdbarch_int_bit()  :  gdbarch.c
<item>has_opaque_xref()  :  mdebugread.c
<item>hashname()  :  buildsym.c
<item>internal_error()  :  utils.c
<item>is_cplus_marker()  :  demangle.c
<item>is_pending_symbol()  :  mdebugread.c
<item>lookup_function_type()  :  gdbtypes.c
<item>make_pointer_type()  :  gdbtypes.c
<item>new_block()  :  mdebugread.c
<item>new_symbol()  :  mdebugread.c
<item>new_type()  :  mdebugread.c
<item>obconcat()  :  symfile.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>obsavestring()  :  symfile.c
<item>parse_type()  :  mdebugread.c
<item>pop_parse_stack()  :  mdebugread.c
<item>push_parse_stack()  :  mdebugread.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_external()  :  mdebugread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cur_bfd  :  mdebugread.c
<item>cur_fd  :  mdebugread.c
<item>cur_fdr  :  mdebugread.c
<item>current_gdbarch  :  gdbarch.c
<item>current_objfile  :  objfiles.c
<item>debug_info  :  mdebugread.c
<item>debug_swap  :  mdebugread.c
<item>found_ecoff_debugging_info  :  mdebugread.c
<item>global_sym_chain  :  stabsread.c
<item>max_gdbinfo  :  mdebugread.c
<item>mdebug_type_int_32  :  mdebugread.c
<item>mdebug_type_void  :  mdebugread.c
<item>nodebug_var_symbol_type  :  mdebugread.c
<item>symfile_complaints  :  complaints.c
<item>top_stack  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function parse_type()

<p><tt>static struct type* parse_type ( int fd, union aux_ext* ax, unsigned int aux_index, int* bs, int bigend, const char* sym_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bad_tag_guess_complaint()  :  mdebugread.c
<item>basic_type_complaint()  :  mdebugread.c
<item>complaint()  :  complaints.c
<item>cross_ref()  :  mdebugread.c
<item>get_rfd()  :  mdebugread.c
<item>index_complaint()  :  mdebugread.c
<item>init_type()  :  gdbtypes.c
<item>obsavestring()  :  symfile.c
<item>parse_type()  :  mdebugread.c
<item>unexpected_type_code_complaint()  :  mdebugread.c
<item>upgrade_type()  :  mdebugread.c
<item>xmalloc()  :  utils.c
<item>_obstack_newchunk(), bfd_getb32(), bfd_getl32(), strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cross_ref()  :  mdebugread.c
<item>parse_symbol()  :  mdebugread.c
<item>parse_type()  :  mdebugread.c
<item>upgrade_type()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_objfile  :  objfiles.c
<item>debug_info  :  mdebugread.c
<item>debug_swap  :  mdebugread.c
<item>mdebug_type_adr_32  :  mdebugread.c
<item>mdebug_type_adr_64  :  mdebugread.c
<item>mdebug_type_char  :  mdebugread.c
<item>mdebug_type_complex  :  mdebugread.c
<item>mdebug_type_double  :  mdebugread.c
<item>mdebug_type_double_complex  :  mdebugread.c
<item>mdebug_type_fixed_dec  :  mdebugread.c
<item>mdebug_type_float  :  mdebugread.c
<item>mdebug_type_float_dec  :  mdebugread.c
<item>mdebug_type_int_32  :  mdebugread.c
<item>mdebug_type_int_64  :  mdebugread.c
<item>mdebug_type_long_32  :  mdebugread.c
<item>mdebug_type_long_64  :  mdebugread.c
<item>mdebug_type_long_long_64  :  mdebugread.c
<item>mdebug_type_short  :  mdebugread.c
<item>mdebug_type_string  :  mdebugread.c
<item>mdebug_type_unsigned_char  :  mdebugread.c
<item>mdebug_type_unsigned_int_32  :  mdebugread.c
<item>mdebug_type_unsigned_int_64  :  mdebugread.c
<item>mdebug_type_unsigned_long_32  :  mdebugread.c
<item>mdebug_type_unsigned_long_64  :  mdebugread.c
<item>mdebug_type_unsigned_long_long_64  :  mdebugread.c
<item>mdebug_type_unsigned_short  :  mdebugread.c
<item>mdebug_type_void  :  mdebugread.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function pop_parse_stack()

<p><tt>static void pop_parse_stack ( void )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>parse_symbol()  :  mdebugread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>top_stack  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function psymtab_to_symtab_1()

<p><tt>static void psymtab_to_symtab_1 ( struct partial_symtab* pst, char* filename )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_symbol_to_list()  :  buildsym.c
<item>complaint()  :  complaints.c
<item>do_cleanups()  :  utils.c
<item>end_stabs()  :  stabsread.c
<item>end_symtab()  :  buildsym.c
<item>executable_objfile()  :  objfiles.c
<item>fputs_filtered()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>new_symbol()  :  mdebugread.c
<item>new_symtab()  :  mdebugread.c
<item>parse_external()  :  mdebugread.c
<item>parse_lines()  :  mdebugread.c
<item>parse_procedure()  :  mdebugread.c
<item>parse_symbol()  :  mdebugread.c
<item>pop_parse_stack()  :  mdebugread.c
<item>printf_filtered()  :  utils.c
<item>process_one_symbol()  :  dbxread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
<item>push_parse_stack()  :  mdebugread.c
<item>record_line()  :  buildsym.c
<item>shrink_linetable()  :  mdebugread.c
<item>sort_blocks()  :  mdebugread.c
<item>wrap_here()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>mdebug_psymtab_to_symtab()  :  mdebugread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cur_bfd  :  mdebugread.c
<item>cur_fd  :  mdebugread.c
<item>cur_fdr  :  mdebugread.c
<item>cur_sdx  :  mdebugread.c
<item>current_objfile  :  objfiles.c
<item>current_subfile  :  buildsym.c
<item>debug_info  :  mdebugread.c
<item>debug_swap  :  mdebugread.c
<item>found_ecoff_debugging_info  :  mdebugread.c
<item>gdb_stdout  :  main.c
<item>info_verbose  :  top.c
<item>last_source_file  :  buildsym.c
<item>local_symbols  :  buildsym.c
<item>mdebug_type_void  :  mdebugread.c
<item>n_undef_labels  :  mdebugread.c
<item>n_undef_procs  :  mdebugread.c
<item>n_undef_symbols  :  mdebugread.c
<item>n_undef_vars  :  mdebugread.c
<item>pending_list  :  mdebugread.c
<item>previous_stab_code  :  stabsread.c
<item>processing_gcc_compilation  :  buildsym.c
<item>psymtab_language  :  mdebugread.c
<item>stabs_symbol  :  mdebugread.c
<item>symfile_complaints  :  complaints.c
<item>top_stack  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function push_parse_stack()

<p><tt>static void push_parse_stack ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xzalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_symbol()  :  mdebugread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>top_stack  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function record_minimal_symbol()

<p><tt>static void record_minimal_symbol ( const char* name, const CORE_ADDR address, enum minimal_symbol_type ms_type, int storage_class, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>executable_objfile()  :  objfiles.c
<item>get_section_index()  :  symfile.c
<item>internal_error()  :  utils.c
<item>prim_record_minimal_symbol_and_info()  :  minsyms.c
<item>bfd_get_section_by_name()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_partial_symbols()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cur_bfd  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function shrink_linetable()

<p><tt>static struct linetable* shrink_linetable ( struct linetable* lt )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>psymtab_to_symtab_1()  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function sort_blocks()

<p><tt>static void sort_blocks ( struct symtab* s )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>qsort()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>psymtab_to_symtab_1()  :  mdebugread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>compare_blocks()  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Function unexpected_type_code_complaint()

<p><tt>static void unexpected_type_code_complaint ( const char* arg1 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_type()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function unknown_ext_complaint()

<p><tt>static void unknown_ext_complaint ( const char* arg1 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_partial_symbols()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function upgrade_type()

<p><tt>static int upgrade_type ( int fd, struct type** tpp, int tq, union aux_ext* ax, int bigend, const char* sym_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>mdebugread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
<item>get_rfd()  :  mdebugread.c
<item>lookup_function_type()  :  gdbtypes.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>parse_type()  :  mdebugread.c
<item>bfd_getb32(), bfd_getl32()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_type()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>debug_info  :  mdebugread.c
<item>debug_swap  :  mdebugread.c
<item>mdebug_type_int_32  :  mdebugread.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

</article>
