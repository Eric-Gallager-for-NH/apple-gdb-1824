<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF ser-base.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for ser-base.c of gdb.cxref.
<author>cxref

<sect>File ser-base.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;serial.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;ser-base.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;event-loop.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
</itemize>

<sect1>Local Variables

<p>
<bf>push_event</bf><newline>
<tt>static timer_handler_func push_event</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>reschedule()
</itemize>
</descrip>
<p>
<bf>fd_event</bf><newline>
<tt>static handler_func fd_event</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>reschedule()
</itemize>
</descrip>

<sect1>Global Function generic_readchar()

<p><tt>int generic_readchar ( struct serial* scb, int timeout, int ( do_readchar)(struct serial* scb,int timeout) )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-base.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>reschedule()  :  ser-base.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hardwire_readchar()  :  ser-unix.c
<item>ser_base_readchar()  :  ser-base.c
</itemize>
</descrip>

<sect1>Global Function reschedule()

<p><tt>void reschedule ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-base.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_file_handler()  :  event-loop.c
<item>create_timer()  :  event-loop.c
<item>delete_file_handler()  :  event-loop.c
<item>delete_timer()  :  event-loop.c
<item>fprintf_unfiltered()  :  utils.c
<item>serial_debug_p()  :  serial.c
<item>serial_is_async_p()  :  serial.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>fd_event()  :  ser-base.c
<item>generic_readchar()  :  ser-base.c
<item>push_event()  :  ser-base.c
<item>ser_base_async()  :  ser-base.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>fd_event  :  ser-base.c
<item>gdb_stdlog  :  main.c
<item>push_event  :  ser-base.c
</itemize>
</descrip>

<sect1>Global Function ser_base_async()

<p><tt>void ser_base_async ( struct serial* scb, int async_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-base.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>delete_file_handler()  :  event-loop.c
<item>delete_timer()  :  event-loop.c
<item>fprintf_unfiltered()  :  utils.c
<item>reschedule()  :  ser-base.c
<item>serial_debug_p()  :  serial.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
</itemize>
</descrip>

<sect1>Global Function ser_base_drain_output()

<p><tt>int ser_base_drain_output ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-base.h
</itemize>
</descrip>

<sect1>Global Function ser_base_flush_input()

<p><tt>int ser_base_flush_input ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-base.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hardwire_flush_input()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Global Function ser_base_flush_output()

<p><tt>int ser_base_flush_output ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-base.h
</itemize>
</descrip>

<sect1>Global Function ser_base_get_tty_state()

<p><tt>serial_ttystate ser_base_get_tty_state ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-base.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
</descrip>

<sect1>Global Function ser_base_noflush_set_tty_state()

<p><tt>int ser_base_noflush_set_tty_state ( struct serial* scb, serial_ttystate new_ttystate, serial_ttystate old_ttystate )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-base.h
</itemize>
</descrip>

<sect1>Global Function ser_base_print_tty_state()

<p><tt>void ser_base_print_tty_state ( struct serial* scb, serial_ttystate ttystate, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-base.h
</itemize>
</descrip>

<sect1>Global Function ser_base_raw()

<p><tt>void ser_base_raw ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-base.h
</itemize>
</descrip>

<sect1>Global Function ser_base_readchar()

<p><tt>int ser_base_readchar ( struct serial* scb, int timeout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-base.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>generic_readchar()  :  ser-base.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_ser_base_readchar()  :  ser-base.c
</itemize>
</descrip>

<sect1>Global Function ser_base_send_break()

<p><tt>int ser_base_send_break ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-base.h
</itemize>
</descrip>

<sect1>Global Function ser_base_set_tty_state()

<p><tt>int ser_base_set_tty_state ( struct serial* scb, serial_ttystate ttystate )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-base.h
</itemize>
</descrip>

<sect1>Global Function ser_base_setbaudrate()

<p><tt>int ser_base_setbaudrate ( struct serial* scb, int rate )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-base.h
</itemize>
</descrip>

<sect1>Global Function ser_base_setstopbits()

<p><tt>int ser_base_setstopbits ( struct serial* scb, int num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-base.h
</itemize>
</descrip>

<sect1>Global Function ser_base_write()

<p><tt>int ser_base_write ( struct serial* scb, const char* str, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-base.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Local Function do_ser_base_readchar()

<p><tt>static int do_ser_base_readchar ( struct serial* scb, int timeout )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>ser_base_wait_for()  :  ser-base.c
<item>deprecated_ui_loop_hook()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ser_base_readchar()  :  ser-base.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>deprecated_ui_loop_hook  :  top.c
</itemize>
</descrip>

<sect1>Local Function fd_event()

<p><tt>static void fd_event ( int error, void* context )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>reschedule()  :  ser-base.c
</itemize>
</descrip>

<sect1>Local Function push_event()

<p><tt>static void push_event ( void* context )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>reschedule()  :  ser-base.c
</itemize>
</descrip>

<sect1>Local Function ser_base_wait_for()

<p><tt>static int ser_base_wait_for ( struct serial* scb, int timeout )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>__builtin_bzero(), __error(), select()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_ser_base_readchar()  :  ser-base.c
</itemize>
</descrip>

</article>
