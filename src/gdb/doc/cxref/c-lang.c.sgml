<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF c-lang.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for c-lang.c of gdb.cxref.
<author>cxref

<sect>File c-lang.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>basic_lookup_symbol_nonlocal()  :  symtab.c
<item>basic_lookup_transparent_type()  :  symtab.c
<item>c_create_fundamental_type()  :  c-lang.c
<item>c_emit_char()  :  c-lang.c
<item>c_error()  :  c-exp.c
<item>c_language_arch_info()  :  c-lang.c
<item>c_preprocess_and_parse()  :  c-lang.c
<item>c_print_type()  :  c-typeprint.c
<item>c_printchar()  :  c-lang.c
<item>c_printstr()  :  c-lang.c
<item>c_val_print()  :  c-valprint.c
<item>c_value_print()  :  c-valprint.c
<item>cp_class_name_from_physname()  :  cp-support.c
<item>cp_lookup_symbol_nonlocal()  :  cp-namespace.c
<item>cp_lookup_transparent_type()  :  cp-namespace.c
<item>default_word_break_characters()  :  language.c
<item>null_post_parser()  :  parse.c
<item>value_of_this()  :  valops.c
<item> cplus_demangle()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_bool  :  gdbtypes.c
<item>builtin_type_char  :  gdbtypes.c
<item>builtin_type_complex  :  gdbtypes.c
<item>builtin_type_double  :  gdbtypes.c
<item>builtin_type_double_complex  :  gdbtypes.c
<item>builtin_type_float  :  gdbtypes.c
<item>builtin_type_int  :  gdbtypes.c
<item>builtin_type_long  :  gdbtypes.c
<item>builtin_type_long_double  :  gdbtypes.c
<item>builtin_type_long_long  :  gdbtypes.c
<item>builtin_type_short  :  gdbtypes.c
<item>builtin_type_signed_char  :  gdbtypes.c
<item>builtin_type_unsigned_char  :  gdbtypes.c
<item>builtin_type_unsigned_int  :  gdbtypes.c
<item>builtin_type_unsigned_long  :  gdbtypes.c
<item>builtin_type_unsigned_long_long  :  gdbtypes.c
<item>builtin_type_unsigned_short  :  gdbtypes.c
<item>builtin_type_void  :  gdbtypes.c
<item>c_op_print_tab  :  c-lang.c
<item>cplus_builtin_types  :  c-lang.c
<item>exp_descriptor_standard  :  parse.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;parser-defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;c-lang.h&quot;</tt>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
<item><tt>#include &quot;macroexp.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;valprint.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;macroscope.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macrotab.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;charset.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;cp-support.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>

<sect1>Type enum c_primitive_types

<p>
<itemize>
<item><tt>enum c_primitive_types</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>c_primitive_type_int;</tt><newline>
<item><tt>c_primitive_type_long;</tt><newline>
<item><tt>c_primitive_type_short;</tt><newline>
<item><tt>c_primitive_type_char;</tt><newline>
<item><tt>c_primitive_type_float;</tt><newline>
<item><tt>c_primitive_type_double;</tt><newline>
<item><tt>c_primitive_type_void;</tt><newline>
<item><tt>c_primitive_type_long_long;</tt><newline>
<item><tt>c_primitive_type_signed_char;</tt><newline>
<item><tt>c_primitive_type_unsigned_char;</tt><newline>
<item><tt>c_primitive_type_unsigned_short;</tt><newline>
<item><tt>c_primitive_type_unsigned_int;</tt><newline>
<item><tt>c_primitive_type_unsigned_long;</tt><newline>
<item><tt>c_primitive_type_unsigned_long_long;</tt><newline>
<item><tt>c_primitive_type_long_double;</tt><newline>
<item><tt>c_primitive_type_complex;</tt><newline>
<item><tt>c_primitive_type_double_complex;</tt><newline>
<item><tt>nr_c_primitive_types;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable expression_macro_lookup_func

<p>
<tt>macro_lookup_ftype* expression_macro_lookup_func</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>cp-valprint.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>m2-lang.c
<item>m2-valprint.c
<item>objc-exp.c
<item>objc-lang.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
<item>c_preprocess_and_parse()  :  c-lang.c
</itemize>
</descrip>

<sect1>Global Variable expression_macro_lookup_baton

<p>
<tt>void* expression_macro_lookup_baton</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>cp-valprint.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>m2-lang.c
<item>m2-valprint.c
<item>objc-exp.c
<item>objc-lang.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
<item>c_preprocess_and_parse()  :  c-lang.c
</itemize>
</descrip>

<sect1>Global Variable c_op_print_tab

<p>
<tt>const struct op_print c_op_print_tab[]</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>c-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c-lang.c
</itemize>
</descrip>

<sect1>Global Variable c_language_defn

<p>
<tt>const struct language_defn c_language_defn</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>c-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_c_language()  :  c-lang.c
</itemize>
</descrip>

<sect1>Global Variable cplus_builtin_types

<p>
<tt>struct type** const cplus_builtin_types[]</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>c-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c-lang.c
</itemize>
</descrip>

<sect1>Global Variable cplus_language_defn

<p>
<tt>const struct language_defn cplus_language_defn</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>c-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_c_language()  :  c-lang.c
</itemize>
</descrip>

<sect1>Global Variable asm_language_defn

<p>
<tt>const struct language_defn asm_language_defn</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>c-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_c_language()  :  c-lang.c
</itemize>
</descrip>

<sect1>Global Variable minimal_language_defn

<p>
<tt>const struct language_defn minimal_language_defn</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>c-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_c_language()  :  c-lang.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>macro_original_text</bf><newline>
<tt>static const char* macro_original_text</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_preprocess_and_parse()
<item>finished_macro_expansion()
<item>scan_macro_cleanup()
<item>scan_macro_expansion()
<item>scanning_macro_expansion()
</itemize>
</descrip>
<p>
<bf>macro_expanded_text</bf><newline>
<tt>static char* macro_expanded_text</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>finished_macro_expansion()
<item>scan_macro_expansion()
</itemize>
</descrip>

<sect1>Global Function _initialize_c_language()

<p><tt>void _initialize_c_language ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_language()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>asm_language_defn  :  c-lang.c
<item>c_language_defn  :  c-lang.c
<item>cplus_language_defn  :  c-lang.c
<item>minimal_language_defn  :  c-lang.c
</itemize>
</descrip>

<sect1>Global Function c_create_fundamental_type()

<p><tt>struct type* c_create_fundamental_type ( struct objfile* objfile, int ctypeid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_double_bit()  :  gdbarch.c
<item>gdbarch_float_bit()  :  gdbarch.c
<item>gdbarch_int_bit()  :  gdbarch.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>gdbarch_long_double_bit()  :  gdbarch.c
<item>gdbarch_long_long_bit()  :  gdbarch.c
<item>gdbarch_short_bit()  :  gdbarch.c
<item>init_type()  :  gdbtypes.c
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_create_fundamental_type()  :  jv-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function c_language_arch_info()

<p><tt>void c_language_arch_info ( struct gdbarch* gdbarch, struct language_arch_info* lai )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_obstack_zalloc()  :  gdbarch.c
<item>get_builtin_type()  :  gdbtypes.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c-lang.c
<item>jv-lang.c
<item>scm-lang.c
</itemize>
</descrip>

<sect1>Global Function c_printchar()

<p><tt>void c_printchar ( int c, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fputc_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c-lang.c
<item>jv-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Global Function c_printstr()

<p><tt>void c_printstr ( struct ui_file* stream, const gdb_byte* string, unsigned int length, int width, int force_ellipses )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_unsigned_integer()  :  findvar.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>quit()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c-lang.c
<item>jv-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
<item>inspect_it  :  printcmd.c
<item>print_max  :  valprint.c
<item>quit_flag  :  utils.c
<item>repeat_count_threshold  :  valprint.c
</itemize>
</descrip>

<sect1>Global Function finished_macro_expansion()

<p><tt>void finished_macro_expansion ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
<item>scan_macro_cleanup()  :  c-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>lexptr  :  parse.c
<item>macro_expanded_text  :  c-lang.c
<item>macro_original_text  :  c-lang.c
</itemize>
</descrip>

<sect1>Global Function scan_macro_expansion()

<p><tt>void scan_macro_expansion ( char* expansion )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>lexptr  :  parse.c
<item>macro_expanded_text  :  c-lang.c
<item>macro_original_text  :  c-lang.c
</itemize>
</descrip>

<sect1>Global Function scanning_macro_expansion()

<p><tt>int scanning_macro_expansion ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-lang.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>macro_original_text  :  c-lang.c
</itemize>
</descrip>

<sect1>Local Function c_emit_char()

<p><tt>static void c_emit_char ( int c, struct ui_file* stream, int quoter )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>c-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>c_target_char_has_backslash_escape()  :  charset.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>host_char_print_literally()  :  charset.c
<item>target_char_to_host()  :  charset.c
<item>strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c-lang.c
</itemize>
</descrip>

<sect1>Local Function c_preprocess_and_parse()

<p><tt>static int c_preprocess_and_parse ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>c_parse()  :  c-exp.c
<item>default_macro_scope()  :  macroscope.c
<item>do_cleanups()  :  utils.c
<item>find_pc_line()  :  symtab.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>sal_macro_scope()  :  macroscope.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
<item>null_macro_lookup()  :  c-lang.c
<item>scan_macro_cleanup()  :  c-lang.c
<item>standard_macro_lookup()  :  macroscope.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>expression_context_block  :  parse.c
<item>expression_context_pc  :  parse.c
<item>expression_macro_lookup_baton  :  c-lang.c
<item>expression_macro_lookup_func  :  c-lang.c
<item>macro_original_text  :  c-lang.c
</itemize>
</descrip>

<sect1>Local Function null_macro_lookup()

<p><tt>static struct macro_definition* null_macro_lookup ( const char* name, void* baton )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_preprocess_and_parse()  :  c-lang.c
</itemize>
</descrip>

<sect1>Local Function scan_macro_cleanup()

<p><tt>static void scan_macro_cleanup ( void* dummy )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>finished_macro_expansion()  :  c-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c_preprocess_and_parse()  :  c-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>macro_original_text  :  c-lang.c
</itemize>
</descrip>

</article>
