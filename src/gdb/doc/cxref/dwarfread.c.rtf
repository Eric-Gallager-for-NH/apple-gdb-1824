{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF dwarfread.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File dwarfread.c\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Refs Var:\cell file_symbols\cell buildsym.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/elf/dwarf.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "buildsym.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/demangle.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "complaints.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <fcntl.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DIE_ID\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DIE_NAME\par}
{\s5\f1\fs20\ql\sb50\sa50 #define GCC_PRODUCER "GNU C "\par}
{\s5\f1\fs20\ql\sb50\sa50 #define GPLUS_PRODUCER "GNU C++ "\par}
{\s5\f1\fs20\ql\sb50\sa50 #define LCC_PRODUCER "NCR C/C++"\par}
{\s5\f1\fs20\ql\sb50\sa50 #define GET_UNSIGNED 0\par}
{\s5\f1\fs20\ql\sb50\sa50 #define GET_SIGNED 1\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SIZEOF_DIE_LENGTH 4\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SIZEOF_DIE_TAG 2\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SIZEOF_ATTRIBUTE 2\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SIZEOF_FORMAT_SPECIFIER 1\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SIZEOF_FMT_FT 2\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SIZEOF_LINETBL_LENGTH 4\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SIZEOF_LINETBL_LINENO 4\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SIZEOF_LINETBL_STMT 2\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SIZEOF_LINETBL_DELTA 4\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SIZEOF_LOC_ATOM_CODE 1\par}
{\s5\f1\fs20\ql\sb50\sa50 #define FORM_FROM_ATTR( attr )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define TARGET_FT_POINTER_SIZE( objfile )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define TARGET_FT_LONG_SIZE( objfile )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define AT_short_element_list\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DBFOFF( p )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DBROFF( p )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DBLENGTH( p )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define LNFOFF( p )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define AUTO_AS_IN_THE_C_MEANING_OF_IT auto\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Typedef DIE_REF\par}
{\s5\f1\fs20\ql\sb50\sa50 typedef unsigned int DIE_REF\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Typedef BLOCK\par}
{\s5\f1\fs20\ql\sb50\sa50 typedef char BLOCK\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dieinfo\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dieinfo}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* die;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned long die_length;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 DIE_REF die_ref;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned short die_tag;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR at_padding;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned long at_sibling;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 BLOCK* at_location;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* at_name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned short at_fund_type;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 BLOCK* at_mod_fund_type;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR at_user_def_type;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 BLOCK* at_mod_u_d_type;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned short at_ordering;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 BLOCK* at_subscr_data;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 size_t at_byte_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned short at_bit_offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 size_t at_bit_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 BLOCK* at_element_list;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR at_stmt_list;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR at_low_pc;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR at_high_pc;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR at_language;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR at_member;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR at_discr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 BLOCK* at_discr_value;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 BLOCK* at_string_length;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* at_comp_dir;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* at_producer;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR at_start_scope;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR at_stride_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR at_src_info;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* at_prototyped;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int has_at_low_pc:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int has_at_stmt_list:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int has_at_byte_size:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int short_element_list:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int isreg;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int optimized_out;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int offreg;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int basereg;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dwfinfo\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dwfinfo}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 file_ptr dbfoff;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int dbroff;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int dblength;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 file_ptr lnfoff;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct nextfield\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct nextfield}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct nextfield* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct field field;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct nextfield\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct nextfield}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct nextfield* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct field field;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable list_in_scope\par}
{\s5\f1\fs20\ql\sb50\sa50 struct pending** list_in_scope\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell dwarfread.c\cell\cell\row
Used in:\cell enum_type()\cell dwarfread.c\cell\row
\cell new_symbol()\cell dwarfread.c\cell\row
\cell read_func_scope()\cell dwarfread.c\cell\row
\cell synthesize_typedef()\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable diecount\par}
{\s5\f1\fs20\ql\sb50\sa50 static int diecount\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell completedieinfo()\cell\cell\row
\cell psymtab_to_symtab_1()\cell\cell\row
\cell read_ofile_symtab()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable curdie\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct dieinfo* curdie\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell alloc_utype()\cell\cell\row
\cell attribute_size()\cell\cell\row
\cell basicdieinfo()\cell\cell\row
\cell completedieinfo()\cell\cell\row
\cell decode_array_element_type()\cell\cell\row
\cell decode_fund_type()\cell\cell\row
\cell decode_modified_type()\cell\cell\row
\cell decode_subscript_data_item()\cell\cell\row
\cell dwarf_read_array_type()\cell\cell\row
\cell locval()\cell\cell\row
\cell lookup_utype()\cell\cell\row
\cell read_func_scope()\cell\cell\row
\cell read_subroutine_type()\cell\cell\row
\cell read_tag_string_type()\cell\cell\row
\cell scan_partial_symbols()\cell\cell\row
\cell struct_type()\cell\cell\row
\cell target_to_host()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dbbase\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* dbbase\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell basicdieinfo()\cell\cell\row
\cell dwarf_build_psymtabs()\cell\cell\row
\cell process_dies()\cell\cell\row
\cell read_ofile_symtab()\cell\cell\row
\cell scan_compilation_units()\cell\cell\row
\cell scan_partial_symbols()\cell\cell\row
\cell struct_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dbsize\par}
{\s5\f1\fs20\ql\sb50\sa50 static int dbsize\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell basicdieinfo()\cell\cell\row
\cell dwarf_build_psymtabs()\cell\cell\row
\cell read_ofile_symtab()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dbroff\par}
{\s5\f1\fs20\ql\sb50\sa50 static int dbroff\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell alloc_utype()\cell\cell\row
\cell basicdieinfo()\cell\cell\row
\cell dwarf_build_psymtabs()\cell\cell\row
\cell lookup_utype()\cell\cell\row
\cell process_dies()\cell\cell\row
\cell read_ofile_symtab()\cell\cell\row
\cell scan_compilation_units()\cell\cell\row
\cell scan_partial_symbols()\cell\cell\row
\cell struct_type()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable lnbase\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* lnbase\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell read_file_scope()\cell\cell\row
\cell read_ofile_symtab()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable baseaddr\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR baseaddr\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell completedieinfo()\cell\cell\row
\cell decode_line_numbers()\cell\cell\row
\cell dwarf_build_psymtabs()\cell\cell\row
\cell new_symbol()\cell\cell\row
\cell read_ofile_symtab()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable base_section_offsets\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct section_offsets* base_section_offsets\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf_build_psymtabs()\cell\cell\row
\cell read_ofile_symtab()\cell\cell\row
\cell scan_compilation_units()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable utypes\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type** utypes\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell alloc_utype()\cell\cell\row
\cell free_utypes()\cell\cell\row
\cell lookup_utype()\cell\cell\row
\cell read_file_scope()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable numutypes\par}
{\s5\f1\fs20\ql\sb50\sa50 static int numutypes\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell alloc_utype()\cell\cell\row
\cell free_utypes()\cell\cell\row
\cell lookup_utype()\cell\cell\row
\cell read_file_scope()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable ftypes\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* ftypes[29]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf_fundamental_type()\cell\cell\row
\cell read_file_scope()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable cu_language\par}
{\s5\f1\fs20\ql\sb50\sa50 static enum language cu_language\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell add_enum_psymbol()\cell\cell\row
\cell add_partial_symbol()\cell\cell\row
\cell enum_type()\cell\cell\row
\cell new_symbol()\cell\cell\row
\cell read_enumeration()\cell\cell\row
\cell read_file_scope()\cell\cell\row
\cell read_structure_scope()\cell\cell\row
\cell set_cu_language()\cell\cell\row
\cell synthesize_typedef()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable cu_language_defn\par}
{\s5\f1\fs20\ql\sb50\sa50 static const struct language_defn* cu_language_defn\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf_fundamental_type()\cell\cell\row
\cell set_cu_language()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf_build_psymtabs()\par}
{\s5\f1\fs20\ql\sb50\sa50 void dwarf_build_psymtabs ( struct objfile* objfile, int mainline, file_ptr dbfoff, unsigned int dbfsize, file_ptr lnoffset, unsigned int lnsize )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell init_psymbol_list()\cell symfile.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell scan_compilation_units()\cell dwarfread.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  bfd_bread(), bfd_seek()\cell\cell\row
Called by:\cell elf_symfile_read()\cell elfread.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell base_section_offsets\cell dwarfread.c\cell\row
\cell baseaddr\cell dwarfread.c\cell\row
\cell current_objfile\cell objfiles.c\cell\row
\cell dbbase\cell dwarfread.c\cell\row
\cell dbroff\cell dwarfread.c\cell\row
\cell dbsize\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_enum_psymbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_enum_psymbol ( struct dieinfo* dip, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell add_psymbol_to_list()\cell symfile.c\cell\row
\cell attribute_size()\cell dwarfread.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell target_to_host()\cell dwarfread.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell scan_partial_symbols()\cell dwarfread.c\cell\row
Refs Var:\cell cu_language\cell dwarfread.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_partial_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_partial_symbol ( struct dieinfo* dip, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell add_psymbol_to_list()\cell symfile.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell scan_partial_symbols()\cell dwarfread.c\cell\row
Refs Var:\cell cu_language\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function alloc_utype()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* alloc_utype ( DIE_REF die_ref, struct type* utypep )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell alloc_type()\cell gdbtypes.c\cell\row
\cell bad_die_ref_complaint()\cell dwarfread.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell dwarf_fundamental_type()\cell dwarfread.c\cell\row
Called by:\cell decode_array_element_type()\cell dwarfread.c\cell\row
\cell decode_die_type()\cell dwarfread.c\cell\row
\cell decode_modified_type()\cell dwarfread.c\cell\row
\cell dwarf_read_array_type()\cell dwarfread.c\cell\row
\cell enum_type()\cell dwarfread.c\cell\row
\cell read_subroutine_type()\cell dwarfread.c\cell\row
\cell read_tag_pointer_type()\cell dwarfread.c\cell\row
\cell read_tag_string_type()\cell dwarfread.c\cell\row
\cell struct_type()\cell dwarfread.c\cell\row
Refs Var:\cell curdie\cell dwarfread.c\cell\row
\cell current_objfile\cell objfiles.c\cell\row
\cell dbroff\cell dwarfread.c\cell\row
\cell numutypes\cell dwarfread.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\cell utypes\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function attribute_size()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int attribute_size ( unsigned int attr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell gdbarch_ptr_bit()\cell gdbarch.c\cell\row
\cell unknown_attribute_form_complaint()\cell dwarfread.c\cell\row
Called by:\cell add_enum_psymbol()\cell dwarfread.c\cell\row
\cell completedieinfo()\cell dwarfread.c\cell\row
\cell decode_array_element_type()\cell dwarfread.c\cell\row
\cell decode_mod_fund_type()\cell dwarfread.c\cell\row
\cell decode_mod_u_d_type()\cell dwarfread.c\cell\row
\cell decode_modified_type()\cell dwarfread.c\cell\row
\cell dwarf_read_array_type()\cell dwarfread.c\cell\row
\cell enum_type()\cell dwarfread.c\cell\row
\cell locval()\cell dwarfread.c\cell\row
Refs Var:\cell curdie\cell dwarfread.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function bad_array_element_type_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void bad_array_element_type_complaint ( int arg1, const char* arg2, int arg3 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell decode_array_element_type()\cell dwarfread.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function bad_die_ref_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void bad_die_ref_complaint ( int arg1, const char* arg2, int arg3 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell alloc_utype()\cell dwarfread.c\cell\row
\cell lookup_utype()\cell dwarfread.c\cell\row
\cell scan_partial_symbols()\cell dwarfread.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function basicdieinfo()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void basicdieinfo ( struct dieinfo* dip, char* diep, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell target_to_host()\cell dwarfread.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell process_dies()\cell dwarfread.c\cell\row
\cell scan_compilation_units()\cell dwarfread.c\cell\row
\cell scan_partial_symbols()\cell dwarfread.c\cell\row
\cell struct_type()\cell dwarfread.c\cell\row
Refs Var:\cell curdie\cell dwarfread.c\cell\row
\cell dbbase\cell dwarfread.c\cell\row
\cell dbroff\cell dwarfread.c\cell\row
\cell dbsize\cell dwarfread.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function completedieinfo()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void completedieinfo ( struct dieinfo* dip, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell attribute_size()\cell dwarfread.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell gdbarch_ptr_bit()\cell gdbarch.c\cell\row
\cell target_to_host()\cell dwarfread.c\cell\row
\cell unknown_attribute_form_complaint()\cell dwarfread.c\cell\row
\cell  strlen(), strrchr()\cell\cell\row
Called by:\cell process_dies()\cell dwarfread.c\cell\row
\cell scan_compilation_units()\cell dwarfread.c\cell\row
\cell scan_partial_symbols()\cell dwarfread.c\cell\row
\cell struct_type()\cell dwarfread.c\cell\row
Refs Var:\cell baseaddr\cell dwarfread.c\cell\row
\cell curdie\cell dwarfread.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell diecount\cell dwarfread.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function create_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* create_name ( const char* name, struct obstack* obstackp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), _obstack_newchunk(), strlen()\cell\cell\row
Called by:\cell enum_type()\cell dwarfread.c\cell\row
\cell synthesize_typedef()\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_array_element_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* decode_array_element_type ( char* scan )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell alloc_utype()\cell dwarfread.c\cell\row
\cell attribute_size()\cell dwarfread.c\cell\row
\cell bad_array_element_type_complaint()\cell dwarfread.c\cell\row
\cell decode_fund_type()\cell dwarfread.c\cell\row
\cell decode_mod_fund_type()\cell dwarfread.c\cell\row
\cell decode_mod_u_d_type()\cell dwarfread.c\cell\row
\cell dwarf_fundamental_type()\cell dwarfread.c\cell\row
\cell lookup_utype()\cell dwarfread.c\cell\row
\cell target_to_host()\cell dwarfread.c\cell\row
Called by:\cell decode_subscript_data_item()\cell dwarfread.c\cell\row
Refs Var:\cell curdie\cell dwarfread.c\cell\row
\cell current_objfile\cell objfiles.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_die_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* decode_die_type ( struct dieinfo* dip )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell alloc_utype()\cell dwarfread.c\cell\row
\cell decode_fund_type()\cell dwarfread.c\cell\row
\cell decode_mod_fund_type()\cell dwarfread.c\cell\row
\cell decode_mod_u_d_type()\cell dwarfread.c\cell\row
\cell dwarf_fundamental_type()\cell dwarfread.c\cell\row
\cell lookup_utype()\cell dwarfread.c\cell\row
Called by:\cell new_symbol()\cell dwarfread.c\cell\row
\cell read_subroutine_type()\cell dwarfread.c\cell\row
\cell read_tag_pointer_type()\cell dwarfread.c\cell\row
\cell struct_type()\cell dwarfread.c\cell\row
Refs Var:\cell current_objfile\cell objfiles.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_fund_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* decode_fund_type ( unsigned int fundtype )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell dwarf_fundamental_type()\cell dwarfread.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
Called by:\cell decode_array_element_type()\cell dwarfread.c\cell\row
\cell decode_die_type()\cell dwarfread.c\cell\row
\cell decode_modified_type()\cell dwarfread.c\cell\row
\cell decode_subscript_data_item()\cell dwarfread.c\cell\row
Refs Var:\cell curdie\cell dwarfread.c\cell\row
\cell current_objfile\cell objfiles.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_line_numbers()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void decode_line_numbers ( char* linetable )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell gdbarch_ptr_bit()\cell gdbarch.c\cell\row
\cell record_line()\cell buildsym.c\cell\row
\cell target_to_host()\cell dwarfread.c\cell\row
Called by:\cell read_file_scope()\cell dwarfread.c\cell\row
Refs Var:\cell baseaddr\cell dwarfread.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_objfile\cell objfiles.c\cell\row
\cell current_subfile\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_mod_fund_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* decode_mod_fund_type ( char* typedata )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell attribute_size()\cell dwarfread.c\cell\row
\cell decode_modified_type()\cell dwarfread.c\cell\row
\cell target_to_host()\cell dwarfread.c\cell\row
Called by:\cell decode_array_element_type()\cell dwarfread.c\cell\row
\cell decode_die_type()\cell dwarfread.c\cell\row
Refs Var:\cell current_objfile\cell objfiles.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_mod_u_d_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* decode_mod_u_d_type ( char* typedata )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell attribute_size()\cell dwarfread.c\cell\row
\cell decode_modified_type()\cell dwarfread.c\cell\row
\cell target_to_host()\cell dwarfread.c\cell\row
Called by:\cell decode_array_element_type()\cell dwarfread.c\cell\row
\cell decode_die_type()\cell dwarfread.c\cell\row
Refs Var:\cell current_objfile\cell objfiles.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_modified_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* decode_modified_type ( char* modifiers, unsigned int modcount, int mtype )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell alloc_utype()\cell dwarfread.c\cell\row
\cell attribute_size()\cell dwarfread.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell decode_fund_type()\cell dwarfread.c\cell\row
\cell decode_modified_type()\cell dwarfread.c\cell\row
\cell dwarf_fundamental_type()\cell dwarfread.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell lookup_reference_type()\cell gdbtypes.c\cell\row
\cell lookup_utype()\cell dwarfread.c\cell\row
\cell target_to_host()\cell dwarfread.c\cell\row
Called by:\cell decode_mod_fund_type()\cell dwarfread.c\cell\row
\cell decode_mod_u_d_type()\cell dwarfread.c\cell\row
\cell decode_modified_type()\cell dwarfread.c\cell\row
Refs Var:\cell curdie\cell dwarfread.c\cell\row
\cell current_objfile\cell objfiles.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_subscript_data_item()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* decode_subscript_data_item ( char* scan, char* end )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell create_array_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell decode_array_element_type()\cell dwarfread.c\cell\row
\cell decode_fund_type()\cell dwarfread.c\cell\row
\cell decode_subscript_data_item()\cell dwarfread.c\cell\row
\cell dwarf_fundamental_type()\cell dwarfread.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell target_to_host()\cell dwarfread.c\cell\row
Called by:\cell decode_subscript_data_item()\cell dwarfread.c\cell\row
\cell dwarf_read_array_type()\cell dwarfread.c\cell\row
Refs Var:\cell curdie\cell dwarfread.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_objfile\cell objfiles.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dup_user_type_definition_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dup_user_type_definition_complaint ( int arg1, const char* arg2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell dwarf_read_array_type()\cell dwarfread.c\cell\row
\cell read_subroutine_type()\cell dwarfread.c\cell\row
\cell read_tag_string_type()\cell dwarfread.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf_fundamental_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* dwarf_fundamental_type ( struct objfile* objfile, int type_id )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Called by:\cell alloc_utype()\cell dwarfread.c\cell\row
\cell decode_array_element_type()\cell dwarfread.c\cell\row
\cell decode_die_type()\cell dwarfread.c\cell\row
\cell decode_fund_type()\cell dwarfread.c\cell\row
\cell decode_modified_type()\cell dwarfread.c\cell\row
\cell decode_subscript_data_item()\cell dwarfread.c\cell\row
\cell read_tag_string_type()\cell dwarfread.c\cell\row
Refs Var:\cell cu_language_defn\cell dwarfread.c\cell\row
\cell ftypes\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf_psymtab_to_symtab()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf_psymtab_to_symtab ( struct partial_symtab* pst )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell gdb_flush()\cell ui-file.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell psymtab_to_symtab_1()\cell dwarfread.c\cell\row
\cell warning()\cell utils.c\cell\row
Used in:\cell scan_compilation_units()\cell dwarfread.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\cell info_verbose\cell top.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf_read_array_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf_read_array_type ( struct dieinfo* dip )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell alloc_utype()\cell dwarfread.c\cell\row
\cell attribute_size()\cell dwarfread.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell decode_subscript_data_item()\cell dwarfread.c\cell\row
\cell dup_user_type_definition_complaint()\cell dwarfread.c\cell\row
\cell lookup_utype()\cell dwarfread.c\cell\row
\cell target_to_host()\cell dwarfread.c\cell\row
Called by:\cell process_dies()\cell dwarfread.c\cell\row
Refs Var:\cell curdie\cell dwarfread.c\cell\row
\cell current_objfile\cell objfiles.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function enum_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* enum_type ( struct dieinfo* dip, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell add_symbol_to_list()\cell buildsym.c\cell\row
\cell alloc_utype()\cell dwarfread.c\cell\row
\cell attribute_size()\cell dwarfread.c\cell\row
\cell create_name()\cell dwarfread.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell lookup_utype()\cell dwarfread.c\cell\row
\cell obconcat()\cell symfile.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell symbol_init_language_specific()\cell symtab.c\cell\row
\cell target_to_host()\cell dwarfread.c\cell\row
\cell  __builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strlen()\cell\cell\row
Called by:\cell read_enumeration()\cell dwarfread.c\cell\row
Refs Var:\cell cu_language\cell dwarfread.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell list_in_scope\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function free_utypes()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void free_utypes ( void* dummy )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
Used in:\cell read_file_scope()\cell dwarfread.c\cell\row
Refs Var:\cell numutypes\cell dwarfread.c\cell\row
\cell utypes\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function handle_producer()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void handle_producer ( char* producer )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell set_demangling_style()\cell demangle.c\cell\row
\cell  strlen(), strncmp()\cell\cell\row
Called by:\cell read_file_scope()\cell dwarfread.c\cell\row
Refs Var:\cell processing_gcc_compilation\cell buildsym.c\cell\row
\cell  current_demangling_style\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function locval()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int locval ( struct dieinfo* dip )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell attribute_size()\cell dwarfread.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell gdbarch_dwarf_reg_to_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell target_to_host()\cell dwarfread.c\cell\row
Called by:\cell new_symbol()\cell dwarfread.c\cell\row
\cell struct_type()\cell dwarfread.c\cell\row
Refs Var:\cell curdie\cell dwarfread.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_objfile\cell objfiles.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function lookup_utype()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* lookup_utype ( DIE_REF die_ref )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell bad_die_ref_complaint()\cell dwarfread.c\cell\row
Called by:\cell decode_array_element_type()\cell dwarfread.c\cell\row
\cell decode_die_type()\cell dwarfread.c\cell\row
\cell decode_modified_type()\cell dwarfread.c\cell\row
\cell dwarf_read_array_type()\cell dwarfread.c\cell\row
\cell enum_type()\cell dwarfread.c\cell\row
\cell read_subroutine_type()\cell dwarfread.c\cell\row
\cell read_tag_pointer_type()\cell dwarfread.c\cell\row
\cell read_tag_string_type()\cell dwarfread.c\cell\row
\cell struct_type()\cell dwarfread.c\cell\row
Refs Var:\cell curdie\cell dwarfread.c\cell\row
\cell dbroff\cell dwarfread.c\cell\row
\cell numutypes\cell dwarfread.c\cell\row
\cell utypes\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function new_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* new_symbol ( struct dieinfo* dip, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell add_symbol_to_list()\cell buildsym.c\cell\row
\cell decode_die_type()\cell dwarfread.c\cell\row
\cell locval()\cell dwarfread.c\cell\row
\cell lookup_function_type()\cell gdbtypes.c\cell\row
\cell symbol_set_names()\cell symtab.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strlen()\cell\cell\row
Called by:\cell process_dies()\cell dwarfread.c\cell\row
\cell read_enumeration()\cell dwarfread.c\cell\row
\cell read_func_scope()\cell dwarfread.c\cell\row
\cell read_structure_scope()\cell dwarfread.c\cell\row
Refs Var:\cell baseaddr\cell dwarfread.c\cell\row
\cell cu_language\cell dwarfread.c\cell\row
\cell global_symbols\cell buildsym.c\cell\row
\cell list_in_scope\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function process_dies()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void process_dies ( char* thisdie, char* enddie, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell basicdieinfo()\cell dwarfread.c\cell\row
\cell completedieinfo()\cell dwarfread.c\cell\row
\cell dwarf_read_array_type()\cell dwarfread.c\cell\row
\cell gdbarch_smash_text_address()\cell gdbarch.c\cell\row
\cell new_symbol()\cell dwarfread.c\cell\row
\cell read_enumeration()\cell dwarfread.c\cell\row
\cell read_file_scope()\cell dwarfread.c\cell\row
\cell read_func_scope()\cell dwarfread.c\cell\row
\cell read_lexical_block_scope()\cell dwarfread.c\cell\row
\cell read_structure_scope()\cell dwarfread.c\cell\row
\cell read_subroutine_type()\cell dwarfread.c\cell\row
\cell read_tag_pointer_type()\cell dwarfread.c\cell\row
\cell read_tag_string_type()\cell dwarfread.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell read_file_scope()\cell dwarfread.c\cell\row
\cell read_func_scope()\cell dwarfread.c\cell\row
\cell read_lexical_block_scope()\cell dwarfread.c\cell\row
\cell read_ofile_symtab()\cell dwarfread.c\cell\row
\cell struct_type()\cell dwarfread.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_subfile\cell buildsym.c\cell\row
\cell dbbase\cell dwarfread.c\cell\row
\cell dbroff\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function psymtab_to_symtab_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void psymtab_to_symtab_1 ( struct partial_symtab* pst )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell buildsym_init()\cell buildsym.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell gdb_flush()\cell ui-file.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell psymtab_to_symtab_1()\cell dwarfread.c\cell\row
\cell read_ofile_symtab()\cell dwarfread.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell wrap_here()\cell utils.c\cell\row
Called by:\cell dwarf_psymtab_to_symtab()\cell dwarfread.c\cell\row
\cell psymtab_to_symtab_1()\cell dwarfread.c\cell\row
Refs Func:\cell really_free_pendings()\cell buildsym.c\cell\row
Refs Var:\cell diecount\cell dwarfread.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell info_verbose\cell top.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_enumeration()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_enumeration ( struct dieinfo* dip, char* thisdie, char* enddie, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell enum_type()\cell dwarfread.c\cell\row
\cell new_symbol()\cell dwarfread.c\cell\row
\cell synthesize_typedef()\cell dwarfread.c\cell\row
Called by:\cell process_dies()\cell dwarfread.c\cell\row
Refs Var:\cell cu_language\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_file_scope()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_file_scope ( struct dieinfo* dip, char* thisdie, char* enddie, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell decode_line_numbers()\cell dwarfread.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell end_symtab()\cell buildsym.c\cell\row
\cell handle_producer()\cell dwarfread.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell process_dies()\cell dwarfread.c\cell\row
\cell record_debugformat()\cell buildsym.c\cell\row
\cell set_cu_language()\cell dwarfread.c\cell\row
\cell start_symtab()\cell buildsym.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell process_dies()\cell dwarfread.c\cell\row
Refs Func:\cell free_utypes()\cell dwarfread.c\cell\row
Refs Var:\cell cu_language\cell dwarfread.c\cell\row
\cell ftypes\cell dwarfread.c\cell\row
\cell lnbase\cell dwarfread.c\cell\row
\cell numutypes\cell dwarfread.c\cell\row
\cell utypes\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_func_scope()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_func_scope ( struct dieinfo* dip, char* thisdie, char* enddie, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell finish_block()\cell buildsym.c\cell\row
\cell new_symbol()\cell dwarfread.c\cell\row
\cell pop_context()\cell buildsym.c\cell\row
\cell process_dies()\cell dwarfread.c\cell\row
\cell push_context()\cell buildsym.c\cell\row
Called by:\cell process_dies()\cell dwarfread.c\cell\row
Refs Var:\cell curdie\cell dwarfread.c\cell\row
\cell file_symbols\cell buildsym.c\cell\row
\cell list_in_scope\cell dwarfread.c\cell\row
\cell local_symbols\cell buildsym.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_lexical_block_scope()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_lexical_block_scope ( struct dieinfo* dip, char* thisdie, char* enddie, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell finish_block()\cell buildsym.c\cell\row
\cell pop_context()\cell buildsym.c\cell\row
\cell process_dies()\cell dwarfread.c\cell\row
\cell push_context()\cell buildsym.c\cell\row
Called by:\cell process_dies()\cell dwarfread.c\cell\row
Refs Var:\cell local_symbols\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_ofile_symtab()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_ofile_symtab ( struct partial_symtab* pst )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell process_dies()\cell dwarfread.c\cell\row
\cell target_to_host()\cell dwarfread.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  bfd_bread(), bfd_seek()\cell\cell\row
Called by:\cell psymtab_to_symtab_1()\cell dwarfread.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell base_section_offsets\cell dwarfread.c\cell\row
\cell baseaddr\cell dwarfread.c\cell\row
\cell current_objfile\cell objfiles.c\cell\row
\cell dbbase\cell dwarfread.c\cell\row
\cell dbroff\cell dwarfread.c\cell\row
\cell dbsize\cell dwarfread.c\cell\row
\cell diecount\cell dwarfread.c\cell\row
\cell lnbase\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_structure_scope()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_structure_scope ( struct dieinfo* dip, char* thisdie, char* enddie, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell new_symbol()\cell dwarfread.c\cell\row
\cell struct_type()\cell dwarfread.c\cell\row
\cell synthesize_typedef()\cell dwarfread.c\cell\row
Called by:\cell process_dies()\cell dwarfread.c\cell\row
Refs Var:\cell cu_language\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_subroutine_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_subroutine_type ( struct dieinfo* dip, char* thisdie, char* enddie )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell alloc_utype()\cell dwarfread.c\cell\row
\cell decode_die_type()\cell dwarfread.c\cell\row
\cell dup_user_type_definition_complaint()\cell dwarfread.c\cell\row
\cell lookup_function_type()\cell gdbtypes.c\cell\row
\cell lookup_utype()\cell dwarfread.c\cell\row
Called by:\cell process_dies()\cell dwarfread.c\cell\row
Refs Var:\cell curdie\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_tag_pointer_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_tag_pointer_type ( struct dieinfo* dip )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell alloc_utype()\cell dwarfread.c\cell\row
\cell decode_die_type()\cell dwarfread.c\cell\row
\cell gdbarch_ptr_bit()\cell gdbarch.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell lookup_utype()\cell dwarfread.c\cell\row
Called by:\cell process_dies()\cell dwarfread.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_tag_string_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_tag_string_type ( struct dieinfo* dip )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell alloc_utype()\cell dwarfread.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell create_string_type()\cell gdbtypes.c\cell\row
\cell dup_user_type_definition_complaint()\cell dwarfread.c\cell\row
\cell dwarf_fundamental_type()\cell dwarfread.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_utype()\cell dwarfread.c\cell\row
Called by:\cell process_dies()\cell dwarfread.c\cell\row
Refs Var:\cell curdie\cell dwarfread.c\cell\row
\cell current_objfile\cell objfiles.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function scan_compilation_units()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void scan_compilation_units ( char* thisdie, char* enddie, file_ptr dbfoff, file_ptr lnoffset, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell basicdieinfo()\cell dwarfread.c\cell\row
\cell completedieinfo()\cell dwarfread.c\cell\row
\cell free_named_symtabs()\cell symfile.c\cell\row
\cell scan_partial_symbols()\cell dwarfread.c\cell\row
\cell set_cu_language()\cell dwarfread.c\cell\row
\cell sort_pst_symbols()\cell symfile.c\cell\row
\cell start_psymtab_common()\cell symfile.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  _obstack_newchunk()\cell\cell\row
Called by:\cell dwarf_build_psymtabs()\cell dwarfread.c\cell\row
Refs Func:\cell dwarf_psymtab_to_symtab()\cell dwarfread.c\cell\row
Refs Var:\cell base_section_offsets\cell dwarfread.c\cell\row
\cell dbbase\cell dwarfread.c\cell\row
\cell dbroff\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function scan_partial_symbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void scan_partial_symbols ( char* thisdie, char* enddie, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell add_enum_psymbol()\cell dwarfread.c\cell\row
\cell add_partial_symbol()\cell dwarfread.c\cell\row
\cell bad_die_ref_complaint()\cell dwarfread.c\cell\row
\cell basicdieinfo()\cell dwarfread.c\cell\row
\cell completedieinfo()\cell dwarfread.c\cell\row
Called by:\cell scan_compilation_units()\cell dwarfread.c\cell\row
Refs Var:\cell curdie\cell dwarfread.c\cell\row
\cell dbbase\cell dwarfread.c\cell\row
\cell dbroff\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_cu_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_cu_language ( struct dieinfo* dip )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell deduce_language_from_filename()\cell symfile.c\cell\row
\cell language_def()\cell language.c\cell\row
Called by:\cell read_file_scope()\cell dwarfread.c\cell\row
\cell scan_compilation_units()\cell dwarfread.c\cell\row
Refs Var:\cell cu_language\cell dwarfread.c\cell\row
\cell cu_language_defn\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function struct_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* struct_type ( struct dieinfo* dip, char* thisdie, char* enddie, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell alloc_utype()\cell dwarfread.c\cell\row
\cell basicdieinfo()\cell dwarfread.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell completedieinfo()\cell dwarfread.c\cell\row
\cell decode_die_type()\cell dwarfread.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell locval()\cell dwarfread.c\cell\row
\cell lookup_utype()\cell dwarfread.c\cell\row
\cell obconcat()\cell symfile.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell process_dies()\cell dwarfread.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin_alloca(), _obstack_newchunk(), strlen()\cell\cell\row
Called by:\cell read_structure_scope()\cell dwarfread.c\cell\row
Refs Var:\cell curdie\cell dwarfread.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell dbbase\cell dwarfread.c\cell\row
\cell dbroff\cell dwarfread.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function synthesize_typedef()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void synthesize_typedef ( struct dieinfo* dip, struct objfile* objfile, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell add_symbol_to_list()\cell buildsym.c\cell\row
\cell create_name()\cell dwarfread.c\cell\row
\cell symbol_init_language_specific()\cell symtab.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell read_enumeration()\cell dwarfread.c\cell\row
\cell read_structure_scope()\cell dwarfread.c\cell\row
Refs Var:\cell cu_language\cell dwarfread.c\cell\row
\cell list_in_scope\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function target_to_host()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR target_to_host ( char* from, int nbytes, int signextend, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarfread.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell add_enum_psymbol()\cell dwarfread.c\cell\row
\cell basicdieinfo()\cell dwarfread.c\cell\row
\cell completedieinfo()\cell dwarfread.c\cell\row
\cell decode_array_element_type()\cell dwarfread.c\cell\row
\cell decode_line_numbers()\cell dwarfread.c\cell\row
\cell decode_mod_fund_type()\cell dwarfread.c\cell\row
\cell decode_mod_u_d_type()\cell dwarfread.c\cell\row
\cell decode_modified_type()\cell dwarfread.c\cell\row
\cell decode_subscript_data_item()\cell dwarfread.c\cell\row
\cell dwarf_read_array_type()\cell dwarfread.c\cell\row
\cell enum_type()\cell dwarfread.c\cell\row
\cell locval()\cell dwarfread.c\cell\row
\cell read_ofile_symtab()\cell dwarfread.c\cell\row
Refs Var:\cell curdie\cell dwarfread.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unknown_attribute_form_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void unknown_attribute_form_complaint ( int arg1, const char* arg2, int arg3 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell attribute_size()\cell dwarfread.c\cell\row
\cell completedieinfo()\cell dwarfread.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
}
