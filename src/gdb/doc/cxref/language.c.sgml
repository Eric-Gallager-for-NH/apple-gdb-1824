<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF language.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for language.c of gdb.cxref.
<author>cxref

<sect>File language.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>basic_lookup_symbol_nonlocal()  :  symtab.c
<item>basic_lookup_transparent_type()  :  symtab.c
<item>default_word_break_characters()  :  language.c
<item>null_post_parser()  :  parse.c
<item>unk_lang_class_name()  :  language.c
<item>unk_lang_create_fundamental_type()  :  language.c
<item>unk_lang_demangle()  :  language.c
<item>unk_lang_emit_char()  :  language.c
<item>unk_lang_error()  :  language.c
<item>unk_lang_parser()  :  language.c
<item>unk_lang_print_type()  :  language.c
<item>unk_lang_printchar()  :  language.c
<item>unk_lang_printstr()  :  language.c
<item>unk_lang_trampoline()  :  language.c
<item>unk_lang_val_print()  :  language.c
<item>unk_lang_value_print()  :  language.c
<item>unknown_language_arch_info()  :  language.c
<item>value_of_this()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>exp_descriptor_standard  :  parse.c
<item>unk_op_print_tab  :  language.c
<item>unknown_language_defn  :  language.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;parser-defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;jv-lang.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define DEFAULT_ALLOCSIZE 4</tt><newline>

<sect1>Type struct language_gdbarch

<p>
<itemize>
<item><tt>struct language_gdbarch</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct language_arch_info arch_info[nr_languages];</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable range_mode

<p>
<tt>enum range_mode range_mode</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>breakpoint.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>completer.c
<item>cp-valprint.c
<item>dwarf2read.c
<item>dwarfread.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-valprint.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-valprint.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>maint.c
<item>memattr.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>top.c
<item>tracepoint.c
<item>typeprint.c
<item>ui-out.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>set_range_command()  :  language.c
<item>set_range_str()  :  language.c
<item>set_type_range_case()  :  language.c
</itemize>
</descrip>

<sect1>Global Variable range_check

<p>
<tt>enum range_check range_check</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>breakpoint.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>completer.c
<item>cp-valprint.c
<item>dwarf2read.c
<item>dwarfread.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-valprint.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-valprint.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>maint.c
<item>memattr.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>top.c
<item>tracepoint.c
<item>typeprint.c
<item>ui-out.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>parse_number()  :  f-exp.c
<item>range_error()  :  language.c
<item>set_range_command()  :  language.c
<item>set_range_str()  :  language.c
<item>set_type_range_case()  :  language.c
<item>show_range_command()  :  language.c
</itemize>
</descrip>

<sect1>Global Variable type_mode

<p>
<tt>enum type_mode type_mode</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>breakpoint.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>completer.c
<item>cp-valprint.c
<item>dwarf2read.c
<item>dwarfread.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-valprint.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-valprint.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>maint.c
<item>memattr.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>top.c
<item>tracepoint.c
<item>typeprint.c
<item>ui-out.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>set_type_command()  :  language.c
<item>set_type_range_case()  :  language.c
<item>set_type_str()  :  language.c
</itemize>
</descrip>

<sect1>Global Variable type_check

<p>
<tt>enum type_check type_check</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>breakpoint.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>completer.c
<item>cp-valprint.c
<item>dwarf2read.c
<item>dwarfread.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-valprint.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-valprint.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>maint.c
<item>memattr.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>top.c
<item>tracepoint.c
<item>typeprint.c
<item>ui-out.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>set_type_command()  :  language.c
<item>set_type_range_case()  :  language.c
<item>set_type_str()  :  language.c
<item>show_type_command()  :  language.c
<item>type_error()  :  language.c
</itemize>
</descrip>

<sect1>Global Variable case_mode

<p>
<tt>enum case_mode case_mode</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>breakpoint.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>completer.c
<item>cp-valprint.c
<item>dwarf2read.c
<item>dwarfread.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-valprint.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-valprint.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>maint.c
<item>memattr.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>top.c
<item>tracepoint.c
<item>typeprint.c
<item>ui-out.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>set_case_command()  :  language.c
<item>set_case_str()  :  language.c
<item>set_type_range_case()  :  language.c
</itemize>
</descrip>

<sect1>Global Variable case_sensitivity

<p>
<tt>enum case_sensitivity case_sensitivity</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>breakpoint.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>completer.c
<item>cp-valprint.c
<item>dwarf2read.c
<item>dwarfread.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-valprint.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-valprint.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>maint.c
<item>memattr.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>top.c
<item>tracepoint.c
<item>typeprint.c
<item>ui-out.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>lookup_symbol()  :  symtab.c
<item>lookup_symbol_all()  :  symtab.c
<item>set_case_command()  :  language.c
<item>set_case_str()  :  language.c
<item>set_type_range_case()  :  language.c
<item>show_case_command()  :  language.c
</itemize>
</descrip>

<sect1>Global Variable current_language

<p>
<tt>const struct language_defn* current_language</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>breakpoint.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>completer.c
<item>cp-valprint.c
<item>dwarf2read.c
<item>dwarfread.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-valprint.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-valprint.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>maint.c
<item>memattr.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>top.c
<item>tracepoint.c
<item>typeprint.c
<item>ui-out.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>ada_print_scalar()  :  ada-valprint.c
<item>ada_print_subexp()  :  ada-lang.c
<item>address_info()  :  printcmd.c
<item>allocate_repeat_value()  :  value.c
<item>breakpoint_re_set_all()  :  breakpoint.c
<item>c_lex()  :  c-exp.c
<item>c_parse()  :  c-exp.c
<item>c_printchar()  :  c-lang.c
<item>c_printstr()  :  c-lang.c
<item>c_type_print_args()  :  c-typeprint.c
<item>c_type_print_varspec_suffix()  :  c-typeprint.c
<item>c_val_print()  :  c-valprint.c
<item>coerce_array()  :  value.c
<item>complete_line()  :  completer.c
<item>cp_print_value_fields()  :  cp-valprint.c
<item>cp_type_print_method_args()  :  c-typeprint.c
<item>create_string_type()  :  gdbtypes.c
<item>evaluate_subexp_with_coercion()  :  eval.c
<item>execute_command()  :  top.c
<item>f_lex()  :  f-exp.c
<item>f_printchar()  :  f-lang.c
<item>f_printstr()  :  f-lang.c
<item>f_val_print()  :  f-valprint.c
<item>gdb_init()  :  top.c
<item>java_val_print()  :  jv-valprint.c
<item>lang_bool_type()  :  language.c
<item>language_info()  :  language.c
<item>language_lookup_primitive_type_by_name()  :  language.c
<item>language_search_unquoted_string()  :  symtab.c
<item>location_completer()  :  completer.c
<item>lookup_fundamental_type()  :  gdbtypes.c
<item>lookup_symbol()  :  symtab.c
<item>lookup_symbol_all()  :  symtab.c
<item>lookup_symbol_aux()  :  symtab.c
<item>lookup_symbol_in_language()  :  ada-lang.c
<item>lookup_transparent_type()  :  symtab.c
<item>lookup_typename()  :  gdbtypes.c
<item>m2_printchar()  :  m2-lang.c
<item>m2_printstr()  :  m2-lang.c
<item>maintenance_demangle()  :  maint.c
<item>name_lookup()  :  ada-exp.c
<item>objc_lex()  :  objc-exp.c
<item>op_string()  :  expprint.c
<item>parse_exp_in_context()  :  parse.c
<item>pascal_lex()  :  p-exp.c
<item>pascal_val_print()  :  p-valprint.c
<item>print_char_chars_with_byte_order()  :  valprint.c
<item>print_subexp_standard()  :  expprint.c
<item>print_symbol()  :  symmisc.c
<item>print_type_scalar()  :  typeprint.c
<item>resolve_pending_breakpoint()  :  breakpoint.c
<item>select_frame()  :  frame.c
<item>set_initial_language()  :  symfile.c
<item>set_lang_str()  :  language.c
<item>set_language()  :  language.c
<item>set_language_command()  :  language.c
<item>set_raw_breakpoint()  :  breakpoint.c
<item>set_raw_tracepoint()  :  tracepoint.c
<item>set_type_range_case()  :  language.c
<item>show_case_command()  :  language.c
<item>show_language_command()  :  language.c
<item>show_range_command()  :  language.c
<item>show_type_command()  :  language.c
<item>skip_quoted_chars()  :  completer.c
<item>type_char()  :  ada-exp.c
<item>type_print()  :  typeprint.c
<item>type_system_address()  :  ada-exp.c
<item>typedef_print()  :  typeprint.c
<item>unpack_long()  :  value.c
<item>val_print()  :  valprint.c
<item>val_print_string()  :  valprint.c
<item>value_arg_coerce()  :  infcall.c
<item>value_array()  :  valops.c
<item>value_cast_1()  :  valops.c
<item>value_from_string()  :  value.c
<item>value_of_this()  :  valops.c
<item>value_print()  :  valprint.c
<item>value_string()  :  valops.c
<item>value_subscript()  :  valarith.c
</itemize>
</descrip>

<sect1>Global Variable expected_language

<p>
<tt>const struct language_defn* expected_language</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>breakpoint.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>completer.c
<item>cp-valprint.c
<item>dwarf2read.c
<item>dwarfread.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-valprint.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-valprint.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>maint.c
<item>memattr.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>top.c
<item>tracepoint.c
<item>typeprint.c
<item>ui-out.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>execute_command()  :  top.c
<item>gdb_init()  :  top.c
<item>language_info()  :  language.c
<item>set_initial_language()  :  symfile.c
<item>set_language_command()  :  language.c
</itemize>
</descrip>

<sect1>Global Variable language_mode

<p>
<tt>enum language_mode language_mode</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>breakpoint.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>completer.c
<item>cp-valprint.c
<item>dwarf2read.c
<item>dwarfread.c
<item>eval.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-valprint.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>infrun.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-valprint.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>maint.c
<item>memattr.c
<item>objc-exp.c
<item>objc-lang.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>top.c
<item>tracepoint.c
<item>typeprint.c
<item>ui-out.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>execute_command()  :  top.c
<item>select_frame()  :  frame.c
<item>set_lang_str()  :  language.c
<item>set_language_command()  :  language.c
<item>show_language_command()  :  language.c
</itemize>
</descrip>

<sect1>Global Variable unknown_language_defn

<p>
<tt>const struct language_defn unknown_language_defn</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>language.c
<item>_initialize_language()  :  language.c
</itemize>
</descrip>

<sect1>Global Variable lang_frame_mismatch_warn

<p>
<tt>char lang_frame_mismatch_warn[]</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>language.c
<item>top.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>execute_command()  :  top.c
<item>show_language_command()  :  language.c
</itemize>
</descrip>

<sect1>Global Variable auto_language_defn

<p>
<tt>const struct language_defn auto_language_defn</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_language()  :  language.c
</itemize>
</descrip>

<sect1>Global Variable local_language_defn

<p>
<tt>const struct language_defn local_language_defn</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_language()  :  language.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>languages</bf><newline>
<tt>static const struct language_defn** languages</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_language()
<item>language_def()
<item>language_enum()
<item>language_gdbarch_post_init()
<item>language_str()
<item>set_language()
<item>set_language_command()
<item>skip_language_trampoline()
</itemize>
</descrip>
<p>
<bf>languages_size</bf><newline>
<tt>static unsigned languages_size</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_language()
<item>language_def()
<item>language_enum()
<item>language_gdbarch_post_init()
<item>language_str()
<item>set_language()
<item>set_language_command()
<item>skip_language_trampoline()
</itemize>
</descrip>
<p>
<bf>languages_allocsize</bf><newline>
<tt>static unsigned languages_allocsize</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_language()
</itemize>
</descrip>
<p>
<bf>language</bf><newline>
<tt>static char* language</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_language()
<item>language_info()
<item>set_lang_str()
<item>set_language_command()
</itemize>
</descrip>
<p>
<bf>type</bf><newline>
<tt>static char* type</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_language()
<item>language_info()
<item>set_type_command()
<item>set_type_str()
</itemize>
</descrip>
<p>
<bf>range</bf><newline>
<tt>static char* range</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_language()
<item>language_info()
<item>set_range_command()
<item>set_range_str()
</itemize>
</descrip>
<p>
<bf>case_sensitive</bf><newline>
<tt>static char* case_sensitive</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_language()
<item>language_info()
<item>set_case_command()
<item>set_case_str()
</itemize>
</descrip>
<p>
<bf>unk_op_print_tab</bf><newline>
<tt>static const struct op_print unk_op_print_tab[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>language.c
</itemize>
</descrip>
<p>
<bf>language_gdbarch_data</bf><newline>
<tt>static struct gdbarch_data* language_gdbarch_data</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_language()
<item>language_lookup_primitive_type_by_name()
<item>language_string_char_type()
</itemize>
</descrip>

<sect1>Global Function _initialize_language()

<p><tt>void _initialize_language ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_language()  :  language.c
<item>gdbarch_data_register_post_init()  :  gdbarch.c
<item>savestring()  :  utils.c
<item>set_language()  :  language.c
<item>add_alias_cmd(), add_prefix_cmd(), add_setshow_string_noescape_cmd(), strlen()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>language_gdbarch_post_init()  :  language.c
<item>set_case_command()  :  language.c
<item>set_check()  :  language.c
<item>set_language_command()  :  language.c
<item>set_range_command()  :  language.c
<item>set_type_command()  :  language.c
<item>show_case_command()  :  language.c
<item>show_check()  :  language.c
<item>show_language_command()  :  language.c
<item>show_range_command()  :  language.c
<item>show_type_command()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>auto_language_defn  :  language.c
<item>case_sensitive  :  language.c
<item>language  :  language.c
<item>language_gdbarch_data  :  language.c
<item>local_language_defn  :  language.c
<item>range  :  language.c
<item>type  :  language.c
<item>unknown_language_defn  :  language.c
<item>setchecklist, setlist, showchecklist, showlist
</itemize>
</descrip>

<sect1>Global Function add_language()

<p><tt>void add_language ( const struct language_defn* lang )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_ada_language()  :  ada-lang.c
<item>_initialize_c_language()  :  c-lang.c
<item>_initialize_f_language()  :  f-lang.c
<item>_initialize_java_language()  :  jv-lang.c
<item>_initialize_language()  :  language.c
<item>_initialize_m2_language()  :  m2-lang.c
<item>_initialize_objc_language()  :  objc-lang.c
<item>_initialize_pascal_language()  :  p-lang.c
<item>_initialize_scheme_language()  :  scm-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stderr  :  main.c
<item>languages  :  language.c
<item>languages_allocsize  :  language.c
<item>languages_size  :  language.c
</itemize>
</descrip>

<sect1>Global Function default_word_break_characters()

<p><tt>const char* default_word_break_characters ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>init_main()  :  top.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c-lang.c
<item>f-lang.c
<item>jv-lang.c
<item>language.c
<item>m2-lang.c
<item>objc-lang.c
<item>p-lang.c
<item>scm-lang.c
</itemize>
</descrip>

<sect1>Global Function lang_bool_type()

<p><tt>struct type* lang_bool_type ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>lookup_symbol()  :  symtab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_evaluate_subexp()  :  ada-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>value_in()  :  valarith.c
<item>value_subscript()  :  valarith.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_bool  :  gdbtypes.c
<item>builtin_type_f_logical_s2  :  f-lang.c
<item>builtin_type_int  :  gdbtypes.c
<item>current_language  :  language.c
<item>java_boolean_type  :  jv-lang.c
</itemize>
</descrip>

<sect1>Global Function language_class_name_from_physname()

<p><tt>char* language_class_name_from_physname ( const struct language_defn* current_language, const char* physname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>determine_class_name()  :  dwarf2read.c
<item>guess_structure_name()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function language_def()

<p><tt>const struct language_defn* language_def ( enum language lang )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>fprintf_symbol_filtered()  :  utils.c
<item>set_cu_language()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>languages  :  language.c
<item>languages_size  :  language.c
</itemize>
</descrip>

<sect1>Global Function language_demangle()

<p><tt>char* language_demangle ( const struct language_defn* current_language, const char* mangled, int options )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>fprintf_symbol_filtered()  :  utils.c
</itemize>
</descrip>

<sect1>Global Function language_enum()

<p><tt>enum language language_enum ( char* str )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_ext_lang_command()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>languages  :  language.c
<item>languages_size  :  language.c
</itemize>
</descrip>

<sect1>Global Function language_info()

<p><tt>void language_info ( int quietly )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>printf_unfiltered()  :  utils.c
<item>show_case_command()  :  language.c
<item>show_language_command()  :  language.c
<item>show_range_command()  :  language.c
<item>show_type_command()  :  language.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>execute_command()  :  top.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>case_sensitive  :  language.c
<item>current_language  :  language.c
<item>expected_language  :  language.c
<item>language  :  language.c
<item>range  :  language.c
<item>type  :  language.c
</itemize>
</descrip>

<sect1>Global Function language_lookup_primitive_type_by_name()

<p><tt>struct type* language_lookup_primitive_type_by_name ( const struct language_defn* la, struct gdbarch* gdbarch, const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>new_gdbarch_data()  :  gdbarch.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
<item>f_lex()  :  f-exp.c
<item>lookup_typename()  :  gdbtypes.c
<item>name_lookup()  :  ada-exp.c
<item>objc_lex()  :  objc-exp.c
<item>pascal_lex()  :  p-exp.c
<item>type_system_address()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
<item>language_gdbarch_data  :  language.c
</itemize>
</descrip>

<sect1>Global Function language_str()

<p><tt>const char* language_str ( enum language lang )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dump_symtab_1()  :  symmisc.c
<item>frame_info()  :  stack.c
<item>info_ext_lang_command()  :  symfile.c
<item>source_info()  :  source.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>languages  :  language.c
<item>languages_size  :  language.c
</itemize>
</descrip>

<sect1>Global Function language_string_char_type()

<p><tt>struct type* language_string_char_type ( const struct language_defn* la, struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>new_gdbarch_data()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_string_type()  :  gdbtypes.c
<item>type_char()  :  ada-exp.c
<item>value_from_string()  :  value.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>language_gdbarch_data  :  language.c
</itemize>
</descrip>

<sect1>Global Function make_cleanup_restore_language()

<p><tt>struct cleanup* make_cleanup_restore_language ( enum language new_lang )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
<item>set_language()  :  language.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_methods()  :  linespec.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_set_language()  :  language.c
</itemize>
</descrip>

<sect1>Global Function range_error()

<p><tt>void range_error ( const char* string, ... )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>internal_error()  :  utils.c
<item>verror()  :  utils.c
<item>vfprintf_filtered()  :  utils.c
<item>vwarning()  :  utils.c
<item>__builtin_va_end(), __builtin_va_start()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_number()  :  f-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stderr  :  main.c
<item>range_check  :  language.c
</itemize>
</descrip>

<sect1>Global Function set_language()

<p><tt>enum language set_language ( enum language lang )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>set_lang_str()  :  language.c
<item>set_type_range_case()  :  language.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_language()  :  language.c
<item>breakpoint_re_set_all()  :  breakpoint.c
<item>breakpoint_re_set_one()  :  breakpoint.c
<item>do_restore_lang_radix_cleanup()  :  breakpoint.c
<item>do_set_language()  :  language.c
<item>dump_symtab()  :  symmisc.c
<item>gdb_init()  :  top.c
<item>lookup_symbol_in_language()  :  ada-lang.c
<item>make_cleanup_restore_language()  :  language.c
<item>resolve_pending_breakpoint()  :  breakpoint.c
<item>restore_language()  :  ada-lang.c
<item>select_frame()  :  frame.c
<item>set_initial_language()  :  symfile.c
<item>set_language_command()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
<item>languages  :  language.c
<item>languages_size  :  language.c
</itemize>
</descrip>

<sect1>Global Function skip_language_trampoline()

<p><tt>CORE_ADDR skip_language_trampoline ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>step_into_function()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>languages  :  language.c
<item>languages_size  :  language.c
</itemize>
</descrip>

<sect1>Global Function type_error()

<p><tt>void type_error ( const char* string, ... )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>internal_error()  :  utils.c
<item>verror()  :  utils.c
<item>vfprintf_filtered()  :  utils.c
<item>vwarning()  :  utils.c
<item>__builtin_va_end(), __builtin_va_start()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stderr  :  main.c
<item>type_check  :  language.c
</itemize>
</descrip>

<sect1>Global Function value_true()

<p><tt>int value_true ( struct value* val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_logical_not()  :  valarith.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_cond_eval()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Local Function do_set_language()

<p><tt>static void do_set_language ( void* in_language )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>set_language()  :  language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>make_cleanup_restore_language()  :  language.c
</itemize>
</descrip>

<sect1>Local Function language_gdbarch_post_init()

<p><tt>static void* language_gdbarch_post_init ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_obstack_zalloc()  :  gdbarch.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_language()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>languages  :  language.c
<item>languages_size  :  language.c
</itemize>
</descrip>

<sect1>Local Function set_case_command()

<p><tt>static void set_case_command ( const char* ignore, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>set_case_str()  :  language.c
<item>set_type_range_case()  :  language.c
<item>show_case_command()  :  language.c
<item>warning()  :  utils.c
<item>strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_language()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>case_mode  :  language.c
<item>case_sensitive  :  language.c
<item>case_sensitivity  :  language.c
</itemize>
</descrip>

<sect1>Local Function set_case_str()

<p><tt>static void set_case_str ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>xfree()  :  utils.c
<item>concat()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_case_command()  :  language.c
<item>set_type_range_case()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>case_mode  :  language.c
<item>case_sensitive  :  language.c
<item>case_sensitivity  :  language.c
</itemize>
</descrip>

<sect1>Local Function set_check()

<p><tt>static void set_check ( const char* ignore, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>printf_unfiltered()  :  utils.c
<item>help_list()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_language()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>setchecklist
</itemize>
</descrip>

<sect1>Local Function set_lang_str()

<p><tt>static void set_lang_str ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
<item>concat()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_language()  :  language.c
<item>set_language_command()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
<item>language  :  language.c
<item>language_mode  :  language.c
</itemize>
</descrip>

<sect1>Local Function set_language_command()

<p><tt>static void set_language_command ( const char* ignore, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>get_frame_language()  :  stack.c
<item>make_cleanup()  :  utils.c
<item>printf_unfiltered()  :  utils.c
<item>savestring()  :  utils.c
<item>set_lang_str()  :  language.c
<item>set_language()  :  language.c
<item>set_type_range_case()  :  language.c
<item>strcmp(), strlen(), toupper()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_language()  :  language.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
<item>expected_language  :  language.c
<item>language  :  language.c
<item>language_mode  :  language.c
<item>languages  :  language.c
<item>languages_size  :  language.c
</itemize>
</descrip>

<sect1>Local Function set_range_command()

<p><tt>static void set_range_command ( const char* ignore, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>set_range_str()  :  language.c
<item>set_type_range_case()  :  language.c
<item>show_range_command()  :  language.c
<item>warning()  :  utils.c
<item>strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_language()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>range  :  language.c
<item>range_check  :  language.c
<item>range_mode  :  language.c
</itemize>
</descrip>

<sect1>Local Function set_range_str()

<p><tt>static void set_range_str ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>xfree()  :  utils.c
<item>concat()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_range_command()  :  language.c
<item>set_type_range_case()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>range  :  language.c
<item>range_check  :  language.c
<item>range_mode  :  language.c
</itemize>
</descrip>

<sect1>Local Function set_type_command()

<p><tt>static void set_type_command ( const char* ignore, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>set_type_range_case()  :  language.c
<item>set_type_str()  :  language.c
<item>show_type_command()  :  language.c
<item>warning()  :  utils.c
<item>strcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_language()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>type  :  language.c
<item>type_check  :  language.c
<item>type_mode  :  language.c
</itemize>
</descrip>

<sect1>Local Function set_type_range_case()

<p><tt>static void set_type_range_case ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>set_case_str()  :  language.c
<item>set_range_str()  :  language.c
<item>set_type_str()  :  language.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_case_command()  :  language.c
<item>set_language()  :  language.c
<item>set_language_command()  :  language.c
<item>set_range_command()  :  language.c
<item>set_type_command()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>case_mode  :  language.c
<item>case_sensitivity  :  language.c
<item>current_language  :  language.c
<item>range_check  :  language.c
<item>range_mode  :  language.c
<item>type_check  :  language.c
<item>type_mode  :  language.c
</itemize>
</descrip>

<sect1>Local Function set_type_str()

<p><tt>static void set_type_str ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>xfree()  :  utils.c
<item>concat()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_type_command()  :  language.c
<item>set_type_range_case()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>type  :  language.c
<item>type_check  :  language.c
<item>type_mode  :  language.c
</itemize>
</descrip>

<sect1>Local Function show_case_command()

<p><tt>static void show_case_command ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>printf_unfiltered()  :  utils.c
<item>deprecated_show_value_hack()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>language_info()  :  language.c
<item>set_case_command()  :  language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_language()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>case_sensitivity  :  language.c
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Local Function show_check()

<p><tt>static void show_check ( const char* ignore, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cmd_show_list()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_language()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>showchecklist
</itemize>
</descrip>

<sect1>Local Function show_language_command()

<p><tt>static void show_language_command ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>get_frame_language()  :  stack.c
<item>printf_filtered()  :  utils.c
<item>deprecated_show_value_hack()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>language_info()  :  language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_language()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
<item>lang_frame_mismatch_warn  :  language.c
<item>language_mode  :  language.c
</itemize>
</descrip>

<sect1>Local Function show_range_command()

<p><tt>static void show_range_command ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>printf_unfiltered()  :  utils.c
<item>deprecated_show_value_hack()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>language_info()  :  language.c
<item>set_range_command()  :  language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_language()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
<item>range_check  :  language.c
</itemize>
</descrip>

<sect1>Local Function show_type_command()

<p><tt>static void show_type_command ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>printf_unfiltered()  :  utils.c
<item>deprecated_show_value_hack()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>language_info()  :  language.c
<item>set_type_command()  :  language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_language()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
<item>type_check  :  language.c
</itemize>
</descrip>

<sect1>Local Function unk_lang_class_name()

<p><tt>static char* unk_lang_class_name ( const char* mangled )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>language.c
</itemize>
</descrip>

<sect1>Local Function unk_lang_create_fundamental_type()

<p><tt>static struct type* unk_lang_create_fundamental_type ( struct objfile* objfile, int unktypeid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>language.c
</itemize>
</descrip>

<sect1>Local Function unk_lang_demangle()

<p><tt>static char* unk_lang_demangle ( const char* mangled, int options )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>cplus_demangle()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>language.c
</itemize>
</descrip>

<sect1>Local Function unk_lang_emit_char()

<p><tt>static void unk_lang_emit_char ( int c, struct ui_file* stream, int quoter )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>language.c
</itemize>
</descrip>

<sect1>Local Function unk_lang_error()

<p><tt>static void unk_lang_error ( const char* msg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>language.c
</itemize>
</descrip>

<sect1>Local Function unk_lang_parser()

<p><tt>static int unk_lang_parser ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>language.c
</itemize>
</descrip>

<sect1>Local Function unk_lang_print_type()

<p><tt>static void unk_lang_print_type ( struct type* type, const char* varstring, struct ui_file* stream, int show, int level )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>language.c
</itemize>
</descrip>

<sect1>Local Function unk_lang_printchar()

<p><tt>static void unk_lang_printchar ( int c, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>language.c
</itemize>
</descrip>

<sect1>Local Function unk_lang_printstr()

<p><tt>static void unk_lang_printstr ( struct ui_file* stream, const gdb_byte* string, unsigned int length, int width, int force_ellipses )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>language.c
</itemize>
</descrip>

<sect1>Local Function unk_lang_trampoline()

<p><tt>static CORE_ADDR unk_lang_trampoline ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>language.c
</itemize>
</descrip>

<sect1>Local Function unk_lang_val_print()

<p><tt>static int unk_lang_val_print ( struct type* type, const gdb_byte* valaddr, int embedded_offset, CORE_ADDR address, struct ui_file* stream, int format, int deref_ref, int recurse, enum val_prettyprint pretty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>language.c
</itemize>
</descrip>

<sect1>Local Function unk_lang_value_print()

<p><tt>static int unk_lang_value_print ( struct value* val, struct ui_file* stream, int format, enum val_prettyprint pretty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>language.c
</itemize>
</descrip>

<sect1>Local Function unknown_language_arch_info()

<p><tt>static void unknown_language_arch_info ( struct gdbarch* gdbarch, struct language_arch_info* lai )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_obstack_zalloc()  :  gdbarch.c
<item>get_builtin_type()  :  gdbtypes.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>language.c
</itemize>
</descrip>

</article>
