{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF ada-typeprint.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File ada-typeprint.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/demangle.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "c-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "macroexp.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "typeprint.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "ada-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <ctype.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable name_buffer\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* name_buffer\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell decoded_type_name()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable name_buffer_len\par}
{\s5\f1\fs20\ql\sb50\sa50 static size_t name_buffer_len\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell decoded_type_name()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_print_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 void ada_print_type ( struct type* type0, const char* varstring, struct ui_file* stream, int show, int level )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-lang.h\cell\cell\row
Calls: \cell ada_aligned_type()\cell ada-lang.c\cell\row
\cell ada_check_typedef()\cell ada-lang.c\cell\row
\cell ada_get_base_type()\cell ada-lang.c\cell\row
\cell ada_is_aligner_type()\cell ada-lang.c\cell\row
\cell ada_is_array_descriptor_type()\cell ada-lang.c\cell\row
\cell ada_is_bogus_array_descriptor()\cell ada-lang.c\cell\row
\cell ada_is_fixed_point_type()\cell ada-lang.c\cell\row
\cell ada_is_modular_type()\cell ada-lang.c\cell\row
\cell ada_is_packed_array_type()\cell ada-lang.c\cell\row
\cell ada_is_range_type_name()\cell ada-lang.c\cell\row
\cell ada_is_vax_floating_type()\cell ada-lang.c\cell\row
\cell ada_modulus()\cell ada-lang.c\cell\row
\cell ada_name_prefix_len()\cell ada-lang.c\cell\row
\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell ada_type_name()\cell ada-lang.c\cell\row
\cell c_print_type()\cell c-typeprint.c\cell\row
\cell decoded_type_name()\cell ada-typeprint.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell print_array_type()\cell ada-typeprint.c\cell\row
\cell print_enum_type()\cell ada-typeprint.c\cell\row
\cell print_fixed_point_type()\cell ada-typeprint.c\cell\row
\cell print_func_type()\cell ada-typeprint.c\cell\row
\cell print_range()\cell ada-typeprint.c\cell\row
\cell print_range_type_named()\cell ada-typeprint.c\cell\row
\cell print_record_type()\cell ada-typeprint.c\cell\row
\cell print_unchecked_union_type()\cell ada-typeprint.c\cell\row
\cell print_vax_floating_point_type()\cell ada-typeprint.c\cell\row
Called by:\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell print_array_type()\cell ada-typeprint.c\cell\row
\cell print_func_type()\cell ada-typeprint.c\cell\row
\cell print_record_field_types()\cell ada-typeprint.c\cell\row
\cell print_unchecked_union_type()\cell ada-typeprint.c\cell\row
\cell user_select_syms()\cell ada-lang.c\cell\row
Used in:\cell ada-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ada_typedef_print()\par}
{\s5\f1\fs20\ql\sb50\sa50 void ada_typedef_print ( struct type* the_type, struct symbol* newsym, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-typeprint.c\cell\cell\row
Calls: \cell ada_name_prefix_len()\cell ada-lang.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell type_print()\cell typeprint.c\cell\row
Refs Var:\cell demangle\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decoded_type_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* decoded_type_name ( struct type* the_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_type_name()\cell ada-lang.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), islower(), strlen(), strstr()\cell\cell\row
Called by:\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell print_record_type()\cell ada-typeprint.c\cell\row
Refs Var:\cell name_buffer\cell ada-typeprint.c\cell\row
\cell name_buffer_len\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_array_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_array_type ( struct type* type, struct ui_file* stream, int show, int level )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-typeprint.c\cell\cell\row
Calls: \cell ada_array_arity()\cell ada-lang.c\cell\row
\cell ada_array_element_type()\cell ada-lang.c\cell\row
\cell ada_coerce_to_simple_array_type()\cell ada-lang.c\cell\row
\cell ada_find_parallel_type()\cell ada-lang.c\cell\row
\cell ada_is_packed_array_type()\cell ada-lang.c\cell\row
\cell ada_is_simple_array_type()\cell ada-lang.c\cell\row
\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell print_range()\cell ada-typeprint.c\cell\row
\cell print_range_type_named()\cell ada-typeprint.c\cell\row
\cell wrap_here()\cell utils.c\cell\row
Called by:\cell ada_print_type()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_choices()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_choices ( struct type* type, int field_num, struct ui_file* stream, struct type* val_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-typeprint.c\cell\cell\row
Calls: \cell ada_print_scalar()\cell ada-valprint.c\cell\row
\cell ada_scan_number()\cell ada-lang.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
Called by:\cell print_variant_clauses()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_dynamic_range_bound()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_dynamic_range_bound ( struct type* type, const char* name, int name_len, const char* suffix, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-typeprint.c\cell\cell\row
Calls: \cell ada_print_scalar()\cell ada-valprint.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell get_int_var_value()\cell ada-lang.c\cell\row
\cell grow_vect()\cell ada-lang.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin___strncpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), __inline_strncpy_chk(), strlen()\cell\cell\row
Called by:\cell print_range_type_named()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_enum_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_enum_type ( struct type* type, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_enum_name()\cell ada-lang.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell quit()\cell utils.c\cell\row
\cell wrap_here()\cell utils.c\cell\row
Called by:\cell ada_print_type()\cell ada-typeprint.c\cell\row
Refs Var:\cell quit_flag\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_fixed_point_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_fixed_point_type ( struct type* type, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_delta()\cell ada-lang.c\cell\row
\cell ada_fixed_to_float()\cell ada-lang.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
Called by:\cell ada_print_type()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_func_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_func_type ( struct type* type, struct ui_file* stream, const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell wrap_here()\cell utils.c\cell\row
Called by:\cell ada_print_type()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_range()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_range ( struct type* the_type, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-typeprint.c\cell\cell\row
Calls: \cell ada_name_prefix_len()\cell ada-lang.c\cell\row
\cell ada_print_scalar()\cell ada-valprint.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
Called by:\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell print_array_type()\cell ada-typeprint.c\cell\row
\cell print_range_type_named()\cell ada-typeprint.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_range_bound()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_range_bound ( struct type* type, char* bounds, int* n, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-typeprint.c\cell\cell\row
Calls: \cell ada_print_scalar()\cell ada-valprint.c\cell\row
\cell ada_scan_number()\cell ada-lang.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell  strlen(), strstr()\cell\cell\row
Called by:\cell print_range_type_named()\cell ada-typeprint.c\cell\row
Refs Var:\cell builtin_type_long\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_range_type_named()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_range_type_named ( const char* name, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-typeprint.c\cell\cell\row
Calls: \cell ada_find_any_type()\cell ada-lang.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell print_dynamic_range_bound()\cell ada-typeprint.c\cell\row
\cell print_range()\cell ada-typeprint.c\cell\row
\cell print_range_bound()\cell ada-typeprint.c\cell\row
\cell  strchr(), strstr()\cell\cell\row
Called by:\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell print_array_type()\cell ada-typeprint.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_record_field_types()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int print_record_field_types ( struct type* type, struct type* outer_type, struct ui_file* stream, int show, int level )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell ada-typeprint.c\cell\cell\row
Calls: \cell ada_is_ignored_field()\cell ada-lang.c\cell\row
\cell ada_is_parent_field()\cell ada-lang.c\cell\row
\cell ada_is_variant_part()\cell ada-lang.c\cell\row
\cell ada_is_wrapper_field()\cell ada-lang.c\cell\row
\cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell print_record_field_types()\cell ada-typeprint.c\cell\row
\cell print_variant_part()\cell ada-typeprint.c\cell\row
\cell quit()\cell utils.c\cell\row
Called by:\cell print_record_field_types()\cell ada-typeprint.c\cell\row
\cell print_record_type()\cell ada-typeprint.c\cell\row
\cell print_variant_clauses()\cell ada-typeprint.c\cell\row
Refs Var:\cell quit_flag\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_record_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_record_type ( struct type* type0, struct ui_file* stream, int show, int level )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_find_parallel_type()\cell ada-lang.c\cell\row
\cell ada_is_tagged_type()\cell ada-lang.c\cell\row
\cell ada_parent_type()\cell ada-lang.c\cell\row
\cell ada_type_name()\cell ada-lang.c\cell\row
\cell decoded_type_name()\cell ada-typeprint.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell print_record_field_types()\cell ada-typeprint.c\cell\row
Called by:\cell ada_print_type()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_unchecked_union_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_unchecked_union_type ( struct type* type, struct ui_file* stream, int show, int level )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_print_type()\cell ada-typeprint.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
Called by:\cell ada_print_type()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_variant_clauses()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_variant_clauses ( struct type* type, int field_num, struct type* outer_type, struct ui_file* stream, int show, int level )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_find_parallel_type()\cell ada-lang.c\cell\row
\cell ada_variant_discrim_type()\cell ada-lang.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell print_choices()\cell ada-typeprint.c\cell\row
\cell print_record_field_types()\cell ada-typeprint.c\cell\row
Called by:\cell print_variant_part()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_variant_part()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_variant_part ( struct type* type, int field_num, struct type* outer_type, struct ui_file* stream, int show, int level )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_variant_discrim_name()\cell ada-lang.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell print_variant_clauses()\cell ada-typeprint.c\cell\row
Called by:\cell print_record_field_types()\cell ada-typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_vax_floating_point_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_vax_floating_point_type ( struct type* type, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ada_vax_float_type_suffix()\cell ada-lang.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
Called by:\cell ada_print_type()\cell ada-typeprint.c\cell\row
\intbl0
}
