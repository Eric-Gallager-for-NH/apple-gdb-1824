{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF macroexp.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File macroexp.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "bcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "macrotab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "macroexp.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct macro_buffer\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct macro_buffer}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* text;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 size_t len;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int shared;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int last_token;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int is_identifier;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct macro_name_list\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct macro_name_list}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct macro_name_list* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function macro_expand()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* macro_expand ( const char* source, macro_lookup_ftype* lookup_func, void* lookup_func_baton )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell macroexp.h\cell\cell\row
Calls: \cell appendc()\cell macroexp.c\cell\row
\cell discard_cleanups()\cell utils.c\cell\row
\cell init_buffer()\cell macroexp.c\cell\row
\cell init_shared_buffer()\cell macroexp.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell scan()\cell macroexp.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell macro_expand_command()\cell macrocmd.c\cell\row
Refs Func:\cell cleanup_macro_buffer()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function macro_expand_next()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* macro_expand_next ( const char** lexptr, macro_lookup_ftype* lookup_func, void* lookup_baton )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell macroexp.h\cell\cell\row
Calls: \cell appendc()\cell macroexp.c\cell\row
\cell discard_cleanups()\cell utils.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell get_token()\cell macroexp.c\cell\row
\cell init_buffer()\cell macroexp.c\cell\row
\cell init_shared_buffer()\cell macroexp.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell maybe_expand()\cell macroexp.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell c_lex()\cell c-exp.c\cell\row
Refs Func:\cell cleanup_macro_buffer()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function macro_expand_once()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* macro_expand_once ( const char* source, macro_lookup_ftype* lookup_func, void* lookup_func_baton )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell macroexp.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Called by:\cell macro_expand_once_command()\cell macrocmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function append_tokens_without_splicing()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void append_tokens_without_splicing ( struct macro_buffer* dest, struct macro_buffer* src )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell appendc()\cell macroexp.c\cell\row
\cell appendmem()\cell macroexp.c\cell\row
\cell get_token()\cell macroexp.c\cell\row
\cell init_shared_buffer()\cell macroexp.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell scan()\cell macroexp.c\cell\row
\cell substitute_args()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function appendc()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void appendc ( struct macro_buffer* b, int c )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell resize_buffer()\cell macroexp.c\cell\row
Called by:\cell append_tokens_without_splicing()\cell macroexp.c\cell\row
\cell macro_expand()\cell macroexp.c\cell\row
\cell macro_expand_next()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function appendmem()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void appendmem ( struct macro_buffer* b, char* addr, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell resize_buffer()\cell macroexp.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell append_tokens_without_splicing()\cell macroexp.c\cell\row
\cell scan()\cell macroexp.c\cell\row
\cell substitute_args()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cleanup_macro_buffer()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void cleanup_macro_buffer ( void* untyped_buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell free_buffer()\cell macroexp.c\cell\row
Used in:\cell expand()\cell macroexp.c\cell\row
\cell macro_expand()\cell macroexp.c\cell\row
\cell macro_expand_next()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function currently_rescanning()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int currently_rescanning ( struct macro_name_list* list, const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  strcmp()\cell\cell\row
Called by:\cell maybe_expand()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function expand()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int expand ( const char* id, struct macro_definition* def, struct macro_buffer* dest, struct macro_buffer* src, struct macro_name_list* no_loop, macro_lookup_ftype* lookup_func, void* lookup_baton )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gather_arguments()\cell macroexp.c\cell\row
\cell init_buffer()\cell macroexp.c\cell\row
\cell init_shared_buffer()\cell macroexp.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell scan()\cell macroexp.c\cell\row
\cell substitute_args()\cell macroexp.c\cell\row
\cell  strcmp(), strlen()\cell\cell\row
Called by:\cell maybe_expand()\cell macroexp.c\cell\row
Refs Func:\cell cleanup_macro_buffer()\cell macroexp.c\cell\row
\cell free_current_contents()\cell utils.c\cell\row
\cell null_cleanup()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function free_buffer()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void free_buffer ( struct macro_buffer* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell internal_error()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell cleanup_macro_buffer()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function gather_arguments()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct macro_buffer* gather_arguments ( const char* name, struct macro_buffer* src, int* argc_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell discard_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell get_token()\cell macroexp.c\cell\row
\cell init_shared_buffer()\cell macroexp.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell set_token()\cell macroexp.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
Called by:\cell expand()\cell macroexp.c\cell\row
Refs Func:\cell free_current_contents()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_character_constant()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int get_character_constant ( struct macro_buffer* tok, const char* p, char* end )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell parse_escape()\cell cp-name-parser.c\cell\row
\cell set_token()\cell macroexp.c\cell\row
Called by:\cell get_token()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_comment()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int get_comment ( struct macro_buffer* tok, char* p, char* end )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
\cell set_token()\cell macroexp.c\cell\row
Called by:\cell get_token()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_identifier()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int get_identifier ( struct macro_buffer* tok, char* p, char* end )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell is_digit()\cell macroexp.c\cell\row
\cell is_identifier_nondigit()\cell macroexp.c\cell\row
\cell set_token()\cell macroexp.c\cell\row
Called by:\cell get_token()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_pp_number()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int get_pp_number ( struct macro_buffer* tok, char* p, char* end )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell is_digit()\cell macroexp.c\cell\row
\cell is_identifier_nondigit()\cell macroexp.c\cell\row
\cell set_token()\cell macroexp.c\cell\row
\cell  strchr()\cell\cell\row
Called by:\cell get_token()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_punctuator()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int get_punctuator ( struct macro_buffer* tok, char* p, char* end )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell set_token()\cell macroexp.c\cell\row
\cell  memcmp(), strlen()\cell\cell\row
Called by:\cell get_token()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_string_literal()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int get_string_literal ( struct macro_buffer* tok, const char* p, char* end )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell parse_escape()\cell cp-name-parser.c\cell\row
\cell set_token()\cell macroexp.c\cell\row
Called by:\cell get_token()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_token()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int get_token ( struct macro_buffer* tok, struct macro_buffer* src )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell get_character_constant()\cell macroexp.c\cell\row
\cell get_comment()\cell macroexp.c\cell\row
\cell get_identifier()\cell macroexp.c\cell\row
\cell get_pp_number()\cell macroexp.c\cell\row
\cell get_punctuator()\cell macroexp.c\cell\row
\cell get_string_literal()\cell macroexp.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell is_whitespace()\cell macroexp.c\cell\row
\cell set_token()\cell macroexp.c\cell\row
Called by:\cell append_tokens_without_splicing()\cell macroexp.c\cell\row
\cell gather_arguments()\cell macroexp.c\cell\row
\cell macro_expand_next()\cell macroexp.c\cell\row
\cell scan()\cell macroexp.c\cell\row
\cell substitute_args()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function init_buffer()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void init_buffer ( struct macro_buffer* b, int n )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell expand()\cell macroexp.c\cell\row
\cell macro_expand()\cell macroexp.c\cell\row
\cell macro_expand_next()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function init_shared_buffer()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void init_shared_buffer ( struct macro_buffer* buf, const char* addr, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell append_tokens_without_splicing()\cell macroexp.c\cell\row
\cell expand()\cell macroexp.c\cell\row
\cell gather_arguments()\cell macroexp.c\cell\row
\cell macro_expand()\cell macroexp.c\cell\row
\cell macro_expand_next()\cell macroexp.c\cell\row
\cell set_token()\cell macroexp.c\cell\row
\cell substitute_args()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_digit()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int is_digit ( int c )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell get_identifier()\cell macroexp.c\cell\row
\cell get_pp_number()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_identifier_nondigit()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int is_identifier_nondigit ( int c )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell get_identifier()\cell macroexp.c\cell\row
\cell get_pp_number()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_whitespace()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int is_whitespace ( int c )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell get_token()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function maybe_expand()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int maybe_expand ( struct macro_buffer* dest, struct macro_buffer* src_first, struct macro_buffer* src_rest, struct macro_name_list* no_loop, macro_lookup_ftype* lookup_func, void* lookup_baton )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell currently_rescanning()\cell macroexp.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell expand()\cell macroexp.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell macro_expand_next()\cell macroexp.c\cell\row
\cell scan()\cell macroexp.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resize_buffer()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void resize_buffer ( struct macro_buffer* b, int n )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell internal_error()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
Called by:\cell appendc()\cell macroexp.c\cell\row
\cell appendmem()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function scan()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void scan ( struct macro_buffer* dest, struct macro_buffer* src, struct macro_name_list* no_loop, macro_lookup_ftype* lookup_func, void* lookup_baton )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell macroexp.c\cell\cell\row
Calls: \cell append_tokens_without_splicing()\cell macroexp.c\cell\row
\cell appendmem()\cell macroexp.c\cell\row
\cell get_token()\cell macroexp.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell maybe_expand()\cell macroexp.c\cell\row
Called by:\cell expand()\cell macroexp.c\cell\row
\cell macro_expand()\cell macroexp.c\cell\row
\cell substitute_args()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_token()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_token ( struct macro_buffer* tok, const char* start, const char* end )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell init_shared_buffer()\cell macroexp.c\cell\row
Called by:\cell gather_arguments()\cell macroexp.c\cell\row
\cell get_character_constant()\cell macroexp.c\cell\row
\cell get_comment()\cell macroexp.c\cell\row
\cell get_identifier()\cell macroexp.c\cell\row
\cell get_pp_number()\cell macroexp.c\cell\row
\cell get_punctuator()\cell macroexp.c\cell\row
\cell get_string_literal()\cell macroexp.c\cell\row
\cell get_token()\cell macroexp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function substitute_args()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void substitute_args ( struct macro_buffer* dest, struct macro_definition* def, int argc, struct macro_buffer* argv, struct macro_name_list* no_loop, macro_lookup_ftype* lookup_func, void* lookup_baton )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell append_tokens_without_splicing()\cell macroexp.c\cell\row
\cell appendmem()\cell macroexp.c\cell\row
\cell error()\cell utils.c\cell\row
\cell get_token()\cell macroexp.c\cell\row
\cell init_shared_buffer()\cell macroexp.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell scan()\cell macroexp.c\cell\row
\cell  memcmp(), strlen()\cell\cell\row
Called by:\cell expand()\cell macroexp.c\cell\row
\intbl0
}
