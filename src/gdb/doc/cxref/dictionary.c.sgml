<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF dictionary.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for dictionary.c of gdb.cxref.
<author>cxref

<sect>File dictionary.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>add_symbol_hashed_expandable()  :  dictionary.c
<item>add_symbol_linear_expandable()  :  dictionary.c
<item>add_symbol_nonexpandable()  :  dictionary.c
<item>free_hashed_expandable()  :  dictionary.c
<item>free_linear_expandable()  :  dictionary.c
<item>free_obstack()  :  dictionary.c
<item>iter_name_first_hashed()  :  dictionary.c
<item>iter_name_first_linear()  :  dictionary.c
<item>iter_name_next_hashed()  :  dictionary.c
<item>iter_name_next_linear()  :  dictionary.c
<item>iterator_first_hashed()  :  dictionary.c
<item>iterator_first_linear()  :  dictionary.c
<item>iterator_next_hashed()  :  dictionary.c
<item>iterator_next_linear()  :  dictionary.c
<item>size_hashed()  :  dictionary.c
<item>size_hashed_expandable()  :  dictionary.c
<item>size_linear()  :  dictionary.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;buildsym.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;dictionary.h&quot;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define DICT_VECTOR( d )</tt><newline>
<p>
<tt>#define DICT_HASHED_NBUCKETS( d )</tt><newline>
<p>
<tt>#define DICT_HASHED_BUCKETS( d )</tt><newline>
<p>
<tt>#define DICT_HASHED_BUCKET( d, i )</tt><newline>
<p>
<tt>#define DICT_HASHED_EXPANDABLE_NSYMS( d )</tt><newline>
<p>
<tt>#define DICT_LINEAR_NSYMS( d )</tt><newline>
<p>
<tt>#define DICT_LINEAR_SYMS( d )</tt><newline>
<p>
<tt>#define DICT_LINEAR_SYM( d, i )</tt><newline>
<p>
<tt>#define DICT_LINEAR_EXPANDABLE_CAPACITY( d )</tt><newline>
<p>
<tt>#define DICT_EXPANDABLE_INITIAL_CAPACITY 10</tt><newline>
<p>
<tt>#define DICT_HASHTABLE_SIZE( n )</tt><newline>
<p>
<tt>#define DICT_ITERATOR_DICT( iter )</tt><newline>
<p>
<tt>#define DICT_ITERATOR_INDEX( iter )</tt><newline>
<p>
<tt>#define DICT_ITERATOR_CURRENT( iter )</tt><newline>

<sect1>Type enum dict_type

<p>
<itemize>
<item><tt>enum dict_type</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>DICT_HASHED;</tt><newline>
<item><tt>DICT_HASHED_EXPANDABLE;</tt><newline>
<item><tt>DICT_LINEAR;</tt><newline>
<item><tt>DICT_LINEAR_EXPANDABLE;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dict_vector

<p>
<itemize>
<item><tt>struct dict_vector</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>enum dict_type type;</tt><newline>
<item><tt>void (*free_f)(struct dictionary* dict);</tt><newline>
<item><tt>void (*add_symbol)(struct dictionary* dict,struct symbol* sym);</tt><newline>
<item><tt>struct symbol* (*iterator_first)(const struct dictionary* dict,struct dict_iterator* iterator);</tt><newline>
<item><tt>struct symbol* (*iterator_next)(struct dict_iterator* iterator);</tt><newline>
<item><tt>struct symbol* (*iter_name_first)(const struct dictionary* dict,const char* name,struct dict_iterator* iterator);</tt><newline>
<item><tt>struct symbol* (*iter_name_next)(const char* name,struct dict_iterator* iterator);</tt><newline>
<item><tt>int (*size)(const struct dictionary* dict);</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dictionary_hashed

<p>
<itemize>
<item><tt>struct dictionary_hashed</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int nbuckets;</tt><newline>
<item><tt>struct symbol** buckets;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dictionary_hashed_expandable

<p>
<itemize>
<item><tt>struct dictionary_hashed_expandable</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int nbuckets;</tt><newline>
<item><tt>struct symbol** buckets;</tt><newline>
<item><tt>int nsyms;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dictionary_linear

<p>
<itemize>
<item><tt>struct dictionary_linear</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int nsyms;</tt><newline>
<item><tt>struct symbol** syms;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dictionary_linear_expandable

<p>
<itemize>
<item><tt>struct dictionary_linear_expandable</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int nsyms;</tt><newline>
<item><tt>struct symbol** syms;</tt><newline>
<item><tt>int capacity;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dictionary

<p>
<itemize>
<item><tt>struct dictionary</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const struct dict_vector* vector;</tt><newline>
<item><tt>union</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct dictionary_hashed hashed;</tt><newline>
<item><tt>struct dictionary_hashed_expandable hashed_expandable;</tt><newline>
<item><tt>struct dictionary_linear linear;</tt><newline>
<item><tt>struct dictionary_linear_expandable linear_expandable;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>data;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Local Variables

<p>
<bf>dict_hashed_vector</bf><newline>
<tt>static const struct dict_vector dict_hashed_vector</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dict_create_hashed()
</itemize>
</descrip>
<p>
<bf>dict_hashed_expandable_vector</bf><newline>
<tt>static const struct dict_vector dict_hashed_expandable_vector</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dict_create_hashed_expandable()
</itemize>
</descrip>
<p>
<bf>dict_linear_vector</bf><newline>
<tt>static const struct dict_vector dict_linear_vector</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dict_create_linear()
</itemize>
</descrip>
<p>
<bf>dict_linear_expandable_vector</bf><newline>
<tt>static const struct dict_vector dict_linear_expandable_vector</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dict_create_linear_expandable()
</itemize>
</descrip>

<sect1>Global Function dict_add_symbol()

<p><tt>void dict_add_symbol ( struct dictionary* dict, struct symbol* sym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_class_symtab_symbol()  :  jv-lang.c
<item>add_symbol()  :  mdebugread.c
<item>check_one_possible_namespace_symbol()  :  cp-namespace.c
</itemize>
</descrip>

<sect1>Global Function dict_create_hashed()

<p><tt>struct dictionary* dict_create_hashed ( struct obstack* obstack, const struct pending* symbol_list )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>insert_symbol_hashed()  :  dictionary.c
<item>internal_error()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>finish_block()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dict_hashed_vector  :  dictionary.c
</itemize>
</descrip>

<sect1>Global Function dict_create_hashed_expandable()

<p><tt>struct dictionary* dict_create_hashed_expandable ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xcalloc()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_java_class_symtab()  :  jv-lang.c
<item>initialize_namespace_symtab()  :  cp-namespace.c
<item>new_block()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dict_hashed_expandable_vector  :  dictionary.c
</itemize>
</descrip>

<sect1>Global Function dict_create_linear()

<p><tt>struct dictionary* dict_create_linear ( struct obstack* obstack, const struct pending* symbol_list )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>finish_block()  :  buildsym.c
<item>get_java_class_symtab()  :  jv-lang.c
<item>initialize_namespace_symtab()  :  cp-namespace.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dict_linear_vector  :  dictionary.c
</itemize>
</descrip>

<sect1>Global Function dict_create_linear_expandable()

<p><tt>struct dictionary* dict_create_linear_expandable ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>new_block()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dict_linear_expandable_vector  :  dictionary.c
</itemize>
</descrip>

<sect1>Global Function dict_empty()

<p><tt>int dict_empty ( struct dictionary* dict )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dict_iterator_first()  :  dictionary.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_of_local()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function dict_free()

<p><tt>void dict_free ( struct dictionary* dict )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_class_block()  :  jv-lang.c
<item>free_namespace_block()  :  cp-namespace.c
<item>free_symtab_block()  :  symmisc.c
</itemize>
</descrip>

<sect1>Global Function dict_iter_name_first()

<p><tt>struct symbol* dict_iter_name_first ( const struct dictionary* dict, const char* name, struct dict_iterator* iterator )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>lookup_block_symbol()  :  symtab.c
<item>lookup_block_symbol_all()  :  symtab.c
<item>make_symbol_overload_list_qualified()  :  cp-support.c
</itemize>
</descrip>

<sect1>Global Function dict_iter_name_next()

<p><tt>struct symbol* dict_iter_name_next ( const char* name, struct dict_iterator* iterator )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>lookup_block_symbol()  :  symtab.c
<item>lookup_block_symbol_all()  :  symtab.c
<item>make_symbol_overload_list_qualified()  :  cp-support.c
</itemize>
</descrip>

<sect1>Global Function dict_iterator_first()

<p><tt>struct symbol* dict_iterator_first ( const struct dictionary* dict, struct dict_iterator* iterator )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_add_block_symbols()  :  ada-lang.c
<item>add_local_symbols()  :  tracepoint.c
<item>dict_empty()  :  dictionary.c
<item>dump_symtab_1()  :  symmisc.c
<item>find_pc_sect_symtab()  :  symtab.c
<item>finish_block()  :  buildsym.c
<item>free_symtab_block()  :  symmisc.c
<item>maintenance_cplus_namespace()  :  cp-namespace.c
<item>make_file_symbol_completion_list()  :  symtab.c
<item>make_symbol_completion_list()  :  symtab.c
<item>mylookup_symbol()  :  mdebugread.c
<item>objfile_relocate()  :  objfiles.c
<item>parse_symbol()  :  mdebugread.c
<item>patch_opaque_types()  :  coffread.c
<item>print_block_frame_labels()  :  stack.c
<item>print_block_frame_locals()  :  stack.c
<item>print_frame_arg_vars()  :  stack.c
<item>print_frame_args()  :  stack.c
<item>scope_info()  :  tracepoint.c
<item>search_symbols()  :  symtab.c
<item>symtab_for_sym()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function dict_iterator_next()

<p><tt>struct symbol* dict_iterator_next ( struct dict_iterator* iterator )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_add_block_symbols()  :  ada-lang.c
<item>add_local_symbols()  :  tracepoint.c
<item>dump_symtab_1()  :  symmisc.c
<item>find_pc_sect_symtab()  :  symtab.c
<item>finish_block()  :  buildsym.c
<item>free_symtab_block()  :  symmisc.c
<item>maintenance_cplus_namespace()  :  cp-namespace.c
<item>make_file_symbol_completion_list()  :  symtab.c
<item>make_symbol_completion_list()  :  symtab.c
<item>mylookup_symbol()  :  mdebugread.c
<item>objfile_relocate()  :  objfiles.c
<item>parse_symbol()  :  mdebugread.c
<item>patch_opaque_types()  :  coffread.c
<item>print_block_frame_labels()  :  stack.c
<item>print_block_frame_locals()  :  stack.c
<item>print_frame_arg_vars()  :  stack.c
<item>print_frame_args()  :  stack.c
<item>scope_info()  :  tracepoint.c
<item>search_symbols()  :  symtab.c
<item>symtab_for_sym()  :  ada-lang.c
</itemize>
</descrip>

<sect1>Global Function dict_size()

<p><tt>int dict_size ( const struct dictionary* dict )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dump_symtab_1()  :  symmisc.c
</itemize>
</descrip>

<sect1>Local Function add_symbol_hashed_expandable()

<p><tt>static void add_symbol_hashed_expandable ( struct dictionary* dict, struct symbol* sym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>expand_hashtable()  :  dictionary.c
<item>insert_symbol_hashed()  :  dictionary.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dictionary.c
</itemize>
</descrip>

<sect1>Local Function add_symbol_linear_expandable()

<p><tt>static void add_symbol_linear_expandable ( struct dictionary* dict, struct symbol* sym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dictionary.c
</itemize>
</descrip>

<sect1>Local Function add_symbol_nonexpandable()

<p><tt>static void add_symbol_nonexpandable ( struct dictionary* dict, struct symbol* sym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dictionary.c
</itemize>
</descrip>

<sect1>Local Function expand_hashtable()

<p><tt>static void expand_hashtable ( struct dictionary* dict )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>insert_symbol_hashed()  :  dictionary.c
<item>xcalloc()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_symbol_hashed_expandable()  :  dictionary.c
</itemize>
</descrip>

<sect1>Local Function free_hashed_expandable()

<p><tt>static void free_hashed_expandable ( struct dictionary* dict )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dictionary.c
</itemize>
</descrip>

<sect1>Local Function free_linear_expandable()

<p><tt>static void free_linear_expandable ( struct dictionary* dict )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dictionary.c
</itemize>
</descrip>

<sect1>Local Function free_obstack()

<p><tt>static void free_obstack ( struct dictionary* dict )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dictionary.c
</itemize>
</descrip>

<sect1>Local Function insert_symbol_hashed()

<p><tt>static void insert_symbol_hashed ( struct dictionary* dict, struct symbol* sym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>msymbol_hash_iw()  :  minsyms.c
<item>symbol_search_name()  :  symtab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_symbol_hashed_expandable()  :  dictionary.c
<item>dict_create_hashed()  :  dictionary.c
<item>expand_hashtable()  :  dictionary.c
</itemize>
</descrip>

<sect1>Local Function iter_name_first_hashed()

<p><tt>static struct symbol* iter_name_first_hashed ( const struct dictionary* dict, const char* name, struct dict_iterator* iterator )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>msymbol_hash_iw()  :  minsyms.c
<item>psym_name_match()  :  symtab.c
<item>strcmp_iw()  :  utils.c
<item>symbol_search_name()  :  symtab.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>psym_equivalences  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function iter_name_first_linear()

<p><tt>static struct symbol* iter_name_first_linear ( const struct dictionary* dict, const char* name, struct dict_iterator* iterator )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>iter_name_next_linear()  :  dictionary.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dictionary.c
</itemize>
</descrip>

<sect1>Local Function iter_name_next_hashed()

<p><tt>static struct symbol* iter_name_next_hashed ( const char* name, struct dict_iterator* iterator )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>psym_name_match()  :  symtab.c
<item>strcmp_iw()  :  utils.c
<item>symbol_search_name()  :  symtab.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>psym_equivalences  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function iter_name_next_linear()

<p><tt>static struct symbol* iter_name_next_linear ( const char* name, struct dict_iterator* iterator )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>psym_name_match()  :  symtab.c
<item>strcmp_iw()  :  utils.c
<item>symbol_search_name()  :  symtab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>iter_name_first_linear()  :  dictionary.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>psym_equivalences  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function iterator_first_hashed()

<p><tt>static struct symbol* iterator_first_hashed ( const struct dictionary* dict, struct dict_iterator* iterator )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>iterator_hashed_advance()  :  dictionary.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dictionary.c
</itemize>
</descrip>

<sect1>Local Function iterator_first_linear()

<p><tt>static struct symbol* iterator_first_linear ( const struct dictionary* dict, struct dict_iterator* iterator )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dictionary.c
</itemize>
</descrip>

<sect1>Local Function iterator_hashed_advance()

<p><tt>static struct symbol* iterator_hashed_advance ( struct dict_iterator* iterator )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>iterator_first_hashed()  :  dictionary.c
<item>iterator_next_hashed()  :  dictionary.c
</itemize>
</descrip>

<sect1>Local Function iterator_next_hashed()

<p><tt>static struct symbol* iterator_next_hashed ( struct dict_iterator* iterator )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>iterator_hashed_advance()  :  dictionary.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dictionary.c
</itemize>
</descrip>

<sect1>Local Function iterator_next_linear()

<p><tt>static struct symbol* iterator_next_linear ( struct dict_iterator* iterator )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dictionary.c
</itemize>
</descrip>

<sect1>Local Function size_hashed()

<p><tt>static int size_hashed ( const struct dictionary* dict )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dictionary.c
</itemize>
</descrip>

<sect1>Local Function size_hashed_expandable()

<p><tt>static int size_hashed_expandable ( const struct dictionary* dict )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dictionary.c
</itemize>
</descrip>

<sect1>Local Function size_linear()

<p><tt>static int size_linear ( const struct dictionary* dict )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dictionary.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dictionary.c
</itemize>
</descrip>

</article>
