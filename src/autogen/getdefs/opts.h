/*   -*- buffer-read-only: t -*- vi: set ro:
 *  
 *  DO NOT EDIT THIS FILE   (opts.h)
 *  
 *  It has been AutoGen-ed  January  9, 2014 at 02:54:45 PM by AutoGen 5.15
 *  From the definitions    ./opts.def
 *  and the template file   options
 *
 * Generated from AutoOpts 36:3:11 templates.
 *
 *  AutoOpts is a copyrighted work.  This header file is not encumbered
 *  by AutoOpts licensing, but is provided under the licensing terms chosen
 *  by the getdefs author or copyright holder.  AutoOpts is
 *  licensed under the terms of the LGPL.  The redistributable library
 *  (``libopts'') is licensed under the terms of either the LGPL or, at the
 *  users discretion, the BSD license.  See the AutoOpts and/or libopts sources
 *  for details.
 *
 * The getdefs program is copyrighted and licensed
 * under the following terms:
 *
 *  Copyright (C) 1999-2012 Bruce Korb, all rights reserved.
 *  This is free software. It is licensed for use, modification and
 *  redistribution under the terms of the
 *  GNU General Public License, version 3 or later
 *      <http://gnu.org/licenses/gpl.html>
 *
 *  getdefs is free software: you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the
 *  Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  getdefs is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License along
 *  with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 *  This file contains the programmatic interface to the Automated
 *  Options generated for the getdefs program.
 *  These macros are documented in the AutoGen info file in the
 *  "AutoOpts" chapter.  Please refer to that doc for usage help.
 */
#ifndef AUTOOPTS_OPTS_H_GUARD
#define AUTOOPTS_OPTS_H_GUARD 1
#include <autoopts/options.h>

/*
 *  Ensure that the library used for compiling this generated header is at
 *  least as new as the version current when the header template was released
 *  (not counting patch version increments).  Also ensure that the oldest
 *  tolerable version is at least as old as what was current when the header
 *  template was released.
 */
#define AO_TEMPLATE_VERSION 147459
#if (AO_TEMPLATE_VERSION < OPTIONS_MINIMUM_VERSION) \
 || (AO_TEMPLATE_VERSION > OPTIONS_STRUCT_VERSION)
# error option template version mismatches autoopts/options.h header
  Choke Me.
#endif

/*
 *  Enumeration of each option:
 */
typedef enum {
    INDEX_OPT_DEFS_TO_GET    =  0,
    INDEX_OPT_ORDERING       =  1,
    INDEX_OPT_FIRST_INDEX    =  2,
    INDEX_OPT_INPUT          =  3,
    INDEX_OPT_SUBBLOCK       =  4,
    INDEX_OPT_LISTATTR       =  5,
    INDEX_OPT_FILELIST       =  6,
    INDEX_OPT_ASSIGN         =  8,
    INDEX_OPT_COMMON_ASSIGN  =  9,
    INDEX_OPT_COPY           = 10,
    INDEX_OPT_SRCFILE        = 11,
    INDEX_OPT_LINENUM        = 12,
    INDEX_OPT_OUTPUT         = 14,
    INDEX_OPT_AUTOGEN        = 15,
    INDEX_OPT_TEMPLATE       = 16,
    INDEX_OPT_AGARG          = 17,
    INDEX_OPT_BASE_NAME      = 18,
    INDEX_OPT_VERSION        = 19,
    INDEX_OPT_HELP           = 20,
    INDEX_OPT_MORE_HELP      = 21,
    INDEX_OPT_SAVE_OPTS      = 22,
    INDEX_OPT_LOAD_OPTS      = 23
} teOptIndex;

#define OPTION_CT    24
#define GETDEFS_VERSION       "1.5"
#define GETDEFS_FULL_VERSION  "getdefs (GNU AutoGen) 1.5"

/*
 *  Interface defines for all options.  Replace "n" with the UPPER_CASED
 *  option name (as in the teOptIndex enumeration above).
 *  e.g. HAVE_OPT(DEFS_TO_GET)
 */
#define         DESC(n) (getdefsOptions.pOptDesc[INDEX_OPT_## n])
#define     HAVE_OPT(n) (! UNUSED_OPT(& DESC(n)))
#define      OPT_ARG(n) (DESC(n).optArg.argString)
#define    STATE_OPT(n) (DESC(n).fOptState & OPTST_SET_MASK)
#define    COUNT_OPT(n) (DESC(n).optOccCt)
#define    ISSEL_OPT(n) (SELECTED_OPT(&DESC(n)))
#define ISUNUSED_OPT(n) (UNUSED_OPT(& DESC(n)))
#define  ENABLED_OPT(n) (! DISABLED_OPT(& DESC(n)))
#define  STACKCT_OPT(n) (((tArgList*)(DESC(n).optCookie))->useCt)
#define STACKLST_OPT(n) (((tArgList*)(DESC(n).optCookie))->apzArgs)
#define    CLEAR_OPT(n) STMTS( \
                DESC(n).fOptState &= OPTST_PERSISTENT_MASK;   \
                if ((DESC(n).fOptState & OPTST_INITENABLED) == 0) \
                    DESC(n).fOptState |= OPTST_DISABLED; \
                DESC(n).optCookie = NULL )

/* * * * * *
 *
 *  Enumeration of getdefs exit codes
 */
typedef enum {
    GETDEFS_EXIT_SUCCESS = 0,
    GETDEFS_EXIT_FAILURE = 1
} getdefs_exit_code_t;
/*
 *  Make sure there are no #define name conflicts with the option names
 */
#ifndef     NO_OPTION_NAME_WARNINGS
# ifdef    DEFS_TO_GET
#  warning undefining DEFS_TO_GET due to option name conflict
#  undef   DEFS_TO_GET
# endif
# ifdef    ORDERING
#  warning undefining ORDERING due to option name conflict
#  undef   ORDERING
# endif
# ifdef    FIRST_INDEX
#  warning undefining FIRST_INDEX due to option name conflict
#  undef   FIRST_INDEX
# endif
# ifdef    INPUT
#  warning undefining INPUT due to option name conflict
#  undef   INPUT
# endif
# ifdef    SUBBLOCK
#  warning undefining SUBBLOCK due to option name conflict
#  undef   SUBBLOCK
# endif
# ifdef    LISTATTR
#  warning undefining LISTATTR due to option name conflict
#  undef   LISTATTR
# endif
# ifdef    FILELIST
#  warning undefining FILELIST due to option name conflict
#  undef   FILELIST
# endif
# ifdef    DOC_INSERT
#  warning undefining DOC_INSERT due to option name conflict
#  undef   DOC_INSERT
# endif
# ifdef    ASSIGN
#  warning undefining ASSIGN due to option name conflict
#  undef   ASSIGN
# endif
# ifdef    COMMON_ASSIGN
#  warning undefining COMMON_ASSIGN due to option name conflict
#  undef   COMMON_ASSIGN
# endif
# ifdef    COPY
#  warning undefining COPY due to option name conflict
#  undef   COPY
# endif
# ifdef    SRCFILE
#  warning undefining SRCFILE due to option name conflict
#  undef   SRCFILE
# endif
# ifdef    LINENUM
#  warning undefining LINENUM due to option name conflict
#  undef   LINENUM
# endif
# ifdef    DOC_OUTPUT
#  warning undefining DOC_OUTPUT due to option name conflict
#  undef   DOC_OUTPUT
# endif
# ifdef    OUTPUT
#  warning undefining OUTPUT due to option name conflict
#  undef   OUTPUT
# endif
# ifdef    AUTOGEN
#  warning undefining AUTOGEN due to option name conflict
#  undef   AUTOGEN
# endif
# ifdef    TEMPLATE
#  warning undefining TEMPLATE due to option name conflict
#  undef   TEMPLATE
# endif
# ifdef    AGARG
#  warning undefining AGARG due to option name conflict
#  undef   AGARG
# endif
# ifdef    BASE_NAME
#  warning undefining BASE_NAME due to option name conflict
#  undef   BASE_NAME
# endif
#else  /* NO_OPTION_NAME_WARNINGS */
# undef DEFS_TO_GET
# undef ORDERING
# undef FIRST_INDEX
# undef INPUT
# undef SUBBLOCK
# undef LISTATTR
# undef FILELIST
# undef DOC_INSERT
# undef ASSIGN
# undef COMMON_ASSIGN
# undef COPY
# undef SRCFILE
# undef LINENUM
# undef DOC_OUTPUT
# undef OUTPUT
# undef AUTOGEN
# undef TEMPLATE
# undef AGARG
# undef BASE_NAME
#endif  /*  NO_OPTION_NAME_WARNINGS */

/* * * * * *
 *
 *  Interface defines for specific options.
 */
#define VALUE_OPT_DEFS_TO_GET    0
#define VALUE_OPT_ORDERING       1
#define VALUE_OPT_FIRST_INDEX    2

#define OPT_VALUE_FIRST_INDEX    (DESC(FIRST_INDEX).optArg.argInt)
#define VALUE_OPT_INPUT          3

#define SET_OPT_INPUT(a)   STMTS( \
        DESC(INPUT).optActualIndex = 3; \
        DESC(INPUT).optActualValue = VALUE_OPT_INPUT; \
        DESC(INPUT).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(INPUT).fOptState |= OPTST_SET; \
        DESC(INPUT).optArg.argString = (a); \
        (*(DESC(INPUT).pOptProc))(&getdefsOptions, \
                getdefsOptions.pOptDesc + 3); )
#define VALUE_OPT_SUBBLOCK       4
#define VALUE_OPT_LISTATTR       5
#define VALUE_OPT_FILELIST       6
#define VALUE_OPT_ASSIGN         8
#define VALUE_OPT_COMMON_ASSIGN  9
#define VALUE_OPT_COPY           10
#define VALUE_OPT_SRCFILE        11
#define VALUE_OPT_LINENUM        12
#define VALUE_OPT_OUTPUT         14
#define VALUE_OPT_AUTOGEN        15

#define WHICH_OPT_AUTOGEN        (DESC(AUTOGEN).optActualValue)
#define WHICH_IDX_AUTOGEN        (DESC(AUTOGEN).optActualIndex)
#define VALUE_OPT_TEMPLATE       16

#define SET_OPT_TEMPLATE(a)   STMTS( \
        DESC(TEMPLATE).optActualIndex = 16; \
        DESC(TEMPLATE).optActualValue = VALUE_OPT_TEMPLATE; \
        DESC(TEMPLATE).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(TEMPLATE).fOptState |= OPTST_SET; \
        DESC(TEMPLATE).optArg.argString = (a) )
#define VALUE_OPT_AGARG          17
#define VALUE_OPT_BASE_NAME      18

#define VALUE_OPT_VERSION          INDEX_OPT_VERSION
#define VALUE_OPT_HELP             INDEX_OPT_HELP
#define VALUE_OPT_MORE_HELP        INDEX_OPT_MORE_HELP
#define VALUE_OPT_SAVE_OPTS        INDEX_OPT_SAVE_OPTS
#define VALUE_OPT_LOAD_OPTS        INDEX_OPT_LOAD_OPTS
#define SET_OPT_SAVE_OPTS(a)   STMTS( \
        DESC(SAVE_OPTS).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(SAVE_OPTS).fOptState |= OPTST_SET; \
        DESC(SAVE_OPTS).optArg.argString = (char const*)(a) )
/*
 *  Interface defines not associated with particular options
 */
#define ERRSKIP_OPTERR  STMTS(getdefsOptions.fOptSet &= ~OPTPROC_ERRSTOP)
#define ERRSTOP_OPTERR  STMTS(getdefsOptions.fOptSet |= OPTPROC_ERRSTOP)
#define RESTART_OPT(n)  STMTS( \
                getdefsOptions.curOptIdx = (n); \
                getdefsOptions.pzCurOpt  = NULL)
#define START_OPT       RESTART_OPT(1)
#define USAGE(c)        (*getdefsOptions.pUsageProc)(&getdefsOptions, c)
/* extracted from opthead.tlib near line 469 */

#ifdef  __cplusplus
extern "C" {
#endif


/* * * * * *
 *
 *  Declare the getdefs option descriptor.
 */
extern tOptions getdefsOptions;

#if defined(ENABLE_NLS)
# ifndef _
#   include <stdio.h>
static inline char* aoGetsText(char const* pz) {
    if (pz == NULL) return NULL;
    return (char*)gettext(pz);
}
#   define _(s)  aoGetsText(s)
# endif /* _() */

# define OPT_NO_XLAT_CFG_NAMES  STMTS(getdefsOptions.fOptSet |= \
                                    OPTPROC_NXLAT_OPT_CFG;)
# define OPT_NO_XLAT_OPT_NAMES  STMTS(getdefsOptions.fOptSet |= \
                                    OPTPROC_NXLAT_OPT|OPTPROC_NXLAT_OPT_CFG;)

# define OPT_XLAT_CFG_NAMES     STMTS(getdefsOptions.fOptSet &= \
                                  ~(OPTPROC_NXLAT_OPT|OPTPROC_NXLAT_OPT_CFG);)
# define OPT_XLAT_OPT_NAMES     STMTS(getdefsOptions.fOptSet &= \
                                  ~OPTPROC_NXLAT_OPT;)

#else   /* ENABLE_NLS */
# define OPT_NO_XLAT_CFG_NAMES
# define OPT_NO_XLAT_OPT_NAMES

# define OPT_XLAT_CFG_NAMES
# define OPT_XLAT_OPT_NAMES

# ifndef _
#   define _(_s)  _s
# endif
#endif  /* ENABLE_NLS */

#ifdef  __cplusplus
}
#endif
#endif /* AUTOOPTS_OPTS_H_GUARD */
/* opts.h ends here */
