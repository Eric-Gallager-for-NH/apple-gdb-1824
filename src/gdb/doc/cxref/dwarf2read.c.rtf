{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF dwarf2read.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File dwarf2read.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/elf/dwarf2.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "buildsym.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/demangle.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/filenames.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/hashtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "macrotab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "complaints.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "bcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dwarf2expr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dwarf2loc.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "dwarf2read.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dwarf2loc.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "cp-support.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/hashtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <fcntl.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "db-access-functions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dwarf2read.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <ctype.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objc-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <Availability.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <libgen.h>\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define _ACTUAL_COMP_UNIT_HEADER_SIZE 11\par}
{\s5\f1\fs20\ql\sb50\sa50 #define _ACTUAL_PUBNAMES_HEADER_SIZE 13\par}
{\s5\f1\fs20\ql\sb50\sa50 #define _ACTUAL_PUBTYPES_HEADER_SIZE 13\par}
{\s5\f1\fs20\ql\sb50\sa50 #define _ACTUAL_ARANGES_HEADER_SIZE 12\par}
{\s5\f1\fs20\ql\sb50\sa50 #define INFO_SECTION "LC_SEGMENT.__DWARF.__debug_info"\par}
{\s5\f1\fs20\ql\sb50\sa50 #define ABBREV_SECTION "LC_SEGMENT.__DWARF.__debug_abbrev"\par}
{\s5\f1\fs20\ql\sb50\sa50 #define LINE_SECTION "LC_SEGMENT.__DWARF.__debug_line"\par}
{\s5\f1\fs20\ql\sb50\sa50 #define PUBNAMES_SECTION "LC_SEGMENT.__DWARF.__debug_pubnames"\par}
{\s5\f1\fs20\ql\sb50\sa50 #define PUBTYPES_SECTION "LC_SEGMENT.__DWARF.__debug_pubtypes"\par}
{\s5\f1\fs20\ql\sb50\sa50 #define INLINED_SECTION "LC_SEGMENT.__DWARF.__debug_inlined"\par}
{\s5\f1\fs20\ql\sb50\sa50 #define ARANGES_SECTION "LC_SEGMENT.__DWARF.__debug_aranges"\par}
{\s5\f1\fs20\ql\sb50\sa50 #define LOC_SECTION "LC_SEGMENT.__DWARF.__debug_loc"\par}
{\s5\f1\fs20\ql\sb50\sa50 #define MACINFO_SECTION "LC_SEGMENT.__DWARF.__debug_macinfo"\par}
{\s5\f1\fs20\ql\sb50\sa50 #define STR_SECTION "LC_SEGMENT.__DWARF.__debug_str"\par}
{\s5\f1\fs20\ql\sb50\sa50 #define FRAME_SECTION "LC_SEGMENT.__DWARF.__debug_frame"\par}
{\s5\f1\fs20\ql\sb50\sa50 #define RANGES_SECTION "LC_SEGMENT.__DWARF.__debug_ranges"\par}
{\s5\f1\fs20\ql\sb50\sa50 #define EH_FRAME_SECTION "LC_SEGMENT.__TEXT.__eh_frame"\par}
{\s5\f1\fs20\ql\sb50\sa50 #define MACINFO_SECTION "debug_macinfo_do_not_use"\par}
{\s5\f1\fs20\ql\sb50\sa50 #define ABBREV_HASH_SIZE 121\par}
{\s5\f1\fs20\ql\sb50\sa50 #define REF_HASH_SIZE 1021\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DW_STRING( attr )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DW_UNSND( attr )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DW_BLOCK( attr )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DW_SND( attr )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DW_ADDR( attr )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define ATTR_ALLOC_CHUNK 4\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DW_FIELD_ALLOC_CHUNK 4\par}
{\s5\f1\fs20\ql\sb50\sa50 #define TARGET_ADDRESS_BYTES\par}
{\s5\f1\fs20\ql\sb50\sa50 #define MAX_SEP_LEN 2\par}
{\s5\f1\fs20\ql\sb50\sa50 #define LOCDESC_STACKSIZE 64\par}
{\s5\f1\fs20\ql\sb50\sa50 #define MAX_OPEN_DBS 100\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SELECT_DIE_STR "SELECT long_canonical FROM debug_info WHERE die_id == ?"\par}
{\s5\f1\fs20\ql\sb50\sa50 #define FIND_STRING_STR "SELECT string FROM debug_str WHERE string_id == ?"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Typedef _COMP_UNIT_HEADER\par}
{\s5\f1\fs20\ql\sb50\sa50 typedef struct comp_unit_header _COMP_UNIT_HEADER\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct comp_unit_header}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int length;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned short version;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int abbrev_offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char addr_size;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Typedef _PUBNAMES_HEADER\par}
{\s5\f1\fs20\ql\sb50\sa50 typedef struct pubnames_header _PUBNAMES_HEADER\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct pubnames_header}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int length;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char version;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int info_offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int info_size;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Typedef _PUBTYPES_HEADER\par}
{\s5\f1\fs20\ql\sb50\sa50 typedef struct pubtypes_header _PUBTYPES_HEADER\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct pubtypes_header}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int length;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char version;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int info_offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int info_size;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Typedef _ARANGES_HEADER\par}
{\s5\f1\fs20\ql\sb50\sa50 typedef struct aranges_header _ARANGES_HEADER\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct aranges_header}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int length;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned short version;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int info_offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char addr_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char seg_size;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Typedef _STATEMENT_PROLOGUE\par}
{\s5\f1\fs20\ql\sb50\sa50 typedef struct statement_prologue _STATEMENT_PROLOGUE\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct statement_prologue}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int total_length;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned short version;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int prologue_length;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char minimum_instruction_length;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char default_is_stmt;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char line_base;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char line_range;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char opcode_base;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char* standard_opcode_lengths;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dwarf2_per_objfile\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_per_objfile}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int info_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int abbrev_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int line_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int pubnames_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int pubtypes_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int aranges_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int loc_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int macinfo_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int str_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int ranges_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int frame_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int eh_frame_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int inlined_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* info_buffer;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* abbrev_buffer;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* line_buffer;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* str_buffer;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* macinfo_buffer;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* ranges_buffer;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* loc_buffer;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* inlined_buffer;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bfd_window info_window;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bfd_window abbrev_window;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bfd_window line_window;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bfd_window str_window;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bfd_window macinfo_window;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bfd_window ranges_window;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bfd_window loc_window;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_per_cu_data** all_comp_units;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int n_comp_units;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_per_cu_data* read_in_chain;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct rb_repository_data\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct rb_repository_data}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct type* type_data;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct die_info* die_data;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct comp_unit_head\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct comp_unit_head}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned long length;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 short version;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int abbrev_offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char addr_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char signed_addr_p;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int offset_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int initial_length_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* cu_head_ptr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* first_die_ptr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct comp_unit_head* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR base_address_untranslated;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int base_known;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dwarf2_cu\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_cu}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct objfile* objfile;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct comp_unit_head header;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct function_range* first_fn;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct function_range* last_fn;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct function_range* cached_fn;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum language language;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const struct language_defn* language_defn;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* producer;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* comp_dir;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct pending** list_in_scope;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct type* ftypes[29];}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct abbrev_info** dwarf2_abbrevs;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct obstack abbrev_obstack;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 htab_t partial_dies;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct obstack comp_unit_obstack;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_per_cu_data* read_in_chain;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_per_cu_data* per_cu;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int last_used;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct die_info* die_ref_table[1021];}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct die_info* dies;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 htab_t dependencies;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int mark:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int has_form_ref_addr:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int has_namespace_info:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int cu_is_optimized:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 sqlite3* repository;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* repository_name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct oso_to_final_addr_map* addr_map;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dwarf2_per_cu_data\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_per_cu_data}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned long offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned long length:31;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned long queued:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_cu* cu;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 htab_t type_hash;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct partial_symtab* psymtab;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct file_entry\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct file_entry}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int dir_index;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int mod_time;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int length;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int included_p;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct line_header\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct line_header}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int total_length;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned short version;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int header_length;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char minimum_instruction_length;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char default_is_stmt;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int line_base;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char line_range;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char opcode_base;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char* standard_opcode_lengths;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int num_include_dirs;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int include_dirs_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char** include_dirs;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int num_file_names;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int file_names_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct file_entry* file_names;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* statement_program_start;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* statement_program_end;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct partial_die_info\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct partial_die_info}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum dwarf_tag tag:16;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int language:8;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int has_children:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int is_external:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int is_declaration:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int has_type:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int has_specification:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int has_stmt_list:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int has_pc_info:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int has_repo_specification:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int has_repository:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int has_repository_type:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int scope_set:1;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* dirname;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* scope;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf_block* locdesc;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR lowpc;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR highpc;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* sibling;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int spec_offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int repo_spec_id;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* repo_name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int line_offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct partial_die_info* die_parent;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct partial_die_info* die_child;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct partial_die_info* die_sibling;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* equiv_name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 short int isa_value;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct abbrev_info\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct abbrev_info}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int number;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum dwarf_tag tag;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned short has_children;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned short num_attrs;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct attr_abbrev* attrs;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct abbrev_info* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct attr_abbrev\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct attr_abbrev}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum dwarf_attribute name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum dwarf_form form;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct die_info\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct die_info}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum dwarf_tag tag;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int abbrev;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int repository_id;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int num_attrs;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct attribute* attrs;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct die_info* next_ref;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct die_info* child;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct die_info* sibling;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct die_info* parent;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct type* type;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct attribute\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct attribute}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum dwarf_attribute name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum dwarf_form form;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 union}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 char* str;}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 struct dwarf_block* blk;}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 unsigned long unsnd;}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 long int snd;}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR addr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 u;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct function_range\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct function_range}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR lowpc;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR highpc;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int seen_line;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct function_range* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dwarf_block\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dwarf_block}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* data;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct nextfield\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct nextfield}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct nextfield* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int accessibility;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int virtuality;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct field field;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct nextfnfield\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct nextfnfield}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct nextfnfield* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct fn_field fnfield;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct fnfieldlist\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct fnfieldlist}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int length;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct nextfnfield* head;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct field_info\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct field_info}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct nextfield* fields;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int nfields;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int nbaseclasses;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int non_public_fields;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct nextfnfield* fnfields;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct fnfieldlist* fnfieldlists;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int nfnfields;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dwarf2_queue_item\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_queue_item}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_per_cu_data* per_cu;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_queue_item* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type enum db_status\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum db_status}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 DB_UNKNOWN;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 DB_OPEN;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 DB_ABBREVS_LOADED;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 DB_CLOSED;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct objfile_list_node\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct objfile_list_node}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct objfile* ofile;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct objfile_list_node* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct database_info\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct database_info}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* fullname;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct abbrev_info* abbrev_table;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum db_status current_status;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct rb_tree_node* db_types;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct objfile_list_node* num_uses;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_cu* dummy_cu;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct objfile* dummy_objfile;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 sqlite3* db;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct final_addr_key\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct final_addr_key}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR final_addr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct oso_to_final_addr_map* map;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dwarf2_offset_and_type\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_offset_and_type}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct type* type;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct attr_pair\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct attr_pair}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int attribute;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int form;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct attr_pair* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable psym_equivalences\par}
{\s5\f1\fs20\ql\sb50\sa50 int psym_equivalences\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell ax-general.c\cell\cell\row
\cell bcache.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell charset.c\cell\cell\row
\cell cli-out.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell complaints.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-abi.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell demangle.c\cell\cell\row
\cell dictionary.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell doublest.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell environ.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-loop.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame-base.c\cell\cell\row
\cell frame-unwind.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell gnu-v2-abi.c\cell\cell\row
\cell gnu-v3-abi.c\cell\cell\row
\cell hpacc-abi.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell interps.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell kod-cisco.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell m2-valprint.c\cell\cell\row
\cell macrocmd.c\cell\cell\row
\cell macroexp.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell observer.c\cell\cell\row
\cell osabi.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell reggroups.c\cell\cell\row
\cell remote-fileio.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell ser-base.c\cell\cell\row
\cell ser-unix.c\cell\cell\row
\cell serial.c\cell\cell\row
\cell solib-null.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell std-regs.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell trad-frame.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-file.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell user-regs.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
\cell wrapper.c\cell\cell\row
Used in:\cell iter_name_first_hashed()\cell dictionary.c\cell\row
\cell iter_name_next_hashed()\cell dictionary.c\cell\row
\cell iter_name_next_linear()\cell dictionary.c\cell\row
\cell lookup_equiv_partial_symbol()\cell symtab.c\cell\row
\cell read_partial_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable dwarf2_allow_inlined_stepping\par}
{\s5\f1\fs20\ql\sb50\sa50 int dwarf2_allow_inlined_stepping\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell frame-unwind.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell _initialize_dwarf2_read()\cell dwarf2read.c\cell\row
\cell inlined_function_update_call_stack()\cell inlining.c\cell\row
\cell process_die()\cell dwarf2read.c\cell\row
\cell rest_of_line_contains_inlined_subroutine()\cell inlining.c\cell\row
\cell step_1()\cell infcmd.c\cell\row
\cell update_tmp_frame_stack()\cell inlining.c\cell\row
\cell verify_stack()\cell inlining.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable dwarf2_debug_inlined_stepping\par}
{\s5\f1\fs20\ql\sb50\sa50 int dwarf2_debug_inlined_stepping\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell frame-unwind.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell _initialize_dwarf2_read()\cell dwarf2read.c\cell\row
\cell check_inlined_function_calls()\cell dwarf2read.c\cell\row
\cell rb_tree_remove_node()\cell dwarf2read.c\cell\row
\cell record_line()\cell buildsym.c\cell\row
\cell step_1_inlining()\cell infcmd.c\cell\row
\cell step_once()\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable dwarf_frame_section\par}
{\s5\f1\fs20\ql\sb50\sa50 asection* dwarf_frame_section\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
Used in:\cell dwarf2_build_frame_info()\cell dwarf2-frame.c\cell\row
\cell dwarf2_has_info_1()\cell dwarf2read.c\cell\row
\cell dwarf2_locate_sections()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable dwarf_eh_frame_section\par}
{\s5\f1\fs20\ql\sb50\sa50 asection* dwarf_eh_frame_section\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
Used in:\cell dwarf2_build_frame_info()\cell dwarf2-frame.c\cell\row
\cell dwarf2_has_info_1()\cell dwarf2read.c\cell\row
\cell dwarf2_locate_sections()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable dwarf2_inform_debugging_optimized_code\par}
{\s5\f1\fs20\ql\sb50\sa50 int dwarf2_inform_debugging_optimized_code\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell dwarf2read.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell interps.c\cell\cell\row
\cell main.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell source.c\cell\cell\row
\cell top.c\cell\cell\row
Used in:\cell _initialize_dwarf2_read()\cell dwarf2read.c\cell\row
\cell adjust_prompts_for_optimized_code()\cell event-top.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable inlined_subroutine_symbols\par}
{\s5\f1\fs20\ql\sb50\sa50 struct pending* inlined_subroutine_symbols\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell dwarf2read.c\cell\cell\row
Used in:\cell fix_inlined_subroutine_symbols()\cell dwarf2read.c\cell\row
\cell process_full_comp_unit()\cell dwarf2read.c\cell\row
\cell read_inlined_subroutine_scope()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable repositories\par}
{\s5\f1\fs20\ql\sb50\sa50 struct database_info* repositories\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell dwarf2read.c\cell\cell\row
Used in:\cell close_dwarf_repositories()\cell dwarf2read.c\cell\row
\cell find_open_repository()\cell dwarf2read.c\cell\row
\cell initialize_repositories()\cell dwarf2read.c\cell\row
\cell open_dwarf_repository()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable num_open_dbs\par}
{\s5\f1\fs20\ql\sb50\sa50 int num_open_dbs\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell dwarf2read.c\cell\cell\row
Used in:\cell close_dwarf_repositories()\cell dwarf2read.c\cell\row
\cell find_open_repository()\cell dwarf2read.c\cell\row
\cell open_dwarf_repository()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable db_stmt1\par}
{\s5\f1\fs20\ql\sb50\sa50 sqlite3_stmt* db_stmt1\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell dwarf2read.c\cell\cell\row
Used in:\cell db_lookup_type()\cell dwarf2read.c\cell\row
\cell finalize_stmts()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable db_stmt2\par}
{\s5\f1\fs20\ql\sb50\sa50 sqlite3_stmt* db_stmt2\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell dwarf2read.c\cell\cell\row
Used in:\cell finalize_stmts()\cell dwarf2read.c\cell\row
\cell get_repository_name()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf2_objfile_data_key\par}
{\s5\f1\fs20\ql\sb50\sa50 static const struct objfile_data* dwarf2_objfile_data_key\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_dwarf2_read()\cell\cell\row
\cell dwarf2_has_info_1()\cell\cell\row
\cell dwarf2_kext_psymtab_to_symtab()\cell\cell\row
\cell dwarf2_psymtab_to_symtab()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf2_per_objfile\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct dwarf2_per_objfile* dwarf2_per_objfile\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell age_cached_comp_units()\cell\cell\row
\cell create_all_comp_units()\cell\cell\row
\cell dwarf2_build_psymtabs_hard()\cell\cell\row
\cell dwarf2_copy_dwarf_from_file()\cell\cell\row
\cell dwarf2_debug_map_psymtab_to_symtab()\cell\cell\row
\cell dwarf2_find_containing_comp_unit()\cell\cell\row
\cell dwarf2_get_pc_bounds()\cell\cell\row
\cell dwarf2_has_info_1()\cell\cell\row
\cell dwarf2_kext_psymtab_to_symtab()\cell\cell\row
\cell dwarf2_locate_sections()\cell\cell\row
\cell dwarf2_psymtab_to_symtab()\cell\cell\row
\cell dwarf2_read_abbrevs()\cell\cell\row
\cell dwarf2_symbol_mark_computed()\cell\cell\row
\cell dwarf_decode_line_header()\cell\cell\row
\cell dwarf_decode_macros()\cell\cell\row
\cell find_debug_info_for_pst()\cell\cell\row
\cell find_partial_die()\cell\cell\row
\cell free_cached_comp_units()\cell\cell\row
\cell free_one_cached_comp_unit()\cell\cell\row
\cell load_comp_unit()\cell\cell\row
\cell load_full_comp_unit()\cell\cell\row
\cell partial_read_comp_unit_head()\cell\cell\row
\cell peek_die_abbrev()\cell\cell\row
\cell process_queue()\cell\cell\row
\cell read_full_die()\cell\cell\row
\cell read_indirect_string()\cell\cell\row
\cell read_partial_die()\cell\cell\row
\cell scan_partial_inlined_function_symbols()\cell\cell\row
\cell skip_one_die()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf_info_section\par}
{\s5\f1\fs20\ql\sb50\sa50 static asection* dwarf_info_section\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf2_copy_dwarf_from_file()\cell\cell\row
\cell dwarf2_has_info_1()\cell\cell\row
\cell dwarf2_locate_sections()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf_abbrev_section\par}
{\s5\f1\fs20\ql\sb50\sa50 static asection* dwarf_abbrev_section\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf2_copy_dwarf_from_file()\cell\cell\row
\cell dwarf2_has_info_1()\cell\cell\row
\cell dwarf2_locate_sections()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf_line_section\par}
{\s5\f1\fs20\ql\sb50\sa50 static asection* dwarf_line_section\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf2_copy_dwarf_from_file()\cell\cell\row
\cell dwarf2_has_info_1()\cell\cell\row
\cell dwarf2_locate_sections()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf_pubnames_section\par}
{\s5\f1\fs20\ql\sb50\sa50 static asection* dwarf_pubnames_section\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf2_locate_sections()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf_pubtypes_section\par}
{\s5\f1\fs20\ql\sb50\sa50 static asection* dwarf_pubtypes_section\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf2_locate_sections()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf_inlined_section\par}
{\s5\f1\fs20\ql\sb50\sa50 static asection* dwarf_inlined_section\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf2_copy_dwarf_from_file()\cell\cell\row
\cell dwarf2_has_info_1()\cell\cell\row
\cell dwarf2_locate_sections()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf_aranges_section\par}
{\s5\f1\fs20\ql\sb50\sa50 static asection* dwarf_aranges_section\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf2_locate_sections()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf_loc_section\par}
{\s5\f1\fs20\ql\sb50\sa50 static asection* dwarf_loc_section\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf2_copy_dwarf_from_file()\cell\cell\row
\cell dwarf2_has_info_1()\cell\cell\row
\cell dwarf2_locate_sections()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf_macinfo_section\par}
{\s5\f1\fs20\ql\sb50\sa50 static asection* dwarf_macinfo_section\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf2_copy_dwarf_from_file()\cell\cell\row
\cell dwarf2_has_info_1()\cell\cell\row
\cell dwarf2_locate_sections()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf_str_section\par}
{\s5\f1\fs20\ql\sb50\sa50 static asection* dwarf_str_section\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf2_copy_dwarf_from_file()\cell\cell\row
\cell dwarf2_has_info_1()\cell\cell\row
\cell dwarf2_locate_sections()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf_ranges_section\par}
{\s5\f1\fs20\ql\sb50\sa50 static asection* dwarf_ranges_section\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf2_copy_dwarf_from_file()\cell\cell\row
\cell dwarf2_has_info_1()\cell\cell\row
\cell dwarf2_locate_sections()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable decode_locdesc_common\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* decode_locdesc_common\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell decode_locdesc()\cell\cell\row
\cell read_common_block()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable isreg\par}
{\s5\f1\fs20\ql\sb50\sa50 static int isreg\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell decode_locdesc()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable bits_per_byte\par}
{\s5\f1\fs20\ql\sb50\sa50 static int bits_per_byte\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf2_add_field()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf2_queue\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct dwarf2_queue_item* dwarf2_queue\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf2_release_queue()\cell\cell\row
\cell process_queue()\cell\cell\row
\cell queue_comp_unit()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf2_queue_tail\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct dwarf2_queue_item* dwarf2_queue_tail\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf2_release_queue()\cell\cell\row
\cell process_queue()\cell\cell\row
\cell queue_comp_unit()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf2_max_cache_age\par}
{\s5\f1\fs20\ql\sb50\sa50 static int dwarf2_max_cache_age\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_dwarf2_read()\cell\cell\row
\cell age_cached_comp_units()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable debug_debugmap\par}
{\s5\f1\fs20\ql\sb50\sa50 static int debug_debugmap\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_dwarf2_read()\cell\cell\row
\cell convert_oso_map_to_final_map()\cell\cell\row
\cell create_kext_addr_map()\cell\cell\row
\cell dwarf2_record_line()\cell\cell\row
\cell translate_common_symbol_debug_map_address()\cell\cell\row
\cell translate_debug_map_address()\cell\cell\row
\cell translate_debug_map_address_with_tuple()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable byte_swap_p\par}
{\s5\f1\fs20\ql\sb50\sa50 static int byte_swap_p\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell db_read_2_bytes()\cell\cell\row
\cell db_read_4_bytes()\cell\cell\row
\cell db_read_8_bytes()\cell\cell\row
\cell dwarf2_build_psymtabs_hard()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable set_dwarf2_cmdlist\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct cmd_list_element* set_dwarf2_cmdlist\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_dwarf2_read()\cell\cell\row
\cell set_dwarf2_cmd()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable show_dwarf2_cmdlist\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct cmd_list_element* show_dwarf2_cmdlist\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_dwarf2_read()\cell\cell\row
\cell show_dwarf2_cmd()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_dwarf2_read()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_dwarf2_read ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell register_objfile_data()\cell objfiles.c\cell\row
\cell  add_prefix_cmd(), add_setshow_boolean_cmd(), add_setshow_zinteger_cmd()\cell\cell\row
Refs Func:\cell set_dwarf2_cmd()\cell dwarf2read.c\cell\row
\cell show_debug_debugmap()\cell dwarf2read.c\cell\row
\cell show_dwarf2_cmd()\cell dwarf2read.c\cell\row
\cell show_dwarf2_max_cache_age()\cell dwarf2read.c\cell\row
Refs Var:\cell debug_debugmap\cell dwarf2read.c\cell\row
\cell dwarf2_allow_inlined_stepping\cell dwarf2read.c\cell\row
\cell dwarf2_debug_inlined_stepping\cell dwarf2read.c\cell\row
\cell dwarf2_inform_debugging_optimized_code\cell dwarf2read.c\cell\row
\cell dwarf2_max_cache_age\cell dwarf2read.c\cell\row
\cell dwarf2_objfile_data_key\cell dwarf2read.c\cell\row
\cell maintenance_set_cmdlist\cell maint.c\cell\row
\cell maintenance_show_cmdlist\cell maint.c\cell\row
\cell set_dwarf2_cmdlist\cell dwarf2read.c\cell\row
\cell show_dwarf2_cmdlist\cell dwarf2read.c\cell\row
\cell  setdebuglist, setlist, showdebuglist, showlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function close_dwarf_repositories()\par}
{\s5\f1\fs20\ql\sb50\sa50 int close_dwarf_repositories ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell db-access-functions.h\cell\cell\row
Calls: \cell decrement_use_count()\cell dwarf2read.c\cell\row
\cell finalize_stmts()\cell dwarf2read.c\cell\row
\cell  sqlite3_close()\cell\cell\row
Called by:\cell free_objfile_internal()\cell objfiles.c\cell\row
Refs Func:\cell  obstack_free()\cell\cell\row
Refs Var:\cell num_open_dbs\cell dwarf2read.c\cell\row
\cell repositories\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf2_build_psymtabs()\par}
{\s5\f1\fs20\ql\sb50\sa50 void dwarf2_build_psymtabs ( struct objfile* objfile, int mainline )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\cell dwarf2_copy_dwarf_from_file()\cell dwarf2read.c\cell\row
\cell init_psymbol_list()\cell symfile.c\cell\row
Called by:\cell coff_symfile_read()\cell coffread.c\cell\row
\cell elf_symfile_read()\cell elfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf2_debug_map_psymtab_to_symtab()\par}
{\s5\f1\fs20\ql\sb50\sa50 void dwarf2_debug_map_psymtab_to_symtab ( struct partial_symtab* pst )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell clear_containing_archive_cache()\cell dbxread.c\cell\row
\cell close_bfd_or_archive()\cell dbxread.c\cell\row
\cell convert_oso_map_to_final_map()\cell dwarf2read.c\cell\row
\cell dwarf2_copy_dwarf_from_file()\cell dwarf2read.c\cell\row
\cell dwarf2_debug_map_psymtab_to_symtab()\cell dwarf2read.c\cell\row
\cell dwarf2_has_info_1()\cell dwarf2read.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell gdb_flush()\cell ui-file.c\cell\row
\cell load_full_comp_unit()\cell dwarf2read.c\cell\row
\cell open_bfd_from_oso()\cell dbxread.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell process_full_comp_unit()\cell dwarf2read.c\cell\row
\cell read_initial_length()\cell dwarf2read.c\cell\row
\cell read_oso_nlists()\cell dbxread.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell wrap_here()\cell utils.c\cell\row
\cell  _obstack_newchunk(), bfd_check_format()\cell\cell\row
Called by:\cell dwarf2_debug_map_psymtab_to_symtab()\cell dwarf2read.c\cell\row
\cell dwarf2_kext_psymtab_to_symtab()\cell dwarf2read.c\cell\row
Used in:\cell read_dbx_symtab()\cell dbxread.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell info_verbose\cell top.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf2_has_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 int dwarf2_has_info ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell dwarf2_has_info_1()\cell dwarf2read.c\cell\row
Called by:\cell coff_symfile_read()\cell coffread.c\cell\row
\cell elf_symfile_read()\cell elfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf2_kext_psymtab_to_symtab()\par}
{\s5\f1\fs20\ql\sb50\sa50 void dwarf2_kext_psymtab_to_symtab ( struct partial_symtab* pst )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell create_kext_addr_map()\cell dwarf2read.c\cell\row
\cell dwarf2_copy_dwarf_from_file()\cell dwarf2read.c\cell\row
\cell dwarf2_debug_map_psymtab_to_symtab()\cell dwarf2read.c\cell\row
\cell dwarf2_has_info_1()\cell dwarf2read.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_debug_info_for_pst()\cell dwarf2read.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell gdb_flush()\cell ui-file.c\cell\row
\cell get_objfile_data()\cell objfiles.c\cell\row
\cell load_full_comp_unit()\cell dwarf2read.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell process_full_comp_unit()\cell dwarf2read.c\cell\row
\cell read_initial_length()\cell dwarf2read.c\cell\row
\cell read_oso_nlists()\cell dbxread.c\cell\row
\cell symfile_bfd_open()\cell symfile.c\cell\row
\cell wrap_here()\cell utils.c\cell\row
\cell  _obstack_newchunk(), bfd_close()\cell\cell\row
Used in:\cell replace_psymbols_with_correct_psymbols()\cell symfile.c\cell\row
Refs Var:\cell dwarf2_objfile_data_key\cell dwarf2read.c\cell\row
\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell info_verbose\cell top.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf2_read_section()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* dwarf2_read_section ( struct objfile* objfile, bfd* abfd, asection* sectp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell symfile_relocate_debug_section()\cell symfile.c\cell\row
\cell  _obstack_newchunk(), bfd_bread(), bfd_seek()\cell\cell\row
Called by:\cell dwarf2_build_frame_info()\cell dwarf2-frame.c\cell\row
\cell dwarf2_copy_dwarf_from_file()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf2_scan_inlined_section_for_psymbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 void dwarf2_scan_inlined_section_for_psymbols ( struct partial_symtab* pst, struct objfile* objfile, enum language psymtab_language )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell add_psymbol_to_list()\cell symfile.c\cell\row
\cell close_bfd_or_archive()\cell dbxread.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell open_bfd_from_oso()\cell dbxread.c\cell\row
\cell perror_with_name()\cell utils.c\cell\row
\cell read_1_byte()\cell dwarf2read.c\cell\row
\cell read_2_bytes()\cell dwarf2read.c\cell\row
\cell read_address()\cell dwarf2read.c\cell\row
\cell read_initial_length()\cell dwarf2read.c\cell\row
\cell read_offset()\cell dwarf2read.c\cell\row
\cell read_unsigned_leb128()\cell dwarf2read.c\cell\row
\cell start_timer()\cell maint.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  bfd_check_format(), bfd_close(), bfd_free_window(), bfd_get_section_contents_in_window_with_mode(), bfd_init_window(), bfd_sections_find_if(), strlen()\cell\cell\row
Called by:\cell read_dbx_symtab()\cell dbxread.c\cell\row
Refs Func:\cell find_debug_inlined_section()\cell dwarf2read.c\cell\row
\cell find_debug_str_section()\cell dwarf2read.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell maint_use_timers\cell maint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf2_scan_pubtype_for_psymbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 void dwarf2_scan_pubtype_for_psymbols ( struct partial_symtab* pst, struct objfile* objfile, enum language psymtab_language )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell add_psymbol_to_list()\cell symfile.c\cell\row
\cell close_bfd_or_archive()\cell dbxread.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell open_bfd_from_oso()\cell dbxread.c\cell\row
\cell perror_with_name()\cell utils.c\cell\row
\cell read_2_bytes()\cell dwarf2read.c\cell\row
\cell read_initial_length()\cell dwarf2read.c\cell\row
\cell read_offset()\cell dwarf2read.c\cell\row
\cell read_string()\cell dwarf2read.c\cell\row
\cell start_timer()\cell maint.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  bfd_check_format(), bfd_close(), bfd_free_window(), bfd_get_section_contents_in_window_with_mode(), bfd_init_window(), bfd_sections_find_if()\cell\cell\row
Called by:\cell read_dbx_symtab()\cell dbxread.c\cell\row
Refs Func:\cell find_pubtypes()\cell dwarf2read.c\cell\row
Refs Var:\cell maint_use_timers\cell maint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_debug_info_for_pst()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* find_debug_info_for_pst ( struct partial_symtab* pst, int match_amount )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell dwarf2_read_abbrevs()\cell dwarf2read.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell partial_read_comp_unit_head()\cell dwarf2read.c\cell\row
\cell peek_die_abbrev()\cell dwarf2read.c\cell\row
\cell read_partial_die()\cell dwarf2read.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_begin(), strcmp(), strlen()\cell\cell\row
Called by:\cell dwarf2_kext_psymtab_to_symtab()\cell dwarf2read.c\cell\row
Refs Func:\cell dwarf2_free_abbrev_table()\cell dwarf2read.c\cell\row
\cell free_cached_comp_units()\cell dwarf2read.c\cell\row
\cell free_stack_comp_unit()\cell dwarf2read.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\cell file_symbols\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function rb_tree_find_node()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct rb_tree_node* rb_tree_find_node ( struct rb_tree_node* root, long long key, int secondary_key )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inlining.h\cell\cell\row
Calls: \cell rb_tree_find_node()\cell dwarf2read.c\cell\row
Called by:\cell add_class_to_cache()\cell objc-lang.c\cell\row
\cell class_valid_p()\cell objc-lang.c\cell\row
\cell lookup_real_class_in_cache()\cell objc-lang.c\cell\row
\cell lookup_repository_type()\cell dwarf2read.c\cell\row
\cell rb_tree_find_node()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function rb_tree_find_node_all_keys()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct rb_tree_node* rb_tree_find_node_all_keys ( struct rb_tree_node* root, long long key, int secondary_key, long long third_key )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inlining.h\cell\cell\row
Calls: \cell rb_tree_find_node_all_keys()\cell dwarf2read.c\cell\row
Called by:\cell lookup_classname_in_cache()\cell objc-lang.c\cell\row
\cell lookup_implementation_in_cache()\cell objc-lang.c\cell\row
\cell rb_tree_find_node_all_keys()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function rb_tree_insert()\par}
{\s5\f1\fs20\ql\sb50\sa50 void rb_tree_insert ( struct rb_tree_node** root, struct rb_tree_node* tree, struct rb_tree_node* new_node )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inlining.h\cell\cell\row
Calls: \cell left_rotate()\cell dwarf2read.c\cell\row
\cell plain_tree_insert()\cell dwarf2read.c\cell\row
\cell right_rotate()\cell dwarf2read.c\cell\row
Called by:\cell add_class_to_cache()\cell objc-lang.c\cell\row
\cell add_classname_to_cache()\cell objc-lang.c\cell\row
\cell add_implementation_to_cache()\cell objc-lang.c\cell\row
\cell dwarf2_add_to_list_of_inlined_calls()\cell dwarf2read.c\cell\row
\cell inlined_function_add_function_names()\cell inlining.c\cell\row
\cell lookup_repository_type()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function translate_debug_map_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 int translate_debug_map_address ( struct oso_to_final_addr_map* map, CORE_ADDR oso_addr, CORE_ADDR* addr, int highpc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell translate_debug_map_address_with_tuple()\cell dwarf2read.c\cell\row
\cell  bsearch()\cell\cell\row
Called by:\cell decode_locdesc()\cell dwarf2read.c\cell\row
\cell dwarf2_const_value()\cell dwarf2read.c\cell\row
\cell dwarf2_get_pc_bounds()\cell dwarf2read.c\cell\row
\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\cell find_location_expression()\cell dwarf2loc.c\cell\row
\cell loclist_describe_location()\cell dwarf2loc.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell read_partial_die()\cell dwarf2read.c\cell\row
\cell scan_partial_inlined_function_symbols()\cell dwarf2read.c\cell\row
\cell var_decode_location()\cell dwarf2read.c\cell\row
Refs Func:\cell compare_translation_tuples_highpc()\cell dwarf2read.c\cell\row
\cell compare_translation_tuples_nothighpc()\cell dwarf2read.c\cell\row
Refs Var:\cell debug_debugmap\cell dwarf2read.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_equiv_psym()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_equiv_psym ( struct equiv_psym_list** equiv_psyms, const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
Called by:\cell scan_partial_symbols()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_file_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_file_name ( struct line_header* lh, char* name, unsigned int dir_index, unsigned int mod_time, unsigned int length )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
Called by:\cell dwarf_decode_line_header()\cell dwarf2read.c\cell\row
\cell dwarf_decode_lines()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_include_dir()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_include_dir ( struct line_header* lh, char* include_dir )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
Called by:\cell dwarf_decode_line_header()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_partial_enumeration()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_partial_enumeration ( struct partial_die_info* enum_pdi, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell add_partial_symbol()\cell dwarf2read.c\cell\row
\cell complaint()\cell complaints.c\cell\row
Called by:\cell scan_partial_symbols()\cell dwarf2read.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_partial_namespace()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_partial_namespace ( struct partial_die_info* pdi, CORE_ADDR* lowpc, CORE_ADDR* highpc, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell add_partial_symbol()\cell dwarf2read.c\cell\row
\cell scan_partial_symbols()\cell dwarf2read.c\cell\row
Called by:\cell scan_partial_symbols()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_partial_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_partial_symbol ( struct partial_die_info* pdi, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell add_psymbol_to_list()\cell symfile.c\cell\row
\cell cp_check_possible_namespace_symbols()\cell cp-namespace.c\cell\row
\cell decode_locdesc()\cell dwarf2read.c\cell\row
\cell objfile_add_special_psym()\cell objfiles.c\cell\row
\cell objfile_text_section_offset()\cell objfiles.c\cell\row
\cell partial_die_full_name()\cell dwarf2read.c\cell\row
\cell pdi_needs_namespace()\cell dwarf2read.c\cell\row
\cell prim_record_minimal_symbol()\cell minsyms.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell add_partial_enumeration()\cell dwarf2read.c\cell\row
\cell add_partial_namespace()\cell dwarf2read.c\cell\row
\cell scan_partial_symbols()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_to_cu_func_list()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_to_cu_func_list ( const char* name, CORE_ADDR lowpc, CORE_ADDR highpc, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell  _obstack_newchunk()\cell\cell\row
Called by:\cell read_func_scope()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function age_cached_comp_units()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void age_cached_comp_units ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_clear_marks()\cell dwarf2read.c\cell\row
\cell dwarf2_mark()\cell dwarf2read.c\cell\row
\cell free_one_comp_unit()\cell dwarf2read.c\cell\row
Called by:\cell free_stack_comp_unit()\cell dwarf2read.c\cell\row
\cell psymtab_to_symtab_1()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_max_cache_age\cell dwarf2read.c\cell\row
\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function attr_form_is_block()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int attr_form_is_block ( struct attribute* attr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell dwarf2_add_member_fn()\cell dwarf2read.c\cell\row
\cell dwarf2_symbol_mark_computed()\cell dwarf2read.c\cell\row
\cell read_common_block()\cell dwarf2read.c\cell\row
\cell read_partial_die()\cell dwarf2read.c\cell\row
\cell var_decode_location()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function build_dummy_cu()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct dwarf2_cu* build_dummy_cu ( struct objfile* old_objfile, struct dwarf2_cu* old_cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin___strcpy_chk(), __builtin_object_size(), __inline_memset_chk(), __inline_strcpy_chk(), _obstack_begin(), strlen(), xstrdup()\cell\cell\row
Called by:\cell open_dwarf_repository()\cell dwarf2read.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function build_dummy_objfile()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct objfile* build_dummy_objfile ( struct objfile* old_objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell get_objfile_registry_num_registrations()\cell objfiles.c\cell\row
\cell xcalloc()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_begin()\cell\cell\row
Called by:\cell open_dwarf_repository()\cell dwarf2read.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function check_cu_functions()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR check_cu_functions ( CORE_ADDR address, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell dwarf2_record_line()\cell dwarf2read.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function check_inlined_function_calls()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void check_inlined_function_calls ( struct subfile* subfile, int file_index, int line, CORE_ADDR address, struct line_header* lh, struct dwarf2_cu* cu, char* comp_dir )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell dwarf2_start_subfile()\cell dwarf2read.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell inlined_function_add_function_names()\cell inlining.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell rb_tree_find_and_remove_node()\cell dwarf2read.c\cell\row
\cell record_line()\cell buildsym.c\cell\row
\cell  lbasename(), strcmp()\cell\cell\row
Called by:\cell dwarf2_record_line()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_debug_inlined_stepping\cell dwarf2read.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell subfiles\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function compare_map_entries_final_addr_index()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int compare_map_entries_final_addr_index ( void* thunk, const void* a, const void* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell convert_oso_map_to_final_map()\cell dwarf2read.c\cell\row
\cell create_kext_addr_map()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function compare_map_entries_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int compare_map_entries_name ( const void* a, const void* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  strcmp()\cell\cell\row
Used in:\cell convert_oso_map_to_final_map()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function compare_map_entries_oso_addr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int compare_map_entries_oso_addr ( const void* a, const void* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell convert_oso_map_to_final_map()\cell dwarf2read.c\cell\row
\cell create_kext_addr_map()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function compare_translation_final_addr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int compare_translation_final_addr ( const void* key, const void* arrmem )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell warning()\cell utils.c\cell\row
Used in:\cell translate_debug_map_address_with_tuple()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function compare_translation_tuples_highpc()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int compare_translation_tuples_highpc ( const void* key, const void* arrmem )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell translate_debug_map_address()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function compare_translation_tuples_inclusive()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int compare_translation_tuples_inclusive ( const void* key, const void* arrmem )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell dwarf2_record_line()\cell dwarf2read.c\cell\row
Used in:\cell dwarf2_record_line()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function compare_translation_tuples_nothighpc()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int compare_translation_tuples_nothighpc ( const void* key, const void* arrmem )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell translate_debug_map_address()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function consume_improper_spaces()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* consume_improper_spaces ( const char* p, const char* body )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell parse_macro_definition()\cell dwarf2read.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function convert_oso_map_to_final_map()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct oso_to_final_addr_map* convert_oso_map_to_final_map ( struct nlist_rec* nlists, int oso_nlists_count, char** oso_common_symnames, int oso_common_symnames_count, struct partial_symtab* pst )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_minimal_symbol_by_pc_section_from_objfile()\cell minsyms.c\cell\row
\cell lookup_partial_symbol()\cell symtab.c\cell\row
\cell objfile_data_section_offset()\cell objfiles.c\cell\row
\cell objfile_text_section_offset()\cell objfiles.c\cell\row
\cell paddr()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  cplus_demangle(), qsort(), qsort_r()\cell\cell\row
Called by:\cell dwarf2_debug_map_psymtab_to_symtab()\cell dwarf2read.c\cell\row
Refs Func:\cell compare_map_entries_final_addr_index()\cell dwarf2read.c\cell\row
\cell compare_map_entries_name()\cell dwarf2read.c\cell\row
\cell compare_map_entries_oso_addr()\cell dwarf2read.c\cell\row
Refs Var:\cell debug_debugmap\cell dwarf2read.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function copy_string()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* copy_string ( const char* buf, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell parse_macro_definition()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function create_all_comp_units()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void create_all_comp_units ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell read_initial_length()\cell dwarf2read.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function create_kext_addr_map()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct oso_to_final_addr_map* create_kext_addr_map ( struct nlist_rec* nlists, int oso_nlists_count, char** oso_common_symnames, int oso_common_symnames_count, struct partial_symtab* pst )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_minimal_symbol_by_pc_section_from_objfile()\cell minsyms.c\cell\row
\cell objfile_text_section_offset()\cell objfiles.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  qsort(), qsort_r(), strcmp(), xstrdup()\cell\cell\row
Called by:\cell dwarf2_kext_psymtab_to_symtab()\cell dwarf2read.c\cell\row
Refs Func:\cell compare_map_entries_final_addr_index()\cell dwarf2read.c\cell\row
\cell compare_map_entries_oso_addr()\cell dwarf2read.c\cell\row
Refs Var:\cell debug_debugmap\cell dwarf2read.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function db_error()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void db_error ( const char* function_name, const char* db_action_description, sqlite3* db )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell finalize_stmts()\cell dwarf2read.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), sqlite3_close(), sqlite3_errmsg(), strlen()\cell\cell\row
Called by:\cell db_lookup_type()\cell dwarf2read.c\cell\row
\cell finalize_stmts()\cell dwarf2read.c\cell\row
\cell get_repository_name()\cell dwarf2read.c\cell\row
\cell open_dwarf_repository()\cell dwarf2read.c\cell\row
\cell read_in_db_abbrev_table()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function db_lookup_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct die_info* db_lookup_type ( int type_id, sqlite3* db, struct abbrev_info* abbrev_table )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell db_error()\cell dwarf2read.c\cell\row
\cell fill_in_die_info()\cell dwarf2read.c\cell\row
\cell get_uleb128()\cell dwarf2read.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), sqlite3_bind_int(), sqlite3_column_blob(), sqlite3_column_bytes(), sqlite3_prepare_v2(), sqlite3_step(), strlen()\cell\cell\row
Called by:\cell fill_in_die_info()\cell dwarf2read.c\cell\row
\cell lookup_repository_type()\cell dwarf2read.c\cell\row
Refs Var:\cell db_stmt1\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function db_read_1_byte()\par}
{\s5\f1\fs20\ql\sb50\sa50 static uint8_t db_read_1_byte ( uint8_t* info_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell db_read_attribute_value()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function db_read_2_bytes()\par}
{\s5\f1\fs20\ql\sb50\sa50 static uint16_t db_read_2_bytes ( uint8_t* info_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell db_read_attribute_value()\cell dwarf2read.c\cell\row
Refs Var:\cell byte_swap_p\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function db_read_4_bytes()\par}
{\s5\f1\fs20\ql\sb50\sa50 static uint32_t db_read_4_bytes ( uint8_t* info_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell db_read_attribute_value()\cell dwarf2read.c\cell\row
Refs Var:\cell byte_swap_p\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function db_read_8_bytes()\par}
{\s5\f1\fs20\ql\sb50\sa50 static uint64_t db_read_8_bytes ( uint8_t* info_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell db_read_attribute_value()\cell dwarf2read.c\cell\row
Refs Var:\cell byte_swap_p\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function db_read_attribute_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 static uint8_t* db_read_attribute_value ( struct attribute* attr, unsigned form, uint8_t** info_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell db_read_1_byte()\cell dwarf2read.c\cell\row
\cell db_read_2_bytes()\cell dwarf2read.c\cell\row
\cell db_read_4_bytes()\cell dwarf2read.c\cell\row
\cell db_read_8_bytes()\cell dwarf2read.c\cell\row
\cell db_read_attribute_value()\cell dwarf2read.c\cell\row
\cell db_read_n_bytes()\cell dwarf2read.c\cell\row
\cell db_read_signed_leb128()\cell dwarf2read.c\cell\row
\cell db_read_unsigned_leb128()\cell dwarf2read.c\cell\row
\cell dwarf_form_name()\cell dwarf2read.c\cell\row
\cell error()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell db_read_attribute_value()\cell dwarf2read.c\cell\row
\cell fill_in_die_info()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function db_read_n_bytes()\par}
{\s5\f1\fs20\ql\sb50\sa50 static uint8_t* db_read_n_bytes ( uint8_t* info_ptr, unsigned int num_bytes )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell db_read_attribute_value()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function db_read_signed_leb128()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int32_t db_read_signed_leb128 ( uint8_t* info_ptr, unsigned int* bytes_read )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell db_read_attribute_value()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function db_read_unsigned_leb128()\par}
{\s5\f1\fs20\ql\sb50\sa50 static uint32_t db_read_unsigned_leb128 ( uint8_t* info_ptr, unsigned int* bytes_read )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell db_read_attribute_value()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_locdesc()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR decode_locdesc ( struct dwarf_block* blk, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell dwarf2_complex_location_expr_complaint()\cell dwarf2read.c\cell\row
\cell dwarf_stack_op_name()\cell dwarf2read.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell read_1_byte()\cell dwarf2read.c\cell\row
\cell read_1_signed_byte()\cell dwarf2read.c\cell\row
\cell read_2_bytes()\cell dwarf2read.c\cell\row
\cell read_2_signed_bytes()\cell dwarf2read.c\cell\row
\cell read_4_bytes()\cell dwarf2read.c\cell\row
\cell read_4_signed_bytes()\cell dwarf2read.c\cell\row
\cell read_address()\cell dwarf2read.c\cell\row
\cell read_signed_leb128()\cell dwarf2read.c\cell\row
\cell read_unsigned_leb128()\cell dwarf2read.c\cell\row
\cell translate_common_symbol_debug_map_address()\cell dwarf2read.c\cell\row
\cell translate_debug_map_address()\cell dwarf2read.c\cell\row
Called by:\cell add_partial_symbol()\cell dwarf2read.c\cell\row
\cell dwarf2_add_field()\cell dwarf2read.c\cell\row
\cell dwarf2_add_member_fn()\cell dwarf2read.c\cell\row
\cell read_common_block()\cell dwarf2read.c\cell\row
Refs Var:\cell decode_locdesc_common\cell dwarf2read.c\cell\row
\cell isreg\cell dwarf2read.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decrement_use_count()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void decrement_use_count ( struct database_info* repository, struct objfile* ofile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell close_dwarf_repositories()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function determine_class_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* determine_class_name ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell determine_prefix()\cell dwarf2read.c\cell\row
\cell die_specification()\cell dwarf2read.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell dwarf2_linkage_name()\cell dwarf2read.c\cell\row
\cell dwarf2_name()\cell dwarf2read.c\cell\row
\cell language_class_name_from_physname()\cell language.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell sibling_die()\cell dwarf2read.c\cell\row
\cell typename_concat()\cell dwarf2read.c\cell\row
Called by:\cell determine_prefix()\cell dwarf2read.c\cell\row
\cell read_structure_type()\cell dwarf2read.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell processing_current_prefix\cell cp-namespace.c\cell\row
\cell processing_has_namespace_info\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function determine_prefix()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* determine_prefix ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell determine_class_name()\cell dwarf2read.c\cell\row
\cell determine_prefix()\cell dwarf2read.c\cell\row
\cell namespace_name()\cell dwarf2read.c\cell\row
\cell typename_concat()\cell dwarf2read.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  xstrdup()\cell\cell\row
Called by:\cell determine_class_name()\cell dwarf2read.c\cell\row
\cell determine_prefix()\cell dwarf2read.c\cell\row
\cell read_func_scope()\cell dwarf2read.c\cell\row
\cell read_type_die()\cell dwarf2read.c\cell\row
Refs Var:\cell processing_current_prefix\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function die_containing_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* die_containing_type ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dump_die()\cell dwarf2read.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell error()\cell utils.c\cell\row
\cell follow_die_ref()\cell dwarf2read.c\cell\row
\cell tag_type_to_type()\cell dwarf2read.c\cell\row
Called by:\cell dwarf2_add_member_fn()\cell dwarf2read.c\cell\row
\cell read_structure_type()\cell dwarf2read.c\cell\row
\cell read_tag_ptr_to_member_type()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function die_is_declaration()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int die_is_declaration ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell dwarf2_flag_true_p()\cell dwarf2read.c\cell\row
Called by:\cell dwarf2_add_field()\cell dwarf2read.c\cell\row
\cell process_structure_scope()\cell dwarf2read.c\cell\row
\cell read_structure_type()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function die_specification()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct die_info* die_specification ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell follow_die_ref()\cell dwarf2read.c\cell\row
Called by:\cell determine_class_name()\cell dwarf2read.c\cell\row
\cell read_func_scope()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function die_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* die_type ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dump_die()\cell dwarf2read.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell dwarf2_fundamental_type()\cell dwarf2read.c\cell\row
\cell error()\cell utils.c\cell\row
\cell follow_db_ref()\cell dwarf2read.c\cell\row
\cell follow_die_ref()\cell dwarf2read.c\cell\row
\cell tag_type_to_type()\cell dwarf2read.c\cell\row
Called by:\cell dwarf2_add_field()\cell dwarf2read.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell read_array_type()\cell dwarf2read.c\cell\row
\cell read_set_type()\cell dwarf2read.c\cell\row
\cell read_subrange_type()\cell dwarf2read.c\cell\row
\cell read_subroutine_type()\cell dwarf2read.c\cell\row
\cell read_tag_const_type()\cell dwarf2read.c\cell\row
\cell read_tag_pointer_type()\cell dwarf2read.c\cell\row
\cell read_tag_ptr_to_member_type()\cell dwarf2read.c\cell\row
\cell read_tag_reference_type()\cell dwarf2read.c\cell\row
\cell read_tag_restrict_type()\cell dwarf2read.c\cell\row
\cell read_tag_volatile_type()\cell dwarf2read.c\cell\row
\cell read_typedef()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dummy_obstack_deallocate()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dummy_obstack_deallocate ( void* object, void* data )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Used in:\cell dwarf2_add_dependence()\cell dwarf2read.c\cell\row
\cell load_partial_dies()\cell dwarf2read.c\cell\row
\cell set_die_type()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dump_die()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dump_die ( struct die_info* die )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell deprecated_print_address_numeric()\cell printcmd.c\cell\row
\cell dwarf_attr_name()\cell dwarf2read.c\cell\row
\cell dwarf_bool_name()\cell dwarf2read.c\cell\row
\cell dwarf_form_name()\cell dwarf2read.c\cell\row
\cell dwarf_tag_name()\cell dwarf2read.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
Called by:\cell die_containing_type()\cell dwarf2read.c\cell\row
\cell die_type()\cell dwarf2read.c\cell\row
\cell dump_die_list()\cell dwarf2read.c\cell\row
\cell tag_type_to_type()\cell dwarf2read.c\cell\row
Refs Var:\cell gdb_stderr\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dump_die_list()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dump_die_list ( struct die_info* die )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dump_die()\cell dwarf2read.c\cell\row
\cell dump_die_list()\cell dwarf2read.c\cell\row
Called by:\cell dump_die_list()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_add_dependence()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_add_dependence ( struct dwarf2_cu* cu, struct dwarf2_per_cu_data* ref_per_cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell  htab_create_alloc_ex(), htab_find_slot()\cell\cell\row
Called by:\cell read_full_die()\cell dwarf2read.c\cell\row
Refs Func:\cell dummy_obstack_deallocate()\cell dwarf2read.c\cell\row
\cell hashtab_obstack_allocate()\cell dwarf2read.c\cell\row
Refs Var:\cell  htab_eq_pointer, htab_hash_pointer\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_add_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_add_field ( struct field_info* fip, struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell decode_locdesc()\cell dwarf2read.c\cell\row
\cell die_is_declaration()\cell dwarf2read.c\cell\row
\cell die_type()\cell dwarf2read.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell dwarf2_linkage_name()\cell dwarf2read.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell type_name_no_tag()\cell gdbtypes.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell read_structure_type()\cell dwarf2read.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell bits_per_byte\cell dwarf2read.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_add_member_fn()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_add_member_fn ( struct field_info* fip, struct die_info* die, struct type* type, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell alloc_type()\cell gdbtypes.c\cell\row
\cell attr_form_is_block()\cell dwarf2read.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell decode_locdesc()\cell dwarf2read.c\cell\row
\cell die_containing_type()\cell dwarf2read.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell dwarf2_complex_location_expr_complaint()\cell dwarf2read.c\cell\row
\cell dwarf2_invalid_attrib_class_complaint()\cell dwarf2read.c\cell\row
\cell dwarf2_linkage_name()\cell dwarf2read.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell smash_to_method_type()\cell gdbtypes.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), strcmp()\cell\cell\row
Called by:\cell read_structure_type()\cell dwarf2read.c\cell\row
Refs Func:\cell free_current_contents()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_add_to_list_of_inlined_calls()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_add_to_list_of_inlined_calls ( struct objfile* objfile, struct attribute* file_attr, struct attribute* line_attr, struct attribute* column_attr, CORE_ADDR lowpc, CORE_ADDR highpc, struct address_range_list* ranges, char* name, char* parent_name, struct attribute* decl_file, struct attribute* decl_line, struct symbol* func_sym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell rb_tree_insert()\cell dwarf2read.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  xstrdup()\cell\cell\row
Called by:\cell read_inlined_subroutine_scope()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_attach_fields_to_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_attach_fields_to_type ( struct field_info* fip, struct type* type, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell allocate_cplus_struct_type()\cell gdbtypes.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell read_structure_type()\cell dwarf2read.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_attach_fn_fields_to_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_attach_fn_fields_to_type ( struct field_info* fip, struct type* type, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell allocate_cplus_struct_type()\cell gdbtypes.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  _obstack_newchunk()\cell\cell\row
Called by:\cell read_structure_type()\cell dwarf2read.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_attr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct attribute* dwarf2_attr ( struct die_info* die, unsigned int name, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell follow_db_ref()\cell dwarf2read.c\cell\row
\cell follow_die_ref()\cell dwarf2read.c\cell\row
\cell get_repository_name()\cell dwarf2read.c\cell\row
Called by:\cell die_containing_type()\cell dwarf2read.c\cell\row
\cell die_is_declaration()\cell dwarf2read.c\cell\row
\cell die_specification()\cell dwarf2read.c\cell\row
\cell die_type()\cell dwarf2read.c\cell\row
\cell dwarf2_add_field()\cell dwarf2read.c\cell\row
\cell dwarf2_add_member_fn()\cell dwarf2read.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell dwarf2_extension()\cell dwarf2read.c\cell\row
\cell dwarf2_flag_true_p()\cell dwarf2read.c\cell\row
\cell dwarf2_get_pc_bounds()\cell dwarf2read.c\cell\row
\cell dwarf2_linkage_name()\cell dwarf2read.c\cell\row
\cell dwarf2_name()\cell dwarf2read.c\cell\row
\cell load_full_comp_unit()\cell dwarf2read.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell process_enumeration_scope()\cell dwarf2read.c\cell\row
\cell process_full_comp_unit()\cell dwarf2read.c\cell\row
\cell process_structure_scope()\cell dwarf2read.c\cell\row
\cell read_array_order()\cell dwarf2read.c\cell\row
\cell read_array_type()\cell dwarf2read.c\cell\row
\cell read_base_type()\cell dwarf2read.c\cell\row
\cell read_common_block()\cell dwarf2read.c\cell\row
\cell read_enumeration_type()\cell dwarf2read.c\cell\row
\cell read_file_scope()\cell dwarf2read.c\cell\row
\cell read_func_scope()\cell dwarf2read.c\cell\row
\cell read_inlined_subroutine_scope()\cell dwarf2read.c\cell\row
\cell read_structure_type()\cell dwarf2read.c\cell\row
\cell read_subrange_type()\cell dwarf2read.c\cell\row
\cell read_subroutine_type()\cell dwarf2read.c\cell\row
\cell read_tag_pointer_type()\cell dwarf2read.c\cell\row
\cell read_tag_reference_type()\cell dwarf2read.c\cell\row
\cell read_tag_string_type()\cell dwarf2read.c\cell\row
\cell read_tag_unspecified_type()\cell dwarf2read.c\cell\row
\cell read_typedef()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_build_include_psymtabs()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_build_include_psymtabs ( struct dwarf2_cu* cu, struct partial_die_info* pdi, struct partial_symtab* pst )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf_decode_line_header()\cell dwarf2read.c\cell\row
\cell dwarf_decode_lines()\cell dwarf2read.c\cell\row
\cell free_line_header()\cell dwarf2read.c\cell\row
Called by:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_build_psymtabs_hard()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_build_psymtabs_hard ( struct objfile* objfile, int mainline )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell create_all_comp_units()\cell dwarf2read.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell dwarf2_build_include_psymtabs()\cell dwarf2read.c\cell\row
\cell dwarf2_find_comp_unit()\cell dwarf2read.c\cell\row
\cell dwarf2_read_abbrevs()\cell dwarf2read.c\cell\row
\cell dwarf2_read_repository_abbrevs()\cell dwarf2read.c\cell\row
\cell free_named_symtabs()\cell symfile.c\cell\row
\cell free_one_cached_comp_unit()\cell dwarf2read.c\cell\row
\cell load_partial_dies()\cell dwarf2read.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell objfile_text_section_offset()\cell objfiles.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell partial_read_comp_unit_head()\cell dwarf2read.c\cell\row
\cell peek_die_abbrev()\cell dwarf2read.c\cell\row
\cell read_partial_die()\cell dwarf2read.c\cell\row
\cell scan_partial_inlined_function_symbols()\cell dwarf2read.c\cell\row
\cell scan_partial_symbols()\cell dwarf2read.c\cell\row
\cell set_cu_language()\cell dwarf2read.c\cell\row
\cell set_repository_cu_language()\cell dwarf2read.c\cell\row
\cell sort_objfile_thumb_psyms()\cell objfiles.c\cell\row
\cell sort_pst_symbols()\cell symfile.c\cell\row
\cell start_psymtab_common()\cell symfile.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_begin(), strlen()\cell\cell\row
Called by:\cell dwarf2_build_psymtabs()\cell dwarf2read.c\cell\row
Refs Func:\cell dwarf2_free_abbrev_table()\cell dwarf2read.c\cell\row
\cell dwarf2_psymtab_to_symtab()\cell dwarf2read.c\cell\row
\cell free_cached_comp_units()\cell dwarf2read.c\cell\row
\cell free_stack_comp_unit()\cell dwarf2read.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Refs Var:\cell byte_swap_p\cell dwarf2read.c\cell\row
\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\cell file_symbols\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_clear_marks()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_clear_marks ( struct dwarf2_per_cu_data* per_cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell age_cached_comp_units()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_complex_location_expr_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_complex_location_expr_complaint ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell decode_locdesc()\cell dwarf2read.c\cell\row
\cell dwarf2_add_member_fn()\cell dwarf2read.c\cell\row
\cell read_common_block()\cell dwarf2read.c\cell\row
\cell read_partial_die()\cell dwarf2read.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_const_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_const_value ( struct attribute* attr, struct symbol* sym, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell dwarf2_const_value_data()\cell dwarf2read.c\cell\row
\cell dwarf2_const_value_length_mismatch_complaint()\cell dwarf2read.c\cell\row
\cell dwarf_form_name()\cell dwarf2read.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell store_unsigned_integer()\cell findvar.c\cell\row
\cell translate_debug_map_address()\cell dwarf2read.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell new_symbol()\cell dwarf2read.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_const_value_data()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_const_value_data ( struct attribute* attr, struct symbol* sym, int bits )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
Called by:\cell dwarf2_const_value()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_const_value_length_mismatch_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_const_value_length_mismatch_complaint ( const char* arg1, int arg2, int arg3 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell dwarf2_const_value()\cell dwarf2read.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_copy_dwarf_from_file()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_copy_dwarf_from_file ( struct objfile* objfile, bfd* abfd )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell dwarf2_read_section()\cell dwarf2read.c\cell\row
Called by:\cell dwarf2_build_psymtabs()\cell dwarf2read.c\cell\row
\cell dwarf2_debug_map_psymtab_to_symtab()\cell dwarf2read.c\cell\row
\cell dwarf2_kext_psymtab_to_symtab()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\cell dwarf_abbrev_section\cell dwarf2read.c\cell\row
\cell dwarf_info_section\cell dwarf2read.c\cell\row
\cell dwarf_inlined_section\cell dwarf2read.c\cell\row
\cell dwarf_line_section\cell dwarf2read.c\cell\row
\cell dwarf_loc_section\cell dwarf2read.c\cell\row
\cell dwarf_macinfo_section\cell dwarf2read.c\cell\row
\cell dwarf_ranges_section\cell dwarf2read.c\cell\row
\cell dwarf_str_section\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_create_include_psymtab()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_create_include_psymtab ( char* name, struct partial_symtab* pst, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell allocate_psymtab()\cell symfile.c\cell\row
\cell  _obstack_newchunk()\cell\cell\row
Called by:\cell dwarf_decode_lines()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_extension()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct die_info* dwarf2_extension ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell follow_die_ref()\cell dwarf2read.c\cell\row
Called by:\cell namespace_name()\cell dwarf2read.c\cell\row
\cell read_namespace()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_find_comp_unit()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct dwarf2_per_cu_data* dwarf2_find_comp_unit ( unsigned long offset, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_find_containing_comp_unit()\cell dwarf2read.c\cell\row
\cell error()\cell utils.c\cell\row
Called by:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_find_containing_comp_unit()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct dwarf2_per_cu_data* dwarf2_find_containing_comp_unit ( unsigned long offset, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell dwarf2_find_comp_unit()\cell dwarf2read.c\cell\row
\cell find_partial_die()\cell dwarf2read.c\cell\row
\cell follow_die_ref()\cell dwarf2read.c\cell\row
\cell read_full_die()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_flag_true_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int dwarf2_flag_true_p ( struct die_info* die, unsigned name, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_attr()\cell dwarf2read.c\cell\row
Called by:\cell die_is_declaration()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_free_abbrev_table()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_free_abbrev_table ( void* ptr_to_cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Used in:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\cell find_debug_info_for_pst()\cell dwarf2read.c\cell\row
\cell load_comp_unit()\cell dwarf2read.c\cell\row
\cell load_full_comp_unit()\cell dwarf2read.c\cell\row
Refs Func:\cell  obstack_free()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_fundamental_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* dwarf2_fundamental_type ( struct objfile* objfile, int d2typeid, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Called by:\cell die_type()\cell dwarf2read.c\cell\row
\cell dwarf_base_type()\cell dwarf2read.c\cell\row
\cell read_array_type()\cell dwarf2read.c\cell\row
\cell read_base_type()\cell dwarf2read.c\cell\row
\cell read_tag_string_type()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_get_attr_constant_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int dwarf2_get_attr_constant_value ( struct attribute* attr, int default_value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell dwarf_form_name()\cell dwarf2read.c\cell\row
Called by:\cell read_subrange_type()\cell dwarf2read.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_get_pc_bounds()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int dwarf2_get_pc_bounds ( struct die_info* die, CORE_ADDR* lowpc, CORE_ADDR* highpc, struct address_range_list** ranges, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell read_address()\cell dwarf2read.c\cell\row
\cell translate_debug_map_address()\cell dwarf2read.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell get_scope_pc_bounds()\cell dwarf2read.c\cell\row
\cell read_func_scope()\cell dwarf2read.c\cell\row
\cell read_inlined_subroutine_scope()\cell dwarf2read.c\cell\row
\cell read_lexical_block_scope()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_get_ref_die_offset()\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned int dwarf2_get_ref_die_offset ( struct attribute* attr, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell dwarf_form_name()\cell dwarf2read.c\cell\row
Called by:\cell follow_die_ref()\cell dwarf2read.c\cell\row
\cell read_partial_die()\cell dwarf2read.c\cell\row
\cell skip_one_die()\cell dwarf2read.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_has_info_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int dwarf2_has_info_1 ( struct objfile* objfile, bfd* abfd )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell set_objfile_data()\cell objfiles.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), bfd_map_over_sections()\cell\cell\row
Called by:\cell dwarf2_debug_map_psymtab_to_symtab()\cell dwarf2read.c\cell\row
\cell dwarf2_has_info()\cell dwarf2read.c\cell\row
\cell dwarf2_kext_psymtab_to_symtab()\cell dwarf2read.c\cell\row
Refs Func:\cell dwarf2_locate_sections()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_objfile_data_key\cell dwarf2read.c\cell\row
\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\cell dwarf_abbrev_section\cell dwarf2read.c\cell\row
\cell dwarf_eh_frame_section\cell dwarf2read.c\cell\row
\cell dwarf_frame_section\cell dwarf2read.c\cell\row
\cell dwarf_info_section\cell dwarf2read.c\cell\row
\cell dwarf_inlined_section\cell dwarf2read.c\cell\row
\cell dwarf_line_section\cell dwarf2read.c\cell\row
\cell dwarf_loc_section\cell dwarf2read.c\cell\row
\cell dwarf_macinfo_section\cell dwarf2read.c\cell\row
\cell dwarf_ranges_section\cell dwarf2read.c\cell\row
\cell dwarf_str_section\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_invalid_attrib_class_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_invalid_attrib_class_complaint ( const char* arg1, const char* arg2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell dwarf2_add_member_fn()\cell dwarf2read.c\cell\row
\cell dwarf2_symbol_mark_computed()\cell dwarf2read.c\cell\row
\cell read_common_block()\cell dwarf2read.c\cell\row
\cell read_partial_die()\cell dwarf2read.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_linkage_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* dwarf2_linkage_name ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_attr()\cell dwarf2read.c\cell\row
Called by:\cell determine_class_name()\cell dwarf2read.c\cell\row
\cell dwarf2_add_field()\cell dwarf2read.c\cell\row
\cell dwarf2_add_member_fn()\cell dwarf2read.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell read_func_scope()\cell dwarf2read.c\cell\row
\cell read_inlined_subroutine_scope()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_locate_sections()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_locate_sections ( bfd* ignore_abfd, asection* sectp, void* ignore_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell  strcmp()\cell\cell\row
Used in:\cell dwarf2_has_info_1()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\cell dwarf_abbrev_section\cell dwarf2read.c\cell\row
\cell dwarf_aranges_section\cell dwarf2read.c\cell\row
\cell dwarf_eh_frame_section\cell dwarf2read.c\cell\row
\cell dwarf_frame_section\cell dwarf2read.c\cell\row
\cell dwarf_info_section\cell dwarf2read.c\cell\row
\cell dwarf_inlined_section\cell dwarf2read.c\cell\row
\cell dwarf_line_section\cell dwarf2read.c\cell\row
\cell dwarf_loc_section\cell dwarf2read.c\cell\row
\cell dwarf_macinfo_section\cell dwarf2read.c\cell\row
\cell dwarf_pubnames_section\cell dwarf2read.c\cell\row
\cell dwarf_pubtypes_section\cell dwarf2read.c\cell\row
\cell dwarf_ranges_section\cell dwarf2read.c\cell\row
\cell dwarf_str_section\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_lookup_abbrev()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct abbrev_info* dwarf2_lookup_abbrev ( unsigned int number, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell dwarf2_read_abbrevs()\cell dwarf2read.c\cell\row
\cell peek_die_abbrev()\cell dwarf2read.c\cell\row
\cell read_full_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_macro_malformed_definition_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_macro_malformed_definition_complaint ( const char* arg1 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell parse_macro_definition()\cell dwarf2read.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_macros_too_long_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_macros_too_long_complaint ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell dwarf_decode_macros()\cell dwarf2read.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_mark()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_mark ( struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell  htab_traverse()\cell\cell\row
Called by:\cell age_cached_comp_units()\cell dwarf2read.c\cell\row
Refs Func:\cell dwarf2_mark_helper()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_mark_helper()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int dwarf2_mark_helper ( void** slot, void* data )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  htab_traverse()\cell\cell\row
Used in:\cell dwarf2_mark()\cell dwarf2read.c\cell\row
\cell dwarf2_mark_helper()\cell dwarf2read.c\cell\row
Refs Func:\cell dwarf2_mark_helper()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* dwarf2_name ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_attr()\cell dwarf2read.c\cell\row
Called by:\cell determine_class_name()\cell dwarf2read.c\cell\row
\cell namespace_name()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_psymtab_to_symtab()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_psymtab_to_symtab ( struct partial_symtab* pst )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell gdb_flush()\cell ui-file.c\cell\row
\cell get_objfile_data()\cell objfiles.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell psymtab_to_symtab_1()\cell dwarf2read.c\cell\row
\cell warning()\cell utils.c\cell\row
Used in:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_objfile_data_key\cell dwarf2read.c\cell\row
\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell info_verbose\cell top.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_read_abbrevs()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_read_abbrevs ( bfd* abfd, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_lookup_abbrev()\cell dwarf2read.c\cell\row
\cell dwarf_alloc_abbrev()\cell dwarf2read.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell read_1_byte()\cell dwarf2read.c\cell\row
\cell read_unsigned_leb128()\cell dwarf2read.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk(), _obstack_begin(), _obstack_newchunk()\cell\cell\row
Called by:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\cell find_debug_info_for_pst()\cell dwarf2read.c\cell\row
\cell load_comp_unit()\cell dwarf2read.c\cell\row
\cell load_full_comp_unit()\cell dwarf2read.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_read_repository_abbrevs()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_read_repository_abbrevs ( struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell find_open_repository()\cell dwarf2read.c\cell\row
\cell read_in_db_abbrev_table()\cell dwarf2read.c\cell\row
Called by:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_record_line()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int dwarf2_record_line ( struct line_header* lh, char* comp_dir, struct dwarf2_cu* cu, CORE_ADDR address, CORE_ADDR baseaddr, int file, int line, int end_sequence )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell check_cu_functions()\cell dwarf2read.c\cell\row
\cell check_inlined_function_calls()\cell dwarf2read.c\cell\row
\cell compare_translation_tuples_inclusive()\cell dwarf2read.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell record_line()\cell buildsym.c\cell\row
\cell translate_debug_map_address_with_tuple()\cell dwarf2read.c\cell\row
\cell  bsearch()\cell\cell\row
Called by:\cell dwarf_decode_lines()\cell dwarf2read.c\cell\row
Refs Func:\cell compare_translation_tuples_inclusive()\cell dwarf2read.c\cell\row
Refs Var:\cell current_subfile\cell buildsym.c\cell\row
\cell debug_debugmap\cell dwarf2read.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_release_queue()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_release_queue ( void* dummy )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell free_one_cached_comp_unit()\cell dwarf2read.c\cell\row
\cell xfree()\cell utils.c\cell\row
Used in:\cell psymtab_to_symtab_1()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_queue\cell dwarf2read.c\cell\row
\cell dwarf2_queue_tail\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_start_subfile()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_start_subfile ( char* filename, char* dirname, char* comp_dir )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell start_subfile()\cell buildsym.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  concat(), strcmp()\cell\cell\row
Called by:\cell check_inlined_function_calls()\cell dwarf2read.c\cell\row
\cell dwarf_decode_lines()\cell dwarf2read.c\cell\row
Refs Func:\cell null_cleanup()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell current_subfile\cell buildsym.c\cell\row
\cell subfiles\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_statement_list_fits_in_line_number_section_complaint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_statement_list_fits_in_line_number_section_complaint ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
Called by:\cell dwarf_decode_line_header()\cell dwarf2read.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_symbol_mark_computed()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_symbol_mark_computed ( struct attribute* attr, struct symbol* sym, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell attr_form_is_block()\cell dwarf2read.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell dwarf2_invalid_attrib_class_complaint()\cell dwarf2read.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell  _obstack_newchunk()\cell\cell\row
Called by:\cell read_func_scope()\cell dwarf2read.c\cell\row
\cell var_decode_location()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_locexpr_funcs\cell dwarf2loc.c\cell\row
\cell dwarf2_loclist_funcs\cell dwarf2loc.c\cell\row
\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf_alloc_abbrev()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct abbrev_info* dwarf_alloc_abbrev ( struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell dwarf2_read_abbrevs()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf_alloc_block()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct dwarf_block* dwarf_alloc_block ( struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell  _obstack_newchunk()\cell\cell\row
Called by:\cell read_attribute_value()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf_alloc_die()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct die_info* dwarf_alloc_die ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell read_full_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf_attr_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* dwarf_attr_name ( unsigned int attr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell dump_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf_base_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* dwarf_base_type ( int encoding, int size, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_fundamental_type()\cell dwarf2read.c\cell\row
Called by:\cell read_base_type()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf_bool_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* dwarf_bool_name ( unsigned mybool )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell dump_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf_decode_line_header()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct line_header* dwarf_decode_line_header ( unsigned int offset, bfd* abfd, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell add_file_name()\cell dwarf2read.c\cell\row
\cell add_include_dir()\cell dwarf2read.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell discard_cleanups()\cell utils.c\cell\row
\cell dwarf2_statement_list_fits_in_line_number_section_complaint()\cell dwarf2read.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell read_1_byte()\cell dwarf2read.c\cell\row
\cell read_1_signed_byte()\cell dwarf2read.c\cell\row
\cell read_2_bytes()\cell dwarf2read.c\cell\row
\cell read_initial_length()\cell dwarf2read.c\cell\row
\cell read_offset()\cell dwarf2read.c\cell\row
\cell read_string()\cell dwarf2read.c\cell\row
\cell read_unsigned_leb128()\cell dwarf2read.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell dwarf2_build_include_psymtabs()\cell dwarf2read.c\cell\row
\cell read_file_scope()\cell dwarf2read.c\cell\row
Refs Func:\cell free_line_header()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf_decode_lines()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf_decode_lines ( struct line_header* lh, char* comp_dir, bfd* abfd, struct dwarf2_cu* cu, struct partial_symtab* pst )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell add_file_name()\cell dwarf2read.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell dwarf2_create_include_psymtab()\cell dwarf2read.c\cell\row
\cell dwarf2_record_line()\cell dwarf2read.c\cell\row
\cell dwarf2_start_subfile()\cell dwarf2read.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell objfile_text_section_offset()\cell objfiles.c\cell\row
\cell read_1_byte()\cell dwarf2read.c\cell\row
\cell read_2_bytes()\cell dwarf2read.c\cell\row
\cell read_address()\cell dwarf2read.c\cell\row
\cell read_signed_leb128()\cell dwarf2read.c\cell\row
\cell read_string()\cell dwarf2read.c\cell\row
\cell read_unsigned_leb128()\cell dwarf2read.c\cell\row
\cell  concat(), strcmp()\cell\cell\row
Called by:\cell dwarf2_build_include_psymtabs()\cell dwarf2read.c\cell\row
\cell read_file_scope()\cell dwarf2read.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf_decode_macros()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf_decode_macros ( struct line_header* lh, unsigned int offset, char* comp_dir, bfd* abfd, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell dwarf2_macros_too_long_complaint()\cell dwarf2read.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell macro_start_file()\cell dwarf2read.c\cell\row
\cell macro_undef()\cell macrotab.c\cell\row
\cell parse_macro_definition()\cell dwarf2read.c\cell\row
\cell read_1_byte()\cell dwarf2read.c\cell\row
\cell read_string()\cell dwarf2read.c\cell\row
\cell read_unsigned_leb128()\cell dwarf2read.c\cell\row
\cell  fprintf()\cell\cell\row
Called by:\cell read_file_scope()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf_form_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* dwarf_form_name ( unsigned int form )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell db_read_attribute_value()\cell dwarf2read.c\cell\row
\cell dump_die()\cell dwarf2read.c\cell\row
\cell dwarf2_const_value()\cell dwarf2read.c\cell\row
\cell dwarf2_get_attr_constant_value()\cell dwarf2read.c\cell\row
\cell dwarf2_get_ref_die_offset()\cell dwarf2read.c\cell\row
\cell read_attribute_value()\cell dwarf2read.c\cell\row
\cell skip_one_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf_stack_op_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* dwarf_stack_op_name ( unsigned int op )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell decode_locdesc()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf_tag_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* dwarf_tag_name ( unsigned tag )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell dump_die()\cell dwarf2read.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell read_type_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf_type_encoding_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* dwarf_type_encoding_name ( unsigned int enc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell read_base_type()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function file_full_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* file_full_name ( int file, struct line_header* lh, const char* comp_dir )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), strlen(), xstrdup()\cell\cell\row
Called by:\cell macro_start_file()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function fill_in_die_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void fill_in_die_info ( struct die_info* new_die, int die_len, uint8_t* die_bytes, uint8_t* d_ptr, struct abbrev_info* abbrev_table, sqlite3* db )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell db_lookup_type()\cell dwarf2read.c\cell\row
\cell db_read_attribute_value()\cell dwarf2read.c\cell\row
\cell get_uleb128()\cell dwarf2read.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell db_lookup_type()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function finalize_stmts()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int finalize_stmts ( sqlite3* db )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell db_error()\cell dwarf2read.c\cell\row
\cell  sqlite3_finalize()\cell\cell\row
Called by:\cell close_dwarf_repositories()\cell dwarf2read.c\cell\row
\cell db_error()\cell dwarf2read.c\cell\row
Refs Var:\cell db_stmt1\cell dwarf2read.c\cell\row
\cell db_stmt2\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_debug_inlined_section()\par}
{\s5\f1\fs20\ql\sb50\sa50 static bfd_boolean find_debug_inlined_section ( bfd* ignore_abfd, asection* sectp, void* ignore )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell  strcmp()\cell\cell\row
Used in:\cell dwarf2_scan_inlined_section_for_psymbols()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_debug_str_section()\par}
{\s5\f1\fs20\ql\sb50\sa50 static bfd_boolean find_debug_str_section ( bfd* ignore_abfd, asection* sectp, void* ignore )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell  strcmp()\cell\cell\row
Used in:\cell dwarf2_scan_inlined_section_for_psymbols()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_open_repository()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct database_info* find_open_repository ( sqlite3* db )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell dwarf2_read_repository_abbrevs()\cell dwarf2read.c\cell\row
\cell lookup_repository_type()\cell dwarf2read.c\cell\row
\cell set_repository_cu_language()\cell dwarf2read.c\cell\row
Refs Var:\cell num_open_dbs\cell dwarf2read.c\cell\row
\cell repositories\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_partial_die()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct partial_die_info* find_partial_die ( unsigned long offset, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_find_containing_comp_unit()\cell dwarf2read.c\cell\row
\cell find_partial_die_in_comp_unit()\cell dwarf2read.c\cell\row
\cell load_comp_unit()\cell dwarf2read.c\cell\row
Called by:\cell fixup_partial_die()\cell dwarf2read.c\cell\row
\cell guess_structure_name()\cell dwarf2read.c\cell\row
\cell partial_die_parent_scope()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_partial_die_in_comp_unit()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct partial_die_info* find_partial_die_in_comp_unit ( unsigned long offset, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), basename(), htab_find_with_hash()\cell\cell\row
Called by:\cell find_partial_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_pubtypes()\par}
{\s5\f1\fs20\ql\sb50\sa50 static bfd_boolean find_pubtypes ( bfd* ignore_abfd, asection* sectp, void* ignore )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  strcmp()\cell\cell\row
Used in:\cell dwarf2_scan_pubtype_for_psymbols()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function fix_inlined_subroutine_symbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void fix_inlined_subroutine_symbols ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell process_full_comp_unit()\cell dwarf2read.c\cell\row
Refs Var:\cell inlined_subroutine_symbols\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function fixup_partial_die()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void fixup_partial_die ( struct partial_die_info* part_die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell find_partial_die()\cell dwarf2read.c\cell\row
\cell fixup_partial_die()\cell dwarf2read.c\cell\row
\cell guess_structure_name()\cell dwarf2read.c\cell\row
Called by:\cell fixup_partial_die()\cell dwarf2read.c\cell\row
\cell partial_die_parent_scope()\cell dwarf2read.c\cell\row
\cell scan_partial_symbols()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function follow_db_ref()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct die_info* follow_db_ref ( struct die_info* die, struct attribute* repository_spec, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell lookup_repository_type()\cell dwarf2read.c\cell\row
Called by:\cell die_type()\cell dwarf2read.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function follow_die_ref()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct die_info* follow_die_ref ( struct die_info* src_die, struct attribute* attr, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_find_containing_comp_unit()\cell dwarf2read.c\cell\row
\cell dwarf2_get_ref_die_offset()\cell dwarf2read.c\cell\row
\cell error()\cell utils.c\cell\row
Called by:\cell die_containing_type()\cell dwarf2read.c\cell\row
\cell die_specification()\cell dwarf2read.c\cell\row
\cell die_type()\cell dwarf2read.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell dwarf2_extension()\cell dwarf2read.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell read_inlined_subroutine_scope()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function free_cached_comp_units()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void free_cached_comp_units ( void* data )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell free_one_comp_unit()\cell dwarf2read.c\cell\row
Used in:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\cell find_debug_info_for_pst()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function free_die_list()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void free_die_list ( struct die_info* dies )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell free_die_list()\cell dwarf2read.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell free_die_list()\cell dwarf2read.c\cell\row
\cell free_one_comp_unit()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function free_line_header()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void free_line_header ( struct line_header* lh )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
Called by:\cell dwarf2_build_include_psymtabs()\cell dwarf2read.c\cell\row
Used in:\cell dwarf_decode_line_header()\cell dwarf2read.c\cell\row
\cell read_file_scope()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function free_one_cached_comp_unit()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void free_one_cached_comp_unit ( void* target_cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell free_one_comp_unit()\cell dwarf2read.c\cell\row
Called by:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\cell dwarf2_release_queue()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function free_one_comp_unit()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void free_one_comp_unit ( void* data )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell free_die_list()\cell dwarf2read.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell age_cached_comp_units()\cell dwarf2read.c\cell\row
\cell free_cached_comp_units()\cell dwarf2read.c\cell\row
\cell free_one_cached_comp_unit()\cell dwarf2read.c\cell\row
Used in:\cell load_full_comp_unit()\cell dwarf2read.c\cell\row
Refs Func:\cell  obstack_free()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function free_stack_comp_unit()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void free_stack_comp_unit ( void* data )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell age_cached_comp_units()\cell dwarf2read.c\cell\row
Used in:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\cell find_debug_info_for_pst()\cell dwarf2read.c\cell\row
Refs Func:\cell  obstack_free()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_die_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* get_die_type ( struct die_info* die, htab_t type_hash )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  htab_find_with_hash()\cell\cell\row
Called by:\cell reset_die_and_siblings_types()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_repository_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct attribute* get_repository_name ( struct attribute* attr, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell db_error()\cell dwarf2read.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), sqlite3_bind_int(), sqlite3_column_text(), sqlite3_prepare_v2(), sqlite3_step(), strlen()\cell\cell\row
Called by:\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell read_partial_die()\cell dwarf2read.c\cell\row
Refs Var:\cell db_stmt2\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_scope_pc_bounds()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void get_scope_pc_bounds ( struct die_info* die, CORE_ADDR* lowpc, CORE_ADDR* highpc, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_get_pc_bounds()\cell dwarf2read.c\cell\row
\cell get_scope_pc_bounds()\cell dwarf2read.c\cell\row
\cell sibling_die()\cell dwarf2read.c\cell\row
Called by:\cell get_scope_pc_bounds()\cell dwarf2read.c\cell\row
\cell process_full_comp_unit()\cell dwarf2read.c\cell\row
\cell read_file_scope()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_uleb128()\par}
{\s5\f1\fs20\ql\sb50\sa50 static uint32_t get_uleb128 ( uint8_t** addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell db_lookup_type()\cell dwarf2read.c\cell\row
\cell fill_in_die_info()\cell dwarf2read.c\cell\row
\cell read_in_db_abbrev_table()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function guess_structure_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void guess_structure_name ( struct partial_die_info* struct_pdi, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell find_partial_die()\cell dwarf2read.c\cell\row
\cell language_class_name_from_physname()\cell language.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell fixup_partial_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function hashtab_obstack_allocate()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void* hashtab_obstack_allocate ( void* data, size_t size, size_t count )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Used in:\cell dwarf2_add_dependence()\cell dwarf2read.c\cell\row
\cell load_partial_dies()\cell dwarf2read.c\cell\row
\cell set_die_type()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function increment_use_count()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void increment_use_count ( struct database_info* repository, struct objfile* ofile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell open_dwarf_repository()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function initialize_cu_func_list()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void initialize_cu_func_list ( struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell read_file_scope()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function initialize_repositories()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void initialize_repositories ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell open_dwarf_repository()\cell dwarf2read.c\cell\row
Refs Var:\cell repositories\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_type_tag_for_partial()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int is_type_tag_for_partial ( int tag )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell load_partial_dies()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_vtable_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int is_vtable_name ( const char* name, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell is_cplus_marker()\cell demangle.c\cell\row
\cell  strncmp()\cell\cell\row
Called by:\cell gnuv2_value_rtti_type()\cell gnu-v2-abi.c\cell\row
\cell read_structure_type()\cell dwarf2read.c\cell\row
\cell record_minimal_symbol()\cell dbxread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function left_rotate()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void left_rotate ( struct rb_tree_node** root, struct rb_tree_node* x )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell rb_delete_fixup()\cell dwarf2read.c\cell\row
\cell rb_tree_insert()\cell dwarf2read.c\cell\row
\cell rb_tree_remove_node()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function load_comp_unit()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void load_comp_unit ( struct dwarf2_per_cu_data* this_cu, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell dwarf2_read_abbrevs()\cell dwarf2read.c\cell\row
\cell load_partial_dies()\cell dwarf2read.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell partial_read_comp_unit_head()\cell dwarf2read.c\cell\row
\cell peek_die_abbrev()\cell dwarf2read.c\cell\row
\cell read_partial_die()\cell dwarf2read.c\cell\row
\cell set_cu_language()\cell dwarf2read.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_begin()\cell\cell\row
Called by:\cell find_partial_die()\cell dwarf2read.c\cell\row
Refs Func:\cell dwarf2_free_abbrev_table()\cell dwarf2read.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function load_full_comp_unit()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct dwarf2_cu* load_full_comp_unit ( struct dwarf2_per_cu_data* per_cu, struct oso_to_final_addr_map* addr_map )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell discard_cleanups()\cell utils.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell dwarf2_read_abbrevs()\cell dwarf2read.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell read_comp_unit()\cell dwarf2read.c\cell\row
\cell read_comp_unit_head()\cell dwarf2read.c\cell\row
\cell set_cu_language()\cell dwarf2read.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_begin()\cell\cell\row
Called by:\cell dwarf2_debug_map_psymtab_to_symtab()\cell dwarf2read.c\cell\row
\cell dwarf2_kext_psymtab_to_symtab()\cell dwarf2read.c\cell\row
\cell process_queue()\cell dwarf2read.c\cell\row
Refs Func:\cell dwarf2_free_abbrev_table()\cell dwarf2read.c\cell\row
\cell free_one_comp_unit()\cell dwarf2read.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function load_partial_dies()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct partial_die_info* load_partial_dies ( bfd* abfd, char* info_ptr, int building_psymtab, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell add_psymbol_to_list()\cell symfile.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell is_type_tag_for_partial()\cell dwarf2read.c\cell\row
\cell locate_pdi_sibling()\cell dwarf2read.c\cell\row
\cell peek_die_abbrev()\cell dwarf2read.c\cell\row
\cell read_partial_die()\cell dwarf2read.c\cell\row
\cell skip_one_die()\cell dwarf2read.c\cell\row
\cell  _obstack_newchunk(), htab_create_alloc_ex(), htab_find_slot_with_hash(), strlen()\cell\cell\row
Called by:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\cell load_comp_unit()\cell dwarf2read.c\cell\row
Refs Func:\cell dummy_obstack_deallocate()\cell dwarf2read.c\cell\row
\cell hashtab_obstack_allocate()\cell dwarf2read.c\cell\row
\cell partial_die_eq()\cell dwarf2read.c\cell\row
\cell partial_die_hash()\cell dwarf2read.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function locate_pdi_sibling()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* locate_pdi_sibling ( struct partial_die_info* orig_pdi, char* info_ptr, bfd* abfd, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell skip_children()\cell dwarf2read.c\cell\row
Called by:\cell load_partial_dies()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function lookup_repository_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void* lookup_repository_type ( int type_id, sqlite3* db, struct dwarf2_cu* cu, int return_die )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell db_lookup_type()\cell dwarf2read.c\cell\row
\cell find_open_repository()\cell dwarf2read.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell rb_tree_find_node()\cell dwarf2read.c\cell\row
\cell rb_tree_insert()\cell dwarf2read.c\cell\row
\cell tag_type_to_type()\cell dwarf2read.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell follow_db_ref()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function macro_start_file()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct macro_source_file* macro_start_file ( int file, int line, struct macro_source_file* current_file, const char* comp_dir, struct line_header* lh, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell file_full_name()\cell dwarf2read.c\cell\row
\cell macro_include()\cell macrotab.c\cell\row
\cell macro_set_main()\cell macrotab.c\cell\row
\cell new_macro_table()\cell macrotab.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell dwarf_decode_macros()\cell dwarf2read.c\cell\row
Refs Var:\cell pending_macros\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function namespace_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* namespace_name ( struct die_info* die, int* is_anonymous, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_extension()\cell dwarf2read.c\cell\row
\cell dwarf2_name()\cell dwarf2read.c\cell\row
Called by:\cell determine_prefix()\cell dwarf2read.c\cell\row
\cell read_namespace()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function new_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* new_symbol ( struct die_info* die, struct type* type, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell add_symbol_to_list()\cell buildsym.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell die_type()\cell dwarf2read.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell dwarf2_const_value()\cell dwarf2read.c\cell\row
\cell dwarf2_linkage_name()\cell dwarf2read.c\cell\row
\cell dwarf_tag_name()\cell dwarf2read.c\cell\row
\cell follow_die_ref()\cell dwarf2read.c\cell\row
\cell gdbarch_int_bit()\cell gdbarch.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objfile_text_section_offset()\cell objfiles.c\cell\row
\cell symbol_search_name()\cell symtab.c\cell\row
\cell symbol_set_names()\cell symtab.c\cell\row
\cell translate_debug_map_address()\cell dwarf2read.c\cell\row
\cell typename_concat()\cell dwarf2read.c\cell\row
\cell var_decode_location()\cell dwarf2read.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strlen()\cell\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
\cell process_enumeration_scope()\cell dwarf2read.c\cell\row
\cell process_structure_scope()\cell dwarf2read.c\cell\row
\cell read_common_block()\cell dwarf2read.c\cell\row
\cell read_func_scope()\cell dwarf2read.c\cell\row
\cell read_inlined_subroutine_scope()\cell dwarf2read.c\cell\row
\cell read_namespace()\cell dwarf2read.c\cell\row
\cell read_tag_pointer_type()\cell dwarf2read.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell file_symbols\cell buildsym.c\cell\row
\cell global_symbols\cell buildsym.c\cell\row
\cell processing_current_prefix\cell cp-namespace.c\cell\row
\cell processing_has_namespace_info\cell cp-namespace.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function num_nodes_in_tree()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int num_nodes_in_tree ( struct rb_tree_node* tree )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell num_nodes_in_tree()\cell dwarf2read.c\cell\row
Called by:\cell num_nodes_in_tree()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function offset_and_type_eq()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int offset_and_type_eq ( const void* item_lhs, const void* item_rhs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell set_die_type()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function offset_and_type_hash()\par}
{\s5\f1\fs20\ql\sb50\sa50 static hashval_t offset_and_type_hash ( const void* item )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell set_die_type()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function open_dwarf_repository()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int open_dwarf_repository ( char* dirname, char* filename, struct objfile* objfile, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell build_dummy_cu()\cell dwarf2read.c\cell\row
\cell build_dummy_objfile()\cell dwarf2read.c\cell\row
\cell db_error()\cell dwarf2read.c\cell\row
\cell increment_use_count()\cell dwarf2read.c\cell\row
\cell initialize_repositories()\cell dwarf2read.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___snprintf_chk(), __builtin_object_size(), sqlite3_open(), strcmp(), strlen()\cell\cell\row
Called by:\cell read_full_die()\cell dwarf2read.c\cell\row
\cell read_partial_die()\cell dwarf2read.c\cell\row
Refs Var:\cell num_open_dbs\cell dwarf2read.c\cell\row
\cell repositories\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function parse_macro_definition()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void parse_macro_definition ( struct macro_source_file* file, int line, const char* body )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell consume_improper_spaces()\cell dwarf2read.c\cell\row
\cell copy_string()\cell dwarf2read.c\cell\row
\cell dwarf2_macro_malformed_definition_complaint()\cell dwarf2read.c\cell\row
\cell macro_define_function()\cell macrotab.c\cell\row
\cell macro_define_object()\cell macrotab.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
Called by:\cell dwarf_decode_macros()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function partial_die_eq()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int partial_die_eq ( const void* item_lhs, const void* item_rhs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Used in:\cell load_partial_dies()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function partial_die_full_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* partial_die_full_name ( struct partial_die_info* pdi, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell partial_die_parent_scope()\cell dwarf2read.c\cell\row
\cell typename_concat()\cell dwarf2read.c\cell\row
Called by:\cell add_partial_symbol()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function partial_die_hash()\par}
{\s5\f1\fs20\ql\sb50\sa50 static hashval_t partial_die_hash ( const void* item )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Used in:\cell load_partial_dies()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function partial_die_parent_scope()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* partial_die_parent_scope ( struct partial_die_info* pdi, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
\cell find_partial_die()\cell dwarf2read.c\cell\row
\cell fixup_partial_die()\cell dwarf2read.c\cell\row
\cell partial_die_parent_scope()\cell dwarf2read.c\cell\row
\cell typename_concat()\cell dwarf2read.c\cell\row
Called by:\cell partial_die_full_name()\cell dwarf2read.c\cell\row
\cell partial_die_parent_scope()\cell dwarf2read.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function partial_read_comp_unit_head()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* partial_read_comp_unit_head ( struct comp_unit_head* header, char* info_ptr, bfd* abfd )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
\cell read_comp_unit_head()\cell dwarf2read.c\cell\row
Called by:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\cell find_debug_info_for_pst()\cell dwarf2read.c\cell\row
\cell load_comp_unit()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function pdi_needs_namespace()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int pdi_needs_namespace ( enum dwarf_tag tag )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell add_partial_symbol()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function peek_die_abbrev()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct abbrev_info* peek_die_abbrev ( char* info_ptr, int* bytes_read, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_lookup_abbrev()\cell dwarf2read.c\cell\row
\cell error()\cell utils.c\cell\row
\cell read_unsigned_leb128()\cell dwarf2read.c\cell\row
Called by:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\cell find_debug_info_for_pst()\cell dwarf2read.c\cell\row
\cell load_comp_unit()\cell dwarf2read.c\cell\row
\cell load_partial_dies()\cell dwarf2read.c\cell\row
\cell skip_children()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function plain_tree_insert()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void plain_tree_insert ( struct rb_tree_node** root, struct rb_tree_node* new_node )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell plain_tree_insert()\cell dwarf2read.c\cell\row
Called by:\cell plain_tree_insert()\cell dwarf2read.c\cell\row
\cell rb_tree_insert()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function process_die()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void process_die ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell process_enumeration_scope()\cell dwarf2read.c\cell\row
\cell process_structure_scope()\cell dwarf2read.c\cell\row
\cell read_array_type()\cell dwarf2read.c\cell\row
\cell read_base_type()\cell dwarf2read.c\cell\row
\cell read_common_block()\cell dwarf2read.c\cell\row
\cell read_enumeration_type()\cell dwarf2read.c\cell\row
\cell read_file_scope()\cell dwarf2read.c\cell\row
\cell read_func_scope()\cell dwarf2read.c\cell\row
\cell read_inlined_subroutine_scope()\cell dwarf2read.c\cell\row
\cell read_lexical_block_scope()\cell dwarf2read.c\cell\row
\cell read_namespace()\cell dwarf2read.c\cell\row
\cell read_set_type()\cell dwarf2read.c\cell\row
\cell read_structure_type()\cell dwarf2read.c\cell\row
\cell read_subrange_type()\cell dwarf2read.c\cell\row
\cell read_subroutine_type()\cell dwarf2read.c\cell\row
\cell read_tag_pointer_type()\cell dwarf2read.c\cell\row
\cell read_tag_ptr_to_member_type()\cell dwarf2read.c\cell\row
\cell read_tag_reference_type()\cell dwarf2read.c\cell\row
\cell read_tag_string_type()\cell dwarf2read.c\cell\row
\cell read_type_die()\cell dwarf2read.c\cell\row
\cell read_typedef()\cell dwarf2read.c\cell\row
Called by:\cell process_enumeration_scope()\cell dwarf2read.c\cell\row
\cell process_full_comp_unit()\cell dwarf2read.c\cell\row
\cell process_structure_scope()\cell dwarf2read.c\cell\row
\cell read_file_scope()\cell dwarf2read.c\cell\row
\cell read_func_scope()\cell dwarf2read.c\cell\row
\cell read_inlined_subroutine_scope()\cell dwarf2read.c\cell\row
\cell read_lexical_block_scope()\cell dwarf2read.c\cell\row
\cell read_namespace()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_allow_inlined_stepping\cell dwarf2read.c\cell\row
\cell processing_has_namespace_info\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function process_enumeration_scope()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void process_enumeration_scope ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell process_die()\cell dwarf2read.c\cell\row
\cell sibling_die()\cell dwarf2read.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function process_full_comp_unit()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void process_full_comp_unit ( struct dwarf2_per_cu_data* per_cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell buildsym_init()\cell buildsym.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell end_symtab()\cell buildsym.c\cell\row
\cell executable_objfile()\cell objfiles.c\cell\row
\cell fix_inlined_subroutine_symbols()\cell dwarf2read.c\cell\row
\cell get_scope_pc_bounds()\cell dwarf2read.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell objfile_text_section_offset()\cell objfiles.c\cell\row
\cell process_die()\cell dwarf2read.c\cell\row
Called by:\cell dwarf2_debug_map_psymtab_to_symtab()\cell dwarf2read.c\cell\row
\cell dwarf2_kext_psymtab_to_symtab()\cell dwarf2read.c\cell\row
\cell process_queue()\cell dwarf2read.c\cell\row
Refs Func:\cell really_free_pendings()\cell buildsym.c\cell\row
Refs Var:\cell file_symbols\cell buildsym.c\cell\row
\cell inlined_subroutine_symbols\cell dwarf2read.c\cell\row
\cell processing_current_prefix\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function process_queue()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void process_queue ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell load_full_comp_unit()\cell dwarf2read.c\cell\row
\cell process_full_comp_unit()\cell dwarf2read.c\cell\row
\cell reset_die_and_siblings_types()\cell dwarf2read.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell psymtab_to_symtab_1()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\cell dwarf2_queue\cell dwarf2read.c\cell\row
\cell dwarf2_queue_tail\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function process_structure_scope()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void process_structure_scope ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell die_is_declaration()\cell dwarf2read.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell process_die()\cell dwarf2read.c\cell\row
\cell sibling_die()\cell dwarf2read.c\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
Refs Var:\cell processing_current_prefix\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function psymtab_to_symtab_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void psymtab_to_symtab_1 ( struct partial_symtab* pst )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell age_cached_comp_units()\cell dwarf2read.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell gdb_flush()\cell ui-file.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell process_queue()\cell dwarf2read.c\cell\row
\cell psymtab_to_symtab_1()\cell dwarf2read.c\cell\row
\cell queue_comp_unit()\cell dwarf2read.c\cell\row
\cell wrap_here()\cell utils.c\cell\row
Called by:\cell dwarf2_psymtab_to_symtab()\cell dwarf2read.c\cell\row
\cell psymtab_to_symtab_1()\cell dwarf2read.c\cell\row
Refs Func:\cell dwarf2_release_queue()\cell dwarf2read.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\cell info_verbose\cell top.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function queue_comp_unit()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void queue_comp_unit ( struct dwarf2_per_cu_data* per_cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell psymtab_to_symtab_1()\cell dwarf2read.c\cell\row
\cell read_full_die()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_queue\cell dwarf2read.c\cell\row
\cell dwarf2_queue_tail\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function rb_delete_fixup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void rb_delete_fixup ( struct rb_tree_node** root, struct rb_tree_node* x )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell left_rotate()\cell dwarf2read.c\cell\row
\cell right_rotate()\cell dwarf2read.c\cell\row
Called by:\cell rb_tree_remove_node()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function rb_print_node()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void rb_print_node ( struct rb_tree_node* tree )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell paddr_nz()\cell utils.c\cell\row
\cell  fprintf()\cell\cell\row
Called by:\cell rb_print_tree()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function rb_print_tree()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void rb_print_tree ( struct rb_tree_node* tree, int indent_level )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell rb_print_node()\cell dwarf2read.c\cell\row
\cell rb_print_tree()\cell dwarf2read.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), fprintf()\cell\cell\row
Called by:\cell rb_print_tree()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function rb_tree_find_and_remove_node()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct rb_tree_node* rb_tree_find_and_remove_node ( struct rb_tree_node** root, struct rb_tree_node* cur_node, long long key, int secondary_key )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell rb_tree_find_and_remove_node()\cell dwarf2read.c\cell\row
\cell rb_tree_remove_node()\cell dwarf2read.c\cell\row
Called by:\cell check_inlined_function_calls()\cell dwarf2read.c\cell\row
\cell rb_tree_find_and_remove_node()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function rb_tree_minimum()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct rb_tree_node* rb_tree_minimum ( struct rb_tree_node* node )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell rb_tree_successor()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function rb_tree_remove_node()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct rb_tree_node* rb_tree_remove_node ( struct rb_tree_node** root, struct rb_tree_node* node )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell left_rotate()\cell dwarf2read.c\cell\row
\cell rb_delete_fixup()\cell dwarf2read.c\cell\row
\cell rb_tree_successor()\cell dwarf2read.c\cell\row
\cell right_rotate()\cell dwarf2read.c\cell\row
\cell verify_rb_tree()\cell dwarf2read.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell rb_tree_find_and_remove_node()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_debug_inlined_stepping\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function rb_tree_successor()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct rb_tree_node* rb_tree_successor ( struct rb_tree_node* node )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell rb_tree_minimum()\cell dwarf2read.c\cell\row
Called by:\cell rb_tree_remove_node()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_1_byte()\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned int read_1_byte ( bfd* abfd, char* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell decode_locdesc()\cell dwarf2read.c\cell\row
\cell dwarf2_read_abbrevs()\cell dwarf2read.c\cell\row
\cell dwarf2_scan_inlined_section_for_psymbols()\cell dwarf2read.c\cell\row
\cell dwarf_decode_line_header()\cell dwarf2read.c\cell\row
\cell dwarf_decode_lines()\cell dwarf2read.c\cell\row
\cell dwarf_decode_macros()\cell dwarf2read.c\cell\row
\cell read_attribute_value()\cell dwarf2read.c\cell\row
\cell read_comp_unit_head()\cell dwarf2read.c\cell\row
\cell scan_partial_inlined_function_symbols()\cell dwarf2read.c\cell\row
\cell skip_one_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_1_signed_byte()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int read_1_signed_byte ( bfd* abfd, char* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell decode_locdesc()\cell dwarf2read.c\cell\row
\cell dwarf_decode_line_header()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_2_bytes()\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned int read_2_bytes ( bfd* abfd, char* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell decode_locdesc()\cell dwarf2read.c\cell\row
\cell dwarf2_scan_inlined_section_for_psymbols()\cell dwarf2read.c\cell\row
\cell dwarf2_scan_pubtype_for_psymbols()\cell dwarf2read.c\cell\row
\cell dwarf_decode_line_header()\cell dwarf2read.c\cell\row
\cell dwarf_decode_lines()\cell dwarf2read.c\cell\row
\cell read_attribute_value()\cell dwarf2read.c\cell\row
\cell read_comp_unit_head()\cell dwarf2read.c\cell\row
\cell scan_partial_inlined_function_symbols()\cell dwarf2read.c\cell\row
\cell skip_one_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_2_signed_bytes()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int read_2_signed_bytes ( bfd* abfd, char* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell decode_locdesc()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_4_bytes()\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned int read_4_bytes ( bfd* abfd, char* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell decode_locdesc()\cell dwarf2read.c\cell\row
\cell read_attribute_value()\cell dwarf2read.c\cell\row
\cell skip_one_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_4_signed_bytes()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int read_4_signed_bytes ( bfd* abfd, char* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell decode_locdesc()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_8_bytes()\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned long read_8_bytes ( bfd* abfd, char* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell read_attribute_value()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR read_address ( bfd* abfd, char* buf, struct dwarf2_cu* cu, int* bytes_read )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell decode_locdesc()\cell dwarf2read.c\cell\row
\cell dwarf2_get_pc_bounds()\cell dwarf2read.c\cell\row
\cell dwarf2_scan_inlined_section_for_psymbols()\cell dwarf2read.c\cell\row
\cell dwarf_decode_lines()\cell dwarf2read.c\cell\row
\cell read_attribute_value()\cell dwarf2read.c\cell\row
\cell scan_partial_inlined_function_symbols()\cell dwarf2read.c\cell\row
\cell var_decode_location()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_array_order()\par}
{\s5\f1\fs20\ql\sb50\sa50 static enum dwarf_array_dim_ordering read_array_order ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell  strstr()\cell\cell\row
Called by:\cell read_array_type()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_array_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_array_type ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell create_array_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell die_type()\cell dwarf2read.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell dwarf2_fundamental_type()\cell dwarf2read.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell read_array_order()\cell dwarf2read.c\cell\row
\cell read_subrange_type()\cell dwarf2read.c\cell\row
\cell set_die_type()\cell dwarf2read.c\cell\row
\cell sibling_die()\cell dwarf2read.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
\cell read_type_die()\cell dwarf2read.c\cell\row
Refs Func:\cell free_current_contents()\cell utils.c\cell\row
\cell null_cleanup()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_attribute()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* read_attribute ( struct attribute* attr, struct attr_abbrev* abbrev, bfd* abfd, char* info_ptr, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell read_attribute_value()\cell dwarf2read.c\cell\row
Called by:\cell read_full_die()\cell dwarf2read.c\cell\row
\cell read_partial_die()\cell dwarf2read.c\cell\row
\cell skip_one_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_attribute_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* read_attribute_value ( struct attribute* attr, unsigned form, bfd* abfd, char* info_ptr, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf_alloc_block()\cell dwarf2read.c\cell\row
\cell dwarf_form_name()\cell dwarf2read.c\cell\row
\cell error()\cell utils.c\cell\row
\cell read_1_byte()\cell dwarf2read.c\cell\row
\cell read_2_bytes()\cell dwarf2read.c\cell\row
\cell read_4_bytes()\cell dwarf2read.c\cell\row
\cell read_8_bytes()\cell dwarf2read.c\cell\row
\cell read_address()\cell dwarf2read.c\cell\row
\cell read_attribute_value()\cell dwarf2read.c\cell\row
\cell read_indirect_string()\cell dwarf2read.c\cell\row
\cell read_n_bytes()\cell dwarf2read.c\cell\row
\cell read_signed_leb128()\cell dwarf2read.c\cell\row
\cell read_string()\cell dwarf2read.c\cell\row
\cell read_unsigned_leb128()\cell dwarf2read.c\cell\row
Called by:\cell read_attribute()\cell dwarf2read.c\cell\row
\cell read_attribute_value()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_base_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_base_type ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell dwarf2_fundamental_type()\cell dwarf2read.c\cell\row
\cell dwarf_base_type()\cell dwarf2read.c\cell\row
\cell dwarf_type_encoding_name()\cell dwarf2read.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell set_die_type()\cell dwarf2read.c\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
\cell read_type_die()\cell dwarf2read.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_common_block()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_common_block ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell add_symbol_to_list()\cell buildsym.c\cell\row
\cell attr_form_is_block()\cell dwarf2read.c\cell\row
\cell decode_locdesc()\cell dwarf2read.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell dwarf2_complex_location_expr_complaint()\cell dwarf2read.c\cell\row
\cell dwarf2_invalid_attrib_class_complaint()\cell dwarf2read.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell sibling_die()\cell dwarf2read.c\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
Refs Var:\cell decode_locdesc_common\cell dwarf2read.c\cell\row
\cell global_symbols\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_comp_unit()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct die_info* read_comp_unit ( char* info_ptr, bfd* abfd, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell read_die_and_children()\cell dwarf2read.c\cell\row
Called by:\cell load_full_comp_unit()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_comp_unit_head()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* read_comp_unit_head ( struct comp_unit_head* cu_header, char* info_ptr, bfd* abfd )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell read_1_byte()\cell dwarf2read.c\cell\row
\cell read_2_bytes()\cell dwarf2read.c\cell\row
\cell read_initial_length()\cell dwarf2read.c\cell\row
\cell read_offset()\cell dwarf2read.c\cell\row
Called by:\cell load_full_comp_unit()\cell dwarf2read.c\cell\row
\cell partial_read_comp_unit_head()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_die_and_children()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct die_info* read_die_and_children ( char* info_ptr, bfd* abfd, struct dwarf2_cu* cu, char** new_info_ptr, struct die_info* parent )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell read_die_and_siblings()\cell dwarf2read.c\cell\row
\cell read_full_die()\cell dwarf2read.c\cell\row
\cell store_in_ref_table()\cell dwarf2read.c\cell\row
Called by:\cell read_comp_unit()\cell dwarf2read.c\cell\row
\cell read_die_and_siblings()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_die_and_siblings()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct die_info* read_die_and_siblings ( char* info_ptr, bfd* abfd, struct dwarf2_cu* cu, char** new_info_ptr, struct die_info* parent )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell read_die_and_children()\cell dwarf2read.c\cell\row
Called by:\cell read_die_and_children()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_enumeration_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_enumeration_type ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell alloc_type()\cell gdbtypes.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell set_die_type()\cell dwarf2read.c\cell\row
\cell typename_concat()\cell dwarf2read.c\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
\cell read_type_die()\cell dwarf2read.c\cell\row
Refs Var:\cell processing_current_prefix\cell cp-namespace.c\cell\row
\cell processing_has_namespace_info\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_file_scope()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_file_scope ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell dwarf_decode_line_header()\cell dwarf2read.c\cell\row
\cell dwarf_decode_lines()\cell dwarf2read.c\cell\row
\cell dwarf_decode_macros()\cell dwarf2read.c\cell\row
\cell get_scope_pc_bounds()\cell dwarf2read.c\cell\row
\cell initialize_cu_func_list()\cell dwarf2read.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell objfile_text_section_offset()\cell objfiles.c\cell\row
\cell process_die()\cell dwarf2read.c\cell\row
\cell record_debugformat()\cell buildsym.c\cell\row
\cell record_producer()\cell buildsym.c\cell\row
\cell set_cu_language()\cell dwarf2read.c\cell\row
\cell sibling_die()\cell dwarf2read.c\cell\row
\cell start_symtab()\cell buildsym.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), strchr()\cell\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
Refs Func:\cell free_line_header()\cell dwarf2read.c\cell\row
\cell null_cleanup()\cell utils.c\cell\row
Refs Var:\cell processing_gcc_compilation\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_full_die()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* read_full_die ( struct die_info** diep, bfd* abfd, char* info_ptr, struct dwarf2_cu* cu, int* has_children )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_add_dependence()\cell dwarf2read.c\cell\row
\cell dwarf2_find_containing_comp_unit()\cell dwarf2read.c\cell\row
\cell dwarf2_lookup_abbrev()\cell dwarf2read.c\cell\row
\cell dwarf_alloc_die()\cell dwarf2read.c\cell\row
\cell error()\cell utils.c\cell\row
\cell open_dwarf_repository()\cell dwarf2read.c\cell\row
\cell queue_comp_unit()\cell dwarf2read.c\cell\row
\cell read_attribute()\cell dwarf2read.c\cell\row
\cell read_unsigned_leb128()\cell dwarf2read.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell read_die_and_children()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_func_scope()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_func_scope ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell add_to_cu_func_list()\cell dwarf2read.c\cell\row
\cell determine_prefix()\cell dwarf2read.c\cell\row
\cell die_specification()\cell dwarf2read.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell dwarf2_get_pc_bounds()\cell dwarf2read.c\cell\row
\cell dwarf2_linkage_name()\cell dwarf2read.c\cell\row
\cell dwarf2_symbol_mark_computed()\cell dwarf2read.c\cell\row
\cell finish_block()\cell buildsym.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell objfile_text_section_offset()\cell objfiles.c\cell\row
\cell pop_context()\cell buildsym.c\cell\row
\cell process_die()\cell dwarf2read.c\cell\row
\cell push_context()\cell buildsym.c\cell\row
\cell sibling_die()\cell dwarf2read.c\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell context_stack_depth\cell buildsym.c\cell\row
\cell file_symbols\cell buildsym.c\cell\row
\cell local_symbols\cell buildsym.c\cell\row
\cell param_symbols\cell buildsym.c\cell\row
\cell processing_current_prefix\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_in_db_abbrev_table()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_in_db_abbrev_table ( struct abbrev_info** abbrev_table, sqlite3* db )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell db_error()\cell dwarf2read.c\cell\row
\cell get_uleb128()\cell dwarf2read.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), sqlite3_column_blob(), sqlite3_column_bytes(), sqlite3_column_int(), sqlite3_finalize(), sqlite3_prepare_v2(), sqlite3_step(), strlen()\cell\cell\row
Called by:\cell dwarf2_read_repository_abbrevs()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_indirect_string()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* read_indirect_string ( bfd* abfd, char* buf, const struct comp_unit_head* cu_header, unsigned int* bytes_read_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell read_offset()\cell dwarf2read.c\cell\row
Called by:\cell read_attribute_value()\cell dwarf2read.c\cell\row
\cell scan_partial_inlined_function_symbols()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_initial_length()\par}
{\s5\f1\fs20\ql\sb50\sa50 static long read_initial_length ( bfd* abfd, char* buf, struct comp_unit_head* cu_header, int* bytes_read )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell create_all_comp_units()\cell dwarf2read.c\cell\row
\cell dwarf2_debug_map_psymtab_to_symtab()\cell dwarf2read.c\cell\row
\cell dwarf2_kext_psymtab_to_symtab()\cell dwarf2read.c\cell\row
\cell dwarf2_scan_inlined_section_for_psymbols()\cell dwarf2read.c\cell\row
\cell dwarf2_scan_pubtype_for_psymbols()\cell dwarf2read.c\cell\row
\cell dwarf_decode_line_header()\cell dwarf2read.c\cell\row
\cell read_comp_unit_head()\cell dwarf2read.c\cell\row
\cell scan_partial_inlined_function_symbols()\cell dwarf2read.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_inlined_subroutine_scope()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_inlined_subroutine_scope ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell add_symbol_to_inlined_subroutine_list()\cell inlining.c\cell\row
\cell dwarf2_add_to_list_of_inlined_calls()\cell dwarf2read.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell dwarf2_get_pc_bounds()\cell dwarf2read.c\cell\row
\cell dwarf2_linkage_name()\cell dwarf2read.c\cell\row
\cell finish_block()\cell buildsym.c\cell\row
\cell follow_die_ref()\cell dwarf2read.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell objfile_text_section_offset()\cell objfiles.c\cell\row
\cell pop_context()\cell buildsym.c\cell\row
\cell process_die()\cell dwarf2read.c\cell\row
\cell push_context()\cell buildsym.c\cell\row
\cell sibling_die()\cell dwarf2read.c\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
Refs Var:\cell inlined_subroutine_symbols\cell dwarf2read.c\cell\row
\cell local_symbols\cell buildsym.c\cell\row
\cell param_symbols\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_lexical_block_scope()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_lexical_block_scope ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dwarf2_get_pc_bounds()\cell dwarf2read.c\cell\row
\cell finish_block()\cell buildsym.c\cell\row
\cell objfile_text_section_offset()\cell objfiles.c\cell\row
\cell pop_context()\cell buildsym.c\cell\row
\cell process_die()\cell dwarf2read.c\cell\row
\cell push_context()\cell buildsym.c\cell\row
\cell sibling_die()\cell dwarf2read.c\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
Refs Var:\cell local_symbols\cell buildsym.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_n_bytes()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* read_n_bytes ( bfd* abfd, char* buf, unsigned int size )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell read_attribute_value()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_namespace()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_namespace ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell cp_add_using_directive()\cell cp-namespace.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell dwarf2_extension()\cell dwarf2read.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell namespace_name()\cell dwarf2read.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell process_die()\cell dwarf2read.c\cell\row
\cell set_die_type()\cell dwarf2read.c\cell\row
\cell sibling_die()\cell dwarf2read.c\cell\row
\cell typename_concat()\cell dwarf2read.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
Refs Func:\cell null_cleanup()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell processing_current_prefix\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_offset()\par}
{\s5\f1\fs20\ql\sb50\sa50 static long read_offset ( bfd* abfd, char* buf, const struct comp_unit_head* cu_header, int* bytes_read )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell dwarf2_scan_inlined_section_for_psymbols()\cell dwarf2read.c\cell\row
\cell dwarf2_scan_pubtype_for_psymbols()\cell dwarf2read.c\cell\row
\cell dwarf_decode_line_header()\cell dwarf2read.c\cell\row
\cell read_comp_unit_head()\cell dwarf2read.c\cell\row
\cell read_indirect_string()\cell dwarf2read.c\cell\row
\cell scan_partial_inlined_function_symbols()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_partial_die()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* read_partial_die ( struct partial_die_info* part_die, struct abbrev_info* abbrev, unsigned int abbrev_len, bfd* abfd, char* info_ptr, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell attr_form_is_block()\cell dwarf2read.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell dwarf2_complex_location_expr_complaint()\cell dwarf2read.c\cell\row
\cell dwarf2_get_ref_die_offset()\cell dwarf2read.c\cell\row
\cell dwarf2_invalid_attrib_class_complaint()\cell dwarf2read.c\cell\row
\cell get_repository_name()\cell dwarf2read.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell open_dwarf_repository()\cell dwarf2read.c\cell\row
\cell read_attribute()\cell dwarf2read.c\cell\row
\cell translate_debug_map_address()\cell dwarf2read.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), isdigit(), isupper(), strchr(), strlen(), xstrdup()\cell\cell\row
Called by:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\cell find_debug_info_for_pst()\cell dwarf2read.c\cell\row
\cell load_comp_unit()\cell dwarf2read.c\cell\row
\cell load_partial_dies()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\cell psym_equivalences\cell dwarf2read.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_set_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_set_type ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell create_set_type()\cell gdbtypes.c\cell\row
\cell die_type()\cell dwarf2read.c\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
\cell read_type_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_signed_leb128()\par}
{\s5\f1\fs20\ql\sb50\sa50 static long read_signed_leb128 ( bfd* abfd, char* buf, unsigned int* bytes_read_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell decode_locdesc()\cell dwarf2read.c\cell\row
\cell dwarf_decode_lines()\cell dwarf2read.c\cell\row
\cell read_attribute_value()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_string()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* read_string ( bfd* abfd, char* buf, unsigned int* bytes_read_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell dwarf2_scan_pubtype_for_psymbols()\cell dwarf2read.c\cell\row
\cell dwarf_decode_line_header()\cell dwarf2read.c\cell\row
\cell dwarf_decode_lines()\cell dwarf2read.c\cell\row
\cell dwarf_decode_macros()\cell dwarf2read.c\cell\row
\cell read_attribute_value()\cell dwarf2read.c\cell\row
\cell skip_one_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_structure_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_structure_type ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell alloc_type()\cell gdbtypes.c\cell\row
\cell allocate_cplus_struct_type()\cell gdbtypes.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell determine_class_name()\cell dwarf2read.c\cell\row
\cell die_containing_type()\cell dwarf2read.c\cell\row
\cell die_is_declaration()\cell dwarf2read.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell dwarf2_add_field()\cell dwarf2read.c\cell\row
\cell dwarf2_add_member_fn()\cell dwarf2read.c\cell\row
\cell dwarf2_attach_fields_to_type()\cell dwarf2read.c\cell\row
\cell dwarf2_attach_fn_fields_to_type()\cell dwarf2read.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell is_vtable_name()\cell dwarf2read.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell objc_invalidate_objc_class()\cell objc-lang.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell read_type_die()\cell dwarf2read.c\cell\row
\cell set_die_type()\cell dwarf2read.c\cell\row
\cell sibling_die()\cell dwarf2read.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), strcmp(), strlen()\cell\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
\cell read_type_die()\cell dwarf2read.c\cell\row
Refs Func:\cell null_cleanup()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\cell processing_current_prefix\cell cp-namespace.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_subrange_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_subrange_type ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell alloc_type()\cell gdbtypes.c\cell\row
\cell complaint()\cell complaints.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell die_type()\cell dwarf2read.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell dwarf2_get_attr_constant_value()\cell dwarf2read.c\cell\row
\cell set_die_type()\cell dwarf2read.c\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
\cell read_array_type()\cell dwarf2read.c\cell\row
\cell read_type_die()\cell dwarf2read.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_subroutine_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_subroutine_type ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell die_type()\cell dwarf2read.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell make_function_type()\cell gdbtypes.c\cell\row
\cell set_die_type()\cell dwarf2read.c\cell\row
\cell sibling_die()\cell dwarf2read.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  _obstack_newchunk()\cell\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
\cell read_type_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_tag_const_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_tag_const_type ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell die_type()\cell dwarf2read.c\cell\row
\cell make_cvr_type()\cell gdbtypes.c\cell\row
\cell set_die_type()\cell dwarf2read.c\cell\row
Called by:\cell read_type_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_tag_pointer_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_tag_pointer_type ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell die_type()\cell dwarf2read.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell gdbarch_address_class_type_flags()\cell gdbarch.c\cell\row
\cell gdbarch_address_class_type_flags_p()\cell gdbarch.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell make_pointer_type()\cell gdbtypes.c\cell\row
\cell make_type_with_address_space()\cell gdbtypes.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell set_die_type()\cell dwarf2read.c\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
\cell read_type_die()\cell dwarf2read.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_tag_ptr_to_member_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_tag_ptr_to_member_type ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell alloc_type()\cell gdbtypes.c\cell\row
\cell die_containing_type()\cell dwarf2read.c\cell\row
\cell die_type()\cell dwarf2read.c\cell\row
\cell set_die_type()\cell dwarf2read.c\cell\row
\cell smash_to_member_type()\cell gdbtypes.c\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
\cell read_type_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_tag_reference_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_tag_reference_type ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell die_type()\cell dwarf2read.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell lookup_reference_type()\cell gdbtypes.c\cell\row
\cell set_die_type()\cell dwarf2read.c\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
\cell read_type_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_tag_restrict_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_tag_restrict_type ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell die_type()\cell dwarf2read.c\cell\row
\cell make_cvr_type()\cell gdbtypes.c\cell\row
\cell set_die_type()\cell dwarf2read.c\cell\row
Called by:\cell read_type_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_tag_string_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_tag_string_type ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell create_range_type()\cell gdbtypes.c\cell\row
\cell create_string_type()\cell gdbtypes.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell dwarf2_fundamental_type()\cell dwarf2read.c\cell\row
\cell set_die_type()\cell dwarf2read.c\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
\cell read_type_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_tag_unspecified_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_tag_unspecified_type ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell alloc_type()\cell gdbtypes.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell set_die_type()\cell dwarf2read.c\cell\row
Called by:\cell read_type_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_tag_volatile_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_tag_volatile_type ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell die_type()\cell dwarf2read.c\cell\row
\cell make_cvr_type()\cell gdbtypes.c\cell\row
\cell set_die_type()\cell dwarf2read.c\cell\row
Called by:\cell read_type_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_type_die()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_type_die ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell determine_prefix()\cell dwarf2read.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell dwarf_tag_name()\cell dwarf2read.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell read_array_type()\cell dwarf2read.c\cell\row
\cell read_base_type()\cell dwarf2read.c\cell\row
\cell read_enumeration_type()\cell dwarf2read.c\cell\row
\cell read_set_type()\cell dwarf2read.c\cell\row
\cell read_structure_type()\cell dwarf2read.c\cell\row
\cell read_subrange_type()\cell dwarf2read.c\cell\row
\cell read_subroutine_type()\cell dwarf2read.c\cell\row
\cell read_tag_const_type()\cell dwarf2read.c\cell\row
\cell read_tag_pointer_type()\cell dwarf2read.c\cell\row
\cell read_tag_ptr_to_member_type()\cell dwarf2read.c\cell\row
\cell read_tag_reference_type()\cell dwarf2read.c\cell\row
\cell read_tag_restrict_type()\cell dwarf2read.c\cell\row
\cell read_tag_string_type()\cell dwarf2read.c\cell\row
\cell read_tag_unspecified_type()\cell dwarf2read.c\cell\row
\cell read_tag_volatile_type()\cell dwarf2read.c\cell\row
\cell read_typedef()\cell dwarf2read.c\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
\cell read_structure_type()\cell dwarf2read.c\cell\row
\cell tag_type_to_type()\cell dwarf2read.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell processing_current_prefix\cell cp-namespace.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_typedef()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_typedef ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell die_type()\cell dwarf2read.c\cell\row
\cell dwarf2_attr()\cell dwarf2read.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell set_die_type()\cell dwarf2read.c\cell\row
Called by:\cell process_die()\cell dwarf2read.c\cell\row
\cell read_type_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_unsigned_leb128()\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned long read_unsigned_leb128 ( bfd* abfd, char* buf, unsigned int* bytes_read_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell decode_locdesc()\cell dwarf2read.c\cell\row
\cell dwarf2_read_abbrevs()\cell dwarf2read.c\cell\row
\cell dwarf2_scan_inlined_section_for_psymbols()\cell dwarf2read.c\cell\row
\cell dwarf_decode_line_header()\cell dwarf2read.c\cell\row
\cell dwarf_decode_lines()\cell dwarf2read.c\cell\row
\cell dwarf_decode_macros()\cell dwarf2read.c\cell\row
\cell peek_die_abbrev()\cell dwarf2read.c\cell\row
\cell read_attribute_value()\cell dwarf2read.c\cell\row
\cell read_full_die()\cell dwarf2read.c\cell\row
\cell scan_partial_inlined_function_symbols()\cell dwarf2read.c\cell\row
\cell skip_one_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function reset_die_and_siblings_types()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void reset_die_and_siblings_types ( struct die_info* start_die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell get_die_type()\cell dwarf2read.c\cell\row
\cell reset_die_and_siblings_types()\cell dwarf2read.c\cell\row
Called by:\cell process_queue()\cell dwarf2read.c\cell\row
\cell reset_die_and_siblings_types()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function right_rotate()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void right_rotate ( struct rb_tree_node** root, struct rb_tree_node* x )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell rb_delete_fixup()\cell dwarf2read.c\cell\row
\cell rb_tree_insert()\cell dwarf2read.c\cell\row
\cell rb_tree_remove_node()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function scan_partial_inlined_function_symbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void scan_partial_inlined_function_symbols ( struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell add_psymbol_to_list()\cell symfile.c\cell\row
\cell cp_check_possible_namespace_symbols()\cell cp-namespace.c\cell\row
\cell objfile_text_section_offset()\cell objfiles.c\cell\row
\cell read_1_byte()\cell dwarf2read.c\cell\row
\cell read_2_bytes()\cell dwarf2read.c\cell\row
\cell read_address()\cell dwarf2read.c\cell\row
\cell read_indirect_string()\cell dwarf2read.c\cell\row
\cell read_initial_length()\cell dwarf2read.c\cell\row
\cell read_offset()\cell dwarf2read.c\cell\row
\cell read_unsigned_leb128()\cell dwarf2read.c\cell\row
\cell translate_debug_map_address()\cell dwarf2read.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function scan_partial_symbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void scan_partial_symbols ( struct partial_die_info* first_die, CORE_ADDR* lowpc, CORE_ADDR* highpc, struct dwarf2_cu* cu, struct equiv_psym_list** equiv_psyms )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell add_equiv_psym()\cell dwarf2read.c\cell\row
\cell add_partial_enumeration()\cell dwarf2read.c\cell\row
\cell add_partial_namespace()\cell dwarf2read.c\cell\row
\cell add_partial_symbol()\cell dwarf2read.c\cell\row
\cell fixup_partial_die()\cell dwarf2read.c\cell\row
Called by:\cell add_partial_namespace()\cell dwarf2read.c\cell\row
\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_cu_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_cu_language ( unsigned int lang, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell language_def()\cell language.c\cell\row
Called by:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\cell load_comp_unit()\cell dwarf2read.c\cell\row
\cell load_full_comp_unit()\cell dwarf2read.c\cell\row
\cell read_file_scope()\cell dwarf2read.c\cell\row
\cell set_repository_cu_language()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_die_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_die_type ( struct die_info* die, struct type* type, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell  _obstack_newchunk(), htab_create_alloc_ex(), htab_find_slot_with_hash()\cell\cell\row
Called by:\cell read_array_type()\cell dwarf2read.c\cell\row
\cell read_base_type()\cell dwarf2read.c\cell\row
\cell read_enumeration_type()\cell dwarf2read.c\cell\row
\cell read_namespace()\cell dwarf2read.c\cell\row
\cell read_structure_type()\cell dwarf2read.c\cell\row
\cell read_subrange_type()\cell dwarf2read.c\cell\row
\cell read_subroutine_type()\cell dwarf2read.c\cell\row
\cell read_tag_const_type()\cell dwarf2read.c\cell\row
\cell read_tag_pointer_type()\cell dwarf2read.c\cell\row
\cell read_tag_ptr_to_member_type()\cell dwarf2read.c\cell\row
\cell read_tag_reference_type()\cell dwarf2read.c\cell\row
\cell read_tag_restrict_type()\cell dwarf2read.c\cell\row
\cell read_tag_string_type()\cell dwarf2read.c\cell\row
\cell read_tag_unspecified_type()\cell dwarf2read.c\cell\row
\cell read_tag_volatile_type()\cell dwarf2read.c\cell\row
\cell read_typedef()\cell dwarf2read.c\cell\row
Refs Func:\cell dummy_obstack_deallocate()\cell dwarf2read.c\cell\row
\cell hashtab_obstack_allocate()\cell dwarf2read.c\cell\row
\cell offset_and_type_eq()\cell dwarf2read.c\cell\row
\cell offset_and_type_hash()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_dwarf2_cmd()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_dwarf2_cmd ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  help_list()\cell\cell\row
Used in:\cell _initialize_dwarf2_read()\cell dwarf2read.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\cell set_dwarf2_cmdlist\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_repository_cu_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_repository_cu_language ( unsigned int language, struct dwarf2_cu* old_cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell find_open_repository()\cell dwarf2read.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell set_cu_language()\cell dwarf2read.c\cell\row
Called by:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_debug_debugmap()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_debug_debugmap ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_dwarf2_read()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_dwarf2_cmd()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_dwarf2_cmd ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  cmd_show_list()\cell\cell\row
Used in:\cell _initialize_dwarf2_read()\cell dwarf2read.c\cell\row
Refs Var:\cell show_dwarf2_cmdlist\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_dwarf2_max_cache_age()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_dwarf2_max_cache_age ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_dwarf2_read()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function sibling_die()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct die_info* sibling_die ( struct die_info* die )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell determine_class_name()\cell dwarf2read.c\cell\row
\cell get_scope_pc_bounds()\cell dwarf2read.c\cell\row
\cell process_enumeration_scope()\cell dwarf2read.c\cell\row
\cell process_structure_scope()\cell dwarf2read.c\cell\row
\cell read_array_type()\cell dwarf2read.c\cell\row
\cell read_common_block()\cell dwarf2read.c\cell\row
\cell read_file_scope()\cell dwarf2read.c\cell\row
\cell read_func_scope()\cell dwarf2read.c\cell\row
\cell read_inlined_subroutine_scope()\cell dwarf2read.c\cell\row
\cell read_lexical_block_scope()\cell dwarf2read.c\cell\row
\cell read_namespace()\cell dwarf2read.c\cell\row
\cell read_structure_type()\cell dwarf2read.c\cell\row
\cell read_subroutine_type()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function skip_children()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* skip_children ( char* info_ptr, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell peek_die_abbrev()\cell dwarf2read.c\cell\row
\cell skip_one_die()\cell dwarf2read.c\cell\row
Called by:\cell locate_pdi_sibling()\cell dwarf2read.c\cell\row
\cell skip_one_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function skip_leb128()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* skip_leb128 ( bfd* abfd, char* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell skip_one_die()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function skip_one_die()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* skip_one_die ( char* info_ptr, struct abbrev_info* abbrev, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell dwarf2_get_ref_die_offset()\cell dwarf2read.c\cell\row
\cell dwarf_form_name()\cell dwarf2read.c\cell\row
\cell error()\cell utils.c\cell\row
\cell read_1_byte()\cell dwarf2read.c\cell\row
\cell read_2_bytes()\cell dwarf2read.c\cell\row
\cell read_4_bytes()\cell dwarf2read.c\cell\row
\cell read_attribute()\cell dwarf2read.c\cell\row
\cell read_string()\cell dwarf2read.c\cell\row
\cell read_unsigned_leb128()\cell dwarf2read.c\cell\row
\cell skip_children()\cell dwarf2read.c\cell\row
\cell skip_leb128()\cell dwarf2read.c\cell\row
Called by:\cell load_partial_dies()\cell dwarf2read.c\cell\row
\cell skip_children()\cell dwarf2read.c\cell\row
Refs Var:\cell dwarf2_per_objfile\cell dwarf2read.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function store_in_ref_table()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void store_in_ref_table ( unsigned int offset, struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Called by:\cell read_die_and_children()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function tag_type_to_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* tag_type_to_type ( struct die_info* die, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell dump_die()\cell dwarf2read.c\cell\row
\cell error()\cell utils.c\cell\row
\cell read_type_die()\cell dwarf2read.c\cell\row
Called by:\cell die_containing_type()\cell dwarf2read.c\cell\row
\cell die_type()\cell dwarf2read.c\cell\row
\cell lookup_repository_type()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function translate_common_symbol_debug_map_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int translate_common_symbol_debug_map_address ( struct oso_to_final_addr_map* map, const char* name, CORE_ADDR* addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell decode_locdesc()\cell dwarf2read.c\cell\row
\cell var_decode_location()\cell dwarf2read.c\cell\row
Refs Var:\cell debug_debugmap\cell dwarf2read.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function translate_debug_map_address_with_tuple()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR translate_debug_map_address_with_tuple ( struct oso_to_final_addr_map* map, struct oso_final_addr_tuple* match, CORE_ADDR oso_addr, int highpc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell paddr()\cell utils.c\cell\row
\cell  bsearch()\cell\cell\row
Called by:\cell dwarf2_record_line()\cell dwarf2read.c\cell\row
\cell translate_debug_map_address()\cell dwarf2read.c\cell\row
Refs Func:\cell compare_translation_final_addr()\cell dwarf2read.c\cell\row
Refs Var:\cell debug_debugmap\cell dwarf2read.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function tree_height()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int tree_height ( struct rb_tree_node* tree )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell tree_height()\cell dwarf2read.c\cell\row
Called by:\cell tree_height()\cell dwarf2read.c\cell\row
\cell verify_tree_heights()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function typename_concat()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* typename_concat ( struct obstack* obs, const char* prefix, const char* suffix, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell obconcat()\cell symfile.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), strlen()\cell\cell\row
Called by:\cell determine_class_name()\cell dwarf2read.c\cell\row
\cell determine_prefix()\cell dwarf2read.c\cell\row
\cell new_symbol()\cell dwarf2read.c\cell\row
\cell partial_die_full_name()\cell dwarf2read.c\cell\row
\cell partial_die_parent_scope()\cell dwarf2read.c\cell\row
\cell read_enumeration_type()\cell dwarf2read.c\cell\row
\cell read_namespace()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function var_decode_location()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void var_decode_location ( struct attribute* attr, struct symbol* sym, struct dwarf2_cu* cu )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell attr_form_is_block()\cell dwarf2read.c\cell\row
\cell dwarf2_symbol_mark_computed()\cell dwarf2read.c\cell\row
\cell fixup_symbol_section()\cell symtab.c\cell\row
\cell objfile_section_offset()\cell objfiles.c\cell\row
\cell read_address()\cell dwarf2read.c\cell\row
\cell translate_common_symbol_debug_map_address()\cell dwarf2read.c\cell\row
\cell translate_debug_map_address()\cell dwarf2read.c\cell\row
Called by:\cell new_symbol()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function verify_rb_tree()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int verify_rb_tree ( struct rb_tree_node* tree )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell verify_tree_colors()\cell dwarf2read.c\cell\row
\cell verify_tree_heights()\cell dwarf2read.c\cell\row
\cell  fprintf()\cell\cell\row
Called by:\cell rb_tree_remove_node()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function verify_tree_colors()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int verify_tree_colors ( struct rb_tree_node* tree )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell verify_tree_colors()\cell dwarf2read.c\cell\row
Called by:\cell verify_rb_tree()\cell dwarf2read.c\cell\row
\cell verify_tree_colors()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function verify_tree_heights()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int verify_tree_heights ( struct rb_tree_node* tree )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2read.c\cell\cell\row
Calls: \cell tree_height()\cell dwarf2read.c\cell\row
Called by:\cell verify_rb_tree()\cell dwarf2read.c\cell\row
\intbl0
}
