{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF linespec.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File linespec.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "source.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/demangle.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "completer.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "cp-abi.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "parser-defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objc-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <Availability.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "linespec.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exceptions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <setjmp.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type enum sign\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum sign}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 none;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 plus;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 minus;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type enum sign\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum sign}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 none;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 plus;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 minus;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable allow_objc_selectors_flag\par}
{\s5\f1\fs20\ql\sb50\sa50 int allow_objc_selectors_flag\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell breakpoint.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell source.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
Used in:\cell decode_line_1()\cell linespec.c\cell\row
\cell rbreak_command()\cell symtab.c\cell\row
\cell reset_allow_objc_selectors_flag()\cell linespec.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function decode_line_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symtabs_and_lines decode_line_1 ( const char** argptr, int funfirstline, struct symtab* default_symtab, int default_line, char*** canonical, int* not_found_ptr, int find_all_occurrences )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.h\cell\cell\row
Calls: \cell decode_all_digits()\cell linespec.c\cell\row
\cell decode_all_digits_exhaustive()\cell linespec.c\cell\row
\cell decode_all_variables()\cell linespec.c\cell\row
\cell decode_compound()\cell linespec.c\cell\row
\cell decode_dollar()\cell linespec.c\cell\row
\cell decode_indirect()\cell linespec.c\cell\row
\cell decode_objc()\cell linespec.c\cell\row
\cell decode_variable()\cell linespec.c\cell\row
\cell error()\cell utils.c\cell\row
\cell get_gdb_completer_quote_characters()\cell completer.c\cell\row
\cell initialize_defaults()\cell linespec.c\cell\row
\cell intersect_sals()\cell linespec.c\cell\row
\cell is_objc_method_format()\cell linespec.c\cell\row
\cell locate_first_half()\cell linespec.c\cell\row
\cell set_flags()\cell linespec.c\cell\row
\cell skip_quoted()\cell completer.c\cell\row
\cell skip_quoted_chars()\cell completer.c\cell\row
\cell symtab_from_filename()\cell linespec.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk(), strchr(), strcmp()\cell\cell\row
Called by:\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell decode_line_spec()\cell symtab.c\cell\row
\cell decode_line_spec_1()\cell breakpoint.c\cell\row
\cell parse_breakpoint_sals()\cell breakpoint.c\cell\row
\cell scope_info()\cell tracepoint.c\cell\row
\cell solib_load_unload_1()\cell breakpoint.c\cell\row
\cell trace_command()\cell tracepoint.c\cell\row
\cell until_break_command()\cell breakpoint.c\cell\row
Refs Var:\cell allow_objc_selectors_flag\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function decode_objc()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symtabs_and_lines decode_objc ( const char** argptr, int funfirstline, struct symtab* file_symtab, char*** canonical, const char* saved_arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell build_canonical_line_spec()\cell linespec.c\cell\row
\cell decode_line_2()\cell linespec.c\cell\row
\cell find_function_start_sal()\cell symtab.c\cell\row
\cell find_imps()\cell objc-lang.c\cell\row
\cell find_pc_function()\cell blockframe.c\cell\row
\cell find_pc_sect_function()\cell blockframe.c\cell\row
\cell gdbarch_skip_prologue()\cell gdbarch.c\cell\row
\cell gdbarch_skip_prologue_addr_ctx()\cell gdbarch.c\cell\row
\cell gdbarch_skip_prologue_addr_ctx_p()\cell gdbarch.c\cell\row
\cell get_selected_block()\cell stack.c\cell\row
\cell init_address_context()\cell symtab.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell ui_out_is_mi_like_p()\cell ui-out.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin_alloca(), strcmp()\cell\cell\row
Called by:\cell decode_line_1()\cell linespec.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function reset_allow_objc_selectors_flag()\par}
{\s5\f1\fs20\ql\sb50\sa50 void reset_allow_objc_selectors_flag ( void* dummy )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.h\cell\cell\row
Used in:\cell rbreak_command()\cell symtab.c\cell\row
Refs Var:\cell allow_objc_selectors_flag\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_constructors()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int add_constructors ( int method_counter, struct type* t, struct symbol*** sym_arr, int* sym_arr_size, int* sym_arr_pos )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell is_constructor_name()\cell cp-abi.c\cell\row
\cell lookup_symbol_all()\cell symtab.c\cell\row
\cell remove_duplicate_symbols()\cell linespec.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
Called by:\cell find_methods()\cell linespec.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_matching_methods()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int add_matching_methods ( int method_counter, struct type* t, struct symbol*** sym_arr, int* sym_arr_size, int* sym_arr_pos )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell gdb_mangle_name()\cell symtab.c\cell\row
\cell is_destructor_name()\cell cp-abi.c\cell\row
\cell lookup_symbol_all()\cell symtab.c\cell\row
\cell remove_duplicate_symbols()\cell linespec.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___snprintf_chk(), __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcpy_chk(), strlen()\cell\cell\row
Called by:\cell find_methods()\cell linespec.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function build_canonical_line_spec()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void build_canonical_line_spec ( struct symtab_and_line* sal, const char* symname, char*** canonical )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___snprintf_chk(), __builtin_object_size(), strlen()\cell\cell\row
Called by:\cell decode_all_digits()\cell linespec.c\cell\row
\cell decode_all_digits_exhaustive()\cell linespec.c\cell\row
\cell decode_dollar()\cell linespec.c\cell\row
\cell decode_objc()\cell linespec.c\cell\row
\cell symbol_found()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function collect_methods()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int collect_methods ( char* copy, struct type* t, struct symbol*** sym_arr, int* sym_arr_size )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell destructor_name_p()\cell valops.c\cell\row
\cell find_methods()\cell linespec.c\cell\row
\cell get_destructor_fn_field()\cell gdbtypes.c\cell\row
\cell lookup_symbol_all()\cell symtab.c\cell\row
\cell remove_duplicate_symbols()\cell linespec.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___snprintf_chk(), __builtin_alloca(), __builtin_object_size(), strlen()\cell\cell\row
Called by:\cell find_method()\cell linespec.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cplusplus_error()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void cplusplus_error ( const char* name, const char* fmt, ... )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell error_stream()\cell utils.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell make_cleanup_ui_file_delete()\cell utils.c\cell\row
\cell mem_fileopen()\cell ui-file.c\cell\row
\cell vfprintf_unfiltered()\cell utils.c\cell\row
\cell  __builtin_va_end(), __builtin_va_start()\cell\cell\row
Called by:\cell decode_compound()\cell linespec.c\cell\row
\cell find_method()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_all_digits()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtabs_and_lines decode_all_digits ( const char** argptr, int funfirstline, struct symtab* default_symtab, int default_line, char*** canonical, struct symtab* file_symtab, const char* q )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell build_canonical_line_spec()\cell linespec.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell find_function_start_sal()\cell symtab.c\cell\row
\cell find_line_pc()\cell symtab.c\cell\row
\cell find_line_symtab()\cell symtab.c\cell\row
\cell find_pc_function()\cell blockframe.c\cell\row
\cell init_sal()\cell symtab.c\cell\row
\cell initialize_defaults()\cell linespec.c\cell\row
\cell make_cleanup_restrict_to_objfile()\cell objfiles.c\cell\row
\cell set_default_source_symtab_and_line()\cell source.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  atoi()\cell\cell\row
Called by:\cell decode_line_1()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_all_digits_exhaustive()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtabs_and_lines decode_all_digits_exhaustive ( const char** argptr, int funfirstline, struct symtab* default_symtab, int default_line, char*** canonical, struct symtab* file_symtab, const char* q, int* parsed_lineno, int* not_found_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell blockvector_for_pc_sect()\cell block.c\cell\row
\cell build_canonical_line_spec()\cell linespec.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell find_function_start_sal()\cell symtab.c\cell\row
\cell find_pc_function()\cell blockframe.c\cell\row
\cell init_sal()\cell symtab.c\cell\row
\cell initialize_defaults()\cell linespec.c\cell\row
\cell make_cleanup_restrict_to_objfile()\cell objfiles.c\cell\row
\cell one_block_contains_other()\cell linespec.c\cell\row
\cell set_default_source_symtab_and_line()\cell source.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  atoi(), exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp(), throw_exception()\cell\cell\row
Called by:\cell decode_line_1()\cell linespec.c\cell\row
Refs Var:\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_all_variables()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtabs_and_lines decode_all_variables ( char* copy, int funfirstline, int equivalencies, char*** canonical, struct symtab* file_symtab, int* not_found_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell get_selected_block()\cell stack.c\cell\row
\cell have_full_symbols()\cell objfiles.c\cell\row
\cell have_minimal_symbols()\cell objfiles.c\cell\row
\cell have_partial_symbols()\cell objfiles.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_minimal_symbol_all()\cell minsyms.c\cell\row
\cell lookup_symbol_all()\cell symtab.c\cell\row
\cell minsyms_found()\cell linespec.c\cell\row
\cell remove_duplicate_sals()\cell breakpoint.c\cell\row
\cell symbols_found()\cell linespec.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  strcmp(), throw_error()\cell\cell\row
Called by:\cell decode_line_1()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_compound()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtabs_and_lines decode_compound ( const char** argptr, int funfirstline, char*** canonical, const char* saved_arg, const char* p, int* not_found_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell cplusplus_error()\cell linespec.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_method()\cell linespec.c\cell\row
\cell find_template_name_end()\cell parse.c\cell\row
\cell get_gdb_completer_quote_characters()\cell completer.c\cell\row
\cell lookup_prefix_sym()\cell linespec.c\cell\row
\cell lookup_symbol_all()\cell symtab.c\cell\row
\cell skip_quoted()\cell completer.c\cell\row
\cell symbols_found()\cell linespec.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), strchr()\cell\cell\row
Called by:\cell decode_line_1()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_dollar()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtabs_and_lines decode_dollar ( char* copy, int funfirstline, struct symtab* default_symtab, char*** canonical, struct symtab* file_symtab )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell access_value_history()\cell value.c\cell\row
\cell build_canonical_line_spec()\cell linespec.c\cell\row
\cell error()\cell utils.c\cell\row
\cell init_sal()\cell symtab.c\cell\row
\cell lookup_internalvar()\cell value.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_symbol()\cell symtab.c\cell\row
\cell minsym_found()\cell linespec.c\cell\row
\cell symbol_found()\cell linespec.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_of_internalvar()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  sscanf()\cell\cell\row
Called by:\cell decode_line_1()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_indirect()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtabs_and_lines decode_indirect ( const char** argptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell find_pc_line()\cell symtab.c\cell\row
\cell find_pc_overlay()\cell symfile.c\cell\row
\cell parse_and_eval_address_1()\cell eval.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell decode_line_1()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_line_2()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtabs_and_lines decode_line_2 ( struct symbol* sym_arr[], int nelts, int nsyms, int funfirstline, int accept_all, char*** canonical )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell command_line_input()\cell top.c\cell\row
\cell discard_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_function_start_sal()\cell symtab.c\cell\row
\cell gdbarch_skip_prologue()\cell gdbarch.c\cell\row
\cell gdbarch_skip_prologue_addr_ctx()\cell gdbarch.c\cell\row
\cell gdbarch_skip_prologue_addr_ctx_p()\cell gdbarch.c\cell\row
\cell init_address_context()\cell symtab.c\cell\row
\cell init_sal()\cell symtab.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell quit()\cell utils.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk(), atoi(), error_no_arg(), getenv(), strlen()\cell\cell\row
Called by:\cell decode_objc()\cell linespec.c\cell\row
\cell find_method()\cell linespec.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell demangle\cell utils.c\cell\row
\cell quit_flag\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_variable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtabs_and_lines decode_variable ( char* copy, int funfirstline, int equivalencies, char*** canonical, struct symtab* file_symtab, int* not_found_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell get_selected_block()\cell stack.c\cell\row
\cell have_full_symbols()\cell objfiles.c\cell\row
\cell have_minimal_symbols()\cell objfiles.c\cell\row
\cell have_partial_symbols()\cell objfiles.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_symbol()\cell symtab.c\cell\row
\cell minsym_found()\cell linespec.c\cell\row
\cell symbol_found()\cell linespec.c\cell\row
\cell  throw_error()\cell\cell\row
Called by:\cell decode_line_1()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_method()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtabs_and_lines find_method ( int funfirstline, char*** canonical, const char* saved_arg, char* copy, struct type* t, struct symbol* sym_class, int* not_found_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell collect_methods()\cell linespec.c\cell\row
\cell cplusplus_error()\cell linespec.c\cell\row
\cell decode_line_2()\cell linespec.c\cell\row
\cell find_function_start_sal()\cell symtab.c\cell\row
\cell is_operator_name()\cell cp-abi.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell total_number_of_methods()\cell linespec.c\cell\row
\cell ui_out_is_mi_like_p()\cell ui-out.c\cell\row
\cell xcalloc()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), strlen()\cell\cell\row
Called by:\cell decode_compound()\cell linespec.c\cell\row
Refs Var:\cell demangle\cell utils.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_methods()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int find_methods ( struct type* t, char* name, struct symbol*** sym_arr, int* sym_arr_size, int* sym_arr_pos )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell add_constructors()\cell linespec.c\cell\row
\cell add_matching_methods()\cell linespec.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell find_methods()\cell linespec.c\cell\row
\cell lookup_symbol()\cell symtab.c\cell\row
\cell make_cleanup_restore_language()\cell language.c\cell\row
\cell strcmp_iw()\cell utils.c\cell\row
\cell type_name_no_tag()\cell gdbtypes.c\cell\row
\cell  cplus_demangle_opname(), strlen(), strncmp()\cell\cell\row
Called by:\cell collect_methods()\cell linespec.c\cell\row
\cell find_methods()\cell linespec.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_toplevel_char()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* find_toplevel_char ( const char* s, char c )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Called by:\cell locate_first_half()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function initialize_defaults()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void initialize_defaults ( struct symtab** default_symtab, int* default_line )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell get_current_source_symtab_and_line()\cell source.c\cell\row
Called by:\cell decode_all_digits()\cell linespec.c\cell\row
\cell decode_all_digits_exhaustive()\cell linespec.c\cell\row
\cell decode_line_1()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function intersect_sals()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void intersect_sals ( struct symtabs_and_lines* dst_sals, const struct symtabs_and_lines* src_sals )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell sals_pushback()\cell linespec.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell decode_line_1()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_objc_method_format()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int is_objc_method_format ( const char* s )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell  strchr()\cell\cell\row
Called by:\cell decode_line_1()\cell linespec.c\cell\row
\cell locate_first_half()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function locate_first_half()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* locate_first_half ( const char** argptr, int* is_quote_enclosed )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell find_template_name_end()\cell parse.c\cell\row
\cell find_toplevel_char()\cell linespec.c\cell\row
\cell is_objc_method_format()\cell linespec.c\cell\row
\cell  strchr()\cell\cell\row
Called by:\cell decode_line_1()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function lookup_prefix_sym()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* lookup_prefix_sym ( const char** argptr, const char* p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell lookup_symbol()\cell symtab.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell decode_compound()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function minsym_found()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtabs_and_lines minsym_found ( int funfirstline, int equivalencies, struct minimal_symbol* msymbol, char*** canonical )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell find_equivalent_msymbol()\cell symmisc.c\cell\row
\cell find_pc_sect_line()\cell symtab.c\cell\row
\cell gdbarch_deprecated_function_start_offset()\cell gdbarch.c\cell\row
\cell gdbarch_skip_prologue()\cell gdbarch.c\cell\row
\cell gdbarch_skip_prologue_addr_ctx()\cell gdbarch.c\cell\row
\cell gdbarch_skip_prologue_addr_ctx_p()\cell gdbarch.c\cell\row
\cell init_address_context()\cell symtab.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell xasprintf()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell decode_dollar()\cell linespec.c\cell\row
\cell decode_variable()\cell linespec.c\cell\row
Refs Func:\cell null_cleanup()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function minsyms_found()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtabs_and_lines minsyms_found ( int funfirstline, int equivalencies, struct symbol_search* sym_list, char*** canonical )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell find_equivalent_msymbol()\cell symmisc.c\cell\row
\cell find_pc_sect_line()\cell symtab.c\cell\row
\cell gdbarch_deprecated_function_start_offset()\cell gdbarch.c\cell\row
\cell gdbarch_skip_prologue()\cell gdbarch.c\cell\row
\cell gdbarch_skip_prologue_addr_ctx()\cell gdbarch.c\cell\row
\cell gdbarch_skip_prologue_addr_ctx_p()\cell gdbarch.c\cell\row
\cell init_address_context()\cell symtab.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell xasprintf()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell decode_all_variables()\cell linespec.c\cell\row
Refs Func:\cell null_cleanup()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function one_block_contains_other()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int one_block_contains_other ( struct blockvector* bv, int index1, int index2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Called by:\cell decode_all_digits_exhaustive()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function remove_duplicate_symbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void remove_duplicate_symbols ( struct symbol** sym_arr, int sym_arr_pos, struct symbol_search** sym_list )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell add_constructors()\cell linespec.c\cell\row
\cell add_matching_methods()\cell linespec.c\cell\row
\cell collect_methods()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function sals_pushback()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void sals_pushback ( struct symtabs_and_lines* sals, struct symtab_and_line* sal, unsigned int num_sals )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell intersect_sals()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_flags()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_flags ( const char* arg, int* is_quoted, char** paren_pointer )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell get_gdb_completer_quote_characters()\cell completer.c\cell\row
\cell  strchr(), strrchr(), strstr()\cell\cell\row
Called by:\cell decode_line_1()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function symbol_found()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtabs_and_lines symbol_found ( int funfirstline, char*** canonical, char* copy, struct symbol* sym, struct symtab* file_symtab, struct symtab* sym_symtab )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell build_canonical_line_spec()\cell linespec.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_function_start_sal()\cell symtab.c\cell\row
\cell lookup_block_symbol()\cell symtab.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell decode_dollar()\cell linespec.c\cell\row
\cell decode_variable()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function symbols_found()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtabs_and_lines symbols_found ( int funfirstline, char*** canonical, char* copy, struct symbol_search* sym_list, struct symtab* file_symtab )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell find_function_start_sal()\cell symtab.c\cell\row
\cell lookup_block_symbol()\cell symtab.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin___snprintf_chk(), __builtin_object_size(), __inline_memset_chk(), strlen()\cell\cell\row
Called by:\cell decode_all_variables()\cell linespec.c\cell\row
\cell decode_compound()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function symtab_from_filename()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symtab** symtab_from_filename ( const char** argptr, const char* p, int is_quote_enclosed, int* not_found_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell have_full_symbols()\cell objfiles.c\cell\row
\cell have_partial_symbols()\cell objfiles.c\cell\row
\cell lookup_symtab_all()\cell symtab.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), throw_error()\cell\cell\row
Called by:\cell decode_line_1()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function total_number_of_methods()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int total_number_of_methods ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell linespec.c\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell total_number_of_methods()\cell linespec.c\cell\row
Called by:\cell find_method()\cell linespec.c\cell\row
\cell total_number_of_methods()\cell linespec.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
}
