{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF scm-lang.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File scm-lang.c\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Refs Func:\cell basic_lookup_symbol_nonlocal()\cell symtab.c\cell\row
\cell basic_lookup_transparent_type()\cell symtab.c\cell\row
\cell c_error()\cell c-exp.c\cell\row
\cell c_language_arch_info()\cell c-lang.c\cell\row
\cell c_print_type()\cell c-typeprint.c\cell\row
\cell default_word_break_characters()\cell language.c\cell\row
\cell dump_subexp_body_standard()\cell expprint.c\cell\row
\cell evaluate_subexp_scm()\cell scm-lang.c\cell\row
\cell null_post_parser()\cell parse.c\cell\row
\cell op_name_standard()\cell expprint.c\cell\row
\cell operator_length_standard()\cell parse.c\cell\row
\cell print_subexp_standard()\cell expprint.c\cell\row
\cell scm_parse()\cell scm-exp.c\cell\row
\cell scm_printchar()\cell scm-lang.c\cell\row
\cell scm_printstr()\cell scm-lang.c\cell\row
\cell scm_val_print()\cell scm-valprint.c\cell\row
\cell scm_value_print()\cell scm-valprint.c\cell\row
\cell value_of_this()\cell valops.c\cell\row
Refs Var:\cell exp_descriptor_scm\cell scm-lang.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "parser-defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "c-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "macroexp.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "scm-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "scm-tags.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "scm-tags.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "source.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "infcall.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable builtin_type_scm\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* builtin_type_scm\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell value.c\cell\cell\row
Used in:\cell _initialize_scheme_language()\cell scm-lang.c\cell\row
\cell scm_get_field()\cell scm-lang.c\cell\row
\cell scm_ipruk()\cell scm-valprint.c\cell\row
\cell scm_lookup_name()\cell scm-lang.c\cell\row
\cell scm_lreadr()\cell scm-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable exp_descriptor_scm\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct exp_descriptor exp_descriptor_scm\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell scm-lang.c\cell\cell\row
Used in:\cell scm-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable scm_language_defn\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct language_defn scm_language_defn\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell scm-lang.c\cell\cell\row
Used in:\cell _initialize_scheme_language()\cell scm-lang.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_scheme_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_scheme_language ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell scm-lang.c\cell\cell\row
Calls: \cell add_language()\cell language.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
Refs Var:\cell builtin_type_scm\cell scm-lang.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell scm_language_defn\cell scm-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function is_scmvalue_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 int is_scmvalue_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell scm-lang.h\cell\cell\row
Calls: \cell  strcmp()\cell\cell\row
Called by:\cell scm_lreadr()\cell scm-exp.c\cell\row
\cell scm_unpack()\cell scm-lang.c\cell\row
\cell scm_val_print()\cell scm-valprint.c\cell\row
\cell unpack_long()\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function scm_evaluate_string()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* scm_evaluate_string ( char* str, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell scm-lang.h\cell\cell\row
Calls: \cell call_function_by_hand()\cell infcall.c\cell\row
\cell find_function_in_inferior()\cell valops.c\cell\row
\cell value_allocate_space_in_inferior()\cell valops.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell write_memory()\cell corefile.c\cell\row
Called by:\cell evaluate_subexp_scm()\cell scm-lang.c\cell\row
\cell scm_lreadr()\cell scm-exp.c\cell\row
Refs Var:\cell builtin_type_voidptrfuncptr\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function scm_get_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 long scm_get_field ( long svalue, int index )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell scm-lang.h\cell\cell\row
Calls: \cell extract_signed_integer()\cell findvar.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell read_memory()\cell corefile.c\cell\row
Called by:\cell scm_ipruk()\cell scm-valprint.c\cell\row
\cell scm_scmlist_print()\cell scm-valprint.c\cell\row
\cell scm_scmval_print()\cell scm-valprint.c\cell\row
Refs Var:\cell builtin_type_scm\cell scm-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function scm_printchar()\par}
{\s5\f1\fs20\ql\sb50\sa50 void scm_printchar ( int c, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell scm-lang.h\cell\cell\row
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Called by:\cell scm_scmval_print()\cell scm-valprint.c\cell\row
Used in:\cell scm-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function scm_unpack()\par}
{\s5\f1\fs20\ql\sb50\sa50 long scm_unpack ( struct type* type, const gdb_byte* valaddr, enum type_code context )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell scm-lang.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell extract_signed_integer()\cell findvar.c\cell\row
\cell is_scmvalue_type()\cell scm-lang.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell unpack_long()\cell value.c\cell\row
Called by:\cell unpack_long()\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function evaluate_subexp_scm()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* evaluate_subexp_scm ( struct type* expect_type, struct expression* exp, int* pos, enum noside noside )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell scm-lang.c\cell\cell\row
Calls: \cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell longest_to_int()\cell valprint.c\cell\row
\cell scm_evaluate_string()\cell scm-lang.c\cell\row
\cell scm_lookup_name()\cell scm-lang.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
Used in:\cell scm-lang.c\cell\cell\row
Refs Var:\cell builtin_type_long\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function in_eval_c()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int in_eval_c ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell scm-lang.c\cell\cell\row
Calls: \cell get_current_source_symtab_and_line()\cell source.c\cell\row
\cell  strcmp(), strlen()\cell\cell\row
Called by:\cell scm_lookup_name()\cell scm-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function scm_lookup_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* scm_lookup_name ( char* str )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell scm-lang.c\cell\cell\row
Calls: \cell call_function_by_hand()\cell infcall.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_function_in_inferior()\cell valops.c\cell\row
\cell in_eval_c()\cell scm-lang.c\cell\row
\cell lookup_symbol()\cell symtab.c\cell\row
\cell value_allocate_space_in_inferior()\cell valops.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_logical_not()\cell valarith.c\cell\row
\cell value_of_variable()\cell valops.c\cell\row
\cell write_memory()\cell corefile.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell evaluate_subexp_scm()\cell scm-lang.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell builtin_type_scm\cell scm-lang.c\cell\row
\cell builtin_type_voidptrfuncptr\cell gdbtypes.c\cell\row
\cell expression_context_block\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function scm_printstr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void scm_printstr ( struct ui_file* stream, const gdb_byte* string, unsigned int length, int width, int force_ellipses )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell scm-lang.c\cell\cell\row
\intbl0
}
