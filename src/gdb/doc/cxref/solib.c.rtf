{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF solib.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File solib.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <fcntl.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exceptions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <setjmp.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "environ.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "completer.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/filenames.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/hashtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exec.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "solist.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "observer.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../readline/readline.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../readline/rlstdc.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../readline/rltypedefs.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../readline/keymaps.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../readline/tilde.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "solib.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable current_target_so_ops\par}
{\s5\f1\fs20\ql\sb50\sa50 struct target_so_ops* current_target_so_ops\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell breakpoint.c\cell\cell\row
\cell solib-null.c\cell\cell\row
\cell solib.c\cell\cell\row
Used in:\cell _initialize_null_solib()\cell solib-null.c\cell\row
\cell solib_init()\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable solib_data\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct gdbarch_data* solib_data\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_solib()\cell\cell\row
\cell solib_ops()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable so_list_head\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct so_list* so_list_head\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell clear_solib()\cell\cell\row
\cell info_sharedlibrary_command()\cell\cell\row
\cell master_so_list()\cell\cell\row
\cell solib_add()\cell\cell\row
\cell solib_address()\cell\cell\row
\cell update_solib_list()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable solib_cleanup_queued\par}
{\s5\f1\fs20\ql\sb50\sa50 static int solib_cleanup_queued\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell do_clear_solib()\cell\cell\row
\cell update_solib_list()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable solib_absolute_prefix\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* solib_absolute_prefix\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_solib()\cell\cell\row
\cell solib_open()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable solib_search_path\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* solib_search_path\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_solib()\cell\cell\row
\cell solib_open()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_solib()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_solib ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell solib.c\cell\cell\row
Calls: \cell gdbarch_data_register_pre_init()\cell gdbarch.c\cell\row
\cell  add_com(), add_info(), add_setshow_boolean_cmd(), add_setshow_filename_cmd(), add_setshow_optional_filename_cmd(), xstrdup()\cell\cell\row
Refs Func:\cell info_sharedlibrary_command()\cell solib.c\cell\row
\cell no_shared_libraries()\cell solib.c\cell\row
\cell reload_shared_libraries()\cell solib.c\cell\row
\cell sharedlibrary_command()\cell solib.c\cell\row
\cell show_auto_solib_add()\cell solib.c\cell\row
\cell show_solib_search_path()\cell solib.c\cell\row
\cell solib_init()\cell solib.c\cell\row
Refs Var:\cell auto_solib_add\cell symfile.c\cell\row
\cell gdb_sysroot\cell main.c\cell\row
\cell solib_absolute_prefix\cell solib.c\cell\row
\cell solib_data\cell solib.c\cell\row
\cell solib_search_path\cell solib.c\cell\row
\cell  setlist, showlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function clear_solib()\par}
{\s5\f1\fs20\ql\sb50\sa50 void clear_solib ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell disable_breakpoints_in_shlibs()\cell breakpoint.c\cell\row
\cell free_so()\cell solib.c\cell\row
\cell remove_target_sections()\cell target/target.c\cell\row
\cell solib_ops()\cell solib.c\cell\row
Called by:\cell attach_command()\cell infcmd.c\cell\row
\cell do_clear_solib()\cell solib.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell so_list_head\cell solib.c\cell\row
\cell  exec_bfd\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function free_so()\par}
{\s5\f1\fs20\ql\sb50\sa50 void free_so ( struct so_list* so )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell solist.h\cell\cell\row
Calls: \cell solib_ops()\cell solib.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  bfd_close(), bfd_errmsg(), bfd_get_error()\cell\cell\row
Called by:\cell clear_solib()\cell solib.c\cell\row
\cell update_solib_list()\cell solib.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function in_solib_dynsym_resolve_code()\par}
{\s5\f1\fs20\ql\sb50\sa50 int in_solib_dynsym_resolve_code ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell solib.h\cell\cell\row
Calls: \cell solib_ops()\cell solib.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function master_so_list()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct so_list* master_so_list ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell solist.h\cell\cell\row
Refs Var:\cell so_list_head\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function no_shared_libraries()\par}
{\s5\f1\fs20\ql\sb50\sa50 void no_shared_libraries ( const char* ignored, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell solib.h\cell\cell\row
Calls: \cell do_clear_solib()\cell solib.c\cell\row
\cell objfile_purge_solibs()\cell objfiles.c\cell\row
Called by:\cell reload_shared_libraries()\cell solib.c\cell\row
\cell remote_open_1()\cell remote.c\cell\row
Used in:\cell _initialize_solib()\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function solib_add()\par}
{\s5\f1\fs20\ql\sb50\sa50 int solib_add ( const char* pattern, int from_tty, struct target_ops* target, int readsyms )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell solib.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell re_comp()\cell utils.c\cell\row
\cell re_exec()\cell utils.c\cell\row
\cell reinit_frame_cache()\cell frame.c\cell\row
\cell solib_ops()\cell solib.c\cell\row
\cell solib_read_symbols()\cell solib.c\cell\row
\cell update_solib_list()\cell solib.c\cell\row
Called by:\cell reload_shared_libraries()\cell solib.c\cell\row
\cell sharedlibrary_command()\cell solib.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell so_list_head\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function solib_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* solib_address ( CORE_ADDR address )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell solib.h\cell\cell\row
Refs Var:\cell so_list_head\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function solib_create_inferior_hook()\par}
{\s5\f1\fs20\ql\sb50\sa50 void solib_create_inferior_hook ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inferior.h\cell\cell\row
Calls: \cell solib_ops()\cell solib.c\cell\row
Called by:\cell follow_exec()\cell infrun.c\cell\row
\cell remote_open_1()\cell remote.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function solib_open()\par}
{\s5\f1\fs20\ql\sb50\sa50 int solib_open ( char* in_pathname, char** found_pathname )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell solist.h\cell\cell\row
Calls: \cell get_in_environ()\cell environ.c\cell\row
\cell openp()\cell source.c\cell\row
\cell solib_ops()\cell solib.c\cell\row
\cell  __builtin___strcat_chk(), __builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcat_chk(), __inline_strncpy_chk(), lbasename(), open(), strlen(), xstrdup()\cell\cell\row
Called by:\cell solib_map_sections()\cell solib.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell inferior_environ\cell infcmd.c\cell\row
\cell solib_absolute_prefix\cell solib.c\cell\row
\cell solib_search_path\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function solib_read_symbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 int solib_read_symbols ( struct so_list* so, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell solib.h\cell\cell\row
Calls: \cell printf_unfiltered()\cell utils.c\cell\row
\cell  catch_errors()\cell\cell\row
Called by:\cell solib_add()\cell solib.c\cell\row
Refs Func:\cell symbol_add_stub()\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_clear_solib()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_clear_solib ( void* dummy )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell solib.c\cell\cell\row
Calls: \cell clear_solib()\cell solib.c\cell\row
Called by:\cell no_shared_libraries()\cell solib.c\cell\row
Used in:\cell update_solib_list()\cell solib.c\cell\row
Refs Var:\cell solib_cleanup_queued\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function info_sharedlibrary_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void info_sharedlibrary_command ( const char* ignore, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_ptr_bit()\cell gdbarch.c\cell\row
\cell hex_string_custom()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell update_solib_list()\cell solib.c\cell\row
Used in:\cell _initialize_solib()\cell solib.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell so_list_head\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function reload_shared_libraries()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void reload_shared_libraries ( const char* ignored, int from_tty, struct cmd_list_element* e )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell no_shared_libraries()\cell solib.c\cell\row
\cell solib_add()\cell solib.c\cell\row
Used in:\cell _initialize_solib()\cell solib.c\cell\row
Refs Var:\cell auto_solib_add\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function sharedlibrary_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void sharedlibrary_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell dont_repeat()\cell top.c\cell\row
\cell solib_add()\cell solib.c\cell\row
Used in:\cell _initialize_solib()\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_auto_solib_add()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_auto_solib_add ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_solib()\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_solib_search_path()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_solib_search_path ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_solib()\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function solib_init()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void* solib_init ( struct obstack* obstack )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Used in:\cell _initialize_solib()\cell solib.c\cell\row
Refs Var:\cell current_target_so_ops\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function solib_map_sections()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int solib_map_sections ( void* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell perror_with_name()\cell utils.c\cell\row
\cell solib_open()\cell solib.c\cell\row
\cell solib_ops()\cell solib.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), bfd_check_format(), bfd_errmsg(), bfd_fopen(), bfd_get_error(), build_section_table(), close(), strcmp(), strlen(), tilde_expand()\cell\cell\row
Used in:\cell update_solib_list()\cell solib.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell gnutarget\cell corefile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function solib_ops()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct target_so_ops* solib_ops ( struct gdbarch* gdbarch )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell new_gdbarch_data()\cell gdbarch.c\cell\row
Called by:\cell clear_solib()\cell solib.c\cell\row
\cell free_so()\cell solib.c\cell\row
\cell in_solib_dynsym_resolve_code()\cell solib.c\cell\row
\cell solib_add()\cell solib.c\cell\row
\cell solib_create_inferior_hook()\cell solib.c\cell\row
\cell solib_map_sections()\cell solib.c\cell\row
\cell solib_open()\cell solib.c\cell\row
\cell update_solib_list()\cell solib.c\cell\row
Refs Var:\cell solib_data\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function symbol_add_stub()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int symbol_add_stub ( void* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell build_section_addr_info_from_section_table()\cell symfile.c\cell\row
\cell free_section_addr_info()\cell symfile.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell symbol_file_add()\cell symfile.c\cell\row
\cell  strcmp()\cell\cell\row
Used in:\cell solib_read_symbols()\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function update_solib_list()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void update_solib_list ( int from_tty, struct target_ops* target )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell free_objfile()\cell objfiles.c\cell\row
\cell free_so()\cell solib.c\cell\row
\cell make_run_cleanup()\cell utils.c\cell\row
\cell observer_notify_solib_loaded()\cell observer.c\cell\row
\cell observer_notify_solib_unloaded()\cell observer.c\cell\row
\cell remove_target_sections()\cell target/target.c\cell\row
\cell solib_ops()\cell solib.c\cell\row
\cell target_resize_to_sections()\cell target/target.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), catch_errors(), strcmp()\cell\cell\row
Called by:\cell info_sharedlibrary_command()\cell solib.c\cell\row
\cell solib_add()\cell solib.c\cell\row
Refs Func:\cell do_clear_solib()\cell solib.c\cell\row
\cell solib_map_sections()\cell solib.c\cell\row
Refs Var:\cell attach_flag\cell target/target.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell so_list_head\cell solib.c\cell\row
\cell solib_cleanup_queued\cell solib.c\cell\row
\cell symfile_objfile\cell objfiles.c\cell\row
\intbl0
}
