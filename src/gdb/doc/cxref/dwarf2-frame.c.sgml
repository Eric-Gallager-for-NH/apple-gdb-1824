<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF dwarf2-frame.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for dwarf2-frame.c of gdb.cxref.
<author>cxref

<sect>File dwarf2-frame.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>dwarf2_frame_base_address()  :  dwarf2-frame.c
<item>dwarf2_frame_prev_register()  :  dwarf2-frame.c
<item>dwarf2_frame_this_id()  :  dwarf2-frame.c
<item>dwarf2_signal_frame_this_id()  :  dwarf2-frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_frame_unwind  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;dwarf2expr.h&quot;</tt>
<itemize>
<item><tt>#include &quot;dwarf2loc.h&quot;</tt>
<itemize>
<item><tt>#include &quot;dwarf2read.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/elf/dwarf2.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;frame-base.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;frame-unwind.h&quot;</tt>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;regcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;dwarf2read.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;complaints.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;dwarf2-frame.h&quot;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define cfa_exp_len cfa_reg</tt><newline>
<p>
<tt>#define DW64_CIE_ID 0xffffffffffffffffULL</tt><newline>

<sect1>Type struct dwarf2_cie

<p>
<itemize>
<item><tt>struct dwarf2_cie</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>unsigned long cie_pointer;</tt><newline>
<item><tt>unsigned long code_alignment_factor;</tt><newline>
<item><tt>long data_alignment_factor;</tt><newline>
<item><tt>unsigned long return_address_register;</tt><newline>
<item><tt>gdb_byte* initial_instructions;</tt><newline>
<item><tt>gdb_byte* end;</tt><newline>
<item><tt>char* augmentation;</tt><newline>
<item><tt>gdb_byte encoding;</tt><newline>
<item><tt>unsigned char saw_z_augmentation;</tt><newline>
<item><tt>unsigned char signal_frame;</tt><newline>
<item><tt>unsigned char version;</tt><newline>
<item><tt>struct dwarf2_cie* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dwarf2_fde

<p>
<itemize>
<item><tt>struct dwarf2_fde</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct dwarf2_cie* cie;</tt><newline>
<item><tt>CORE_ADDR initial_location;</tt><newline>
<item><tt>CORE_ADDR address_range;</tt><newline>
<item><tt>gdb_byte* instructions;</tt><newline>
<item><tt>gdb_byte* end;</tt><newline>
<item><tt>unsigned char eh_frame_p;</tt><newline>
<item><tt>struct dwarf2_fde* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dwarf2_frame_state_reg_info

<p>
<itemize>
<item><tt>struct dwarf2_frame_state_reg_info</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct dwarf2_frame_state_reg* reg;</tt><newline>
<item><tt>int num_regs;</tt><newline>
<item><tt>struct dwarf2_frame_state_reg_info* prev;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type enum cfa_ways

<p>
<itemize>
<item><tt>enum cfa_ways</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>CFA_UNSET;</tt><newline>
<item><tt>CFA_REG_OFFSET;</tt><newline>
<item><tt>CFA_EXP;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dwarf2_frame_state

<p>
<itemize>
<item><tt>struct dwarf2_frame_state</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct dwarf2_frame_state_reg_info regs;</tt><newline>
<item><tt>long cfa_offset;</tt><newline>
<item><tt>unsigned long cfa_reg;</tt><newline>
<item><tt>gdb_byte* cfa_exp;</tt><newline>
<item><tt>enum cfa_ways cfa_how;</tt><newline>
<item><tt>CORE_ADDR pc;</tt><newline>
<item><tt>struct dwarf2_frame_state_reg_info initial;</tt><newline>
<item><tt>long data_align;</tt><newline>
<item><tt>unsigned long code_align;</tt><newline>
<item><tt>unsigned long retaddr_column;</tt><newline>
<item><tt>int armcc_cfa_offsets_sf;</tt><newline>
<item><tt>int armcc_cfa_offsets_reversed;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dwarf2_frame_ops

<p>
<itemize>
<item><tt>struct dwarf2_frame_ops</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>void (*init_reg)(struct gdbarch*,int,struct dwarf2_frame_state_reg*,struct frame_info*);</tt><newline>
<item><tt>int (*signal_frame_p)(struct gdbarch*,struct frame_info*);</tt><newline>
<item><tt>int (*adjust_regnum)(struct gdbarch*,int,int);</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dwarf2_frame_cache

<p>
<itemize>
<item><tt>struct dwarf2_frame_cache</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>CORE_ADDR cfa;</tt><newline>
<item><tt>int undefined_retaddr;</tt><newline>
<item><tt>struct dwarf2_frame_state_reg* reg;</tt><newline>
<item><tt>struct dwarf2_frame_state_reg retaddr_reg;</tt><newline>
<item><tt>int eh_frame_p;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct comp_unit

<p>
<itemize>
<item><tt>struct comp_unit</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>bfd* abfd;</tt><newline>
<item><tt>struct objfile* objfile;</tt><newline>
<item><tt>struct dwarf2_cie* cie;</tt><newline>
<item><tt>gdb_byte* dwarf_frame_buffer;</tt><newline>
<item><tt>bfd_size_type dwarf_frame_size;</tt><newline>
<item><tt>asection* dwarf_frame_section;</tt><newline>
<item><tt>bfd_vma dbase;</tt><newline>
<item><tt>bfd_vma tbase;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable dwarf2_frame_objfile_data

<p>
<tt>const struct objfile_data* dwarf2_frame_objfile_data</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>dwarf2-frame.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_dwarf2_frame()  :  dwarf2-frame.c
<item>add_fde()  :  dwarf2-frame.c
<item>dwarf2_frame_find_fde()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>External Variables

<p>
<bf>dwarf_frame_section</bf><newline>
<tt>extern asection* dwarf_frame_section</tt><newline>
<descrip>
<tag>Defined in:</tag>
<itemize>
<item>dwarf_frame_section</itemize>
</descrip>
<p>
<bf>dwarf_eh_frame_section</bf><newline>
<tt>extern asection* dwarf_eh_frame_section</tt><newline>
<descrip>
<tag>Defined in:</tag>
<itemize>
<item>dwarf_eh_frame_section</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>dwarf2_frame_data</bf><newline>
<tt>static struct gdbarch_data* dwarf2_frame_data</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_dwarf2_frame()
<item>dwarf2_frame_init_reg()
<item>dwarf2_frame_set_init_reg()
<item>dwarf2_frame_set_signal_frame_p()
<item>dwarf2_frame_signal_frame_p()
</itemize>
</descrip>
<p>
<bf>dwarf2_frame_unwind</bf><newline>
<tt>static const struct frame_unwind dwarf2_frame_unwind</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf2-frame.c
<item>dwarf2_frame_sniffer()
</itemize>
</descrip>
<p>
<bf>dwarf2_signal_frame_unwind</bf><newline>
<tt>static const struct frame_unwind dwarf2_signal_frame_unwind</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_frame_sniffer()
</itemize>
</descrip>
<p>
<bf>dwarf2_frame_base</bf><newline>
<tt>static const struct frame_base dwarf2_frame_base</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_frame_base_sniffer()
</itemize>
</descrip>

<sect1>Global Function _initialize_dwarf2_frame()

<p><tt>void _initialize_dwarf2_frame ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2-frame.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_data_register_pre_init()  :  gdbarch.c
<item>register_objfile_data()  :  objfiles.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dwarf2_frame_init()  :  dwarf2-frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_frame_data  :  dwarf2-frame.c
<item>dwarf2_frame_objfile_data  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Global Function dwarf2_build_frame_info()

<p><tt>void dwarf2_build_frame_info ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>decode_frame_entry()  :  dwarf2-frame.c
<item>dwarf2_read_section()  :  dwarf2read.c
<item>bfd_get_section_by_name()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symfile_read()  :  coffread.c
<item>elf_symfile_read()  :  elfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf_eh_frame_section  :  dwarf2read.c
<item>dwarf_frame_section  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function dwarf2_frame_adjust_regnum()

<p><tt>int dwarf2_frame_adjust_regnum ( struct gdbarch* gdbarch, int regnum, int eh_frame_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2-frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_adjust_ehframe_regnum()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_frame_entry_1()  :  dwarf2-frame.c
<item>execute_cfa_program()  :  dwarf2-frame.c
<item>execute_stack_op()  :  dwarf2expr.c
</itemize>
</descrip>

<sect1>Global Function dwarf2_frame_base_sniffer()

<p><tt>const struct frame_base* dwarf2_frame_base_sniffer ( struct frame_info* next_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2-frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_frame_find_fde()  :  dwarf2-frame.c
<item>frame_unwind_address_in_block()  :  frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_frame_base  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Global Function dwarf2_frame_set_init_reg()

<p><tt>void dwarf2_frame_set_init_reg ( struct gdbarch* gdbarch, void (*init_reg)(struct gdbarch*,int,struct dwarf2_frame_state_reg*,struct frame_info*) )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2-frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>new_gdbarch_data()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_frame_data  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Global Function dwarf2_frame_set_signal_frame_p()

<p><tt>void dwarf2_frame_set_signal_frame_p ( struct gdbarch* gdbarch, int (*signal_frame_p)(struct gdbarch*,struct frame_info*) )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2-frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>new_gdbarch_data()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_frame_data  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Global Function dwarf2_frame_sniffer()

<p><tt>const struct frame_unwind* dwarf2_frame_sniffer ( struct frame_info* next_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2-frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_frame_find_fde()  :  dwarf2-frame.c
<item>dwarf2_frame_signal_frame_p()  :  dwarf2-frame.c
<item>frame_unwind_address_in_block()  :  frame.c
<item>get_frame_arch()  :  frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_frame_unwind  :  dwarf2-frame.c
<item>dwarf2_signal_frame_unwind  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function add_cie()

<p><tt>static void add_cie ( struct comp_unit* unit, struct dwarf2_cie* cie )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>decode_frame_entry_1()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function add_fde()

<p><tt>static void add_fde ( struct comp_unit* unit, struct dwarf2_fde* fde )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>get_objfile_data()  :  objfiles.c
<item>set_objfile_data()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_frame_entry_1()  :  dwarf2-frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_frame_objfile_data  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function decode_frame_entry()

<p><tt>static gdb_byte* decode_frame_entry ( struct comp_unit* unit, gdb_byte* start, int eh_frame_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2-frame.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>decode_frame_entry_1()  :  dwarf2-frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_frame_entry_1()  :  dwarf2-frame.c
<item>dwarf2_build_frame_info()  :  dwarf2-frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function decode_frame_entry_1()

<p><tt>static gdb_byte* decode_frame_entry_1 ( struct comp_unit* unit, gdb_byte* start, int eh_frame_p )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>add_cie()  :  dwarf2-frame.c
<item>add_fde()  :  dwarf2-frame.c
<item>decode_frame_entry()  :  dwarf2-frame.c
<item>dwarf2_frame_adjust_regnum()  :  dwarf2-frame.c
<item>find_cie()  :  dwarf2-frame.c
<item>internal_error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>read_1_byte()  :  dwarf2-frame.c
<item>read_4_bytes()  :  dwarf2-frame.c
<item>read_8_bytes()  :  dwarf2-frame.c
<item>read_encoded_value()  :  dwarf2-frame.c
<item>read_initial_length()  :  dwarf2-frame.c
<item>read_signed_leb128()  :  dwarf2-frame.c
<item>read_unsigned_leb128()  :  dwarf2-frame.c
<item>_obstack_newchunk(), strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_frame_entry()  :  dwarf2-frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void_data_ptr  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_frame_base_address()

<p><tt>static CORE_ADDR dwarf2_frame_base_address ( struct frame_info* next_frame, void** this_cache )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_frame_cache()

<p><tt>static struct dwarf2_frame_cache* dwarf2_frame_cache ( struct frame_info* next_frame, void** this_cache )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>dwarf2_frame_find_fde()  :  dwarf2-frame.c
<item>dwarf2_frame_find_quirks()  :  dwarf2-frame.c
<item>dwarf2_frame_init_reg()  :  dwarf2-frame.c
<item>dwarf2_frame_state_copy_regs()  :  dwarf2-frame.c
<item>execute_cfa_program()  :  dwarf2-frame.c
<item>execute_stack_op()  :  dwarf2-frame.c
<item>frame_obstack_zalloc()  :  frame.c
<item>frame_unwind_address_in_block()  :  frame.c
<item>gdbarch_dwarf2_reg_to_regnum()  :  gdbarch.c
<item>gdbarch_num_pseudo_regs()  :  gdbarch.c
<item>gdbarch_num_regs()  :  gdbarch.c
<item>get_frame_arch()  :  frame.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>read_reg()  :  dwarf2-frame.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_base_address()  :  dwarf2-frame.c
<item>dwarf2_frame_prev_register()  :  dwarf2-frame.c
<item>dwarf2_frame_this_id()  :  dwarf2-frame.c
<item>dwarf2_signal_frame_this_id()  :  dwarf2-frame.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dwarf2_frame_state_free()  :  dwarf2-frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_frame_default_init_reg()

<p><tt>static void dwarf2_frame_default_init_reg ( struct gdbarch* gdbarch, int regnum, struct dwarf2_frame_state_reg* reg, struct frame_info* next_frame )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_pc_regnum()  :  gdbarch.c
<item>gdbarch_sp_regnum()  :  gdbarch.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_frame_init()  :  dwarf2-frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_frame_find_fde()

<p><tt>static struct dwarf2_fde* dwarf2_frame_find_fde ( CORE_ADDR* pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarf2-frame.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_objfile_data()  :  objfiles.c
<item>internal_error()  :  utils.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>objfile_text_section_offset()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_base_sniffer()  :  dwarf2-frame.c
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
<item>dwarf2_frame_sniffer()  :  dwarf2-frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_frame_objfile_data  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_frame_find_quirks()

<p><tt>static void dwarf2_frame_find_quirks ( struct dwarf2_frame_state* fs, struct dwarf2_fde* fde )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>find_pc_symtab()  :  symtab.c
<item>strchr(), strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_frame_init()

<p><tt>static void* dwarf2_frame_init ( struct obstack* obstack )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_dwarf2_frame()  :  dwarf2-frame.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dwarf2_frame_default_init_reg()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_frame_init_reg()

<p><tt>static void dwarf2_frame_init_reg ( struct gdbarch* gdbarch, int regnum, struct dwarf2_frame_state_reg* reg, struct frame_info* next_frame )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>new_gdbarch_data()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_frame_data  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_frame_prev_register()

<p><tt>static void dwarf2_frame_prev_register ( struct frame_info* next_frame, void** this_cache, int regnum, enum opt_state* optimizedp, enum lval_type* lvalp, CORE_ADDR* addrp, int* realnump, gdb_byte* valuep )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
<item>execute_stack_op()  :  dwarf2-frame.c
<item>frame_unwind_register()  :  frame.c
<item>frame_unwind_register_unsigned()  :  frame.c
<item>gdbarch_dwarf2_reg_to_regnum()  :  gdbarch.c
<item>get_frame_arch()  :  frame.c
<item>internal_error()  :  utils.c
<item>pack_long()  :  value.c
<item>read_memory()  :  corefile.c
<item>register_size()  :  regcache.c
<item>register_type()  :  regcache.c
<item>store_unsigned_integer()  :  findvar.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2-frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_frame_signal_frame_p()

<p><tt>static int dwarf2_frame_signal_frame_p ( struct gdbarch* gdbarch, struct frame_info* next_frame )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>new_gdbarch_data()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_sniffer()  :  dwarf2-frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_frame_data  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_frame_state_alloc_regs()

<p><tt>static void dwarf2_frame_state_alloc_regs ( struct dwarf2_frame_state_reg_info* rs, int num_regs )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>execute_cfa_program()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_frame_state_copy_regs()

<p><tt>static struct dwarf2_frame_state_reg* dwarf2_frame_state_copy_regs ( struct dwarf2_frame_state_reg_info* rs )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
<item>execute_cfa_program()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_frame_state_free()

<p><tt>static void dwarf2_frame_state_free ( void* p )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_frame_state_free_regs()  :  dwarf2-frame.c
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_frame_state_free_regs()

<p><tt>static void dwarf2_frame_state_free_regs ( struct dwarf2_frame_state_reg_info* rs )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_frame_state_free_regs()  :  dwarf2-frame.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_state_free()  :  dwarf2-frame.c
<item>dwarf2_frame_state_free_regs()  :  dwarf2-frame.c
<item>execute_cfa_program()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_frame_this_id()

<p><tt>static void dwarf2_frame_this_id ( struct frame_info* next_frame, void** this_cache, struct frame_id* this_id )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
<item>frame_func_unwind()  :  frame.c
<item>frame_id_build()  :  frame.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function dwarf2_signal_frame_this_id()

<p><tt>static void dwarf2_signal_frame_this_id ( struct frame_info* next_frame, void** this_cache, struct frame_id* this_id )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
<item>frame_func_unwind()  :  frame.c
<item>frame_id_build()  :  frame.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function encoding_for_size()

<p><tt>static gdb_byte encoding_for_size ( unsigned int size )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_encoded_value()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function execute_cfa_program()

<p><tt>static void execute_cfa_program ( gdb_byte* insn_ptr, gdb_byte* insn_end, struct frame_info* next_frame, struct dwarf2_frame_state* fs, int eh_frame_p )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>dwarf2_frame_adjust_regnum()  :  dwarf2-frame.c
<item>dwarf2_frame_state_alloc_regs()  :  dwarf2-frame.c
<item>dwarf2_frame_state_copy_regs()  :  dwarf2-frame.c
<item>dwarf2_frame_state_free_regs()  :  dwarf2-frame.c
<item>dwarf2_read_address()  :  dwarf2expr.c
<item>extract_unsigned_integer()  :  findvar.c
<item>frame_pc_unwind()  :  frame.c
<item>gdbarch_dwarf2_reg_to_regnum()  :  gdbarch.c
<item>gdbarch_register_name()  :  gdbarch.c
<item>get_frame_arch()  :  frame.c
<item>internal_error()  :  utils.c
<item>paddr()  :  utils.c
<item>read_sleb128()  :  dwarf2expr.c
<item>read_uleb128()  :  dwarf2expr.c
<item>register_size()  :  regcache.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function execute_stack_op()

<p><tt>static CORE_ADDR execute_stack_op ( gdb_byte* exp, unsigned long len, struct frame_info* next_frame, CORE_ADDR initial, int eh_frame_p )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>dwarf_expr_eval()  :  dwarf2expr.c
<item>dwarf_expr_fetch()  :  dwarf2expr.c
<item>dwarf_expr_push()  :  dwarf2expr.c
<item>free_dwarf_expr_context()  :  dwarf2expr.c
<item>new_dwarf_expr_context()  :  dwarf2expr.c
<item>read_reg()  :  dwarf2-frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
<item>dwarf2_frame_prev_register()  :  dwarf2-frame.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>no_get_frame_base()  :  dwarf2-frame.c
<item>no_get_tls_address()  :  dwarf2-frame.c
<item>read_mem()  :  dwarf2-frame.c
<item>read_reg()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function find_cie()

<p><tt>static struct dwarf2_cie* find_cie ( struct comp_unit* unit, unsigned long cie_pointer )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>decode_frame_entry_1()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function no_get_frame_base()

<p><tt>static void no_get_frame_base ( void* baton, gdb_byte** start, size_t* length )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>execute_stack_op()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function no_get_tls_address()

<p><tt>static CORE_ADDR no_get_tls_address ( void* baton, CORE_ADDR offset )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>execute_stack_op()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function read_1_byte()

<p><tt>static unsigned int read_1_byte ( bfd* abfd, gdb_byte* buf )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>decode_frame_entry_1()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function read_4_bytes()

<p><tt>static unsigned int read_4_bytes ( bfd* abfd, gdb_byte* buf )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>decode_frame_entry_1()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function read_8_bytes()

<p><tt>static unsigned long read_8_bytes ( bfd* abfd, gdb_byte* buf )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>decode_frame_entry_1()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function read_encoded_value()

<p><tt>static CORE_ADDR read_encoded_value ( struct comp_unit* unit, gdb_byte encoding, gdb_byte* buf, unsigned int* bytes_read_ptr )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>encoding_for_size()  :  dwarf2-frame.c
<item>internal_error()  :  utils.c
<item>read_sleb128()  :  dwarf2expr.c
<item>read_uleb128()  :  dwarf2expr.c
<item>size_of_encoded_value()  :  dwarf2-frame.c
<item>bfd_get_sign_extend_vma()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_frame_entry_1()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function read_initial_length()

<p><tt>static unsigned long read_initial_length ( bfd* abfd, gdb_byte* buf, unsigned int* bytes_read_ptr )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>decode_frame_entry_1()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function read_mem()

<p><tt>static void read_mem ( void* baton, gdb_byte* buf, CORE_ADDR addr, size_t len )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>read_memory()  :  corefile.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>execute_stack_op()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function read_reg()

<p><tt>static CORE_ADDR read_reg ( void* baton, int reg )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>extract_unsigned_integer()  :  findvar.c
<item>frame_unwind_register()  :  frame.c
<item>gdbarch_dwarf2_reg_to_regnum()  :  gdbarch.c
<item>get_frame_arch()  :  frame.c
<item>register_size()  :  regcache.c
<item>__builtin_alloca()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
<item>execute_stack_op()  :  dwarf2-frame.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>execute_stack_op()  :  dwarf2-frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function read_signed_leb128()

<p><tt>static long read_signed_leb128 ( bfd* abfd, gdb_byte* buf, unsigned int* bytes_read_ptr )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>decode_frame_entry_1()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function read_unsigned_leb128()

<p><tt>static unsigned long read_unsigned_leb128 ( bfd* abfd, gdb_byte* buf, unsigned int* bytes_read_ptr )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>decode_frame_entry_1()  :  dwarf2-frame.c
</itemize>
</descrip>

<sect1>Local Function size_of_encoded_value()

<p><tt>static unsigned int size_of_encoded_value ( gdb_byte encoding )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_encoded_value()  :  dwarf2-frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void_data_ptr  :  gdbtypes.c
</itemize>
</descrip>

</article>
