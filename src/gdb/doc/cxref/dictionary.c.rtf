{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF dictionary.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File dictionary.c\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Refs Func:\cell add_symbol_hashed_expandable()\cell dictionary.c\cell\row
\cell add_symbol_linear_expandable()\cell dictionary.c\cell\row
\cell add_symbol_nonexpandable()\cell dictionary.c\cell\row
\cell free_hashed_expandable()\cell dictionary.c\cell\row
\cell free_linear_expandable()\cell dictionary.c\cell\row
\cell free_obstack()\cell dictionary.c\cell\row
\cell iter_name_first_hashed()\cell dictionary.c\cell\row
\cell iter_name_first_linear()\cell dictionary.c\cell\row
\cell iter_name_next_hashed()\cell dictionary.c\cell\row
\cell iter_name_next_linear()\cell dictionary.c\cell\row
\cell iterator_first_hashed()\cell dictionary.c\cell\row
\cell iterator_first_linear()\cell dictionary.c\cell\row
\cell iterator_next_hashed()\cell dictionary.c\cell\row
\cell iterator_next_linear()\cell dictionary.c\cell\row
\cell size_hashed()\cell dictionary.c\cell\row
\cell size_hashed_expandable()\cell dictionary.c\cell\row
\cell size_linear()\cell dictionary.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "buildsym.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dictionary.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DICT_VECTOR( d )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DICT_HASHED_NBUCKETS( d )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DICT_HASHED_BUCKETS( d )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DICT_HASHED_BUCKET( d, i )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DICT_HASHED_EXPANDABLE_NSYMS( d )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DICT_LINEAR_NSYMS( d )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DICT_LINEAR_SYMS( d )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DICT_LINEAR_SYM( d, i )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DICT_LINEAR_EXPANDABLE_CAPACITY( d )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DICT_EXPANDABLE_INITIAL_CAPACITY 10\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DICT_HASHTABLE_SIZE( n )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DICT_ITERATOR_DICT( iter )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DICT_ITERATOR_INDEX( iter )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DICT_ITERATOR_CURRENT( iter )\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type enum dict_type\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum dict_type}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 DICT_HASHED;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 DICT_HASHED_EXPANDABLE;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 DICT_LINEAR;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 DICT_LINEAR_EXPANDABLE;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dict_vector\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dict_vector}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum dict_type type;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 void (*free_f)(struct dictionary* dict);}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 void (*add_symbol)(struct dictionary* dict,struct symbol* sym);}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct symbol* (*iterator_first)(const struct dictionary* dict,struct dict_iterator* iterator);}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct symbol* (*iterator_next)(struct dict_iterator* iterator);}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct symbol* (*iter_name_first)(const struct dictionary* dict,const char* name,struct dict_iterator* iterator);}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct symbol* (*iter_name_next)(const char* name,struct dict_iterator* iterator);}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int (*size)(const struct dictionary* dict);}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dictionary_hashed\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dictionary_hashed}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int nbuckets;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct symbol** buckets;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dictionary_hashed_expandable\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dictionary_hashed_expandable}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int nbuckets;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct symbol** buckets;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int nsyms;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dictionary_linear\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dictionary_linear}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int nsyms;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct symbol** syms;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dictionary_linear_expandable\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dictionary_linear_expandable}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int nsyms;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct symbol** syms;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int capacity;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dictionary\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dictionary}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const struct dict_vector* vector;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 union}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 struct dictionary_hashed hashed;}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 struct dictionary_hashed_expandable hashed_expandable;}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 struct dictionary_linear linear;}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 struct dictionary_linear_expandable linear_expandable;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 data;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dict_hashed_vector\par}
{\s5\f1\fs20\ql\sb50\sa50 static const struct dict_vector dict_hashed_vector\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dict_create_hashed()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dict_hashed_expandable_vector\par}
{\s5\f1\fs20\ql\sb50\sa50 static const struct dict_vector dict_hashed_expandable_vector\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dict_create_hashed_expandable()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dict_linear_vector\par}
{\s5\f1\fs20\ql\sb50\sa50 static const struct dict_vector dict_linear_vector\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dict_create_linear()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dict_linear_expandable_vector\par}
{\s5\f1\fs20\ql\sb50\sa50 static const struct dict_vector dict_linear_expandable_vector\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dict_create_linear_expandable()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dict_add_symbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 void dict_add_symbol ( struct dictionary* dict, struct symbol* sym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.h\cell\cell\row
Called by:\cell add_class_symtab_symbol()\cell jv-lang.c\cell\row
\cell add_symbol()\cell mdebugread.c\cell\row
\cell check_one_possible_namespace_symbol()\cell cp-namespace.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dict_create_hashed()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct dictionary* dict_create_hashed ( struct obstack* obstack, const struct pending* symbol_list )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.h\cell\cell\row
Calls: \cell insert_symbol_hashed()\cell dictionary.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell finish_block()\cell buildsym.c\cell\row
Refs Var:\cell dict_hashed_vector\cell dictionary.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dict_create_hashed_expandable()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct dictionary* dict_create_hashed_expandable ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.h\cell\cell\row
Calls: \cell xcalloc()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell get_java_class_symtab()\cell jv-lang.c\cell\row
\cell initialize_namespace_symtab()\cell cp-namespace.c\cell\row
\cell new_block()\cell mdebugread.c\cell\row
Refs Var:\cell dict_hashed_expandable_vector\cell dictionary.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dict_create_linear()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct dictionary* dict_create_linear ( struct obstack* obstack, const struct pending* symbol_list )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.h\cell\cell\row
Calls: \cell  _obstack_newchunk()\cell\cell\row
Called by:\cell finish_block()\cell buildsym.c\cell\row
\cell get_java_class_symtab()\cell jv-lang.c\cell\row
\cell initialize_namespace_symtab()\cell cp-namespace.c\cell\row
Refs Var:\cell dict_linear_vector\cell dictionary.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dict_create_linear_expandable()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct dictionary* dict_create_linear_expandable ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.h\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell new_block()\cell mdebugread.c\cell\row
Refs Var:\cell dict_linear_expandable_vector\cell dictionary.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dict_empty()\par}
{\s5\f1\fs20\ql\sb50\sa50 int dict_empty ( struct dictionary* dict )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.h\cell\cell\row
Calls: \cell dict_iterator_first()\cell dictionary.c\cell\row
Called by:\cell value_of_local()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dict_free()\par}
{\s5\f1\fs20\ql\sb50\sa50 void dict_free ( struct dictionary* dict )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.h\cell\cell\row
Called by:\cell free_class_block()\cell jv-lang.c\cell\row
\cell free_namespace_block()\cell cp-namespace.c\cell\row
\cell free_symtab_block()\cell symmisc.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dict_iter_name_first()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* dict_iter_name_first ( const struct dictionary* dict, const char* name, struct dict_iterator* iterator )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.h\cell\cell\row
Called by:\cell lookup_block_symbol()\cell symtab.c\cell\row
\cell lookup_block_symbol_all()\cell symtab.c\cell\row
\cell make_symbol_overload_list_qualified()\cell cp-support.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dict_iter_name_next()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* dict_iter_name_next ( const char* name, struct dict_iterator* iterator )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.h\cell\cell\row
Called by:\cell lookup_block_symbol()\cell symtab.c\cell\row
\cell lookup_block_symbol_all()\cell symtab.c\cell\row
\cell make_symbol_overload_list_qualified()\cell cp-support.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dict_iterator_first()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* dict_iterator_first ( const struct dictionary* dict, struct dict_iterator* iterator )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.h\cell\cell\row
Called by:\cell ada_add_block_symbols()\cell ada-lang.c\cell\row
\cell add_local_symbols()\cell tracepoint.c\cell\row
\cell dict_empty()\cell dictionary.c\cell\row
\cell dump_symtab_1()\cell symmisc.c\cell\row
\cell find_pc_sect_symtab()\cell symtab.c\cell\row
\cell finish_block()\cell buildsym.c\cell\row
\cell free_symtab_block()\cell symmisc.c\cell\row
\cell maintenance_cplus_namespace()\cell cp-namespace.c\cell\row
\cell make_file_symbol_completion_list()\cell symtab.c\cell\row
\cell make_symbol_completion_list()\cell symtab.c\cell\row
\cell mylookup_symbol()\cell mdebugread.c\cell\row
\cell objfile_relocate()\cell objfiles.c\cell\row
\cell parse_symbol()\cell mdebugread.c\cell\row
\cell patch_opaque_types()\cell coffread.c\cell\row
\cell print_block_frame_labels()\cell stack.c\cell\row
\cell print_block_frame_locals()\cell stack.c\cell\row
\cell print_frame_arg_vars()\cell stack.c\cell\row
\cell print_frame_args()\cell stack.c\cell\row
\cell scope_info()\cell tracepoint.c\cell\row
\cell search_symbols()\cell symtab.c\cell\row
\cell symtab_for_sym()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dict_iterator_next()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* dict_iterator_next ( struct dict_iterator* iterator )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.h\cell\cell\row
Called by:\cell ada_add_block_symbols()\cell ada-lang.c\cell\row
\cell add_local_symbols()\cell tracepoint.c\cell\row
\cell dump_symtab_1()\cell symmisc.c\cell\row
\cell find_pc_sect_symtab()\cell symtab.c\cell\row
\cell finish_block()\cell buildsym.c\cell\row
\cell free_symtab_block()\cell symmisc.c\cell\row
\cell maintenance_cplus_namespace()\cell cp-namespace.c\cell\row
\cell make_file_symbol_completion_list()\cell symtab.c\cell\row
\cell make_symbol_completion_list()\cell symtab.c\cell\row
\cell mylookup_symbol()\cell mdebugread.c\cell\row
\cell objfile_relocate()\cell objfiles.c\cell\row
\cell parse_symbol()\cell mdebugread.c\cell\row
\cell patch_opaque_types()\cell coffread.c\cell\row
\cell print_block_frame_labels()\cell stack.c\cell\row
\cell print_block_frame_locals()\cell stack.c\cell\row
\cell print_frame_arg_vars()\cell stack.c\cell\row
\cell print_frame_args()\cell stack.c\cell\row
\cell scope_info()\cell tracepoint.c\cell\row
\cell search_symbols()\cell symtab.c\cell\row
\cell symtab_for_sym()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dict_size()\par}
{\s5\f1\fs20\ql\sb50\sa50 int dict_size ( const struct dictionary* dict )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.h\cell\cell\row
Called by:\cell dump_symtab_1()\cell symmisc.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_symbol_hashed_expandable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_symbol_hashed_expandable ( struct dictionary* dict, struct symbol* sym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Calls: \cell expand_hashtable()\cell dictionary.c\cell\row
\cell insert_symbol_hashed()\cell dictionary.c\cell\row
Used in:\cell dictionary.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_symbol_linear_expandable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_symbol_linear_expandable ( struct dictionary* dict, struct symbol* sym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Calls: \cell xrealloc()\cell utils.c\cell\row
Used in:\cell dictionary.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_symbol_nonexpandable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_symbol_nonexpandable ( struct dictionary* dict, struct symbol* sym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Used in:\cell dictionary.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function expand_hashtable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void expand_hashtable ( struct dictionary* dict )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Calls: \cell insert_symbol_hashed()\cell dictionary.c\cell\row
\cell xcalloc()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell add_symbol_hashed_expandable()\cell dictionary.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function free_hashed_expandable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void free_hashed_expandable ( struct dictionary* dict )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
Used in:\cell dictionary.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function free_linear_expandable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void free_linear_expandable ( struct dictionary* dict )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
Used in:\cell dictionary.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function free_obstack()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void free_obstack ( struct dictionary* dict )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Used in:\cell dictionary.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function insert_symbol_hashed()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void insert_symbol_hashed ( struct dictionary* dict, struct symbol* sym )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Calls: \cell msymbol_hash_iw()\cell minsyms.c\cell\row
\cell symbol_search_name()\cell symtab.c\cell\row
Called by:\cell add_symbol_hashed_expandable()\cell dictionary.c\cell\row
\cell dict_create_hashed()\cell dictionary.c\cell\row
\cell expand_hashtable()\cell dictionary.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function iter_name_first_hashed()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* iter_name_first_hashed ( const struct dictionary* dict, const char* name, struct dict_iterator* iterator )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Calls: \cell msymbol_hash_iw()\cell minsyms.c\cell\row
\cell psym_name_match()\cell symtab.c\cell\row
\cell strcmp_iw()\cell utils.c\cell\row
\cell symbol_search_name()\cell symtab.c\cell\row
Used in:\cell dictionary.c\cell\cell\row
Refs Var:\cell psym_equivalences\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function iter_name_first_linear()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* iter_name_first_linear ( const struct dictionary* dict, const char* name, struct dict_iterator* iterator )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Calls: \cell iter_name_next_linear()\cell dictionary.c\cell\row
Used in:\cell dictionary.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function iter_name_next_hashed()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* iter_name_next_hashed ( const char* name, struct dict_iterator* iterator )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Calls: \cell psym_name_match()\cell symtab.c\cell\row
\cell strcmp_iw()\cell utils.c\cell\row
\cell symbol_search_name()\cell symtab.c\cell\row
Used in:\cell dictionary.c\cell\cell\row
Refs Var:\cell psym_equivalences\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function iter_name_next_linear()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* iter_name_next_linear ( const char* name, struct dict_iterator* iterator )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Calls: \cell psym_name_match()\cell symtab.c\cell\row
\cell strcmp_iw()\cell utils.c\cell\row
\cell symbol_search_name()\cell symtab.c\cell\row
Called by:\cell iter_name_first_linear()\cell dictionary.c\cell\row
Used in:\cell dictionary.c\cell\cell\row
Refs Var:\cell psym_equivalences\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function iterator_first_hashed()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* iterator_first_hashed ( const struct dictionary* dict, struct dict_iterator* iterator )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Calls: \cell iterator_hashed_advance()\cell dictionary.c\cell\row
Used in:\cell dictionary.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function iterator_first_linear()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* iterator_first_linear ( const struct dictionary* dict, struct dict_iterator* iterator )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Used in:\cell dictionary.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function iterator_hashed_advance()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* iterator_hashed_advance ( struct dict_iterator* iterator )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Called by:\cell iterator_first_hashed()\cell dictionary.c\cell\row
\cell iterator_next_hashed()\cell dictionary.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function iterator_next_hashed()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* iterator_next_hashed ( struct dict_iterator* iterator )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Calls: \cell iterator_hashed_advance()\cell dictionary.c\cell\row
Used in:\cell dictionary.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function iterator_next_linear()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct symbol* iterator_next_linear ( struct dict_iterator* iterator )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Used in:\cell dictionary.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function size_hashed()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int size_hashed ( const struct dictionary* dict )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Used in:\cell dictionary.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function size_hashed_expandable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int size_hashed_expandable ( const struct dictionary* dict )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Used in:\cell dictionary.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function size_linear()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int size_linear ( const struct dictionary* dict )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dictionary.c\cell\cell\row
Used in:\cell dictionary.c\cell\cell\row
\intbl0
}
