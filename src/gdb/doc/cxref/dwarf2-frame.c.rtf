{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF dwarf2-frame.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File dwarf2-frame.c\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Refs Func:\cell dwarf2_frame_base_address()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_prev_register()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_this_id()\cell dwarf2-frame.c\cell\row
\cell dwarf2_signal_frame_this_id()\cell dwarf2-frame.c\cell\row
Refs Var:\cell dwarf2_frame_unwind\cell dwarf2-frame.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dwarf2expr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dwarf2loc.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "dwarf2read.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/elf/dwarf2.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame-base.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame-unwind.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "regcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dwarf2read.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "complaints.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dwarf2-frame.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define cfa_exp_len cfa_reg\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DW64_CIE_ID 0xffffffffffffffffULL\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dwarf2_cie\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_cie}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned long cie_pointer;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned long code_alignment_factor;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 long data_alignment_factor;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned long return_address_register;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdb_byte* initial_instructions;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdb_byte* end;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* augmentation;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdb_byte encoding;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char saw_z_augmentation;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char signal_frame;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char version;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_cie* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dwarf2_fde\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_fde}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_cie* cie;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR initial_location;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR address_range;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdb_byte* instructions;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdb_byte* end;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned char eh_frame_p;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_fde* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dwarf2_frame_state_reg_info\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_frame_state_reg_info}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_frame_state_reg* reg;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int num_regs;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_frame_state_reg_info* prev;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type enum cfa_ways\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum cfa_ways}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CFA_UNSET;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CFA_REG_OFFSET;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CFA_EXP;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dwarf2_frame_state\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_frame_state}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_frame_state_reg_info regs;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 long cfa_offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned long cfa_reg;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdb_byte* cfa_exp;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum cfa_ways cfa_how;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR pc;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_frame_state_reg_info initial;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 long data_align;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned long code_align;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned long retaddr_column;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int armcc_cfa_offsets_sf;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int armcc_cfa_offsets_reversed;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dwarf2_frame_ops\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_frame_ops}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 void (*init_reg)(struct gdbarch*,int,struct dwarf2_frame_state_reg*,struct frame_info*);}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int (*signal_frame_p)(struct gdbarch*,struct frame_info*);}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int (*adjust_regnum)(struct gdbarch*,int,int);}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dwarf2_frame_cache\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_frame_cache}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR cfa;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int undefined_retaddr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_frame_state_reg* reg;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_frame_state_reg retaddr_reg;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int eh_frame_p;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct comp_unit\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct comp_unit}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bfd* abfd;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct objfile* objfile;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct dwarf2_cie* cie;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdb_byte* dwarf_frame_buffer;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bfd_size_type dwarf_frame_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 asection* dwarf_frame_section;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bfd_vma dbase;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bfd_vma tbase;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable dwarf2_frame_objfile_data\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct objfile_data* dwarf2_frame_objfile_data\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell dwarf2-frame.c\cell\cell\row
Used in:\cell _initialize_dwarf2_frame()\cell dwarf2-frame.c\cell\row
\cell add_fde()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_find_fde()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep External Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf_frame_section\par}
{\s5\f1\fs20\ql\sb50\sa50 extern asection* dwarf_frame_section\par}
\trowd\trgaph120\cellx1440\cellx5220
\intbl\plain
Defined in:\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep External Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf_eh_frame_section\par}
{\s5\f1\fs20\ql\sb50\sa50 extern asection* dwarf_eh_frame_section\par}
\trowd\trgaph120\cellx1440\cellx5220
\intbl\plain
Defined in:\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf2_frame_data\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct gdbarch_data* dwarf2_frame_data\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_dwarf2_frame()\cell\cell\row
\cell dwarf2_frame_init_reg()\cell\cell\row
\cell dwarf2_frame_set_init_reg()\cell\cell\row
\cell dwarf2_frame_set_signal_frame_p()\cell\cell\row
\cell dwarf2_frame_signal_frame_p()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf2_frame_unwind\par}
{\s5\f1\fs20\ql\sb50\sa50 static const struct frame_unwind dwarf2_frame_unwind\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2_frame_sniffer()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf2_signal_frame_unwind\par}
{\s5\f1\fs20\ql\sb50\sa50 static const struct frame_unwind dwarf2_signal_frame_unwind\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf2_frame_sniffer()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dwarf2_frame_base\par}
{\s5\f1\fs20\ql\sb50\sa50 static const struct frame_base dwarf2_frame_base\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell dwarf2_frame_base_sniffer()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_dwarf2_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_dwarf2_frame ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2-frame.c\cell\cell\row
Calls: \cell gdbarch_data_register_pre_init()\cell gdbarch.c\cell\row
\cell register_objfile_data()\cell objfiles.c\cell\row
Refs Func:\cell dwarf2_frame_init()\cell dwarf2-frame.c\cell\row
Refs Var:\cell dwarf2_frame_data\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_objfile_data\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf2_build_frame_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 void dwarf2_build_frame_info ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell decode_frame_entry()\cell dwarf2-frame.c\cell\row
\cell dwarf2_read_section()\cell dwarf2read.c\cell\row
\cell  bfd_get_section_by_name()\cell\cell\row
Called by:\cell coff_symfile_read()\cell coffread.c\cell\row
\cell elf_symfile_read()\cell elfread.c\cell\row
Refs Var:\cell dwarf_eh_frame_section\cell dwarf2read.c\cell\row
\cell dwarf_frame_section\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf2_frame_adjust_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 int dwarf2_frame_adjust_regnum ( struct gdbarch* gdbarch, int regnum, int eh_frame_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2-frame.h\cell\cell\row
Calls: \cell gdbarch_adjust_ehframe_regnum()\cell gdbarch.c\cell\row
Called by:\cell decode_frame_entry_1()\cell dwarf2-frame.c\cell\row
\cell execute_cfa_program()\cell dwarf2-frame.c\cell\row
\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf2_frame_base_sniffer()\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct frame_base* dwarf2_frame_base_sniffer ( struct frame_info* next_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2-frame.h\cell\cell\row
Calls: \cell dwarf2_frame_find_fde()\cell dwarf2-frame.c\cell\row
\cell frame_unwind_address_in_block()\cell frame.c\cell\row
Refs Var:\cell dwarf2_frame_base\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf2_frame_set_init_reg()\par}
{\s5\f1\fs20\ql\sb50\sa50 void dwarf2_frame_set_init_reg ( struct gdbarch* gdbarch, void (*init_reg)(struct gdbarch*,int,struct dwarf2_frame_state_reg*,struct frame_info*) )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2-frame.h\cell\cell\row
Calls: \cell new_gdbarch_data()\cell gdbarch.c\cell\row
Refs Var:\cell dwarf2_frame_data\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf2_frame_set_signal_frame_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 void dwarf2_frame_set_signal_frame_p ( struct gdbarch* gdbarch, int (*signal_frame_p)(struct gdbarch*,struct frame_info*) )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2-frame.h\cell\cell\row
Calls: \cell new_gdbarch_data()\cell gdbarch.c\cell\row
Refs Var:\cell dwarf2_frame_data\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function dwarf2_frame_sniffer()\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct frame_unwind* dwarf2_frame_sniffer ( struct frame_info* next_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2-frame.h\cell\cell\row
Calls: \cell dwarf2_frame_find_fde()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_signal_frame_p()\cell dwarf2-frame.c\cell\row
\cell frame_unwind_address_in_block()\cell frame.c\cell\row
\cell get_frame_arch()\cell frame.c\cell\row
Refs Var:\cell dwarf2_frame_unwind\cell dwarf2-frame.c\cell\row
\cell dwarf2_signal_frame_unwind\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_cie()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_cie ( struct comp_unit* unit, struct dwarf2_cie* cie )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell decode_frame_entry_1()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_fde()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_fde ( struct comp_unit* unit, struct dwarf2_fde* fde )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell get_objfile_data()\cell objfiles.c\cell\row
\cell set_objfile_data()\cell objfiles.c\cell\row
Called by:\cell decode_frame_entry_1()\cell dwarf2-frame.c\cell\row
Refs Var:\cell dwarf2_frame_objfile_data\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_frame_entry()\par}
{\s5\f1\fs20\ql\sb50\sa50 static gdb_byte* decode_frame_entry ( struct comp_unit* unit, gdb_byte* start, int eh_frame_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2-frame.c\cell\cell\row
Calls: \cell complaint()\cell complaints.c\cell\row
\cell decode_frame_entry_1()\cell dwarf2-frame.c\cell\row
Called by:\cell decode_frame_entry_1()\cell dwarf2-frame.c\cell\row
\cell dwarf2_build_frame_info()\cell dwarf2-frame.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decode_frame_entry_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static gdb_byte* decode_frame_entry_1 ( struct comp_unit* unit, gdb_byte* start, int eh_frame_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell add_cie()\cell dwarf2-frame.c\cell\row
\cell add_fde()\cell dwarf2-frame.c\cell\row
\cell decode_frame_entry()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_adjust_regnum()\cell dwarf2-frame.c\cell\row
\cell find_cie()\cell dwarf2-frame.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell read_1_byte()\cell dwarf2-frame.c\cell\row
\cell read_4_bytes()\cell dwarf2-frame.c\cell\row
\cell read_8_bytes()\cell dwarf2-frame.c\cell\row
\cell read_encoded_value()\cell dwarf2-frame.c\cell\row
\cell read_initial_length()\cell dwarf2-frame.c\cell\row
\cell read_signed_leb128()\cell dwarf2-frame.c\cell\row
\cell read_unsigned_leb128()\cell dwarf2-frame.c\cell\row
\cell  _obstack_newchunk(), strlen(), strncmp()\cell\cell\row
Called by:\cell decode_frame_entry()\cell dwarf2-frame.c\cell\row
Refs Var:\cell builtin_type_void_data_ptr\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_frame_base_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR dwarf2_frame_base_address ( struct frame_info* next_frame, void** this_cache )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
Used in:\cell dwarf2-frame.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_frame_cache()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct dwarf2_frame_cache* dwarf2_frame_cache ( struct frame_info* next_frame, void** this_cache )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell dwarf2_frame_find_fde()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_find_quirks()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_init_reg()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_state_copy_regs()\cell dwarf2-frame.c\cell\row
\cell execute_cfa_program()\cell dwarf2-frame.c\cell\row
\cell execute_stack_op()\cell dwarf2-frame.c\cell\row
\cell frame_obstack_zalloc()\cell frame.c\cell\row
\cell frame_unwind_address_in_block()\cell frame.c\cell\row
\cell gdbarch_dwarf2_reg_to_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_num_pseudo_regs()\cell gdbarch.c\cell\row
\cell gdbarch_num_regs()\cell gdbarch.c\cell\row
\cell get_frame_arch()\cell frame.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell read_reg()\cell dwarf2-frame.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell dwarf2_frame_base_address()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_prev_register()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_this_id()\cell dwarf2-frame.c\cell\row
\cell dwarf2_signal_frame_this_id()\cell dwarf2-frame.c\cell\row
Refs Func:\cell dwarf2_frame_state_free()\cell dwarf2-frame.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_frame_default_init_reg()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_frame_default_init_reg ( struct gdbarch* gdbarch, int regnum, struct dwarf2_frame_state_reg* reg, struct frame_info* next_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_pc_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_sp_regnum()\cell gdbarch.c\cell\row
Used in:\cell dwarf2_frame_init()\cell dwarf2-frame.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_frame_find_fde()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct dwarf2_fde* dwarf2_frame_find_fde ( CORE_ADDR* pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell dwarf2-frame.c\cell\cell\row
Calls: \cell get_objfile_data()\cell objfiles.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell objfile_text_section_offset()\cell objfiles.c\cell\row
Called by:\cell dwarf2_frame_base_sniffer()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_sniffer()\cell dwarf2-frame.c\cell\row
Refs Var:\cell dwarf2_frame_objfile_data\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_frame_find_quirks()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_frame_find_quirks ( struct dwarf2_frame_state* fs, struct dwarf2_fde* fde )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell find_pc_symtab()\cell symtab.c\cell\row
\cell  strchr(), strlen(), strncmp()\cell\cell\row
Called by:\cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_frame_init()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void* dwarf2_frame_init ( struct obstack* obstack )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Used in:\cell _initialize_dwarf2_frame()\cell dwarf2-frame.c\cell\row
Refs Func:\cell dwarf2_frame_default_init_reg()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_frame_init_reg()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_frame_init_reg ( struct gdbarch* gdbarch, int regnum, struct dwarf2_frame_state_reg* reg, struct frame_info* next_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell new_gdbarch_data()\cell gdbarch.c\cell\row
Called by:\cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
Refs Var:\cell dwarf2_frame_data\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_frame_prev_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_frame_prev_register ( struct frame_info* next_frame, void** this_cache, int regnum, enum opt_state* optimizedp, enum lval_type* lvalp, CORE_ADDR* addrp, int* realnump, gdb_byte* valuep )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
\cell execute_stack_op()\cell dwarf2-frame.c\cell\row
\cell frame_unwind_register()\cell frame.c\cell\row
\cell frame_unwind_register_unsigned()\cell frame.c\cell\row
\cell gdbarch_dwarf2_reg_to_regnum()\cell gdbarch.c\cell\row
\cell get_frame_arch()\cell frame.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell pack_long()\cell value.c\cell\row
\cell read_memory()\cell corefile.c\cell\row
\cell register_size()\cell regcache.c\cell\row
\cell register_type()\cell regcache.c\cell\row
\cell store_unsigned_integer()\cell findvar.c\cell\row
Used in:\cell dwarf2-frame.c\cell\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_frame_signal_frame_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int dwarf2_frame_signal_frame_p ( struct gdbarch* gdbarch, struct frame_info* next_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell new_gdbarch_data()\cell gdbarch.c\cell\row
Called by:\cell dwarf2_frame_sniffer()\cell dwarf2-frame.c\cell\row
Refs Var:\cell dwarf2_frame_data\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_frame_state_alloc_regs()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_frame_state_alloc_regs ( struct dwarf2_frame_state_reg_info* rs, int num_regs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell execute_cfa_program()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_frame_state_copy_regs()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct dwarf2_frame_state_reg* dwarf2_frame_state_copy_regs ( struct dwarf2_frame_state_reg_info* rs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
\cell execute_cfa_program()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_frame_state_free()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_frame_state_free ( void* p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell dwarf2_frame_state_free_regs()\cell dwarf2-frame.c\cell\row
\cell xfree()\cell utils.c\cell\row
Used in:\cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_frame_state_free_regs()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_frame_state_free_regs ( struct dwarf2_frame_state_reg_info* rs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell dwarf2_frame_state_free_regs()\cell dwarf2-frame.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell dwarf2_frame_state_free()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_state_free_regs()\cell dwarf2-frame.c\cell\row
\cell execute_cfa_program()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_frame_this_id()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_frame_this_id ( struct frame_info* next_frame, void** this_cache, struct frame_id* this_id )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
\cell frame_func_unwind()\cell frame.c\cell\row
\cell frame_id_build()\cell frame.c\cell\row
Used in:\cell dwarf2-frame.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function dwarf2_signal_frame_this_id()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void dwarf2_signal_frame_this_id ( struct frame_info* next_frame, void** this_cache, struct frame_id* this_id )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
\cell frame_func_unwind()\cell frame.c\cell\row
\cell frame_id_build()\cell frame.c\cell\row
Used in:\cell dwarf2-frame.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function encoding_for_size()\par}
{\s5\f1\fs20\ql\sb50\sa50 static gdb_byte encoding_for_size ( unsigned int size )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell read_encoded_value()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function execute_cfa_program()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void execute_cfa_program ( gdb_byte* insn_ptr, gdb_byte* insn_end, struct frame_info* next_frame, struct dwarf2_frame_state* fs, int eh_frame_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell complaint()\cell complaints.c\cell\row
\cell dwarf2_frame_adjust_regnum()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_state_alloc_regs()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_state_copy_regs()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_state_free_regs()\cell dwarf2-frame.c\cell\row
\cell dwarf2_read_address()\cell dwarf2expr.c\cell\row
\cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell frame_pc_unwind()\cell frame.c\cell\row
\cell gdbarch_dwarf2_reg_to_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_register_name()\cell gdbarch.c\cell\row
\cell get_frame_arch()\cell frame.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell paddr()\cell utils.c\cell\row
\cell read_sleb128()\cell dwarf2expr.c\cell\row
\cell read_uleb128()\cell dwarf2expr.c\cell\row
\cell register_size()\cell regcache.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function execute_stack_op()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR execute_stack_op ( gdb_byte* exp, unsigned long len, struct frame_info* next_frame, CORE_ADDR initial, int eh_frame_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell dwarf_expr_eval()\cell dwarf2expr.c\cell\row
\cell dwarf_expr_fetch()\cell dwarf2expr.c\cell\row
\cell dwarf_expr_push()\cell dwarf2expr.c\cell\row
\cell free_dwarf_expr_context()\cell dwarf2expr.c\cell\row
\cell new_dwarf_expr_context()\cell dwarf2expr.c\cell\row
\cell read_reg()\cell dwarf2-frame.c\cell\row
Called by:\cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_prev_register()\cell dwarf2-frame.c\cell\row
Refs Func:\cell no_get_frame_base()\cell dwarf2-frame.c\cell\row
\cell no_get_tls_address()\cell dwarf2-frame.c\cell\row
\cell read_mem()\cell dwarf2-frame.c\cell\row
\cell read_reg()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_cie()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct dwarf2_cie* find_cie ( struct comp_unit* unit, unsigned long cie_pointer )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell decode_frame_entry_1()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function no_get_frame_base()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void no_get_frame_base ( void* baton, gdb_byte** start, size_t* length )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell internal_error()\cell utils.c\cell\row
Used in:\cell execute_stack_op()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function no_get_tls_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR no_get_tls_address ( void* baton, CORE_ADDR offset )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell internal_error()\cell utils.c\cell\row
Used in:\cell execute_stack_op()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_1_byte()\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned int read_1_byte ( bfd* abfd, gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell decode_frame_entry_1()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_4_bytes()\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned int read_4_bytes ( bfd* abfd, gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell decode_frame_entry_1()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_8_bytes()\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned long read_8_bytes ( bfd* abfd, gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell decode_frame_entry_1()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_encoded_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR read_encoded_value ( struct comp_unit* unit, gdb_byte encoding, gdb_byte* buf, unsigned int* bytes_read_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell encoding_for_size()\cell dwarf2-frame.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell read_sleb128()\cell dwarf2expr.c\cell\row
\cell read_uleb128()\cell dwarf2expr.c\cell\row
\cell size_of_encoded_value()\cell dwarf2-frame.c\cell\row
\cell  bfd_get_sign_extend_vma()\cell\cell\row
Called by:\cell decode_frame_entry_1()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_initial_length()\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned long read_initial_length ( bfd* abfd, gdb_byte* buf, unsigned int* bytes_read_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell decode_frame_entry_1()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_mem()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_mem ( void* baton, gdb_byte* buf, CORE_ADDR addr, size_t len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell read_memory()\cell corefile.c\cell\row
Used in:\cell execute_stack_op()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_reg()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR read_reg ( void* baton, int reg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell frame_unwind_register()\cell frame.c\cell\row
\cell gdbarch_dwarf2_reg_to_regnum()\cell gdbarch.c\cell\row
\cell get_frame_arch()\cell frame.c\cell\row
\cell register_size()\cell regcache.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
Called by:\cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
\cell execute_stack_op()\cell dwarf2-frame.c\cell\row
Used in:\cell execute_stack_op()\cell dwarf2-frame.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_signed_leb128()\par}
{\s5\f1\fs20\ql\sb50\sa50 static long read_signed_leb128 ( bfd* abfd, gdb_byte* buf, unsigned int* bytes_read_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell decode_frame_entry_1()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_unsigned_leb128()\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned long read_unsigned_leb128 ( bfd* abfd, gdb_byte* buf, unsigned int* bytes_read_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell decode_frame_entry_1()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function size_of_encoded_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned int size_of_encoded_value ( gdb_byte encoding )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell internal_error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell read_encoded_value()\cell dwarf2-frame.c\cell\row
Refs Var:\cell builtin_type_void_data_ptr\cell gdbtypes.c\cell\row
\intbl0
}
