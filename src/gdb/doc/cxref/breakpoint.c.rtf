{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF breakpoint.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File breakpoint.c\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Refs Func:\cell print_exception_catchpoint()\cell breakpoint.c\cell\row
\cell print_mention_exception_catchpoint()\cell breakpoint.c\cell\row
\cell print_one_exception_catchpoint()\cell breakpoint.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <ctype.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbthread.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/demangle.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "annotate.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "source.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "linespec.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "completer.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "cli/cli-script.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "cli-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "wrapper.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "varobj.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "solib.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "solist.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "observer.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exceptions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <setjmp.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../readline/tilde.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "mi/mi-common.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objc-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <Availability.h>\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define BREAKPOINT_C_NOT_ON_i386 1\par}
{\s5\f1\fs20\ql\sb50\sa50 #define ALL_BREAKPOINTS( B )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define ALL_BREAKPOINTS_SAFE( B, TMP )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define ALL_BP_LOCATIONS( B )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define ALL_BP_LOCATIONS_SAFE( B, TMP )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define WP_DELETED 1\par}
{\s5\f1\fs20\ql\sb50\sa50 #define WP_VALUE_CHANGED 2\par}
{\s5\f1\fs20\ql\sb50\sa50 #define WP_VALUE_NOT_CHANGED 3\par}
{\s5\f1\fs20\ql\sb50\sa50 #define BP_TEMPFLAG 1\par}
{\s5\f1\fs20\ql\sb50\sa50 #define BP_HARDWAREFLAG 2\par}
{\s5\f1\fs20\ql\sb50\sa50 #define BP_FUTUREFLAG 4\par}
{\s5\f1\fs20\ql\sb50\sa50 #define kc BPSTAT_WHAT_KEEP_CHECKING\par}
{\s5\f1\fs20\ql\sb50\sa50 #define ss BPSTAT_WHAT_STOP_SILENT\par}
{\s5\f1\fs20\ql\sb50\sa50 #define sn BPSTAT_WHAT_STOP_NOISY\par}
{\s5\f1\fs20\ql\sb50\sa50 #define sgl BPSTAT_WHAT_SINGLE\par}
{\s5\f1\fs20\ql\sb50\sa50 #define slr BPSTAT_WHAT_SET_LONGJMP_RESUME\par}
{\s5\f1\fs20\ql\sb50\sa50 #define clr BPSTAT_WHAT_CLEAR_LONGJMP_RESUME\par}
{\s5\f1\fs20\ql\sb50\sa50 #define clrs BPSTAT_WHAT_CLEAR_LONGJMP_RESUME_SINGLE\par}
{\s5\f1\fs20\ql\sb50\sa50 #define sr BPSTAT_WHAT_STEP_RESUME\par}
{\s5\f1\fs20\ql\sb50\sa50 #define ts BPSTAT_WHAT_THROUGH_SIGTRAMP\par}
{\s5\f1\fs20\ql\sb50\sa50 #define shl BPSTAT_WHAT_CHECK_SHLIBS\par}
{\s5\f1\fs20\ql\sb50\sa50 #define shlr BPSTAT_WHAT_CHECK_SHLIBS_RESUME_FROM_HOOK\par}
{\s5\f1\fs20\ql\sb50\sa50 #define err BPSTAT_WHAT_STOP_NOISY\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct breakpoint_list\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct breakpoint_list}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct breakpoint_list* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct breakpoint* bp;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Typedef insertion_state_t\par}
{\s5\f1\fs20\ql\sb50\sa50 typedef enum \{...\} insertion_state_t\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 mark_inserted;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 mark_uninserted;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Typedef args_for_catchpoint_enable\par}
{\s5\f1\fs20\ql\sb50\sa50 typedef struct \{...\} args_for_catchpoint_enable\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum exception_event_kind kind;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int enable_p;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type enum bpstat_class\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum bpstat_class}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 no_effect;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 wp_silent;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 wp_noisy;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bp_nostop;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bp_silent;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bp_noisy;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 long_jump;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 long_resume;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 step_resume;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 through_sig;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 shlib_event;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 catch_shlib_event;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 class_last;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct ep_type_description\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct ep_type_description}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum bptype type;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* description;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct captured_breakpoint_query_args\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct captured_breakpoint_query_args}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int bnum;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct captured_parse_breakpoint_args\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct captured_parse_breakpoint_args}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char** arg_p;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct symtabs_and_lines* sals_p;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char*** addr_string_p;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* requested_shlib;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int* not_found_ptr;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct lang_and_radix\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct lang_and_radix}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum language lang;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int radix;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct safe_sals_to_pc_args\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct safe_sals_to_pc_args}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct symtabs_and_lines* sals;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* address;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct captured_breakpoint_args\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct captured_breakpoint_args}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* address;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* condition;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int hardwareflag;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int tempflag;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int thread;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int ignore_count;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Typedef catch_fork_kind\par}
{\s5\f1\fs20\ql\sb50\sa50 typedef enum \{...\} catch_fork_kind\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 catch_fork;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 catch_vfork;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct sal_chain\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct sal_chain}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct sal_chain* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct symtab_and_line sal;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable deprecated_exception_catchpoints_are_fragile\par}
{\s5\f1\fs20\ql\sb50\sa50 int deprecated_exception_catchpoints_are_fragile\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell breakpoint_init_inferior()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable deprecated_exception_support_initialized\par}
{\s5\f1\fs20\ql\sb50\sa50 int deprecated_exception_support_initialized\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell breakpoint_init_inferior()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable symbol_generation\par}
{\s5\f1\fs20\ql\sb50\sa50 int symbol_generation\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell breakpoint.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell value.c\cell\cell\row
Used in:\cell breakpoint_re_set()\cell breakpoint.c\cell\row
\cell breakpoint_update()\cell breakpoint.c\cell\row
\cell lookup_cached_function()\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable breakpoint_generation\par}
{\s5\f1\fs20\ql\sb50\sa50 int breakpoint_generation\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell breakpoint.c\cell\cell\row
Used in:\cell breakpoint_update()\cell breakpoint.c\cell\row
\cell tell_breakpoints_objfile_changed_internal()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable show_breakpoint_hit_counts\par}
{\s5\f1\fs20\ql\sb50\sa50 int show_breakpoint_hit_counts\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell breakpoint.c\cell\cell\row
\cell target/target.c\cell\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\cell generic_mourn_inferior()\cell target/target.c\cell\row
\cell print_one_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable breakpoint_chain\par}
{\s5\f1\fs20\ql\sb50\sa50 struct breakpoint* breakpoint_chain\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell breakpoint.c\cell\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\cell bpstat_should_step()\cell breakpoint.c\cell\row
\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell breakpoint_1()\cell breakpoint.c\cell\row
\cell breakpoint_auto_delete()\cell breakpoint.c\cell\row
\cell breakpoint_clear_ignore_counts()\cell breakpoint.c\cell\row
\cell breakpoint_init_inferior()\cell breakpoint.c\cell\row
\cell breakpoint_re_set_all()\cell breakpoint.c\cell\row
\cell breakpoint_update()\cell breakpoint.c\cell\row
\cell breakpoints_relocate()\cell breakpoint.c\cell\row
\cell clear_breakpoint_hit_counts()\cell breakpoint.c\cell\row
\cell clear_command()\cell breakpoint.c\cell\row
\cell commands_command()\cell breakpoint.c\cell\row
\cell commands_from_control_command()\cell breakpoint.c\cell\row
\cell condition_command()\cell breakpoint.c\cell\row
\cell create_breakpoints()\cell breakpoint.c\cell\row
\cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell delete_command()\cell breakpoint.c\cell\row
\cell describe_other_breakpoints()\cell breakpoint.c\cell\row
\cell disable_breakpoints_in_shlibs()\cell breakpoint.c\cell\row
\cell disable_breakpoints_in_unloaded_shlib()\cell breakpoint.c\cell\row
\cell disable_command()\cell breakpoint.c\cell\row
\cell disable_exception_catch()\cell breakpoint.c\cell\row
\cell disable_longjmp_breakpoint()\cell breakpoint.c\cell\row
\cell disable_overlay_breakpoints()\cell breakpoint.c\cell\row
\cell disable_user_breakpoints_before_operation()\cell breakpoint.c\cell\row
\cell disable_watchpoints_before_interactive_call_start()\cell breakpoint.c\cell\row
\cell do_captured_breakpoint_query()\cell breakpoint.c\cell\row
\cell enable_command()\cell breakpoint.c\cell\row
\cell enable_longjmp_breakpoint()\cell breakpoint.c\cell\row
\cell enable_overlay_breakpoints()\cell breakpoint.c\cell\row
\cell enable_user_breakpoints_after_operation()\cell breakpoint.c\cell\row
\cell enable_watchpoints_after_interactive_call_stop()\cell breakpoint.c\cell\row
\cell find_breakpoint()\cell breakpoint.c\cell\row
\cell find_finish_breakpoint()\cell breakpoint.c\cell\row
\cell gnu_v3_update_exception_catchpoints()\cell breakpoint.c\cell\row
\cell hw_breakpoint_used_count()\cell breakpoint.c\cell\row
\cell hw_watchpoint_used_count()\cell breakpoint.c\cell\row
\cell map_breakpoint_numbers()\cell breakpoint.c\cell\row
\cell re_enable_breakpoints_in_shlibs()\cell breakpoint.c\cell\row
\cell remove_solib_event_breakpoints()\cell breakpoint.c\cell\row
\cell remove_thread_event_breakpoints()\cell breakpoint.c\cell\row
\cell save_breakpoints_command()\cell breakpoint.c\cell\row
\cell set_ignore_count()\cell breakpoint.c\cell\row
\cell set_longjmp_resume_breakpoint()\cell breakpoint.c\cell\row
\cell set_raw_breakpoint()\cell breakpoint.c\cell\row
\cell tell_breakpoints_objfile_changed_internal()\cell breakpoint.c\cell\row
\cell update_breakpoints_after_exec()\cell breakpoint.c\cell\row
\cell update_exception_catchpoints()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable bp_location_chain\par}
{\s5\f1\fs20\ql\sb50\sa50 struct bp_location* bp_location_chain\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell breakpoint.c\cell\cell\row
Used in:\cell allocate_bp_location()\cell breakpoint.c\cell\row
\cell bpstat_have_active_hw_watchpoints()\cell breakpoint.c\cell\row
\cell breakpoint_here_p()\cell breakpoint.c\cell\row
\cell breakpoint_init_inferior()\cell breakpoint.c\cell\row
\cell breakpoint_inserted_here_p()\cell breakpoint.c\cell\row
\cell breakpoint_thread_match()\cell breakpoint.c\cell\row
\cell check_duplicates()\cell breakpoint.c\cell\row
\cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell deprecated_read_memory_nobpt()\cell breakpoint.c\cell\row
\cell detach_breakpoints()\cell breakpoint.c\cell\row
\cell insert_breakpoints()\cell breakpoint.c\cell\row
\cell mark_breakpoints_out()\cell breakpoint.c\cell\row
\cell reattach_breakpoints()\cell breakpoint.c\cell\row
\cell remove_breakpoints()\cell breakpoint.c\cell\row
\cell remove_hw_watchpoints()\cell breakpoint.c\cell\row
\cell software_breakpoint_inserted_here_p()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable breakpoint_count\par}
{\s5\f1\fs20\ql\sb50\sa50 int breakpoint_count\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell breakpoint.c\cell\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\cell break_command_2()\cell breakpoint.c\cell\row
\cell create_breakpoints()\cell breakpoint.c\cell\row
\cell create_exception_catchpoint()\cell breakpoint.c\cell\row
\cell create_exec_event_catchpoint()\cell breakpoint.c\cell\row
\cell create_fork_vfork_event_catchpoint()\cell breakpoint.c\cell\row
\cell get_number_trailer()\cell breakpoint.c\cell\row
\cell set_breakpoint_count()\cell breakpoint.c\cell\row
\cell set_breakpoint_sal()\cell breakpoint.c\cell\row
\cell solib_load_unload_1()\cell breakpoint.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable default_breakpoint_valid\par}
{\s5\f1\fs20\ql\sb50\sa50 int default_breakpoint_valid\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell breakpoint.c\cell\cell\row
Used in:\cell decode_line_spec_1()\cell breakpoint.c\cell\row
\cell parse_breakpoint_sals()\cell breakpoint.c\cell\row
\cell set_default_breakpoint()\cell breakpoint.c\cell\row
\cell until_break_command()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable default_breakpoint_address\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR default_breakpoint_address\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell breakpoint.c\cell\cell\row
Used in:\cell clear_command()\cell breakpoint.c\cell\row
\cell parse_breakpoint_sals()\cell breakpoint.c\cell\row
\cell set_default_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable default_breakpoint_symtab\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symtab* default_breakpoint_symtab\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell breakpoint.c\cell\cell\row
Used in:\cell clear_command()\cell breakpoint.c\cell\row
\cell decode_line_spec_1()\cell breakpoint.c\cell\row
\cell parse_breakpoint_sals()\cell breakpoint.c\cell\row
\cell set_default_breakpoint()\cell breakpoint.c\cell\row
\cell until_break_command()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable default_breakpoint_line\par}
{\s5\f1\fs20\ql\sb50\sa50 int default_breakpoint_line\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell breakpoint.c\cell\cell\row
Used in:\cell clear_command()\cell breakpoint.c\cell\row
\cell decode_line_spec_1()\cell breakpoint.c\cell\row
\cell parse_breakpoint_sals()\cell breakpoint.c\cell\row
\cell set_default_breakpoint()\cell breakpoint.c\cell\row
\cell until_break_command()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep External Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable addressprint\par}
{\s5\f1\fs20\ql\sb50\sa50 extern int addressprint\par}
\trowd\trgaph120\cellx1440\cellx5220
\intbl\plain
Defined in:\cell valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable exception_throw_type_regexp\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* exception_throw_type_regexp\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_breakpoint()\cell\cell\row
\cell current_exception_should_stop()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable exception_catch_type_regexp\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* exception_catch_type_regexp\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_breakpoint()\cell\cell\row
\cell current_exception_should_stop()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable exception_catchpoint_catch_enabled\par}
{\s5\f1\fs20\ql\sb50\sa50 static int exception_catchpoint_catch_enabled\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell catch_command_1()\cell\cell\row
\cell disable_exception_catch()\cell\cell\row
\cell exception_catchpoints_enabled()\cell\cell\row
\cell gnu_v3_update_exception_catchpoints()\cell\cell\row
\cell handle_gnu_v3_exceptions()\cell\cell\row
\cell update_exception_catchpoints()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable exception_catchpoint_throw_enabled\par}
{\s5\f1\fs20\ql\sb50\sa50 static int exception_catchpoint_throw_enabled\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell catch_command_1()\cell\cell\row
\cell disable_exception_catch()\cell\cell\row
\cell exception_catchpoints_enabled()\cell\cell\row
\cell gnu_v3_update_exception_catchpoints()\cell\cell\row
\cell handle_gnu_v3_exceptions()\cell\cell\row
\cell update_exception_catchpoints()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable dont_mention\par}
{\s5\f1\fs20\ql\sb50\sa50 static int dont_mention\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell mention()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable can_use_hw_watchpoints\par}
{\s5\f1\fs20\ql\sb50\sa50 static int can_use_hw_watchpoints\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_breakpoint()\cell\cell\row
\cell can_use_hardware_watchpoint()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable pending_break_support\par}
{\s5\f1\fs20\ql\sb50\sa50 static enum auto_boolean pending_break_support\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_breakpoint()\cell\cell\row
\cell break_command_2()\cell\cell\row
\cell future_break_command()\cell\cell\row
\cell gdb_breakpoint()\cell\cell\row
\cell parse_breakpoint_sals()\cell\cell\row
\cell rbr_break_command()\cell\cell\row
\cell restore_saved_pending_break_support()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable executing_breakpoint_commands\par}
{\s5\f1\fs20\ql\sb50\sa50 static int executing_breakpoint_commands\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell bpstat_do_actions()\cell\cell\row
\cell cleanup_executing_breakpoints()\cell\cell\row
\cell commands_command()\cell\cell\row
\cell commands_from_control_command()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable overlay_events_enabled\par}
{\s5\f1\fs20\ql\sb50\sa50 static int overlay_events_enabled\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell create_overlay_event_breakpoint()\cell\cell\row
\cell disable_overlay_breakpoints()\cell\cell\row
\cell enable_overlay_breakpoints()\cell\cell\row
\cell insert_bp_location()\cell\cell\row
\cell remove_breakpoint()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable current_exception_event\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct exception_event_record* current_exception_event\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell bpstat_stop_status()\cell\cell\row
\cell bpstat_what_to_do()\cell\cell\row
\cell current_exception_should_stop()\cell\cell\row
\cell print_catch_info()\cell\cell\row
\cell print_exception_catchpoint()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable gnu_v3_catch_symbol\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* gnu_v3_catch_symbol\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell create_exception_catchpoint()\cell\cell\row
\cell gnu_v3_update_exception_catchpoints()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable gnu_v3_throw_symbol\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* gnu_v3_throw_symbol\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell create_exception_catchpoint()\cell\cell\row
\cell gnu_v3_update_exception_catchpoints()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable gnu_v3_exception_catchpoint_ops\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct breakpoint_ops gnu_v3_exception_catchpoint_ops\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell create_exception_catchpoint()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_breakpoint ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell observer_attach_solib_unloaded()\cell observer.c\cell\row
\cell  add_abbrev_prefix_cmd(), add_cmd(), add_com(), add_com_alias(), add_info(), add_prefix_cmd(), add_setshow_auto_boolean_cmd(), add_setshow_string_cmd(), add_setshow_zinteger_cmd(), set_cmd_completer()\cell\cell\row
Refs Func:\cell awatch_command()\cell breakpoint.c\cell\row
\cell break_command()\cell breakpoint.c\cell\row
\cell breakpoints_info()\cell breakpoint.c\cell\row
\cell catch_command()\cell breakpoint.c\cell\row
\cell clear_command()\cell breakpoint.c\cell\row
\cell commands_command()\cell breakpoint.c\cell\row
\cell condition_command()\cell breakpoint.c\cell\row
\cell delete_command()\cell breakpoint.c\cell\row
\cell disable_breakpoints_in_unloaded_shlib()\cell breakpoint.c\cell\row
\cell disable_command()\cell breakpoint.c\cell\row
\cell enable_command()\cell breakpoint.c\cell\row
\cell enable_delete_command()\cell breakpoint.c\cell\row
\cell enable_once_command()\cell breakpoint.c\cell\row
\cell filename_completer()\cell completer.c\cell\row
\cell future_break_command()\cell breakpoint.c\cell\row
\cell hbreak_command()\cell breakpoint.c\cell\row
\cell ignore_command()\cell breakpoint.c\cell\row
\cell location_completer()\cell completer.c\cell\row
\cell maintenance_info_breakpoints()\cell breakpoint.c\cell\row
\cell rwatch_command()\cell breakpoint.c\cell\row
\cell save_breakpoints_command()\cell breakpoint.c\cell\row
\cell set_breakpoint_cmd()\cell breakpoint.c\cell\row
\cell show_breakpoint_cmd()\cell breakpoint.c\cell\row
\cell show_can_use_hw_watchpoints()\cell breakpoint.c\cell\row
\cell show_pending_break_support()\cell breakpoint.c\cell\row
\cell stop_command()\cell breakpoint.c\cell\row
\cell stopat_command()\cell breakpoint.c\cell\row
\cell stopin_command()\cell breakpoint.c\cell\row
\cell tbreak_command()\cell breakpoint.c\cell\row
\cell tcatch_command()\cell breakpoint.c\cell\row
\cell thbreak_command()\cell breakpoint.c\cell\row
\cell watch_command()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell breakpoint_count\cell breakpoint.c\cell\row
\cell can_use_hw_watchpoints\cell breakpoint.c\cell\row
\cell dbx_commands\cell main.c\cell\row
\cell exception_catch_type_regexp\cell breakpoint.c\cell\row
\cell exception_throw_type_regexp\cell breakpoint.c\cell\row
\cell pending_break_support\cell breakpoint.c\cell\row
\cell show_breakpoint_hit_counts\cell breakpoint.c\cell\row
\cell xdb_commands\cell main.c\cell\row
\cell  cmdlist, deletelist, disablelist, enablebreaklist, enablelist, maintenanceinfolist, setlist, showlist, stoplist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function awatch_command_wrapper()\par}
{\s5\f1\fs20\ql\sb50\sa50 void awatch_command_wrapper ( const char* arg, int by_location, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell watch_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function bpstat_clear()\par}
{\s5\f1\fs20\ql\sb50\sa50 void bpstat_clear ( bpstat* bsp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell value_free()\cell value.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  free_command_lines()\cell\cell\row
Called by:\cell bpstat_get_triggered_catchpoints()\cell breakpoint.c\cell\row
\cell clear_proceed_status()\cell infrun.c\cell\row
\cell discard_inferior_status()\cell infrun.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell restore_inferior_status()\cell infrun.c\cell\row
Used in:\cell bpstat_do_actions()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function bpstat_clear_actions()\par}
{\s5\f1\fs20\ql\sb50\sa50 void bpstat_clear_actions ( bpstat bs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell value_free()\cell value.c\cell\row
\cell  free_command_lines()\cell\cell\row
Called by:\cell bpstat_do_actions()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function bpstat_copy()\par}
{\s5\f1\fs20\ql\sb50\sa50 bpstat bpstat_copy ( bpstat bs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell release_value()\cell value.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), copy_command_lines()\cell\cell\row
Called by:\cell bpstat_do_actions()\cell breakpoint.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell save_inferior_status()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function bpstat_do_actions()\par}
{\s5\f1\fs20\ql\sb50\sa50 void bpstat_do_actions ( bpstat* bsp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell add_continuation()\cell utils.c\cell\row
\cell bpstat_clear_actions()\cell breakpoint.c\cell\row
\cell bpstat_copy()\cell breakpoint.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_ui_out_notify_begin_end()\cell ui-out.c\cell\row
\cell ui_out_is_mi_like_p()\cell ui-out.c\cell\row
\cell  execute_control_command()\cell\cell\row
Called by:\cell async_breakpoint_command_continuation()\cell breakpoint.c\cell\row
\cell command_handler()\cell event-top.c\cell\row
\cell command_line_handler_continuation()\cell event-top.c\cell\row
\cell command_loop()\cell top.c\cell\row
\cell simplified_command_loop()\cell top.c\cell\row
Refs Func:\cell async_breakpoint_command_continuation()\cell breakpoint.c\cell\row
\cell bpstat_clear()\cell breakpoint.c\cell\row
\cell cleanup_executing_breakpoints()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_proceeded\cell infcmd.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell executing_breakpoint_commands\cell breakpoint.c\cell\row
\cell gdb_override_async\cell target/target.c\cell\row
\cell target_executing\cell top.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function bpstat_find_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 bpstat bpstat_find_breakpoint ( bpstat bsp, struct breakpoint* breakpoint )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Called by:\cell finish_command()\cell infcmd.c\cell\row
\cell finish_command_continuation()\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function bpstat_find_step_resume_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct breakpoint* bpstat_find_step_resume_breakpoint ( bpstat bsp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell pid_to_thread_id()\cell thread.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function bpstat_get_triggered_catchpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 bpstat* bpstat_get_triggered_catchpoints ( bpstat ep_list, bpstat* cp_list )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell bpstat_alloc()\cell breakpoint.c\cell\row
\cell bpstat_clear()\cell breakpoint.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), strlen()\cell\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function bpstat_have_active_hw_watchpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 int bpstat_have_active_hw_watchpoints ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell breakpoint_enabled()\cell breakpoint.c\cell\row
Refs Var:\cell bp_location_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function bpstat_num()\par}
{\s5\f1\fs20\ql\sb50\sa50 int bpstat_num ( bpstat* bsp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Called by:\cell continue_command()\cell infcmd.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell program_info()\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function bpstat_print()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum print_stop_action bpstat_print ( bpstat bs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell print_bp_stop_message()\cell breakpoint.c\cell\row
Called by:\cell normal_stop()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function bpstat_should_step()\par}
{\s5\f1\fs20\ql\sb50\sa50 int bpstat_should_step ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell breakpoint_enabled()\cell breakpoint.c\cell\row
Called by:\cell currently_stepping()\cell infrun.c\cell\row
\cell proceed()\cell infrun.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function bpstat_stop_status()\par}
{\s5\f1\fs20\ql\sb50\sa50 bpstat bpstat_stop_status ( CORE_ADDR bp_addr, ptid_t ptid, int stopped_by_watchpoint )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell at_inlined_call_site_p()\cell inlining.c\cell\row
\cell bpstat_alloc()\cell breakpoint.c\cell\row
\cell breakpoint_enabled()\cell breakpoint.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell current_exception_should_stop()\cell breakpoint.c\cell\row
\cell current_inlined_subroutine_call_site_line()\cell inlining.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell do_hand_call_cleanups()\cell utils.c\cell\row
\cell ep_is_exception_catchpoint()\cell breakpoint.c\cell\row
\cell frame_id_eq()\cell frame.c\cell\row
\cell frame_id_p()\cell frame.c\cell\row
\cell free_all_values()\cell value.c\cell\row
\cell gdb_parse_exp_1()\cell wrapper.c\cell\row
\cell gdbarch_addr_bits_remove()\cell gdbarch.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell get_frame_type()\cell frame.c\cell\row
\cell get_selected_block()\cell stack.c\cell\row
\cell inferior_has_execd()\cell infrun.c\cell\row
\cell inferior_has_forked()\cell infrun.c\cell\row
\cell inferior_has_vforked()\cell infrun.c\cell\row
\cell inlined_subroutine_adjust_position_for_breakpoint()\cell inlining.c\cell\row
\cell insert_breakpoints()\cell breakpoint.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell pid_to_thread_id()\cell thread.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell ptid_get_pid()\cell infrun.c\cell\row
\cell remove_breakpoints()\cell breakpoint.c\cell\row
\cell section_is_mapped()\cell symfile.c\cell\row
\cell section_is_overlay()\cell symfile.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell value_next()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xstrprintf()\cell utils.c\cell\row
\cell  annotate_ignore_count_change(), atoi(), catch_errors(), copy_command_lines(), isdigit(), strcmp(), strrchr()\cell\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
Refs Func:\cell breakpoint_cond_eval()\cell breakpoint.c\cell\row
\cell watchpoint_check()\cell breakpoint.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell current_exception_event\cell breakpoint.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell global_inlined_call_stack\cell inlining.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\cell step_frame_id\cell infcmd.c\cell\row
\cell step_range_start\cell infcmd.c\cell\row
\cell xdb_commands\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function bpstat_what_to_do()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct bpstat_what bpstat_what_to_do ( bpstat bs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
Refs Var:\cell current_exception_event\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function break_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 void break_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell break_command_1()\cell breakpoint.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function breakpoint_add_commands()\par}
{\s5\f1\fs20\ql\sb50\sa50 void breakpoint_add_commands ( struct breakpoint* b, struct command_line* commands )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell  breakpoint_modify_event(), breakpoints_changed(), free_command_lines()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function breakpoint_auto_delete()\par}
{\s5\f1\fs20\ql\sb50\sa50 void breakpoint_auto_delete ( bpstat bs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell delete_breakpoint()\cell breakpoint.c\cell\row
Called by:\cell breakpoint_auto_delete_contents()\cell infcall.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function breakpoint_clear_ignore_counts()\par}
{\s5\f1\fs20\ql\sb50\sa50 void breakpoint_clear_ignore_counts ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Called by:\cell generic_mourn_inferior()\cell target/target.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function breakpoint_here_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum breakpoint_here breakpoint_here_p ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell breakpoint_enabled()\cell breakpoint.c\cell\row
\cell section_is_mapped()\cell symfile.c\cell\row
\cell section_is_overlay()\cell symfile.c\cell\row
Called by:\cell default_memory_remove_breakpoint()\cell mem-break.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell prepare_to_proceed()\cell infrun.c\cell\row
\cell proceed()\cell infrun.c\cell\row
\cell resume()\cell infrun.c\cell\row
Refs Var:\cell bp_location_chain\cell breakpoint.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function breakpoint_init_inferior()\par}
{\s5\f1\fs20\ql\sb50\sa50 void breakpoint_init_inferior ( enum inf_context context )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell ep_is_exception_catchpoint()\cell breakpoint.c\cell\row
\cell value_free()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
Called by:\cell generic_mourn_inferior()\cell target/target.c\cell\row
\cell init_wait_for_inferior()\cell infrun.c\cell\row
Refs Var:\cell bp_location_chain\cell breakpoint.c\cell\row
\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell deprecated_exception_catchpoints_are_fragile\cell breakpoint.c\cell\row
\cell deprecated_exception_support_initialized\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function breakpoint_inserted_here_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int breakpoint_inserted_here_p ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell section_is_mapped()\cell symfile.c\cell\row
\cell section_is_overlay()\cell symfile.c\cell\row
Refs Var:\cell bp_location_chain\cell breakpoint.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function breakpoint_print_commands()\par}
{\s5\f1\fs20\ql\sb50\sa50 void breakpoint_print_commands ( struct ui_out* uiout, struct breakpoint* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell make_cleanup_ui_out_list_begin_end()\cell ui-out.c\cell\row
\cell  print_command_lines()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function breakpoint_re_set()\par}
{\s5\f1\fs20\ql\sb50\sa50 void breakpoint_re_set ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell objfile_add_to_restrict_list()\cell objfiles.c\cell\row
Called by:\cell follow_inferior_reset_breakpoints()\cell infrun.c\cell\row
\cell new_symfile_objfile()\cell symfile.c\cell\row
\cell objfile_relocate()\cell objfiles.c\cell\row
\cell reread_symbols_for_objfile()\cell symfile.c\cell\row
Refs Var:\cell symbol_generation\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function breakpoint_re_set_thread()\par}
{\s5\f1\fs20\ql\sb50\sa50 void breakpoint_re_set_thread ( struct breakpoint* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell in_thread_list()\cell thread.c\cell\row
\cell pid_to_thread_id()\cell thread.c\cell\row
Called by:\cell follow_inferior_reset_breakpoints()\cell infrun.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function breakpoint_thread_match()\par}
{\s5\f1\fs20\ql\sb50\sa50 int breakpoint_thread_match ( CORE_ADDR pc, ptid_t ptid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell breakpoint_enabled()\cell breakpoint.c\cell\row
\cell pid_to_thread_id()\cell thread.c\cell\row
\cell section_is_mapped()\cell symfile.c\cell\row
\cell section_is_overlay()\cell symfile.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
Refs Var:\cell bp_location_chain\cell breakpoint.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function breakpoint_update()\par}
{\s5\f1\fs20\ql\sb50\sa50 void breakpoint_update ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell breakpoint_re_set_all()\cell breakpoint.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell exception_catchpoints_enabled()\cell breakpoint.c\cell\row
\cell gnu_v3_update_exception_catchpoints()\cell breakpoint.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_restrict_to_objfile()\cell objfiles.c\cell\row
\cell objfile_restrict_search()\cell objfiles.c\cell\row
\cell user_settable_breakpoint()\cell breakpoint.c\cell\row
\cell xstrprintf()\cell utils.c\cell\row
\cell  catch_errors()\cell\cell\row
Called by:\cell add_kext_command()\cell symfile.c\cell\row
\cell insert_breakpoints()\cell breakpoint.c\cell\row
Refs Func:\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell restrict_search_cleanup()\cell breakpoint.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell breakpoint_generation\cell breakpoint.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell symbol_generation\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function breakpoints_relocate()\par}
{\s5\f1\fs20\ql\sb50\sa50 void breakpoints_relocate ( struct objfile* objfile, struct section_offsets* delta )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell executable_objfile()\cell objfiles.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell objfile_relocate()\cell objfiles.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function clear_breakpoint_hit_counts()\par}
{\s5\f1\fs20\ql\sb50\sa50 void clear_breakpoint_hit_counts ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Called by:\cell run_command_1()\cell infcmd.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function commands_from_control_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum command_control_type commands_from_control_command ( char* arg, struct command_line* cmd )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell get_number()\cell breakpoint.c\cell\row
\cell  breakpoint_modify_event(), breakpoints_changed(), copy_command_lines(), free_command_lines()\cell\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell executing_breakpoint_commands\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function create_exception_catchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct breakpoint* create_exception_catchpoint ( int tempflag, const char* cond_string, int gnu_v3_p, enum exception_event_kind ex_event, struct symtab_and_line* sal )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell mention()\cell breakpoint.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell set_breakpoint_count()\cell breakpoint.c\cell\row
\cell set_raw_breakpoint()\cell breakpoint.c\cell\row
\cell  strlen(), xstrdup()\cell\cell\row
Called by:\cell gnu_v3_update_exception_catchpoints()\cell breakpoint.c\cell\row
\cell update_exception_catchpoints()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_count\cell breakpoint.c\cell\row
\cell gnu_v3_catch_symbol\cell breakpoint.c\cell\row
\cell gnu_v3_exception_catchpoint_ops\cell breakpoint.c\cell\row
\cell gnu_v3_throw_symbol\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function create_exec_event_catchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void create_exec_event_catchpoint ( int tempflag, const char* cond_string )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell init_sal()\cell symtab.c\cell\row
\cell mention()\cell breakpoint.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell set_breakpoint_count()\cell breakpoint.c\cell\row
\cell set_raw_breakpoint()\cell breakpoint.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell catch_exec_command_1()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_count\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function create_fork_event_catchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void create_fork_event_catchpoint ( int tempflag, const char* cond_string )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell create_fork_vfork_event_catchpoint()\cell breakpoint.c\cell\row
Called by:\cell catch_fork_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function create_objc_hook_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct breakpoint* create_objc_hook_breakpoint ( const char* hookname )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell create_internal_breakpoint()\cell breakpoint.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell  xstrdup()\cell\cell\row
Called by:\cell init_debugger_mode_fail_notification()\cell objc-lang.c\cell\row
\cell make_cleanup_init_objc_exception_catcher()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function create_solib_event_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct breakpoint* create_solib_event_breakpoint ( CORE_ADDR address )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell create_internal_breakpoint()\cell breakpoint.c\cell\row
Called by:\cell objc_init_trampoline_observer()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function create_solib_load_event_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void create_solib_load_event_breakpoint ( char* hookname, int tempflag, char* dll_pathname, char* cond_string )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell solib_load_unload_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function create_solib_unload_event_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void create_solib_unload_event_breakpoint ( char* hookname, int tempflag, char* dll_pathname, char* cond_string )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell solib_load_unload_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function create_thread_event_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct breakpoint* create_thread_event_breakpoint ( CORE_ADDR address )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell create_internal_breakpoint()\cell breakpoint.c\cell\row
\cell paddr()\cell utils.c\cell\row
\cell xstrprintf()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function create_vfork_event_catchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void create_vfork_event_catchpoint ( int tempflag, const char* cond_string )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell create_fork_vfork_event_catchpoint()\cell breakpoint.c\cell\row
Called by:\cell catch_fork_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function decode_line_spec_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symtabs_and_lines decode_line_spec_1 ( const char* string, int funfirstline )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell decode_line_1()\cell linespec.c\cell\row
\cell error()\cell utils.c\cell\row
Called by:\cell jump_command()\cell infcmd.c\cell\row
\cell line_info()\cell source.c\cell\row
Refs Var:\cell default_breakpoint_line\cell breakpoint.c\cell\row
\cell default_breakpoint_symtab\cell breakpoint.c\cell\row
\cell default_breakpoint_valid\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function delete_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void delete_breakpoint ( struct breakpoint* bpt )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell check_duplicates()\cell breakpoint.c\cell\row
\cell deprecated_print_address_numeric()\cell printcmd.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell ep_is_exception_catchpoint()\cell breakpoint.c\cell\row
\cell error_stream()\cell utils.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell free_valchain()\cell breakpoint.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_ui_file_delete()\cell utils.c\cell\row
\cell mem_fileopen()\cell ui-file.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\cell safe_strerror()\cell utils.c\cell\row
\cell value_free()\cell value.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xstrprintf()\cell utils.c\cell\row
\cell  breakpoint_delete_event(), catch_errors(), deprecated_delete_breakpoint_hook(), free_command_lines()\cell\cell\row
Called by:\cell breakpoint_auto_delete()\cell breakpoint.c\cell\row
\cell breakpoint_init_inferior()\cell breakpoint.c\cell\row
\cell breakpoint_re_set_all()\cell breakpoint.c\cell\row
\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell clear_command()\cell breakpoint.c\cell\row
\cell delete_command()\cell breakpoint.c\cell\row
\cell delete_step_resume_breakpoint()\cell thread.c\cell\row
\cell disable_exception_catch()\cell breakpoint.c\cell\row
\cell do_cleanup_objc_exception_breakpoint()\cell objc-lang.c\cell\row
\cell do_delete_breakpoint_cleanup()\cell breakpoint.c\cell\row
\cell free_thread()\cell thread.c\cell\row
\cell objc_clear_trampoline_data()\cell objc-lang.c\cell\row
\cell remove_solib_event_breakpoints()\cell breakpoint.c\cell\row
\cell remove_thread_event_breakpoints()\cell breakpoint.c\cell\row
\cell resolve_pending_breakpoint()\cell breakpoint.c\cell\row
\cell update_breakpoints_after_exec()\cell breakpoint.c\cell\row
\cell update_exception_catchpoints()\cell breakpoint.c\cell\row
Used in:\cell delete_command()\cell breakpoint.c\cell\row
Refs Func:\cell cover_target_enable_exception_callback()\cell breakpoint.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell bp_location_chain\cell breakpoint.c\cell\row
\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell deprecated_delete_breakpoint_hook\cell top.c\cell\row
\cell stop_bpstat\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function delete_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 void delete_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell dont_repeat()\cell top.c\cell\row
\cell map_breakpoint_numbers()\cell breakpoint.c\cell\row
\cell query()\cell utils.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
Refs Func:\cell delete_breakpoint()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_read_memory_nobpt()\par}
{\s5\f1\fs20\ql\sb50\sa50 int deprecated_read_memory_nobpt ( CORE_ADDR memaddr, gdb_byte* myaddr, unsigned int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbcore.h\cell\cell\row
Calls: \cell deprecated_read_memory_nobpt()\cell breakpoint.c\cell\row
\cell gdbarch_breakpoint_from_pc()\cell gdbarch.c\cell\row
\cell target_read_memory()\cell target/target.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell deprecated_read_memory_nobpt()\cell breakpoint.c\cell\row
\cell safe_frame_unwind_memory()\cell frame.c\cell\row
Refs Var:\cell bp_location_chain\cell breakpoint.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function detach_breakpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 int detach_breakpoints ( int pid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell pid_to_ptid()\cell infrun.c\cell\row
\cell ptid_get_pid()\cell infrun.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\cell save_inferior_ptid()\cell infrun.c\cell\row
Refs Var:\cell bp_location_chain\cell breakpoint.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function detect_location_arg()\par}
{\s5\f1\fs20\ql\sb50\sa50 int detect_location_arg ( const char** arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell  strlen(), strstr()\cell\cell\row
Called by:\cell awatch_command()\cell breakpoint.c\cell\row
\cell rwatch_command()\cell breakpoint.c\cell\row
\cell watch_command()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function disable_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void disable_breakpoint ( struct breakpoint* bpt )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell check_duplicates()\cell breakpoint.c\cell\row
\cell  breakpoint_modify_event(), deprecated_modify_breakpoint_hook()\cell\cell\row
Called by:\cell disable_command()\cell breakpoint.c\cell\row
Used in:\cell disable_command()\cell breakpoint.c\cell\row
Refs Var:\cell deprecated_modify_breakpoint_hook\cell top.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function disable_breakpoints_in_shlibs()\par}
{\s5\f1\fs20\ql\sb50\sa50 void disable_breakpoints_in_shlibs ( int silent )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell breakpoint_enabled()\cell breakpoint.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell warning()\cell utils.c\cell\row
Called by:\cell clear_solib()\cell solib.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function disable_breakpoints_in_unloaded_shlib()\par}
{\s5\f1\fs20\ql\sb50\sa50 void disable_breakpoints_in_unloaded_shlib ( struct so_list* solib )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell breakpoint_enabled()\cell breakpoint.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  macosx_pc_solib(), strcmp()\cell\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function disable_exception_catch()\par}
{\s5\f1\fs20\ql\sb50\sa50 void disable_exception_catch ( enum exception_event_kind ex_event )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell handle_gnu_v3_exceptions()\cell breakpoint.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell exception_catchpoint_catch_enabled\cell breakpoint.c\cell\row
\cell exception_catchpoint_throw_enabled\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function disable_longjmp_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void disable_longjmp_breakpoint ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell check_duplicates()\cell breakpoint.c\cell\row
Called by:\cell disable_longjmp_breakpoint_cleanup()\cell infcmd.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function disable_overlay_breakpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 void disable_overlay_breakpoints ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell check_duplicates()\cell breakpoint.c\cell\row
Called by:\cell overlay_manual_command()\cell symfile.c\cell\row
\cell overlay_off_command()\cell symfile.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell overlay_events_enabled\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function disable_watchpoints_before_interactive_call_start()\par}
{\s5\f1\fs20\ql\sb50\sa50 void disable_watchpoints_before_interactive_call_start ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell breakpoint_enabled()\cell breakpoint.c\cell\row
\cell check_duplicates()\cell breakpoint.c\cell\row
\cell ep_is_exception_catchpoint()\cell breakpoint.c\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function enable_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void enable_breakpoint ( struct breakpoint* bpt )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell do_enable_breakpoint()\cell breakpoint.c\cell\row
\cell ui_out_field_int()\cell ui-out.c\cell\row
\cell ui_out_is_mi_like_p()\cell ui-out.c\cell\row
Called by:\cell enable_command()\cell breakpoint.c\cell\row
\cell make_cleanup_init_objc_exception_catcher()\cell objc-lang.c\cell\row
Used in:\cell enable_command()\cell breakpoint.c\cell\row
Refs Var:\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function enable_longjmp_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void enable_longjmp_breakpoint ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell check_duplicates()\cell breakpoint.c\cell\row
Called by:\cell step_1_inlining()\cell infcmd.c\cell\row
\cell step_1_no_inlining()\cell infcmd.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function enable_overlay_breakpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 void enable_overlay_breakpoints ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell check_duplicates()\cell breakpoint.c\cell\row
Called by:\cell overlay_auto_command()\cell symfile.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell overlay_events_enabled\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function enable_user_breakpoints_after_operation()\par}
{\s5\f1\fs20\ql\sb50\sa50 void enable_user_breakpoints_after_operation ( void* unused )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell check_duplicates()\cell breakpoint.c\cell\row
Used in:\cell make_cleanup_enable_disable_bpts_during_operation()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function enable_watchpoints_after_interactive_call_stop()\par}
{\s5\f1\fs20\ql\sb50\sa50 void enable_watchpoints_after_interactive_call_stop ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell check_duplicates()\cell breakpoint.c\cell\row
\cell ep_is_exception_catchpoint()\cell breakpoint.c\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ep_is_catchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ep_is_catchpoint ( struct breakpoint* ep )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Called by:\cell print_one_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ep_is_exception_catchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ep_is_exception_catchpoint ( struct breakpoint* ep )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Called by:\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell breakpoint_init_inferior()\cell breakpoint.c\cell\row
\cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell disable_watchpoints_before_interactive_call_start()\cell breakpoint.c\cell\row
\cell enable_watchpoints_after_interactive_call_stop()\cell breakpoint.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ep_is_shlib_catchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ep_is_shlib_catchpoint ( struct breakpoint* ep )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function exception_catchpoints_enabled()\par}
{\s5\f1\fs20\ql\sb50\sa50 int exception_catchpoints_enabled ( enum exception_event_kind ex_event )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell breakpoint_update()\cell breakpoint.c\cell\row
Refs Var:\cell exception_catchpoint_catch_enabled\cell breakpoint.c\cell\row
\cell exception_catchpoint_throw_enabled\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct breakpoint* find_breakpoint ( int bpnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_finish_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct breakpoint* find_finish_breakpoint ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function fsf_gdb_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum gdb_rc fsf_gdb_breakpoint ( char* address, char* condition, int hardwareflag, int tempflag, int thread, int ignore_count, char** error_message )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdb.h\cell\cell\row
Calls: \cell  catch_exceptions_with_msg()\cell\cell\row
Refs Func:\cell do_captured_breakpoint()\cell breakpoint.c\cell\row
Refs Var:\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function future_break_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 void future_break_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell break_command_1()\cell breakpoint.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
Refs Func:\cell restore_saved_pending_break_support()\cell breakpoint.c\cell\row
Refs Var:\cell pending_break_support\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdb_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum gdb_rc gdb_breakpoint ( char* address, char* condition, int hardwareflag, int tempflag, int futureflag, int thread, int ignore_count, int* indices, char* requested_shlib, char** error_message )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdb.h\cell\cell\row
Calls: \cell break_command_2()\cell breakpoint.c\cell\row
\cell clear_new_breakpoint_list()\cell breakpoint.c\cell\row
\cell condition_command_1()\cell breakpoint.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
Refs Func:\cell restore_saved_pending_break_support()\cell breakpoint.c\cell\row
Refs Var:\cell pending_break_support\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gdb_breakpoint_query()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum gdb_rc gdb_breakpoint_query ( struct ui_out* uiout, int bnum, char** error_message )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdb.h\cell\cell\row
Calls: \cell  catch_exceptions_with_msg()\cell\cell\row
Refs Func:\cell do_captured_breakpoint_query()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_number()\par}
{\s5\f1\fs20\ql\sb50\sa50 int get_number ( const char** pp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell get_number_trailer()\cell breakpoint.c\cell\row
Called by:\cell commands_command()\cell breakpoint.c\cell\row
\cell commands_from_control_command()\cell breakpoint.c\cell\row
\cell condition_command()\cell breakpoint.c\cell\row
\cell get_number_or_range()\cell breakpoint.c\cell\row
\cell get_tracepoint_by_number()\cell tracepoint.c\cell\row
\cell ignore_command()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_number_or_range()\par}
{\s5\f1\fs20\ql\sb50\sa50 int get_number_or_range ( const char** pp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell get_number()\cell breakpoint.c\cell\row
\cell get_number_trailer()\cell breakpoint.c\cell\row
\cell  isspace()\cell\cell\row
Called by:\cell get_tracepoint_by_number()\cell tracepoint.c\cell\row
\cell map_breakpoint_numbers()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function gnu_v3_update_exception_catchpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 void gnu_v3_update_exception_catchpoints ( enum exception_event_kind ex_event, int tempflag, const char* cond_string )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell create_exception_catchpoint()\cell breakpoint.c\cell\row
\cell gdbarch_skip_prologue()\cell gdbarch.c\cell\row
\cell init_sal()\cell symtab.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell msymbol_hash()\cell minsyms.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell strcmp_iw()\cell utils.c\cell\row
\cell  xstrdup()\cell\cell\row
Called by:\cell breakpoint_update()\cell breakpoint.c\cell\row
\cell catch_exception_command_1()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell exception_catchpoint_catch_enabled\cell breakpoint.c\cell\row
\cell exception_catchpoint_throw_enabled\cell breakpoint.c\cell\row
\cell gnu_v3_catch_symbol\cell breakpoint.c\cell\row
\cell gnu_v3_throw_symbol\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function handle_gnu_v3_exceptions()\par}
{\s5\f1\fs20\ql\sb50\sa50 int handle_gnu_v3_exceptions ( enum exception_event_kind ex_event )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Called by:\cell catch_exception_command_1()\cell breakpoint.c\cell\row
\cell disable_exception_catch()\cell breakpoint.c\cell\row
Refs Var:\cell exception_catchpoint_catch_enabled\cell breakpoint.c\cell\row
\cell exception_catchpoint_throw_enabled\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function insert_breakpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 int insert_breakpoints ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell breakpoint_enabled()\cell breakpoint.c\cell\row
\cell breakpoint_update()\cell breakpoint.c\cell\row
\cell evaluate_expression()\cell eval.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell gdb_value_fetch_lazy()\cell wrapper.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell make_cleanup_ui_file_delete()\cell utils.c\cell\row
\cell mem_fileopen()\cell ui-file.c\cell\row
\cell release_value()\cell value.c\cell\row
\cell ui_file_put()\cell ui-file.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
Called by:\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell extended_remote_async_create_inferior()\cell remote.c\cell\row
\cell extended_remote_create_inferior()\cell remote.c\cell\row
\cell follow_exec()\cell infrun.c\cell\row
\cell follow_inferior_reset_breakpoints()\cell infrun.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell insert_step_resume_breakpoint_at_sal()\cell infrun.c\cell\row
\cell keep_going()\cell infrun.c\cell\row
\cell proceed()\cell infrun.c\cell\row
Refs Func:\cell ui_file_write()\cell ui-file.c\cell\row
Refs Var:\cell bp_location_chain\cell breakpoint.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell gdb_stderr\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function make_breakpoint_permanent()\par}
{\s5\f1\fs20\ql\sb50\sa50 void make_breakpoint_permanent ( struct breakpoint* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function make_cleanup_delete_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct cleanup* make_cleanup_delete_breakpoint ( struct breakpoint* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell make_cleanup()\cell utils.c\cell\row
Called by:\cell finish_command()\cell infcmd.c\cell\row
\cell until_break_command()\cell breakpoint.c\cell\row
Refs Func:\cell do_delete_breakpoint_cleanup()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function make_cleanup_enable_disable_bpts_during_operation()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct cleanup* make_cleanup_enable_disable_bpts_during_operation ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell disable_user_breakpoints_before_operation()\cell breakpoint.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
Called by:\cell do_end_debugger_mode()\cell objc-lang.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
Refs Func:\cell enable_user_breakpoints_after_operation()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function make_exec_cleanup_delete_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct cleanup* make_exec_cleanup_delete_breakpoint ( struct breakpoint* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell make_exec_cleanup()\cell utils.c\cell\row
Called by:\cell finish_command()\cell infcmd.c\cell\row
\cell until_break_command()\cell breakpoint.c\cell\row
Refs Func:\cell do_delete_breakpoint_cleanup()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function mark_breakpoints_out()\par}
{\s5\f1\fs20\ql\sb50\sa50 void mark_breakpoints_out ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Called by:\cell update_breakpoints_after_exec()\cell breakpoint.c\cell\row
Refs Var:\cell bp_location_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function rbr_break_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 void rbr_break_command ( const char* arg, int from_tty, int use_msymbol_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell break_command_1()\cell breakpoint.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
Called by:\cell rbreak_command()\cell symtab.c\cell\row
Refs Func:\cell restore_saved_pending_break_support()\cell breakpoint.c\cell\row
Refs Var:\cell pending_break_support\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function re_enable_breakpoints_in_shlibs()\par}
{\s5\f1\fs20\ql\sb50\sa50 void re_enable_breakpoints_in_shlibs ( int silent )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell target_read_memory()\cell target/target.c\cell\row
\cell xstrprintf()\cell utils.c\cell\row
\cell  catch_errors()\cell\cell\row
Called by:\cell add_symbol_file_command()\cell symfile.c\cell\row
\cell attach_command()\cell infcmd.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell remote_open_1()\cell remote.c\cell\row
Refs Func:\cell resolve_pending_breakpoint()\cell breakpoint.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function reattach_breakpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 int reattach_breakpoints ( int pid )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell pid_to_ptid()\cell infrun.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\cell save_inferior_ptid()\cell infrun.c\cell\row
Refs Var:\cell bp_location_chain\cell breakpoint.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function remove_breakpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 int remove_breakpoints ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell paddr_nz()\cell utils.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\cell warning()\cell utils.c\cell\row
Called by:\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell extended_remote_async_create_inferior()\cell remote.c\cell\row
\cell extended_remote_create_inferior()\cell remote.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
Refs Var:\cell bp_location_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function remove_duplicate_sals()\par}
{\s5\f1\fs20\ql\sb50\sa50 void remove_duplicate_sals ( struct symtabs_and_lines* new_sals, struct symtabs_and_lines old_sals, char** new_canonical )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell create_breakpoints()\cell breakpoint.c\cell\row
\cell decode_all_variables()\cell linespec.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function remove_hw_watchpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 int remove_hw_watchpoints ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell remove_breakpoint()\cell breakpoint.c\cell\row
Called by:\cell resume()\cell infrun.c\cell\row
Refs Var:\cell bp_location_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function remove_solib_event_breakpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 void remove_solib_event_breakpoints ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell gdb_check_fatal()\cell utils.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function remove_thread_event_breakpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 void remove_thread_event_breakpoints ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell delete_breakpoint()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function resolve_sal_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 void resolve_sal_pc ( struct symtab_and_line* sal )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell block_function()\cell block.c\cell\row
\cell blockvector_for_pc_sect()\cell block.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_line_pc_range()\cell symtab.c\cell\row
\cell fixup_symbol_section()\cell symtab.c\cell\row
\cell lookup_minimal_symbol_by_pc()\cell minsyms.c\cell\row
Called by:\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell breakpoint_sals_to_pc()\cell breakpoint.c\cell\row
\cell jump_command()\cell infcmd.c\cell\row
\cell scope_info()\cell tracepoint.c\cell\row
\cell solib_load_unload_1()\cell breakpoint.c\cell\row
\cell trace_command()\cell tracepoint.c\cell\row
\cell until_break_command()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function rwatch_command_wrapper()\par}
{\s5\f1\fs20\ql\sb50\sa50 void rwatch_command_wrapper ( const char* arg, int by_location, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell watch_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_breakpoint_count()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_breakpoint_count ( int num )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell lookup_internalvar()\cell value.c\cell\row
\cell set_internalvar()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
Called by:\cell break_command_2()\cell breakpoint.c\cell\row
\cell create_breakpoints()\cell breakpoint.c\cell\row
\cell create_exception_catchpoint()\cell breakpoint.c\cell\row
\cell create_exec_event_catchpoint()\cell breakpoint.c\cell\row
\cell create_fork_vfork_event_catchpoint()\cell breakpoint.c\cell\row
\cell set_breakpoint_sal()\cell breakpoint.c\cell\row
\cell solib_load_unload_1()\cell breakpoint.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_count\cell breakpoint.c\cell\row
\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_breakpoint_sal()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct breakpoint* set_breakpoint_sal ( struct symtab_and_line sal )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell set_breakpoint_count()\cell breakpoint.c\cell\row
\cell set_raw_breakpoint()\cell breakpoint.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
Refs Var:\cell breakpoint_count\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_default_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_default_breakpoint ( int valid, CORE_ADDR addr, struct symtab* symtab, int line )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Called by:\cell clear_symtab_users()\cell symfile.c\cell\row
\cell print_frame_info()\cell stack.c\cell\row
Refs Var:\cell default_breakpoint_address\cell breakpoint.c\cell\row
\cell default_breakpoint_line\cell breakpoint.c\cell\row
\cell default_breakpoint_symtab\cell breakpoint.c\cell\row
\cell default_breakpoint_valid\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_ignore_count()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_ignore_count ( int bptnum, int count, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell  breakpoint_modify_event(), breakpoints_changed()\cell\cell\row
Called by:\cell continue_command()\cell infcmd.c\cell\row
\cell ignore_command()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_longjmp_resume_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_longjmp_resume_breakpoint ( CORE_ADDR pc, struct frame_id frame_id )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell adjust_breakpoint_address()\cell breakpoint.c\cell\row
\cell check_duplicates()\cell breakpoint.c\cell\row
Called by:\cell handle_inferior_event()\cell infrun.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_momentary_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct breakpoint* set_momentary_breakpoint ( struct symtab_and_line sal, struct frame_id frame_id, enum bptype type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell in_thread_list()\cell thread.c\cell\row
\cell pid_to_thread_id()\cell thread.c\cell\row
\cell set_raw_breakpoint()\cell breakpoint.c\cell\row
Called by:\cell finish_command()\cell infcmd.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell insert_step_resume_breakpoint_at_sal()\cell infrun.c\cell\row
\cell until_break_command()\cell breakpoint.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_raw_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct breakpoint* set_raw_breakpoint ( struct symtab_and_line sal, enum bptype bptype, int pending_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell adjust_breakpoint_address()\cell breakpoint.c\cell\row
\cell allocate_bp_location()\cell breakpoint.c\cell\row
\cell check_duplicates()\cell breakpoint.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell set_bp_objfile()\cell breakpoint.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), breakpoints_changed(), strlen()\cell\cell\row
Called by:\cell break_command_2()\cell breakpoint.c\cell\row
\cell create_breakpoints()\cell breakpoint.c\cell\row
\cell create_exception_catchpoint()\cell breakpoint.c\cell\row
\cell create_exec_event_catchpoint()\cell breakpoint.c\cell\row
\cell create_fork_vfork_event_catchpoint()\cell breakpoint.c\cell\row
\cell create_internal_breakpoint()\cell breakpoint.c\cell\row
\cell set_breakpoint_sal()\cell breakpoint.c\cell\row
\cell set_momentary_breakpoint()\cell breakpoint.c\cell\row
\cell solib_load_unload_1()\cell breakpoint.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell current_language\cell language.c\cell\row
\cell input_radix\cell valprint.c\cell\row
\cell null_frame_id\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function software_breakpoint_inserted_here_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int software_breakpoint_inserted_here_p ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell breakpoint_enabled()\cell breakpoint.c\cell\row
\cell section_is_mapped()\cell symfile.c\cell\row
\cell section_is_overlay()\cell symfile.c\cell\row
Called by:\cell adjust_pc_after_break()\cell infrun.c\cell\row
Refs Var:\cell bp_location_chain\cell breakpoint.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function tbreak_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 void tbreak_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell break_command_1()\cell breakpoint.c\cell\row
Called by:\cell go_command()\cell infcmd.c\cell\row
\cell run_command_1()\cell infcmd.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function tell_breakpoints_objfile_changed()\par}
{\s5\f1\fs20\ql\sb50\sa50 void tell_breakpoints_objfile_changed ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell tell_breakpoints_objfile_changed_internal()\cell breakpoint.c\cell\row
Called by:\cell remove_symbol_file_command()\cell symfile.c\cell\row
\cell reopen_exec_file()\cell corefile.c\cell\row
\cell replace_psymbols_with_correct_psymbols()\cell symfile.c\cell\row
\cell reread_symbols_for_objfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function tell_breakpoints_objfile_removed()\par}
{\s5\f1\fs20\ql\sb50\sa50 void tell_breakpoints_objfile_removed ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell tell_breakpoints_objfile_changed_internal()\cell breakpoint.c\cell\row
Called by:\cell free_objfile()\cell objfiles.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function until_break_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 void until_break_command ( const char* arg, int from_tty, int anywhere )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell add_continuation()\cell utils.c\cell\row
\cell clear_proceed_status()\cell infrun.c\cell\row
\cell decode_line_1()\cell linespec.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_pc_line()\cell symtab.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell get_frame_pc()\cell frame.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
\cell make_cleanup_delete_breakpoint()\cell breakpoint.c\cell\row
\cell make_exec_cleanup_delete_breakpoint()\cell breakpoint.c\cell\row
\cell proceed()\cell infrun.c\cell\row
\cell resolve_sal_pc()\cell breakpoint.c\cell\row
\cell set_momentary_breakpoint()\cell breakpoint.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell advance_command()\cell infcmd.c\cell\row
\cell until_command()\cell infcmd.c\cell\row
Refs Func:\cell until_break_command_continuation()\cell breakpoint.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell default_breakpoint_line\cell breakpoint.c\cell\row
\cell default_breakpoint_symtab\cell breakpoint.c\cell\row
\cell default_breakpoint_valid\cell breakpoint.c\cell\row
\cell deprecated_selected_frame\cell frame.c\cell\row
\cell gdb_override_async\cell target/target.c\cell\row
\cell null_frame_id\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function update_breakpoints_after_exec()\par}
{\s5\f1\fs20\ql\sb50\sa50 void update_breakpoints_after_exec ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell create_overlay_event_breakpoint()\cell breakpoint.c\cell\row
\cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell mark_breakpoints_out()\cell breakpoint.c\cell\row
Called by:\cell follow_exec()\cell infrun.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function update_exception_catchpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 int update_exception_catchpoints ( enum exception_event_kind ex_event, int tempflag, const char* cond_string, int delete_it, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell create_exception_catchpoint()\cell breakpoint.c\cell\row
\cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell catch_exception_command_1()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell exception_catchpoint_catch_enabled\cell breakpoint.c\cell\row
\cell exception_catchpoint_throw_enabled\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function watch_command_wrapper()\par}
{\s5\f1\fs20\ql\sb50\sa50 void watch_command_wrapper ( const char* arg, int by_location, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.h\cell\cell\row
Calls: \cell watch_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_breakpoint_to_new_list()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_breakpoint_to_new_list ( struct breakpoint_list** new_breakpoints, struct breakpoint* bp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell break_command_2()\cell breakpoint.c\cell\row
\cell create_breakpoints()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function adjust_breakpoint_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR adjust_breakpoint_address ( CORE_ADDR bpaddr, enum bptype bptype )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell breakpoint_adjustment_warning()\cell breakpoint.c\cell\row
\cell gdbarch_adjust_breakpoint_address()\cell gdbarch.c\cell\row
\cell gdbarch_adjust_breakpoint_address_p()\cell gdbarch.c\cell\row
Called by:\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell set_longjmp_resume_breakpoint()\cell breakpoint.c\cell\row
\cell set_raw_breakpoint()\cell breakpoint.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function allocate_bp_location()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct bp_location* allocate_bp_location ( struct breakpoint* bpt, enum bptype bp_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell internal_error()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell set_raw_breakpoint()\cell breakpoint.c\cell\row
Refs Var:\cell bp_location_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function async_breakpoint_command_continuation()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void async_breakpoint_command_continuation ( struct continuation_arg* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell bpstat_do_actions()\cell breakpoint.c\cell\row
Used in:\cell bpstat_do_actions()\cell breakpoint.c\cell\row
Refs Var:\cell stop_bpstat\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function awatch_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void awatch_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell detect_location_arg()\cell breakpoint.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function bpstat_alloc()\par}
{\s5\f1\fs20\ql\sb50\sa50 static bpstat bpstat_alloc ( struct breakpoint* b, bpstat cbs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell bpstat_get_triggered_catchpoints()\cell breakpoint.c\cell\row
\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function break_command_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int break_command_1 ( const char* arg, int flag, int from_tty, struct breakpoint* pending_bp, int use_msymbol_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell break_command_2()\cell breakpoint.c\cell\row
\cell error()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk(), isspace(), strstr()\cell\cell\row
Called by:\cell break_command()\cell breakpoint.c\cell\row
\cell future_break_command()\cell breakpoint.c\cell\row
\cell hbreak_command()\cell breakpoint.c\cell\row
\cell rbr_break_command()\cell breakpoint.c\cell\row
\cell stopat_command()\cell breakpoint.c\cell\row
\cell stopin_command()\cell breakpoint.c\cell\row
\cell tbreak_command()\cell breakpoint.c\cell\row
\cell thbreak_command()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function break_command_2()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int break_command_2 ( const char* arg, int flag, int from_tty, struct breakpoint* pending_bp, char* requested_shlib, int* indices, struct breakpoint_list** new_breakpoints, int use_msymbol_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell add_breakpoint_to_new_list()\cell breakpoint.c\cell\row
\cell block_for_pc()\cell block.c\cell\row
\cell create_breakpoints()\cell breakpoint.c\cell\row
\cell discard_cleanups()\cell utils.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_pc_sect_function()\cell blockframe.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_ui_out_list_begin_end()\cell ui-out.c\cell\row
\cell mention()\cell breakpoint.c\cell\row
\cell nquery()\cell utils.c\cell\row
\cell parse_exp_1()\cell parse.c\cell\row
\cell remove_duplicates()\cell breakpoint.c\cell\row
\cell remove_non_msymbol_sals()\cell breakpoint.c\cell\row
\cell safe_breakpoint_sals_to_pc()\cell breakpoint.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell set_breakpoint_count()\cell breakpoint.c\cell\row
\cell set_raw_breakpoint()\cell breakpoint.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell ui_out_field_core_addr()\cell ui-out.c\cell\row
\cell ui_out_field_int()\cell ui-out.c\cell\row
\cell ui_out_field_skip()\cell ui-out.c\cell\row
\cell ui_out_field_string()\cell ui-out.c\cell\row
\cell ui_out_is_mi_like_p()\cell ui-out.c\cell\row
\cell valid_thread_id()\cell thread.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xcalloc()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  catch_exception(), exception_print(), strncmp(), strtol(), throw_exception(), xstrdup()\cell\cell\row
Called by:\cell break_command_1()\cell breakpoint.c\cell\row
\cell gdb_breakpoint()\cell breakpoint.c\cell\row
\cell resolve_pending_breakpoint()\cell breakpoint.c\cell\row
Refs Func:\cell do_captured_parse_breakpoint()\cell breakpoint.c\cell\row
\cell null_cleanup()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell breakpoint_count\cell breakpoint.c\cell\row
\cell demangle\cell utils.c\cell\row
\cell gdb_stderr\cell main.c\cell\row
\cell pending_break_support\cell breakpoint.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function breakpoint_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void breakpoint_1 ( int bnum, int allflag )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell gdbarch_addr_bit()\cell gdbarch.c\cell\row
\cell make_cleanup_ui_out_table_begin_end()\cell ui-out.c\cell\row
\cell print_one_breakpoint()\cell breakpoint.c\cell\row
\cell set_next_address()\cell printcmd.c\cell\row
\cell ui_out_message()\cell ui-out.c\cell\row
\cell ui_out_table_body()\cell ui-out.c\cell\row
\cell ui_out_table_header()\cell ui-out.c\cell\row
\cell user_settable_breakpoint()\cell breakpoint.c\cell\row
\cell  annotate_breakpoints_headers(), annotate_breakpoints_table(), annotate_breakpoints_table_end(), annotate_field()\cell\cell\row
Called by:\cell breakpoints_info()\cell breakpoint.c\cell\row
\cell maintenance_info_breakpoints()\cell breakpoint.c\cell\row
Refs Var:\cell addressprint\cell valprint.c\cell\row
\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function breakpoint_address_is_meaningful()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int breakpoint_address_is_meaningful ( struct breakpoint* bpt )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Called by:\cell check_duplicates()\cell breakpoint.c\cell\row
\cell describe_other_breakpoints()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function breakpoint_adjustment_warning()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void breakpoint_adjustment_warning ( CORE_ADDR from_addr, CORE_ADDR to_addr, int bnum, int have_bnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell hex_string_custom()\cell utils.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk()\cell\cell\row
Called by:\cell adjust_breakpoint_address()\cell breakpoint.c\cell\row
\cell print_it_typical()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function breakpoint_cond_eval()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int breakpoint_cond_eval ( void* exp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell evaluate_expression()\cell eval.c\cell\row
\cell value_free_to_mark()\cell value.c\cell\row
\cell value_mark()\cell value.c\cell\row
\cell value_true()\cell language.c\cell\row
Used in:\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function breakpoint_enabled()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int breakpoint_enabled ( struct breakpoint* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell bpstat_have_active_hw_watchpoints()\cell breakpoint.c\cell\row
\cell bpstat_should_step()\cell breakpoint.c\cell\row
\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell breakpoint_here_p()\cell breakpoint.c\cell\row
\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell breakpoint_thread_match()\cell breakpoint.c\cell\row
\cell disable_breakpoints_in_shlibs()\cell breakpoint.c\cell\row
\cell disable_breakpoints_in_unloaded_shlib()\cell breakpoint.c\cell\row
\cell disable_user_breakpoints_before_operation()\cell breakpoint.c\cell\row
\cell disable_watchpoints_before_interactive_call_start()\cell breakpoint.c\cell\row
\cell hw_watchpoint_used_count()\cell breakpoint.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell insert_breakpoints()\cell breakpoint.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\cell software_breakpoint_inserted_here_p()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function breakpoint_re_set_all()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void breakpoint_re_set_all ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell create_longjmp_breakpoint()\cell breakpoint.c\cell\row
\cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell gdbarch_get_longjmp_target_p()\cell gdbarch.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell objfile_restrict_search()\cell objfiles.c\cell\row
\cell set_language()\cell language.c\cell\row
\cell user_settable_breakpoint()\cell breakpoint.c\cell\row
\cell xstrprintf()\cell utils.c\cell\row
\cell  catch_errors()\cell\cell\row
Called by:\cell breakpoint_update()\cell breakpoint.c\cell\row
Refs Func:\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_language\cell language.c\cell\row
\cell input_radix\cell valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function breakpoint_re_set_one()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int breakpoint_re_set_one ( void* bint )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell adjust_breakpoint_address()\cell breakpoint.c\cell\row
\cell breakpoint_enabled()\cell breakpoint.c\cell\row
\cell check_duplicates()\cell breakpoint.c\cell\row
\cell decode_line_1()\cell linespec.c\cell\row
\cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell evaluate_expression()\cell eval.c\cell\row
\cell find_pc_sect_section()\cell objfiles.c\cell\row
\cell find_pc_section()\cell objfiles.c\cell\row
\cell gdb_parse_exp_1()\cell wrapper.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_restrict_to_objfile_by_name()\cell objfiles.c\cell\row
\cell make_cleanup_restrict_to_shlib()\cell objfiles.c\cell\row
\cell mention()\cell breakpoint.c\cell\row
\cell objfile_name_set_load_state()\cell objfiles.c\cell\row
\cell parse_exp_1()\cell parse.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell release_value()\cell value.c\cell\row
\cell resolve_sal_pc()\cell breakpoint.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell set_bp_objfile()\cell breakpoint.c\cell\row
\cell set_language()\cell language.c\cell\row
\cell value_fetch_lazy()\cell valops.c\cell\row
\cell value_free()\cell value.c\cell\row
\cell value_free_to_mark()\cell value.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell value_mark()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  breakpoints_changed(), deprecated_modify_breakpoint_hook(), strcmp(), strlen()\cell\cell\row
Used in:\cell breakpoint_re_set_all()\cell breakpoint.c\cell\row
\cell breakpoint_update()\cell breakpoint.c\cell\row
Refs Func:\cell null_cleanup()\cell utils.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell deprecated_modify_breakpoint_hook\cell top.c\cell\row
\cell innermost_block\cell parse.c\cell\row
\cell input_radix\cell valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function breakpoint_sals_to_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void breakpoint_sals_to_pc ( struct symtabs_and_lines* sals, const char* address )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell resolve_sal_pc()\cell breakpoint.c\cell\row
Called by:\cell do_captured_breakpoint()\cell breakpoint.c\cell\row
\cell wrap_breakpoint_sals_to_pc()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function breakpoints_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void breakpoints_info ( const char* bnum_exp, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell breakpoint_1()\cell breakpoint.c\cell\row
\cell parse_and_eval_long()\cell eval.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function can_use_hardware_watchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int can_use_hardware_watchpoint ( struct value* v )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell deprecated_value_modifiable()\cell value.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell value_next()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  i386_region_ok_for_watchpoint()\cell\cell\row
Called by:\cell do_enable_breakpoint()\cell breakpoint.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
Refs Var:\cell can_use_hw_watchpoints\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function catch_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void catch_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell catch_command_1()\cell breakpoint.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function catch_command_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void catch_command_1 ( const char* arg, int tempflag, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell catch_exception_command_1()\cell breakpoint.c\cell\row
\cell catch_exec_command_1()\cell breakpoint.c\cell\row
\cell catch_fork_command_1()\cell breakpoint.c\cell\row
\cell catch_load_command_1()\cell breakpoint.c\cell\row
\cell catch_unload_command_1()\cell breakpoint.c\cell\row
\cell ep_find_event_name_end()\cell breakpoint.c\cell\row
\cell error()\cell utils.c\cell\row
\cell  strncmp()\cell\cell\row
Called by:\cell catch_command()\cell breakpoint.c\cell\row
\cell tcatch_command()\cell breakpoint.c\cell\row
Refs Var:\cell exception_catchpoint_catch_enabled\cell breakpoint.c\cell\row
\cell exception_catchpoint_throw_enabled\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function catch_exception_command_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void catch_exception_command_1 ( enum exception_event_kind ex_event, const char* arg, int tempflag, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell ep_parse_optional_if_clause()\cell breakpoint.c\cell\row
\cell ep_skip_leading_whitespace()\cell breakpoint.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gnu_v3_update_exception_catchpoints()\cell breakpoint.c\cell\row
\cell handle_gnu_v3_exceptions()\cell breakpoint.c\cell\row
\cell update_exception_catchpoints()\cell breakpoint.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  isspace()\cell\cell\row
Called by:\cell catch_command_1()\cell breakpoint.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function catch_exec_command_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void catch_exec_command_1 ( const char* arg, int tempflag, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell create_exec_event_catchpoint()\cell breakpoint.c\cell\row
\cell ep_parse_optional_if_clause()\cell breakpoint.c\cell\row
\cell ep_skip_leading_whitespace()\cell breakpoint.c\cell\row
\cell error()\cell utils.c\cell\row
\cell  isspace()\cell\cell\row
Called by:\cell catch_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function catch_fork_command_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void catch_fork_command_1 ( catch_fork_kind fork_kind, const char* arg, int tempflag, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell create_fork_event_catchpoint()\cell breakpoint.c\cell\row
\cell create_vfork_event_catchpoint()\cell breakpoint.c\cell\row
\cell ep_parse_optional_if_clause()\cell breakpoint.c\cell\row
\cell ep_skip_leading_whitespace()\cell breakpoint.c\cell\row
\cell error()\cell utils.c\cell\row
\cell  isspace()\cell\cell\row
Called by:\cell catch_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function catch_load_command_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void catch_load_command_1 ( const char* arg, int tempflag, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ep_parse_optional_filename()\cell breakpoint.c\cell\row
\cell ep_parse_optional_if_clause()\cell breakpoint.c\cell\row
\cell ep_skip_leading_whitespace()\cell breakpoint.c\cell\row
\cell error()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  isspace()\cell\cell\row
Called by:\cell catch_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function catch_unload_command_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void catch_unload_command_1 ( const char* arg, int tempflag, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ep_parse_optional_filename()\cell breakpoint.c\cell\row
\cell ep_parse_optional_if_clause()\cell breakpoint.c\cell\row
\cell ep_skip_leading_whitespace()\cell breakpoint.c\cell\row
\cell error()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  isspace()\cell\cell\row
Called by:\cell catch_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function check_duplicates()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void check_duplicates ( struct breakpoint* bpt )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell breakpoint_address_is_meaningful()\cell breakpoint.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell disable_breakpoint()\cell breakpoint.c\cell\row
\cell disable_longjmp_breakpoint()\cell breakpoint.c\cell\row
\cell disable_overlay_breakpoints()\cell breakpoint.c\cell\row
\cell disable_user_breakpoints_before_operation()\cell breakpoint.c\cell\row
\cell disable_watchpoints_before_interactive_call_start()\cell breakpoint.c\cell\row
\cell do_enable_breakpoint()\cell breakpoint.c\cell\row
\cell enable_longjmp_breakpoint()\cell breakpoint.c\cell\row
\cell enable_overlay_breakpoints()\cell breakpoint.c\cell\row
\cell enable_user_breakpoints_after_operation()\cell breakpoint.c\cell\row
\cell enable_watchpoints_after_interactive_call_stop()\cell breakpoint.c\cell\row
\cell set_longjmp_resume_breakpoint()\cell breakpoint.c\cell\row
\cell set_raw_breakpoint()\cell breakpoint.c\cell\row
Refs Var:\cell bp_location_chain\cell breakpoint.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cleanup_executing_breakpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void cleanup_executing_breakpoints ( void* ignore )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Used in:\cell bpstat_do_actions()\cell breakpoint.c\cell\row
Refs Var:\cell executing_breakpoint_commands\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function clear_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void clear_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell decode_line_spec()\cell symtab.c\cell\row
\cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell error()\cell utils.c\cell\row
\cell init_sal()\cell symtab.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell putchar_unfiltered()\cell utils.c\cell\row
\cell section_is_overlay()\cell symfile.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  breakpoints_changed(), strcmp()\cell\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell default_breakpoint_address\cell breakpoint.c\cell\row
\cell default_breakpoint_line\cell breakpoint.c\cell\row
\cell default_breakpoint_symtab\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function clear_new_breakpoint_list()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void clear_new_breakpoint_list ( struct breakpoint_list* new_breakpoints )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xfree()\cell utils.c\cell\row
Called by:\cell gdb_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function commands_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void commands_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell get_number()\cell breakpoint.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell xstrprintf()\cell utils.c\cell\row
\cell  breakpoint_modify_event(), breakpoints_changed(), free_command_lines(), read_command_lines()\cell\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell executing_breakpoint_commands\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function condition_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void condition_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell condition_command_1()\cell breakpoint.c\cell\row
\cell error()\cell utils.c\cell\row
\cell get_number()\cell breakpoint.c\cell\row
\cell  breakpoint_modify_event(), breakpoints_changed(), error_no_arg()\cell\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function condition_command_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void condition_command_1 ( struct breakpoint* b, const char* condition, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell block_for_pc()\cell block.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gdb_parse_exp_1()\cell wrapper.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell condition_command()\cell breakpoint.c\cell\row
\cell gdb_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cover_target_enable_exception_callback()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int cover_target_enable_exception_callback ( void* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Used in:\cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function create_breakpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void create_breakpoints ( struct symtabs_and_lines sals, char** addr_string, struct expression** cond, char** cond_string, char* requested_shlib, enum bptype type, enum bpdisp disposition, int thread, int ignore_count, int from_tty, struct breakpoint* pending_bp, struct breakpoint_list** new_breakpoints )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell add_breakpoint_to_new_list()\cell breakpoint.c\cell\row
\cell block_for_pc()\cell block.c\cell\row
\cell check_for_additional_inlined_breakpoint_locations()\cell inlining.c\cell\row
\cell create_breakpoints()\cell breakpoint.c\cell\row
\cell describe_other_breakpoints()\cell breakpoint.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gdb_parse_exp_1()\cell wrapper.c\cell\row
\cell hw_breakpoint_used_count()\cell breakpoint.c\cell\row
\cell mention()\cell breakpoint.c\cell\row
\cell paddr()\cell utils.c\cell\row
\cell remove_duplicate_sals()\cell breakpoint.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell set_bp_objfile()\cell breakpoint.c\cell\row
\cell set_breakpoint_count()\cell breakpoint.c\cell\row
\cell set_raw_breakpoint()\cell breakpoint.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xstrprintf()\cell utils.c\cell\row
\cell  breakpoint_resolve_event(), copy_command_lines(), strlen(), xstrdup()\cell\cell\row
Called by:\cell break_command_2()\cell breakpoint.c\cell\row
\cell create_breakpoints()\cell breakpoint.c\cell\row
\cell do_captured_breakpoint()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell breakpoint_count\cell breakpoint.c\cell\row
\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function create_fork_vfork_event_catchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void create_fork_vfork_event_catchpoint ( int tempflag, const char* cond_string, enum bptype bp_kind )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell init_sal()\cell symtab.c\cell\row
\cell mention()\cell breakpoint.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell set_breakpoint_count()\cell breakpoint.c\cell\row
\cell set_raw_breakpoint()\cell breakpoint.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell create_fork_event_catchpoint()\cell breakpoint.c\cell\row
\cell create_vfork_event_catchpoint()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_count\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function create_internal_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct breakpoint* create_internal_breakpoint ( CORE_ADDR address, enum bptype type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell find_pc_overlay()\cell symfile.c\cell\row
\cell init_sal()\cell symtab.c\cell\row
\cell set_raw_breakpoint()\cell breakpoint.c\cell\row
Called by:\cell create_longjmp_breakpoint()\cell breakpoint.c\cell\row
\cell create_objc_hook_breakpoint()\cell breakpoint.c\cell\row
\cell create_overlay_event_breakpoint()\cell breakpoint.c\cell\row
\cell create_solib_event_breakpoint()\cell breakpoint.c\cell\row
\cell create_thread_event_breakpoint()\cell breakpoint.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function create_longjmp_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void create_longjmp_breakpoint ( const char* func_name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell create_internal_breakpoint()\cell breakpoint.c\cell\row
\cell lookup_minimal_symbol_text()\cell minsyms.c\cell\row
\cell  xstrdup()\cell\cell\row
Called by:\cell breakpoint_re_set_all()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function create_overlay_event_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void create_overlay_event_breakpoint ( const char* func_name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell create_internal_breakpoint()\cell breakpoint.c\cell\row
\cell lookup_minimal_symbol_text()\cell minsyms.c\cell\row
\cell  xstrdup()\cell\cell\row
Called by:\cell update_breakpoints_after_exec()\cell breakpoint.c\cell\row
Refs Var:\cell overlay_debugging\cell symfile.c\cell\row
\cell overlay_events_enabled\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function current_exception_should_stop()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int current_exception_should_stop ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell re_comp()\cell utils.c\cell\row
\cell re_exec()\cell utils.c\cell\row
\cell re_set_syntax()\cell utils.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell bpstat_stop_status()\cell breakpoint.c\cell\row
Refs Var:\cell current_exception_event\cell breakpoint.c\cell\row
\cell exception_catch_type_regexp\cell breakpoint.c\cell\row
\cell exception_throw_type_regexp\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function describe_other_breakpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void describe_other_breakpoints ( CORE_ADDR pc, asection* section )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell breakpoint_address_is_meaningful()\cell breakpoint.c\cell\row
\cell deprecated_print_address_numeric()\cell printcmd.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
Called by:\cell create_breakpoints()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function disable_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void disable_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell disable_breakpoint()\cell breakpoint.c\cell\row
\cell map_breakpoint_numbers()\cell breakpoint.c\cell\row
\cell warning()\cell utils.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
Refs Func:\cell disable_breakpoint()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function disable_user_breakpoints_before_operation()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void disable_user_breakpoints_before_operation ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell breakpoint_enabled()\cell breakpoint.c\cell\row
\cell check_duplicates()\cell breakpoint.c\cell\row
\cell is_objc_exception_throw_breakpoint()\cell objc-lang.c\cell\row
Called by:\cell make_cleanup_enable_disable_bpts_during_operation()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_captured_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int do_captured_breakpoint ( struct ui_out* uiout, void* data )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell block_for_pc()\cell block.c\cell\row
\cell breakpoint_sals_to_pc()\cell breakpoint.c\cell\row
\cell create_breakpoints()\cell breakpoint.c\cell\row
\cell discard_cleanups()\cell utils.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell parse_breakpoint_sals()\cell breakpoint.c\cell\row
\cell parse_exp_1()\cell parse.c\cell\row
\cell remove_duplicates()\cell breakpoint.c\cell\row
\cell xcalloc()\cell utils.c\cell\row
\cell  xstrdup()\cell\cell\row
Used in:\cell fsf_gdb_breakpoint()\cell breakpoint.c\cell\row
Refs Func:\cell null_cleanup()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_captured_breakpoint_query()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int do_captured_breakpoint_query ( struct ui_out* uiout, void* data )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell print_one_breakpoint()\cell breakpoint.c\cell\row
Used in:\cell gdb_breakpoint_query()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_captured_parse_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_captured_parse_breakpoint ( struct ui_out* ui, void* data )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell parse_breakpoint_sals()\cell breakpoint.c\cell\row
Used in:\cell break_command_2()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_delete_breakpoint_cleanup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_delete_breakpoint_cleanup ( void* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell delete_breakpoint()\cell breakpoint.c\cell\row
Used in:\cell make_cleanup_delete_breakpoint()\cell breakpoint.c\cell\row
\cell make_exec_cleanup_delete_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_enable_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_enable_breakpoint ( struct breakpoint* bpt, enum bpdisp disposition )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell can_use_hardware_watchpoint()\cell breakpoint.c\cell\row
\cell check_duplicates()\cell breakpoint.c\cell\row
\cell error()\cell utils.c\cell\row
\cell evaluate_expression()\cell eval.c\cell\row
\cell frame_find_by_id()\cell frame.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell hw_breakpoint_used_count()\cell breakpoint.c\cell\row
\cell hw_watchpoint_used_count()\cell breakpoint.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell release_value()\cell value.c\cell\row
\cell resolve_pending_breakpoint()\cell breakpoint.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell value_fetch_lazy()\cell valops.c\cell\row
\cell value_free()\cell value.c\cell\row
\cell value_free_to_mark()\cell value.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell value_mark()\cell value.c\cell\row
\cell  breakpoint_modify_event(), breakpoints_changed(), deprecated_modify_breakpoint_hook()\cell\cell\row
Called by:\cell enable_breakpoint()\cell breakpoint.c\cell\row
\cell enable_delete_breakpoint()\cell breakpoint.c\cell\row
\cell enable_once_breakpoint()\cell breakpoint.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell deprecated_modify_breakpoint_hook\cell top.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_restore_lang_radix_cleanup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_restore_lang_radix_cleanup ( void* old )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell set_language()\cell language.c\cell\row
Used in:\cell resolve_pending_breakpoint()\cell breakpoint.c\cell\row
Refs Var:\cell input_radix\cell valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function enable_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void enable_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell enable_breakpoint()\cell breakpoint.c\cell\row
\cell map_breakpoint_numbers()\cell breakpoint.c\cell\row
\cell warning()\cell utils.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
Refs Func:\cell enable_breakpoint()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function enable_delete_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void enable_delete_breakpoint ( struct breakpoint* bpt )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell do_enable_breakpoint()\cell breakpoint.c\cell\row
Used in:\cell enable_delete_command()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function enable_delete_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void enable_delete_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell map_breakpoint_numbers()\cell breakpoint.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
Refs Func:\cell enable_delete_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function enable_once_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void enable_once_breakpoint ( struct breakpoint* bpt )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell do_enable_breakpoint()\cell breakpoint.c\cell\row
Used in:\cell enable_once_command()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function enable_once_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void enable_once_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell map_breakpoint_numbers()\cell breakpoint.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
Refs Func:\cell enable_once_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ep_find_event_name_end()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* ep_find_event_name_end ( const char* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell  isalnum()\cell\cell\row
Called by:\cell catch_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ep_parse_optional_filename()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* ep_parse_optional_filename ( const char** arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell  isspace()\cell\cell\row
Called by:\cell catch_load_command_1()\cell breakpoint.c\cell\row
\cell catch_unload_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ep_parse_optional_if_clause()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* ep_parse_optional_if_clause ( const char** arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell ep_skip_leading_whitespace()\cell breakpoint.c\cell\row
\cell  isspace(), strlen()\cell\cell\row
Called by:\cell catch_exception_command_1()\cell breakpoint.c\cell\row
\cell catch_exec_command_1()\cell breakpoint.c\cell\row
\cell catch_fork_command_1()\cell breakpoint.c\cell\row
\cell catch_load_command_1()\cell breakpoint.c\cell\row
\cell catch_unload_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ep_skip_leading_whitespace()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void ep_skip_leading_whitespace ( const char** s )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell  isspace()\cell\cell\row
Called by:\cell catch_exception_command_1()\cell breakpoint.c\cell\row
\cell catch_exec_command_1()\cell breakpoint.c\cell\row
\cell catch_fork_command_1()\cell breakpoint.c\cell\row
\cell catch_load_command_1()\cell breakpoint.c\cell\row
\cell catch_unload_command_1()\cell breakpoint.c\cell\row
\cell ep_parse_optional_if_clause()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function free_valchain()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void free_valchain ( struct bp_location* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell value_free()\cell value.c\cell\row
\cell value_next()\cell value.c\cell\row
Called by:\cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_number_trailer()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int get_number_trailer ( const char** pp, int trailer )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell lookup_internalvar()\cell value.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_of_internalvar()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell  __builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strncpy_chk(), atoi(), isalnum(), isspace()\cell\cell\row
Called by:\cell get_number()\cell breakpoint.c\cell\row
\cell get_number_or_range()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_count\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function hbreak_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void hbreak_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell break_command_1()\cell breakpoint.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function hw_breakpoint_used_count()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int hw_breakpoint_used_count ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Called by:\cell create_breakpoints()\cell breakpoint.c\cell\row
\cell do_enable_breakpoint()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function hw_watchpoint_used_count()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int hw_watchpoint_used_count ( enum bptype type, int* other_type_used )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell breakpoint_enabled()\cell breakpoint.c\cell\row
Called by:\cell do_enable_breakpoint()\cell breakpoint.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ignore_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void ignore_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell get_number()\cell breakpoint.c\cell\row
\cell longest_to_int()\cell valprint.c\cell\row
\cell parse_and_eval()\cell eval.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell set_ignore_count()\cell breakpoint.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell  error_no_arg()\cell\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function insert_bp_location()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int insert_bp_location ( struct bp_location* bpt, struct ui_file* tmp_error_stream, int* disabled_breaks, int* process_warning, int* hw_breakpoint_error )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell breakpoint_enabled()\cell breakpoint.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell deprecated_print_address_numeric()\cell printcmd.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell ep_is_exception_catchpoint()\cell breakpoint.c\cell\row
\cell evaluate_expression()\cell eval.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell frame_find_by_id()\cell frame.c\cell\row
\cell free_valchain()\cell breakpoint.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell overlay_unmapped_address()\cell symfile.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\cell safe_strerror()\cell utils.c\cell\row
\cell section_is_mapped()\cell symfile.c\cell\row
\cell section_is_overlay()\cell symfile.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell value_mark()\cell value.c\cell\row
\cell value_next()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_release_to_mark()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xstrprintf()\cell utils.c\cell\row
\cell  catch_errors(), catch_exception(), exception_fprintf()\cell\cell\row
Called by:\cell insert_breakpoints()\cell breakpoint.c\cell\row
Refs Func:\cell cover_target_enable_exception_callback()\cell breakpoint.c\cell\row
\cell insert_catchpoint()\cell breakpoint.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell deprecated_selected_frame\cell frame.c\cell\row
\cell gdb_stderr\cell main.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\cell overlay_events_enabled\cell breakpoint.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function insert_catchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void insert_catchpoint ( struct ui_out* uo, void* args )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell internal_error()\cell utils.c\cell\row
\cell ptid_get_pid()\cell infrun.c\cell\row
Used in:\cell insert_bp_location()\cell breakpoint.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function maintenance_info_breakpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void maintenance_info_breakpoints ( const char* bnum_exp, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell breakpoint_1()\cell breakpoint.c\cell\row
\cell parse_and_eval_long()\cell eval.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function map_breakpoint_numbers()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void map_breakpoint_numbers ( const char* args, void (*function)(struct breakpoint*) )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell get_number_or_range()\cell breakpoint.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  error_no_arg()\cell\cell\row
Called by:\cell delete_command()\cell breakpoint.c\cell\row
\cell disable_command()\cell breakpoint.c\cell\row
\cell enable_command()\cell breakpoint.c\cell\row
\cell enable_delete_command()\cell breakpoint.c\cell\row
\cell enable_once_command()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function mention()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void mention ( struct breakpoint* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell deprecated_print_address_numeric()\cell printcmd.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell gdb_print_expression()\cell wrapper.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup_ui_out_stream_delete()\cell ui-out.c\cell\row
\cell make_cleanup_ui_out_tuple_begin_end()\cell ui-out.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell ui_out_field_int()\cell ui-out.c\cell\row
\cell ui_out_field_stream()\cell ui-out.c\cell\row
\cell ui_out_field_string()\cell ui-out.c\cell\row
\cell ui_out_is_mi_like_p()\cell ui-out.c\cell\row
\cell ui_out_stream_new()\cell ui-out.c\cell\row
\cell ui_out_text()\cell ui-out.c\cell\row
\cell  breakpoint_create_event(), deprecated_create_breakpoint_hook()\cell\cell\row
Called by:\cell break_command_2()\cell breakpoint.c\cell\row
\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell create_breakpoints()\cell breakpoint.c\cell\row
\cell create_exception_catchpoint()\cell breakpoint.c\cell\row
\cell create_exec_event_catchpoint()\cell breakpoint.c\cell\row
\cell create_fork_vfork_event_catchpoint()\cell breakpoint.c\cell\row
\cell print_it_typical()\cell breakpoint.c\cell\row
\cell solib_load_unload_1()\cell breakpoint.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
Refs Var:\cell addressprint\cell valprint.c\cell\row
\cell deprecated_create_breakpoint_hook\cell top.c\cell\row
\cell dont_mention\cell breakpoint.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function parse_breakpoint_sals()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void parse_breakpoint_sals ( const char** address, struct symtabs_and_lines* sals, char*** addr_string, char* requested_shlib, int* not_found_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell decode_line_1()\cell linespec.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_pc_overlay()\cell symfile.c\cell\row
\cell get_current_source_symtab_and_line()\cell source.c\cell\row
\cell init_sal()\cell symtab.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_restrict_to_shlib()\cell objfiles.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell objfile_set_load_state()\cell objfiles.c\cell\row
\cell paddr_u()\cell utils.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell xcalloc()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___snprintf_chk(), __builtin_object_size(), isspace(), strchr(), strlen(), strncmp(), throw_error()\cell\cell\row
Called by:\cell do_captured_breakpoint()\cell breakpoint.c\cell\row
\cell do_captured_parse_breakpoint()\cell breakpoint.c\cell\row
Refs Func:\cell null_cleanup()\cell utils.c\cell\row
Refs Var:\cell default_breakpoint_address\cell breakpoint.c\cell\row
\cell default_breakpoint_line\cell breakpoint.c\cell\row
\cell default_breakpoint_symtab\cell breakpoint.c\cell\row
\cell default_breakpoint_valid\cell breakpoint.c\cell\row
\cell pending_break_support\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_bp_stop_message()\par}
{\s5\f1\fs20\ql\sb50\sa50 static enum print_stop_action print_bp_stop_message ( bpstat bs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell print_it_typical()\cell breakpoint.c\cell\row
Called by:\cell bpstat_print()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_catch_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_catch_info ( struct breakpoint* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell ui_out_field_int()\cell ui-out.c\cell\row
\cell ui_out_field_skip()\cell ui-out.c\cell\row
\cell ui_out_field_string()\cell ui-out.c\cell\row
\cell ui_out_text()\cell ui-out.c\cell\row
Called by:\cell print_exception_catchpoint()\cell breakpoint.c\cell\row
Refs Var:\cell current_exception_event\cell breakpoint.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_exception_catchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static enum print_stop_action print_exception_catchpoint ( struct breakpoint* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell print_catch_info()\cell breakpoint.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell ui_out_is_mi_like_p()\cell ui-out.c\cell\row
\cell ui_out_print_annotation_string()\cell ui-out.c\cell\row
\cell  annotate_catchpoint()\cell\cell\row
Called by:\cell print_it_typical()\cell breakpoint.c\cell\row
Used in:\cell breakpoint.c\cell\cell\row
Refs Var:\cell current_exception_event\cell breakpoint.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_it_typical()\par}
{\s5\f1\fs20\ql\sb50\sa50 static enum print_stop_action print_it_typical ( bpstat bs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell breakpoint_adjustment_warning()\cell breakpoint.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell make_cleanup_ui_out_stream_delete()\cell ui-out.c\cell\row
\cell make_cleanup_ui_out_tuple_begin_end()\cell ui-out.c\cell\row
\cell mention()\cell breakpoint.c\cell\row
\cell print_exception_catchpoint()\cell breakpoint.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell ui_out_field_stream()\cell ui-out.c\cell\row
\cell ui_out_field_string()\cell ui-out.c\cell\row
\cell ui_out_is_mi_like_p()\cell ui-out.c\cell\row
\cell ui_out_print_annotation_int()\cell ui-out.c\cell\row
\cell ui_out_print_annotation_string()\cell ui-out.c\cell\row
\cell ui_out_stream_new()\cell ui-out.c\cell\row
\cell ui_out_text()\cell ui-out.c\cell\row
\cell value_free()\cell value.c\cell\row
\cell value_print()\cell valprint.c\cell\row
\cell  annotate_breakpoint(), annotate_catchpoint(), annotate_watchpoint(), async_reason_lookup()\cell\cell\row
Called by:\cell print_bp_stop_message()\cell breakpoint.c\cell\row
Refs Var:\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_mention_exception_catchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_mention_exception_catchpoint ( struct breakpoint* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell printf_filtered()\cell utils.c\cell\row
\cell  strstr()\cell\cell\row
Used in:\cell breakpoint.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_one_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_one_breakpoint ( struct breakpoint* b, CORE_ADDR* last_addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell ep_is_catchpoint()\cell breakpoint.c\cell\row
\cell find_pc_sect_function()\cell blockframe.c\cell\row
\cell frame_id_p()\cell frame.c\cell\row
\cell gdb_print_expression()\cell wrapper.c\cell\row
\cell gdbarch_addr_bit()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup_ui_out_stream_delete()\cell ui-out.c\cell\row
\cell make_cleanup_ui_out_tuple_begin_end()\cell ui-out.c\cell\row
\cell print_address_symbolic()\cell printcmd.c\cell\row
\cell print_one_exception_catchpoint()\cell breakpoint.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell ui_out_field_core_addr()\cell ui-out.c\cell\row
\cell ui_out_field_fmt()\cell ui-out.c\cell\row
\cell ui_out_field_int()\cell ui-out.c\cell\row
\cell ui_out_field_skip()\cell ui-out.c\cell\row
\cell ui_out_field_stream()\cell ui-out.c\cell\row
\cell ui_out_field_string()\cell ui-out.c\cell\row
\cell ui_out_is_mi_like_p()\cell ui-out.c\cell\row
\cell ui_out_spaces()\cell ui-out.c\cell\row
\cell ui_out_stream_new()\cell ui-out.c\cell\row
\cell ui_out_text()\cell ui-out.c\cell\row
\cell ui_out_wrap_hint()\cell ui-out.c\cell\row
\cell  __builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), annotate_field(), annotate_record(), print_command_lines()\cell\cell\row
Called by:\cell breakpoint_1()\cell breakpoint.c\cell\row
\cell do_captured_breakpoint_query()\cell breakpoint.c\cell\row
Refs Var:\cell addressprint\cell valprint.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell demangle\cell utils.c\cell\row
\cell gdb_null\cell main.c\cell\row
\cell gdb_stderr\cell main.c\cell\row
\cell show_breakpoint_hit_counts\cell breakpoint.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function print_one_exception_catchpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void print_one_exception_catchpoint ( struct breakpoint* b, CORE_ADDR* last_addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell ui_out_field_core_addr()\cell ui-out.c\cell\row
\cell ui_out_field_string()\cell ui-out.c\cell\row
\cell ui_out_spaces()\cell ui-out.c\cell\row
\cell  annotate_field()\cell\cell\row
Called by:\cell print_one_breakpoint()\cell breakpoint.c\cell\row
Used in:\cell breakpoint.c\cell\cell\row
Refs Var:\cell addressprint\cell valprint.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function remove_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int remove_breakpoint ( struct bp_location* b, insertion_state_t is )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell breakpoint_enabled()\cell breakpoint.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell ep_is_exception_catchpoint()\cell breakpoint.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell overlay_unmapped_address()\cell symfile.c\cell\row
\cell ptid_get_pid()\cell infrun.c\cell\row
\cell section_is_overlay()\cell symfile.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell value_next()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
Called by:\cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell detach_breakpoints()\cell breakpoint.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell reattach_breakpoints()\cell breakpoint.c\cell\row
\cell remove_breakpoints()\cell breakpoint.c\cell\row
\cell remove_hw_watchpoints()\cell breakpoint.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\cell overlay_events_enabled\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function remove_duplicates()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void remove_duplicates ( struct symtabs_and_lines* sals )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell break_command_2()\cell breakpoint.c\cell\row
\cell do_captured_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function remove_non_msymbol_sals()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void remove_non_msymbol_sals ( struct symtabs_and_lines* sals )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell break_command_2()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function resolve_pending_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int resolve_pending_breakpoint ( struct breakpoint* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell break_command_2()\cell breakpoint.c\cell\row
\cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell find_objfile_by_name()\cell objfiles.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell set_language()\cell language.c\cell\row
Called by:\cell do_enable_breakpoint()\cell breakpoint.c\cell\row
Used in:\cell re_enable_breakpoints_in_shlibs()\cell breakpoint.c\cell\row
Refs Func:\cell do_restore_lang_radix_cleanup()\cell breakpoint.c\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\cell input_radix\cell valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function restore_saved_pending_break_support()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void restore_saved_pending_break_support ( void* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Used in:\cell future_break_command()\cell breakpoint.c\cell\row
\cell gdb_breakpoint()\cell breakpoint.c\cell\row
\cell rbr_break_command()\cell breakpoint.c\cell\row
Refs Var:\cell pending_break_support\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function restrict_search_cleanup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void restrict_search_cleanup ( void* ignored )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell objfile_clear_restrict_list()\cell objfiles.c\cell\row
\cell objfile_restrict_search()\cell objfiles.c\cell\row
Used in:\cell breakpoint_update()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function rwatch_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void rwatch_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell detect_location_arg()\cell breakpoint.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function safe_breakpoint_sals_to_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int safe_breakpoint_sals_to_pc ( struct symtabs_and_lines* sals, const char* address )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell  catch_errors()\cell\cell\row
Called by:\cell break_command_2()\cell breakpoint.c\cell\row
Refs Func:\cell wrap_breakpoint_sals_to_pc()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function save_breakpoints_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void save_breakpoints_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell cli_out_new()\cell cli-out.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell dont_repeat()\cell top.c\cell\row
\cell error()\cell utils.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell fputc_unfiltered()\cell utils.c\cell\row
\cell fputs_unfiltered()\cell ui-file.c\cell\row
\cell gdb_fopen()\cell ui-file.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_freeargv()\cell utils.c\cell\row
\cell make_cleanup_ui_file_delete()\cell utils.c\cell\row
\cell make_cleanup_ui_out_delete()\cell utils.c\cell\row
\cell nomem()\cell utils.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell safe_strerror()\cell utils.c\cell\row
\cell write_one_breakpoint()\cell breakpoint.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __error(), __inline_strcpy_chk(), buildargv(), localtime(), setlocale(), strftime(), strlen(), tilde_expand(), time()\cell\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_bp_objfile()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_bp_objfile ( struct breakpoint* b, struct symtab_and_line* sal )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell find_pc_sect_section()\cell objfiles.c\cell\row
\cell find_pc_section()\cell objfiles.c\cell\row
Called by:\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell create_breakpoints()\cell breakpoint.c\cell\row
\cell set_raw_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_breakpoint_cmd()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_breakpoint_cmd ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_breakpoint_cmd()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_breakpoint_cmd ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_can_use_hw_watchpoints()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_can_use_hw_watchpoints ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_pending_break_support()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_pending_break_support ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function solib_load_unload_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void solib_load_unload_1 ( const char* hookname, int tempflag, char* dll_pathname, char* cond_string, enum bptype bp_kind )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell decode_line_1()\cell linespec.c\cell\row
\cell discard_cleanups()\cell utils.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell mention()\cell breakpoint.c\cell\row
\cell resolve_sal_pc()\cell breakpoint.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell set_breakpoint_count()\cell breakpoint.c\cell\row
\cell set_raw_breakpoint()\cell breakpoint.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), strlen()\cell\cell\row
Called by:\cell create_solib_load_event_breakpoint()\cell breakpoint.c\cell\row
\cell create_solib_unload_event_breakpoint()\cell breakpoint.c\cell\row
Refs Func:\cell null_cleanup()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell breakpoint_count\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function stop_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void stop_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell printf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function stopat_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void stopat_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell break_command_1()\cell breakpoint.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell  isdigit()\cell\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function stopin_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void stopin_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell break_command_1()\cell breakpoint.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell  isdigit()\cell\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function tcatch_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void tcatch_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell catch_command_1()\cell breakpoint.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function tell_breakpoints_objfile_changed_internal()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void tell_breakpoints_objfile_changed_internal ( struct objfile* objfile, int set_pending )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell bundle_basename()\cell utils.c\cell\row
\cell  lbasename(), xstrdup()\cell\cell\row
Called by:\cell tell_breakpoints_objfile_changed()\cell breakpoint.c\cell\row
\cell tell_breakpoints_objfile_removed()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_chain\cell breakpoint.c\cell\row
\cell breakpoint_generation\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function thbreak_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void thbreak_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell break_command_1()\cell breakpoint.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function until_break_command_continuation()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void until_break_command_continuation ( struct continuation_arg* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell do_exec_cleanups()\cell utils.c\cell\row
Used in:\cell until_break_command()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function user_settable_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int user_settable_breakpoint ( const struct breakpoint* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell breakpoint_1()\cell breakpoint.c\cell\row
\cell breakpoint_re_set_all()\cell breakpoint.c\cell\row
\cell breakpoint_update()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function watch_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void watch_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell detect_location_arg()\cell breakpoint.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
Used in:\cell _initialize_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function watch_command_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void watch_command_1 ( const char* arg, int accessflag, int by_location, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell adjust_breakpoint_address()\cell breakpoint.c\cell\row
\cell block_innermost_frame()\cell blockframe.c\cell\row
\cell can_use_hardware_watchpoint()\cell breakpoint.c\cell\row
\cell create_internal_breakpoint()\cell breakpoint.c\cell\row
\cell error()\cell utils.c\cell\row
\cell evaluate_expression()\cell eval.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell get_frame_pc()\cell frame.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
\cell hw_watchpoint_used_count()\cell breakpoint.c\cell\row
\cell init_sal()\cell symtab.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell mention()\cell breakpoint.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell parse_exp_1()\cell parse.c\cell\row
\cell release_value()\cell value.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell set_breakpoint_count()\cell breakpoint.c\cell\row
\cell set_raw_breakpoint()\cell breakpoint.c\cell\row
\cell type_sprint_quoted()\cell typeprint.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_fetch_lazy()\cell valops.c\cell\row
\cell value_free_to_mark()\cell value.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell value_mark()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin___snprintf_chk(), __builtin_object_size(), __inline_memset_chk(), strlen(), strncmp()\cell\cell\row
Called by:\cell awatch_command()\cell breakpoint.c\cell\row
\cell awatch_command_wrapper()\cell breakpoint.c\cell\row
\cell rwatch_command()\cell breakpoint.c\cell\row
\cell rwatch_command_wrapper()\cell breakpoint.c\cell\row
\cell watch_command()\cell breakpoint.c\cell\row
\cell watch_command_wrapper()\cell breakpoint.c\cell\row
Refs Var:\cell breakpoint_count\cell breakpoint.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell innermost_block\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function watchpoint_check()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int watchpoint_check ( void* p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell breakpoint.c\cell\cell\row
Calls: \cell evaluate_expression()\cell eval.c\cell\row
\cell frame_find_by_id()\cell frame.c\cell\row
\cell gdbarch_in_function_epilogue_p()\cell gdbarch.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell read_pc()\cell regcache.c\cell\row
\cell reinit_frame_cache()\cell frame.c\cell\row
\cell release_value()\cell value.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell ui_out_field_int()\cell ui-out.c\cell\row
\cell ui_out_print_annotation_string()\cell ui-out.c\cell\row
\cell ui_out_text()\cell ui-out.c\cell\row
\cell value_free_to_mark()\cell value.c\cell\row
\cell value_mark()\cell value.c\cell\row
\cell watchpoint_equal()\cell breakpoint.c\cell\row
\cell  async_reason_lookup()\cell\cell\row
Used in:\cell bpstat_stop_status()\cell breakpoint.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function watchpoint_equal()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int watchpoint_equal ( struct value* arg1, struct value* arg2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_equal()\cell valarith.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell watchpoint_check()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function wrap_breakpoint_sals_to_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int wrap_breakpoint_sals_to_pc ( char* a )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell breakpoint_sals_to_pc()\cell breakpoint.c\cell\row
Used in:\cell safe_breakpoint_sals_to_pc()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function write_one_breakpoint()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void write_one_breakpoint ( struct breakpoint* b, struct ui_file* stream, struct ui_out* uiout )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell fputc_unfiltered()\cell utils.c\cell\row
\cell fputs_unfiltered()\cell ui-file.c\cell\row
\cell hex_string_custom()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  print_command_lines(), strlen()\cell\cell\row
Called by:\cell save_breakpoints_command()\cell breakpoint.c\cell\row
\intbl0
}
