diff --git a/gdb/src/gdb/breakpoint.c b/gdb/src/gdb/breakpoint.c
index 55508b9..4a8e614 100644
--- a/gdb/src/gdb/breakpoint.c
+++ b/gdb/src/gdb/breakpoint.c
@@ -809,6 +809,51 @@ static int safe_breakpoint_sals_to_pc (struct symtabs_and_lines *sals,
   error (_("No breakpoint number %d."), bnum);
 }
 
+/* Like commands_command, but instead of reading the commands from
+   input stream, takes them from an already parsed command structure.
+
+   This is used by cli-script.c to DTRT with breakpoint commands
+   that are part of if and while bodies.  */
+enum command_control_type
+commands_from_control_command (char *arg, struct command_line *cmd)
+{
+  struct breakpoint *b;
+  char *p;
+  int bnum;
+
+  /* If we allowed this, we would have problems with when to
+     free the storage, if we change the commands currently
+     being read from.  */
+
+  if (executing_breakpoint_commands)
+    error (_("Cannot use the \"commands\" command among a breakpoint's commands."));
+  /* An empty string for the breakpoint number means the last
+     breakpoint, but get_number expects a NULL pointer.  */
+  if (arg && !*arg)
+    p = NULL;
+  else
+    p = arg;
+  bnum = get_number (&p);
+
+  if (p && *p)
+    error (_("Unexpected extra arguments following breakpoint number."));
+
+  ALL_BREAKPOINTS (b)
+    if (b->number == bnum)
+      {
+        free_command_lines (&b->commands);
+        if (cmd->body_count != 1)
+          error (_("Invalid \"commands\" block structure."));
+        /* We need to copy the commands because if/while will free the
+           list after it finishes execution.  */
+        b->commands = copy_command_lines (cmd->body_list[0]);
+        breakpoints_changed ();
+        breakpoint_modify_event (b->number);
+        return simple_control;
+    }
+  error (_("No breakpoint number %d."), bnum);
+}
+
 /* APPLE LOCAL begin breakpoint MI */
 /* find_breakpoint, breakpoint_add_commands and
    breakpoint_print_commands are helper functions for the MI command
diff --git a/gdb/src/gdb/breakpoint.h b/gdb/src/gdb/breakpoint.h
index 01b2bf0..4b8a638 100644
--- a/gdb/src/gdb/breakpoint.h
+++ b/gdb/src/gdb/breakpoint.h
@@ -814,6 +814,10 @@ enum breakpoint_here
 
 extern void enable_watchpoints_after_interactive_call_stop (void);
 
+/* For script interpreters that need to define breakpoint commands
+   after they've already read the commands into a struct command_line.  */
+extern enum command_control_type commands_from_control_command
+  (char *arg, struct command_line *cmd);
 
 extern void clear_breakpoint_hit_counts (void);
 
diff --git a/gdb/src/gdb/cli/cli-script.c b/gdb/src/gdb/cli/cli-script.c
index 25a1679..7b3b8a3 100644
--- a/gdb/src/gdb/cli/cli-script.c
+++ b/gdb/src/gdb/cli/cli-script.c
@@ -31,6 +31,7 @@
 #include "gdb_string.h"
 #include "exceptions.h"
 #include "top.h"
+#include "breakpoint.h"
 #include "event-top.h"  /* for async_request_quit */
 #include "cli/cli-cmds.h"
 #include "cli/cli-decode.h"
@@ -211,6 +212,23 @@ struct user_args
 	  continue;
 	}
 
+      /* A commands command.  Print the breakpoint commands and continue.  */
+      if (list->control_type == commands_control)
+	{
+	  if (*(list->line))
+	    ui_out_field_fmt (uiout, NULL, "commands %s", list->line);
+	  else
+	    ui_out_field_string (uiout, NULL, "commands");
+	  ui_out_text (uiout, "\n");
+	  print_command_lines (uiout, *list->body_list, depth + 1);
+	  if (depth)
+	    ui_out_spaces (uiout, 2 * depth);
+	  ui_out_field_string (uiout, NULL, "end");
+	  ui_out_text (uiout, "\n");
+	  list = list->next;
+	  continue;
+	}
+
       /* ignore illegal command type and try next */
       list = list->next;
     }				/* while (list) */
@@ -484,6 +502,17 @@ enum command_control_type
 
 	break;
       }
+    case commands_control:
+      {
+	/* Breakpoint commands list, record the commands in the breakpoint's
+	   command list and return.  */
+	new_line = insert_args (cmd->line);
+	if (!new_line)
+	  break;
+	make_cleanup (free_current_contents, &new_line);
+	ret = commands_from_control_command (new_line, cmd);
+	break;
+      }
 
     default:
       warning (_("Invalid control type in command structure."));
@@ -830,6 +859,14 @@ enum command_control_type
         first_arg++;
       *command = build_command_line (if_control, first_arg);
     }
+  else if (p1 - p >= 8 && !strncmp (p, "commands", 8))
+    {
+      char *first_arg;
+      first_arg = p + 8;
+      while (first_arg < p1 && isspace (*first_arg))
+        first_arg++;
+      *command = build_command_line (commands_control, first_arg);
+    }
   else if (p1 - p == 10 && !strncmp (p, "loop_break", 10))
     {
       *command = (struct command_line *)
@@ -905,7 +942,8 @@ enum command_control_type
       if (val == end_command)
 	{
 	  if (current_cmd->control_type == while_control
-	      || current_cmd->control_type == if_control)
+	      || current_cmd->control_type == if_control
+	      || current_cmd->control_type == commands_control)
 	    {
 	      /* Success reading an entire control structure.  */
 	      ret = simple_control;
@@ -955,7 +993,8 @@ enum command_control_type
       /* If the latest line is another control structure, then recurse
          on it.  */
       if (next->control_type == while_control
-	  || next->control_type == if_control)
+	  || next->control_type == if_control
+	  || next->control_type == commands_control)
 	{
 	  control_level++;
 	  ret = recurse_read_control_structure (read_next_line_func, next);
@@ -1037,7 +1076,8 @@ struct command_line *
 	}
 
       if (next->control_type == while_control
-	  || next->control_type == if_control)
+	  || next->control_type == if_control
+  	  || next->control_type == commands_control)
 	{
 	  control_level++;
 	  ret = recurse_read_control_structure (read_next_line_func, next);
diff --git a/gdb/src/gdb/defs.h b/gdb/src/gdb/defs.h
index 48986c2..a22e4c3 100644
--- a/gdb/src/gdb/defs.h
+++ b/gdb/src/gdb/defs.h
@@ -716,6 +716,7 @@ enum command_control_type
     continue_control,
     while_control,
     if_control,
+    commands_control,
     invalid_control
   };
 
