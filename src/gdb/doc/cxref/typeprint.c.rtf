{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF typeprint.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File typeprint.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "cp-abi.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "typeprint.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exceptions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <setjmp.h>\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep External Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable objectprint\par}
{\s5\f1\fs20\ql\sb50\sa50 extern int objectprint\par}
\trowd\trgaph120\cellx1440\cellx5220
\intbl\plain
Defined in:\cell cp-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable single_quote_typename\par}
{\s5\f1\fs20\ql\sb50\sa50 static int single_quote_typename\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell get_single_quote_typename()\cell\cell\row
\cell set_single_quote_typename()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_typeprint()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_typeprint ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell typeprint.c\cell\cell\row
Calls: \cell  add_com()\cell\cell\row
Refs Func:\cell ptype_command()\cell typeprint.c\cell\row
\cell whatis_command()\cell typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_single_quote_typename()\par}
{\s5\f1\fs20\ql\sb50\sa50 int get_single_quote_typename ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell typeprint.h\cell\cell\row
Called by:\cell c_print_typename_possibly_quoted()\cell c-typeprint.c\cell\row
Refs Var:\cell single_quote_typename\cell typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function maintenance_print_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 void maintenance_print_type ( const char* the_typename, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbtypes.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell evaluate_type()\cell eval.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell parse_expression()\cell parse.c\cell\row
\cell recursive_dump_type()\cell gdbtypes.c\cell\row
\cell value_type()\cell value.c\cell\row
Used in:\cell _initialize_maint_cmds()\cell maint.c\cell\row
Refs Func:\cell free_current_contents()\cell utils.c\cell\row
Refs Var:\cell innermost_block\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function print_type_scalar()\par}
{\s5\f1\fs20\ql\sb50\sa50 void print_type_scalar ( struct type* type, long val, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell typeprint.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell fputs_filtered()\cell utils.c\cell\row
\cell gdb_flush()\cell ui-file.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell print_longest()\cell valprint.c\cell\row
\cell print_type_scalar()\cell typeprint.c\cell\row
Called by:\cell pascal_type_print_base()\cell p-typeprint.c\cell\row
\cell pascal_val_print()\cell p-valprint.c\cell\row
\cell print_type_scalar()\cell typeprint.c\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_single_quote_typename()\par}
{\s5\f1\fs20\ql\sb50\sa50 int set_single_quote_typename ( int new_value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell typeprint.h\cell\cell\row
Called by:\cell type_sprint_quoted()\cell typeprint.c\cell\row
Refs Var:\cell single_quote_typename\cell typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function type_print()\par}
{\s5\f1\fs20\ql\sb50\sa50 void type_print ( struct type* type, const char* varstring, struct ui_file* stream, int show )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell ada_dump_subexp_body()\cell ada-lang.c\cell\row
\cell ada_lookup_struct_elt_type()\cell ada-lang.c\cell\row
\cell ada_print_subexp()\cell ada-lang.c\cell\row
\cell ada_typedef_print()\cell ada-typeprint.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell ada_value_print()\cell ada-valprint.c\cell\row
\cell c_type_print_base()\cell c-typeprint.c\cell\row
\cell c_val_print()\cell c-valprint.c\cell\row
\cell c_value_print()\cell c-valprint.c\cell\row
\cell cp_print_class_method()\cell cp-valprint.c\cell\row
\cell cp_type_print_method_args()\cell c-typeprint.c\cell\row
\cell dump_subexp_body_standard()\cell expprint.c\cell\row
\cell f_val_print()\cell f-valprint.c\cell\row
\cell java_type_print_base()\cell jv-typeprint.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell pascal_object_print_class_method()\cell p-valprint.c\cell\row
\cell pascal_type_print_base()\cell p-typeprint.c\cell\row
\cell pascal_val_print()\cell p-valprint.c\cell\row
\cell pascal_value_print()\cell p-valprint.c\cell\row
\cell print_subexp_standard()\cell expprint.c\cell\row
\cell print_symbol_info()\cell symtab.c\cell\row
\cell ptype_command()\cell typeprint.c\cell\row
\cell type_sprint()\cell typeprint.c\cell\row
\cell typedef_print()\cell typeprint.c\cell\row
\cell whatis_exp()\cell typeprint.c\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function type_sprint()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* type_sprint ( struct type* type, const char* varstring, int show )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell make_cleanup_ui_file_delete()\cell utils.c\cell\row
\cell mem_fileopen()\cell ui-file.c\cell\row
\cell type_print()\cell typeprint.c\cell\row
\cell ui_file_xstrdup()\cell ui-file.c\cell\row
Called by:\cell lookup_struct_elt_type()\cell gdbtypes.c\cell\row
\cell type_sprint_quoted()\cell typeprint.c\cell\row
\cell varobj_get_dynamic_type()\cell varobj.c\cell\row
\cell varobj_get_type_internal()\cell varobj.c\cell\row
\cell varobj_lookup_struct_elt_type_by_index()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function type_sprint_quoted()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* type_sprint_quoted ( struct type* type, const char* varstring, int show )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell set_single_quote_typename()\cell typeprint.c\cell\row
\cell type_sprint()\cell typeprint.c\cell\row
\cell  exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp(), throw_exception()\cell\cell\row
Called by:\cell watch_command_1()\cell breakpoint.c\cell\row
Refs Var:\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function typedef_print()\par}
{\s5\f1\fs20\ql\sb50\sa50 void typedef_print ( struct type* type, struct symbol* newsym, struct ui_file* stream )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell fprintf_filtered()\cell utils.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell type_print()\cell typeprint.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell print_symbol_info()\cell symtab.c\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\cell demangle\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ptype_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void ptype_command ( const char* the_typename, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell typeprint.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell parse_expression()\cell parse.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell ptype_eval()\cell typeprint.c\cell\row
\cell type_print()\cell typeprint.c\cell\row
\cell whatis_exp()\cell typeprint.c\cell\row
Used in:\cell _initialize_typeprint()\cell typeprint.c\cell\row
Refs Func:\cell free_current_contents()\cell utils.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\cell innermost_block\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function ptype_eval()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* ptype_eval ( struct expression* exp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell typeprint.c\cell\cell\row
Called by:\cell ptype_command()\cell typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function whatis_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void whatis_command ( const char* exp, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell typeprint.c\cell\cell\row
Calls: \cell whatis_exp()\cell typeprint.c\cell\row
Used in:\cell _initialize_typeprint()\cell typeprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function whatis_exp()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void whatis_exp ( const char* exp, int show )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell typeprint.c\cell\cell\row
Calls: \cell access_value_history()\cell value.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell evaluate_type()\cell eval.c\cell\row
\cell get_closure_dynamic_type()\cell gdbtypes.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell lookup_reference_type()\cell gdbtypes.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell parse_expression()\cell parse.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell type_print()\cell typeprint.c\cell\row
\cell value_rtti_target_type()\cell valops.c\cell\row
\cell value_rtti_type()\cell cp-abi.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ptype_command()\cell typeprint.c\cell\row
\cell whatis_command()\cell typeprint.c\cell\row
Refs Func:\cell free_current_contents()\cell utils.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\cell innermost_block\cell parse.c\cell\row
\cell objectprint\cell cp-valprint.c\cell\row
\intbl0
}
