{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF value.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File value.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "scm-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "scm-tags.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/demangle.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "regcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define VALUE_HISTORY_CHUNK 60\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct value\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct value}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum lval_type lval;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int modifiable;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 union}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR address;}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 struct internalvar* internalvar;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 location;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int bitsize;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int bitpos;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct frame_id frame_id;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct type* type;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct type* enclosing_type;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int embedded_offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int pointed_to_offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct value* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 short regnum;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char lazy;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum opt_state optimized_out;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int var_status;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 union}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 gdb_byte contents[1];}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 DOUBLEST force_doublest_align;}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 long force_longest_align;}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR force_core_addr_align;}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 void* force_pointer_align;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 aligner;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct cached_value\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct cached_value}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct type* type;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct value val;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int bound;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned int generation;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct value_history_chunk\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct value_history_chunk}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct value_history_chunk* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct value* values[60];}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep External Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable symbol_generation\par}
{\s5\f1\fs20\ql\sb50\sa50 extern unsigned int symbol_generation\par}
\trowd\trgaph120\cellx1440\cellx5220
\intbl\plain
Defined in:\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable value_history_chain\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value_history_chunk* value_history_chain\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell access_value_history()\cell\cell\row
\cell clear_value_history()\cell\cell\row
\cell record_latest_value()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable value_history_count\par}
{\s5\f1\fs20\ql\sb50\sa50 static int value_history_count\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell access_value_history()\cell\cell\row
\cell clear_value_history()\cell\cell\row
\cell record_latest_value()\cell\cell\row
\cell show_values()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable all_values\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* all_values\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell allocate_value()\cell\cell\row
\cell free_all_values()\cell\cell\row
\cell release_value()\cell\cell\row
\cell value_change_enclosing_type()\cell\cell\row
\cell value_free_to_mark()\cell\cell\row
\cell value_mark()\cell\cell\row
\cell value_release_to_mark()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable internalvars\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct internalvar* internalvars\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell clear_internalvars()\cell\cell\row
\cell lookup_internalvar()\cell\cell\row
\cell show_convenience()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_values()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_values ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.c\cell\cell\row
Calls: \cell  add_cmd()\cell\cell\row
Refs Func:\cell show_convenience()\cell value.c\cell\row
\cell show_values()\cell value.c\cell\row
Refs Var:\cell  showlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function access_value_history()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* access_value_history ( int num )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell value_copy()\cell value.c\cell\row
Called by:\cell decode_dollar()\cell linespec.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell print_command_1()\cell printcmd.c\cell\row
\cell show_values()\cell value.c\cell\row
\cell whatis_exp()\cell typeprint.c\cell\row
Refs Var:\cell value_history_chain\cell value.c\cell\row
\cell value_history_count\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function allocate_repeat_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* allocate_repeat_value ( struct type* type, int count )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell create_array_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell value_repeat()\cell valops.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell current_language\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function allocate_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* allocate_value ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_frame_id_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell deprecated_value_regnum_hack()\cell value.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell xzalloc()\cell utils.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_value_binop()\cell ada-lang.c\cell\row
\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell allocate_repeat_value()\cell value.c\cell\row
\cell cast_into_complex()\cell valops.c\cell\row
\cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
\cell convert_actual()\cell ada-lang.c\cell\row
\cell dwarf2_evaluate_loc_desc()\cell dwarf2loc.c\cell\row
\cell empty_array()\cell ada-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell hpacc_virtual_fn_field()\cell hpacc-abi.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell loclist_read_variable()\cell dwarf2loc.c\cell\row
\cell lookup_cached_function()\cell value.c\cell\row
\cell lookup_internalvar()\cell value.c\cell\row
\cell make_array_descriptor()\cell ada-lang.c\cell\row
\cell print_return_value()\cell infcmd.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell search_struct_field()\cell valops.c\cell\row
\cell set_traceframe_context()\cell tracepoint.c\cell\row
\cell value_array()\cell valops.c\cell\row
\cell value_at()\cell valops.c\cell\row
\cell value_at_lazy()\cell valops.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_bitstring()\cell valops.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_fn_field()\cell value.c\cell\row
\cell value_from_contents_and_address()\cell ada-lang.c\cell\row
\cell value_from_double()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
\cell value_from_register()\cell findvar.c\cell\row
\cell value_from_string()\cell value.c\cell\row
\cell value_literal_complex()\cell valops.c\cell\row
\cell value_maybe_namespace_elt()\cell valops.c\cell\row
\cell value_of_builtin_frame_fp_reg()\cell std-regs.c\cell\row
\cell value_of_builtin_frame_pc_reg()\cell std-regs.c\cell\row
\cell value_of_builtin_frame_reg()\cell std-regs.c\cell\row
\cell value_of_register()\cell findvar.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
\cell value_slice()\cell valops.c\cell\row
\cell value_string()\cell valops.c\cell\row
\cell value_subscripted_rvalue()\cell valarith.c\cell\row
\cell value_zero()\cell valops.c\cell\row
\cell x_command()\cell printcmd.c\cell\row
Refs Var:\cell all_values\cell value.c\cell\row
\cell null_frame_id\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function clear_internalvars()\par}
{\s5\f1\fs20\ql\sb50\sa50 void clear_internalvars ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
Called by:\cell clear_symtab_users()\cell symfile.c\cell\row
Refs Var:\cell internalvars\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function clear_value_history()\par}
{\s5\f1\fs20\ql\sb50\sa50 void clear_value_history ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
Called by:\cell clear_symtab_users()\cell symfile.c\cell\row
Refs Var:\cell value_history_chain\cell value.c\cell\row
\cell value_history_count\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function coerce_array()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* coerce_array ( struct value* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell coerce_ref()\cell value.c\cell\row
\cell value_coerce_array()\cell valops.c\cell\row
\cell value_coerce_function()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell check_field()\cell valops.c\cell\row
\cell coerce_number()\cell value.c\cell\row
\cell value_add()\cell valarith.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_equal()\cell valarith.c\cell\row
\cell value_find_oload_method_list()\cell valops.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_less()\cell valarith.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
\cell value_sub()\cell valarith.c\cell\row
\cell varobj_value_struct_elt_by_index()\cell varobj.c\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function coerce_enum()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* coerce_enum ( struct value* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell coerce_number()\cell value.c\cell\row
\cell value_x_binop()\cell valarith.c\cell\row
\cell value_x_unop()\cell valarith.c\cell\row
Refs Var:\cell builtin_type_unsigned_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function coerce_number()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* coerce_number ( struct value* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell coerce_array()\cell value.c\cell\row
\cell coerce_enum()\cell value.c\cell\row
Called by:\cell value_logical_not()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function coerce_ref()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* coerce_ref ( struct value* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell unpack_pointer()\cell value.c\cell\row
\cell value_at_lazy()\cell valops.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_coerce_ref()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell ada_value_binop()\cell ada-lang.c\cell\row
\cell ada_value_struct_elt()\cell ada-lang.c\cell\row
\cell c_value_of_child()\cell varobj.c\cell\row
\cell coerce_array()\cell value.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_complement()\cell valarith.c\cell\row
\cell value_neg()\cell valarith.c\cell\row
\cell value_pos()\cell valarith.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\cell value_x_binop()\cell valarith.c\cell\row
\cell value_x_unop()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function create_cached_function()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct cached_value* create_cached_function ( const char* name, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), xstrdup()\cell\cell\row
Called by:\cell allocate_space_in_inferior_malloc()\cell valops.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell lookup_child_selector_nocache()\cell objc-lang.c\cell\row
\cell lookup_objc_class()\cell objc-lang.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell new_objc_runtime_class_getClass()\cell objc-lang.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell new_objc_runtime_get_classname()\cell objc-lang.c\cell\row
\cell objc_runtime_lock_taken_p()\cell objc-lang.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_set_value_modifiable()\par}
{\s5\f1\fs20\ql\sb50\sa50 void deprecated_set_value_modifiable ( struct value* value, int modifiable )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell set_traceframe_context()\cell tracepoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_set_value_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 void deprecated_set_value_type ( struct value* value, struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell ada_coerce_to_simple_array_type()\cell ada-lang.c\cell\row
\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell c_value_print()\cell c-valprint.c\cell\row
\cell coerce_for_assign()\cell ada-lang.c\cell\row
\cell cp_print_hpacc_virtual_table_entries()\cell cp-valprint.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell gnuv2_virtual_fn_field()\cell gnu-v2-abi.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell hpacc_virtual_fn_field()\cell hpacc-abi.c\cell\row
\cell printf_command()\cell printcmd.c\cell\row
\cell set_traceframe_context()\cell tracepoint.c\cell\row
\cell type_from_class()\cell jv-lang.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_arg_coerce()\cell infcall.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_full_object()\cell valops.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell varobj_fixup_value()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_value_address_hack()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR* deprecated_value_address_hack ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_to_fixed_value()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell ada_value_print()\cell ada-valprint.c\cell\row
\cell allocate_value()\cell value.c\cell\row
\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell c_value_print()\cell c-valprint.c\cell\row
\cell can_use_hardware_watchpoint()\cell breakpoint.c\cell\row
\cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
\cell common_val_print()\cell valprint.c\cell\row
\cell cp_print_static_field()\cell cp-valprint.c\cell\row
\cell desc_bounds()\cell ada-lang.c\cell\row
\cell dwarf2_evaluate_loc_desc()\cell dwarf2loc.c\cell\row
\cell encode_actions()\cell tracepoint.c\cell\row
\cell ensure_lval()\cell ada-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell find_function_addr()\cell infcall.c\cell\row
\cell find_method_list()\cell valops.c\cell\row
\cell get_java_utf8_name()\cell jv-lang.c\cell\row
\cell gnuv2_value_rtti_type()\cell gnu-v2-abi.c\cell\row
\cell gnuv3_rtti_type()\cell gnu-v3-abi.c\cell\row
\cell hpacc_virtual_fn_field()\cell hpacc-abi.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell java_link_class_type()\cell jv-lang.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell locate_var_value()\cell findvar.c\cell\row
\cell make_array_descriptor()\cell ada-lang.c\cell\row
\cell pascal_object_print_static_field()\cell p-valprint.c\cell\row
\cell print_formatted()\cell printcmd.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\cell search_struct_field()\cell valops.c\cell\row
\cell search_struct_method()\cell valops.c\cell\row
\cell thin_data_pntr()\cell ada-lang.c\cell\row
\cell type_from_class()\cell jv-lang.c\cell\row
\cell unwrap_value()\cell ada-lang.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_at()\cell valops.c\cell\row
\cell value_at_lazy()\cell valops.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_coerce_array()\cell valops.c\cell\row
\cell value_coerce_function()\cell valops.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_fetch_lazy()\cell valops.c\cell\row
\cell value_fn_field()\cell value.c\cell\row
\cell value_from_contents_and_address()\cell ada-lang.c\cell\row
\cell value_from_register()\cell findvar.c\cell\row
\cell value_full_object()\cell valops.c\cell\row
\cell value_of_register()\cell findvar.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
\cell value_repeat()\cell valops.c\cell\row
\cell value_slice()\cell valops.c\cell\row
\cell value_static_field()\cell value.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\cell value_subscripted_rvalue()\cell valarith.c\cell\row
\cell x_command()\cell printcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_value_frame_id_hack()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_id* deprecated_value_frame_id_hack ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell allocate_value()\cell value.c\cell\row
\cell search_struct_field()\cell valops.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_from_register()\cell findvar.c\cell\row
\cell value_of_register()\cell findvar.c\cell\row
\cell value_of_user_reg()\cell user-regs.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
\cell value_slice()\cell valops.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\cell value_subscripted_rvalue()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_value_internalvar_hack()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct internalvar** deprecated_value_internalvar_hack ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell value_assign()\cell valops.c\cell\row
\cell value_of_internalvar()\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_value_lval_hack()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum lval_type* deprecated_value_lval_hack ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell allocate_value()\cell value.c\cell\row
\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell can_use_hardware_watchpoint()\cell breakpoint.c\cell\row
\cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
\cell convert_actual()\cell ada-lang.c\cell\row
\cell dwarf2_evaluate_loc_desc()\cell dwarf2loc.c\cell\row
\cell ensure_lval()\cell ada-lang.c\cell\row
\cell evaluate_subexp_for_address()\cell eval.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell locate_var_value()\cell findvar.c\cell\row
\cell loclist_read_variable()\cell dwarf2loc.c\cell\row
\cell print_formatted()\cell printcmd.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\cell search_struct_field()\cell valops.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_at()\cell valops.c\cell\row
\cell value_at_lazy()\cell valops.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_coerce_array()\cell valops.c\cell\row
\cell value_coerce_function()\cell valops.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_from_contents_and_address()\cell ada-lang.c\cell\row
\cell value_from_register()\cell findvar.c\cell\row
\cell value_full_object()\cell valops.c\cell\row
\cell value_of_builtin_frame_reg()\cell std-regs.c\cell\row
\cell value_of_internalvar()\cell value.c\cell\row
\cell value_of_register()\cell findvar.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
\cell value_repeat()\cell valops.c\cell\row
\cell value_slice()\cell valops.c\cell\row
\cell value_static_field()\cell value.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\cell value_subscript_packed()\cell ada-lang.c\cell\row
\cell value_subscripted_rvalue()\cell valarith.c\cell\row
\cell value_x_binop()\cell valarith.c\cell\row
\cell value_x_unop()\cell valarith.c\cell\row
\cell value_zero()\cell valops.c\cell\row
\cell x_command()\cell printcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_value_modifiable()\par}
{\s5\f1\fs20\ql\sb50\sa50 int deprecated_value_modifiable ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell can_use_hardware_watchpoint()\cell breakpoint.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_value_regnum_hack()\par}
{\s5\f1\fs20\ql\sb50\sa50 short* deprecated_value_regnum_hack ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell allocate_value()\cell value.c\cell\row
\cell locate_var_value()\cell findvar.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_from_register()\cell findvar.c\cell\row
\cell value_of_register()\cell findvar.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
\cell value_subscripted_rvalue()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function free_all_values()\par}
{\s5\f1\fs20\ql\sb50\sa50 void free_all_values ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell value_free()\cell value.c\cell\row
Called by:\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell execute_command()\cell top.c\cell\row
Refs Var:\cell all_values\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function generic_use_struct_convention()\par}
{\s5\f1\fs20\ql\sb50\sa50 int generic_use_struct_convention ( int gcc_p, struct type* value_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function internalvar_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* internalvar_name ( struct internalvar* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell print_subexp_standard()\cell expprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function lookup_cached_function()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* lookup_cached_function ( struct cached_value* cval )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_function_in_inferior()\cell valops.c\cell\row
Called by:\cell allocate_space_in_inferior_malloc()\cell valops.c\cell\row
\cell do_end_debugger_mode()\cell objc-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell lookup_child_selector_nocache()\cell objc-lang.c\cell\row
\cell lookup_objc_class()\cell objc-lang.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell new_objc_runtime_class_getClass()\cell objc-lang.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell new_objc_runtime_get_classname()\cell objc-lang.c\cell\row
\cell objc_runtime_lock_taken_p()\cell objc-lang.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell symbol_generation\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function lookup_internalvar()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct internalvar* lookup_internalvar ( const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell release_value()\cell value.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  concat(), strcmp()\cell\cell\row
Called by:\cell _initialize_tracepoint()\cell tracepoint.c\cell\row
\cell captured_main()\cell main.c\cell\row
\cell decode_dollar()\cell linespec.c\cell\row
\cell forward_search_command()\cell source.c\cell\row
\cell get_number_trailer()\cell breakpoint.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell reverse_search_command()\cell source.c\cell\row
\cell set_breakpoint_count()\cell breakpoint.c\cell\row
\cell set_input_radix_1()\cell valprint.c\cell\row
\cell set_next_address()\cell printcmd.c\cell\row
\cell set_output_radix_1()\cell valprint.c\cell\row
\cell set_traceframe_context()\cell tracepoint.c\cell\row
\cell set_traceframe_num()\cell tracepoint.c\cell\row
\cell set_tracepoint_count()\cell tracepoint.c\cell\row
\cell set_tracepoint_num()\cell tracepoint.c\cell\row
\cell write_dollar_variable()\cell parse.c\cell\row
\cell x_command()\cell printcmd.c\cell\row
Refs Var:\cell builtin_type_void\cell gdbtypes.c\cell\row
\cell internalvars\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function modify_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 void modify_field ( gdb_byte* addr, long fieldval, int bitpos, int bitsize )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell store_unsigned_integer()\cell findvar.c\cell\row
\cell warning()\cell utils.c\cell\row
Called by:\cell evaluate_struct_tuple()\cell eval.c\cell\row
\cell modify_general_field()\cell ada-lang.c\cell\row
\cell set_internalvar_component()\cell value.c\cell\row
\cell value_assign()\cell valops.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function pack_long()\par}
{\s5\f1\fs20\ql\sb50\sa50 void pack_long ( gdb_byte* buf, struct type* type, long num )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell store_signed_integer()\cell findvar.c\cell\row
\cell store_typed_address()\cell findvar.c\cell\row
Called by:\cell dwarf2_frame_prev_register()\cell dwarf2-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function record_latest_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 int record_latest_value ( struct value* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell release_value()\cell value.c\cell\row
\cell value_fetch_lazy()\cell valops.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell invoke_block_command()\cell printcmd.c\cell\row
\cell print_command_1()\cell printcmd.c\cell\row
\cell print_return_value()\cell infcmd.c\cell\row
Refs Var:\cell value_history_chain\cell value.c\cell\row
\cell value_history_count\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function release_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 void release_value ( struct value* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell bpstat_copy()\cell breakpoint.c\cell\row
\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell c_value_of_child()\cell varobj.c\cell\row
\cell c_value_of_root()\cell varobj.c\cell\row
\cell cplus_value_of_child()\cell varobj.c\cell\row
\cell do_enable_breakpoint()\cell breakpoint.c\cell\row
\cell do_examine()\cell printcmd.c\cell\row
\cell insert_breakpoints()\cell breakpoint.c\cell\row
\cell lookup_internalvar()\cell value.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell new_objc_runtime_get_classname()\cell objc-lang.c\cell\row
\cell record_latest_value()\cell value.c\cell\row
\cell set_internalvar()\cell value.c\cell\row
\cell value_of_child()\cell varobj.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
\cell varobj_set_value()\cell varobj.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
\cell watchpoint_check()\cell breakpoint.c\cell\row
Refs Var:\cell all_values\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_internalvar()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_internalvar ( struct internalvar* var, struct value* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell release_value()\cell value.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_fetch_lazy()\cell valops.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell _initialize_tracepoint()\cell tracepoint.c\cell\row
\cell captured_main()\cell main.c\cell\row
\cell forward_search_command()\cell source.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell reverse_search_command()\cell source.c\cell\row
\cell set_breakpoint_count()\cell breakpoint.c\cell\row
\cell set_input_radix_1()\cell valprint.c\cell\row
\cell set_next_address()\cell printcmd.c\cell\row
\cell set_output_radix_1()\cell valprint.c\cell\row
\cell set_traceframe_context()\cell tracepoint.c\cell\row
\cell set_traceframe_num()\cell tracepoint.c\cell\row
\cell set_tracepoint_count()\cell tracepoint.c\cell\row
\cell set_tracepoint_num()\cell tracepoint.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell x_command()\cell printcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_internalvar_component()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_internalvar_component ( struct internalvar* var, int offset, int bitpos, int bitsize, struct value* newval )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell modify_field()\cell value.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_contents_writeable()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell value_assign()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_value_bitpos()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_value_bitpos ( struct value* value, int bit )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_value_bitsize()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_value_bitsize ( struct value* value, int bit )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_value_embedded_offset()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_value_embedded_offset ( struct value* value, int val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell value_assign()\cell valops.c\cell\row
\cell value_full_object()\cell valops.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_value_lazy()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_value_lazy ( struct value* value, int val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
\cell dwarf2_evaluate_loc_desc()\cell dwarf2loc.c\cell\row
\cell gnuv2_virtual_fn_field()\cell gnu-v2-abi.c\cell\row
\cell java_link_class_type()\cell jv-lang.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell search_struct_field()\cell valops.c\cell\row
\cell value_at_lazy()\cell valops.c\cell\row
\cell value_fetch_lazy()\cell valops.c\cell\row
\cell value_from_contents_and_address()\cell ada-lang.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
\cell value_slice()\cell valops.c\cell\row
\cell value_subscripted_rvalue()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_value_offset()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_value_offset ( struct value* value, int offset )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell gnuv2_virtual_fn_field()\cell gnu-v2-abi.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell search_struct_field()\cell valops.c\cell\row
\cell value_from_register()\cell findvar.c\cell\row
\cell value_slice()\cell valops.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\cell value_subscripted_rvalue()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_value_optimized_out()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_value_optimized_out ( struct value* value, enum opt_state val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell dwarf2_evaluate_loc_desc()\cell dwarf2loc.c\cell\row
\cell loclist_read_variable()\cell dwarf2loc.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell value_from_register()\cell findvar.c\cell\row
\cell value_of_register()\cell findvar.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_value_pointed_to_offset()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_value_pointed_to_offset ( struct value* value, int val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell value_addr()\cell valops.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_var_status()\par}
{\s5\f1\fs20\ql\sb50\sa50 void set_var_status ( struct value* val, int status )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell dwarf2_evaluate_loc_desc()\cell dwarf2loc.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function unpack_double()\par}
{\s5\f1\fs20\ql\sb50\sa50 DOUBLEST unpack_double ( struct type* type, const gdb_byte* valaddr, int* invp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell extract_typed_floating()\cell doublest.c\cell\row
\cell floatformat_from_type()\cell doublest.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell unpack_long()\cell value.c\cell\row
\cell  floatformat_is_valid()\cell\cell\row
Called by:\cell print_floating()\cell valprint.c\cell\row
\cell print_floating_in_hex()\cell valprint.c\cell\row
\cell value_as_double()\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function unpack_field_as_long()\par}
{\s5\f1\fs20\ql\sb50\sa50 long unpack_field_as_long ( struct type* type, const gdb_byte* valaddr, int fieldno )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell gdbarch_byte_order()\cell gdbarch.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
Called by:\cell cp_print_value_fields()\cell cp-valprint.c\cell\row
\cell java_print_value_fields()\cell jv-valprint.c\cell\row
\cell pascal_object_print_value_fields()\cell p-valprint.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function unpack_long()\par}
{\s5\f1\fs20\ql\sb50\sa50 long unpack_long ( struct type* type, const gdb_byte* valaddr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell extract_signed_integer_with_byte_order()\cell findvar.c\cell\row
\cell extract_typed_address()\cell findvar.c\cell\row
\cell extract_typed_floating()\cell doublest.c\cell\row
\cell extract_unsigned_integer_with_byte_order()\cell findvar.c\cell\row
\cell is_scmvalue_type()\cell scm-lang.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell scm_unpack()\cell scm-lang.c\cell\row
\cell unpack_long()\cell value.c\cell\row
Called by:\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell ada_which_variant_applies()\cell ada-lang.c\cell\row
\cell c_val_print()\cell c-valprint.c\cell\row
\cell cp_print_class_member()\cell cp-valprint.c\cell\row
\cell f_val_print()\cell f-valprint.c\cell\row
\cell java_val_print()\cell jv-valprint.c\cell\row
\cell pascal_object_print_class_member()\cell p-valprint.c\cell\row
\cell pascal_val_print()\cell p-valprint.c\cell\row
\cell print_ostype()\cell valprint.c\cell\row
\cell print_scalar_formatted()\cell printcmd.c\cell\row
\cell scm_unpack()\cell scm-lang.c\cell\row
\cell unpack_double()\cell value.c\cell\row
\cell unpack_long()\cell value.c\cell\row
\cell unpack_pointer()\cell value.c\cell\row
\cell val_print_type_code_int()\cell valprint.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_bit_index()\cell valarith.c\cell\row
\cell value_concat()\cell valarith.c\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function unpack_pointer()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR unpack_pointer ( struct type* type, const gdb_byte* valaddr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell unpack_long()\cell value.c\cell\row
Called by:\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell ada_value_struct_elt()\cell ada-lang.c\cell\row
\cell c_val_print()\cell c-valprint.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell cp_print_class_method()\cell cp-valprint.c\cell\row
\cell f_val_print()\cell f-valprint.c\cell\row
\cell gnuv2_baseclass_offset()\cell gnu-v2-abi.c\cell\row
\cell java_val_print()\cell jv-valprint.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell pascal_object_print_class_method()\cell p-valprint.c\cell\row
\cell pascal_val_print()\cell p-valprint.c\cell\row
\cell print_scalar_formatted()\cell printcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function using_struct_return()\par}
{\s5\f1\fs20\ql\sb50\sa50 int using_struct_return ( struct type* value_type, int gcc_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell gdbarch_return_value()\cell gdbarch.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell finish_command()\cell infcmd.c\cell\row
\cell finish_command_continuation()\cell infcmd.c\cell\row
\cell finish_inlined_subroutine_command()\cell infcmd.c\cell\row
\cell finish_inlined_subroutine_command_continuation()\cell infcmd.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell return_command()\cell stack.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_as_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR value_as_address ( struct value* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell coerce_array()\cell value.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell gdbarch_integer_to_address()\cell gdbarch.c\cell\row
\cell gdbarch_integer_to_address_p()\cell gdbarch.c\cell\row
\cell unpack_long()\cell value.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_tag_name_1()\cell ada-lang.c\cell\row
\cell ada_value_slice_ptr()\cell ada-lang.c\cell\row
\cell ada_value_struct_elt()\cell ada-lang.c\cell\row
\cell debug_load_solib()\cell target/target.c\cell\row
\cell do_one_display()\cell printcmd.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell find_function_addr()\cell infcall.c\cell\row
\cell get_class_address_from_object()\cell objc-lang.c\cell\row
\cell get_closure_implementation_fn()\cell gdbtypes.c\cell\row
\cell gnuv2_value_rtti_type()\cell gnu-v2-abi.c\cell\row
\cell gnuv3_baseclass_offset()\cell gnu-v3-abi.c\cell\row
\cell gnuv3_rtti_type()\cell gnu-v3-abi.c\cell\row
\cell gnuv3_virtual_fn_field()\cell gnu-v3-abi.c\cell\row
\cell java_class_from_object()\cell jv-lang.c\cell\row
\cell java_class_is_primitive()\cell jv-lang.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell lookup_objc_class()\cell objc-lang.c\cell\row
\cell new_objc_runtime_class_getClass()\cell objc-lang.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell new_objc_runtime_get_classname()\cell objc-lang.c\cell\row
\cell parse_and_eval_address()\cell eval.c\cell\row
\cell parse_and_eval_address_1()\cell eval.c\cell\row
\cell parse_frame_specification_1()\cell stack.c\cell\row
\cell print_object_command()\cell objc-lang.c\cell\row
\cell printf_command()\cell printcmd.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell value_add()\cell valarith.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_equal()\cell valarith.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_less()\cell valarith.c\cell\row
\cell value_objc_target_type()\cell objc-lang.c\cell\row
\cell value_sub()\cell valarith.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
\cell x_command()\cell printcmd.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_as_double()\par}
{\s5\f1\fs20\ql\sb50\sa50 DOUBLEST value_as_double ( struct value* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell unpack_double()\cell value.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell cast_to_fixed()\cell ada-lang.c\cell\row
\cell printf_command()\cell printcmd.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_equal()\cell valarith.c\cell\row
\cell value_less()\cell valarith.c\cell\row
\cell value_logical_not()\cell valarith.c\cell\row
\cell value_neg()\cell valarith.c\cell\row
\cell value_pos()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_as_long()\par}
{\s5\f1\fs20\ql\sb50\sa50 long value_as_long ( struct value* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell coerce_array()\cell value.c\cell\row
\cell unpack_long()\cell value.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell ada_array_length()\cell ada-lang.c\cell\row
\cell ada_type_of_array()\cell ada-lang.c\cell\row
\cell ada_value_binop()\cell ada-lang.c\cell\row
\cell allocate_space_in_inferior_malloc()\cell valops.c\cell\row
\cell cast_from_fixed_to_double()\cell ada-lang.c\cell\row
\cell cast_to_fixed()\cell ada-lang.c\cell\row
\cell decode_dollar()\cell linespec.c\cell\row
\cell desc_bounds()\cell ada-lang.c\cell\row
\cell do_captured_thread_select()\cell thread.c\cell\row
\cell evaluate_struct_tuple()\cell eval.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\cell find_function_addr()\cell infcall.c\cell\row
\cell find_rt_vbase_offset()\cell valops.c\cell\row
\cell gen_expr()\cell ax-gdb.c\cell\row
\cell gen_repeat()\cell ax-gdb.c\cell\row
\cell get_int_var_value()\cell ada-lang.c\cell\row
\cell get_java_utf8_name()\cell jv-lang.c\cell\row
\cell get_number_trailer()\cell breakpoint.c\cell\row
\cell gnuv2_virtual_fn_field()\cell gnu-v2-abi.c\cell\row
\cell gnuv3_baseclass_offset()\cell gnu-v3-abi.c\cell\row
\cell gnuv3_rtti_type()\cell gnu-v3-abi.c\cell\row
\cell hpacc_value_rtti_type()\cell hpacc-abi.c\cell\row
\cell ignore_command()\cell breakpoint.c\cell\row
\cell init_array_element()\cell eval.c\cell\row
\cell java_link_class_type()\cell jv-lang.c\cell\row
\cell lookup_child_selector_nocache()\cell objc-lang.c\cell\row
\cell make_array_descriptor()\cell ada-lang.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell objc_runtime_lock_taken_p()\cell objc-lang.c\cell\row
\cell parse_and_eval_long()\cell eval.c\cell\row
\cell parse_frame_specification_1()\cell stack.c\cell\row
\cell pos_atr()\cell ada-lang.c\cell\row
\cell print_single_dwarf_location()\cell dwarf2loc.c\cell\row
\cell printf_command()\cell printcmd.c\cell\row
\cell quit_force()\cell top.c\cell\row
\cell scan_discrim_bound()\cell ada-lang.c\cell\row
\cell scm_evaluate_string()\cell scm-lang.c\cell\row
\cell scm_lookup_name()\cell scm-lang.c\cell\row
\cell set_internalvar_component()\cell value.c\cell\row
\cell type_from_class()\cell jv-lang.c\cell\row
\cell value_add()\cell valarith.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_complement()\cell valarith.c\cell\row
\cell value_concat()\cell valarith.c\cell\row
\cell value_equal()\cell valarith.c\cell\row
\cell value_in()\cell valarith.c\cell\row
\cell value_less()\cell valarith.c\cell\row
\cell value_neg()\cell valarith.c\cell\row
\cell value_pos()\cell valarith.c\cell\row
\cell value_sub()\cell valarith.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\cell value_subscript_packed()\cell ada-lang.c\cell\row
\cell value_subscripted_rvalue()\cell valarith.c\cell\row
\cell value_val_atr()\cell ada-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_bitpos()\par}
{\s5\f1\fs20\ql\sb50\sa50 int value_bitpos ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_bitsize()\par}
{\s5\f1\fs20\ql\sb50\sa50 int value_bitsize ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_change_enclosing_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_change_enclosing_type ( struct value* val, struct type* new_encl_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_enclosing_type()\cell value.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
Called by:\cell value_addr()\cell valops.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_full_object()\cell valops.c\cell\row
\cell value_ind()\cell valops.c\cell\row
Refs Var:\cell all_values\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_contents()\par}
{\s5\f1\fs20\ql\sb50\sa50 const gdb_byte* value_contents ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell value_contents_writeable()\cell value.c\cell\row
Called by:\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell ada_value_equal()\cell ada-lang.c\cell\row
\cell ada_value_primitive_field()\cell ada-lang.c\cell\row
\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell ada_value_print()\cell ada-valprint.c\cell\row
\cell ada_value_struct_elt()\cell ada-lang.c\cell\row
\cell c_val_print()\cell c-valprint.c\cell\row
\cell cast_into_complex()\cell valops.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
\cell convert_actual()\cell ada-lang.c\cell\row
\cell evaluate_struct_tuple()\cell eval.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell find_method_list()\cell valops.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell hpacc_value_rtti_type()\cell hpacc-abi.c\cell\row
\cell hpacc_virtual_fn_field()\cell hpacc-abi.c\cell\row
\cell init_array_element()\cell eval.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell pascal_object_print_static_field()\cell p-valprint.c\cell\row
\cell print_field_values()\cell ada-valprint.c\cell\row
\cell print_formatted()\cell printcmd.c\cell\row
\cell return_command()\cell stack.c\cell\row
\cell scm_lreadr()\cell scm-exp.c\cell\row
\cell search_struct_field()\cell valops.c\cell\row
\cell search_struct_method()\cell valops.c\cell\row
\cell set_internalvar_component()\cell value.c\cell\row
\cell to_fixed_variant_branch_type()\cell ada-lang.c\cell\row
\cell val_print_packed_array_elements()\cell ada-valprint.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_as_double()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_concat()\cell valarith.c\cell\row
\cell value_contents_equal()\cell value.c\cell\row
\cell value_equal()\cell valarith.c\cell\row
\cell value_in()\cell valarith.c\cell\row
\cell value_literal_complex()\cell valops.c\cell\row
\cell value_logical_not()\cell valarith.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
\cell value_slice()\cell valops.c\cell\row
\cell value_strcmp()\cell valarith.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\cell value_subscripted_rvalue()\cell valarith.c\cell\row
\cell watchpoint_equal()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_contents_all()\par}
{\s5\f1\fs20\ql\sb50\sa50 const gdb_byte* value_contents_all ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell value_fetch_lazy()\cell valops.c\cell\row
Called by:\cell c_value_print()\cell c-valprint.c\cell\row
\cell common_val_print()\cell valprint.c\cell\row
\cell cp_print_static_field()\cell cp-valprint.c\cell\row
\cell find_method_list()\cell valops.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell hpacc_value_rtti_type()\cell hpacc-abi.c\cell\row
\cell search_struct_method()\cell valops.c\cell\row
\cell value_array()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_contents_all_raw()\par}
{\s5\f1\fs20\ql\sb50\sa50 gdb_byte* value_contents_all_raw ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell value_array()\cell valops.c\cell\row
\cell value_at()\cell valops.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_fetch_lazy()\cell valops.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
\cell value_repeat()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_contents_equal()\par}
{\s5\f1\fs20\ql\sb50\sa50 int value_contents_equal ( struct value* val1, struct value* val2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell  memcmp()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_contents_raw()\par}
{\s5\f1\fs20\ql\sb50\sa50 gdb_byte* value_contents_raw ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell ada_value_binop()\cell ada-lang.c\cell\row
\cell cast_into_complex()\cell valops.c\cell\row
\cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
\cell convert_actual()\cell ada-lang.c\cell\row
\cell dwarf2_evaluate_loc_desc()\cell dwarf2loc.c\cell\row
\cell ensure_lval()\cell ada-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell init_array_element()\cell eval.c\cell\row
\cell print_return_value()\cell infcmd.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell search_struct_field()\cell valops.c\cell\row
\cell set_traceframe_context()\cell tracepoint.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_bitstring()\cell valops.c\cell\row
\cell value_contents_writeable()\cell value.c\cell\row
\cell value_from_contents_and_address()\cell ada-lang.c\cell\row
\cell value_from_double()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
\cell value_from_register()\cell findvar.c\cell\row
\cell value_from_string()\cell value.c\cell\row
\cell value_literal_complex()\cell valops.c\cell\row
\cell value_of_builtin_frame_fp_reg()\cell std-regs.c\cell\row
\cell value_of_builtin_frame_pc_reg()\cell std-regs.c\cell\row
\cell value_of_builtin_frame_reg()\cell std-regs.c\cell\row
\cell value_of_register()\cell findvar.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
\cell value_slice()\cell valops.c\cell\row
\cell value_string()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_contents_writeable()\par}
{\s5\f1\fs20\ql\sb50\sa50 gdb_byte* value_contents_writeable ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell value_contents_raw()\cell value.c\cell\row
\cell value_fetch_lazy()\cell valops.c\cell\row
Called by:\cell c_value_print()\cell c-valprint.c\cell\row
\cell cp_print_hpacc_virtual_table_entries()\cell cp-valprint.c\cell\row
\cell evaluate_struct_tuple()\cell eval.c\cell\row
\cell make_array_descriptor()\cell ada-lang.c\cell\row
\cell set_internalvar_component()\cell value.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_slice()\cell valops.c\cell\row
\cell value_subscripted_rvalue()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_copy()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_copy ( struct value* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_frame_id_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell deprecated_value_regnum_hack()\cell value.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_contents_all_raw()\cell value.c\cell\row
\cell value_embedded_offset()\cell value.c\cell\row
\cell value_enclosing_type()\cell value.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell access_value_history()\cell value.c\cell\row
\cell ada_coerce_to_simple_array_ptr()\cell ada-lang.c\cell\row
\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell ada_value_ptr_subscript()\cell ada-lang.c\cell\row
\cell bpstat_copy()\cell breakpoint.c\cell\row
\cell c_value_of_child()\cell varobj.c\cell\row
\cell c_value_print()\cell c-valprint.c\cell\row
\cell cast_to_fixed()\cell ada-lang.c\cell\row
\cell cp_print_hpacc_virtual_table_entries()\cell cp-valprint.c\cell\row
\cell cplus_value_of_child()\cell varobj.c\cell\row
\cell set_internalvar()\cell value.c\cell\row
\cell thin_data_pntr()\cell ada-lang.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_of_internalvar()\cell value.c\cell\row
\cell varobj_fixup_value()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_embedded_offset()\par}
{\s5\f1\fs20\ql\sb50\sa50 int value_embedded_offset ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell c_value_print()\cell c-valprint.c\cell\row
\cell common_val_print()\cell valprint.c\cell\row
\cell cp_print_static_field()\cell cp-valprint.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell find_method_list()\cell valops.c\cell\row
\cell gnuv3_rtti_type()\cell gnu-v3-abi.c\cell\row
\cell hpacc_value_rtti_type()\cell hpacc-abi.c\cell\row
\cell search_struct_method()\cell valops.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_full_object()\cell valops.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_enclosing_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* value_enclosing_type ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell c_value_print()\cell c-valprint.c\cell\row
\cell gnuv3_rtti_type()\cell gnu-v3-abi.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell hpacc_value_rtti_type()\cell hpacc-abi.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_array()\cell valops.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_change_enclosing_type()\cell value.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_fetch_lazy()\cell valops.c\cell\row
\cell value_full_object()\cell valops.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
\cell value_repeat()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_field ( struct value* arg1, int fieldno )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell value_primitive_field()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell gnuv2_value_rtti_type()\cell gnu-v2-abi.c\cell\row
\cell gnuv2_virtual_fn_field()\cell gnu-v2-abi.c\cell\row
\cell gnuv3_baseclass_offset()\cell gnu-v3-abi.c\cell\row
\cell gnuv3_rtti_type()\cell gnu-v3-abi.c\cell\row
\cell gnuv3_virtual_fn_field()\cell gnu-v3-abi.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_fn_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_fn_field ( struct value** arg1p, struct fn_field* f, int j, struct type* type, int offset )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell lookup_symbol()\cell symtab.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell find_overload_match()\cell valops.c\cell\row
\cell search_struct_method()\cell valops.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_free()\par}
{\s5\f1\fs20\ql\sb50\sa50 void value_free ( struct value* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
Called by:\cell bpstat_clear()\cell breakpoint.c\cell\row
\cell bpstat_clear_actions()\cell breakpoint.c\cell\row
\cell breakpoint_init_inferior()\cell breakpoint.c\cell\row
\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell cplus_value_of_child()\cell varobj.c\cell\row
\cell delete_breakpoint()\cell breakpoint.c\cell\row
\cell do_enable_breakpoint()\cell breakpoint.c\cell\row
\cell do_examine()\cell printcmd.c\cell\row
\cell free_all_values()\cell value.c\cell\row
\cell free_valchain()\cell breakpoint.c\cell\row
\cell free_variable()\cell varobj.c\cell\row
\cell print_it_typical()\cell breakpoint.c\cell\row
\cell value_free_to_mark()\cell value.c\cell\row
\cell value_of_child()\cell varobj.c\cell\row
\cell varobj_set_value()\cell varobj.c\cell\row
\cell varobj_update()\cell varobj.c\cell\row
Used in:\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell new_objc_runtime_get_classname()\cell objc-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_free_to_mark()\par}
{\s5\f1\fs20\ql\sb50\sa50 void value_free_to_mark ( struct value* mark )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell value_free()\cell value.c\cell\row
Called by:\cell ada_coerce_to_simple_array_type()\cell ada-lang.c\cell\row
\cell ada_template_to_fixed_record_type_1()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell breakpoint_cond_eval()\cell breakpoint.c\cell\row
\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell do_enable_breakpoint()\cell breakpoint.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell to_record_with_fixed_variant_part()\cell ada-lang.c\cell\row
\cell val_print_packed_array_elements()\cell ada-valprint.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
\cell watchpoint_check()\cell breakpoint.c\cell\row
Refs Var:\cell all_values\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_from_double()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_from_double ( struct type* type, DOUBLEST num )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell store_typed_floating()\cell doublest.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
Called by:\cell cast_from_fixed_to_double()\cell ada-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell print_subexp_standard()\cell expprint.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_neg()\cell valarith.c\cell\row
\cell value_pos()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_from_longest()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_from_longest ( struct type* type, long num )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell store_signed_integer()\cell findvar.c\cell\row
\cell store_typed_address()\cell findvar.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
Called by:\cell _initialize_tracepoint()\cell tracepoint.c\cell\row
\cell ada_array_bound()\cell ada-lang.c\cell\row
\cell ada_array_length()\cell ada-lang.c\cell\row
\cell ada_coerce_to_simple_array_type()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell ada_value_ptr_subscript()\cell ada-lang.c\cell\row
\cell allocate_space_in_inferior_malloc()\cell valops.c\cell\row
\cell c_value_of_child()\cell varobj.c\cell\row
\cell captured_main()\cell main.c\cell\row
\cell cast_to_fixed()\cell ada-lang.c\cell\row
\cell const_expr()\cell ax-gdb.c\cell\row
\cell const_var_ref()\cell ax-gdb.c\cell\row
\cell cp_print_value_fields()\cell cp-valprint.c\cell\row
\cell desc_bounds()\cell ada-lang.c\cell\row
\cell discrete_type_high_bound()\cell ada-lang.c\cell\row
\cell discrete_type_low_bound()\cell ada-lang.c\cell\row
\cell evaluate_subexp_for_sizeof()\cell eval.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell evaluate_subexp_scm()\cell scm-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell execute_stack_op()\cell dwarf2expr.c\cell\row
\cell find_function_in_inferior()\cell valops.c\cell\row
\cell forward_search_command()\cell source.c\cell\row
\cell gnuv2_virtual_fn_field()\cell gnu-v2-abi.c\cell\row
\cell gnuv3_baseclass_offset()\cell gnu-v3-abi.c\cell\row
\cell gnuv3_virtual_fn_field()\cell gnu-v3-abi.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell java_print_value_fields()\cell jv-valprint.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell pascal_object_print_value_fields()\cell p-valprint.c\cell\row
\cell print_scalar_formatted()\cell printcmd.c\cell\row
\cell print_single_dwarf_location()\cell dwarf2loc.c\cell\row
\cell print_subexp_standard()\cell expprint.c\cell\row
\cell reverse_search_command()\cell source.c\cell\row
\cell scm_lookup_name()\cell scm-lang.c\cell\row
\cell set_breakpoint_count()\cell breakpoint.c\cell\row
\cell set_input_radix_1()\cell valprint.c\cell\row
\cell set_output_radix_1()\cell valprint.c\cell\row
\cell set_traceframe_context()\cell tracepoint.c\cell\row
\cell set_traceframe_num()\cell tracepoint.c\cell\row
\cell set_tracepoint_count()\cell tracepoint.c\cell\row
\cell set_tracepoint_num()\cell tracepoint.c\cell\row
\cell thin_data_pntr()\cell ada-lang.c\cell\row
\cell value_allocate_space_in_inferior()\cell valops.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_complement()\cell valarith.c\cell\row
\cell value_in()\cell valarith.c\cell\row
\cell value_neg()\cell valarith.c\cell\row
\cell value_nsstring()\cell objc-lang.c\cell\row
\cell value_pos()\cell valarith.c\cell\row
\cell value_pos_atr()\cell ada-lang.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
\cell value_struct_elt_for_reference()\cell valops.c\cell\row
\cell value_sub()\cell valarith.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\cell value_val_atr()\cell ada-lang.c\cell\row
\cell value_x_unop()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_from_pointer()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_from_pointer ( struct type* type, CORE_ADDR addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell store_typed_address()\cell findvar.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
Called by:\cell ada_value_slice_ptr()\cell ada-lang.c\cell\row
\cell ada_value_struct_elt()\cell ada-lang.c\cell\row
\cell const_var_ref()\cell ax-gdb.c\cell\row
\cell cp_print_value_fields()\cell cp-valprint.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell get_class_address_from_object()\cell objc-lang.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell locate_var_value()\cell findvar.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell new_objc_runtime_get_classname()\cell objc-lang.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
\cell set_next_address()\cell printcmd.c\cell\row
\cell set_traceframe_context()\cell tracepoint.c\cell\row
\cell value_add()\cell valarith.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_coerce_array()\cell valops.c\cell\row
\cell value_coerce_function()\cell valops.c\cell\row
\cell value_sub()\cell valarith.c\cell\row
\cell x_command()\cell printcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_from_string()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_from_string ( char* ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell create_array_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell language_string_char_type()\cell language.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), strlen()\cell\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_language\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_lazy()\par}
{\s5\f1\fs20\ql\sb50\sa50 int value_lazy ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell c_value_of_root()\cell varobj.c\cell\row
\cell c_value_of_variable()\cell varobj.c\cell\row
\cell can_use_hardware_watchpoint()\cell breakpoint.c\cell\row
\cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
\cell cp_print_hpacc_virtual_table_entries()\cell cp-valprint.c\cell\row
\cell do_enable_breakpoint()\cell breakpoint.c\cell\row
\cell gnuv2_virtual_fn_field()\cell gnu-v2-abi.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell insert_breakpoints()\cell breakpoint.c\cell\row
\cell locate_var_value()\cell findvar.c\cell\row
\cell my_value_equal()\cell varobj.c\cell\row
\cell record_latest_value()\cell value.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\cell return_command()\cell stack.c\cell\row
\cell search_struct_field()\cell valops.c\cell\row
\cell set_internalvar()\cell value.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_of_child()\cell varobj.c\cell\row
\cell value_of_internalvar()\cell value.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
\cell value_slice()\cell valops.c\cell\row
\cell value_subscripted_rvalue()\cell valarith.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
\cell varobj_update()\cell varobj.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
\cell x_command()\cell printcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_mark()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_mark ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell ada_coerce_to_simple_array_type()\cell ada-lang.c\cell\row
\cell ada_template_to_fixed_record_type_1()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell breakpoint_cond_eval()\cell breakpoint.c\cell\row
\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell do_enable_breakpoint()\cell breakpoint.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell to_record_with_fixed_variant_part()\cell ada-lang.c\cell\row
\cell val_print_packed_array_elements()\cell ada-valprint.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
\cell watchpoint_check()\cell breakpoint.c\cell\row
Refs Var:\cell all_values\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_next()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_next ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell can_use_hardware_watchpoint()\cell breakpoint.c\cell\row
\cell free_valchain()\cell breakpoint.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_of_internalvar()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_of_internalvar ( struct internalvar* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell deprecated_value_internalvar_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_fetch_lazy()\cell valops.c\cell\row
\cell value_lazy()\cell value.c\cell\row
Called by:\cell decode_dollar()\cell linespec.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell get_number_trailer()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_offset()\par}
{\s5\f1\fs20\ql\sb50\sa50 int value_offset ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_to_fixed_value()\cell ada-lang.c\cell\row
\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell ada_value_primitive_packed_val()\cell ada-lang.c\cell\row
\cell ada_value_print()\cell ada-valprint.c\cell\row
\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell c_value_print()\cell c-valprint.c\cell\row
\cell can_use_hardware_watchpoint()\cell breakpoint.c\cell\row
\cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
\cell desc_bounds()\cell ada-lang.c\cell\row
\cell encode_actions()\cell tracepoint.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell find_method_list()\cell valops.c\cell\row
\cell get_java_utf8_name()\cell jv-lang.c\cell\row
\cell gnuv2_virtual_fn_field()\cell gnu-v2-abi.c\cell\row
\cell gnuv3_rtti_type()\cell gnu-v3-abi.c\cell\row
\cell hpacc_value_rtti_type()\cell hpacc-abi.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell java_link_class_type()\cell jv-lang.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\cell search_struct_field()\cell valops.c\cell\row
\cell search_struct_method()\cell valops.c\cell\row
\cell thin_data_pntr()\cell ada-lang.c\cell\row
\cell type_from_class()\cell jv-lang.c\cell\row
\cell unwrap_value()\cell ada-lang.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_coerce_array()\cell valops.c\cell\row
\cell value_coerce_function()\cell valops.c\cell\row
\cell value_fetch_lazy()\cell valops.c\cell\row
\cell value_from_register()\cell findvar.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
\cell value_repeat()\cell valops.c\cell\row
\cell value_slice()\cell valops.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\cell value_subscripted_rvalue()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_optimized_out()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum opt_state value_optimized_out ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell value_check_printable()\cell valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_pointed_to_offset()\par}
{\s5\f1\fs20\ql\sb50\sa50 int value_pointed_to_offset ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell value_assign()\cell valops.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_primitive_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_primitive_field ( struct value* arg1, int offset, int fieldno, struct type* arg_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_frame_id_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell deprecated_value_regnum_hack()\cell value.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell objc_fixup_ivar_offset()\cell objc-lang.c\cell\row
\cell set_value_lazy()\cell value.c\cell\row
\cell unpack_field_as_long()\cell value.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_contents_all_raw()\cell value.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell value_embedded_offset()\cell value.c\cell\row
\cell value_enclosing_type()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell value_offset()\cell value.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell ada_value_primitive_field()\cell ada-lang.c\cell\row
\cell gnuv2_virtual_fn_field()\cell gnu-v2-abi.c\cell\row
\cell search_struct_field()\cell valops.c\cell\row
\cell value_field()\cell value.c\cell\row
\cell varobj_value_struct_elt_by_index()\cell varobj.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_release_to_mark()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_release_to_mark ( struct value* mark )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell insert_bp_location()\cell breakpoint.c\cell\row
Refs Var:\cell all_values\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_static_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* value_static_field ( struct type* type, int fieldno )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell deprecated_value_address_hack()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_symbol()\cell symtab.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell symbol_read_needs_frame()\cell findvar.c\cell\row
\cell value_at()\cell valops.c\cell\row
\cell warning()\cell utils.c\cell\row
Called by:\cell cp_print_value_fields()\cell cp-valprint.c\cell\row
\cell java_print_value_fields()\cell jv-valprint.c\cell\row
\cell search_struct_field()\cell valops.c\cell\row
\cell value_struct_elt_for_reference()\cell valops.c\cell\row
\cell varobj_value_struct_elt_by_index()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* value_type ( struct value* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell ada_args_match()\cell ada-lang.c\cell\row
\cell ada_array_bound()\cell ada-lang.c\cell\row
\cell ada_array_length()\cell ada-lang.c\cell\row
\cell ada_coerce_ref()\cell ada-lang.c\cell\row
\cell ada_coerce_to_simple_array()\cell ada-lang.c\cell\row
\cell ada_coerce_to_simple_array_ptr()\cell ada-lang.c\cell\row
\cell ada_convert_actuals()\cell ada-lang.c\cell\row
\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_tag_name()\cell ada-lang.c\cell\row
\cell ada_tag_type()\cell ada-lang.c\cell\row
\cell ada_to_fixed_value()\cell ada-lang.c\cell\row
\cell ada_to_static_fixed_value()\cell ada-lang.c\cell\row
\cell ada_type_of_array()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell ada_value_assign()\cell ada-lang.c\cell\row
\cell ada_value_binop()\cell ada-lang.c\cell\row
\cell ada_value_equal()\cell ada-lang.c\cell\row
\cell ada_value_print()\cell ada-valprint.c\cell\row
\cell ada_value_slice()\cell ada-lang.c\cell\row
\cell ada_value_struct_elt()\cell ada-lang.c\cell\row
\cell ada_value_subscript()\cell ada-lang.c\cell\row
\cell binop_user_defined_p()\cell valarith.c\cell\row
\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell c_value_print()\cell c-valprint.c\cell\row
\cell can_use_hardware_watchpoint()\cell breakpoint.c\cell\row
\cell cast_from_fixed_to_double()\cell ada-lang.c\cell\row
\cell cast_into_complex()\cell valops.c\cell\row
\cell cast_to_fixed()\cell ada-lang.c\cell\row
\cell check_field()\cell valops.c\cell\row
\cell coerce_array()\cell value.c\cell\row
\cell coerce_enum()\cell value.c\cell\row
\cell coerce_for_assign()\cell ada-lang.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell coerce_unspec_val_to_type()\cell ada-lang.c\cell\row
\cell common_val_print()\cell valprint.c\cell\row
\cell convert_actual()\cell ada-lang.c\cell\row
\cell cp_print_hpacc_virtual_table_entries()\cell cp-valprint.c\cell\row
\cell cplus_value_of_child()\cell varobj.c\cell\row
\cell decode_dollar()\cell linespec.c\cell\row
\cell decode_packed_array()\cell ada-lang.c\cell\row
\cell desc_bounds()\cell ada-lang.c\cell\row
\cell desc_data()\cell ada-lang.c\cell\row
\cell ensure_lval()\cell ada-lang.c\cell\row
\cell evaluate_struct_tuple()\cell eval.c\cell\row
\cell evaluate_subexp_for_address()\cell eval.c\cell\row
\cell evaluate_subexp_for_sizeof()\cell eval.c\cell\row
\cell evaluate_subexp_java()\cell jv-lang.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell find_function_addr()\cell infcall.c\cell\row
\cell find_overload_match()\cell valops.c\cell\row
\cell gen_expr()\cell ax-gdb.c\cell\row
\cell gen_repeat()\cell ax-gdb.c\cell\row
\cell get_closure_dynamic_type()\cell gdbtypes.c\cell\row
\cell get_closure_implementation_fn()\cell gdbtypes.c\cell\row
\cell get_java_utf8_name()\cell jv-lang.c\cell\row
\cell get_number_trailer()\cell breakpoint.c\cell\row
\cell gnuv2_value_rtti_type()\cell gnu-v2-abi.c\cell\row
\cell gnuv2_virtual_fn_field()\cell gnu-v2-abi.c\cell\row
\cell gnuv3_rtti_type()\cell gnu-v3-abi.c\cell\row
\cell gnuv3_virtual_fn_field()\cell gnu-v3-abi.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell hpacc_value_rtti_type()\cell hpacc-abi.c\cell\row
\cell init_array_element()\cell eval.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell invoke_block_command()\cell printcmd.c\cell\row
\cell java_class_from_object()\cell jv-lang.c\cell\row
\cell java_link_class_type()\cell jv-lang.c\cell\row
\cell java_print_value_fields()\cell jv-valprint.c\cell\row
\cell java_value_print()\cell jv-valprint.c\cell\row
\cell lookup_symbol_aux()\cell symtab.c\cell\row
\cell maintenance_print_type()\cell typeprint.c\cell\row
\cell make_array_descriptor()\cell ada-lang.c\cell\row
\cell output_command()\cell printcmd.c\cell\row
\cell pascal_object_print_static_field()\cell p-valprint.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
\cell pascal_value_print()\cell p-valprint.c\cell\row
\cell pos_atr()\cell ada-lang.c\cell\row
\cell possible_user_operator_p()\cell ada-lang.c\cell\row
\cell print_command_1()\cell printcmd.c\cell\row
\cell print_formatted()\cell printcmd.c\cell\row
\cell print_frame_args()\cell stack.c\cell\row
\cell print_object_command()\cell objc-lang.c\cell\row
\cell printf_command()\cell printcmd.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\cell resolve_subexp()\cell ada-lang.c\cell\row
\cell return_command()\cell stack.c\cell\row
\cell scan_discrim_bound()\cell ada-lang.c\cell\row
\cell scm_lreadr()\cell scm-exp.c\cell\row
\cell set_internalvar_component()\cell value.c\cell\row
\cell thin_data_pntr()\cell ada-lang.c\cell\row
\cell to_fixed_variant_branch_type()\cell ada-lang.c\cell\row
\cell type_from_class()\cell jv-lang.c\cell\row
\cell type_of_child()\cell varobj.c\cell\row
\cell typecmp()\cell valops.c\cell\row
\cell unop_user_defined_p()\cell valarith.c\cell\row
\cell unwrap_value()\cell ada-lang.c\cell\row
\cell value_add()\cell valarith.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_arg_coerce()\cell infcall.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_as_double()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_binop()\cell valarith.c\cell\row
\cell value_cast_1()\cell valops.c\cell\row
\cell value_coerce_array()\cell valops.c\cell\row
\cell value_coerce_function()\cell valops.c\cell\row
\cell value_complement()\cell valarith.c\cell\row
\cell value_concat()\cell valarith.c\cell\row
\cell value_contents_equal()\cell value.c\cell\row
\cell value_equal()\cell valarith.c\cell\row
\cell value_field()\cell value.c\cell\row
\cell value_find_oload_method_list()\cell valops.c\cell\row
\cell value_fn_field()\cell value.c\cell\row
\cell value_full_object()\cell valops.c\cell\row
\cell value_in()\cell valarith.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_less()\cell valarith.c\cell\row
\cell value_logical_not()\cell valarith.c\cell\row
\cell value_neg()\cell valarith.c\cell\row
\cell value_objc_target_type()\cell objc-lang.c\cell\row
\cell value_of_builtin_frame_fp_reg()\cell std-regs.c\cell\row
\cell value_of_builtin_frame_pc_reg()\cell std-regs.c\cell\row
\cell value_of_builtin_frame_reg()\cell std-regs.c\cell\row
\cell value_pos()\cell valarith.c\cell\row
\cell value_slice()\cell valops.c\cell\row
\cell value_strcmp()\cell valarith.c\cell\row
\cell value_struct_elt()\cell valops.c\cell\row
\cell value_sub()\cell valarith.c\cell\row
\cell value_subscript()\cell valarith.c\cell\row
\cell value_subscript_packed()\cell ada-lang.c\cell\row
\cell value_subscripted_rvalue()\cell valarith.c\cell\row
\cell value_val_atr()\cell ada-lang.c\cell\row
\cell value_x_binop()\cell valarith.c\cell\row
\cell value_x_unop()\cell valarith.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
\cell varobj_fixup_value()\cell varobj.c\cell\row
\cell varobj_get_dynamic_type()\cell varobj.c\cell\row
\cell varobj_get_type_internal()\cell varobj.c\cell\row
\cell varobj_value_struct_elt_by_index()\cell varobj.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
\cell watchpoint_equal()\cell breakpoint.c\cell\row
\cell whatis_exp()\cell typeprint.c\cell\row
\cell x_command()\cell printcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function value_var_status()\par}
{\s5\f1\fs20\ql\sb50\sa50 int value_var_status ( struct value* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell c_value_print()\cell c-valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_convenience()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_convenience ( const char* ignore, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.c\cell\cell\row
Calls: \cell printf_filtered()\cell utils.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell value_print()\cell valprint.c\cell\row
Used in:\cell _initialize_values()\cell value.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\cell internalvars\cell value.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_values()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_values ( const char* num_exp, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.c\cell\cell\row
Calls: \cell access_value_history()\cell value.c\cell\row
\cell parse_and_eval_long()\cell eval.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell value_print()\cell valprint.c\cell\row
Used in:\cell _initialize_values()\cell value.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\cell value_history_count\cell value.c\cell\row
\intbl0
}
