<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF cli-out.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for cli-out.c of gdb.cxref.
<author>cxref

<sect>File cli-out.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>cli_begin()  :  cli-out.c
<item>cli_end()  :  cli-out.c
<item>cli_field_fmt()  :  cli-out.c
<item>cli_field_int()  :  cli-out.c
<item>cli_field_skip()  :  cli-out.c
<item>cli_field_string()  :  cli-out.c
<item>cli_flush()  :  cli-out.c
<item>cli_message()  :  cli-out.c
<item>cli_redirect()  :  cli-out.c
<item>cli_spaces()  :  cli-out.c
<item>cli_table_begin()  :  cli-out.c
<item>cli_table_body()  :  cli-out.c
<item>cli_table_end()  :  cli-out.c
<item>cli_table_header()  :  cli-out.c
<item>cli_text()  :  cli-out.c
<item>cli_text_fmt()  :  cli-out.c
<item>cli_wrap_hint()  :  cli-out.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;cli-out.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;mi/mi-console.h&quot;</tt>
</itemize>

<sect1>Type struct ui_out_data

<p>
<itemize>
<item><tt>struct ui_out_data</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct ui_file* stream;</tt><newline>
<item><tt>struct ui_file* original_stream;</tt><newline>
<item><tt>int suppress_output;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Typedef cli_out_data

<p>
<tt>typedef struct ui_out_data cli_out_data</tt><newline>
<descrip>
<tag>See:</tag>
<itemize>
<item>Type struct ui_out_data
</itemize>
</descrip>

<sect1>Global Variable cli_out_c_inited

<p>
<tt>int cli_out_c_inited</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>breakpoint.c
<item>cli-out.c
<item>objc-lang.c
<item>top.c
<item>utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_cli_out()  :  cli-out.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>cli_ui_out_impl</bf><newline>
<tt>static struct ui_out_impl cli_ui_out_impl</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cli_out_new()
<item>cli_quoted_out_new()
</itemize>
</descrip>

<sect1>Global Function _initialize_cli_out()

<p><tt>void _initialize_cli_out ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cli_out_c_inited  :  cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_begin()

<p><tt>void cli_begin ( struct ui_out* uiout, enum ui_out_type type, int level, const char* id )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_end()

<p><tt>void cli_end ( struct ui_out* uiout, enum ui_out_type type, int level )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_field_fmt()

<p><tt>void cli_field_fmt ( struct ui_out* uiout, int fldno, int width, enum ui_align align, const char* fldname, const char* format, va_list args )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
<item>field_separator()  :  cli-out.c
<item>vfprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_field_int()

<p><tt>void cli_field_int ( struct ui_out* uiout, int fldno, int width, enum ui_align alignment, const char* fldname, int value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
<item>cli_field_string()  :  cli-out.c
<item>__builtin___snprintf_chk(), __builtin_object_size()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_field_skip()

<p><tt>void cli_field_skip ( struct ui_out* uiout, int fldno, int width, enum ui_align alignment, const char* fldname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
<item>cli_field_string()  :  cli-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_field_string()

<p><tt>void cli_field_string ( struct ui_out* uiout, int fldno, int width, enum ui_align align, const char* fldname, const char* string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
<item>field_separator()  :  cli-out.c
<item>out_field_fmt()  :  cli-out.c
<item>ui_out_spaces()  :  ui-out.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cli_field_int()  :  cli-out.c
<item>cli_field_skip()  :  cli-out.c
<item>cli_table_header()  :  cli-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_flush()

<p><tt>void cli_flush ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
<item>gdb_flush()  :  ui-file.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_message()

<p><tt>void cli_message ( struct ui_out* uiout, int verbosity, const char* format, va_list args )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
<item>ui_out_get_verblvl()  :  ui-out.c
<item>vfprintf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_out_new()

<p><tt>struct ui_out* cli_out_new ( struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ui_out_new()  :  ui-out.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>make_cleanup_ui_out_suppress_output()  :  utils.c
<item>objc_setup_safe_print()  :  objc-lang.c
<item>save_breakpoints_command()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cli_ui_out_impl  :  cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_out_set_stream()

<p><tt>struct ui_file* cli_out_set_stream ( struct ui_out* uiout, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function cli_quoted_out_new()

<p><tt>struct ui_out* cli_quoted_out_new ( struct ui_file* raw )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ui_out_new()  :  ui-out.c
<item>xmalloc()  :  utils.c
<item>mi_console_file_new()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cli_ui_out_impl  :  cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_redirect()

<p><tt>int cli_redirect ( struct ui_out* uiout, struct ui_file* outstream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_spaces()

<p><tt>void cli_spaces ( struct ui_out* uiout, int numspaces )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
<item>print_spaces_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_table_begin()

<p><tt>void cli_table_begin ( struct ui_out* uiout, int nbrofcols, int nr_rows, const char* tblid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_table_body()

<p><tt>void cli_table_body ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
<item>cli_text()  :  cli-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_table_end()

<p><tt>void cli_table_end ( struct ui_out* uiout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_table_header()

<p><tt>void cli_table_header ( struct ui_out* uiout, int width, enum ui_align alignment, const char* col_name, const char* colhdr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
<item>cli_field_string()  :  cli-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_text()

<p><tt>void cli_text ( struct ui_out* uiout, const char* string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
<item>fputs_filtered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cli_table_body()  :  cli-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_text_fmt()

<p><tt>void cli_text_fmt ( struct ui_out* uiout, const char* format, va_list args )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
<item>vfprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cli-out.c
</itemize>
</descrip>

<sect1>Global Function cli_wrap_hint()

<p><tt>void cli_wrap_hint ( struct ui_out* uiout, const char* identstring )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
<item>wrap_here()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cli-out.c
</itemize>
</descrip>

<sect1>Local Function field_separator()

<p><tt>static void field_separator ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
<item>fputc_filtered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cli_field_fmt()  :  cli-out.c
<item>cli_field_string()  :  cli-out.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function out_field_fmt()

<p><tt>static void out_field_fmt ( struct ui_out* uiout, int fldno, const char* fldname, const char* format, ... )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cli-out.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_ui_out_data()  :  ui-out.c
<item>vfprintf_filtered()  :  utils.c
<item>__builtin_va_end(), __builtin_va_start()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cli_field_string()  :  cli-out.c
</itemize>
</descrip>

</article>
