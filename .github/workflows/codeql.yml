# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches:
      - master
      - main
      - dependabot/*
  pull_request:
    # The branches below must be a subset of the branches above
    branches:
      - master
      - main
      - dependabot/*
  schedule:
    - cron: '38 5 * * 2'

jobs:
  analyze:
    name: Analyze
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners
    # Consider using larger runners for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'c-cpp', 'go', 'javascript-typescript', 'python', 'ruby' ]
        # CodeQL supports [ 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift' ]
        # Use only 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use only 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at:
        # https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to:
        # https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    - name: Create builddirs
      run: |
        if test ! -d build; then mkdir build; else stat build; fi
        if test ! -d /home/runner/work/apple-gdb-1824/build; then \
          if test -w /home/runner/work/apple-gdb-1824; then \
            mkdir /home/runner/work/apple-gdb-1824/build; \
          elif test -w /home/runner/work -o -w /home/runner -o -w /home; then \
            mkdir -p /home/runner/work/apple-gdb-1824/build; \
          fi; \
        else \
          stat /home/runner/work/apple-gdb-1824/build; \
        fi
        cd src

    - name: Dependencies
      if: matrix.language == 'c-cpp'
      run: sudo apt-get -y install autopoint gobjc clang

    # Can try bringing back autobuild for 'c-cpp' once darling has xcrun:
    - name: Autobuild
      if: matrix.language != 'c-cpp'
      uses: github/codeql-action/autobuild@v2

    - name: Manual build
      if: matrix.language == 'c-cpp'
      run: |
        test -e ./.profile_generic && source ./.profile_generic
        ./configure --enable-silent-rules
        make -C libcheckpoint || make -C libcheckpoint -f Makefile_orig || make -C macsbug || make -C macsbug/gdb_plugin_support
        cd src
        ./configure --disable-werror --enable-silent-rules
        make configure-bfd
        make -C bfd headers
        if test ! -e bfd/bfd.h; then make -C bfd bfd.h; else stat bfd/bfd.h; fi
        if test -e autogen/Makefile; then \
          make -C autogen; \
        elif test -d autogen; then \
          ls autogen/Makefile*; \
        else \
          echo "skipping autogen"; \
        fi
        make -C bfd diststuff
        make all-cgen
        make all-libiberty
        make all-intl
        make all-etc
        make all-libdecnumber
        make all-mmalloc
        make configure-readline
        for dir in libtool_gnu sim utils tcl expect dejagnu itcl tk libgui; do \
          if test -e ${dir}/configure; then \
            make configure-${dir}; \
          elif test -d ${dir}; then \
            ls ${dir}/configure*; \
          else \
            echo "skipping configuring in ${dir}"; \
          fi; \
        done
        for dir in sim utils tcl expect dejagnu itcl tk libgui; do \
          if test -e ${dir}/Makefile; then \
            make -C ${dir}; \
          elif test -d ${dir}; then \
            ls ${dir}/Makefile*; \
          else \
            echo "skipping ${dir}"; \
          fi; \
        done
        make check-libiberty
        for dir in sim itcl; do \
          if test -e ${dir}/Makefile; then \
            make check-${dir} V=0 RUNTESTFLAGS="-v"; \
          elif test -d ${dir}; \
            then ls ${dir}/Makefile*; \
          else \
            echo "skipping testing ${dir}"; \
          fi; \
        done

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
