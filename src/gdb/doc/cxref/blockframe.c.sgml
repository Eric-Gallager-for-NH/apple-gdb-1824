<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF blockframe.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for blockframe.c of gdb.cxref.
<author>cxref

<sect>File blockframe.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;annotate.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;regcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;dummy-frame.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>

<sect1>Local Variables

<p>
<bf>cache_pc_function_low</bf><newline>
<tt>static CORE_ADDR cache_pc_function_low</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>clear_pc_function_cache()
<item>find_pc_partial_function_impl()
</itemize>
</descrip>
<p>
<bf>cache_pc_function_high</bf><newline>
<tt>static CORE_ADDR cache_pc_function_high</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>clear_pc_function_cache()
<item>find_pc_partial_function_impl()
</itemize>
</descrip>
<p>
<bf>cache_pc_function_name</bf><newline>
<tt>static const char* cache_pc_function_name</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>clear_pc_function_cache()
<item>find_pc_partial_function_impl()
</itemize>
</descrip>
<p>
<bf>cache_pc_function_inlining</bf><newline>
<tt>static int cache_pc_function_inlining</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>clear_pc_function_cache()
<item>find_pc_partial_function_impl()
</itemize>
</descrip>
<p>
<bf>cache_pc_function_section</bf><newline>
<tt>static struct bfd_section* cache_pc_function_section</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>clear_pc_function_cache()
<item>find_pc_partial_function_impl()
</itemize>
</descrip>

<sect1>Global Function addr_inside_main_func()

<p><tt>int addr_inside_main_func ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_highest_pc()  :  block.c
<item>find_pc_function()  :  blockframe.c
<item>find_pc_sect_section()  :  objfiles.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>main_name()  :  symtab.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_objfile  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function block_innermost_frame()

<p><tt>struct frame_info* block_innermost_frame ( struct block* block )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_contains_pc()  :  block.c
<item>get_frame_address_in_block()  :  frame.c
<item>get_prev_frame()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_for_address()  :  eval.c
<item>evaluate_subexp_with_coercion()  :  eval.c
<item>value_of_variable()  :  valops.c
<item>watch_command_1()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function clear_pc_function_cache()

<p><tt>void clear_pc_function_cache ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>clear_symtab_users()  :  symfile.c
<item>free_objfile_internal()  :  objfiles.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cache_pc_function_high  :  blockframe.c
<item>cache_pc_function_inlining  :  blockframe.c
<item>cache_pc_function_low  :  blockframe.c
<item>cache_pc_function_name  :  blockframe.c
<item>cache_pc_function_section  :  blockframe.c
</itemize>
</descrip>

<sect1>Global Function find_pc_function()

<p><tt>struct symbol* find_pc_function ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_mapped_section()  :  symfile.c
<item>find_pc_sect_function()  :  blockframe.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>addr_inside_main_func()  :  blockframe.c
<item>cp_print_class_method()  :  cp-valprint.c
<item>decode_all_digits()  :  linespec.c
<item>decode_all_digits_exhaustive()  :  linespec.c
<item>decode_objc()  :  linespec.c
<item>evaluate_subexp_standard()  :  eval.c
<item>finish_command()  :  infcmd.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>finish_tfind_command()  :  tracepoint.c
<item>get_closure_implementation_fn()  :  gdbtypes.c
<item>get_frame_language()  :  stack.c
<item>hand_function_call()  :  infcall.c
<item>info_common_command()  :  f-valprint.c
<item>jump_command()  :  infcmd.c
<item>normal_stop()  :  infrun.c
<item>pascal_object_print_class_method()  :  p-valprint.c
<item>print_inlined_frame()  :  inlining.c
<item>proceed()  :  infrun.c
<item>select_frame()  :  frame.c
<item>set_traceframe_context()  :  tracepoint.c
<item>until_next_command()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function find_pc_function_no_inlined()

<p><tt>struct symbol* find_pc_function_no_inlined ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_mapped_section()  :  symfile.c
<item>find_pc_sect_function_no_inlined()  :  blockframe.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>normal_stop()  :  infrun.c
<item>print_frame()  :  stack.c
</itemize>
</descrip>

<sect1>Global Function find_pc_partial_function()

<p><tt>int find_pc_partial_function ( CORE_ADDR pc, const char** name, CORE_ADDR* address, CORE_ADDR* endaddr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_partial_function_impl()  :  blockframe.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_check_is_thread_unsafe()  :  valops.c
<item>func_command()  :  stack.c
<item>hand_function_call()  :  infcall.c
<item>handle_inferior_event()  :  infrun.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function find_pc_partial_function_no_inlined()

<p><tt>int find_pc_partial_function_no_inlined ( CORE_ADDR pc, const char** name, CORE_ADDR* address, CORE_ADDR* endaddr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_partial_function_impl()  :  blockframe.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_objc_msgsend()  :  objc-lang.c
<item>find_pc_offset()  :  disasm.c
<item>in_prologue()  :  symtab.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>proceed()  :  infrun.c
<item>skip_prologue_using_sal()  :  symtab.c
<item>step_1_no_inlining()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function find_pc_sect_function()

<p><tt>struct symbol* find_pc_sect_function ( CORE_ADDR pc, struct bfd_section* section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_for_pc_sect()  :  block.c
<item>block_function()  :  block.c
<item>block_inlined_function()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>break_command_2()  :  breakpoint.c
<item>build_address_symbolic()  :  printcmd.c
<item>decode_objc()  :  linespec.c
<item>find_methods()  :  objc-lang.c
<item>find_pc_function()  :  blockframe.c
<item>find_pc_partial_function_impl()  :  blockframe.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>tracepoints_info()  :  tracepoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cached_mapped_section  :  symtab.c
<item>cached_pc_function  :  symtab.c
<item>last_function_lookup_pc  :  symtab.c
<item>last_mapped_section_lookup_pc  :  symtab.c
</itemize>
</descrip>

<sect1>Global Function find_pc_sect_function_no_inlined()

<p><tt>struct symbol* find_pc_sect_function_no_inlined ( CORE_ADDR pc, struct bfd_section* section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_for_pc_sect()  :  block.c
<item>block_function()  :  block.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_pc_function_no_inlined()  :  blockframe.c
<item>find_pc_partial_function_impl()  :  blockframe.c
</itemize>
</descrip>

<sect1>Global Function get_frame_block()

<p><tt>struct block* get_frame_block ( struct frame_info* frame, CORE_ADDR* addr_in_block )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_for_pc()  :  block.c
<item>get_frame_address_in_block()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_frame_function()  :  blockframe.c
<item>get_frame_function_inlined()  :  blockframe.c
<item>get_selected_block()  :  stack.c
<item>print_frame_label_vars()  :  stack.c
<item>print_frame_local_vars()  :  stack.c
<item>read_var_value()  :  findvar.c
<item>varobj_create()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function get_frame_function()

<p><tt>struct symbol* get_frame_function ( struct frame_info* frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_function()  :  block.c
<item>get_frame_block()  :  blockframe.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf_expr_frame_base()  :  dwarf2loc.c
<item>frame_info()  :  stack.c
<item>jump_command()  :  infcmd.c
<item>print_frame_arg_vars()  :  stack.c
<item>return_command()  :  stack.c
<item>value_of_local()  :  valops.c
<item>value_of_this()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function get_frame_function_inlined()

<p><tt>struct symbol* get_frame_function_inlined ( struct frame_info* frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_inlined_function()  :  inlining.c
<item>find_pc_mapped_section()  :  symfile.c
<item>get_frame_block()  :  blockframe.c
</itemize>
</descrip>

<sect1>Global Function get_pc_function_start()

<p><tt>CORE_ADDR get_pc_function_start ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_for_pc()  :  block.c
<item>block_function()  :  block.c
<item>find_pc_section()  :  objfiles.c
<item>lookup_minimal_symbol_by_pc()  :  minsyms.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_func_unwind()  :  frame.c
</itemize>
</descrip>

<sect1>Local Function find_pc_partial_function_impl()

<p><tt>static int find_pc_partial_function_impl ( CORE_ADDR pc, const char** name, CORE_ADDR* address, CORE_ADDR* endaddr, int inlining_flag )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>blockframe.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_highest_pc()  :  block.c
<item>find_pc_overlay()  :  symfile.c
<item>find_pc_sect_function()  :  blockframe.c
<item>find_pc_sect_function_no_inlined()  :  blockframe.c
<item>find_pc_sect_psymbol()  :  symtab.c
<item>find_pc_sect_psymtab()  :  symtab.c
<item>find_pc_sect_section()  :  objfiles.c
<item>find_pc_section()  :  objfiles.c
<item>lookup_minimal_symbol_by_pc_section()  :  minsyms.c
<item>overlay_mapped_address()  :  symfile.c
<item>overlay_unmapped_address()  :  symfile.c
<item>pc_in_unmapped_range()  :  symfile.c
<item>psymtab_to_symtab()  :  symfile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_pc_partial_function()  :  blockframe.c
<item>find_pc_partial_function_no_inlined()  :  blockframe.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cache_pc_function_high  :  blockframe.c
<item>cache_pc_function_inlining  :  blockframe.c
<item>cache_pc_function_low  :  blockframe.c
<item>cache_pc_function_name  :  blockframe.c
<item>cache_pc_function_section  :  blockframe.c
<item>current_target  :  target/target.c
</itemize>
</descrip>

</article>
