<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF coffread.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for coffread.c of gdb.cxref.
<author>cxref

<sect>File coffread.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>coff_new_init()  :  coffread.c
<item>coff_symfile_finish()  :  coffread.c
<item>coff_symfile_init()  :  coffread.c
<item>coff_symfile_read()  :  coffread.c
<item>default_symfile_offsets()  :  symfile.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/coff/internal.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/libcoff.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/bfdlink.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;buildsym.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb-stabs.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;stabsread.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;complaints.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;dictionary.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;coff-pe-read.h&quot;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define EXTERNAL_NAME( string, abfd )</tt><newline>
<p>
<tt>#define SDB_TYPE( type )</tt><newline>
<p>
<tt>#define N_BTMASK local_n_btmask</tt><newline>
<p>
<tt>#define N_BTSHFT local_n_btshft</tt><newline>
<p>
<tt>#define N_TMASK local_n_tmask</tt><newline>
<p>
<tt>#define N_TSHIFT local_n_tshift</tt><newline>
<p>
<tt>#define L_LNNO32( lp )</tt><newline>

<sect1>Type struct coff_symfile_info

<p>
<itemize>
<item><tt>struct coff_symfile_info</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>file_ptr min_lineno_offset;</tt><newline>
<item><tt>file_ptr max_lineno_offset;</tt><newline>
<item><tt>CORE_ADDR textaddr;</tt><newline>
<item><tt>unsigned int textsize;</tt><newline>
<item><tt>struct stab_section_list* stabsects;</tt><newline>
<item><tt>asection* stabstrsect;</tt><newline>
<item><tt>char* stabstrdata;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct coff_symbol

<p>
<itemize>
<item><tt>struct coff_symbol</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>char* c_name;</tt><newline>
<item><tt>int c_symnum;</tt><newline>
<item><tt>int c_naux;</tt><newline>
<item><tt>long c_value;</tt><newline>
<item><tt>int c_sclass;</tt><newline>
<item><tt>int c_secnum;</tt><newline>
<item><tt>unsigned int c_type;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct find_targ_sec_arg

<p>
<itemize>
<item><tt>struct find_targ_sec_arg</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int targ_index;</tt><newline>
<item><tt>asection** resultp;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct nextfield

<p>
<itemize>
<item><tt>struct nextfield</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct nextfield* next;</tt><newline>
<item><tt>struct field field;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Local Variables

<p>
<bf>current_source_start_addr</bf><newline>
<tt>static CORE_ADDR current_source_start_addr</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coff_end_symtab()
<item>complete_symtab()
</itemize>
</descrip>
<p>
<bf>current_source_end_addr</bf><newline>
<tt>static CORE_ADDR current_source_end_addr</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coff_end_symtab()
<item>complete_symtab()
</itemize>
</descrip>
<p>
<bf>nlist_bfd_global</bf><newline>
<tt>static bfd* nlist_bfd_global</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coff_symtab_read()
<item>read_one_sym()
</itemize>
</descrip>
<p>
<bf>nlist_nsyms_global</bf><newline>
<tt>static int nlist_nsyms_global</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coff_read_enum_type()
<item>coff_read_struct_type()
<item>coff_symtab_read()
</itemize>
</descrip>
<p>
<bf>temp_sym</bf><newline>
<tt>static char* temp_sym</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coff_symfile_read()
<item>read_one_sym()
</itemize>
</descrip>
<p>
<bf>temp_aux</bf><newline>
<tt>static char* temp_aux</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coff_symfile_read()
<item>read_one_sym()
</itemize>
</descrip>
<p>
<bf>local_n_btmask</bf><newline>
<tt>static unsigned int local_n_btmask</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coff_symfile_read()
<item>coff_symtab_read()
<item>decode_function_type()
<item>decode_type()
<item>read_one_sym()
</itemize>
</descrip>
<p>
<bf>local_n_btshft</bf><newline>
<tt>static unsigned int local_n_btshft</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coff_symfile_read()
<item>coff_symtab_read()
<item>decode_type()
<item>process_coff_symbol()
</itemize>
</descrip>
<p>
<bf>local_n_tmask</bf><newline>
<tt>static unsigned int local_n_tmask</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coff_symfile_read()
<item>coff_symtab_read()
<item>decode_type()
<item>process_coff_symbol()
<item>read_one_sym()
</itemize>
</descrip>
<p>
<bf>local_n_tshift</bf><newline>
<tt>static unsigned int local_n_tshift</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coff_symfile_read()
<item>decode_function_type()
<item>decode_type()
</itemize>
</descrip>
<p>
<bf>local_linesz</bf><newline>
<tt>static unsigned int local_linesz</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coff_symfile_read()
<item>enter_linenos()
<item>find_linenos()
<item>init_lineno()
</itemize>
</descrip>
<p>
<bf>local_symesz</bf><newline>
<tt>static unsigned int local_symesz</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coff_symfile_read()
<item>read_one_sym()
</itemize>
</descrip>
<p>
<bf>local_auxesz</bf><newline>
<tt>static unsigned int local_auxesz</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coff_symfile_read()
<item>read_one_sym()
</itemize>
</descrip>
<p>
<bf>pe_file</bf><newline>
<tt>static int pe_file</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coff_symfile_read()
<item>coff_symtab_read()
<item>read_one_sym()
</itemize>
</descrip>
<p>
<bf>opaque_type_chain</bf><newline>
<tt>static struct symbol* opaque_type_chain[127]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coff_symtab_read()
<item>patch_opaque_types()
<item>process_coff_symbol()
</itemize>
</descrip>
<p>
<bf>symfile_bfd</bf><newline>
<tt>static bfd* symfile_bfd</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coff_symfile_read()
<item>enter_linenos()
<item>init_stringtab()
<item>read_one_sym()
</itemize>
</descrip>
<p>
<bf>stringtab</bf><newline>
<tt>static char* stringtab</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coff_getfilename()
<item>free_stringtab()
<item>getsymname()
<item>init_stringtab()
</itemize>
</descrip>
<p>
<bf>linetab</bf><newline>
<tt>static char* linetab</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>enter_linenos()
<item>free_linetab()
<item>init_lineno()
</itemize>
</descrip>
<p>
<bf>linetab_offset</bf><newline>
<tt>static long linetab_offset</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>enter_linenos()
<item>init_lineno()
</itemize>
</descrip>
<p>
<bf>linetab_size</bf><newline>
<tt>static unsigned long linetab_size</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>enter_linenos()
<item>init_lineno()
</itemize>
</descrip>
<p>
<bf>coff_sym_fns</bf><newline>
<tt>static struct sym_fns coff_sym_fns</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_coffread()
</itemize>
</descrip>

<sect1>Global Function _initialize_coffread()

<p><tt>void _initialize_coffread ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_symtab_fns()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>coff_sym_fns  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function coff_alloc_type()

<p><tt>static struct type* coff_alloc_type ( int index )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>alloc_type()  :  gdbtypes.c
<item>coff_lookup_type()  :  coffread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_read_enum_type()  :  coffread.c
<item>coff_read_struct_type()  :  coffread.c
<item>decode_base_type()  :  coffread.c
<item>decode_type()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_objfile  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function coff_end_symtab()

<p><tt>static void coff_end_symtab ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>end_symtab()  :  buildsym.c
<item>executable_objfile()  :  objfiles.c
<item>free_named_symtabs()  :  symfile.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_source_end_addr  :  coffread.c
<item>current_source_start_addr  :  coffread.c
<item>last_source_file  :  buildsym.c
<item>last_source_start_addr  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function coff_getfilename()

<p><tt>static char* coff_getfilename ( union internal_auxent* aux_entry )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>__builtin___strcpy_chk(), __builtin___strncpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), __inline_strncpy_chk(), strrchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>stringtab  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function coff_locate_sections()

<p><tt>static void coff_locate_sections ( bfd* abfd, asection* sectp, void* csip )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>make_cleanup()  :  utils.c
<item>xmalloc()  :  utils.c
<item>isdigit(), strcmp(), strncmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>coff_symfile_read()  :  coffread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function coff_lookup_type()

<p><tt>static struct type** coff_lookup_type ( int index )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_alloc_type()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>type_vector  :  buildsym.c
<item>type_vector_length  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function coff_new_init()

<p><tt>static void coff_new_init ( struct objfile* ignore )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coffread.c
</itemize>
</descrip>

<sect1>Local Function coff_read_enum_type()

<p><tt>static struct type* coff_read_enum_type ( int index, int length, int lastsym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_symbol_to_list()  :  buildsym.c
<item>coff_alloc_type()  :  coffread.c
<item>gdbarch_int_bit()  :  gdbarch.c
<item>obsavestring()  :  symfile.c
<item>read_one_sym()  :  coffread.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_base_type()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_objfile  :  objfiles.c
<item>file_symbols  :  buildsym.c
<item>local_symbols  :  buildsym.c
<item>nlist_nsyms_global  :  coffread.c
<item>symnum  :  buildsym.c
<item>within_function  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function coff_read_struct_type()

<p><tt>static struct type* coff_read_struct_type ( int index, int length, int lastsym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>coff_alloc_type()  :  coffread.c
<item>decode_type()  :  coffread.c
<item>obsavestring()  :  symfile.c
<item>read_one_sym()  :  coffread.c
<item>xmalloc()  :  utils.c
<item>__builtin_alloca(), _obstack_newchunk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_base_type()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_objfile  :  objfiles.c
<item>nlist_nsyms_global  :  coffread.c
<item>symnum  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function coff_start_symtab()

<p><tt>static void coff_start_symtab ( const char* name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>record_debugformat()  :  buildsym.c
<item>savestring()  :  utils.c
<item>start_symtab()  :  buildsym.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function coff_symfile_finish()

<p><tt>static void coff_symfile_finish ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>stabsread_clear_cache()  :  stabsread.c
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>coffread.c
</itemize>
</descrip>

<sect1>Local Function coff_symfile_init()

<p><tt>static void coff_symfile_init ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>init_entry_point_info()  :  objfiles.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>coffread.c
</itemize>
</descrip>

<sect1>Local Function coff_symfile_read()

<p><tt>static void coff_symfile_read ( struct objfile* objfile, int mainline )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
<item>coffstab_build_psymtabs()  :  dbxread.c
<item>do_cleanups()  :  utils.c
<item>dwarf2_build_frame_info()  :  dwarf2-frame.c
<item>dwarf2_build_psymtabs()  :  dwarf2read.c
<item>dwarf2_has_info()  :  dwarf2read.c
<item>error()  :  utils.c
<item>init_lineno()  :  coffread.c
<item>init_minimal_symbol_collection()  :  minsyms.c
<item>init_psymbol_list()  :  symfile.c
<item>init_stringtab()  :  coffread.c
<item>install_minimal_symbols()  :  minsyms.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_discard_minimal_symbols()  :  minsyms.c
<item>xmalloc()  :  utils.c
<item>bfd_map_over_sections(), bfd_seek(), strncmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>coff_locate_sections()  :  coffread.c
<item>find_linenos()  :  coffread.c
<item>free_current_contents()  :  utils.c
<item>free_linetab_cleanup()  :  coffread.c
<item>free_stringtab_cleanup()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>local_auxesz  :  coffread.c
<item>local_linesz  :  coffread.c
<item>local_n_btmask  :  coffread.c
<item>local_n_btshft  :  coffread.c
<item>local_n_tmask  :  coffread.c
<item>local_n_tshift  :  coffread.c
<item>local_symesz  :  coffread.c
<item>pe_file  :  coffread.c
<item>symfile_bfd  :  coffread.c
<item>temp_aux  :  coffread.c
<item>temp_sym  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function coff_symtab_read()

<p><tt>static void coff_symtab_read ( long symtab_offset, unsigned int nsyms, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>coff_end_symtab()  :  coffread.c
<item>coff_getfilename()  :  coffread.c
<item>coff_start_symtab()  :  coffread.c
<item>complaint()  :  complaints.c
<item>complete_symtab()  :  coffread.c
<item>cs_to_section()  :  coffread.c
<item>enter_linenos()  :  coffread.c
<item>error()  :  utils.c
<item>executable_objfile()  :  objfiles.c
<item>finish_block()  :  buildsym.c
<item>gdbarch_coff_make_msymbol_special()  :  gdbarch.c
<item>gdbarch_smash_text_address()  :  gdbarch.c
<item>getsymname()  :  coffread.c
<item>internal_error()  :  utils.c
<item>objfile_section_offset()  :  objfiles.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>patch_opaque_types()  :  coffread.c
<item>perror_with_name()  :  utils.c
<item>pop_context()  :  buildsym.c
<item>prim_record_minimal_symbol_and_info()  :  minsyms.c
<item>process_coff_symbol()  :  coffread.c
<item>push_context()  :  buildsym.c
<item>quit()  :  utils.c
<item>read_one_sym()  :  coffread.c
<item>read_pe_exported_syms()  :  coff-pe-read.c
<item>record_line()  :  buildsym.c
<item>record_minimal_symbol()  :  coffread.c
<item>symtab_get_first()  :  objfiles.c
<item>symtab_get_next()  :  objfiles.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), bfd_seek(), strcmp(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symfile_read()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>context_stack_depth  :  buildsym.c
<item>current_gdbarch  :  gdbarch.c
<item>current_objfile  :  objfiles.c
<item>current_subfile  :  buildsym.c
<item>current_target  :  target/target.c
<item>last_source_file  :  buildsym.c
<item>local_n_btmask  :  coffread.c
<item>local_n_btshft  :  coffread.c
<item>local_n_tmask  :  coffread.c
<item>local_symbols  :  buildsym.c
<item>nlist_bfd_global  :  coffread.c
<item>nlist_nsyms_global  :  coffread.c
<item>opaque_type_chain  :  coffread.c
<item>pe_file  :  coffread.c
<item>quit_flag  :  utils.c
<item>symfile_complaints  :  complaints.c
<item>symnum  :  buildsym.c
<item>type_vector  :  buildsym.c
<item>type_vector_length  :  buildsym.c
<item>within_function  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function complete_symtab()

<p><tt>static void complete_symtab ( const char* name, CORE_ADDR start_addr, unsigned int size )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>savestring()  :  utils.c
<item>xfree()  :  utils.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_source_end_addr  :  coffread.c
<item>current_source_start_addr  :  coffread.c
<item>last_source_file  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function cs_section_address()

<p><tt>static CORE_ADDR cs_section_address ( struct coff_symbol* cs, bfd* abfd )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bfd_map_over_sections()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_one_sym()  :  coffread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>find_targ_sec()  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function cs_to_section()

<p><tt>static int cs_to_section ( struct coff_symbol* cs, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>executable_objfile()  :  objfiles.c
<item>internal_error()  :  utils.c
<item>bfd_map_over_sections()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
<item>process_coff_symbol()  :  coffread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>find_targ_sec()  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function decode_base_type()

<p><tt>static struct type* decode_base_type ( struct coff_symbol* cs, unsigned int c_type, union internal_auxent* aux )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>coff_alloc_type()  :  coffread.c
<item>coff_read_enum_type()  :  coffread.c
<item>coff_read_struct_type()  :  coffread.c
<item>complaint()  :  complaints.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>lookup_fundamental_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_type()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_objfile  :  objfiles.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function decode_function_type()

<p><tt>static struct type* decode_function_type ( struct coff_symbol* cs, unsigned int c_type, union internal_auxent* aux )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>decode_type()  :  coffread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_coff_symbol()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>local_n_btmask  :  coffread.c
<item>local_n_tshift  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function decode_type()

<p><tt>static struct type* decode_type ( struct coff_symbol* cs, unsigned int c_type, union internal_auxent* aux )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>coff_alloc_type()  :  coffread.c
<item>complaint()  :  complaints.c
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
<item>decode_base_type()  :  coffread.c
<item>decode_type()  :  coffread.c
<item>lookup_function_type()  :  gdbtypes.c
<item>lookup_fundamental_type()  :  gdbtypes.c
<item>lookup_pointer_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_read_struct_type()  :  coffread.c
<item>decode_function_type()  :  coffread.c
<item>decode_type()  :  coffread.c
<item>process_coff_symbol()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_objfile  :  objfiles.c
<item>local_n_btmask  :  coffread.c
<item>local_n_btshft  :  coffread.c
<item>local_n_tmask  :  coffread.c
<item>local_n_tshift  :  coffread.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function enter_linenos()

<p><tt>static void enter_linenos ( long file_offset, int first_line, int last_line, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>record_line()  :  buildsym.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_subfile  :  buildsym.c
<item>linetab  :  coffread.c
<item>linetab_offset  :  coffread.c
<item>linetab_size  :  coffread.c
<item>local_linesz  :  coffread.c
<item>symfile_bfd  :  coffread.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function find_linenos()

<p><tt>static void find_linenos ( bfd* abfd, struct bfd_section* asect, void* vpinfo )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>coff_symfile_read()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>local_linesz  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function find_targ_sec()

<p><tt>static void find_targ_sec ( bfd* abfd, asection* sect, void* obj )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cs_section_address()  :  coffread.c
<item>cs_to_section()  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function free_linetab()

<p><tt>static void free_linetab ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_linetab_cleanup()  :  coffread.c
<item>init_lineno()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>linetab  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function free_linetab_cleanup()

<p><tt>static void free_linetab_cleanup ( void* ignore )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_linetab()  :  coffread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>coff_symfile_read()  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function free_stringtab()

<p><tt>static void free_stringtab ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_stringtab_cleanup()  :  coffread.c
<item>init_stringtab()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>stringtab  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function free_stringtab_cleanup()

<p><tt>static void free_stringtab_cleanup ( void* ignore )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_stringtab()  :  coffread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>coff_symfile_read()  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function getsymname()

<p><tt>static char* getsymname ( struct internal_syment* symbol_entry )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>__builtin___strncpy_chk(), __builtin_object_size(), __inline_strncpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
<item>read_one_sym()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>stringtab  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function init_lineno()

<p><tt>static int init_lineno ( bfd* abfd, long offset, int size )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_linetab()  :  coffread.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), bfd_bread(), bfd_seek()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symfile_read()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>linetab  :  coffread.c
<item>linetab_offset  :  coffread.c
<item>linetab_size  :  coffread.c
<item>local_linesz  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function init_stringtab()

<p><tt>static int init_stringtab ( bfd* abfd, long offset )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_stringtab()  :  coffread.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), bfd_bread(), bfd_seek()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symfile_read()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>stringtab  :  coffread.c
<item>symfile_bfd  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function patch_opaque_types()

<p><tt>static void patch_opaque_types ( struct symtab* s )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dict_iterator_first()  :  dictionary.c
<item>dict_iterator_next()  :  dictionary.c
<item>hashname()  :  buildsym.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>patch_type()  :  coffread.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>opaque_type_chain  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function patch_type()

<p><tt>static void patch_type ( struct type* type, struct type* real_type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>objc_fixup_class_length()  :  objc-lang.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), _obstack_newchunk(), concat()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>patch_opaque_types()  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function process_coff_symbol()

<p><tt>static struct symbol* process_coff_symbol ( struct coff_symbol* cs, union internal_auxent* aux, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_symbol_to_list()  :  buildsym.c
<item>cs_to_section()  :  coffread.c
<item>decode_function_type()  :  coffread.c
<item>decode_type()  :  coffread.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>gdbarch_sdb_reg_to_regnum()  :  gdbarch.c
<item>hashname()  :  buildsym.c
<item>lookup_function_type()  :  gdbtypes.c
<item>lookup_fundamental_type()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>objfile_text_section_offset()  :  objfiles.c
<item>symbol_set_names()  :  symtab.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), concat(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_objfile  :  objfiles.c
<item>file_symbols  :  buildsym.c
<item>global_symbols  :  buildsym.c
<item>local_n_btshft  :  coffread.c
<item>local_n_tmask  :  coffread.c
<item>local_symbols  :  buildsym.c
<item>opaque_type_chain  :  coffread.c
<item>within_function  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function read_one_sym()

<p><tt>static void read_one_sym ( struct coff_symbol* cs, struct internal_syment* sym, union internal_auxent* aux )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>coffread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cs_section_address()  :  coffread.c
<item>getsymname()  :  coffread.c
<item>bfd_bread()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_read_enum_type()  :  coffread.c
<item>coff_read_struct_type()  :  coffread.c
<item>coff_symtab_read()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>local_auxesz  :  coffread.c
<item>local_n_btmask  :  coffread.c
<item>local_n_tmask  :  coffread.c
<item>local_symesz  :  coffread.c
<item>nlist_bfd_global  :  coffread.c
<item>pe_file  :  coffread.c
<item>symfile_bfd  :  coffread.c
<item>symnum  :  buildsym.c
<item>temp_aux  :  coffread.c
<item>temp_sym  :  coffread.c
</itemize>
</descrip>

<sect1>Local Function record_minimal_symbol()

<p><tt>static void record_minimal_symbol ( char* name, CORE_ADDR address, enum minimal_symbol_type type, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>prim_record_minimal_symbol()  :  minsyms.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
</itemize>
</descrip>

</article>
