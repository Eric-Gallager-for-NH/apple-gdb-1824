{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF blockframe.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File blockframe.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "annotate.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "regcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dummy-frame.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable cache_pc_function_low\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR cache_pc_function_low\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell clear_pc_function_cache()\cell\cell\row
\cell find_pc_partial_function_impl()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable cache_pc_function_high\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR cache_pc_function_high\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell clear_pc_function_cache()\cell\cell\row
\cell find_pc_partial_function_impl()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable cache_pc_function_name\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* cache_pc_function_name\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell clear_pc_function_cache()\cell\cell\row
\cell find_pc_partial_function_impl()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable cache_pc_function_inlining\par}
{\s5\f1\fs20\ql\sb50\sa50 static int cache_pc_function_inlining\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell clear_pc_function_cache()\cell\cell\row
\cell find_pc_partial_function_impl()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable cache_pc_function_section\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct bfd_section* cache_pc_function_section\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell clear_pc_function_cache()\cell\cell\row
\cell find_pc_partial_function_impl()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function addr_inside_main_func()\par}
{\s5\f1\fs20\ql\sb50\sa50 int addr_inside_main_func ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell block_highest_pc()\cell block.c\cell\row
\cell find_pc_function()\cell blockframe.c\cell\row
\cell find_pc_sect_section()\cell objfiles.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell main_name()\cell symtab.c\cell\row
Refs Var:\cell symfile_objfile\cell objfiles.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function block_innermost_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_info* block_innermost_frame ( struct block* block )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell block_contains_pc()\cell block.c\cell\row
\cell get_frame_address_in_block()\cell frame.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
Called by:\cell evaluate_subexp_for_address()\cell eval.c\cell\row
\cell evaluate_subexp_with_coercion()\cell eval.c\cell\row
\cell value_of_variable()\cell valops.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function clear_pc_function_cache()\par}
{\s5\f1\fs20\ql\sb50\sa50 void clear_pc_function_cache ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Called by:\cell clear_symtab_users()\cell symfile.c\cell\row
\cell free_objfile_internal()\cell objfiles.c\cell\row
Refs Var:\cell cache_pc_function_high\cell blockframe.c\cell\row
\cell cache_pc_function_inlining\cell blockframe.c\cell\row
\cell cache_pc_function_low\cell blockframe.c\cell\row
\cell cache_pc_function_name\cell blockframe.c\cell\row
\cell cache_pc_function_section\cell blockframe.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_pc_function()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* find_pc_function ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell find_pc_mapped_section()\cell symfile.c\cell\row
\cell find_pc_sect_function()\cell blockframe.c\cell\row
Called by:\cell addr_inside_main_func()\cell blockframe.c\cell\row
\cell cp_print_class_method()\cell cp-valprint.c\cell\row
\cell decode_all_digits()\cell linespec.c\cell\row
\cell decode_all_digits_exhaustive()\cell linespec.c\cell\row
\cell decode_objc()\cell linespec.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell finish_command()\cell infcmd.c\cell\row
\cell finish_inlined_subroutine_command()\cell infcmd.c\cell\row
\cell finish_tfind_command()\cell tracepoint.c\cell\row
\cell get_closure_implementation_fn()\cell gdbtypes.c\cell\row
\cell get_frame_language()\cell stack.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell info_common_command()\cell f-valprint.c\cell\row
\cell jump_command()\cell infcmd.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell pascal_object_print_class_method()\cell p-valprint.c\cell\row
\cell print_inlined_frame()\cell inlining.c\cell\row
\cell proceed()\cell infrun.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell set_traceframe_context()\cell tracepoint.c\cell\row
\cell until_next_command()\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_pc_function_no_inlined()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* find_pc_function_no_inlined ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell find_pc_mapped_section()\cell symfile.c\cell\row
\cell find_pc_sect_function_no_inlined()\cell blockframe.c\cell\row
Called by:\cell normal_stop()\cell infrun.c\cell\row
\cell print_frame()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_pc_partial_function()\par}
{\s5\f1\fs20\ql\sb50\sa50 int find_pc_partial_function ( CORE_ADDR pc, const char** name, CORE_ADDR* address, CORE_ADDR* endaddr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell find_pc_partial_function_impl()\cell blockframe.c\cell\row
Called by:\cell do_check_is_thread_unsafe()\cell valops.c\cell\row
\cell func_command()\cell stack.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell step_1_inlining()\cell infcmd.c\cell\row
\cell step_once()\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_pc_partial_function_no_inlined()\par}
{\s5\f1\fs20\ql\sb50\sa50 int find_pc_partial_function_no_inlined ( CORE_ADDR pc, const char** name, CORE_ADDR* address, CORE_ADDR* endaddr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell find_pc_partial_function_impl()\cell blockframe.c\cell\row
Called by:\cell find_objc_msgsend()\cell objc-lang.c\cell\row
\cell find_pc_offset()\cell disasm.c\cell\row
\cell in_prologue()\cell symtab.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell proceed()\cell infrun.c\cell\row
\cell skip_prologue_using_sal()\cell symtab.c\cell\row
\cell step_1_no_inlining()\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_pc_sect_function()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* find_pc_sect_function ( CORE_ADDR pc, struct bfd_section* section )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell block_for_pc_sect()\cell block.c\cell\row
\cell block_function()\cell block.c\cell\row
\cell block_inlined_function()\cell inlining.c\cell\row
Called by:\cell break_command_2()\cell breakpoint.c\cell\row
\cell build_address_symbolic()\cell printcmd.c\cell\row
\cell decode_objc()\cell linespec.c\cell\row
\cell find_methods()\cell objc-lang.c\cell\row
\cell find_pc_function()\cell blockframe.c\cell\row
\cell find_pc_partial_function_impl()\cell blockframe.c\cell\row
\cell print_one_breakpoint()\cell breakpoint.c\cell\row
\cell tracepoints_info()\cell tracepoint.c\cell\row
Refs Var:\cell cached_mapped_section\cell symtab.c\cell\row
\cell cached_pc_function\cell symtab.c\cell\row
\cell last_function_lookup_pc\cell symtab.c\cell\row
\cell last_mapped_section_lookup_pc\cell symtab.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_pc_sect_function_no_inlined()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* find_pc_sect_function_no_inlined ( CORE_ADDR pc, struct bfd_section* section )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell block_for_pc_sect()\cell block.c\cell\row
\cell block_function()\cell block.c\cell\row
Called by:\cell find_pc_function_no_inlined()\cell blockframe.c\cell\row
\cell find_pc_partial_function_impl()\cell blockframe.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_block()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct block* get_frame_block ( struct frame_info* frame, CORE_ADDR* addr_in_block )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell block_for_pc()\cell block.c\cell\row
\cell get_frame_address_in_block()\cell frame.c\cell\row
Called by:\cell get_frame_function()\cell blockframe.c\cell\row
\cell get_frame_function_inlined()\cell blockframe.c\cell\row
\cell get_selected_block()\cell stack.c\cell\row
\cell print_frame_label_vars()\cell stack.c\cell\row
\cell print_frame_local_vars()\cell stack.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_function()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* get_frame_function ( struct frame_info* frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell block_function()\cell block.c\cell\row
\cell get_frame_block()\cell blockframe.c\cell\row
Called by:\cell dwarf_expr_frame_base()\cell dwarf2loc.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell jump_command()\cell infcmd.c\cell\row
\cell print_frame_arg_vars()\cell stack.c\cell\row
\cell return_command()\cell stack.c\cell\row
\cell value_of_local()\cell valops.c\cell\row
\cell value_of_this()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_function_inlined()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* get_frame_function_inlined ( struct frame_info* frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell block_inlined_function()\cell inlining.c\cell\row
\cell find_pc_mapped_section()\cell symfile.c\cell\row
\cell get_frame_block()\cell blockframe.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_pc_function_start()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR get_pc_function_start ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell block_for_pc()\cell block.c\cell\row
\cell block_function()\cell block.c\cell\row
\cell find_pc_section()\cell objfiles.c\cell\row
\cell lookup_minimal_symbol_by_pc()\cell minsyms.c\cell\row
Called by:\cell frame_func_unwind()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_pc_partial_function_impl()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int find_pc_partial_function_impl ( CORE_ADDR pc, const char** name, CORE_ADDR* address, CORE_ADDR* endaddr, int inlining_flag )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell blockframe.c\cell\cell\row
Calls: \cell block_highest_pc()\cell block.c\cell\row
\cell find_pc_overlay()\cell symfile.c\cell\row
\cell find_pc_sect_function()\cell blockframe.c\cell\row
\cell find_pc_sect_function_no_inlined()\cell blockframe.c\cell\row
\cell find_pc_sect_psymbol()\cell symtab.c\cell\row
\cell find_pc_sect_psymtab()\cell symtab.c\cell\row
\cell find_pc_sect_section()\cell objfiles.c\cell\row
\cell find_pc_section()\cell objfiles.c\cell\row
\cell lookup_minimal_symbol_by_pc_section()\cell minsyms.c\cell\row
\cell overlay_mapped_address()\cell symfile.c\cell\row
\cell overlay_unmapped_address()\cell symfile.c\cell\row
\cell pc_in_unmapped_range()\cell symfile.c\cell\row
\cell psymtab_to_symtab()\cell symfile.c\cell\row
Called by:\cell find_pc_partial_function()\cell blockframe.c\cell\row
\cell find_pc_partial_function_no_inlined()\cell blockframe.c\cell\row
Refs Var:\cell cache_pc_function_high\cell blockframe.c\cell\row
\cell cache_pc_function_inlining\cell blockframe.c\cell\row
\cell cache_pc_function_low\cell blockframe.c\cell\row
\cell cache_pc_function_name\cell blockframe.c\cell\row
\cell cache_pc_function_section\cell blockframe.c\cell\row
\cell current_target\cell target/target.c\cell\row
\intbl0
}
