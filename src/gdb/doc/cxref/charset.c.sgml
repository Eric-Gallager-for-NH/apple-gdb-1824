<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF charset.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for charset.c of gdb.cxref.
<author>cxref

<sect>File charset.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;charset.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define GDB_DEFAULT_HOST_CHARSET &quot;UTF-8&quot;</tt><newline>
<p>
<tt>#define GDB_DEFAULT_TARGET_CHARSET &quot;UTF-8&quot;</tt><newline>

<sect1>Type struct charset

<p>
<itemize>
<item><tt>struct charset</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct charset* next;</tt><newline>
<item><tt>const char* name;</tt><newline>
<item><tt>int valid_host_charset;</tt><newline>
<item><tt>int (*host_char_print_literally)(void* baton,int host_char);</tt><newline>
<item><tt>void* host_char_print_literally_baton;</tt><newline>
<item><tt>int (*target_char_to_control_char)(void* baton,int target_char,int* target_ctrl_char);</tt><newline>
<item><tt>void* target_char_to_control_char_baton;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct translation

<p>
<itemize>
<item><tt>struct translation</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct translation* next;</tt><newline>
<item><tt>const char* from;</tt><newline>
<item><tt>const char* to;</tt><newline>
<item><tt>const char* (*c_target_char_has_backslash_escape)(void* baton,int target_char);</tt><newline>
<item><tt>void* c_target_char_has_backslash_escape_baton;</tt><newline>
<item><tt>int (*c_parse_backslash)(void* baton,int host_char,int* target_char);</tt><newline>
<item><tt>void* c_parse_backslash_baton;</tt><newline>
<item><tt>int (*convert_char)(void* baton,int from,int* to);</tt><newline>
<item><tt>void* convert_char_baton;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct cached_iconv

<p>
<itemize>
<item><tt>struct cached_iconv</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>char nothing;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Local Variables

<p>
<bf>host_charset_name</bf><newline>
<tt>static const char* host_charset_name</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()
<item>set_charset_sfunc()
<item>set_host_charset_sfunc()
</itemize>
</descrip>
<p>
<bf>target_charset_name</bf><newline>
<tt>static const char* target_charset_name</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()
<item>set_charset_sfunc()
<item>set_target_charset_sfunc()
</itemize>
</descrip>
<p>
<bf>host_charset_enum</bf><newline>
<tt>static const char* host_charset_enum[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()
</itemize>
</descrip>
<p>
<bf>target_charset_enum</bf><newline>
<tt>static const char* target_charset_enum[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()
</itemize>
</descrip>
<p>
<bf>all_charsets</bf><newline>
<tt>static struct charset* all_charsets</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>lookup_charset()
<item>register_charset()
</itemize>
</descrip>
<p>
<bf>all_translations</bf><newline>
<tt>static struct translation* all_translations</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>lookup_translation()
<item>register_translation()
</itemize>
</descrip>
<p>
<bf>backslashable</bf><newline>
<tt>static char backslashable[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>default_c_parse_backslash()
</itemize>
</descrip>
<p>
<bf>backslashed</bf><newline>
<tt>static const char* backslashed[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>default_c_target_char_has_backslash_escape()
</itemize>
</descrip>
<p>
<bf>represented</bf><newline>
<tt>static char represented[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>default_c_parse_backslash()
<item>default_c_target_char_has_backslash_escape()
</itemize>
</descrip>
<p>
<bf>ascii_to_iso_8859_1_table</bf><newline>
<tt>static int ascii_to_iso_8859_1_table[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()
</itemize>
</descrip>
<p>
<bf>ascii_to_ebcdic_us_table</bf><newline>
<tt>static int ascii_to_ebcdic_us_table[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()
</itemize>
</descrip>
<p>
<bf>ascii_to_ibm1047_table</bf><newline>
<tt>static int ascii_to_ibm1047_table[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()
</itemize>
</descrip>
<p>
<bf>iso_8859_1_to_ascii_table</bf><newline>
<tt>static int iso_8859_1_to_ascii_table[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()
</itemize>
</descrip>
<p>
<bf>iso_8859_1_to_ebcdic_us_table</bf><newline>
<tt>static int iso_8859_1_to_ebcdic_us_table[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()
</itemize>
</descrip>
<p>
<bf>iso_8859_1_to_ibm1047_table</bf><newline>
<tt>static int iso_8859_1_to_ibm1047_table[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()
</itemize>
</descrip>
<p>
<bf>ebcdic_us_to_ascii_table</bf><newline>
<tt>static int ebcdic_us_to_ascii_table[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()
</itemize>
</descrip>
<p>
<bf>ebcdic_us_to_iso_8859_1_table</bf><newline>
<tt>static int ebcdic_us_to_iso_8859_1_table[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()
</itemize>
</descrip>
<p>
<bf>ebcdic_us_to_ibm1047_table</bf><newline>
<tt>static int ebcdic_us_to_ibm1047_table[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()
</itemize>
</descrip>
<p>
<bf>ibm1047_to_ascii_table</bf><newline>
<tt>static int ibm1047_to_ascii_table[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()
</itemize>
</descrip>
<p>
<bf>ibm1047_to_iso_8859_1_table</bf><newline>
<tt>static int ibm1047_to_iso_8859_1_table[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()
</itemize>
</descrip>
<p>
<bf>ibm1047_to_ebcdic_us_table</bf><newline>
<tt>static int ibm1047_to_ebcdic_us_table[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()
</itemize>
</descrip>
<p>
<bf>current_host_charset</bf><newline>
<tt>static struct charset* current_host_charset</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>host_char_print_literally()
<item>host_charset()
<item>set_host_and_target_charsets()
<item>set_target_charset()
<item>show_charset()
</itemize>
</descrip>
<p>
<bf>current_target_charset</bf><newline>
<tt>static struct charset* current_target_charset</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>set_host_and_target_charsets()
<item>set_host_charset()
<item>show_charset()
<item>target_char_to_control_char()
<item>target_charset()
</itemize>
</descrip>
<p>
<bf>c_target_char_has_backslash_escape_func</bf><newline>
<tt>static const char* (*c_target_char_has_backslash_escape_func)(void* baton,int target_char)</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_target_char_has_backslash_escape()
<item>set_host_and_target_charsets()
</itemize>
</descrip>
<p>
<bf>c_target_char_has_backslash_escape_baton</bf><newline>
<tt>static void* c_target_char_has_backslash_escape_baton</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_target_char_has_backslash_escape()
<item>set_host_and_target_charsets()
</itemize>
</descrip>
<p>
<bf>c_parse_backslash_func</bf><newline>
<tt>static int (*c_parse_backslash_func)(void* baton,int host_char,int* target_char)</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_parse_backslash()
<item>set_host_and_target_charsets()
</itemize>
</descrip>
<p>
<bf>c_parse_backslash_baton</bf><newline>
<tt>static void* c_parse_backslash_baton</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_parse_backslash()
<item>set_host_and_target_charsets()
</itemize>
</descrip>
<p>
<bf>host_char_to_target_func</bf><newline>
<tt>static int (*host_char_to_target_func)(void* baton,int host_char,int* target_char)</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>host_char_to_target()
<item>set_host_and_target_charsets()
</itemize>
</descrip>
<p>
<bf>host_char_to_target_baton</bf><newline>
<tt>static void* host_char_to_target_baton</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>host_char_to_target()
<item>set_host_and_target_charsets()
</itemize>
</descrip>
<p>
<bf>target_char_to_host_func</bf><newline>
<tt>static int (*target_char_to_host_func)(void* baton,int target_char,int* host_char)</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>set_host_and_target_charsets()
<item>target_char_to_host()
</itemize>
</descrip>
<p>
<bf>target_char_to_host_baton</bf><newline>
<tt>static void* target_char_to_host_baton</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>set_host_and_target_charsets()
<item>target_char_to_host()
</itemize>
</descrip>
<p>
<bf>cached_iconv_host_to_target</bf><newline>
<tt>static struct cached_iconv cached_iconv_host_to_target</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>set_host_and_target_charsets()
</itemize>
</descrip>
<p>
<bf>cached_iconv_target_to_host</bf><newline>
<tt>static struct cached_iconv cached_iconv_target_to_host</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>set_host_and_target_charsets()
</itemize>
</descrip>

<sect1>Global Function _initialize_charset()

<p><tt>void _initialize_charset ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>charset.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ebcdic_family_charset()  :  charset.c
<item>iso_8859_family_charset()  :  charset.c
<item>register_charset()  :  charset.c
<item>register_iconv_charsets()  :  charset.c
<item>register_translation()  :  charset.c
<item>set_host_charset()  :  charset.c
<item>set_target_charset()  :  charset.c
<item>simple_charset()  :  charset.c
<item>simple_table_translation()  :  charset.c
<item>utf_8_family_charset()  :  charset.c
<item>add_setshow_enum_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>ascii_print_literally()  :  charset.c
<item>ascii_to_control()  :  charset.c
<item>set_charset_sfunc()  :  charset.c
<item>set_host_charset_sfunc()  :  charset.c
<item>set_target_charset_sfunc()  :  charset.c
<item>show_charset()  :  charset.c
<item>show_host_charset_name()  :  charset.c
<item>show_target_charset_name()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ascii_to_ebcdic_us_table  :  charset.c
<item>ascii_to_ibm1047_table  :  charset.c
<item>ascii_to_iso_8859_1_table  :  charset.c
<item>ebcdic_us_to_ascii_table  :  charset.c
<item>ebcdic_us_to_ibm1047_table  :  charset.c
<item>ebcdic_us_to_iso_8859_1_table  :  charset.c
<item>host_charset_enum  :  charset.c
<item>host_charset_name  :  charset.c
<item>ibm1047_to_ascii_table  :  charset.c
<item>ibm1047_to_ebcdic_us_table  :  charset.c
<item>ibm1047_to_iso_8859_1_table  :  charset.c
<item>iso_8859_1_to_ascii_table  :  charset.c
<item>iso_8859_1_to_ebcdic_us_table  :  charset.c
<item>iso_8859_1_to_ibm1047_table  :  charset.c
<item>target_charset_enum  :  charset.c
<item>target_charset_name  :  charset.c
<item>setlist, showlist
</itemize>
</descrip>

<sect1>Global Function c_parse_backslash()

<p><tt>int c_parse_backslash ( int host_char, int* target_char )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>charset.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_escape()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>c_parse_backslash_baton  :  charset.c
<item>c_parse_backslash_func  :  charset.c
</itemize>
</descrip>

<sect1>Global Function c_target_char_has_backslash_escape()

<p><tt>const char* c_target_char_has_backslash_escape ( int target_char )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>charset.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_emit_char()  :  c-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>c_target_char_has_backslash_escape_baton  :  charset.c
<item>c_target_char_has_backslash_escape_func  :  charset.c
</itemize>
</descrip>

<sect1>Global Function host_char_print_literally()

<p><tt>int host_char_print_literally ( int host_char )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>charset.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_emit_char()  :  c-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_host_charset  :  charset.c
</itemize>
</descrip>

<sect1>Global Function host_char_to_target()

<p><tt>int host_char_to_target ( int host_char, int* target_char )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>charset.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
<item>default_c_parse_backslash()  :  charset.c
<item>parse_escape()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>host_char_to_target_baton  :  charset.c
<item>host_char_to_target_func  :  charset.c
</itemize>
</descrip>

<sect1>Global Function host_charset()

<p><tt>const char* host_charset ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>charset.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_escape()  :  utils.c
<item>show_charset()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_host_charset  :  charset.c
</itemize>
</descrip>

<sect1>Global Function target_char_to_control_char()

<p><tt>int target_char_to_control_char ( int target_char, int* target_ctrl_char )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>charset.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_escape()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target_charset  :  charset.c
</itemize>
</descrip>

<sect1>Global Function target_char_to_host()

<p><tt>int target_char_to_host ( int target_char, int* host_char )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>charset.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_emit_char()  :  c-lang.c
<item>default_c_target_char_has_backslash_escape()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>target_char_to_host_baton  :  charset.c
<item>target_char_to_host_func  :  charset.c
</itemize>
</descrip>

<sect1>Global Function target_charset()

<p><tt>const char* target_charset ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>charset.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
<item>no_control_char_error()  :  utils.c
<item>parse_escape()  :  utils.c
<item>show_charset()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target_charset  :  charset.c
</itemize>
</descrip>

<sect1>Local Function ascii_print_literally()

<p><tt>static int ascii_print_literally ( void* baton, int c )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function ascii_to_control()

<p><tt>static int ascii_to_control ( void* baton, int c, int* ctrl_char )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function cached_iconv_convert()

<p><tt>static int cached_iconv_convert ( struct cached_iconv* ci, int from_char, int* to_char )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function check_iconv_cache()

<p><tt>static int check_iconv_cache ( struct cached_iconv* ci, struct charset* from, struct charset* to )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>__error()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_host_and_target_charsets()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function check_valid_host_charset()

<p><tt>static void check_valid_host_charset ( struct charset* cs )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_charset_sfunc()  :  charset.c
<item>set_host_charset()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function default_c_parse_backslash()

<p><tt>static int default_c_parse_backslash ( void* baton, int host_char, int* target_char )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>host_char_to_target()  :  charset.c
<item>strchr()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>set_host_and_target_charsets()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>backslashable  :  charset.c
<item>represented  :  charset.c
</itemize>
</descrip>

<sect1>Local Function default_c_target_char_has_backslash_escape()

<p><tt>static const char* default_c_target_char_has_backslash_escape ( void* baton, int target_char )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>target_char_to_host()  :  charset.c
<item>strchr()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>set_host_and_target_charsets()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>backslashed  :  charset.c
<item>represented  :  charset.c
</itemize>
</descrip>

<sect1>Local Function ebcdic_family_charset()

<p><tt>static struct charset* ebcdic_family_charset ( const char* name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>simple_charset()  :  charset.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_charset()  :  charset.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>ebcdic_print_literally()  :  charset.c
<item>ebcdic_to_control()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function ebcdic_print_literally()

<p><tt>static int ebcdic_print_literally ( void* baton, int c )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>ebcdic_family_charset()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function ebcdic_to_control()

<p><tt>static int ebcdic_to_control ( void* baton, int c, int* ctrl_char )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>ebcdic_family_charset()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function iconv_convert()

<p><tt>static int iconv_convert ( void* baton, int from_char, int* to_char )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>warning()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>set_host_and_target_charsets()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function identity_either_char_to_other()

<p><tt>static int identity_either_char_to_other ( void* baton, int either_char, int* other_char )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>set_host_and_target_charsets()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function iso_8859_family_charset()

<p><tt>static struct charset* iso_8859_family_charset ( const char* name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>simple_charset()  :  charset.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_charset()  :  charset.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>iso_8859_print_literally()  :  charset.c
<item>iso_8859_to_control()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function iso_8859_print_literally()

<p><tt>static int iso_8859_print_literally ( void* baton, int c )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>iso_8859_family_charset()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>sevenbit_strings  :  utils.c
</itemize>
</descrip>

<sect1>Local Function iso_8859_to_control()

<p><tt>static int iso_8859_to_control ( void* baton, int c, int* ctrl_char )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>iso_8859_family_charset()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function lookup_charset()

<p><tt>static struct charset* lookup_charset ( const char* name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>lookup_charset_or_error()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>all_charsets  :  charset.c
</itemize>
</descrip>

<sect1>Local Function lookup_charset_or_error()

<p><tt>static struct charset* lookup_charset_or_error ( const char* name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>lookup_charset()  :  charset.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_charset_sfunc()  :  charset.c
<item>set_host_charset()  :  charset.c
<item>set_target_charset()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function lookup_translation()

<p><tt>static struct translation* lookup_translation ( const char* from, const char* to )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_host_and_target_charsets()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>all_translations  :  charset.c
</itemize>
</descrip>

<sect1>Local Function register_charset()

<p><tt>static void register_charset ( struct charset* cs )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>_initialize_charset()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>all_charsets  :  charset.c
</itemize>
</descrip>

<sect1>Local Function register_iconv_charsets()

<p><tt>static void register_iconv_charsets ( void )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>_initialize_charset()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function register_translation()

<p><tt>static void register_translation ( struct translation* t )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>_initialize_charset()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>all_translations  :  charset.c
</itemize>
</descrip>

<sect1>Local Function set_charset_sfunc()

<p><tt>static void set_charset_sfunc ( const char* charset, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>check_valid_host_charset()  :  charset.c
<item>lookup_charset_or_error()  :  charset.c
<item>set_host_and_target_charsets()  :  charset.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>host_charset_name  :  charset.c
<item>target_charset_name  :  charset.c
</itemize>
</descrip>

<sect1>Local Function set_host_and_target_charsets()

<p><tt>static void set_host_and_target_charsets ( struct charset* host, struct charset* target )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>check_iconv_cache()  :  charset.c
<item>error()  :  utils.c
<item>lookup_translation()  :  charset.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_charset_sfunc()  :  charset.c
<item>set_host_charset()  :  charset.c
<item>set_target_charset()  :  charset.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>default_c_parse_backslash()  :  charset.c
<item>default_c_target_char_has_backslash_escape()  :  charset.c
<item>iconv_convert()  :  charset.c
<item>identity_either_char_to_other()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>c_parse_backslash_baton  :  charset.c
<item>c_parse_backslash_func  :  charset.c
<item>c_target_char_has_backslash_escape_baton  :  charset.c
<item>c_target_char_has_backslash_escape_func  :  charset.c
<item>cached_iconv_host_to_target  :  charset.c
<item>cached_iconv_target_to_host  :  charset.c
<item>current_host_charset  :  charset.c
<item>current_target_charset  :  charset.c
<item>host_char_to_target_baton  :  charset.c
<item>host_char_to_target_func  :  charset.c
<item>target_char_to_host_baton  :  charset.c
<item>target_char_to_host_func  :  charset.c
</itemize>
</descrip>

<sect1>Local Function set_host_charset()

<p><tt>static void set_host_charset ( const char* charset )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>check_valid_host_charset()  :  charset.c
<item>lookup_charset_or_error()  :  charset.c
<item>set_host_and_target_charsets()  :  charset.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_charset()  :  charset.c
<item>set_host_charset_sfunc()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target_charset  :  charset.c
</itemize>
</descrip>

<sect1>Local Function set_host_charset_sfunc()

<p><tt>static void set_host_charset_sfunc ( const char* charset, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>set_host_charset()  :  charset.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>host_charset_name  :  charset.c
</itemize>
</descrip>

<sect1>Local Function set_target_charset()

<p><tt>static void set_target_charset ( const char* charset )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>lookup_charset_or_error()  :  charset.c
<item>set_host_and_target_charsets()  :  charset.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_charset()  :  charset.c
<item>set_target_charset_sfunc()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_host_charset  :  charset.c
</itemize>
</descrip>

<sect1>Local Function set_target_charset_sfunc()

<p><tt>static void set_target_charset_sfunc ( const char* charset, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>set_target_charset()  :  charset.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>target_charset_name  :  charset.c
</itemize>
</descrip>

<sect1>Local Function show_charset()

<p><tt>static void show_charset ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>host_charset()  :  charset.c
<item>target_charset()  :  charset.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_host_charset  :  charset.c
<item>current_target_charset  :  charset.c
</itemize>
</descrip>

<sect1>Local Function show_host_charset_name()

<p><tt>static void show_host_charset_name ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function show_target_charset_name()

<p><tt>static void show_target_charset_name ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_charset()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function simple_charset()

<p><tt>static struct charset* simple_charset ( const char* name, int valid_host_charset, int (*host_char_print_literally)(void* baton,int host_char), void* host_char_print_literally_baton, int (*target_char_to_control_char)(void* baton,int target_char,int* target_ctrl_char), void* target_char_to_control_char_baton )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_charset()  :  charset.c
<item>ebcdic_family_charset()  :  charset.c
<item>iso_8859_family_charset()  :  charset.c
<item>utf_8_family_charset()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function simple_table_translation()

<p><tt>static struct translation* simple_table_translation ( const char* from, const char* to, int* table )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>table_translation()  :  charset.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_charset()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function table_convert_char()

<p><tt>static int table_convert_char ( void* baton, int from, int* to )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>table_translation()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function table_translation()

<p><tt>static struct translation* table_translation ( const char* from, const char* to, int* table, const char* (*c_target_char_has_backslash_escape)(void* baton,int target_char), void* c_target_char_has_backslash_escape_baton, int (*c_parse_backslash)(void* baton,int host_char,int* target_char), void* c_parse_backslash_baton )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>simple_table_translation()  :  charset.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>table_convert_char()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function utf_8_family_charset()

<p><tt>static struct charset* utf_8_family_charset ( const char* name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>simple_charset()  :  charset.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_charset()  :  charset.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>utf_8_print_literally()  :  charset.c
<item>utf_8_to_control()  :  charset.c
</itemize>
</descrip>

<sect1>Local Function utf_8_print_literally()

<p><tt>static int utf_8_print_literally ( void* baton, int c )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>utf_8_family_charset()  :  charset.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>sevenbit_strings  :  utils.c
</itemize>
</descrip>

<sect1>Local Function utf_8_to_control()

<p><tt>static int utf_8_to_control ( void* baton, int c, int* ctrl_char )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>utf_8_family_charset()  :  charset.c
</itemize>
</descrip>

</article>
