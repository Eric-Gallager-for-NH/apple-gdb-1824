<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF printcmd.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for printcmd.c of gdb.cxref.
<author>cxref

<sect>File printcmd.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;valprint.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;annotate.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;completer.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;disasm.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;objc-lang.h&quot;</tt>
<itemize>
<item><tt>#include &lt;Availability.h&gt;</tt>
</itemize>
</itemize>

<sect1>Type struct format_data

<p>
<itemize>
<item><tt>struct format_data</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int count;</tt><newline>
<item><tt>char format;</tt><newline>
<item><tt>char size;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct display

<p>
<itemize>
<item><tt>struct display</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct display* next;</tt><newline>
<item><tt>struct expression* exp;</tt><newline>
<item><tt>int number;</tt><newline>
<item><tt>struct format_data format;</tt><newline>
<item><tt>struct block* block;</tt><newline>
<item><tt>int enabled_p;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type enum argclass

<p>
<itemize>
<item><tt>enum argclass</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>no_arg;</tt><newline>
<item><tt>int_arg;</tt><newline>
<item><tt>string_arg;</tt><newline>
<item><tt>double_arg;</tt><newline>
<item><tt>long_long_arg;</tt><newline>
<item><tt>pointer_arg;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable inspect_it

<p>
<tt>int inspect_it</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-valprint.c
<item>c-lang.c
<item>c-valprint.c
<item>cp-valprint.c
<item>f-lang.c
<item>f-valprint.c
<item>jv-valprint.c
<item>m2-lang.c
<item>objc-lang.c
<item>p-lang.c
<item>p-valprint.c
<item>printcmd.c
<item>scm-valprint.c
<item>valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>c_printstr()  :  c-lang.c
<item>cp_print_value_fields()  :  cp-valprint.c
<item>f_printstr()  :  f-lang.c
<item>java_print_value_fields()  :  jv-valprint.c
<item>m2_printstr()  :  m2-lang.c
<item>objc_printstr()  :  objc-lang.c
<item>pascal_object_print_value_fields()  :  p-valprint.c
<item>pascal_printstr()  :  p-lang.c
<item>print_command_1()  :  printcmd.c
<item>print_field_values()  :  ada-valprint.c
<item>printstr()  :  ada-valprint.c
</itemize>
</descrip>

<sect1>Global Variable disassembly_name_length

<p>
<tt>int disassembly_name_length</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>disasm.c
<item>printcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
<item>build_address_symbolic()  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Variable current_display_number

<p>
<tt>int current_display_number</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
<item>disable_current_display()  :  printcmd.c
<item>do_one_display()  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Variable g_examine_i_size

<p>
<tt>char g_examine_i_size</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>print_formatted()  :  printcmd.c
</itemize>
</descrip>

<sect1>External Variables

<p>
<bf>asm_demangle</bf><newline>
<tt>extern int asm_demangle</tt><newline>
<descrip>
<tag>Defined in:</tag>
<itemize>
<item>asm_demangle</itemize>
</descrip>
<p>
<bf>addressprint</bf><newline>
<tt>extern int addressprint</tt><newline>
<descrip>
<tag>Defined in:</tag>
<itemize>
<item>addressprint</itemize>
</descrip>
<p>
<bf>epoch_interface</bf><newline>
<tt>extern int epoch_interface</tt><newline>
<descrip>
<tag>Defined in:</tag>
<itemize>
<item>epoch_interface</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>last_format</bf><newline>
<tt>static char last_format</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>print_command_1()
<item>x_command()
</itemize>
</descrip>
<p>
<bf>last_size</bf><newline>
<tt>static char last_size</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>x_command()
</itemize>
</descrip>
<p>
<bf>next_address</bf><newline>
<tt>static CORE_ADDR next_address</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>do_examine()
<item>print_formatted()
<item>set_next_address()
<item>x_command()
</itemize>
</descrip>
<p>
<bf>last_examine_address</bf><newline>
<tt>static CORE_ADDR last_examine_address</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>do_examine()
<item>x_command()
</itemize>
</descrip>
<p>
<bf>last_examine_value</bf><newline>
<tt>static struct value* last_examine_value</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>do_examine()
<item>x_command()
</itemize>
</descrip>
<p>
<bf>max_symbolic_offset</bf><newline>
<tt>static unsigned int max_symbolic_offset</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()
<item>build_address_symbolic()
</itemize>
</descrip>
<p>
<bf>print_symbol_filename</bf><newline>
<tt>static int print_symbol_filename</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()
<item>build_address_symbolic()
<item>print_address_symbolic()
</itemize>
</descrip>
<p>
<bf>display_chain</bf><newline>
<tt>static struct display* display_chain</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>clear_displays()
<item>delete_display()
<item>disable_display()
<item>disable_display_command()
<item>display_command()
<item>display_info()
<item>do_displays()
<item>enable_display()
</itemize>
</descrip>
<p>
<bf>display_number</bf><newline>
<tt>static int display_number</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>display_command()
</itemize>
</descrip>
<p>
<bf>examine_i_type</bf><newline>
<tt>static struct type* examine_i_type</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()
<item>do_examine()
</itemize>
</descrip>
<p>
<bf>examine_b_type</bf><newline>
<tt>static struct type* examine_b_type</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()
<item>do_examine()
</itemize>
</descrip>
<p>
<bf>examine_h_type</bf><newline>
<tt>static struct type* examine_h_type</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()
<item>do_examine()
</itemize>
</descrip>
<p>
<bf>examine_w_type</bf><newline>
<tt>static struct type* examine_w_type</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()
<item>do_examine()
</itemize>
</descrip>
<p>
<bf>examine_g_type</bf><newline>
<tt>static struct type* examine_g_type</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()
<item>do_examine()
</itemize>
</descrip>
<p>
<bf>print_command_runs_all_threads_p</bf><newline>
<tt>static int print_command_runs_all_threads_p</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()
<item>print_command_1()
</itemize>
</descrip>

<sect1>Global Function _initialize_printcmd()

<p><tt>void _initialize_printcmd ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>init_type()  :  gdbtypes.c
<item>add_alias_cmd(), add_cmd(), add_com(), add_com_alias(), add_info(), add_prefix_cmd(), add_setshow_boolean_cmd(), add_setshow_uinteger_cmd(), add_setshow_zinteger_cmd(), set_cmd_completer()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>address_info()  :  printcmd.c
<item>call_command()  :  printcmd.c
<item>disable_display_command()  :  printcmd.c
<item>display_command()  :  printcmd.c
<item>display_info()  :  printcmd.c
<item>enable_display()  :  printcmd.c
<item>inspect_command()  :  printcmd.c
<item>invoke_block_command()  :  printcmd.c
<item>location_completer()  :  completer.c
<item>output_command()  :  printcmd.c
<item>print_command()  :  printcmd.c
<item>printf_command()  :  printcmd.c
<item>set_command()  :  printcmd.c
<item>show_max_symbolic_offset()  :  printcmd.c
<item>show_print_symbol_filename()  :  printcmd.c
<item>sym_info()  :  printcmd.c
<item>undisplay_command()  :  printcmd.c
<item>x_command()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_display_number  :  printcmd.c
<item>dbx_commands  :  main.c
<item>disassembly_name_length  :  printcmd.c
<item>examine_b_type  :  printcmd.c
<item>examine_g_type  :  printcmd.c
<item>examine_h_type  :  printcmd.c
<item>examine_i_type  :  printcmd.c
<item>examine_w_type  :  printcmd.c
<item>max_symbolic_offset  :  printcmd.c
<item>print_command_runs_all_threads_p  :  printcmd.c
<item>print_symbol_filename  :  printcmd.c
<item>cmdlist, deletelist, disablelist, enablelist, setlist, setprintlist, showlist, showprintlist
</itemize>
</descrip>

<sect1>Global Function build_address_symbolic()

<p><tt>int build_address_symbolic ( CORE_ADDR addr, int do_demangle, char** name, int* offset, char** filename, int* line, int* unmapped )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_overlay()  :  symfile.c
<item>find_pc_sect_function()  :  blockframe.c
<item>find_pc_sect_in_ordered_sections()  :  objfiles.c
<item>find_pc_sect_line()  :  symtab.c
<item>lookup_minimal_symbol_by_pc_section()  :  minsyms.c
<item>overlay_mapped_address()  :  symfile.c
<item>pc_in_unmapped_range()  :  symfile.c
<item>symbol_natural_name()  :  symtab.c
<item>strlen(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dump_insns()  :  disasm.c
<item>print_address_symbolic()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>asm_demangle  :  utils.c
<item>demangle  :  utils.c
<item>disassembly_name_length  :  printcmd.c
<item>max_symbolic_offset  :  printcmd.c
<item>overlay_debugging  :  symfile.c
<item>print_symbol_filename  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function clear_displays()

<p><tt>void clear_displays ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>clear_symtab_users()  :  symfile.c
<item>undisplay_command()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>display_chain  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function deprecated_print_address_numeric()

<p><tt>void deprecated_print_address_numeric ( CORE_ADDR addr, int use_local, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fputs_filtered()  :  utils.c
<item>gdbarch_addr_bit()  :  gdbarch.c
<item>paddress()  :  utils.c
<item>print_longest()  :  valprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
<item>address_info()  :  printcmd.c
<item>c_val_print()  :  c-valprint.c
<item>delete_breakpoint()  :  breakpoint.c
<item>describe_other_breakpoints()  :  breakpoint.c
<item>dump_die()  :  dwarf2read.c
<item>dump_msymbols()  :  symmisc.c
<item>dump_psymtab()  :  symmisc.c
<item>dump_symtab_1()  :  symmisc.c
<item>f_val_print()  :  f-valprint.c
<item>frame_info()  :  stack.c
<item>insert_bp_location()  :  breakpoint.c
<item>jump_command()  :  infcmd.c
<item>list_overlays_command()  :  symfile.c
<item>maintenance_check_symtabs()  :  symmisc.c
<item>maintenance_info_psymtabs()  :  symmisc.c
<item>mention()  :  breakpoint.c
<item>pascal_val_print()  :  p-valprint.c
<item>print_address()  :  printcmd.c
<item>print_address_demangle()  :  printcmd.c
<item>print_block_frame_labels()  :  stack.c
<item>print_function_pointer_address()  :  c-valprint.c
<item>print_partial_symbols()  :  symmisc.c
<item>print_symbol()  :  symmisc.c
<item>scope_info()  :  tracepoint.c
<item>trace_mention()  :  tracepoint.c
<item>val_print_string()  :  valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function disable_current_display()

<p><tt>void disable_current_display ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>disable_display()  :  printcmd.c
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>normal_stop()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_display_number  :  printcmd.c
<item>gdb_stderr  :  main.c
</itemize>
</descrip>

<sect1>Global Function disable_display()

<p><tt>void disable_display ( int num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>printf_unfiltered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>disable_current_display()  :  printcmd.c
<item>disable_display_command()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>display_chain  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function do_displays()

<p><tt>void do_displays ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>breakpoint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_one_display()  :  printcmd.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>display_command()  :  printcmd.c
<item>finish_tfind_command()  :  tracepoint.c
<item>normal_stop()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>display_chain  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function output_command()

<p><tt>void output_command ( const char* exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>decode_format()  :  printcmd.c
<item>do_cleanups()  :  utils.c
<item>evaluate_expression()  :  eval.c
<item>gdb_flush()  :  ui-file.c
<item>make_cleanup()  :  utils.c
<item>parse_expression()  :  parse.c
<item>print_formatted()  :  printcmd.c
<item>validate_format()  :  printcmd.c
<item>value_type()  :  value.c
<item>wrap_here()  :  utils.c
<item>annotate_value_begin(), annotate_value_end()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>trace_dump_command()  :  tracepoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>innermost_block  :  parse.c
</itemize>
</descrip>

<sect1>Global Function print_address()

<p><tt>void print_address ( CORE_ADDR addr, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_print_address_numeric()  :  printcmd.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dis_asm_print_address()  :  disasm.c
<item>do_examine()  :  printcmd.c
<item>line_info()  :  source.c
<item>print_scalar_formatted()  :  printcmd.c
<item>trace_find_line_command()  :  tracepoint.c
</itemize>
</descrip>

<sect1>Global Function print_address_demangle()

<p><tt>void print_address_demangle ( CORE_ADDR addr, struct ui_file* stream, int do_demangle )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_print_address_numeric()  :  printcmd.c
<item>fprintf_filtered()  :  utils.c
<item>print_address_symbolic()  :  printcmd.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_val_print()  :  c-valprint.c
<item>f_val_print()  :  f-valprint.c
<item>java_val_print()  :  jv-valprint.c
<item>pascal_val_print()  :  p-valprint.c
<item>print_function_pointer_address()  :  c-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>addressprint  :  valprint.c
</itemize>
</descrip>

<sect1>Global Function print_address_symbolic()

<p><tt>void print_address_symbolic ( CORE_ADDR addr, struct ui_file* stream, int do_demangle, const char* leadin )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>build_address_symbolic()  :  printcmd.c
<item>do_cleanups()  :  utils.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>gdbarch_addr_bit()  :  gdbarch.c
<item>make_cleanup()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_address_demangle()  :  printcmd.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>tracepoints_info()  :  tracepoint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>print_symbol_filename  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function print_scalar_formatted()

<p><tt>void print_scalar_formatted ( const void* valaddr, struct type* type, int format, int size, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbtypes.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>gdbarch_addr_bit()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>print_address()  :  printcmd.c
<item>print_binary_chars()  :  valprint.c
<item>print_char_chars()  :  valprint.c
<item>print_decimal_chars()  :  valprint.c
<item>print_floating()  :  valprint.c
<item>print_floating_in_hex()  :  valprint.c
<item>print_hex_chars()  :  valprint.c
<item>print_longest()  :  valprint.c
<item>print_octal_chars()  :  valprint.c
<item>print_ostype()  :  valprint.c
<item>unpack_long()  :  value.c
<item>unpack_pointer()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_print()  :  valprint.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_val_print_1()  :  ada-valprint.c
<item>c_val_print()  :  c-valprint.c
<item>f_val_print()  :  f-valprint.c
<item>java_val_print()  :  jv-valprint.c
<item>pascal_val_print()  :  p-valprint.c
<item>print_formatted()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_double  :  gdbtypes.c
<item>builtin_type_float  :  gdbtypes.c
<item>builtin_type_long_double  :  gdbtypes.c
<item>builtin_type_true_char  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function print_variable_value()

<p><tt>void print_variable_value ( struct symbol* var, struct frame_info* frame, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>read_var_value()  :  findvar.c
<item>value_print()  :  valprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>info_common_command()  :  f-valprint.c
<item>print_block_frame_locals()  :  stack.c
<item>print_frame_arg_vars()  :  stack.c
</itemize>
</descrip>

<sect1>Global Function set_next_address()

<p><tt>void set_next_address ( CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>lookup_internalvar()  :  value.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>set_internalvar()  :  value.c
<item>value_from_pointer()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_1()  :  breakpoint.c
<item>line_info()  :  source.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void  :  gdbtypes.c
<item>next_address  :  printcmd.c
</itemize>
</descrip>

<sect1>Global Function x_command()

<p><tt>void x_command ( const char* exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>decode_format()  :  printcmd.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>do_cleanups()  :  utils.c
<item>do_examine()  :  printcmd.c
<item>evaluate_expression()  :  eval.c
<item>lookup_internalvar()  :  value.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>make_cleanup()  :  utils.c
<item>parse_expression()  :  parse.c
<item>set_internalvar()  :  value.c
<item>value_as_address()  :  value.c
<item>value_from_pointer()  :  value.c
<item>value_ind()  :  valops.c
<item>value_lazy()  :  value.c
<item>value_type()  :  value.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_void  :  gdbtypes.c
<item>innermost_block  :  parse.c
<item>last_examine_address  :  printcmd.c
<item>last_examine_value  :  printcmd.c
<item>last_format  :  printcmd.c
<item>last_size  :  printcmd.c
<item>next_address  :  printcmd.c
</itemize>
</descrip>

<sect1>Local Function address_info()

<p><tt>static void address_info ( const char* exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_print_address_numeric()  :  printcmd.c
<item>error()  :  utils.c
<item>fprintf_symbol_filtered()  :  utils.c
<item>gdbarch_register_name()  :  gdbarch.c
<item>get_selected_block()  :  stack.c
<item>lookup_minimal_symbol()  :  minsyms.c
<item>lookup_symbol()  :  symtab.c
<item>overlay_unmapped_address()  :  symfile.c
<item>printf_filtered()  :  utils.c
<item>section_is_overlay()  :  symfile.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_language  :  language.c
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

<sect1>Local Function call_command()

<p><tt>static void call_command ( const char* exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>print_command_1()  :  printcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
</itemize>
</descrip>

<sect1>Local Function decode_format()

<p><tt>static struct format_data decode_format ( const char** string_ptr, int oformat, int osize )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_ptr_bit()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>atoi()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>display_command()  :  printcmd.c
<item>output_command()  :  printcmd.c
<item>print_command_1()  :  printcmd.c
<item>x_command()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function delete_display()

<p><tt>static void delete_display ( int num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>free_display()  :  printcmd.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>undisplay_command()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>display_chain  :  printcmd.c
</itemize>
</descrip>

<sect1>Local Function disable_display_command()

<p><tt>static void disable_display_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>disable_display()  :  printcmd.c
<item>error()  :  utils.c
<item>atoi()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>display_chain  :  printcmd.c
</itemize>
</descrip>

<sect1>Local Function display_command()

<p><tt>static void display_command ( const char* exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>decode_format()  :  printcmd.c
<item>do_displays()  :  printcmd.c
<item>do_one_display()  :  printcmd.c
<item>dont_repeat()  :  top.c
<item>parse_expression()  :  parse.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>display_chain  :  printcmd.c
<item>display_number  :  printcmd.c
<item>innermost_block  :  parse.c
</itemize>
</descrip>

<sect1>Local Function display_info()

<p><tt>static void display_info ( const char* ignore, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>contained_in()  :  block.c
<item>gdb_flush()  :  ui-file.c
<item>get_selected_block()  :  stack.c
<item>print_expression()  :  expprint.c
<item>printf_filtered()  :  utils.c
<item>printf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>display_chain  :  printcmd.c
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

<sect1>Local Function do_examine()

<p><tt>static void do_examine ( struct format_data fmt, CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdb_flush()  :  ui-file.c
<item>print_address()  :  printcmd.c
<item>print_formatted()  :  printcmd.c
<item>printf_filtered()  :  utils.c
<item>quit()  :  utils.c
<item>release_value()  :  value.c
<item>value_at_lazy()  :  valops.c
<item>value_free()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_one_display()  :  printcmd.c
<item>x_command()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>examine_b_type  :  printcmd.c
<item>examine_g_type  :  printcmd.c
<item>examine_h_type  :  printcmd.c
<item>examine_i_type  :  printcmd.c
<item>examine_w_type  :  printcmd.c
<item>gdb_null  :  main.c
<item>gdb_stdout  :  main.c
<item>last_examine_address  :  printcmd.c
<item>last_examine_value  :  printcmd.c
<item>next_address  :  printcmd.c
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Local Function do_one_display()

<p><tt>static void do_one_display ( struct display* d )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>contained_in()  :  block.c
<item>do_examine()  :  printcmd.c
<item>evaluate_expression()  :  eval.c
<item>gdb_flush()  :  ui-file.c
<item>gdbarch_addr_bits_remove()  :  gdbarch.c
<item>get_selected_block()  :  stack.c
<item>print_expression()  :  expprint.c
<item>print_formatted()  :  printcmd.c
<item>printf_filtered()  :  utils.c
<item>value_as_address()  :  value.c
<item>annotate_display_begin(), annotate_display_end(), annotate_display_expression(), annotate_display_expression_end(), annotate_display_format(), annotate_display_number_end(), annotate_display_value()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>display_command()  :  printcmd.c
<item>do_displays()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_display_number  :  printcmd.c
<item>current_gdbarch  :  gdbarch.c
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

<sect1>Local Function enable_display()

<p><tt>static void enable_display ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>printf_unfiltered()  :  utils.c
<item>atoi()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>display_chain  :  printcmd.c
</itemize>
</descrip>

<sect1>Local Function free_display()

<p><tt>static void free_display ( struct display* d )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>delete_display()  :  printcmd.c
</itemize>
</descrip>

<sect1>Local Function inspect_command()

<p><tt>static void inspect_command ( const char* exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>print_command_1()  :  printcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>epoch_interface  :  top.c
</itemize>
</descrip>

<sect1>Local Function invoke_block_command()

<p><tt>static void invoke_block_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>call_function_by_hand()  :  infcall.c
<item>check_typedef()  :  gdbtypes.c
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>evaluate_expression()  :  eval.c
<item>get_closure_implementation_fn()  :  gdbtypes.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_freeargv()  :  utils.c
<item>make_cleanup_set_restore_print_closure()  :  eval.c
<item>parse_expression()  :  parse.c
<item>print_formatted()  :  printcmd.c
<item>printf_filtered()  :  utils.c
<item>record_latest_value()  :  value.c
<item>value_type()  :  value.c
<item>xmalloc()  :  utils.c
<item>annotate_value_begin(), annotate_value_end(), annotate_value_history_begin(), annotate_value_history_end(), annotate_value_history_value(), buildargv()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>innermost_block  :  parse.c
</itemize>
</descrip>

<sect1>Local Function print_command()

<p><tt>static void print_command ( const char* exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>print_command_1()  :  printcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
</itemize>
</descrip>

<sect1>Local Function print_command_1()

<p><tt>static void print_command_1 ( const char* exp, int inspect, int voidprint )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_value_history()  :  value.c
<item>decode_format()  :  printcmd.c
<item>do_cleanups()  :  utils.c
<item>evaluate_expression()  :  eval.c
<item>make_cleanup()  :  utils.c
<item>parse_expression()  :  parse.c
<item>print_formatted()  :  printcmd.c
<item>printf_filtered()  :  utils.c
<item>printf_unfiltered()  :  utils.c
<item>record_latest_value()  :  value.c
<item>validate_format()  :  printcmd.c
<item>value_type()  :  value.c
<item>annotate_value_begin(), annotate_value_end(), annotate_value_history_begin(), annotate_value_history_end(), annotate_value_history_value()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>call_command()  :  printcmd.c
<item>inspect_command()  :  printcmd.c
<item>print_command()  :  printcmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>gdb_stdout  :  main.c
<item>innermost_block  :  parse.c
<item>inspect_it  :  printcmd.c
<item>last_format  :  printcmd.c
<item>print_command_runs_all_threads_p  :  printcmd.c
</itemize>
</descrip>

<sect1>Local Function print_formatted()

<p><tt>static void print_formatted ( struct value* val, int format, int size, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_value_address_hack()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>gdb_print_insn()  :  disasm.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>print_ostype()  :  valprint.c
<item>print_scalar_formatted()  :  printcmd.c
<item>printf_filtered()  :  utils.c
<item>val_print_string()  :  valprint.c
<item>value_contents()  :  value.c
<item>value_print()  :  valprint.c
<item>value_type()  :  value.c
<item>wrap_here()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_examine()  :  printcmd.c
<item>do_one_display()  :  printcmd.c
<item>invoke_block_command()  :  printcmd.c
<item>output_command()  :  printcmd.c
<item>print_command_1()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>g_examine_i_size  :  printcmd.c
<item>gdb_stdout  :  main.c
<item>next_address  :  printcmd.c
</itemize>
</descrip>

<sect1>Local Function printf_command()

<p><tt>static void printf_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_set_value_type()  :  value.c
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>parse_to_comma_and_eval()  :  eval.c
<item>printf_filtered()  :  utils.c
<item>puts_filtered()  :  utils.c
<item>quit()  :  utils.c
<item>read_memory()  :  corefile.c
<item>value_as_address()  :  value.c
<item>value_as_double()  :  value.c
<item>value_as_long()  :  value.c
<item>value_type()  :  value.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memset_chk(), __inline_strncpy_chk(), error_no_arg(), strchr(), strlen()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_double  :  gdbtypes.c
<item>builtin_type_float  :  gdbtypes.c
<item>current_target  :  target/target.c
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Local Function set_command()

<p><tt>static void set_command ( const char* exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>evaluate_expression()  :  eval.c
<item>make_cleanup()  :  utils.c
<item>parse_expression()  :  parse.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>innermost_block  :  parse.c
</itemize>
</descrip>

<sect1>Local Function show_max_symbolic_offset()

<p><tt>static void show_max_symbolic_offset ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
</itemize>
</descrip>

<sect1>Local Function show_print_symbol_filename()

<p><tt>static void show_print_symbol_filename ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
</itemize>
</descrip>

<sect1>Local Function sym_info()

<p><tt>static void sym_info ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>lookup_minimal_symbol_by_pc_section()  :  minsyms.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>overlay_mapped_address()  :  symfile.c
<item>parse_and_eval_address()  :  eval.c
<item>pc_in_unmapped_range()  :  symfile.c
<item>printf_filtered()  :  utils.c
<item>section_is_mapped()  :  symfile.c
<item>section_is_overlay()  :  symfile.c
<item>symbol_natural_name()  :  symtab.c
<item>error_no_arg()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle  :  utils.c
</itemize>
</descrip>

<sect1>Local Function undisplay_command()

<p><tt>static void undisplay_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_displays()  :  printcmd.c
<item>delete_display()  :  printcmd.c
<item>dont_repeat()  :  top.c
<item>error()  :  utils.c
<item>query()  :  utils.c
<item>atoi()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_printcmd()  :  printcmd.c
</itemize>
</descrip>

<sect1>Local Function validate_format()

<p><tt>static void validate_format ( struct format_data fmt, const char* cmdname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>printcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>output_command()  :  printcmd.c
<item>print_command_1()  :  printcmd.c
</itemize>
</descrip>

</article>
