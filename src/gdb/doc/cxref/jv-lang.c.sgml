<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF jv-lang.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for jv-lang.c of gdb.cxref.
<author>cxref

<sect>File jv-lang.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>basic_lookup_symbol_nonlocal()  :  symtab.c
<item>basic_lookup_transparent_type()  :  symtab.c
<item>c_language_arch_info()  :  c-lang.c
<item>c_printchar()  :  c-lang.c
<item>c_printstr()  :  c-lang.c
<item>default_word_break_characters()  :  language.c
<item>dump_subexp_body_standard()  :  expprint.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>java_class_name_from_physname()  :  jv-lang.c
<item>java_create_fundamental_type()  :  jv-lang.c
<item>java_demangle()  :  jv-lang.c
<item>java_emit_char()  :  jv-lang.c
<item>java_error()  :  jv-exp.c
<item>java_parse()  :  jv-exp.c
<item>java_print_type()  :  jv-typeprint.c
<item>java_val_print()  :  jv-valprint.c
<item>java_value_print()  :  jv-valprint.c
<item>null_post_parser()  :  parse.c
<item>op_name_standard()  :  expprint.c
<item>operator_length_standard()  :  parse.c
<item>print_subexp_standard()  :  expprint.c
<item>value_of_this()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>exp_descriptor_java  :  jv-lang.c
<item>java_op_print_tab  :  jv-lang.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;parser-defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;c-lang.h&quot;</tt>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;macroexp.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;jv-lang.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;dictionary.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>

<sect1>Global Variable java_int_type

<p>
<tt>struct type* java_int_type</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_java_language()  :  jv-lang.c
<item>java_create_fundamental_type()  :  jv-lang.c
<item>java_parse()  :  jv-exp.c
<item>java_primitive_type()  :  jv-lang.c
<item>java_primitive_type_from_name()  :  jv-lang.c
<item>parse_number()  :  jv-exp.c
</itemize>
</descrip>

<sect1>Global Variable java_byte_type

<p>
<tt>struct type* java_byte_type</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_java_language()  :  jv-lang.c
<item>java_create_fundamental_type()  :  jv-lang.c
<item>java_parse()  :  jv-exp.c
<item>java_primitive_type()  :  jv-lang.c
<item>java_primitive_type_from_name()  :  jv-lang.c
</itemize>
</descrip>

<sect1>Global Variable java_short_type

<p>
<tt>struct type* java_short_type</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_java_language()  :  jv-lang.c
<item>java_create_fundamental_type()  :  jv-lang.c
<item>java_parse()  :  jv-exp.c
<item>java_primitive_type()  :  jv-lang.c
<item>java_primitive_type_from_name()  :  jv-lang.c
</itemize>
</descrip>

<sect1>Global Variable java_long_type

<p>
<tt>struct type* java_long_type</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_java_language()  :  jv-lang.c
<item>java_create_fundamental_type()  :  jv-lang.c
<item>java_parse()  :  jv-exp.c
<item>java_primitive_type()  :  jv-lang.c
<item>java_primitive_type_from_name()  :  jv-lang.c
<item>parse_number()  :  jv-exp.c
</itemize>
</descrip>

<sect1>Global Variable java_boolean_type

<p>
<tt>struct type* java_boolean_type</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_java_language()  :  jv-lang.c
<item>java_create_fundamental_type()  :  jv-lang.c
<item>java_parse()  :  jv-exp.c
<item>java_primitive_type()  :  jv-lang.c
<item>java_primitive_type_from_name()  :  jv-lang.c
<item>lang_bool_type()  :  language.c
</itemize>
</descrip>

<sect1>Global Variable java_char_type

<p>
<tt>struct type* java_char_type</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_java_language()  :  jv-lang.c
<item>java_create_fundamental_type()  :  jv-lang.c
<item>java_lex()  :  jv-exp.c
<item>java_parse()  :  jv-exp.c
<item>java_primitive_type()  :  jv-lang.c
<item>java_primitive_type_from_name()  :  jv-lang.c
</itemize>
</descrip>

<sect1>Global Variable java_float_type

<p>
<tt>struct type* java_float_type</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_java_language()  :  jv-lang.c
<item>java_create_fundamental_type()  :  jv-lang.c
<item>java_parse()  :  jv-exp.c
<item>java_primitive_type()  :  jv-lang.c
<item>java_primitive_type_from_name()  :  jv-lang.c
</itemize>
</descrip>

<sect1>Global Variable java_double_type

<p>
<tt>struct type* java_double_type</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_java_language()  :  jv-lang.c
<item>java_create_fundamental_type()  :  jv-lang.c
<item>java_parse()  :  jv-exp.c
<item>java_primitive_type()  :  jv-lang.c
<item>java_primitive_type_from_name()  :  jv-lang.c
</itemize>
</descrip>

<sect1>Global Variable java_void_type

<p>
<tt>struct type* java_void_type</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>language.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_java_language()  :  jv-lang.c
<item>java_create_fundamental_type()  :  jv-lang.c
<item>java_link_class_type()  :  jv-lang.c
<item>java_primitive_type()  :  jv-lang.c
<item>java_primitive_type_from_name()  :  jv-lang.c
</itemize>
</descrip>

<sect1>Global Variable java_op_print_tab

<p>
<tt>const struct op_print java_op_print_tab[]</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
</descrip>

<sect1>Global Variable exp_descriptor_java

<p>
<tt>const struct exp_descriptor exp_descriptor_java</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
</descrip>

<sect1>Global Variable java_language_defn

<p>
<tt>const struct language_defn java_language_defn</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_java_language()  :  jv-lang.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>dynamics_objfile</bf><newline>
<tt>static struct objfile* dynamics_objfile</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_class_symbol()
<item>get_dynamics_objfile()
<item>java_link_class_type()
<item>java_rerun_cleanup()
</itemize>
</descrip>
<p>
<bf>class_symtab</bf><newline>
<tt>static struct symtab* class_symtab</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>get_java_class_symtab()
<item>java_rerun_cleanup()
</itemize>
</descrip>
<p>
<bf>java_object_type</bf><newline>
<tt>static struct type* java_object_type</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>get_java_object_type()
<item>is_object_type()
<item>java_rerun_cleanup()
</itemize>
</descrip>

<sect1>Global Function _initialize_java_language()

<p><tt>void _initialize_java_language ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_language()  :  language.c
<item>init_type()  :  gdbtypes.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>java_boolean_type  :  jv-lang.c
<item>java_byte_type  :  jv-lang.c
<item>java_char_type  :  jv-lang.c
<item>java_double_type  :  jv-lang.c
<item>java_float_type  :  jv-lang.c
<item>java_int_type  :  jv-lang.c
<item>java_language_defn  :  jv-lang.c
<item>java_long_type  :  jv-lang.c
<item>java_short_type  :  jv-lang.c
<item>java_void_type  :  jv-lang.c
</itemize>
</descrip>

<sect1>Global Function get_java_object_header_size()

<p><tt>int get_java_object_header_size ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_ptr_bit()  :  gdbarch.c
<item>get_java_object_type()  :  jv-lang.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_java()  :  jv-lang.c
<item>java_value_print()  :  jv-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function get_java_object_type()

<p><tt>struct type* get_java_object_type ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>lookup_symbol()  :  symtab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_java_object_header_size()  :  jv-lang.c
<item>java_class_from_object()  :  jv-lang.c
<item>java_link_class_type()  :  jv-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>java_object_type  :  jv-lang.c
</itemize>
</descrip>

<sect1>Global Function get_java_utf8_name()

<p><tt>char* get_java_utf8_name ( struct obstack* obstack, struct value* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_value_address_hack()  :  value.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>read_memory()  :  corefile.c
<item>value_as_long()  :  value.c
<item>value_offset()  :  value.c
<item>value_struct_elt()  :  valops.c
<item>value_type()  :  value.c
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_link_class_type()  :  jv-lang.c
<item>type_from_class()  :  jv-lang.c
</itemize>
</descrip>

<sect1>Global Function is_object_type()

<p><tt>int is_object_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_java()  :  jv-lang.c
<item>java_value_print()  :  jv-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
<item>java_object_type  :  jv-lang.c
</itemize>
</descrip>

<sect1>Global Function java_array_type()

<p><tt>struct type* java_array_type ( struct type* type, int dims )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_parse()  :  jv-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function java_class_from_object()

<p><tt>struct value* java_class_from_object ( struct value* obj_val )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_java_object_type()  :  jv-lang.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>value_as_address()  :  value.c
<item>value_at()  :  valops.c
<item>value_struct_elt()  :  valops.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_java()  :  jv-lang.c
<item>java_value_print()  :  jv-valprint.c
</itemize>
</descrip>

<sect1>Global Function java_demangle_type_signature()

<p><tt>char* java_demangle_type_signature ( const char* signature )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>java_demangled_signature_copy()  :  jv-lang.c
<item>java_demangled_signature_length()  :  jv-lang.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_type_print_base()  :  jv-typeprint.c
</itemize>
</descrip>

<sect1>Global Function java_link_class_type()

<p><tt>struct type* java_link_class_type ( struct type* type, struct value* clas )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_value_address_hack()  :  value.c
<item>get_dynamics_objfile()  :  jv-lang.c
<item>get_java_object_type()  :  jv-lang.c
<item>get_java_utf8_name()  :  jv-lang.c
<item>internal_error()  :  utils.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>make_function_type()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>set_value_lazy()  :  value.c
<item>type_from_class()  :  jv-lang.c
<item>value_as_long()  :  value.c
<item>value_ind()  :  valops.c
<item>value_offset()  :  value.c
<item>value_struct_elt()  :  valops.c
<item>value_type()  :  value.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk(), _obstack_newchunk(), strcmp(), strlen(), strrchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>type_from_class()  :  jv-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>obstack_free()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
<item>dynamics_objfile  :  jv-lang.c
<item>java_void_type  :  jv-lang.c
</itemize>
</descrip>

<sect1>Global Function java_lookup_class()

<p><tt>struct type* java_lookup_class ( char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>lookup_symbol()  :  symtab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_type_from_name()  :  jv-exp.c
<item>push_expression_name()  :  jv-exp.c
<item>push_qualified_expression_name()  :  jv-exp.c
<item>type_from_class()  :  jv-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>expression_context_block  :  parse.c
</itemize>
</descrip>

<sect1>Global Function java_primitive_type()

<p><tt>struct type* java_primitive_type ( int signature )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_demangled_signature_copy()  :  jv-lang.c
<item>java_demangled_signature_length()  :  jv-lang.c
<item>type_from_class()  :  jv-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>java_boolean_type  :  jv-lang.c
<item>java_byte_type  :  jv-lang.c
<item>java_char_type  :  jv-lang.c
<item>java_double_type  :  jv-lang.c
<item>java_float_type  :  jv-lang.c
<item>java_int_type  :  jv-lang.c
<item>java_long_type  :  jv-lang.c
<item>java_short_type  :  jv-lang.c
<item>java_void_type  :  jv-lang.c
</itemize>
</descrip>

<sect1>Global Function java_primitive_type_from_name()

<p><tt>struct type* java_primitive_type_from_name ( const char* name, int namelen )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>memcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_value_print()  :  jv-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>java_boolean_type  :  jv-lang.c
<item>java_byte_type  :  jv-lang.c
<item>java_char_type  :  jv-lang.c
<item>java_double_type  :  jv-lang.c
<item>java_float_type  :  jv-lang.c
<item>java_int_type  :  jv-lang.c
<item>java_long_type  :  jv-lang.c
<item>java_short_type  :  jv-lang.c
<item>java_void_type  :  jv-lang.c
</itemize>
</descrip>

<sect1>Global Function java_rerun_cleanup()

<p><tt>void java_rerun_cleanup ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_objfile()  :  objfiles.c
<item>free_symtab()  :  symmisc.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>class_symtab  :  jv-lang.c
<item>dynamics_objfile  :  jv-lang.c
<item>java_object_type  :  jv-lang.c
</itemize>
</descrip>

<sect1>Global Function type_from_class()

<p><tt>struct type* type_from_class ( struct value* clas )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_class_symbol()  :  jv-lang.c
<item>add_class_symtab_symbol()  :  jv-lang.c
<item>alloc_type()  :  gdbtypes.c
<item>allocate_cplus_struct_type()  :  gdbtypes.c
<item>check_typedef()  :  gdbtypes.c
<item>deprecated_set_value_type()  :  value.c
<item>deprecated_value_address_hack()  :  value.c
<item>get_dynamics_objfile()  :  jv-lang.c
<item>get_java_utf8_name()  :  jv-lang.c
<item>java_class_is_primitive()  :  jv-lang.c
<item>java_demangled_signature_copy()  :  jv-lang.c
<item>java_demangled_signature_length()  :  jv-lang.c
<item>java_link_class_type()  :  jv-lang.c
<item>java_lookup_class()  :  jv-lang.c
<item>java_primitive_type()  :  jv-lang.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>type_from_class()  :  jv-lang.c
<item>value_as_long()  :  value.c
<item>value_ind()  :  valops.c
<item>value_logical_not()  :  valarith.c
<item>value_offset()  :  value.c
<item>value_struct_elt()  :  valops.c
<item>value_type()  :  value.c
<item>_obstack_newchunk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_java()  :  jv-lang.c
<item>java_link_class_type()  :  jv-lang.c
<item>java_value_print()  :  jv-valprint.c
<item>type_from_class()  :  jv-lang.c
</itemize>
</descrip>

<sect1>Local Function add_class_symbol()

<p><tt>static struct symbol* add_class_symbol ( struct type* type, CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>type_from_class()  :  jv-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dynamics_objfile  :  jv-lang.c
</itemize>
</descrip>

<sect1>Local Function add_class_symtab_symbol()

<p><tt>static void add_class_symtab_symbol ( struct symbol* sym )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>dict_add_symbol()  :  dictionary.c
<item>get_java_class_symtab()  :  jv-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>type_from_class()  :  jv-lang.c
</itemize>
</descrip>

<sect1>Local Function evaluate_subexp_java()

<p><tt>static struct value* evaluate_subexp_java ( struct type* expect_type, struct expression* exp, int* pos, enum noside noside )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>coerce_ref()  :  value.c
<item>deprecated_set_value_type()  :  value.c
<item>deprecated_value_lval_hack()  :  value.c
<item>error()  :  utils.c
<item>evaluate_subexp_java()  :  jv-lang.c
<item>evaluate_subexp_standard()  :  eval.c
<item>evaluate_subexp_with_coercion()  :  eval.c
<item>extract_signed_integer()  :  findvar.c
<item>get_java_object_header_size()  :  jv-lang.c
<item>is_object_type()  :  jv-lang.c
<item>java_class_from_object()  :  jv-lang.c
<item>java_value_string()  :  jv-lang.c
<item>longest_to_int()  :  valprint.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>read_memory()  :  corefile.c
<item>type_from_class()  :  jv-lang.c
<item>value_addr()  :  valops.c
<item>value_as_address()  :  value.c
<item>value_as_long()  :  value.c
<item>value_at()  :  valops.c
<item>value_cast()  :  valops.c
<item>value_from_longest()  :  value.c
<item>value_ind()  :  valops.c
<item>value_struct_elt()  :  valops.c
<item>value_subscript()  :  valarith.c
<item>value_type()  :  value.c
<item>value_zero()  :  valops.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_java()  :  jv-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_long  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function free_class_block()

<p><tt>static void free_class_block ( struct symtab* symtab )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dict_free()  :  dictionary.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>get_java_class_symtab()  :  jv-lang.c
</itemize>
</descrip>

<sect1>Local Function get_dynamics_objfile()

<p><tt>static struct objfile* get_dynamics_objfile ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>allocate_objfile()  :  objfiles.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_java_class_symtab()  :  jv-lang.c
<item>java_link_class_type()  :  jv-lang.c
<item>type_from_class()  :  jv-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dynamics_objfile  :  jv-lang.c
</itemize>
</descrip>

<sect1>Local Function get_java_class_symtab()

<p><tt>static struct symtab* get_java_class_symtab ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_block()  :  block.c
<item>allocate_symtab()  :  symfile.c
<item>dict_create_hashed_expandable()  :  dictionary.c
<item>dict_create_linear()  :  dictionary.c
<item>get_dynamics_objfile()  :  jv-lang.c
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_class_symtab_symbol()  :  jv-lang.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_class_block()  :  jv-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>class_symtab  :  jv-lang.c
</itemize>
</descrip>

<sect1>Local Function java_class_is_primitive()

<p><tt>static int java_class_is_primitive ( struct value* clas )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>value_as_address()  :  value.c
<item>value_struct_elt()  :  valops.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>type_from_class()  :  jv-lang.c
</itemize>
</descrip>

<sect1>Local Function java_class_name_from_physname()

<p><tt>static char* java_class_name_from_physname ( const char* physname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>java_demangle()  :  jv-lang.c
<item>java_find_last_component()  :  jv-lang.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
</descrip>

<sect1>Local Function java_create_fundamental_type()

<p><tt>static struct type* java_create_fundamental_type ( struct objfile* objfile, int jtypeid )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>c_create_fundamental_type()  :  c-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>java_boolean_type  :  jv-lang.c
<item>java_byte_type  :  jv-lang.c
<item>java_char_type  :  jv-lang.c
<item>java_double_type  :  jv-lang.c
<item>java_float_type  :  jv-lang.c
<item>java_int_type  :  jv-lang.c
<item>java_long_type  :  jv-lang.c
<item>java_short_type  :  jv-lang.c
<item>java_void_type  :  jv-lang.c
</itemize>
</descrip>

<sect1>Local Function java_demangle()

<p><tt>static char* java_demangle ( const char* mangled, int options )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>cplus_demangle()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_class_name_from_physname()  :  jv-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
</descrip>

<sect1>Local Function java_demangled_signature_copy()

<p><tt>static void java_demangled_signature_copy ( char* result, const char* signature )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>java_primitive_type()  :  jv-lang.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_demangle_type_signature()  :  jv-lang.c
<item>type_from_class()  :  jv-lang.c
</itemize>
</descrip>

<sect1>Local Function java_demangled_signature_length()

<p><tt>static size_t java_demangled_signature_length ( const char* signature )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>java_primitive_type()  :  jv-lang.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_demangle_type_signature()  :  jv-lang.c
<item>type_from_class()  :  jv-lang.c
</itemize>
</descrip>

<sect1>Local Function java_emit_char()

<p><tt>static void java_emit_char ( int c, struct ui_file* stream, int quoter )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>fputc_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>isprint()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
</descrip>

<sect1>Local Function java_find_last_component()

<p><tt>static const char* java_find_last_component ( const char* name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>strchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>java_class_name_from_physname()  :  jv-lang.c
</itemize>
</descrip>

<sect1>Local Function java_value_string()

<p><tt>static struct value* java_value_string ( char* ptr, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>jv-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_java()  :  jv-lang.c
</itemize>
</descrip>

</article>
