<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF mem-break.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for mem-break.c of gdb.cxref.
<author>cxref

<sect>File mem-break.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define BKPT_ARRAY_SIZE 100</tt><newline>

<sect1>Global Variable recent_breakpoints

<p>
<tt>CORE_ADDR recent_breakpoints[100]</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>mem-break.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>address_contained_breakpoint_trap()  :  mem-break.c
<item>default_memory_remove_breakpoint()  :  mem-break.c
</itemize>
</descrip>

<sect1>Global Variable last_bkpt_index

<p>
<tt>int last_bkpt_index</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>mem-break.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>default_memory_remove_breakpoint()  :  mem-break.c
</itemize>
</descrip>

<sect1>Global Function address_contained_breakpoint_trap()

<p><tt>int address_contained_breakpoint_trap ( CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>recent_breakpoints  :  mem-break.c
</itemize>
</descrip>

<sect1>Global Function default_memory_insert_breakpoint()

<p><tt>int default_memory_insert_breakpoint ( CORE_ADDR addr, bfd_byte* contents_cache )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>gdbarch_breakpoint_from_pc()  :  gdbarch.c
<item>make_cleanup()  :  utils.c
<item>set_trust_readonly()  :  target/target.c
<item>target_read_memory()  :  target/target.c
<item>target_write_memory()  :  target/target.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>set_trust_readonly_cleanup()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function default_memory_remove_breakpoint()

<p><tt>int default_memory_remove_breakpoint ( CORE_ADDR addr, bfd_byte* contents_cache )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>breakpoint_here_p()  :  breakpoint.c
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>gdbarch_breakpoint_from_pc()  :  gdbarch.c
<item>make_cleanup()  :  utils.c
<item>set_trust_readonly()  :  target/target.c
<item>target_read_memory()  :  target/target.c
<item>target_write_memory()  :  target/target.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), memcmp()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>set_trust_readonly_cleanup()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>last_bkpt_index  :  mem-break.c
<item>recent_breakpoints  :  mem-break.c
</itemize>
</descrip>

<sect1>Global Function memory_insert_breakpoint()

<p><tt>int memory_insert_breakpoint ( CORE_ADDR addr, bfd_byte* contents_cache )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_memory_insert_breakpoint()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remote_insert_breakpoint()  :  remote.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>update_current_target()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function memory_remove_breakpoint()

<p><tt>int memory_remove_breakpoint ( CORE_ADDR addr, bfd_byte* contents_cache )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>target.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_memory_remove_breakpoint()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remote_remove_breakpoint()  :  remote.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>update_current_target()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

</article>
