<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF complaints.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for complaints.c of gdb.cxref.
<author>cxref

<sect>File complaints.c
<descrip>
<tag>References Variables:</tag>
<itemize>
<item>complaint_sentinel  :  complaints.c
<item>symfile_complaint_book  :  complaints.c
<item>symfile_explanations  :  complaints.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;complaints.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>

<sect1>Type enum complaint_series

<p>
<itemize>
<item><tt>enum complaint_series</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>ISOLATED_MESSAGE;</tt><newline>
<item><tt>FIRST_MESSAGE;</tt><newline>
<item><tt>SHORT_FIRST_MESSAGE;</tt><newline>
<item><tt>SUBSEQUENT_MESSAGE;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct complain

<p>
<itemize>
<item><tt>struct complain</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const char* file;</tt><newline>
<item><tt>int line;</tt><newline>
<item><tt>const char* fmt;</tt><newline>
<item><tt>int counter;</tt><newline>
<item><tt>struct complain* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct explanation

<p>
<itemize>
<item><tt>struct explanation</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const char* prefix;</tt><newline>
<item><tt>const char* postfix;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct complaints

<p>
<itemize>
<item><tt>struct complaints</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct complain* root;</tt><newline>
<item><tt>int series;</tt><newline>
<item><tt>const struct explanation* explanation;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable symfile_complaints

<p>
<tt>struct complaints* symfile_complaints</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>buildsym.c
<item>coffread.c
<item>complaints.c
<item>cp-support.c
<item>dbxread.c
<item>dwarf2-frame.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>gdbtypes.c
<item>inlining.c
<item>macroscope.c
<item>macrotab.c
<item>mdebugread.c
<item>objc-lang.c
<item>stabsread.c
<item>symfile.c
<item>symtab.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>add_partial_enumeration()  :  dwarf2read.c
<item>alloc_utype()  :  dwarfread.c
<item>attach_fields_to_type()  :  stabsread.c
<item>bad_array_element_type_complaint()  :  dwarfread.c
<item>bad_die_ref_complaint()  :  dwarfread.c
<item>bad_rfd_entry_complaint()  :  mdebugread.c
<item>bad_tag_guess_complaint()  :  mdebugread.c
<item>basic_lookup_transparent_type()  :  symtab.c
<item>basic_type_complaint()  :  mdebugread.c
<item>basicdieinfo()  :  dwarfread.c
<item>check_cu_functions()  :  dwarf2read.c
<item>check_for_redefinition()  :  macrotab.c
<item>cleanup_undefined_types()  :  stabsread.c
<item>coff_symtab_read()  :  coffread.c
<item>common_block_end()  :  stabsread.c
<item>common_block_start()  :  stabsread.c
<item>complain_about_struct_wipeout()  :  stabsread.c
<item>completedieinfo()  :  dwarfread.c
<item>consume_improper_spaces()  :  dwarf2read.c
<item>cp_lookup_rtti_type()  :  cp-support.c
<item>cross_ref()  :  mdebugread.c
<item>dbx_lookup_type()  :  stabsread.c
<item>dbx_next_symbol_text()  :  dbxread.c
<item>decode_base_type()  :  coffread.c
<item>decode_frame_entry()  :  dwarf2-frame.c
<item>decode_fund_type()  :  dwarfread.c
<item>decode_locdesc()  :  dwarf2read.c
<item>decode_modified_type()  :  dwarfread.c
<item>decode_subscript_data_item()  :  dwarfread.c
<item>decode_type()  :  coffread.c
<item>define_symbol()  :  stabsread.c
<item>demangled_name_complaint()  :  cp-support.c
<item>dup_user_type_definition_complaint()  :  dwarfread.c
<item>dwarf2_add_member_fn()  :  dwarf2read.c
<item>dwarf2_attach_fields_to_type()  :  dwarf2read.c
<item>dwarf2_complex_location_expr_complaint()  :  dwarf2read.c
<item>dwarf2_const_value()  :  dwarf2read.c
<item>dwarf2_const_value_length_mismatch_complaint()  :  dwarf2read.c
<item>dwarf2_get_attr_constant_value()  :  dwarf2read.c
<item>dwarf2_get_pc_bounds()  :  dwarf2read.c
<item>dwarf2_get_ref_die_offset()  :  dwarf2read.c
<item>dwarf2_invalid_attrib_class_complaint()  :  dwarf2read.c
<item>dwarf2_macro_malformed_definition_complaint()  :  dwarf2read.c
<item>dwarf2_macros_too_long_complaint()  :  dwarf2read.c
<item>dwarf2_statement_list_fits_in_line_number_section_complaint()  :  dwarf2read.c
<item>dwarf2_symbol_mark_computed()  :  dwarf2read.c
<item>dwarf_decode_line_header()  :  dwarf2read.c
<item>dwarf_decode_lines()  :  dwarf2read.c
<item>dwarf_decode_macros()  :  dwarf2read.c
<item>dwarf_read_array_type()  :  dwarfread.c
<item>elf_symtab_read()  :  elfread.c
<item>elfstab_offset_sections()  :  elfread.c
<item>end_symtab()  :  buildsym.c
<item>enter_linenos()  :  coffread.c
<item>error_type()  :  stabsread.c
<item>execute_cfa_program()  :  dwarf2-frame.c
<item>finish_block()  :  buildsym.c
<item>function_outside_compilation_unit_complaint()  :  mdebugread.c
<item>index_complaint()  :  mdebugread.c
<item>inlined_function_add_function_names()  :  inlining.c
<item>invalid_cpp_abbrev_complaint()  :  stabsread.c
<item>lbrac_mismatch_complaint()  :  dbxread.c
<item>load_partial_dies()  :  dwarf2read.c
<item>locval()  :  dwarfread.c
<item>lookup_child_selector_nocache()  :  objc-lang.c
<item>lookup_psymbol_from_namestring()  :  dbxread.c
<item>lookup_symbol_aux_psymtabs()  :  symtab.c
<item>macro_include()  :  macrotab.c
<item>macro_undef()  :  macrotab.c
<item>make_blockvector()  :  buildsym.c
<item>new_symbol()  :  dwarf2read.c
<item>new_symfile_objfile()  :  symfile.c
<item>parse_lines()  :  mdebugread.c
<item>parse_partial_symbols()  :  mdebugread.c
<item>parse_procedure()  :  mdebugread.c
<item>parse_symbol()  :  mdebugread.c
<item>parse_type()  :  mdebugread.c
<item>partial_die_parent_scope()  :  dwarf2read.c
<item>process_one_symbol()  :  dbxread.c
<item>process_symbol_types_only()  :  stabsread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
<item>read_base_type()  :  dwarf2read.c
<item>read_baseclasses()  :  stabsread.c
<item>read_cpp_abbrev()  :  stabsread.c
<item>read_dbx_symtab()  :  dbxread.c
<item>read_func_scope()  :  dwarfread.c
<item>read_initial_length()  :  dwarf2read.c
<item>read_member_functions()  :  stabsread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
<item>read_partial_die()  :  dwarf2read.c
<item>read_range_type()  :  stabsread.c
<item>read_structure_type()  :  dwarf2read.c
<item>read_subrange_type()  :  dwarf2read.c
<item>read_tag_pointer_type()  :  dwarf2read.c
<item>read_tilde_fields()  :  stabsread.c
<item>read_type()  :  stabsread.c
<item>read_type_die()  :  dwarf2read.c
<item>reg_value_complaint()  :  stabsread.c
<item>repeated_header_complaint()  :  dbxread.c
<item>reread_symbols_for_objfile()  :  symfile.c
<item>rs6000_builtin_type()  :  stabsread.c
<item>sal_macro_scope()  :  macroscope.c
<item>scan_file_globals()  :  stabsread.c
<item>set_namestring_1()  :  dbxread.c
<item>skip_one_die()  :  dwarf2read.c
<item>stabs_general_complaint()  :  stabsread.c
<item>stabsect_read_strtab_from_oso()  :  dbxread.c
<item>struct_type()  :  dwarfread.c
<item>stub_noname_complaint()  :  gdbtypes.c
<item>syms_from_objfile()  :  symfile.c
<item>target_to_host()  :  dwarfread.c
<item>unexpected_type_code_complaint()  :  mdebugread.c
<item>unknown_attribute_form_complaint()  :  dwarfread.c
<item>unknown_ext_complaint()  :  mdebugread.c
<item>unknown_symtype_complaint()  :  dbxread.c
<item>upgrade_type()  :  mdebugread.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>complaint_sentinel</bf><newline>
<tt>static struct complain complaint_sentinel</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>complaints.c
<item>get_complaints()
</itemize>
</descrip>
<p>
<bf>symfile_explanations</bf><newline>
<tt>static struct explanation symfile_explanations[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>complaints.c
</itemize>
</descrip>
<p>
<bf>symfile_complaint_book</bf><newline>
<tt>static struct complaints symfile_complaint_book</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>complaints.c
</itemize>
</descrip>
<p>
<bf>stop_whining</bf><newline>
<tt>static unsigned int stop_whining</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_complaints()
<item>vcomplaint()
</itemize>
</descrip>

<sect1>Global Function _initialize_complaints()

<p><tt>void _initialize_complaints ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>complaints.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_setshow_uinteger_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>complaints_show_value()  :  complaints.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>stop_whining  :  complaints.c
<item>setlist, showlist
</itemize>
</descrip>

<sect1>Global Function clear_complaints()

<p><tt>void clear_complaints ( struct complaints** c, int less_verbose, int noisy )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>complaints.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fputs_unfiltered()  :  ui-file.c
<item>get_complaints()  :  complaints.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>new_symfile_objfile()  :  symfile.c
<item>reread_symbols_for_objfile()  :  symfile.c
<item>syms_from_objfile()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stderr  :  main.c
</itemize>
</descrip>

<sect1>Global Function complaint()

<p><tt>void complaint ( struct complaints** complaints, const char* fmt, ... )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>complaints.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>vcomplaint()  :  complaints.c
<item>__builtin_va_end(), __builtin_va_start()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_partial_enumeration()  :  dwarf2read.c
<item>alloc_utype()  :  dwarfread.c
<item>attach_fields_to_type()  :  stabsread.c
<item>bad_array_element_type_complaint()  :  dwarfread.c
<item>bad_die_ref_complaint()  :  dwarfread.c
<item>bad_rfd_entry_complaint()  :  mdebugread.c
<item>bad_tag_guess_complaint()  :  mdebugread.c
<item>basic_lookup_transparent_type()  :  symtab.c
<item>basic_type_complaint()  :  mdebugread.c
<item>basicdieinfo()  :  dwarfread.c
<item>check_cu_functions()  :  dwarf2read.c
<item>check_for_redefinition()  :  macrotab.c
<item>cleanup_undefined_types()  :  stabsread.c
<item>coff_symtab_read()  :  coffread.c
<item>common_block_end()  :  stabsread.c
<item>common_block_start()  :  stabsread.c
<item>complain_about_struct_wipeout()  :  stabsread.c
<item>completedieinfo()  :  dwarfread.c
<item>consume_improper_spaces()  :  dwarf2read.c
<item>cp_lookup_rtti_type()  :  cp-support.c
<item>cross_ref()  :  mdebugread.c
<item>dbx_lookup_type()  :  stabsread.c
<item>dbx_next_symbol_text()  :  dbxread.c
<item>decode_base_type()  :  coffread.c
<item>decode_frame_entry()  :  dwarf2-frame.c
<item>decode_fund_type()  :  dwarfread.c
<item>decode_locdesc()  :  dwarf2read.c
<item>decode_modified_type()  :  dwarfread.c
<item>decode_subscript_data_item()  :  dwarfread.c
<item>decode_type()  :  coffread.c
<item>define_symbol()  :  stabsread.c
<item>demangled_name_complaint()  :  cp-support.c
<item>dup_user_type_definition_complaint()  :  dwarfread.c
<item>dwarf2_add_member_fn()  :  dwarf2read.c
<item>dwarf2_attach_fields_to_type()  :  dwarf2read.c
<item>dwarf2_complex_location_expr_complaint()  :  dwarf2read.c
<item>dwarf2_const_value()  :  dwarf2read.c
<item>dwarf2_const_value_length_mismatch_complaint()  :  dwarf2read.c
<item>dwarf2_get_attr_constant_value()  :  dwarf2read.c
<item>dwarf2_get_pc_bounds()  :  dwarf2read.c
<item>dwarf2_get_ref_die_offset()  :  dwarf2read.c
<item>dwarf2_invalid_attrib_class_complaint()  :  dwarf2read.c
<item>dwarf2_macro_malformed_definition_complaint()  :  dwarf2read.c
<item>dwarf2_macros_too_long_complaint()  :  dwarf2read.c
<item>dwarf2_statement_list_fits_in_line_number_section_complaint()  :  dwarf2read.c
<item>dwarf2_symbol_mark_computed()  :  dwarf2read.c
<item>dwarf_decode_line_header()  :  dwarf2read.c
<item>dwarf_decode_lines()  :  dwarf2read.c
<item>dwarf_decode_macros()  :  dwarf2read.c
<item>dwarf_read_array_type()  :  dwarfread.c
<item>elf_symtab_read()  :  elfread.c
<item>elfstab_offset_sections()  :  elfread.c
<item>end_symtab()  :  buildsym.c
<item>enter_linenos()  :  coffread.c
<item>error_type()  :  stabsread.c
<item>execute_cfa_program()  :  dwarf2-frame.c
<item>finish_block()  :  buildsym.c
<item>function_outside_compilation_unit_complaint()  :  mdebugread.c
<item>index_complaint()  :  mdebugread.c
<item>inlined_function_add_function_names()  :  inlining.c
<item>invalid_cpp_abbrev_complaint()  :  stabsread.c
<item>lbrac_mismatch_complaint()  :  dbxread.c
<item>load_partial_dies()  :  dwarf2read.c
<item>locval()  :  dwarfread.c
<item>lookup_child_selector_nocache()  :  objc-lang.c
<item>lookup_psymbol_from_namestring()  :  dbxread.c
<item>lookup_symbol_aux_psymtabs()  :  symtab.c
<item>macro_include()  :  macrotab.c
<item>macro_undef()  :  macrotab.c
<item>make_blockvector()  :  buildsym.c
<item>new_symbol()  :  dwarf2read.c
<item>parse_lines()  :  mdebugread.c
<item>parse_partial_symbols()  :  mdebugread.c
<item>parse_procedure()  :  mdebugread.c
<item>parse_symbol()  :  mdebugread.c
<item>parse_type()  :  mdebugread.c
<item>partial_die_parent_scope()  :  dwarf2read.c
<item>process_one_symbol()  :  dbxread.c
<item>process_symbol_types_only()  :  stabsread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
<item>read_base_type()  :  dwarf2read.c
<item>read_baseclasses()  :  stabsread.c
<item>read_cpp_abbrev()  :  stabsread.c
<item>read_dbx_symtab()  :  dbxread.c
<item>read_func_scope()  :  dwarfread.c
<item>read_initial_length()  :  dwarf2read.c
<item>read_member_functions()  :  stabsread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
<item>read_partial_die()  :  dwarf2read.c
<item>read_range_type()  :  stabsread.c
<item>read_structure_type()  :  dwarf2read.c
<item>read_subrange_type()  :  dwarf2read.c
<item>read_tag_pointer_type()  :  dwarf2read.c
<item>read_tilde_fields()  :  stabsread.c
<item>read_type()  :  stabsread.c
<item>read_type_die()  :  dwarf2read.c
<item>reg_value_complaint()  :  stabsread.c
<item>repeated_header_complaint()  :  dbxread.c
<item>rs6000_builtin_type()  :  stabsread.c
<item>sal_macro_scope()  :  macroscope.c
<item>scan_file_globals()  :  stabsread.c
<item>set_namestring_1()  :  dbxread.c
<item>skip_one_die()  :  dwarf2read.c
<item>stabs_general_complaint()  :  stabsread.c
<item>stabsect_read_strtab_from_oso()  :  dbxread.c
<item>struct_type()  :  dwarfread.c
<item>stub_noname_complaint()  :  gdbtypes.c
<item>target_to_host()  :  dwarfread.c
<item>unexpected_type_code_complaint()  :  mdebugread.c
<item>unknown_attribute_form_complaint()  :  dwarfread.c
<item>unknown_ext_complaint()  :  mdebugread.c
<item>unknown_symtype_complaint()  :  dbxread.c
<item>upgrade_type()  :  mdebugread.c
</itemize>
</descrip>

<sect1>Global Function internal_complaint()

<p><tt>void internal_complaint ( struct complaints** complaints, const char* file, int line, const char* fmt, ... )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>complaints.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>vcomplaint()  :  complaints.c
<item>__builtin_va_end(), __builtin_va_start()
</itemize>
</descrip>

<sect1>Local Function complaints_show_value()

<p><tt>static void complaints_show_value ( struct ui_file* file, int from_tty, struct cmd_list_element* cmd, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_complaints()  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function find_complaint()

<p><tt>static struct complain* find_complaint ( struct complaints* complaints, const char* file, int line, const char* fmt )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>vcomplaint()  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function get_complaints()

<p><tt>static struct complaints* get_complaints ( struct complaints** c )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>clear_complaints()  :  complaints.c
<item>vcomplaint()  :  complaints.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>complaint_sentinel  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function vcomplaint()

<p><tt>static void vcomplaint ( struct complaints** c, const char* file, int line, const char* fmt, va_list args )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>begin_line()  :  utils.c
<item>do_cleanups()  :  utils.c
<item>find_complaint()  :  complaints.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>get_complaints()  :  complaints.c
<item>internal_error()  :  utils.c
<item>internal_vwarning()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>vwarning()  :  utils.c
<item>wrap_here()  :  utils.c
<item>xstrvprintf()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>internal_complaint()  :  complaints.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>deprecated_warning_hook  :  top.c
<item>gdb_stderr  :  main.c
<item>info_verbose  :  top.c
<item>stop_whining  :  complaints.c
</itemize>
</descrip>

</article>
