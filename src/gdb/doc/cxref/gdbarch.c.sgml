<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF gdbarch.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for gdbarch.c of gdb.cxref.
<author>cxref

<sect>File gdbarch.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>construct_inferior_arguments()  :  infcmd.c
<item>default_adjust_ehframe_regnum()  :  arch-utils.c
<item>default_print_registers_info()  :  infcmd.c
<item>default_register_reggroup_p()  :  reggroups.c
<item>default_stabs_argument_has_addr()  :  arch-utils.c
<item>generic_in_function_epilogue_p()  :  arch-utils.c
<item>generic_register_byte()  :  arch-utils.c
<item>generic_skip_solib_resolver()  :  arch-utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>startup_gdbarch  :  gdbarch.c
<item> bfd_default_arch_struct, convert_from_func_ptr_addr_identity, generic_remote_translate_xfer_address
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;arch-utils.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;reggroups.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;osabi.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define GDBARCH_DEBUG 2</tt><newline>

<sect1>Type struct gdbarch

<p>
<itemize>
<item><tt>struct gdbarch</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int initialized_p;</tt><newline>
<item><tt>struct obstack* obstack;</tt><newline>
<item><tt>const struct bfd_arch_info* bfd_arch_info;</tt><newline>
<item><tt>int byte_order;</tt><newline>
<item><tt>enum gdb_osabi osabi;</tt><newline>
<item><tt>struct gdbarch_tdep* tdep;</tt><newline>
<item><tt>gdbarch_dump_tdep_ftype* dump_tdep;</tt><newline>
<item><tt>unsigned nr_data;</tt><newline>
<item><tt>void** data;</tt><newline>
<item><tt>struct gdbarch_swap* swap;</tt><newline>
<item><tt>int short_bit;</tt><newline>
<item><tt>int int_bit;</tt><newline>
<item><tt>int long_bit;</tt><newline>
<item><tt>int long_long_bit;</tt><newline>
<item><tt>int float_bit;</tt><newline>
<item><tt>const struct floatformat* float_format;</tt><newline>
<item><tt>int double_bit;</tt><newline>
<item><tt>const struct floatformat* double_format;</tt><newline>
<item><tt>int long_double_bit;</tt><newline>
<item><tt>const struct floatformat* long_double_format;</tt><newline>
<item><tt>int ptr_bit;</tt><newline>
<item><tt>int addr_bit;</tt><newline>
<item><tt>int bfd_vma_bit;</tt><newline>
<item><tt>int char_signed;</tt><newline>
<item><tt>gdbarch_read_pc_ftype* read_pc;</tt><newline>
<item><tt>gdbarch_write_pc_ftype* write_pc;</tt><newline>
<item><tt>gdbarch_read_sp_ftype* read_sp;</tt><newline>
<item><tt>gdbarch_virtual_frame_pointer_ftype* virtual_frame_pointer;</tt><newline>
<item><tt>gdbarch_pseudo_register_read_ftype* pseudo_register_read;</tt><newline>
<item><tt>gdbarch_pseudo_register_write_ftype* pseudo_register_write;</tt><newline>
<item><tt>int num_regs;</tt><newline>
<item><tt>int num_pseudo_regs;</tt><newline>
<item><tt>int sp_regnum;</tt><newline>
<item><tt>int pc_regnum;</tt><newline>
<item><tt>int ps_regnum;</tt><newline>
<item><tt>int fp0_regnum;</tt><newline>
<item><tt>gdbarch_stab_reg_to_regnum_ftype* stab_reg_to_regnum;</tt><newline>
<item><tt>gdbarch_ecoff_reg_to_regnum_ftype* ecoff_reg_to_regnum;</tt><newline>
<item><tt>gdbarch_dwarf_reg_to_regnum_ftype* dwarf_reg_to_regnum;</tt><newline>
<item><tt>gdbarch_sdb_reg_to_regnum_ftype* sdb_reg_to_regnum;</tt><newline>
<item><tt>gdbarch_dwarf2_reg_to_regnum_ftype* dwarf2_reg_to_regnum;</tt><newline>
<item><tt>gdbarch_register_name_ftype* register_name;</tt><newline>
<item><tt>gdbarch_register_type_ftype* register_type;</tt><newline>
<item><tt>gdbarch_deprecated_register_byte_ftype* deprecated_register_byte;</tt><newline>
<item><tt>gdbarch_unwind_dummy_id_ftype* unwind_dummy_id;</tt><newline>
<item><tt>int deprecated_fp_regnum;</tt><newline>
<item><tt>gdbarch_push_dummy_call_ftype* push_dummy_call;</tt><newline>
<item><tt>gdbarch_deprecated_push_arguments_ftype* deprecated_push_arguments;</tt><newline>
<item><tt>int deprecated_register_size;</tt><newline>
<item><tt>int call_dummy_location;</tt><newline>
<item><tt>gdbarch_push_dummy_code_ftype* push_dummy_code;</tt><newline>
<item><tt>gdbarch_print_registers_info_ftype* print_registers_info;</tt><newline>
<item><tt>gdbarch_print_float_info_ftype* print_float_info;</tt><newline>
<item><tt>gdbarch_print_vector_info_ftype* print_vector_info;</tt><newline>
<item><tt>gdbarch_register_sim_regno_ftype* register_sim_regno;</tt><newline>
<item><tt>gdbarch_register_bytes_ok_ftype* register_bytes_ok;</tt><newline>
<item><tt>gdbarch_cannot_fetch_register_ftype* cannot_fetch_register;</tt><newline>
<item><tt>gdbarch_cannot_store_register_ftype* cannot_store_register;</tt><newline>
<item><tt>gdbarch_get_longjmp_target_ftype* get_longjmp_target;</tt><newline>
<item><tt>int believe_pcc_promotion;</tt><newline>
<item><tt>gdbarch_convert_register_p_ftype* convert_register_p;</tt><newline>
<item><tt>gdbarch_register_to_value_ftype* register_to_value;</tt><newline>
<item><tt>gdbarch_value_to_register_ftype* value_to_register;</tt><newline>
<item><tt>gdbarch_pointer_to_address_ftype* pointer_to_address;</tt><newline>
<item><tt>gdbarch_address_to_pointer_ftype* address_to_pointer;</tt><newline>
<item><tt>gdbarch_integer_to_address_ftype* integer_to_address;</tt><newline>
<item><tt>gdbarch_deprecated_store_struct_return_ftype* deprecated_store_struct_return;</tt><newline>
<item><tt>gdbarch_return_value_ftype* return_value;</tt><newline>
<item><tt>gdbarch_extract_return_value_ftype* extract_return_value;</tt><newline>
<item><tt>gdbarch_store_return_value_ftype* store_return_value;</tt><newline>
<item><tt>gdbarch_deprecated_extract_return_value_ftype* deprecated_extract_return_value;</tt><newline>
<item><tt>gdbarch_deprecated_store_return_value_ftype* deprecated_store_return_value;</tt><newline>
<item><tt>gdbarch_deprecated_use_struct_convention_ftype* deprecated_use_struct_convention;</tt><newline>
<item><tt>gdbarch_deprecated_extract_struct_value_address_ftype* deprecated_extract_struct_value_address;</tt><newline>
<item><tt>gdbarch_skip_prologue_ftype* skip_prologue;</tt><newline>
<item><tt>gdbarch_skip_prologue_addr_ctx_ftype* skip_prologue_addr_ctx;</tt><newline>
<item><tt>gdbarch_inner_than_ftype* inner_than;</tt><newline>
<item><tt>gdbarch_breakpoint_from_pc_ftype* breakpoint_from_pc;</tt><newline>
<item><tt>gdbarch_adjust_breakpoint_address_ftype* adjust_breakpoint_address;</tt><newline>
<item><tt>gdbarch_memory_insert_breakpoint_ftype* memory_insert_breakpoint;</tt><newline>
<item><tt>gdbarch_memory_remove_breakpoint_ftype* memory_remove_breakpoint;</tt><newline>
<item><tt>CORE_ADDR decr_pc_after_break;</tt><newline>
<item><tt>CORE_ADDR deprecated_function_start_offset;</tt><newline>
<item><tt>gdbarch_remote_translate_xfer_address_ftype* remote_translate_xfer_address;</tt><newline>
<item><tt>gdbarch_fetch_tls_load_module_address_ftype* fetch_tls_load_module_address;</tt><newline>
<item><tt>CORE_ADDR frame_args_skip;</tt><newline>
<item><tt>gdbarch_unwind_pc_ftype* unwind_pc;</tt><newline>
<item><tt>gdbarch_unwind_sp_ftype* unwind_sp;</tt><newline>
<item><tt>gdbarch_deprecated_saved_pc_after_call_ftype* deprecated_saved_pc_after_call;</tt><newline>
<item><tt>gdbarch_frame_num_args_ftype* frame_num_args;</tt><newline>
<item><tt>gdbarch_deprecated_stack_align_ftype* deprecated_stack_align;</tt><newline>
<item><tt>gdbarch_frame_align_ftype* frame_align;</tt><newline>
<item><tt>gdbarch_deprecated_reg_struct_has_addr_ftype* deprecated_reg_struct_has_addr;</tt><newline>
<item><tt>gdbarch_stabs_argument_has_addr_ftype* stabs_argument_has_addr;</tt><newline>
<item><tt>int frame_red_zone_size;</tt><newline>
<item><tt>gdbarch_convert_from_func_ptr_addr_ftype* convert_from_func_ptr_addr;</tt><newline>
<item><tt>gdbarch_addr_bits_remove_ftype* addr_bits_remove;</tt><newline>
<item><tt>gdbarch_smash_text_address_ftype* smash_text_address;</tt><newline>
<item><tt>gdbarch_software_single_step_ftype* software_single_step;</tt><newline>
<item><tt>gdbarch_single_step_through_delay_ftype* single_step_through_delay;</tt><newline>
<item><tt>gdbarch_print_insn_ftype* print_insn;</tt><newline>
<item><tt>gdbarch_skip_trampoline_code_ftype* skip_trampoline_code;</tt><newline>
<item><tt>gdbarch_skip_solib_resolver_ftype* skip_solib_resolver;</tt><newline>
<item><tt>gdbarch_in_solib_return_trampoline_ftype* in_solib_return_trampoline;</tt><newline>
<item><tt>gdbarch_in_function_epilogue_p_ftype* in_function_epilogue_p;</tt><newline>
<item><tt>gdbarch_construct_inferior_arguments_ftype* construct_inferior_arguments;</tt><newline>
<item><tt>gdbarch_elf_make_msymbol_special_ftype* elf_make_msymbol_special;</tt><newline>
<item><tt>gdbarch_coff_make_msymbol_special_ftype* coff_make_msymbol_special;</tt><newline>
<item><tt>gdbarch_dbx_make_msymbol_special_ftype* dbx_make_msymbol_special;</tt><newline>
<item><tt>const char* name_of_malloc;</tt><newline>
<item><tt>int cannot_step_breakpoint;</tt><newline>
<item><tt>int have_nonsteppable_watchpoint;</tt><newline>
<item><tt>gdbarch_address_class_type_flags_ftype* address_class_type_flags;</tt><newline>
<item><tt>gdbarch_address_class_type_flags_to_name_ftype* address_class_type_flags_to_name;</tt><newline>
<item><tt>gdbarch_address_class_name_to_type_flags_ftype* address_class_name_to_type_flags;</tt><newline>
<item><tt>gdbarch_register_reggroup_p_ftype* register_reggroup_p;</tt><newline>
<item><tt>gdbarch_fetch_pointer_argument_ftype* fetch_pointer_argument;</tt><newline>
<item><tt>gdbarch_regset_from_core_section_ftype* regset_from_core_section;</tt><newline>
<item><tt>gdbarch_adjust_ehframe_regnum_ftype* adjust_ehframe_regnum;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct gdbarch_data

<p>
<itemize>
<item><tt>struct gdbarch_data</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>unsigned int index;</tt><newline>
<item><tt>int init_p;</tt><newline>
<item><tt>gdbarch_data_pre_init_ftype* pre_init;</tt><newline>
<item><tt>gdbarch_data_post_init_ftype* post_init;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct gdbarch_data_registration

<p>
<itemize>
<item><tt>struct gdbarch_data_registration</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct gdbarch_data* data;</tt><newline>
<item><tt>struct gdbarch_data_registration* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct gdbarch_data_registry

<p>
<itemize>
<item><tt>struct gdbarch_data_registry</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>unsigned int nr;</tt><newline>
<item><tt>struct gdbarch_data_registration* registrations;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct gdbarch_swap

<p>
<itemize>
<item><tt>struct gdbarch_swap</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>void* swap;</tt><newline>
<item><tt>struct gdbarch_swap_registration* source;</tt><newline>
<item><tt>struct gdbarch_swap* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct gdbarch_swap_registration

<p>
<itemize>
<item><tt>struct gdbarch_swap_registration</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>void* data;</tt><newline>
<item><tt>unsigned long sizeof_data;</tt><newline>
<item><tt>gdbarch_swap_ftype* init;</tt><newline>
<item><tt>struct gdbarch_swap_registration* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct gdbarch_swap_registry

<p>
<itemize>
<item><tt>struct gdbarch_swap_registry</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int nr;</tt><newline>
<item><tt>struct gdbarch_swap_registration* registrations;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct gdbarch_registration

<p>
<itemize>
<item><tt>struct gdbarch_registration</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>enum bfd_architecture bfd_architecture;</tt><newline>
<item><tt>gdbarch_init_ftype* init;</tt><newline>
<item><tt>gdbarch_dump_tdep_ftype* dump_tdep;</tt><newline>
<item><tt>struct gdbarch_list* arches;</tt><newline>
<item><tt>struct gdbarch_registration* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable current_gdbarch

<p>
<tt>struct gdbarch* current_gdbarch</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bcache.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>charset.c
<item>cli-out.c
<item>coff-pe-read.c
<item>coffread.c
<item>complaints.c
<item>completer.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>demangle.c
<item>dictionary.c
<item>disasm.c
<item>doublest.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>environ.c
<item>eval.c
<item>event-loop.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>interps.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod-cisco.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macrocmd.c
<item>macroexp.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>observer.c
<item>osabi.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>reggroups.c
<item>remote-fileio.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>ser-base.c
<item>ser-unix.c
<item>serial.c
<item>solib-null.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>ui-file.c
<item>ui-out.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_m2_language()  :  m2-lang.c
<item>_initialize_mdebugread()  :  mdebugread.c
<item>_initialize_scheme_language()  :  scm-lang.c
<item>ada_create_fundamental_type()  :  ada-lang.c
<item>ada_value_assign()  :  ada-lang.c
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>add_enum_psymbol()  :  dwarfread.c
<item>add_kext_command()  :  symfile.c
<item>address_info()  :  printcmd.c
<item>address_space_int_to_name()  :  gdbtypes.c
<item>address_space_name_to_int()  :  gdbtypes.c
<item>adjust_breakpoint_address()  :  breakpoint.c
<item>adjust_field_bitsize()  :  stabsread.c
<item>adjust_pc_after_break()  :  infrun.c
<item>allocate_space_in_inferior_malloc()  :  valops.c
<item>attribute_size()  :  dwarfread.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>breakpoint_1()  :  breakpoint.c
<item>breakpoint_re_set_all()  :  breakpoint.c
<item>build_fortran_types()  :  f-lang.c
<item>build_gdb_vtable_type()  :  gnu-v3-abi.c
<item>build_gdbtypes()  :  gdbtypes.c
<item>build_infrun()  :  infrun.c
<item>build_regcache()  :  regcache.c
<item>build_remote_gdbarch_data()  :  remote.c
<item>c_create_fundamental_type()  :  c-lang.c
<item>c_lex()  :  c-exp.c
<item>c_parse()  :  c-exp.c
<item>clear_solib()  :  solib.c
<item>coff_read_enum_type()  :  coffread.c
<item>coff_symtab_read()  :  coffread.c
<item>collect_symbol()  :  tracepoint.c
<item>completedieinfo()  :  dwarfread.c
<item>convert_sect_addrs_to_offsets_via_on_disk_file()  :  symfile.c
<item>create_string_type()  :  gdbtypes.c
<item>current_gdbarch_swap_in_hack()  :  gdbarch.c
<item>current_gdbarch_swap_init_hack()  :  gdbarch.c
<item>current_gdbarch_swap_out_hack()  :  gdbarch.c
<item>debug_print_register()  :  target/target.c
<item>decode_base_type()  :  coffread.c
<item>decode_format()  :  printcmd.c
<item>decode_frame_entry_1()  :  dwarf2-frame.c
<item>decode_line_2()  :  linespec.c
<item>decode_line_numbers()  :  dwarfread.c
<item>decode_objc()  :  linespec.c
<item>decode_packed_array()  :  ada-lang.c
<item>decode_subscript_data_item()  :  dwarfread.c
<item>default_memory_insert_breakpoint()  :  mem-break.c
<item>default_memory_remove_breakpoint()  :  mem-break.c
<item>default_print_registers_info()  :  infcmd.c
<item>default_register_reggroup_p()  :  reggroups.c
<item>default_stabs_argument_has_addr()  :  arch-utils.c
<item>define_symbol()  :  stabsread.c
<item>deprecated_current_gdbarch_select_hack()  :  gdbarch.c
<item>deprecated_pc_in_call_dummy()  :  dummy-frame.c
<item>deprecated_print_address_numeric()  :  printcmd.c
<item>deprecated_read_memory_nobpt()  :  breakpoint.c
<item>deprecated_read_register_bytes()  :  regcache.c
<item>deprecated_read_register_gen()  :  regcache.c
<item>deprecated_registers_fetched()  :  regcache.c
<item>deprecated_write_register_bytes()  :  regcache.c
<item>deprecated_write_register_gen()  :  regcache.c
<item>do_one_display()  :  printcmd.c
<item>dump_insns()  :  disasm.c
<item>dwarf2_add_field()  :  dwarf2read.c
<item>dwarf2_evaluate_loc_desc()  :  dwarf2loc.c
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
<item>dwarf2_frame_default_init_reg()  :  dwarf2-frame.c
<item>dwarf2_frame_prev_register()  :  dwarf2-frame.c
<item>dwarf2_read_address()  :  dwarf2expr.c
<item>dwarf2_scan_inlined_section_for_psymbols()  :  dwarf2read.c
<item>dwarf2_tracepoint_var_ref()  :  dwarf2loc.c
<item>dwarf_expr_read_reg()  :  dwarf2loc.c
<item>dwarf_expr_tls_address()  :  dwarf2loc.c
<item>elf_symtab_read()  :  elfread.c
<item>encode_actions()  :  tracepoint.c
<item>ensure_lval()  :  ada-lang.c
<item>enum_type()  :  dwarfread.c
<item>evaluate_subexp_standard()  :  eval.c
<item>execute_cfa_program()  :  dwarf2-frame.c
<item>execute_stack_op()  :  dwarf2expr.c
<item>extract_long_unsigned_integer_with_byte_order()  :  findvar.c
<item>extract_signed_integer_with_byte_order()  :  findvar.c
<item>extract_typed_address()  :  findvar.c
<item>extract_unsigned_integer_with_byte_order()  :  findvar.c
<item>f_create_fundamental_type()  :  f-lang.c
<item>f_lex()  :  f-exp.c
<item>find_arch_by_info()  :  gdbarch.c
<item>find_function_addr()  :  infcall.c
<item>find_function_start_sal()  :  symtab.c
<item>find_implementation_from_class()  :  objc-lang.c
<item>find_location_expression()  :  dwarf2loc.c
<item>find_pc_offset()  :  disasm.c
<item>float_info()  :  infcmd.c
<item>floatformat_from_length()  :  doublest.c
<item>frame_id_inner()  :  frame.c
<item>frame_info()  :  stack.c
<item>frame_pc_unwind()  :  frame.c
<item>frame_register_unwind()  :  frame.c
<item>frame_save_as_regcache()  :  frame.c
<item>frame_sp_unwind()  :  frame.c
<item>free_so()  :  solib.c
<item>gdb_disassembly()  :  disasm.c
<item>gdb_print_insn()  :  disasm.c
<item>gdbarch_find_by_info()  :  gdbarch.c
<item>gdbarch_update_p()  :  arch-utils.c
<item>gdbtypes_post_init()  :  gdbtypes.c
<item>gen_bitfield_ref()  :  ax-gdb.c
<item>gen_expr()  :  ax-gdb.c
<item>gen_frame_args_address()  :  ax-gdb.c
<item>gen_frame_locals_address()  :  ax-gdb.c
<item>generic_register_byte()  :  arch-utils.c
<item>generic_register_size()  :  arch-utils.c
<item>generic_target_write_pc()  :  regcache.c
<item>get_class_address_from_object()  :  objc-lang.c
<item>get_frame_arch()  :  frame.c
<item>get_inferior_args()  :  infcmd.c
<item>get_java_object_header_size()  :  jv-lang.c
<item>get_remote_state()  :  remote.c
<item>gnu_v3_update_exception_catchpoints()  :  breakpoint.c
<item>gnuv3_baseclass_offset()  :  gnu-v3-abi.c
<item>gnuv3_rtti_type()  :  gnu-v3-abi.c
<item>gnuv3_virtual_fn_field()  :  gnu-v3-abi.c
<item>hand_function_call()  :  infcall.c
<item>handle_inferior_event()  :  infrun.c
<item>in_prologue()  :  symtab.c
<item>in_solib_dynsym_resolve_code()  :  solib.c
<item>info_sharedlibrary_command()  :  solib.c
<item>init_regcache_descr()  :  regcache.c
<item>init_remote_state()  :  remote.c
<item>init_type()  :  gdbtypes.c
<item>inlined_frame_sniffer()  :  inlining.c
<item>insert_step_resume_breakpoint_at_frame()  :  infrun.c
<item>inside_main_func()  :  frame.c
<item>java_value_print()  :  jv-valprint.c
<item>legacy_extract_return_value()  :  arch-utils.c
<item>legacy_register_sim_regno()  :  arch-utils.c
<item>legacy_return_value()  :  arch-utils.c
<item>legacy_store_return_value()  :  arch-utils.c
<item>legacy_virtual_frame_pointer()  :  arch-utils.c
<item>length_of_this_instruction()  :  target/target.c
<item>locate_var_value()  :  findvar.c
<item>locexpr_describe_location()  :  dwarf2loc.c
<item>loclist_describe_location()  :  dwarf2loc.c
<item>locval()  :  dwarfread.c
<item>lookup_typename()  :  gdbtypes.c
<item>m2_create_fundamental_type()  :  m2-lang.c
<item>maintenance_print_architecture()  :  maint.c
<item>maintenance_print_reggroups()  :  reggroups.c
<item>make_pointer_type()  :  gdbtypes.c
<item>make_reference_type()  :  gdbtypes.c
<item>mem_info_command()  :  memattr.c
<item>memory_insert_breakpoint()  :  mem-break.c
<item>memory_remove_breakpoint()  :  mem-break.c
<item>minsym_found()  :  linespec.c
<item>minsyms_found()  :  linespec.c
<item>modify_field()  :  value.c
<item>move_bits()  :  ada-lang.c
<item>name_lookup()  :  ada-exp.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>new_objc_runtime_internals()  :  objc-lang.c
<item>new_symbol()  :  dwarf2read.c
<item>objc_create_fundamental_type()  :  objc-lang.c
<item>objc_handle_update()  :  objc-lang.c
<item>objc_init_trampoline_observer()  :  objc-lang.c
<item>objc_lex()  :  objc-exp.c
<item>objc_read_trampoline_region()  :  objc-lang.c
<item>objc_skip_trampoline()  :  objc-lang.c
<item>open_bfd_matching_arch()  :  symfile.c
<item>packet_reg_from_pnum()  :  remote.c
<item>packet_reg_from_regnum()  :  remote.c
<item>paddr()  :  utils.c
<item>paddr_nz()  :  utils.c
<item>paddress()  :  utils.c
<item>parse_number()  :  f-exp.c
<item>parse_symbol()  :  mdebugread.c
<item>pascal_create_fundamental_type()  :  p-lang.c
<item>pascal_lex()  :  p-exp.c
<item>pascal_val_print()  :  p-valprint.c
<item>print_address_symbolic()  :  printcmd.c
<item>print_args_stub()  :  stack.c
<item>print_binary_chars()  :  valprint.c
<item>print_char_chars_with_byte_order()  :  valprint.c
<item>print_decimal_chars()  :  valprint.c
<item>print_float_info()  :  infcmd.c
<item>print_frame_args()  :  stack.c
<item>print_function_pointer_address()  :  c-valprint.c
<item>print_hex_chars_with_byte_order()  :  valprint.c
<item>print_msymbol_info()  :  symtab.c
<item>print_octal_chars()  :  valprint.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>print_return_value()  :  infcmd.c
<item>print_scalar_formatted()  :  printcmd.c
<item>print_single_dwarf_location()  :  dwarf2loc.c
<item>print_subexp_standard()  :  expprint.c
<item>print_vector_info()  :  infcmd.c
<item>proceed()  :  infrun.c
<item>processInt()  :  ada-exp.c
<item>processReal()  :  ada-exp.c
<item>process_coff_symbol()  :  coffread.c
<item>process_dies()  :  dwarfread.c
<item>process_one_symbol()  :  dbxread.c
<item>read_enum_type()  :  stabsread.c
<item>read_objc_class()  :  objc-lang.c
<item>read_objc_method()  :  objc-lang.c
<item>read_objc_method_list_method()  :  objc-lang.c
<item>read_objc_method_list_nmethods()  :  objc-lang.c
<item>read_objc_object()  :  objc-lang.c
<item>read_objc_super()  :  objc-lang.c
<item>read_pc_pid()  :  regcache.c
<item>read_range_type()  :  stabsread.c
<item>read_reg()  :  dwarf2-frame.c
<item>read_register()  :  regcache.c
<item>read_sp()  :  regcache.c
<item>read_tag_pointer_type()  :  dwarf2read.c
<item>read_target_long_array()  :  symfile.c
<item>record_line()  :  buildsym.c
<item>record_minimal_symbol()  :  elfread.c
<item>regcache_dump()  :  regcache.c
<item>regcache_raw_write()  :  regcache.c
<item>register_size()  :  regcache.c
<item>registers_info()  :  infcmd.c
<item>remote_async_wait()  :  remote.c
<item>remote_fetch_registers()  :  remote.c
<item>remote_insert_breakpoint()  :  remote.c
<item>remote_insert_hw_breakpoint()  :  remote.c
<item>remote_prepare_to_store()  :  remote.c
<item>remote_remove_breakpoint()  :  remote.c
<item>remote_remove_hw_breakpoint()  :  remote.c
<item>remote_store_registers()  :  remote.c
<item>remote_wait()  :  remote.c
<item>resolve_msgsend()  :  objc-lang.c
<item>resolve_msgsend_stret()  :  objc-lang.c
<item>resolve_msgsend_super()  :  objc-lang.c
<item>resolve_msgsend_super_stret()  :  objc-lang.c
<item>resolve_newruntime_objc_msgsend()  :  objc-lang.c
<item>resolve_newruntime_objc_msgsendsuper()  :  objc-lang.c
<item>resume()  :  infrun.c
<item>return_command()  :  stack.c
<item>scope_info()  :  tracepoint.c
<item>sentinel_frame_prev_register()  :  sentinel-frame.c
<item>set_gdbarch_from_file()  :  arch-utils.c
<item>show_architecture()  :  arch-utils.c
<item>show_endian()  :  arch-utils.c
<item>show_osabi()  :  osabi.c
<item>signed_address_type()  :  dwarf2expr.c
<item>simple_overlay_update_1()  :  symfile.c
<item>skip_prologue_using_sal()  :  symtab.c
<item>solib_add()  :  solib.c
<item>solib_create_inferior_hook()  :  solib.c
<item>solib_map_sections()  :  solib.c
<item>solib_open()  :  solib.c
<item>step_into_function()  :  infrun.c
<item>store_register_using_P()  :  remote.c
<item>store_signed_integer_with_byte_order()  :  findvar.c
<item>store_typed_address()  :  findvar.c
<item>store_unsigned_integer_with_byte_order()  :  findvar.c
<item>strlen_paddr()  :  utils.c
<item>struct_type()  :  dwarfread.c
<item>trace_dump_command()  :  tracepoint.c
<item>tracepoints_info()  :  tracepoint.c
<item>trad_frame_alloc_saved_regs()  :  trad-frame.c
<item>type_char()  :  ada-exp.c
<item>type_double()  :  ada-exp.c
<item>type_float()  :  ada-exp.c
<item>type_int()  :  ada-exp.c
<item>type_long()  :  ada-exp.c
<item>type_long_double()  :  ada-exp.c
<item>type_long_long()  :  ada-exp.c
<item>type_system_address()  :  ada-exp.c
<item>ui_out_field_core_addr()  :  ui-out.c
<item>unpack_field_as_long()  :  value.c
<item>unsigned_address_type()  :  dwarf2expr.c
<item>update_solib_list()  :  solib.c
<item>user_reg_map_name_to_regnum()  :  user-regs.c
<item>using_struct_return()  :  value.c
<item>value_as_address()  :  value.c
<item>value_assign()  :  valops.c
<item>value_binop()  :  valarith.c
<item>value_bit_index()  :  valarith.c
<item>value_cast_1()  :  valops.c
<item>value_from_register()  :  findvar.c
<item>value_from_string()  :  value.c
<item>value_objc_target_type()  :  objc-lang.c
<item>value_of_builtin_frame_fp_reg()  :  std-regs.c
<item>value_of_builtin_frame_pc_reg()  :  std-regs.c
<item>value_of_builtin_frame_ps_reg()  :  std-regs.c
<item>value_of_builtin_frame_reg()  :  std-regs.c
<item>value_of_builtin_frame_sp_reg()  :  std-regs.c
<item>value_of_register()  :  findvar.c
<item>value_slice()  :  valops.c
<item>value_subscript()  :  valarith.c
<item>vector_info()  :  infcmd.c
<item>vtable_address_point_offset()  :  gnu-v3-abi.c
<item>watchpoint_check()  :  breakpoint.c
<item>write_inferior_status_register()  :  infrun.c
<item>write_pc_pid()  :  regcache.c
<item>write_register()  :  regcache.c
<item>x86_frame_prev_register()  :  target/x86-shared-tdep.c
<item>x86_frame_this_id()  :  target/x86-shared-tdep.c
</itemize>
</descrip>

<sect1>Global Variable gdbarch_debug

<p>
<tt>int gdbarch_debug</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bcache.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>charset.c
<item>cli-out.c
<item>coff-pe-read.c
<item>coffread.c
<item>complaints.c
<item>completer.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>demangle.c
<item>dictionary.c
<item>disasm.c
<item>doublest.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>environ.c
<item>eval.c
<item>event-loop.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>interps.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod-cisco.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macrocmd.c
<item>macroexp.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>observer.c
<item>osabi.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>reggroups.c
<item>remote-fileio.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>ser-base.c
<item>ser-unix.c
<item>serial.c
<item>solib-null.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>ui-file.c
<item>ui-out.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_gdbarch()  :  gdbarch.c
<item>find_arch_by_info()  :  gdbarch.c
<item>gdbarch_addr_bit()  :  gdbarch.c
<item>gdbarch_addr_bits_remove()  :  gdbarch.c
<item>gdbarch_address_class_name_to_type_flags()  :  gdbarch.c
<item>gdbarch_address_class_type_flags()  :  gdbarch.c
<item>gdbarch_address_class_type_flags_to_name()  :  gdbarch.c
<item>gdbarch_address_to_pointer()  :  gdbarch.c
<item>gdbarch_adjust_breakpoint_address()  :  gdbarch.c
<item>gdbarch_adjust_ehframe_regnum()  :  gdbarch.c
<item>gdbarch_believe_pcc_promotion()  :  gdbarch.c
<item>gdbarch_bfd_arch_info()  :  gdbarch.c
<item>gdbarch_bfd_vma_bit()  :  gdbarch.c
<item>gdbarch_breakpoint_from_pc()  :  gdbarch.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>gdbarch_call_dummy_location()  :  gdbarch.c
<item>gdbarch_cannot_fetch_register()  :  gdbarch.c
<item>gdbarch_cannot_step_breakpoint()  :  gdbarch.c
<item>gdbarch_cannot_store_register()  :  gdbarch.c
<item>gdbarch_char_signed()  :  gdbarch.c
<item>gdbarch_coff_make_msymbol_special()  :  gdbarch.c
<item>gdbarch_construct_inferior_arguments()  :  gdbarch.c
<item>gdbarch_convert_from_func_ptr_addr()  :  gdbarch.c
<item>gdbarch_convert_register_p()  :  gdbarch.c
<item>gdbarch_dbx_make_msymbol_special()  :  gdbarch.c
<item>gdbarch_decr_pc_after_break()  :  gdbarch.c
<item>gdbarch_deprecated_extract_return_value()  :  gdbarch.c
<item>gdbarch_deprecated_extract_struct_value_address()  :  gdbarch.c
<item>gdbarch_deprecated_fp_regnum()  :  gdbarch.c
<item>gdbarch_deprecated_function_start_offset()  :  gdbarch.c
<item>gdbarch_deprecated_push_arguments()  :  gdbarch.c
<item>gdbarch_deprecated_reg_struct_has_addr()  :  gdbarch.c
<item>gdbarch_deprecated_register_byte()  :  gdbarch.c
<item>gdbarch_deprecated_register_size()  :  gdbarch.c
<item>gdbarch_deprecated_saved_pc_after_call()  :  gdbarch.c
<item>gdbarch_deprecated_stack_align()  :  gdbarch.c
<item>gdbarch_deprecated_store_return_value()  :  gdbarch.c
<item>gdbarch_deprecated_store_struct_return()  :  gdbarch.c
<item>gdbarch_deprecated_use_struct_convention()  :  gdbarch.c
<item>gdbarch_double_bit()  :  gdbarch.c
<item>gdbarch_double_format()  :  gdbarch.c
<item>gdbarch_dwarf2_reg_to_regnum()  :  gdbarch.c
<item>gdbarch_dwarf_reg_to_regnum()  :  gdbarch.c
<item>gdbarch_ecoff_reg_to_regnum()  :  gdbarch.c
<item>gdbarch_elf_make_msymbol_special()  :  gdbarch.c
<item>gdbarch_extract_return_value()  :  gdbarch.c
<item>gdbarch_fetch_pointer_argument()  :  gdbarch.c
<item>gdbarch_fetch_tls_load_module_address()  :  gdbarch.c
<item>gdbarch_float_bit()  :  gdbarch.c
<item>gdbarch_float_format()  :  gdbarch.c
<item>gdbarch_fp0_regnum()  :  gdbarch.c
<item>gdbarch_frame_align()  :  gdbarch.c
<item>gdbarch_frame_args_skip()  :  gdbarch.c
<item>gdbarch_frame_num_args()  :  gdbarch.c
<item>gdbarch_frame_red_zone_size()  :  gdbarch.c
<item>gdbarch_get_longjmp_target()  :  gdbarch.c
<item>gdbarch_have_nonsteppable_watchpoint()  :  gdbarch.c
<item>gdbarch_in_function_epilogue_p()  :  gdbarch.c
<item>gdbarch_in_solib_return_trampoline()  :  gdbarch.c
<item>gdbarch_info_fill()  :  arch-utils.c
<item>gdbarch_inner_than()  :  gdbarch.c
<item>gdbarch_int_bit()  :  gdbarch.c
<item>gdbarch_integer_to_address()  :  gdbarch.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>gdbarch_long_double_bit()  :  gdbarch.c
<item>gdbarch_long_double_format()  :  gdbarch.c
<item>gdbarch_long_long_bit()  :  gdbarch.c
<item>gdbarch_memory_insert_breakpoint()  :  gdbarch.c
<item>gdbarch_memory_remove_breakpoint()  :  gdbarch.c
<item>gdbarch_name_of_malloc()  :  gdbarch.c
<item>gdbarch_num_pseudo_regs()  :  gdbarch.c
<item>gdbarch_num_regs()  :  gdbarch.c
<item>gdbarch_osabi()  :  gdbarch.c
<item>gdbarch_pc_regnum()  :  gdbarch.c
<item>gdbarch_pointer_to_address()  :  gdbarch.c
<item>gdbarch_print_float_info()  :  gdbarch.c
<item>gdbarch_print_insn()  :  gdbarch.c
<item>gdbarch_print_registers_info()  :  gdbarch.c
<item>gdbarch_print_vector_info()  :  gdbarch.c
<item>gdbarch_ps_regnum()  :  gdbarch.c
<item>gdbarch_pseudo_register_read()  :  gdbarch.c
<item>gdbarch_pseudo_register_write()  :  gdbarch.c
<item>gdbarch_ptr_bit()  :  gdbarch.c
<item>gdbarch_push_dummy_call()  :  gdbarch.c
<item>gdbarch_push_dummy_code()  :  gdbarch.c
<item>gdbarch_read_pc()  :  gdbarch.c
<item>gdbarch_read_sp()  :  gdbarch.c
<item>gdbarch_register()  :  gdbarch.c
<item>gdbarch_register_bytes_ok()  :  gdbarch.c
<item>gdbarch_register_name()  :  gdbarch.c
<item>gdbarch_register_reggroup_p()  :  gdbarch.c
<item>gdbarch_register_sim_regno()  :  gdbarch.c
<item>gdbarch_register_to_value()  :  gdbarch.c
<item>gdbarch_register_type()  :  gdbarch.c
<item>gdbarch_regset_from_core_section()  :  gdbarch.c
<item>gdbarch_remote_translate_xfer_address()  :  gdbarch.c
<item>gdbarch_return_value()  :  gdbarch.c
<item>gdbarch_sdb_reg_to_regnum()  :  gdbarch.c
<item>gdbarch_short_bit()  :  gdbarch.c
<item>gdbarch_single_step_through_delay()  :  gdbarch.c
<item>gdbarch_skip_prologue()  :  gdbarch.c
<item>gdbarch_skip_prologue_addr_ctx()  :  gdbarch.c
<item>gdbarch_skip_solib_resolver()  :  gdbarch.c
<item>gdbarch_skip_trampoline_code()  :  gdbarch.c
<item>gdbarch_smash_text_address()  :  gdbarch.c
<item>gdbarch_software_single_step()  :  gdbarch.c
<item>gdbarch_sp_regnum()  :  gdbarch.c
<item>gdbarch_stab_reg_to_regnum()  :  gdbarch.c
<item>gdbarch_stabs_argument_has_addr()  :  gdbarch.c
<item>gdbarch_store_return_value()  :  gdbarch.c
<item>gdbarch_unwind_dummy_id()  :  gdbarch.c
<item>gdbarch_unwind_pc()  :  gdbarch.c
<item>gdbarch_unwind_sp()  :  gdbarch.c
<item>gdbarch_update_p()  :  arch-utils.c
<item>gdbarch_value_to_register()  :  gdbarch.c
<item>gdbarch_virtual_frame_pointer()  :  gdbarch.c
<item>gdbarch_write_pc()  :  gdbarch.c
<item>new_gdbarch_tdep()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Variable startup_gdbarch

<p>
<tt>struct gdbarch startup_gdbarch</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>gdbarch.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch.c
</itemize>
</descrip>

<sect1>Global Variable gdbarch_data_registry

<p>
<tt>struct gdbarch_data_registry gdbarch_data_registry</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>gdbarch.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>alloc_gdbarch_data()  :  gdbarch.c
<item>gdbarch_data_register()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Variable gdbarch_swap_registry

<p>
<tt>struct gdbarch_swap_registry gdbarch_swap_registry</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>gdbarch.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>current_gdbarch_swap_init_hack()  :  gdbarch.c
<item>deprecated_register_gdbarch_swap()  :  gdbarch.c
</itemize>
</descrip>

<sect1>External Variables

<p>
<bf>bfd_default_arch_struct</bf><newline>
<tt>extern const struct bfd_arch_info bfd_default_arch_struct</tt><newline>

<sect1>Local Variables

<p>
<bf>gdbarch_registry</bf><newline>
<tt>static struct gdbarch_registration* gdbarch_registry</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>find_arch_by_info()
<item>gdbarch_printable_names()
<item>gdbarch_register()
</itemize>
</descrip>

<sect1>Global Function _initialize_gdbarch()

<p><tt>void _initialize_gdbarch ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_setshow_zinteger_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>show_gdbarch_debug()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdbarch_debug  :  gdbarch.c
<item>setdebuglist, showdebuglist
</itemize>
</descrip>

<sect1>Global Function deprecated_current_gdbarch_select_hack()

<p><tt>void deprecated_current_gdbarch_select_hack ( struct gdbarch* new_gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>current_gdbarch_swap_in_hack()  :  gdbarch.c
<item>current_gdbarch_swap_out_hack()  :  gdbarch.c
<item>flush_cached_frames()  :  frame.c
<item>internal_error()  :  utils.c
<item>architecture_changed_event()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_update_p()  :  arch-utils.c
<item>set_gdbarch_from_file()  :  arch-utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function deprecated_register_gdbarch_swap()

<p><tt>void deprecated_register_gdbarch_swap ( void* data, unsigned long sizeof_data, gdbarch_swap_ftype* init )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_f_language()  :  f-lang.c
<item>_initialize_frame_reg()  :  std-regs.c
<item>_initialize_gdbtypes()  :  gdbtypes.c
<item>_initialize_infrun()  :  infrun.c
<item>_initialize_parse()  :  parse.c
<item>_initialize_regcache()  :  regcache.c
<item>_initialize_remote()  :  remote.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdbarch_swap_registry  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function deprecated_set_gdbarch_data()

<p><tt>void deprecated_set_gdbarch_data ( struct gdbarch* gdbarch, struct gdbarch_data* data, void* pointer )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>reggroup_add()  :  reggroups.c
<item>user_reg_add()  :  user-regs.c
<item>user_reg_replace()  :  user-regs.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_addr_bit()

<p><tt>int gdbarch_addr_bit ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_1()  :  breakpoint.c
<item>build_gdbtypes()  :  gdbtypes.c
<item>build_remote_gdbarch_data()  :  remote.c
<item>deprecated_print_address_numeric()  :  printcmd.c
<item>dwarf2_read_address()  :  dwarf2expr.c
<item>execute_stack_op()  :  dwarf2expr.c
<item>find_location_expression()  :  dwarf2loc.c
<item>gdbtypes_post_init()  :  gdbtypes.c
<item>loclist_describe_location()  :  dwarf2loc.c
<item>mem_info_command()  :  memattr.c
<item>paddr()  :  utils.c
<item>paddr_nz()  :  utils.c
<item>paddress()  :  utils.c
<item>paddress_with_arch()  :  utils.c
<item>print_address_symbolic()  :  printcmd.c
<item>print_msymbol_info()  :  symtab.c
<item>print_one_breakpoint()  :  breakpoint.c
<item>print_scalar_formatted()  :  printcmd.c
<item>print_single_dwarf_location()  :  dwarf2loc.c
<item>signed_address_type()  :  dwarf2expr.c
<item>strlen_paddr()  :  utils.c
<item>tracepoints_info()  :  tracepoint.c
<item>ui_out_field_core_addr()  :  ui-out.c
<item>unsigned_address_type()  :  dwarf2expr.c
<item>value_cast_1()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_addr_bits_remove()

<p><tt>CORE_ADDR gdbarch_addr_bits_remove ( struct gdbarch* gdbarch, CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
<item>do_one_display()  :  printcmd.c
<item>get_class_address_from_object()  :  objc-lang.c
<item>hand_function_call()  :  infcall.c
<item>insert_step_resume_breakpoint_at_frame()  :  infrun.c
<item>new_objc_runtime_find_impl()  :  objc-lang.c
<item>read_pc_pid()  :  regcache.c
<item>record_line()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_address_class_name_to_type_flags()

<p><tt>int gdbarch_address_class_name_to_type_flags ( struct gdbarch* gdbarch, const char* name, int* type_flags_ptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>address_space_name_to_int()  :  gdbtypes.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_address_class_name_to_type_flags_p()

<p><tt>int gdbarch_address_class_name_to_type_flags_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>address_space_name_to_int()  :  gdbtypes.c
<item>gdbarch_dump()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_address_class_type_flags()

<p><tt>int gdbarch_address_class_type_flags ( struct gdbarch* gdbarch, int byte_size, int dwarf2_addr_class )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_tag_pointer_type()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_address_class_type_flags_p()

<p><tt>int gdbarch_address_class_type_flags_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
<item>read_tag_pointer_type()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_address_class_type_flags_to_name()

<p><tt>const char* gdbarch_address_class_type_flags_to_name ( struct gdbarch* gdbarch, int type_flags )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>address_space_int_to_name()  :  gdbtypes.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_address_class_type_flags_to_name_p()

<p><tt>int gdbarch_address_class_type_flags_to_name_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>address_space_int_to_name()  :  gdbtypes.c
<item>gdbarch_dump()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_address_to_pointer()

<p><tt>void gdbarch_address_to_pointer ( struct gdbarch* gdbarch, struct type* type, gdb_byte* buf, CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>store_typed_address()  :  findvar.c
<item>value_of_builtin_frame_fp_reg()  :  std-regs.c
<item>value_of_builtin_frame_pc_reg()  :  std-regs.c
<item>value_of_builtin_frame_reg()  :  std-regs.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_adjust_breakpoint_address()

<p><tt>CORE_ADDR gdbarch_adjust_breakpoint_address ( struct gdbarch* gdbarch, CORE_ADDR bpaddr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>adjust_breakpoint_address()  :  breakpoint.c
<item>step_into_function()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_adjust_breakpoint_address_p()

<p><tt>int gdbarch_adjust_breakpoint_address_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>adjust_breakpoint_address()  :  breakpoint.c
<item>gdbarch_dump()  :  gdbarch.c
<item>step_into_function()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_adjust_ehframe_regnum()

<p><tt>int gdbarch_adjust_ehframe_regnum ( struct gdbarch* gdbarch, int regnum, int eh_frame_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_adjust_regnum()  :  dwarf2-frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_alloc()

<p><tt>struct gdbarch* gdbarch_alloc ( const struct gdbarch_info* info, struct gdbarch_tdep* tdep )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_gdbarch_data()  :  gdbarch.c
<item>gdbarch_bfd_arch_info()  :  gdbarch.c
<item>gdbarch_int_bit()  :  gdbarch.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_begin(), _obstack_newchunk()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>cannot_register_not()  :  arch-utils.c
<item>construct_inferior_arguments()  :  infcmd.c
<item>core_addr_identity()  :  arch-utils.c
<item>default_adjust_ehframe_regnum()  :  arch-utils.c
<item>default_coff_make_msymbol_special()  :  arch-utils.c
<item>default_dbx_make_msymbol_special()  :  arch-utils.c
<item>default_elf_make_msymbol_special()  :  arch-utils.c
<item>default_memory_insert_breakpoint()  :  mem-break.c
<item>default_memory_remove_breakpoint()  :  mem-break.c
<item>default_print_registers_info()  :  infcmd.c
<item>default_register_reggroup_p()  :  reggroups.c
<item>default_stabs_argument_has_addr()  :  arch-utils.c
<item>generic_convert_register_p()  :  arch-utils.c
<item>generic_in_function_epilogue_p()  :  arch-utils.c
<item>generic_in_solib_return_trampoline()  :  arch-utils.c
<item>generic_register_byte()  :  arch-utils.c
<item>generic_skip_solib_resolver()  :  arch-utils.c
<item>generic_skip_trampoline_code()  :  arch-utils.c
<item>generic_target_write_pc()  :  regcache.c
<item>legacy_register_sim_regno()  :  arch-utils.c
<item>legacy_return_value()  :  arch-utils.c
<item>no_op_reg_to_regnum()  :  arch-utils.c
<item>unsigned_address_to_pointer()  :  findvar.c
<item>unsigned_pointer_to_address()  :  findvar.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>convert_from_func_ptr_addr_identity, generic_remote_translate_xfer_address, generic_use_struct_convention, legacy_extract_return_value, legacy_store_return_value, legacy_virtual_frame_pointer
</itemize>
</descrip>

<sect1>Global Function gdbarch_believe_pcc_promotion()

<p><tt>int gdbarch_believe_pcc_promotion ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_bfd_arch_info()

<p><tt>const struct bfd_arch_info* gdbarch_bfd_arch_info ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_kext_command()  :  symfile.c
<item>gdb_disassemble_info()  :  disasm.c
<item>gdb_disassemble_info_noprint()  :  target/target.c
<item>gdbarch_alloc()  :  gdbarch.c
<item>gdbarch_dump()  :  gdbarch.c
<item>gdbarch_info_fill()  :  arch-utils.c
<item>gdbarch_instruction_length()  :  disasm.c
<item>gdbarch_update_p()  :  arch-utils.c
<item>show_architecture()  :  arch-utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_bfd_vma_bit()

<p><tt>int gdbarch_bfd_vma_bit ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>build_gdbtypes()  :  gdbtypes.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_breakpoint_from_pc()

<p><tt>const gdb_byte* gdbarch_breakpoint_from_pc ( struct gdbarch* gdbarch, CORE_ADDR* pcptr, int* lenptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>default_memory_insert_breakpoint()  :  mem-break.c
<item>default_memory_remove_breakpoint()  :  mem-break.c
<item>deprecated_read_memory_nobpt()  :  breakpoint.c
<item>generic_push_dummy_code()  :  infcall.c
<item>remote_insert_breakpoint()  :  remote.c
<item>remote_insert_hw_breakpoint()  :  remote.c
<item>remote_remove_breakpoint()  :  remote.c
<item>remote_remove_hw_breakpoint()  :  remote.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_byte_order()

<p><tt>int gdbarch_byte_order ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_value_assign()  :  ada-lang.c
<item>ada_value_primitive_packed_val()  :  ada-lang.c
<item>decode_packed_array()  :  ada-lang.c
<item>default_double_format()  :  arch-utils.c
<item>default_float_format()  :  arch-utils.c
<item>default_print_registers_info()  :  infcmd.c
<item>define_symbol()  :  stabsread.c
<item>dwarf2_add_field()  :  dwarf2read.c
<item>evaluate_subexp_standard()  :  eval.c
<item>extract_long_unsigned_integer_with_byte_order()  :  findvar.c
<item>extract_signed_integer_with_byte_order()  :  findvar.c
<item>extract_unsigned_integer_with_byte_order()  :  findvar.c
<item>gdb_disassemble_info()  :  disasm.c
<item>gdb_disassemble_info_noprint()  :  target/target.c
<item>gdbarch_info_fill()  :  arch-utils.c
<item>gen_bitfield_ref()  :  ax-gdb.c
<item>modify_field()  :  value.c
<item>move_bits()  :  ada-lang.c
<item>print_binary_chars()  :  valprint.c
<item>print_char_chars_with_byte_order()  :  valprint.c
<item>print_decimal_chars()  :  valprint.c
<item>print_hex_chars_with_byte_order()  :  valprint.c
<item>print_octal_chars()  :  valprint.c
<item>process_coff_symbol()  :  coffread.c
<item>regcache_dump()  :  regcache.c
<item>show_endian()  :  arch-utils.c
<item>store_signed_integer_with_byte_order()  :  findvar.c
<item>store_unsigned_integer_with_byte_order()  :  findvar.c
<item>struct_type()  :  dwarfread.c
<item>unpack_field_as_long()  :  value.c
<item>value_bit_index()  :  valarith.c
<item>value_from_register()  :  findvar.c
<item>value_slice()  :  valops.c
<item>value_subscript()  :  valarith.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_call_dummy_location()

<p><tt>int gdbarch_call_dummy_location ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_cannot_fetch_register()

<p><tt>int gdbarch_cannot_fetch_register ( struct gdbarch* gdbarch, int regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_cannot_step_breakpoint()

<p><tt>int gdbarch_cannot_step_breakpoint ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>resume()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_cannot_store_register()

<p><tt>int gdbarch_cannot_store_register ( struct gdbarch* gdbarch, int regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>regcache_raw_write()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_char_signed()

<p><tt>int gdbarch_char_signed ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>build_gdbtypes()  :  gdbtypes.c
<item>gdbtypes_post_init()  :  gdbtypes.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_coff_make_msymbol_special()

<p><tt>void gdbarch_coff_make_msymbol_special ( struct gdbarch* gdbarch, int val, struct minimal_symbol* msym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_construct_inferior_arguments()

<p><tt>char* gdbarch_construct_inferior_arguments ( struct gdbarch* gdbarch, int argc, char** argv )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_inferior_args()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_convert_from_func_ptr_addr()

<p><tt>CORE_ADDR gdbarch_convert_from_func_ptr_addr ( struct gdbarch* gdbarch, CORE_ADDR addr, struct target_ops* targ )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_function_addr()  :  infcall.c
<item>hand_function_call()  :  infcall.c
<item>inside_main_func()  :  frame.c
<item>print_function_pointer_address()  :  c-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_convert_register_p()

<p><tt>int gdbarch_convert_register_p ( struct gdbarch* gdbarch, int regnum, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_evaluate_loc_desc()  :  dwarf2loc.c
<item>value_assign()  :  valops.c
<item>value_from_register()  :  findvar.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_data_register_post_init()

<p><tt>struct gdbarch_data* gdbarch_data_register_post_init ( gdbarch_data_post_init_ftype* post_init )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_data_register()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_gdbtypes()  :  gdbtypes.c
<item>_initialize_language()  :  language.c
<item>_initialize_regcache()  :  regcache.c
<item>_initialize_reggroup()  :  reggroups.c
<item>_initialize_remote()  :  remote.c
<item>_initialize_user_regs()  :  user-regs.c
<item>init_gnuv3_ops()  :  gnu-v3-abi.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_data_register_pre_init()

<p><tt>struct gdbarch_data* gdbarch_data_register_pre_init ( gdbarch_data_pre_init_ftype* pre_init )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_data_register()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_dwarf2_frame()  :  dwarf2-frame.c
<item>_initialize_frame_base()  :  frame-base.c
<item>_initialize_frame_unwind()  :  frame-unwind.c
<item>_initialize_solib()  :  solib.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_dbx_make_msymbol_special()

<p><tt>void gdbarch_dbx_make_msymbol_special ( struct gdbarch* gdbarch, int16_t desc, struct minimal_symbol* msym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>record_minimal_symbol()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_decr_pc_after_break()

<p><tt>CORE_ADDR gdbarch_decr_pc_after_break ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>adjust_pc_after_break()  :  infrun.c
<item>deprecated_pc_in_call_dummy()  :  dummy-frame.c
<item>trace_dump_command()  :  tracepoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_extract_return_value()

<p><tt>void gdbarch_deprecated_extract_return_value ( struct gdbarch* gdbarch, struct type* type, gdb_byte* regbuf, gdb_byte* valbuf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>legacy_extract_return_value()  :  arch-utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_extract_struct_value_address()

<p><tt>CORE_ADDR gdbarch_deprecated_extract_struct_value_address ( struct gdbarch* gdbarch, struct regcache* regcache )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_extract_struct_value_address_p()

<p><tt>int gdbarch_deprecated_extract_struct_value_address_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_fp_regnum()

<p><tt>int gdbarch_deprecated_fp_regnum ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>legacy_virtual_frame_pointer()  :  arch-utils.c
<item>value_of_builtin_frame_fp_reg()  :  std-regs.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_function_start_offset()

<p><tt>CORE_ADDR gdbarch_deprecated_function_start_offset ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_function_addr()  :  infcall.c
<item>find_function_start_sal()  :  symtab.c
<item>handle_inferior_event()  :  infrun.c
<item>minsym_found()  :  linespec.c
<item>minsyms_found()  :  linespec.c
<item>skip_prologue_using_sal()  :  symtab.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_push_arguments()

<p><tt>CORE_ADDR gdbarch_deprecated_push_arguments ( struct gdbarch* gdbarch, int nargs, struct value** args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_push_arguments_p()

<p><tt>int gdbarch_deprecated_push_arguments_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
<item>hand_function_call()  :  infcall.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_reg_struct_has_addr()

<p><tt>int gdbarch_deprecated_reg_struct_has_addr ( struct gdbarch* gdbarch, int gcc_p, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>default_stabs_argument_has_addr()  :  arch-utils.c
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_reg_struct_has_addr_p()

<p><tt>int gdbarch_deprecated_reg_struct_has_addr_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>default_stabs_argument_has_addr()  :  arch-utils.c
<item>gdbarch_dump()  :  gdbarch.c
<item>hand_function_call()  :  infcall.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_register_byte()

<p><tt>int gdbarch_deprecated_register_byte ( struct gdbarch* gdbarch, int reg_nr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>deprecated_read_register_bytes()  :  regcache.c
<item>deprecated_write_register_bytes()  :  regcache.c
<item>init_remote_state()  :  remote.c
<item>regcache_dump()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_register_byte_p()

<p><tt>int gdbarch_deprecated_register_byte_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>generic_register_byte()  :  arch-utils.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_register_size()

<p><tt>int gdbarch_deprecated_register_size ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_saved_pc_after_call()

<p><tt>CORE_ADDR gdbarch_deprecated_saved_pc_after_call ( struct gdbarch* gdbarch, struct frame_info* frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_saved_pc_after_call_p()

<p><tt>int gdbarch_deprecated_saved_pc_after_call_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_stack_align()

<p><tt>CORE_ADDR gdbarch_deprecated_stack_align ( struct gdbarch* gdbarch, CORE_ADDR sp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_stack_align_p()

<p><tt>int gdbarch_deprecated_stack_align_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_store_return_value()

<p><tt>void gdbarch_deprecated_store_return_value ( struct gdbarch* gdbarch, struct type* type, gdb_byte* valbuf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>legacy_store_return_value()  :  arch-utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_store_struct_return()

<p><tt>void gdbarch_deprecated_store_struct_return ( struct gdbarch* gdbarch, CORE_ADDR addr, CORE_ADDR sp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_store_struct_return_p()

<p><tt>int gdbarch_deprecated_store_struct_return_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_deprecated_use_struct_convention()

<p><tt>int gdbarch_deprecated_use_struct_convention ( struct gdbarch* gdbarch, int gcc_p, struct type* value_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>legacy_return_value()  :  arch-utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_double_bit()

<p><tt>int gdbarch_double_bit ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_mdebugread()  :  mdebugread.c
<item>ada_create_fundamental_type()  :  ada-lang.c
<item>ada_language_arch_info()  :  ada-lang.c
<item>build_fortran_types()  :  f-lang.c
<item>build_gdbtypes()  :  gdbtypes.c
<item>c_create_fundamental_type()  :  c-lang.c
<item>f_create_fundamental_type()  :  f-lang.c
<item>floatformat_from_length()  :  doublest.c
<item>gdbtypes_post_init()  :  gdbtypes.c
<item>m2_create_fundamental_type()  :  m2-lang.c
<item>objc_create_fundamental_type()  :  objc-lang.c
<item>pascal_create_fundamental_type()  :  p-lang.c
<item>processReal()  :  ada-exp.c
<item>value_binop()  :  valarith.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_double_format()

<p><tt>const struct floatformat* gdbarch_double_format ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>floatformat_from_length()  :  doublest.c
<item>gdbtypes_post_init()  :  gdbtypes.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_dump()

<p><tt>void gdbarch_dump ( struct gdbarch* current_gdbarch, struct ui_file* file )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>gdbarch_address_class_name_to_type_flags_p()  :  gdbarch.c
<item>gdbarch_address_class_type_flags_p()  :  gdbarch.c
<item>gdbarch_address_class_type_flags_to_name_p()  :  gdbarch.c
<item>gdbarch_adjust_breakpoint_address_p()  :  gdbarch.c
<item>gdbarch_bfd_arch_info()  :  gdbarch.c
<item>gdbarch_deprecated_extract_struct_value_address_p()  :  gdbarch.c
<item>gdbarch_deprecated_push_arguments_p()  :  gdbarch.c
<item>gdbarch_deprecated_reg_struct_has_addr_p()  :  gdbarch.c
<item>gdbarch_deprecated_register_byte_p()  :  gdbarch.c
<item>gdbarch_deprecated_saved_pc_after_call_p()  :  gdbarch.c
<item>gdbarch_deprecated_stack_align_p()  :  gdbarch.c
<item>gdbarch_deprecated_store_struct_return_p()  :  gdbarch.c
<item>gdbarch_fetch_pointer_argument_p()  :  gdbarch.c
<item>gdbarch_fetch_tls_load_module_address_p()  :  gdbarch.c
<item>gdbarch_frame_align_p()  :  gdbarch.c
<item>gdbarch_frame_num_args_p()  :  gdbarch.c
<item>gdbarch_get_longjmp_target_p()  :  gdbarch.c
<item>gdbarch_integer_to_address_p()  :  gdbarch.c
<item>gdbarch_name_of_malloc()  :  gdbarch.c
<item>gdbarch_print_float_info_p()  :  gdbarch.c
<item>gdbarch_print_vector_info_p()  :  gdbarch.c
<item>gdbarch_pseudo_register_read_p()  :  gdbarch.c
<item>gdbarch_pseudo_register_write_p()  :  gdbarch.c
<item>gdbarch_push_dummy_call_p()  :  gdbarch.c
<item>gdbarch_push_dummy_code_p()  :  gdbarch.c
<item>gdbarch_read_pc_p()  :  gdbarch.c
<item>gdbarch_read_sp_p()  :  gdbarch.c
<item>gdbarch_register_bytes_ok_p()  :  gdbarch.c
<item>gdbarch_register_type_p()  :  gdbarch.c
<item>gdbarch_regset_from_core_section_p()  :  gdbarch.c
<item>gdbarch_return_value_p()  :  gdbarch.c
<item>gdbarch_single_step_through_delay_p()  :  gdbarch.c
<item>gdbarch_skip_prologue_addr_ctx_p()  :  gdbarch.c
<item>gdbarch_software_single_step_p()  :  gdbarch.c
<item>gdbarch_unwind_dummy_id_p()  :  gdbarch.c
<item>gdbarch_unwind_pc_p()  :  gdbarch.c
<item>gdbarch_unwind_sp_p()  :  gdbarch.c
<item>paddr_d()  :  utils.c
<item>paddr_nz()  :  utils.c
<item>pformat()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_arch_by_info()  :  gdbarch.c
<item>maintenance_print_architecture()  :  maint.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_dwarf2_reg_to_regnum()

<p><tt>int gdbarch_dwarf2_reg_to_regnum ( struct gdbarch* gdbarch, int dwarf2_regnr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_evaluate_loc_desc()  :  dwarf2loc.c
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
<item>dwarf2_frame_prev_register()  :  dwarf2-frame.c
<item>dwarf_expr_read_reg()  :  dwarf2loc.c
<item>execute_cfa_program()  :  dwarf2-frame.c
<item>locexpr_describe_location()  :  dwarf2loc.c
<item>print_single_dwarf_location()  :  dwarf2loc.c
<item>read_reg()  :  dwarf2-frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_dwarf_reg_to_regnum()

<p><tt>int gdbarch_dwarf_reg_to_regnum ( struct gdbarch* gdbarch, int dwarf_regnr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>locval()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_ecoff_reg_to_regnum()

<p><tt>int gdbarch_ecoff_reg_to_regnum ( struct gdbarch* gdbarch, int ecoff_regnr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_symbol()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_elf_make_msymbol_special()

<p><tt>void gdbarch_elf_make_msymbol_special ( struct gdbarch* gdbarch, asymbol* sym, struct minimal_symbol* msym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>elf_symtab_read()  :  elfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_extract_return_value()

<p><tt>void gdbarch_extract_return_value ( struct gdbarch* gdbarch, struct type* type, struct regcache* regcache, gdb_byte* valbuf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>legacy_return_value()  :  arch-utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_fetch_pointer_argument()

<p><tt>CORE_ADDR gdbarch_fetch_pointer_argument ( struct gdbarch* gdbarch, struct frame_info* frame, int argi, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>objc_handle_update()  :  objc-lang.c
<item>resolve_msgsend()  :  objc-lang.c
<item>resolve_msgsend_stret()  :  objc-lang.c
<item>resolve_msgsend_super()  :  objc-lang.c
<item>resolve_msgsend_super_stret()  :  objc-lang.c
<item>resolve_newruntime_objc_msgsend()  :  objc-lang.c
<item>resolve_newruntime_objc_msgsendsuper()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_fetch_pointer_argument_p()

<p><tt>int gdbarch_fetch_pointer_argument_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_fetch_tls_load_module_address()

<p><tt>CORE_ADDR gdbarch_fetch_tls_load_module_address ( struct gdbarch* gdbarch, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf_expr_tls_address()  :  dwarf2loc.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_fetch_tls_load_module_address_p()

<p><tt>int gdbarch_fetch_tls_load_module_address_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf_expr_tls_address()  :  dwarf2loc.c
<item>gdbarch_dump()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_find_by_info()

<p><tt>struct gdbarch* gdbarch_find_by_info ( struct gdbarch_info info )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>current_gdbarch_swap_in_hack()  :  gdbarch.c
<item>current_gdbarch_swap_out_hack()  :  gdbarch.c
<item>find_arch_by_info()  :  gdbarch.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_from_bfd()  :  arch-utils.c
<item>gdbarch_update_p()  :  arch-utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_float_bit()

<p><tt>int gdbarch_float_bit ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_m2_language()  :  m2-lang.c
<item>_initialize_mdebugread()  :  mdebugread.c
<item>ada_create_fundamental_type()  :  ada-lang.c
<item>ada_language_arch_info()  :  ada-lang.c
<item>build_fortran_types()  :  f-lang.c
<item>build_gdbtypes()  :  gdbtypes.c
<item>c_create_fundamental_type()  :  c-lang.c
<item>f_create_fundamental_type()  :  f-lang.c
<item>floatformat_from_length()  :  doublest.c
<item>gdbtypes_post_init()  :  gdbtypes.c
<item>m2_create_fundamental_type()  :  m2-lang.c
<item>objc_create_fundamental_type()  :  objc-lang.c
<item>pascal_create_fundamental_type()  :  p-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_float_format()

<p><tt>const struct floatformat* gdbarch_float_format ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>floatformat_from_length()  :  doublest.c
<item>gdbtypes_post_init()  :  gdbtypes.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_fp0_regnum()

<p><tt>int gdbarch_fp0_regnum ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_frame_align()

<p><tt>CORE_ADDR gdbarch_frame_align ( struct gdbarch* gdbarch, CORE_ADDR address )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ensure_lval()  :  ada-lang.c
<item>generic_push_dummy_code()  :  infcall.c
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_frame_align_p()

<p><tt>int gdbarch_frame_align_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ensure_lval()  :  ada-lang.c
<item>gdbarch_dump()  :  gdbarch.c
<item>generic_push_dummy_code()  :  infcall.c
<item>hand_function_call()  :  infcall.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_frame_args_skip()

<p><tt>CORE_ADDR gdbarch_frame_args_skip ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_frame_args()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_frame_num_args()

<p><tt>int gdbarch_frame_num_args ( struct gdbarch* gdbarch, struct frame_info* frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_info()  :  stack.c
<item>print_args_stub()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_frame_num_args_p()

<p><tt>int gdbarch_frame_num_args_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_info()  :  stack.c
<item>gdbarch_dump()  :  gdbarch.c
<item>print_args_stub()  :  stack.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_frame_red_zone_size()

<p><tt>int gdbarch_frame_red_zone_size ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_free()

<p><tt>void gdbarch_free ( struct gdbarch* arch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>xfree()  :  utils.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>obstack_free()
</itemize>
</descrip>

<sect1>Global Function gdbarch_get_longjmp_target()

<p><tt>int gdbarch_get_longjmp_target ( struct gdbarch* gdbarch, CORE_ADDR* pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_get_longjmp_target_p()

<p><tt>int gdbarch_get_longjmp_target_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>breakpoint_re_set_all()  :  breakpoint.c
<item>gdbarch_dump()  :  gdbarch.c
<item>handle_inferior_event()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_have_nonsteppable_watchpoint()

<p><tt>int gdbarch_have_nonsteppable_watchpoint ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_in_function_epilogue_p()

<p><tt>int gdbarch_in_function_epilogue_p ( struct gdbarch* gdbarch, CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>watchpoint_check()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_in_solib_return_trampoline()

<p><tt>int gdbarch_in_solib_return_trampoline ( struct gdbarch* gdbarch, CORE_ADDR pc, const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_inner_than()

<p><tt>int gdbarch_inner_than ( struct gdbarch* gdbarch, CORE_ADDR lhs, CORE_ADDR rhs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ensure_lval()  :  ada-lang.c
<item>frame_id_inner()  :  frame.c
<item>generic_push_dummy_code()  :  infcall.c
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_int_bit()

<p><tt>int gdbarch_int_bit ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_m2_language()  :  m2-lang.c
<item>_initialize_mdebugread()  :  mdebugread.c
<item>ada_create_fundamental_type()  :  ada-lang.c
<item>ada_language_arch_info()  :  ada-lang.c
<item>adjust_field_bitsize()  :  stabsread.c
<item>build_fortran_types()  :  f-lang.c
<item>build_gdbtypes()  :  gdbtypes.c
<item>c_create_fundamental_type()  :  c-lang.c
<item>coff_read_enum_type()  :  coffread.c
<item>define_symbol()  :  stabsread.c
<item>f_create_fundamental_type()  :  f-lang.c
<item>gdbarch_alloc()  :  gdbarch.c
<item>gdbtypes_post_init()  :  gdbtypes.c
<item>m2_create_fundamental_type()  :  m2-lang.c
<item>new_symbol()  :  dwarf2read.c
<item>objc_create_fundamental_type()  :  objc-lang.c
<item>parse_number()  :  f-exp.c
<item>parse_symbol()  :  mdebugread.c
<item>pascal_create_fundamental_type()  :  p-lang.c
<item>processInt()  :  ada-exp.c
<item>read_enum_type()  :  stabsread.c
<item>read_range_type()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_integer_to_address()

<p><tt>CORE_ADDR gdbarch_integer_to_address ( struct gdbarch* gdbarch, struct type* type, const gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_as_address()  :  value.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_integer_to_address_p()

<p><tt>int gdbarch_integer_to_address_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
<item>value_as_address()  :  value.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_list_lookup_by_info()

<p><tt>struct gdbarch_list* gdbarch_list_lookup_by_info ( struct gdbarch_list* arches, const struct gdbarch_info* info )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function gdbarch_long_bit()

<p><tt>int gdbarch_long_bit ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_scheme_language()  :  scm-lang.c
<item>ada_create_fundamental_type()  :  ada-lang.c
<item>ada_language_arch_info()  :  ada-lang.c
<item>add_enum_psymbol()  :  dwarfread.c
<item>build_gdbtypes()  :  gdbtypes.c
<item>c_create_fundamental_type()  :  c-lang.c
<item>decode_base_type()  :  coffread.c
<item>decode_subscript_data_item()  :  dwarfread.c
<item>dwarf2_scan_inlined_section_for_psymbols()  :  dwarf2read.c
<item>enum_type()  :  dwarfread.c
<item>f_create_fundamental_type()  :  f-lang.c
<item>find_implementation_from_class()  :  objc-lang.c
<item>gdbarch_alloc()  :  gdbarch.c
<item>gdbtypes_post_init()  :  gdbtypes.c
<item>locval()  :  dwarfread.c
<item>m2_create_fundamental_type()  :  m2-lang.c
<item>new_objc_runtime_internals()  :  objc-lang.c
<item>objc_create_fundamental_type()  :  objc-lang.c
<item>objc_init_trampoline_observer()  :  objc-lang.c
<item>objc_read_trampoline_region()  :  objc-lang.c
<item>parse_number()  :  f-exp.c
<item>pascal_create_fundamental_type()  :  p-lang.c
<item>processInt()  :  ada-exp.c
<item>read_objc_class()  :  objc-lang.c
<item>read_objc_method()  :  objc-lang.c
<item>read_objc_method_list_method()  :  objc-lang.c
<item>read_objc_method_list_nmethods()  :  objc-lang.c
<item>read_objc_object()  :  objc-lang.c
<item>read_objc_super()  :  objc-lang.c
<item>read_target_long_array()  :  symfile.c
<item>resolve_newruntime_objc_msgsend()  :  objc-lang.c
<item>resolve_newruntime_objc_msgsendsuper()  :  objc-lang.c
<item>simple_overlay_update_1()  :  symfile.c
<item>value_binop()  :  valarith.c
<item>value_objc_target_type()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_long_double_bit()

<p><tt>int gdbarch_long_double_bit ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_create_fundamental_type()  :  ada-lang.c
<item>ada_language_arch_info()  :  ada-lang.c
<item>build_fortran_types()  :  f-lang.c
<item>build_gdbtypes()  :  gdbtypes.c
<item>c_create_fundamental_type()  :  c-lang.c
<item>define_symbol()  :  stabsread.c
<item>f_create_fundamental_type()  :  f-lang.c
<item>floatformat_from_length()  :  doublest.c
<item>gdbtypes_post_init()  :  gdbtypes.c
<item>init_type()  :  gdbtypes.c
<item>m2_create_fundamental_type()  :  m2-lang.c
<item>objc_create_fundamental_type()  :  objc-lang.c
<item>pascal_create_fundamental_type()  :  p-lang.c
<item>processReal()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_long_double_format()

<p><tt>const struct floatformat* gdbarch_long_double_format ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>define_symbol()  :  stabsread.c
<item>floatformat_from_length()  :  doublest.c
<item>gdbtypes_post_init()  :  gdbtypes.c
<item>init_type()  :  gdbtypes.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_long_long_bit()

<p><tt>int gdbarch_long_long_bit ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_create_fundamental_type()  :  ada-lang.c
<item>ada_language_arch_info()  :  ada-lang.c
<item>build_gdbtypes()  :  gdbtypes.c
<item>c_create_fundamental_type()  :  c-lang.c
<item>f_create_fundamental_type()  :  f-lang.c
<item>gdbtypes_post_init()  :  gdbtypes.c
<item>m2_create_fundamental_type()  :  m2-lang.c
<item>objc_create_fundamental_type()  :  objc-lang.c
<item>parse_number()  :  c-exp.c
<item>pascal_create_fundamental_type()  :  p-lang.c
<item>read_range_type()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_memory_insert_breakpoint()

<p><tt>int gdbarch_memory_insert_breakpoint ( struct gdbarch* gdbarch, CORE_ADDR addr, gdb_byte* contents_cache )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>memory_insert_breakpoint()  :  mem-break.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_memory_remove_breakpoint()

<p><tt>int gdbarch_memory_remove_breakpoint ( struct gdbarch* gdbarch, CORE_ADDR addr, gdb_byte* contents_cache )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>memory_remove_breakpoint()  :  mem-break.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_name_of_malloc()

<p><tt>const char* gdbarch_name_of_malloc ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>allocate_space_in_inferior_malloc()  :  valops.c
<item>gdbarch_dump()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_num_pseudo_regs()

<p><tt>int gdbarch_num_pseudo_regs ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>debug_print_register()  :  target/target.c
<item>default_print_registers_info()  :  infcmd.c
<item>define_symbol()  :  stabsread.c
<item>deprecated_read_register_bytes()  :  regcache.c
<item>deprecated_write_register_bytes()  :  regcache.c
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
<item>frame_info()  :  stack.c
<item>generic_register_byte()  :  arch-utils.c
<item>generic_register_size()  :  arch-utils.c
<item>init_regcache_descr()  :  regcache.c
<item>init_remote_state()  :  remote.c
<item>packet_reg_from_pnum()  :  remote.c
<item>packet_reg_from_regnum()  :  remote.c
<item>print_float_info()  :  infcmd.c
<item>print_vector_info()  :  infcmd.c
<item>regcache_dump()  :  regcache.c
<item>register_size()  :  regcache.c
<item>registers_info()  :  infcmd.c
<item>remote_fetch_registers()  :  remote.c
<item>remote_store_registers()  :  remote.c
<item>trad_frame_alloc_saved_regs()  :  trad-frame.c
<item>user_reg_map_name_to_regnum()  :  user-regs.c
<item>user_reg_map_regnum_to_name()  :  user-regs.c
<item>value_of_register()  :  findvar.c
<item>value_of_user_reg()  :  user-regs.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_num_regs()

<p><tt>int gdbarch_num_regs ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>debug_print_register()  :  target/target.c
<item>default_print_registers_info()  :  infcmd.c
<item>default_register_reggroup_p()  :  reggroups.c
<item>define_symbol()  :  stabsread.c
<item>deprecated_read_register_bytes()  :  regcache.c
<item>deprecated_registers_fetched()  :  regcache.c
<item>deprecated_write_register_bytes()  :  regcache.c
<item>dwarf2_frame_cache()  :  dwarf2-frame.c
<item>encode_actions()  :  tracepoint.c
<item>frame_info()  :  stack.c
<item>generic_register_byte()  :  arch-utils.c
<item>generic_register_size()  :  arch-utils.c
<item>init_regcache_descr()  :  regcache.c
<item>init_remote_state()  :  remote.c
<item>legacy_register_sim_regno()  :  arch-utils.c
<item>legacy_virtual_frame_pointer()  :  arch-utils.c
<item>packet_reg_from_pnum()  :  remote.c
<item>packet_reg_from_regnum()  :  remote.c
<item>print_float_info()  :  infcmd.c
<item>print_vector_info()  :  infcmd.c
<item>regcache_dump()  :  regcache.c
<item>register_size()  :  regcache.c
<item>registers_info()  :  infcmd.c
<item>remote_fetch_registers()  :  remote.c
<item>remote_prepare_to_store()  :  remote.c
<item>remote_store_registers()  :  remote.c
<item>trad_frame_alloc_saved_regs()  :  trad-frame.c
<item>user_reg_map_name_to_regnum()  :  user-regs.c
<item>user_reg_map_regnum_to_name()  :  user-regs.c
<item>value_of_register()  :  findvar.c
<item>value_of_user_reg()  :  user-regs.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_obstack_zalloc()

<p><tt>void* gdbarch_obstack_zalloc ( struct gdbarch* arch, long size )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_language_arch_info()  :  ada-lang.c
<item>alloc_gdbarch_data()  :  gdbarch.c
<item>c_language_arch_info()  :  c-lang.c
<item>current_gdbarch_swap_init_hack()  :  gdbarch.c
<item>frame_base_append_sniffer()  :  frame-base.c
<item>frame_unwind_append_sniffer()  :  frame-unwind.c
<item>frame_unwind_prepend_unwinder()  :  frame-unwind.c
<item>gdbtypes_post_init()  :  gdbtypes.c
<item>init_regcache_descr()  :  regcache.c
<item>init_remote_state()  :  remote.c
<item>language_gdbarch_post_init()  :  language.c
<item>reggroup_add()  :  reggroups.c
<item>reggroups_init()  :  reggroups.c
<item>tramp_frame_prepend_unwinder()  :  tramp-frame.c
<item>unknown_language_arch_info()  :  language.c
<item>user_reg_add()  :  user-regs.c
<item>user_reg_replace()  :  user-regs.c
<item>user_regs_init()  :  user-regs.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_osabi()

<p><tt>enum gdb_osabi gdbarch_osabi ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>convert_sect_addrs_to_offsets_via_on_disk_file()  :  symfile.c
<item>gdbarch_info_fill()  :  arch-utils.c
<item>open_bfd_matching_arch()  :  symfile.c
<item>show_osabi()  :  osabi.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_pc_regnum()

<p><tt>int gdbarch_pc_regnum ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_default_init_reg()  :  dwarf2-frame.c
<item>frame_info()  :  stack.c
<item>generic_target_write_pc()  :  regcache.c
<item>read_pc_pid()  :  regcache.c
<item>value_of_builtin_frame_pc_reg()  :  std-regs.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_pointer_to_address()

<p><tt>CORE_ADDR gdbarch_pointer_to_address ( struct gdbarch* gdbarch, struct type* type, const gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>extract_typed_address()  :  findvar.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_print_float_info()

<p><tt>void gdbarch_print_float_info ( struct gdbarch* gdbarch, struct ui_file* file, struct frame_info* frame, const char* args )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_float_info()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_print_float_info_p()

<p><tt>int gdbarch_print_float_info_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
<item>print_float_info()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_print_insn()

<p><tt>int gdbarch_print_insn ( struct gdbarch* gdbarch, bfd_vma vma, struct disassemble_info* info )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dump_insns()  :  disasm.c
<item>find_pc_offset()  :  disasm.c
<item>gdb_print_insn()  :  disasm.c
<item>length_of_this_instruction()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_print_registers_info()

<p><tt>void gdbarch_print_registers_info ( struct gdbarch* gdbarch, struct ui_file* file, struct frame_info* frame, int regnum, int all )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_float_info()  :  infcmd.c
<item>print_vector_info()  :  infcmd.c
<item>registers_info()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_print_vector_info()

<p><tt>void gdbarch_print_vector_info ( struct gdbarch* gdbarch, struct ui_file* file, struct frame_info* frame, const char* args )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_vector_info()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_print_vector_info_p()

<p><tt>int gdbarch_print_vector_info_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
<item>print_vector_info()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_printable_names()

<p><tt>const char** gdbarch_printable_names ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>append_name()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>bfd_lookup_arch()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>initialize_current_architecture()  :  arch-utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdbarch_registry  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_ps_regnum()

<p><tt>int gdbarch_ps_regnum ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_of_builtin_frame_ps_reg()  :  std-regs.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_pseudo_register_read()

<p><tt>void gdbarch_pseudo_register_read ( struct gdbarch* gdbarch, struct regcache* regcache, int cookednum, gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>regcache_cooked_read()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_pseudo_register_read_p()

<p><tt>int gdbarch_pseudo_register_read_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_pseudo_register_write()

<p><tt>void gdbarch_pseudo_register_write ( struct gdbarch* gdbarch, struct regcache* regcache, int cookednum, const gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>regcache_cooked_write()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_pseudo_register_write_p()

<p><tt>int gdbarch_pseudo_register_write_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_ptr_bit()

<p><tt>int gdbarch_ptr_bit ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>attribute_size()  :  dwarfread.c
<item>build_gdb_vtable_type()  :  gnu-v3-abi.c
<item>completedieinfo()  :  dwarfread.c
<item>decode_format()  :  printcmd.c
<item>decode_line_numbers()  :  dwarfread.c
<item>evaluate_subexp_standard()  :  eval.c
<item>get_java_object_header_size()  :  jv-lang.c
<item>info_sharedlibrary_command()  :  solib.c
<item>java_value_print()  :  jv-valprint.c
<item>make_pointer_type()  :  gdbtypes.c
<item>make_reference_type()  :  gdbtypes.c
<item>pascal_val_print()  :  p-valprint.c
<item>read_tag_pointer_type()  :  dwarfread.c
<item>verify_gdbarch()  :  gdbarch.c
<item>x86_frame_prev_register()  :  target/x86-shared-tdep.c
<item>x86_frame_this_id()  :  target/x86-shared-tdep.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_push_dummy_call()

<p><tt>CORE_ADDR gdbarch_push_dummy_call ( struct gdbarch* gdbarch, struct value* function, struct regcache* regcache, CORE_ADDR bp_addr, int nargs, struct value** args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_push_dummy_call_p()

<p><tt>int gdbarch_push_dummy_call_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
<item>hand_function_call()  :  infcall.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_push_dummy_code()

<p><tt>CORE_ADDR gdbarch_push_dummy_code ( struct gdbarch* gdbarch, CORE_ADDR sp, CORE_ADDR funaddr, int using_gcc, struct value** args, int nargs, struct type* value_type, CORE_ADDR* real_pc, CORE_ADDR* bp_addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>push_dummy_code()  :  infcall.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_push_dummy_code_p()

<p><tt>int gdbarch_push_dummy_code_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
<item>push_dummy_code()  :  infcall.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_read_pc()

<p><tt>CORE_ADDR gdbarch_read_pc ( struct gdbarch* gdbarch, ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_pc_pid()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_read_pc_p()

<p><tt>int gdbarch_read_pc_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
<item>read_pc_pid()  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_read_sp()

<p><tt>CORE_ADDR gdbarch_read_sp ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_sp_unwind()  :  frame.c
<item>read_sp()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_read_sp_p()

<p><tt>int gdbarch_read_sp_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_sp_unwind()  :  frame.c
<item>gdbarch_dump()  :  gdbarch.c
<item>read_sp()  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_register()

<p><tt>void gdbarch_register ( enum bfd_architecture bfd_architecture, gdbarch_init_ftype* init, gdbarch_dump_tdep_ftype* dump_tdep )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
<item>xmalloc()  :  utils.c
<item>bfd_lookup_arch()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>register_gdbarch_init()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
<item>gdbarch_registry  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_register_bytes_ok()

<p><tt>int gdbarch_register_bytes_ok ( struct gdbarch* gdbarch, long nr_bytes )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remote_fetch_registers()  :  remote.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_register_bytes_ok_p()

<p><tt>int gdbarch_register_bytes_ok_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
<item>remote_fetch_registers()  :  remote.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_register_name()

<p><tt>const char* gdbarch_register_name ( struct gdbarch* gdbarch, int regnr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>address_info()  :  printcmd.c
<item>debug_print_register()  :  target/target.c
<item>default_print_registers_info()  :  infcmd.c
<item>default_register_reggroup_p()  :  reggroups.c
<item>deprecated_read_register_bytes()  :  regcache.c
<item>execute_cfa_program()  :  dwarf2-frame.c
<item>frame_info()  :  stack.c
<item>legacy_register_sim_regno()  :  arch-utils.c
<item>locate_var_value()  :  findvar.c
<item>locexpr_describe_location()  :  dwarf2loc.c
<item>print_single_dwarf_location()  :  dwarf2loc.c
<item>regcache_dump()  :  regcache.c
<item>scope_info()  :  tracepoint.c
<item>trad_frame_get_prev_register()  :  trad-frame.c
<item>user_reg_map_name_to_regnum()  :  user-regs.c
<item>user_reg_map_regnum_to_name()  :  user-regs.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_register_reggroup_p()

<p><tt>int gdbarch_register_reggroup_p ( struct gdbarch* gdbarch, int regnum, struct reggroup* reggroup )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>default_print_registers_info()  :  infcmd.c
<item>frame_info()  :  stack.c
<item>print_float_info()  :  infcmd.c
<item>print_vector_info()  :  infcmd.c
<item>regcache_dump()  :  regcache.c
<item>regcache_restore()  :  regcache.c
<item>regcache_save()  :  regcache.c
<item>registers_info()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_register_sim_regno()

<p><tt>int gdbarch_register_sim_regno ( struct gdbarch* gdbarch, int reg_nr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_register_to_value()

<p><tt>void gdbarch_register_to_value ( struct gdbarch* gdbarch, struct frame_info* frame, int regnum, struct type* type, gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_from_register()  :  findvar.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_register_type()

<p><tt>struct type* gdbarch_register_type ( struct gdbarch* gdbarch, int reg_nr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>generic_register_size()  :  arch-utils.c
<item>init_regcache_descr()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_register_type_p()

<p><tt>int gdbarch_register_type_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_regset_from_core_section()

<p><tt>const struct regset* gdbarch_regset_from_core_section ( struct gdbarch* gdbarch, const char* sect_name, size_t sect_size )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_regset_from_core_section_p()

<p><tt>int gdbarch_regset_from_core_section_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_remote_translate_xfer_address()

<p><tt>void gdbarch_remote_translate_xfer_address ( struct gdbarch* gdbarch, struct regcache* regcache, CORE_ADDR gdb_addr, int gdb_len, CORE_ADDR* rem_addr, int* rem_len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_return_value()

<p><tt>enum return_value_convention gdbarch_return_value ( struct gdbarch* gdbarch, struct type* valtype, struct regcache* regcache, gdb_byte* readbuf, const gdb_byte* writebuf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
<item>print_return_value()  :  infcmd.c
<item>return_command()  :  stack.c
<item>using_struct_return()  :  value.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_return_value_p()

<p><tt>int gdbarch_return_value_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
<item>return_command()  :  stack.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>legacy_return_value()  :  arch-utils.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_sdb_reg_to_regnum()

<p><tt>int gdbarch_sdb_reg_to_regnum ( struct gdbarch* gdbarch, int sdb_regnr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_coff_symbol()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_short_bit()

<p><tt>int gdbarch_short_bit ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_create_fundamental_type()  :  ada-lang.c
<item>ada_language_arch_info()  :  ada-lang.c
<item>build_fortran_types()  :  f-lang.c
<item>build_gdbtypes()  :  gdbtypes.c
<item>c_create_fundamental_type()  :  c-lang.c
<item>f_create_fundamental_type()  :  f-lang.c
<item>gdbtypes_post_init()  :  gdbtypes.c
<item>m2_create_fundamental_type()  :  m2-lang.c
<item>objc_create_fundamental_type()  :  objc-lang.c
<item>pascal_create_fundamental_type()  :  p-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_single_step_through_delay()

<p><tt>int gdbarch_single_step_through_delay ( struct gdbarch* gdbarch, struct frame_info* frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>proceed()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_single_step_through_delay_p()

<p><tt>int gdbarch_single_step_through_delay_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
<item>handle_inferior_event()  :  infrun.c
<item>proceed()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_skip_prologue()

<p><tt>CORE_ADDR gdbarch_skip_prologue ( struct gdbarch* gdbarch, CORE_ADDR ip )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_line_2()  :  linespec.c
<item>decode_objc()  :  linespec.c
<item>find_function_start_sal()  :  symtab.c
<item>gnu_v3_update_exception_catchpoints()  :  breakpoint.c
<item>in_prologue()  :  symtab.c
<item>minsym_found()  :  linespec.c
<item>minsyms_found()  :  linespec.c
<item>step_into_function()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_skip_prologue_addr_ctx()

<p><tt>CORE_ADDR gdbarch_skip_prologue_addr_ctx ( struct gdbarch* gdbarch, struct address_context* addr_ctx )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_line_2()  :  linespec.c
<item>decode_objc()  :  linespec.c
<item>find_function_start_sal()  :  symtab.c
<item>minsym_found()  :  linespec.c
<item>minsyms_found()  :  linespec.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_skip_prologue_addr_ctx_p()

<p><tt>int gdbarch_skip_prologue_addr_ctx_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_line_2()  :  linespec.c
<item>decode_objc()  :  linespec.c
<item>find_function_start_sal()  :  symtab.c
<item>gdbarch_dump()  :  gdbarch.c
<item>minsym_found()  :  linespec.c
<item>minsyms_found()  :  linespec.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_skip_solib_resolver()

<p><tt>CORE_ADDR gdbarch_skip_solib_resolver ( struct gdbarch* gdbarch, CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_skip_trampoline_code()

<p><tt>CORE_ADDR gdbarch_skip_trampoline_code ( struct gdbarch* gdbarch, CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>objc_skip_trampoline()  :  objc-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_smash_text_address()

<p><tt>CORE_ADDR gdbarch_smash_text_address ( struct gdbarch* gdbarch, CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symtab_read()  :  coffread.c
<item>process_dies()  :  dwarfread.c
<item>process_one_symbol()  :  dbxread.c
<item>record_minimal_symbol()  :  elfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_software_single_step()

<p><tt>void gdbarch_software_single_step ( struct gdbarch* gdbarch, enum target_signal sig, int insert_breakpoints_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>resume()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_software_single_step_p()

<p><tt>int gdbarch_software_single_step_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>adjust_pc_after_break()  :  infrun.c
<item>gdbarch_dump()  :  gdbarch.c
<item>handle_inferior_event()  :  infrun.c
<item>resume()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_sp_regnum()

<p><tt>int gdbarch_sp_regnum ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>define_symbol()  :  stabsread.c
<item>dwarf2_frame_default_init_reg()  :  dwarf2-frame.c
<item>frame_info()  :  stack.c
<item>frame_sp_unwind()  :  frame.c
<item>legacy_virtual_frame_pointer()  :  arch-utils.c
<item>read_sp()  :  regcache.c
<item>value_of_builtin_frame_sp_reg()  :  std-regs.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_stab_reg_to_regnum()

<p><tt>int gdbarch_stab_reg_to_regnum ( struct gdbarch* gdbarch, int stab_regnr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>define_symbol()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_stabs_argument_has_addr()

<p><tt>int gdbarch_stabs_argument_has_addr ( struct gdbarch* gdbarch, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>define_symbol()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_store_return_value()

<p><tt>void gdbarch_store_return_value ( struct gdbarch* gdbarch, struct type* type, struct regcache* regcache, const gdb_byte* valbuf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>legacy_return_value()  :  arch-utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_unwind_dummy_id()

<p><tt>struct frame_id gdbarch_unwind_dummy_id ( struct gdbarch* gdbarch, struct frame_info* info )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dummy_frame_sniffer()  :  dummy-frame.c
<item>inlined_frame_this_id()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_unwind_dummy_id_p()

<p><tt>int gdbarch_unwind_dummy_id_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_unwind_pc()

<p><tt>CORE_ADDR gdbarch_unwind_pc ( struct gdbarch* gdbarch, struct frame_info* next_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_pc_unwind()  :  frame.c
<item>inlined_frame_sniffer()  :  inlining.c
<item>sentinel_frame_prev_pc()  :  sentinel-frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_unwind_pc_p()

<p><tt>int gdbarch_unwind_pc_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_pc_unwind()  :  frame.c
<item>gdbarch_dump()  :  gdbarch.c
<item>inlined_frame_sniffer()  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_unwind_sp()

<p><tt>CORE_ADDR gdbarch_unwind_sp ( struct gdbarch* gdbarch, struct frame_info* next_frame )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_sp_unwind()  :  frame.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_unwind_sp_p()

<p><tt>int gdbarch_unwind_sp_p ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_sp_unwind()  :  frame.c
<item>gdbarch_dump()  :  gdbarch.c
<item>read_sp()  :  regcache.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_value_to_register()

<p><tt>void gdbarch_value_to_register ( struct gdbarch* gdbarch, struct frame_info* frame, int regnum, struct type* type, const gdb_byte* buf )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>value_assign()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_virtual_frame_pointer()

<p><tt>void gdbarch_virtual_frame_pointer ( struct gdbarch* gdbarch, CORE_ADDR pc, int* frame_regnum, long* frame_offset )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_tracepoint_var_ref()  :  dwarf2loc.c
<item>encode_actions()  :  tracepoint.c
<item>gen_frame_args_address()  :  ax-gdb.c
<item>gen_frame_locals_address()  :  ax-gdb.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function gdbarch_write_pc()

<p><tt>void gdbarch_write_pc ( struct gdbarch* gdbarch, CORE_ADDR val, ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>write_pc_pid()  :  regcache.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function new_gdbarch_data()

<p><tt>void* new_gdbarch_data ( struct gdbarch* gdbarch, struct gdbarch_data* data )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf2_frame_init_reg()  :  dwarf2-frame.c
<item>dwarf2_frame_set_init_reg()  :  dwarf2-frame.c
<item>dwarf2_frame_set_signal_frame_p()  :  dwarf2-frame.c
<item>dwarf2_frame_signal_frame_p()  :  dwarf2-frame.c
<item>frame_base_append_sniffer()  :  frame-base.c
<item>frame_base_find_by_frame()  :  frame-base.c
<item>frame_base_set_default()  :  frame-base.c
<item>frame_unwind_append_sniffer()  :  frame-unwind.c
<item>frame_unwind_find_by_frame()  :  frame-unwind.c
<item>frame_unwind_prepend_unwinder()  :  frame-unwind.c
<item>get_builtin_type()  :  gdbtypes.c
<item>get_remote_state()  :  remote.c
<item>gnuv3_baseclass_offset()  :  gnu-v3-abi.c
<item>gnuv3_rtti_type()  :  gnu-v3-abi.c
<item>gnuv3_virtual_fn_field()  :  gnu-v3-abi.c
<item>language_lookup_primitive_type_by_name()  :  language.c
<item>language_string_char_type()  :  language.c
<item>regcache_descr()  :  regcache.c
<item>reggroup_add()  :  reggroups.c
<item>reggroup_next()  :  reggroups.c
<item>solib_ops()  :  solib.c
<item>user_reg_add()  :  user-regs.c
<item>user_reg_map_name_to_regnum()  :  user-regs.c
<item>user_reg_replace()  :  user-regs.c
<item>usernum_to_user_reg()  :  user-regs.c
<item>vtable_address_point_offset()  :  gnu-v3-abi.c
</itemize>
</descrip>

<sect1>Global Function new_gdbarch_tdep()

<p><tt>struct gdbarch_tdep* new_gdbarch_tdep ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function register_gdbarch_init()

<p><tt>void register_gdbarch_init ( enum bfd_architecture bfd_architecture, gdbarch_init_ftype* init )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_register()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_addr_bit()

<p><tt>void set_gdbarch_addr_bit ( struct gdbarch* gdbarch, int addr_bit )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_addr_bits_remove()

<p><tt>void set_gdbarch_addr_bits_remove ( struct gdbarch* gdbarch, gdbarch_addr_bits_remove_ftype addr_bits_remove )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_address_class_name_to_type_flags()

<p><tt>void set_gdbarch_address_class_name_to_type_flags ( struct gdbarch* gdbarch, gdbarch_address_class_name_to_type_flags_ftype address_class_name_to_type_flags )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_address_class_type_flags()

<p><tt>void set_gdbarch_address_class_type_flags ( struct gdbarch* gdbarch, gdbarch_address_class_type_flags_ftype address_class_type_flags )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_address_class_type_flags_to_name()

<p><tt>void set_gdbarch_address_class_type_flags_to_name ( struct gdbarch* gdbarch, gdbarch_address_class_type_flags_to_name_ftype address_class_type_flags_to_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_address_to_pointer()

<p><tt>void set_gdbarch_address_to_pointer ( struct gdbarch* gdbarch, gdbarch_address_to_pointer_ftype address_to_pointer )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_adjust_breakpoint_address()

<p><tt>void set_gdbarch_adjust_breakpoint_address ( struct gdbarch* gdbarch, gdbarch_adjust_breakpoint_address_ftype adjust_breakpoint_address )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_adjust_ehframe_regnum()

<p><tt>void set_gdbarch_adjust_ehframe_regnum ( struct gdbarch* gdbarch, gdbarch_adjust_ehframe_regnum_ftype adjust_ehframe_regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_believe_pcc_promotion()

<p><tt>void set_gdbarch_believe_pcc_promotion ( struct gdbarch* gdbarch, int believe_pcc_promotion )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_bfd_vma_bit()

<p><tt>void set_gdbarch_bfd_vma_bit ( struct gdbarch* gdbarch, int bfd_vma_bit )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_breakpoint_from_pc()

<p><tt>void set_gdbarch_breakpoint_from_pc ( struct gdbarch* gdbarch, gdbarch_breakpoint_from_pc_ftype breakpoint_from_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_call_dummy_location()

<p><tt>void set_gdbarch_call_dummy_location ( struct gdbarch* gdbarch, int call_dummy_location )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_cannot_fetch_register()

<p><tt>void set_gdbarch_cannot_fetch_register ( struct gdbarch* gdbarch, gdbarch_cannot_fetch_register_ftype cannot_fetch_register )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_cannot_step_breakpoint()

<p><tt>void set_gdbarch_cannot_step_breakpoint ( struct gdbarch* gdbarch, int cannot_step_breakpoint )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_cannot_store_register()

<p><tt>void set_gdbarch_cannot_store_register ( struct gdbarch* gdbarch, gdbarch_cannot_store_register_ftype cannot_store_register )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_char_signed()

<p><tt>void set_gdbarch_char_signed ( struct gdbarch* gdbarch, int char_signed )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_coff_make_msymbol_special()

<p><tt>void set_gdbarch_coff_make_msymbol_special ( struct gdbarch* gdbarch, gdbarch_coff_make_msymbol_special_ftype coff_make_msymbol_special )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_construct_inferior_arguments()

<p><tt>void set_gdbarch_construct_inferior_arguments ( struct gdbarch* gdbarch, gdbarch_construct_inferior_arguments_ftype construct_inferior_arguments )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_convert_from_func_ptr_addr()

<p><tt>void set_gdbarch_convert_from_func_ptr_addr ( struct gdbarch* gdbarch, gdbarch_convert_from_func_ptr_addr_ftype convert_from_func_ptr_addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_convert_register_p()

<p><tt>void set_gdbarch_convert_register_p ( struct gdbarch* gdbarch, gdbarch_convert_register_p_ftype convert_register_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_dbx_make_msymbol_special()

<p><tt>void set_gdbarch_dbx_make_msymbol_special ( struct gdbarch* gdbarch, gdbarch_dbx_make_msymbol_special_ftype dbx_make_msymbol_special )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_decr_pc_after_break()

<p><tt>void set_gdbarch_decr_pc_after_break ( struct gdbarch* gdbarch, CORE_ADDR decr_pc_after_break )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_deprecated_extract_return_value()

<p><tt>void set_gdbarch_deprecated_extract_return_value ( struct gdbarch* gdbarch, gdbarch_deprecated_extract_return_value_ftype deprecated_extract_return_value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_deprecated_extract_struct_value_address()

<p><tt>void set_gdbarch_deprecated_extract_struct_value_address ( struct gdbarch* gdbarch, gdbarch_deprecated_extract_struct_value_address_ftype deprecated_extract_struct_value_address )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_deprecated_fp_regnum()

<p><tt>void set_gdbarch_deprecated_fp_regnum ( struct gdbarch* gdbarch, int deprecated_fp_regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_deprecated_function_start_offset()

<p><tt>void set_gdbarch_deprecated_function_start_offset ( struct gdbarch* gdbarch, CORE_ADDR deprecated_function_start_offset )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_deprecated_push_arguments()

<p><tt>void set_gdbarch_deprecated_push_arguments ( struct gdbarch* gdbarch, gdbarch_deprecated_push_arguments_ftype deprecated_push_arguments )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_deprecated_reg_struct_has_addr()

<p><tt>void set_gdbarch_deprecated_reg_struct_has_addr ( struct gdbarch* gdbarch, gdbarch_deprecated_reg_struct_has_addr_ftype deprecated_reg_struct_has_addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_deprecated_register_byte()

<p><tt>void set_gdbarch_deprecated_register_byte ( struct gdbarch* gdbarch, gdbarch_deprecated_register_byte_ftype deprecated_register_byte )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_deprecated_register_size()

<p><tt>void set_gdbarch_deprecated_register_size ( struct gdbarch* gdbarch, int deprecated_register_size )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_deprecated_saved_pc_after_call()

<p><tt>void set_gdbarch_deprecated_saved_pc_after_call ( struct gdbarch* gdbarch, gdbarch_deprecated_saved_pc_after_call_ftype deprecated_saved_pc_after_call )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_deprecated_stack_align()

<p><tt>void set_gdbarch_deprecated_stack_align ( struct gdbarch* gdbarch, gdbarch_deprecated_stack_align_ftype deprecated_stack_align )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_deprecated_store_return_value()

<p><tt>void set_gdbarch_deprecated_store_return_value ( struct gdbarch* gdbarch, gdbarch_deprecated_store_return_value_ftype deprecated_store_return_value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_deprecated_store_struct_return()

<p><tt>void set_gdbarch_deprecated_store_struct_return ( struct gdbarch* gdbarch, gdbarch_deprecated_store_struct_return_ftype deprecated_store_struct_return )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_deprecated_use_struct_convention()

<p><tt>void set_gdbarch_deprecated_use_struct_convention ( struct gdbarch* gdbarch, gdbarch_deprecated_use_struct_convention_ftype deprecated_use_struct_convention )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_double_bit()

<p><tt>void set_gdbarch_double_bit ( struct gdbarch* gdbarch, int double_bit )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_double_format()

<p><tt>void set_gdbarch_double_format ( struct gdbarch* gdbarch, const struct floatformat* double_format )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_dwarf2_reg_to_regnum()

<p><tt>void set_gdbarch_dwarf2_reg_to_regnum ( struct gdbarch* gdbarch, gdbarch_dwarf2_reg_to_regnum_ftype dwarf2_reg_to_regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_dwarf_reg_to_regnum()

<p><tt>void set_gdbarch_dwarf_reg_to_regnum ( struct gdbarch* gdbarch, gdbarch_dwarf_reg_to_regnum_ftype dwarf_reg_to_regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_ecoff_reg_to_regnum()

<p><tt>void set_gdbarch_ecoff_reg_to_regnum ( struct gdbarch* gdbarch, gdbarch_ecoff_reg_to_regnum_ftype ecoff_reg_to_regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_elf_make_msymbol_special()

<p><tt>void set_gdbarch_elf_make_msymbol_special ( struct gdbarch* gdbarch, gdbarch_elf_make_msymbol_special_ftype elf_make_msymbol_special )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_extract_return_value()

<p><tt>void set_gdbarch_extract_return_value ( struct gdbarch* gdbarch, gdbarch_extract_return_value_ftype extract_return_value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_fetch_pointer_argument()

<p><tt>void set_gdbarch_fetch_pointer_argument ( struct gdbarch* gdbarch, gdbarch_fetch_pointer_argument_ftype fetch_pointer_argument )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_fetch_tls_load_module_address()

<p><tt>void set_gdbarch_fetch_tls_load_module_address ( struct gdbarch* gdbarch, gdbarch_fetch_tls_load_module_address_ftype fetch_tls_load_module_address )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_float_bit()

<p><tt>void set_gdbarch_float_bit ( struct gdbarch* gdbarch, int float_bit )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_float_format()

<p><tt>void set_gdbarch_float_format ( struct gdbarch* gdbarch, const struct floatformat* float_format )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_fp0_regnum()

<p><tt>void set_gdbarch_fp0_regnum ( struct gdbarch* gdbarch, int fp0_regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_frame_align()

<p><tt>void set_gdbarch_frame_align ( struct gdbarch* gdbarch, gdbarch_frame_align_ftype frame_align )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_frame_args_skip()

<p><tt>void set_gdbarch_frame_args_skip ( struct gdbarch* gdbarch, CORE_ADDR frame_args_skip )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_frame_num_args()

<p><tt>void set_gdbarch_frame_num_args ( struct gdbarch* gdbarch, gdbarch_frame_num_args_ftype frame_num_args )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_frame_red_zone_size()

<p><tt>void set_gdbarch_frame_red_zone_size ( struct gdbarch* gdbarch, int frame_red_zone_size )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_get_longjmp_target()

<p><tt>void set_gdbarch_get_longjmp_target ( struct gdbarch* gdbarch, gdbarch_get_longjmp_target_ftype get_longjmp_target )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_have_nonsteppable_watchpoint()

<p><tt>void set_gdbarch_have_nonsteppable_watchpoint ( struct gdbarch* gdbarch, int have_nonsteppable_watchpoint )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_in_function_epilogue_p()

<p><tt>void set_gdbarch_in_function_epilogue_p ( struct gdbarch* gdbarch, gdbarch_in_function_epilogue_p_ftype in_function_epilogue_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_in_solib_return_trampoline()

<p><tt>void set_gdbarch_in_solib_return_trampoline ( struct gdbarch* gdbarch, gdbarch_in_solib_return_trampoline_ftype in_solib_return_trampoline )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_inner_than()

<p><tt>void set_gdbarch_inner_than ( struct gdbarch* gdbarch, gdbarch_inner_than_ftype inner_than )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_int_bit()

<p><tt>void set_gdbarch_int_bit ( struct gdbarch* gdbarch, int int_bit )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_integer_to_address()

<p><tt>void set_gdbarch_integer_to_address ( struct gdbarch* gdbarch, gdbarch_integer_to_address_ftype integer_to_address )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_long_bit()

<p><tt>void set_gdbarch_long_bit ( struct gdbarch* gdbarch, int long_bit )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_long_double_bit()

<p><tt>void set_gdbarch_long_double_bit ( struct gdbarch* gdbarch, int long_double_bit )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_long_double_format()

<p><tt>void set_gdbarch_long_double_format ( struct gdbarch* gdbarch, const struct floatformat* long_double_format )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_long_long_bit()

<p><tt>void set_gdbarch_long_long_bit ( struct gdbarch* gdbarch, int long_long_bit )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_memory_insert_breakpoint()

<p><tt>void set_gdbarch_memory_insert_breakpoint ( struct gdbarch* gdbarch, gdbarch_memory_insert_breakpoint_ftype memory_insert_breakpoint )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_memory_remove_breakpoint()

<p><tt>void set_gdbarch_memory_remove_breakpoint ( struct gdbarch* gdbarch, gdbarch_memory_remove_breakpoint_ftype memory_remove_breakpoint )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_name_of_malloc()

<p><tt>void set_gdbarch_name_of_malloc ( struct gdbarch* gdbarch, const char* name_of_malloc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_num_pseudo_regs()

<p><tt>void set_gdbarch_num_pseudo_regs ( struct gdbarch* gdbarch, int num_pseudo_regs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_num_regs()

<p><tt>void set_gdbarch_num_regs ( struct gdbarch* gdbarch, int num_regs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_pc_regnum()

<p><tt>void set_gdbarch_pc_regnum ( struct gdbarch* gdbarch, int pc_regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_pointer_to_address()

<p><tt>void set_gdbarch_pointer_to_address ( struct gdbarch* gdbarch, gdbarch_pointer_to_address_ftype pointer_to_address )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_print_float_info()

<p><tt>void set_gdbarch_print_float_info ( struct gdbarch* gdbarch, gdbarch_print_float_info_ftype print_float_info )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_print_insn()

<p><tt>void set_gdbarch_print_insn ( struct gdbarch* gdbarch, gdbarch_print_insn_ftype print_insn )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_print_registers_info()

<p><tt>void set_gdbarch_print_registers_info ( struct gdbarch* gdbarch, gdbarch_print_registers_info_ftype print_registers_info )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_print_vector_info()

<p><tt>void set_gdbarch_print_vector_info ( struct gdbarch* gdbarch, gdbarch_print_vector_info_ftype print_vector_info )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_ps_regnum()

<p><tt>void set_gdbarch_ps_regnum ( struct gdbarch* gdbarch, int ps_regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_pseudo_register_read()

<p><tt>void set_gdbarch_pseudo_register_read ( struct gdbarch* gdbarch, gdbarch_pseudo_register_read_ftype pseudo_register_read )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_pseudo_register_write()

<p><tt>void set_gdbarch_pseudo_register_write ( struct gdbarch* gdbarch, gdbarch_pseudo_register_write_ftype pseudo_register_write )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_ptr_bit()

<p><tt>void set_gdbarch_ptr_bit ( struct gdbarch* gdbarch, int ptr_bit )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_push_dummy_call()

<p><tt>void set_gdbarch_push_dummy_call ( struct gdbarch* gdbarch, gdbarch_push_dummy_call_ftype push_dummy_call )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_push_dummy_code()

<p><tt>void set_gdbarch_push_dummy_code ( struct gdbarch* gdbarch, gdbarch_push_dummy_code_ftype push_dummy_code )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_read_pc()

<p><tt>void set_gdbarch_read_pc ( struct gdbarch* gdbarch, gdbarch_read_pc_ftype read_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_read_sp()

<p><tt>void set_gdbarch_read_sp ( struct gdbarch* gdbarch, gdbarch_read_sp_ftype read_sp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_register_bytes_ok()

<p><tt>void set_gdbarch_register_bytes_ok ( struct gdbarch* gdbarch, gdbarch_register_bytes_ok_ftype register_bytes_ok )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_register_name()

<p><tt>void set_gdbarch_register_name ( struct gdbarch* gdbarch, gdbarch_register_name_ftype register_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_register_reggroup_p()

<p><tt>void set_gdbarch_register_reggroup_p ( struct gdbarch* gdbarch, gdbarch_register_reggroup_p_ftype register_reggroup_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_register_sim_regno()

<p><tt>void set_gdbarch_register_sim_regno ( struct gdbarch* gdbarch, gdbarch_register_sim_regno_ftype register_sim_regno )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_register_to_value()

<p><tt>void set_gdbarch_register_to_value ( struct gdbarch* gdbarch, gdbarch_register_to_value_ftype register_to_value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_register_type()

<p><tt>void set_gdbarch_register_type ( struct gdbarch* gdbarch, gdbarch_register_type_ftype register_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_regset_from_core_section()

<p><tt>void set_gdbarch_regset_from_core_section ( struct gdbarch* gdbarch, gdbarch_regset_from_core_section_ftype regset_from_core_section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_remote_translate_xfer_address()

<p><tt>void set_gdbarch_remote_translate_xfer_address ( struct gdbarch* gdbarch, gdbarch_remote_translate_xfer_address_ftype remote_translate_xfer_address )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_return_value()

<p><tt>void set_gdbarch_return_value ( struct gdbarch* gdbarch, gdbarch_return_value_ftype return_value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_sdb_reg_to_regnum()

<p><tt>void set_gdbarch_sdb_reg_to_regnum ( struct gdbarch* gdbarch, gdbarch_sdb_reg_to_regnum_ftype sdb_reg_to_regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_short_bit()

<p><tt>void set_gdbarch_short_bit ( struct gdbarch* gdbarch, int short_bit )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_single_step_through_delay()

<p><tt>void set_gdbarch_single_step_through_delay ( struct gdbarch* gdbarch, gdbarch_single_step_through_delay_ftype single_step_through_delay )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_skip_prologue()

<p><tt>void set_gdbarch_skip_prologue ( struct gdbarch* gdbarch, gdbarch_skip_prologue_ftype skip_prologue )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_skip_prologue_addr_ctx()

<p><tt>void set_gdbarch_skip_prologue_addr_ctx ( struct gdbarch* gdbarch, gdbarch_skip_prologue_addr_ctx_ftype skip_prologue_addr_ctx )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_skip_solib_resolver()

<p><tt>void set_gdbarch_skip_solib_resolver ( struct gdbarch* gdbarch, gdbarch_skip_solib_resolver_ftype skip_solib_resolver )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_skip_trampoline_code()

<p><tt>void set_gdbarch_skip_trampoline_code ( struct gdbarch* gdbarch, gdbarch_skip_trampoline_code_ftype skip_trampoline_code )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_smash_text_address()

<p><tt>void set_gdbarch_smash_text_address ( struct gdbarch* gdbarch, gdbarch_smash_text_address_ftype smash_text_address )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_software_single_step()

<p><tt>void set_gdbarch_software_single_step ( struct gdbarch* gdbarch, gdbarch_software_single_step_ftype software_single_step )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_sp_regnum()

<p><tt>void set_gdbarch_sp_regnum ( struct gdbarch* gdbarch, int sp_regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_stab_reg_to_regnum()

<p><tt>void set_gdbarch_stab_reg_to_regnum ( struct gdbarch* gdbarch, gdbarch_stab_reg_to_regnum_ftype stab_reg_to_regnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_stabs_argument_has_addr()

<p><tt>void set_gdbarch_stabs_argument_has_addr ( struct gdbarch* gdbarch, gdbarch_stabs_argument_has_addr_ftype stabs_argument_has_addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_store_return_value()

<p><tt>void set_gdbarch_store_return_value ( struct gdbarch* gdbarch, gdbarch_store_return_value_ftype store_return_value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_unwind_dummy_id()

<p><tt>void set_gdbarch_unwind_dummy_id ( struct gdbarch* gdbarch, gdbarch_unwind_dummy_id_ftype unwind_dummy_id )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_unwind_pc()

<p><tt>void set_gdbarch_unwind_pc ( struct gdbarch* gdbarch, gdbarch_unwind_pc_ftype unwind_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_unwind_sp()

<p><tt>void set_gdbarch_unwind_sp ( struct gdbarch* gdbarch, gdbarch_unwind_sp_ftype unwind_sp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_value_to_register()

<p><tt>void set_gdbarch_value_to_register ( struct gdbarch* gdbarch, gdbarch_value_to_register_ftype value_to_register )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_virtual_frame_pointer()

<p><tt>void set_gdbarch_virtual_frame_pointer ( struct gdbarch* gdbarch, gdbarch_virtual_frame_pointer_ftype virtual_frame_pointer )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Global Function set_gdbarch_write_pc()

<p><tt>void set_gdbarch_write_pc ( struct gdbarch* gdbarch, gdbarch_write_pc_ftype write_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.h
</itemize>
</descrip>

<sect1>Local Function alloc_gdbarch_data()

<p><tt>static void alloc_gdbarch_data ( struct gdbarch* gdbarch )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbarch.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_obstack_zalloc()  :  gdbarch.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdbarch_data_registry  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function append_name()

<p><tt>static void append_name ( const char*** buf, int* nr, const char* name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_printable_names()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function current_gdbarch_swap_in_hack()

<p><tt>static void current_gdbarch_swap_in_hack ( struct gdbarch* new_gdbarch )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>deprecated_current_gdbarch_select_hack()  :  gdbarch.c
<item>gdbarch_find_by_info()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function current_gdbarch_swap_init_hack()

<p><tt>static void current_gdbarch_swap_init_hack ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_obstack_zalloc()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_arch_by_info()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>gdbarch_swap_registry  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function current_gdbarch_swap_out_hack()

<p><tt>static struct gdbarch* current_gdbarch_swap_out_hack ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>deprecated_current_gdbarch_select_hack()  :  gdbarch.c
<item>find_arch_by_info()  :  gdbarch.c
<item>gdbarch_find_by_info()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function find_arch_by_info()

<p><tt>static struct gdbarch* find_arch_by_info ( struct gdbarch* old_gdbarch, struct gdbarch_info info )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>current_gdbarch_swap_init_hack()  :  gdbarch.c
<item>current_gdbarch_swap_out_hack()  :  gdbarch.c
<item>fprintf_unfiltered()  :  utils.c
<item>gdbarch_dump()  :  gdbarch.c
<item>gdbarch_info_fill()  :  arch-utils.c
<item>gdbarch_osabi_name()  :  osabi.c
<item>internal_error()  :  utils.c
<item>verify_gdbarch()  :  gdbarch.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_find_by_info()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>gdb_stdlog  :  main.c
<item>gdbarch_debug  :  gdbarch.c
<item>gdbarch_registry  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function gdbarch_data_register()

<p><tt>static struct gdbarch_data* gdbarch_data_register ( gdbarch_data_pre_init_ftype* pre_init, gdbarch_data_post_init_ftype* post_init )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_data_register_post_init()  :  gdbarch.c
<item>gdbarch_data_register_pre_init()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdbarch_data_registry  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function pformat()

<p><tt>static const char* pformat ( const struct floatformat* format )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>gdbarch_dump()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function show_gdbarch_debug()

<p><tt>static void show_gdbarch_debug ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_gdbarch()  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function verify_gdbarch()

<p><tt>static void verify_gdbarch ( struct gdbarch* current_gdbarch )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>default_double_format()  :  arch-utils.c
<item>default_float_format()  :  arch-utils.c
<item>do_cleanups()  :  utils.c
<item>fprintf_unfiltered()  :  utils.c
<item>gdbarch_ptr_bit()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>make_cleanup_ui_file_delete()  :  utils.c
<item>mem_fileopen()  :  ui-file.c
<item>ui_file_xstrdup()  :  ui-file.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_arch_by_info()  :  gdbarch.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
</descrip>

</article>
