<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF stabsread.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for stabsread.c of gdb.cxref.
<author>cxref

<sect>File stabsread.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/aout/stab_gnu.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/aout/stab.def&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/libaout.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/bfdlink.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/aout/aout64.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb-stabs.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;buildsym.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;complaints.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;cp-abi.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;cp-support.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;stabsread.h&quot;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define EXTERN</tt><newline>
<p>
<tt>#define STABS_CONTINUE( pp, objfile )</tt><newline>
<p>
<tt>#define VISIBILITY_PRIVATE '0'</tt><newline>
<p>
<tt>#define VISIBILITY_PROTECTED '1'</tt><newline>
<p>
<tt>#define VISIBILITY_PUBLIC '2'</tt><newline>
<p>
<tt>#define VISIBILITY_IGNORE '9'</tt><newline>
<p>
<tt>#define MAX_CHUNK_REFS 100</tt><newline>
<p>
<tt>#define REF_CHUNK_SIZE</tt><newline>
<p>
<tt>#define REF_MAP_SIZE( ref_chunk )</tt><newline>
<p>
<tt>#define NUMBER_RECOGNIZED 34</tt><newline>

<sect1>Type struct nextfield

<p>
<itemize>
<item><tt>struct nextfield</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct nextfield* next;</tt><newline>
<item><tt>int visibility;</tt><newline>
<item><tt>struct field field;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct next_fnfieldlist

<p>
<itemize>
<item><tt>struct next_fnfieldlist</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct next_fnfieldlist* next;</tt><newline>
<item><tt>struct fn_fieldlist fn_fieldlist;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct field_info

<p>
<itemize>
<item><tt>struct field_info</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct nextfield* list;</tt><newline>
<item><tt>struct next_fnfieldlist* fnlist;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct ref_map

<p>
<itemize>
<item><tt>struct ref_map</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const char* stabs;</tt><newline>
<item><tt>CORE_ADDR value;</tt><newline>
<item><tt>struct symbol* sym;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct type_list

<p>
<itemize>
<item><tt>struct type_list</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct type* type;</tt><newline>
<item><tt>struct type_list* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct next_fnfield

<p>
<itemize>
<item><tt>struct next_fnfield</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct next_fnfield* next;</tt><newline>
<item><tt>struct fn_field fn_field;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable global_sym_chain

<p>
<tt>struct symbol* global_sym_chain[127]</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>elfread.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>common_block_end()  :  stabsread.c
<item>define_symbol()  :  stabsread.c
<item>parse_symbol()  :  mdebugread.c
<item>scan_file_globals()  :  stabsread.c
<item>stabsread_new_init()  :  stabsread.c
</itemize>
</descrip>

<sect1>Global Variable global_stabs

<p>
<tt>struct pending_stabs* global_stabs</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>elfread.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>finish_global_stabs()  :  stabsread.c
<item>start_stabs()  :  stabsread.c
</itemize>
</descrip>

<sect1>Global Variable previous_stab_code

<p>
<tt>int previous_stab_code</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>elfread.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>end_stabs()  :  stabsread.c
<item>process_one_symbol()  :  dbxread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Variable this_object_header_files

<p>
<tt>int* this_object_header_files</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>elfread.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>add_this_object_header_file()  :  dbxread.c
<item>dbx_lookup_type()  :  stabsread.c
<item>free_header_files()  :  dbxread.c
<item>init_header_files()  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Variable n_this_object_header_files

<p>
<tt>int n_this_object_header_files</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>elfread.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>add_this_object_header_file()  :  dbxread.c
<item>dbx_lookup_type()  :  stabsread.c
<item>start_stabs()  :  stabsread.c
</itemize>
</descrip>

<sect1>Global Variable n_allocated_this_object_header_files

<p>
<tt>int n_allocated_this_object_header_files</tt><newline>
<descrip>
<tag>Included from:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Visible in:</tag>
<itemize>
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>elfread.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>add_this_object_header_file()  :  dbxread.c
<item>free_header_files()  :  dbxread.c
<item>init_header_files()  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Variable stabsread_c_inited

<p>
<tt>int stabsread_c_inited</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>buildsym.c
<item>coffread.c
<item>dbxread.c
<item>elfread.c
<item>mdebugread.c
<item>mipsread.c
<item>nlmread.c
<item>stabsread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>stabsread_init()  :  stabsread.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>vptr_name</bf><newline>
<tt>static const char vptr_name[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>read_cpp_abbrev()
<item>read_tilde_fields()
</itemize>
</descrip>
<p>
<bf>vb_name</bf><newline>
<tt>static const char vb_name[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>read_cpp_abbrev()
</itemize>
</descrip>
<p>
<bf>undef_types</bf><newline>
<tt>static struct type** undef_types</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stabsread()
<item>add_undefined_type()
<item>cleanup_undefined_types()
</itemize>
</descrip>
<p>
<bf>undef_types_allocated</bf><newline>
<tt>static int undef_types_allocated</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stabsread()
<item>add_undefined_type()
</itemize>
</descrip>
<p>
<bf>undef_types_length</bf><newline>
<tt>static int undef_types_length</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stabsread()
<item>add_undefined_type()
<item>cleanup_undefined_types()
</itemize>
</descrip>
<p>
<bf>undef_fields</bf><newline>
<tt>static struct field** undef_fields</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stabsread()
<item>add_undefined_field()
<item>cleanup_undefined_fields()
</itemize>
</descrip>
<p>
<bf>undef_fields_allocated</bf><newline>
<tt>static int undef_fields_allocated</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stabsread()
<item>add_undefined_field()
</itemize>
</descrip>
<p>
<bf>undef_fields_length</bf><newline>
<tt>static int undef_fields_length</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stabsread()
<item>add_undefined_field()
<item>cleanup_undefined_fields()
</itemize>
</descrip>
<p>
<bf>current_symbol</bf><newline>
<tt>static struct symbol* current_symbol</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>define_symbol()
</itemize>
</descrip>
<p>
<bf>ref_map</bf><newline>
<tt>static struct ref_map* ref_map</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>ref_add()
<item>ref_search()
</itemize>
</descrip>
<p>
<bf>ref_count</bf><newline>
<tt>static int ref_count</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>ref_add()
<item>ref_search()
<item>stabsread_clear_cache()
</itemize>
</descrip>
<p>
<bf>ref_chunk</bf><newline>
<tt>static int ref_chunk</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>ref_add()
<item>stabsread_clear_cache()
</itemize>
</descrip>
<p>
<bf>common_block</bf><newline>
<tt>static struct pending* common_block</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>common_block_end()
<item>common_block_start()
</itemize>
</descrip>
<p>
<bf>common_block_i</bf><newline>
<tt>static int common_block_i</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>common_block_end()
<item>common_block_start()
</itemize>
</descrip>
<p>
<bf>common_block_name</bf><newline>
<tt>static char* common_block_name</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>common_block_end()
<item>common_block_start()
<item>start_stabs()
</itemize>
</descrip>

<sect1>Global Function _initialize_stabsread()

<p><tt>void _initialize_stabsread ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>undef_fields  :  stabsread.c
<item>undef_fields_allocated  :  stabsread.c
<item>undef_fields_length  :  stabsread.c
<item>undef_types  :  stabsread.c
<item>undef_types_allocated  :  stabsread.c
<item>undef_types_length  :  stabsread.c
</itemize>
</descrip>

<sect1>Global Function cleanup_undefined_fields()

<p><tt>void cleanup_undefined_fields ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>adjust_field_bitsize()  :  stabsread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>end_symtab()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>undef_fields  :  stabsread.c
<item>undef_fields_length  :  stabsread.c
</itemize>
</descrip>

<sect1>Global Function cleanup_undefined_types()

<p><tt>void cleanup_undefined_types ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>replace_type()  :  gdbtypes.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>end_symtab()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>file_symbols  :  buildsym.c
<item>symfile_complaints  :  complaints.c
<item>undef_types  :  stabsread.c
<item>undef_types_length  :  stabsread.c
</itemize>
</descrip>

<sect1>Global Function common_block_end()

<p><tt>void common_block_end ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_symbol_to_list()  :  buildsym.c
<item>complaint()  :  complaints.c
<item>hashname()  :  buildsym.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_one_symbol()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>common_block  :  stabsread.c
<item>common_block_i  :  stabsread.c
<item>common_block_name  :  stabsread.c
<item>global_sym_chain  :  stabsread.c
<item>local_symbols  :  buildsym.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Global Function common_block_start()

<p><tt>void common_block_start ( const char* name, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>obsavestring()  :  symfile.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_one_symbol()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>common_block  :  stabsread.c
<item>common_block_i  :  stabsread.c
<item>common_block_name  :  stabsread.c
<item>local_symbols  :  buildsym.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Global Function dbx_lookup_type()

<p><tt>struct type** dbx_lookup_type ( int typenums[2], struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>init_type()  :  gdbtypes.c
<item>rs6000_builtin_type()  :  stabsread.c
<item>warning()  :  utils.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dbx_alloc_type()  :  stabsread.c
<item>dbx_fixup_type()  :  stabsread.c
<item>read_range_type()  :  stabsread.c
<item>read_type()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_objfile  :  objfiles.c
<item>n_this_object_header_files  :  stabsread.c
<item>symfile_complaints  :  complaints.c
<item>symnum  :  buildsym.c
<item>this_object_header_files  :  stabsread.c
<item>type_vector  :  buildsym.c
<item>type_vector_length  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function define_symbol()

<p><tt>struct symbol* define_symbol ( CORE_ADDR valu, const char* string, const char* prefix, int desc, int type, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_symbol_to_list()  :  buildsym.c
<item>complaint()  :  complaints.c
<item>error_type()  :  stabsread.c
<item>executable_objfile()  :  objfiles.c
<item>find_name_end()  :  stabsread.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>gdbarch_int_bit()  :  gdbarch.c
<item>gdbarch_long_double_bit()  :  gdbarch.c
<item>gdbarch_long_double_format()  :  gdbarch.c
<item>gdbarch_num_pseudo_regs()  :  gdbarch.c
<item>gdbarch_num_regs()  :  gdbarch.c
<item>gdbarch_sp_regnum()  :  gdbarch.c
<item>gdbarch_stab_reg_to_regnum()  :  gdbarch.c
<item>gdbarch_stabs_argument_has_addr()  :  gdbarch.c
<item>hashname()  :  buildsym.c
<item>init_type()  :  gdbtypes.c
<item>internal_error()  :  utils.c
<item>is_cplus_marker()  :  demangle.c
<item>lookup_function_type()  :  gdbtypes.c
<item>lookup_fundamental_type()  :  gdbtypes.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>obconcat()  :  symfile.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>obsavestring()  :  symfile.c
<item>read_type()  :  stabsread.c
<item>reg_value_complaint()  :  stabsread.c
<item>store_typed_floating()  :  doublest.c
<item>symbol_natural_name()  :  symtab.c
<item>symbol_set_names()  :  symtab.c
<item>type_name_no_tag()  :  gdbtypes.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), atof(), atoi(), isdigit(), strchr(), strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_one_symbol()  :  dbxread.c
<item>process_symbol_types_only()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>cplus_struct_default  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
<item>current_subfile  :  buildsym.c
<item>current_symbol  :  stabsread.c
<item>demangle  :  utils.c
<item>file_symbols  :  buildsym.c
<item>global_sym_chain  :  stabsread.c
<item>global_symbols  :  buildsym.c
<item>local_symbols  :  buildsym.c
<item>next_symbol_text_func  :  buildsym.c
<item>processing_gcc_compilation  :  buildsym.c
<item>symfile_complaints  :  complaints.c
<item>within_function  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function end_stabs()

<p><tt>void end_stabs ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_one_symbol()  :  dbxread.c
<item>psymtab_to_symtab_1()  :  mdebugread.c
<item>read_ofile_symtab()  :  dbxread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>previous_stab_code  :  stabsread.c
<item>type_vector  :  buildsym.c
<item>type_vector_length  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function find_name_end()

<p><tt>char* find_name_end ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>strchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>define_symbol()  :  stabsread.c
<item>end_psymtab()  :  dbxread.c
<item>lookup_psymbol_from_namestring()  :  dbxread.c
<item>process_one_symbol()  :  dbxread.c
<item>process_symbol_types_only()  :  stabsread.c
<item>read_dbx_symtab()  :  dbxread.c
<item>read_ofile_symtab_from_oso()  :  dbxread.c
</itemize>
</descrip>

<sect1>Global Function finish_global_stabs()

<p><tt>void finish_global_stabs ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>patch_block_stabs()  :  stabsread.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>end_symtab()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_stabs  :  stabsread.c
<item>global_symbols  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function process_symbol_types_only()

<p><tt>void process_symbol_types_only ( const char* string, const char* prefix, int desc, int type, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>define_symbol()  :  stabsread.c
<item>find_name_end()  :  stabsread.c
<item>read_type()  :  stabsread.c
<item>isdigit(), strchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_ofile_symtab_from_oso()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>next_symbol_text_func  :  buildsym.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Global Function ref_add()

<p><tt>void ref_add ( int refnum, struct symbol* sym, const char* stabs, CORE_ADDR value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_one_symbol()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ref_chunk  :  stabsread.c
<item>ref_count  :  stabsread.c
<item>ref_map  :  stabsread.c
</itemize>
</descrip>

<sect1>Global Function ref_search()

<p><tt>struct symbol* ref_search ( int refnum )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_one_symbol()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ref_count  :  stabsread.c
<item>ref_map  :  stabsread.c
</itemize>
</descrip>

<sect1>Global Function scan_file_globals()

<p><tt>void scan_file_globals ( struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>buildsym.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>fix_common_block()  :  stabsread.c
<item>hashname()  :  buildsym.c
<item>quit()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dbx_psymtab_to_symtab()  :  dbxread.c
<item>mdebug_psymtab_to_symtab()  :  mdebugread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_sym_chain  :  stabsread.c
<item>quit_flag  :  utils.c
<item>symfile_complaints  :  complaints.c
<item>symfile_objfile  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function stabsread_clear_cache()

<p><tt>void stabsread_clear_cache ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coff_symfile_finish()  :  coffread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>ref_chunk  :  stabsread.c
<item>ref_count  :  stabsread.c
</itemize>
</descrip>

<sect1>Global Function stabsread_init()

<p><tt>void stabsread_init ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dbx_psymtab_to_symtab_1()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>stabsread_c_inited  :  stabsread.c
</itemize>
</descrip>

<sect1>Global Function stabsread_new_init()

<p><tt>void stabsread_new_init ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>coffstab_build_psymtabs()  :  dbxread.c
<item>dbx_new_init()  :  dbxread.c
<item>elf_new_init()  :  elfread.c
<item>elfstab_build_psymtabs()  :  dbxread.c
<item>mdebug_build_psymtabs()  :  mdebugread.c
<item>mipscoff_new_init()  :  mipsread.c
<item>nlm_new_init()  :  nlmread.c
<item>stabsect_build_psymtabs()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_sym_chain  :  stabsread.c
</itemize>
</descrip>

<sect1>Global Function start_stabs()

<p><tt>void start_stabs ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_one_symbol()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>common_block_name  :  stabsread.c
<item>global_stabs  :  stabsread.c
<item>n_this_object_header_files  :  stabsread.c
<item>type_vector  :  buildsym.c
<item>type_vector_length  :  buildsym.c
</itemize>
</descrip>

<sect1>Global Function symbol_reference_defined()

<p><tt>int symbol_reference_defined ( const char** string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>process_reference()  :  stabsread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_one_symbol()  :  dbxread.c
</itemize>
</descrip>

<sect1>Local Function add_undefined_field()

<p><tt>static void add_undefined_field ( struct field* field )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>attach_fields_to_type()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>undef_fields  :  stabsread.c
<item>undef_fields_allocated  :  stabsread.c
<item>undef_fields_length  :  stabsread.c
</itemize>
</descrip>

<sect1>Local Function add_undefined_type()

<p><tt>static void add_undefined_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xrealloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_type()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>undef_types  :  stabsread.c
<item>undef_types_allocated  :  stabsread.c
<item>undef_types_length  :  stabsread.c
</itemize>
</descrip>

<sect1>Local Function adjust_field_bitsize()

<p><tt>static void adjust_field_bitsize ( struct field* field )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>gdbarch_int_bit()  :  gdbarch.c
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cleanup_undefined_fields()  :  stabsread.c
<item>read_one_struct_field()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function attach_fields_to_type()

<p><tt>static int attach_fields_to_type ( struct field_info* fip, struct type* type, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_undefined_field()  :  stabsread.c
<item>allocate_cplus_struct_type()  :  gdbtypes.c
<item>complaint()  :  complaints.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_struct_type()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function attach_fn_fields_to_type()

<p><tt>static int attach_fn_fields_to_type ( struct field_info* fip, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_struct_type()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function complain_about_struct_wipeout()

<p><tt>static void complain_about_struct_wipeout ( struct type* type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_struct_type()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dbx_alloc_type()

<p><tt>static struct type* dbx_alloc_type ( int typenums[2], struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_type()  :  gdbtypes.c
<item>dbx_lookup_type()  :  stabsread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_type()  :  stabsread.c
</itemize>
</descrip>

<sect1>Local Function dbx_fixup_type()

<p><tt>static struct type* dbx_fixup_type ( int typenums[2], struct type* new_type, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>dbx_lookup_type()  :  stabsread.c
<item>internal_error()  :  utils.c
<item>replace_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_type()  :  stabsread.c
</itemize>
</descrip>

<sect1>Local Function dbx_fixup_variants()

<p><tt>static void dbx_fixup_variants ( struct type* real_type )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>objc_fixup_class_length()  :  objc-lang.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_type()  :  stabsread.c
</itemize>
</descrip>

<sect1>Local Function error_type()

<p><tt>static struct type* error_type ( const char** pp, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>define_symbol()  :  stabsread.c
<item>read_array_type()  :  stabsread.c
<item>read_enum_type()  :  stabsread.c
<item>read_range_type()  :  stabsread.c
<item>read_struct_type()  :  stabsread.c
<item>read_sun_builtin_type()  :  stabsread.c
<item>read_sun_floating_type()  :  stabsread.c
<item>read_type()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_error  :  symtab.c
<item>next_symbol_text_func  :  buildsym.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function fix_common_block()

<p><tt>static void fix_common_block ( struct symbol* sym, int valu )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>scan_file_globals()  :  stabsread.c
</itemize>
</descrip>

<sect1>Local Function invalid_cpp_abbrev_complaint()

<p><tt>static void invalid_cpp_abbrev_complaint ( const char* arg1 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_cpp_abbrev()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function patch_block_stabs()

<p><tt>static void patch_block_stabs ( struct pending* symbols, struct pending_stabs* stabs, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_symbol_to_list()  :  buildsym.c
<item>find_symbol_in_list()  :  buildsym.c
<item>lookup_function_type()  :  gdbtypes.c
<item>obsavestring()  :  symfile.c
<item>read_type()  :  stabsread.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>finish_global_stabs()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_symbols  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function process_reference()

<p><tt>static int process_reference ( const char** string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>isdigit()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>symbol_reference_defined()  :  stabsread.c
</itemize>
</descrip>

<sect1>Local Function read_args()

<p><tt>static struct field* read_args ( const char** pp, int end, struct objfile* objfile, int* nargsp, int* varargsp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>read_type()  :  stabsread.c
<item>xfree()  :  utils.c
<item>xrealloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_type()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>next_symbol_text_func  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function read_array_type()

<p><tt>static struct type* read_array_type ( const char** pp, struct type* type, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
<item>error_type()  :  stabsread.c
<item>read_huge_number()  :  stabsread.c
<item>read_type()  :  stabsread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_type()  :  stabsread.c
</itemize>
</descrip>

<sect1>Local Function read_baseclasses()

<p><tt>static int read_baseclasses ( struct field_info* fip, const char** pp, struct type* type, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_cplus_struct_type()  :  gdbtypes.c
<item>complaint()  :  complaints.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>read_huge_number()  :  stabsread.c
<item>read_type()  :  stabsread.c
<item>type_name_no_tag()  :  gdbtypes.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_struct_type()  :  stabsread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
<item>next_symbol_text_func  :  buildsym.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function read_cpp_abbrev()

<p><tt>static int read_cpp_abbrev ( struct field_info* fip, const char** pp, struct type* type, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>invalid_cpp_abbrev_complaint()  :  stabsread.c
<item>obconcat()  :  symfile.c
<item>read_huge_number()  :  stabsread.c
<item>read_type()  :  stabsread.c
<item>type_name_no_tag()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_struct_fields()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
<item>symnum  :  buildsym.c
<item>vb_name  :  stabsread.c
<item>vptr_name  :  stabsread.c
</itemize>
</descrip>

<sect1>Local Function read_enum_type()

<p><tt>static struct type* read_enum_type ( const char** pp, struct type* type, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_symbol_to_list()  :  buildsym.c
<item>error_type()  :  stabsread.c
<item>gdbarch_int_bit()  :  gdbarch.c
<item>obsavestring()  :  symfile.c
<item>read_huge_number()  :  stabsread.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_type()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_subfile  :  buildsym.c
<item>file_symbols  :  buildsym.c
<item>next_symbol_text_func  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function read_huge_number()

<p><tt>static long read_huge_number ( const char** pp, int end, int* bits, int twos_complement_bits )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_array_type()  :  stabsread.c
<item>read_baseclasses()  :  stabsread.c
<item>read_cpp_abbrev()  :  stabsread.c
<item>read_enum_type()  :  stabsread.c
<item>read_member_functions()  :  stabsread.c
<item>read_one_struct_field()  :  stabsread.c
<item>read_range_type()  :  stabsread.c
<item>read_struct_type()  :  stabsread.c
<item>read_sun_builtin_type()  :  stabsread.c
<item>read_sun_floating_type()  :  stabsread.c
<item>read_type_number()  :  stabsread.c
</itemize>
</descrip>

<sect1>Local Function read_member_functions()

<p><tt>static int read_member_functions ( struct field_info* fip, const char** pp, struct type* type, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_cplus_struct_type()  :  gdbtypes.c
<item>complaint()  :  complaints.c
<item>is_cplus_marker()  :  demangle.c
<item>is_destructor_name()  :  cp-abi.c
<item>make_cleanup()  :  utils.c
<item>obconcat()  :  symfile.c
<item>obsavestring()  :  symfile.c
<item>read_huge_number()  :  stabsread.c
<item>read_type()  :  stabsread.c
<item>savestring()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), concat(), cplus_demangle_opname(), strcmp(), strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_struct_type()  :  stabsread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
<item>next_symbol_text_func  :  buildsym.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function read_one_struct_field()

<p><tt>static void read_one_struct_field ( struct field_info* fip, const char** pp, const char* p, struct type* type, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>adjust_field_bitsize()  :  stabsread.c
<item>obsavestring()  :  symfile.c
<item>read_huge_number()  :  stabsread.c
<item>read_type()  :  stabsread.c
<item>stabs_general_complaint()  :  stabsread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_struct_fields()  :  stabsread.c
</itemize>
</descrip>

<sect1>Local Function read_range_type()

<p><tt>static struct type* read_range_type ( const char** pp, int typenums[2], int type_size, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>create_range_type()  :  gdbtypes.c
<item>dbx_lookup_type()  :  stabsread.c
<item>error_type()  :  stabsread.c
<item>gdbarch_int_bit()  :  gdbarch.c
<item>gdbarch_long_long_bit()  :  gdbarch.c
<item>init_type()  :  gdbtypes.c
<item>read_huge_number()  :  stabsread.c
<item>read_type()  :  stabsread.c
<item>read_type_number()  :  stabsread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_type()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function read_struct_fields()

<p><tt>static int read_struct_fields ( struct field_info* fip, const char** pp, struct type* type, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>is_cplus_marker()  :  demangle.c
<item>make_cleanup()  :  utils.c
<item>read_cpp_abbrev()  :  stabsread.c
<item>read_one_struct_field()  :  stabsread.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_struct_type()  :  stabsread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>next_symbol_text_func  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function read_struct_type()

<p><tt>static struct type* read_struct_type ( const char** pp, struct type* type, enum type_code type_code, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>attach_fields_to_type()  :  stabsread.c
<item>attach_fn_fields_to_type()  :  stabsread.c
<item>complain_about_struct_wipeout()  :  stabsread.c
<item>do_cleanups()  :  utils.c
<item>error_type()  :  stabsread.c
<item>make_cleanup()  :  utils.c
<item>read_baseclasses()  :  stabsread.c
<item>read_huge_number()  :  stabsread.c
<item>read_member_functions()  :  stabsread.c
<item>read_struct_fields()  :  stabsread.c
<item>read_tilde_fields()  :  stabsread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_type()  :  stabsread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>null_cleanup()  :  utils.c
</itemize>
</descrip>

<sect1>Local Function read_sun_builtin_type()

<p><tt>static struct type* read_sun_builtin_type ( const char** pp, int typenums[2], struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error_type()  :  stabsread.c
<item>init_type()  :  gdbtypes.c
<item>read_huge_number()  :  stabsread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_type()  :  stabsread.c
</itemize>
</descrip>

<sect1>Local Function read_sun_floating_type()

<p><tt>static struct type* read_sun_floating_type ( const char** pp, int typenums[2], struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error_type()  :  stabsread.c
<item>init_type()  :  gdbtypes.c
<item>read_huge_number()  :  stabsread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_type()  :  stabsread.c
</itemize>
</descrip>

<sect1>Local Function read_tilde_fields()

<p><tt>static int read_tilde_fields ( struct field_info* fip, const char** pp, struct type* type, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>is_cplus_marker()  :  demangle.c
<item>read_type()  :  stabsread.c
<item>strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_struct_type()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cplus_struct_default  :  gdbtypes.c
<item>next_symbol_text_func  :  buildsym.c
<item>symfile_complaints  :  complaints.c
<item>vptr_name  :  stabsread.c
</itemize>
</descrip>

<sect1>Local Function read_type()

<p><tt>static struct type* read_type ( const char** pp, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_undefined_type()  :  stabsread.c
<item>allocate_stub_method()  :  gdbtypes.c
<item>complaint()  :  complaints.c
<item>create_set_type()  :  gdbtypes.c
<item>dbx_alloc_type()  :  stabsread.c
<item>dbx_fixup_type()  :  stabsread.c
<item>dbx_fixup_variants()  :  stabsread.c
<item>dbx_lookup_type()  :  stabsread.c
<item>error_type()  :  stabsread.c
<item>make_cvr_type()  :  gdbtypes.c
<item>make_function_type()  :  gdbtypes.c
<item>make_pointer_type()  :  gdbtypes.c
<item>make_reference_type()  :  gdbtypes.c
<item>read_args()  :  stabsread.c
<item>read_array_type()  :  stabsread.c
<item>read_enum_type()  :  stabsread.c
<item>read_range_type()  :  stabsread.c
<item>read_struct_type()  :  stabsread.c
<item>read_sun_builtin_type()  :  stabsread.c
<item>read_sun_floating_type()  :  stabsread.c
<item>read_type()  :  stabsread.c
<item>read_type_number()  :  stabsread.c
<item>replace_type()  :  gdbtypes.c
<item>smash_to_member_type()  :  gdbtypes.c
<item>smash_to_method_type()  :  gdbtypes.c
<item>warning()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), atoi(), bfd_get_arch(), isdigit(), strchr(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>define_symbol()  :  stabsread.c
<item>patch_block_stabs()  :  stabsread.c
<item>process_symbol_types_only()  :  stabsread.c
<item>read_args()  :  stabsread.c
<item>read_array_type()  :  stabsread.c
<item>read_baseclasses()  :  stabsread.c
<item>read_cpp_abbrev()  :  stabsread.c
<item>read_member_functions()  :  stabsread.c
<item>read_one_struct_field()  :  stabsread.c
<item>read_range_type()  :  stabsread.c
<item>read_tilde_fields()  :  stabsread.c
<item>read_type()  :  stabsread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>obstack_free()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>file_symbols  :  buildsym.c
<item>symfile_complaints  :  complaints.c
<item>symnum  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function read_type_number()

<p><tt>static int read_type_number ( const char** pp, int* typenums )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>read_huge_number()  :  stabsread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_range_type()  :  stabsread.c
<item>read_type()  :  stabsread.c
</itemize>
</descrip>

<sect1>Local Function reg_value_complaint()

<p><tt>static void reg_value_complaint ( int regnum, int num_regs, const char* sym )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>define_symbol()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function rs6000_builtin_type()

<p><tt>static struct type* rs6000_builtin_type ( int typenum, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stabsread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>init_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dbx_lookup_type()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_error  :  symtab.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function stabs_general_complaint()

<p><tt>static void stabs_general_complaint ( const char* arg1 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_one_struct_field()  :  stabsread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

</article>
