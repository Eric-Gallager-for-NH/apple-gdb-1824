<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF infcmd.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for infcmd.c of gdb.cxref.
<author>cxref

<sect>File infcmd.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;signal.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;environ.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;annotate.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;completer.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;event-top.h&quot;</tt>
<itemize>
<item><tt>#include &lt;signal.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;parser-defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;top.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;regcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;reggroups.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;solib.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;infcmd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;macosx/macosx-nat-dyld.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-mutils.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;target.h&quot;</tt>
<item><tt>#include &quot;inferior.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-utils.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
</itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-threads.h&quot;</tt>
<itemize>
<item><tt>#include &lt;pthread.h&gt;</tt>
</itemize>
<item><tt>#include &lt;mach/machine.h&gt;</tt>
<item><tt>#include &lt;mach-o/loader.h&gt;</tt>
<item><tt>#include &quot;macosx/macosx-nat-dyld-info.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/machine.h&gt;</tt>
<item><tt>#include &lt;mach-o/loader.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-dyld-path.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;macosx/macosx-nat-inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-nat-threads.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-sigthread.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-mutils.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-threads.h&quot;</tt>
<item><tt>#include &lt;sys/wait.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-excthread.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-mutils.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-threads.h&quot;</tt>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;mach/thread_status.h&gt;</tt>
<item><tt>#include &lt;sys/wait.h&gt;</tt>
</itemize>
<item><tt>#include &quot;macosx/macosx-nat-dyld.h&quot;</tt>
<item><tt>#include &quot;macosx/macosx-nat-dyld-info.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;target.h&quot;</tt>
<item><tt>#include &quot;checkpoint.h&quot;</tt>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;checkpoint.h&quot;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define GO_USAGE &quot;Usage: go &lt;location&gt;\n&quot;</tt><newline>
<p>
<tt>#define ERROR_NO_INFERIOR</tt><newline>

<sect1>Global Variable inferior_ptid

<p>
<tt>ptid_t inferior_ptid</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_inflow()  :  inflow.c
<item>_initialize_infrun()  :  infrun.c
<item>attach_command()  :  infcmd.c
<item>bpstat_find_step_resume_breakpoint()  :  breakpoint.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>breakpoint_re_set_thread()  :  breakpoint.c
<item>check_safe_call()  :  valops.c
<item>context_switch()  :  infrun.c
<item>detach_breakpoints()  :  breakpoint.c
<item>do_captured_thread_select()  :  thread.c
<item>do_check_is_thread_unsafe()  :  valops.c
<item>dummy_frame_push()  :  dummy-frame.c
<item>dwarf_expr_tls_address()  :  dwarf2loc.c
<item>fetch_inferior_event()  :  infrun.c
<item>follow_exec()  :  infrun.c
<item>generic_mourn_inferior()  :  target/target.c
<item>hand_function_call()  :  infcall.c
<item>handle_command()  :  infrun.c
<item>handle_inferior_event()  :  infrun.c
<item>handle_sigio()  :  inflow.c
<item>info_threads_command()  :  thread.c
<item>insert_catchpoint()  :  breakpoint.c
<item>kill_command()  :  inflow.c
<item>kill_if_already_running()  :  infcmd.c
<item>lookup_child_selector()  :  objc-lang.c
<item>normal_stop()  :  infrun.c
<item>nosupport_runtime()  :  target/target.c
<item>pass_signal()  :  inflow.c
<item>pid_info()  :  infcmd.c
<item>prepare_to_proceed()  :  infrun.c
<item>quit_confirm()  :  top.c
<item>quit_target()  :  top.c
<item>read_pc()  :  regcache.c
<item>read_pc_pid()  :  regcache.c
<item>read_register_pid()  :  regcache.c
<item>reattach_breakpoints()  :  breakpoint.c
<item>regcache_raw_read()  :  regcache.c
<item>regcache_raw_supply()  :  regcache.c
<item>regcache_raw_write()  :  regcache.c
<item>reinit_frame_cache()  :  frame.c
<item>remote_async_wait()  :  remote.c
<item>remote_fetch_registers()  :  remote.c
<item>remote_find_new_threads()  :  remote.c
<item>remote_macosx_open()  :  remote.c
<item>remote_open_1()  :  remote.c
<item>remote_start_remote()  :  remote.c
<item>remote_store_registers()  :  remote.c
<item>remote_vcont_resume()  :  remote.c
<item>remote_wait()  :  remote.c
<item>remove_breakpoint()  :  breakpoint.c
<item>restore_current_thread()  :  thread.c
<item>restore_inferior_ptid()  :  infrun.c
<item>restore_inferior_status()  :  infrun.c
<item>resume()  :  infrun.c
<item>run_command_1()  :  infcmd.c
<item>safe_check_is_thread_unsafe()  :  valops.c
<item>save_inferior_ptid()  :  infrun.c
<item>save_inferior_status()  :  infrun.c
<item>set_momentary_breakpoint()  :  breakpoint.c
<item>set_schedlock_helper()  :  infrun.c
<item>switch_to_thread()  :  thread.c
<item>terminal_init_inferior()  :  inflow.c
<item>thread_apply_all_command()  :  thread.c
<item>thread_apply_command()  :  thread.c
<item>thread_command()  :  thread.c
<item>wait_for_inferior()  :  infrun.c
<item>write_pc()  :  regcache.c
<item>write_pc_pid()  :  regcache.c
<item>write_register_pid()  :  regcache.c
<item>x86_frame_this_id()  :  target/x86-shared-tdep.c
</itemize>
</descrip>

<sect1>Global Variable inferior_environ

<p>
<tt>struct gdb_environ* inferior_environ</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
<item>environment_info()  :  infcmd.c
<item>path_command()  :  infcmd.c
<item>path_info()  :  infcmd.c
<item>run_command_1()  :  infcmd.c
<item>set_environment_command()  :  infcmd.c
<item>solib_open()  :  solib.c
<item>unset_environment_command()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Variable stop_signal

<p>
<tt>enum target_signal stop_signal</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>init_wait_for_inferior()  :  infrun.c
<item>keep_going()  :  infrun.c
<item>proceed()  :  infrun.c
<item>program_info()  :  infcmd.c
<item>restore_inferior_status()  :  infrun.c
<item>save_inferior_status()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Variable stop_pc

<p>
<tt>CORE_ADDR stop_pc</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>at_inlined_call_site_p()  :  inlining.c
<item>find_correct_current_position()  :  inlining.c
<item>find_next_inlined_subroutine()  :  inlining.c
<item>hand_function_call()  :  infcall.c
<item>handle_inferior_event()  :  infrun.c
<item>in_inlined_function_call_p()  :  inlining.c
<item>inlined_frame_sniffer()  :  inlining.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>normal_stop()  :  infrun.c
<item>prepare_to_proceed()  :  infrun.c
<item>print_frame()  :  stack.c
<item>print_frame_info()  :  stack.c
<item>print_inlined_frame()  :  inlining.c
<item>proceed()  :  infrun.c
<item>program_info()  :  infcmd.c
<item>rest_of_line_contains_inlined_subroutine()  :  inlining.c
<item>restore_inferior_status()  :  infrun.c
<item>save_inferior_status()  :  infrun.c
<item>signal_command()  :  infcmd.c
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
<item>step_into_current_inlined_subroutine()  :  inlining.c
<item>step_into_function()  :  infrun.c
<item>step_once()  :  infcmd.c
<item>switch_to_thread()  :  thread.c
</itemize>
</descrip>

<sect1>Global Variable stop_bpstat

<p>
<tt>bpstat stop_bpstat</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>async_breakpoint_command_continuation()  :  breakpoint.c
<item>clear_proceed_status()  :  infrun.c
<item>command_handler()  :  event-top.c
<item>command_line_handler_continuation()  :  event-top.c
<item>command_loop()  :  top.c
<item>continue_command()  :  infcmd.c
<item>delete_breakpoint()  :  breakpoint.c
<item>finish_command()  :  infcmd.c
<item>finish_command_continuation()  :  infcmd.c
<item>hand_function_call()  :  infcall.c
<item>handle_inferior_event()  :  infrun.c
<item>normal_stop()  :  infrun.c
<item>program_info()  :  infcmd.c
<item>restore_inferior_status()  :  infrun.c
<item>save_inferior_status()  :  infrun.c
<item>simplified_command_loop()  :  top.c
</itemize>
</descrip>

<sect1>Global Variable breakpoint_proceeded

<p>
<tt>int breakpoint_proceeded</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>bpstat_do_actions()  :  breakpoint.c
<item>clear_proceed_status()  :  infrun.c
<item>restore_inferior_status()  :  infrun.c
<item>save_inferior_status()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Variable stop_step

<p>
<tt>int stop_step</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>fetch_inferior_event()  :  infrun.c
<item>handle_inferior_event()  :  infrun.c
<item>normal_stop()  :  infrun.c
<item>print_stop_reason()  :  infrun.c
<item>program_info()  :  infcmd.c
<item>re_exec_1()  :  infcmd.c
<item>re_exec_1_continuation()  :  infcmd.c
<item>restore_inferior_status()  :  infrun.c
<item>save_inferior_status()  :  infrun.c
<item>step_1_continuation()  :  infcmd.c
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
<item>step_into_function()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Variable stop_stack_dummy

<p>
<tt>int stop_stack_dummy</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
<item>handle_inferior_event()  :  infrun.c
<item>normal_stop()  :  infrun.c
<item>restore_inferior_status()  :  infrun.c
<item>save_inferior_status()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Variable stopped_by_random_signal

<p>
<tt>int stopped_by_random_signal</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
<item>handle_inferior_event()  :  infrun.c
<item>normal_stop()  :  infrun.c
<item>restore_inferior_status()  :  infrun.c
<item>save_inferior_status()  :  infrun.c
</itemize>
</descrip>

<sect1>Global Variable step_range_start

<p>
<tt>CORE_ADDR step_range_start</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
<item>clear_proceed_status()  :  infrun.c
<item>context_switch()  :  infrun.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>follow_exec()  :  infrun.c
<item>handle_inferior_event()  :  infrun.c
<item>inlined_frame_sniffer()  :  inlining.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>re_exec_1()  :  infcmd.c
<item>re_exec_once()  :  infcmd.c
<item>restore_inferior_status()  :  infrun.c
<item>save_inferior_status()  :  infrun.c
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
<item>step_into_function()  :  infrun.c
<item>step_once()  :  infcmd.c
<item>until_next_command()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Variable step_range_end

<p>
<tt>CORE_ADDR step_range_end</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>clear_proceed_status()  :  infrun.c
<item>context_switch()  :  infrun.c
<item>currently_stepping()  :  infrun.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>follow_exec()  :  infrun.c
<item>handle_inferior_event()  :  infrun.c
<item>inlined_frame_sniffer()  :  inlining.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>re_exec_1()  :  infcmd.c
<item>re_exec_once()  :  infcmd.c
<item>restore_inferior_status()  :  infrun.c
<item>save_inferior_status()  :  infrun.c
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
<item>step_into_function()  :  infrun.c
<item>step_once()  :  infcmd.c
<item>until_next_command()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Variable step_frame_id

<p>
<tt>struct frame_id step_frame_id</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
<item>clear_proceed_status()  :  infrun.c
<item>context_switch()  :  infrun.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>handle_inferior_event()  :  infrun.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>insert_step_resume_breakpoint_at_frame()  :  infrun.c
<item>normal_stop()  :  infrun.c
<item>re_exec_1()  :  infcmd.c
<item>re_exec_once()  :  infcmd.c
<item>restore_inferior_status()  :  infrun.c
<item>save_inferior_status()  :  infrun.c
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
<item>until_next_command()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Variable step_over_calls

<p>
<tt>enum step_over_calls_kind step_over_calls</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>clear_proceed_status()  :  infrun.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>handle_inferior_event()  :  infrun.c
<item>re_exec_1()  :  infcmd.c
<item>re_exec_once()  :  infcmd.c
<item>restore_inferior_status()  :  infrun.c
<item>save_inferior_status()  :  infrun.c
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
<item>until_next_command()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Variable step_multi

<p>
<tt>int step_multi</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>fetch_inferior_event()  :  infrun.c
<item>normal_stop()  :  infrun.c
<item>print_stop_reason()  :  infrun.c
<item>re_exec_1()  :  infcmd.c
<item>re_exec_once()  :  infcmd.c
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
<item>until_next_command()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Variable start_with_shell_flag

<p>
<tt>int start_with_shell_flag</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-lang.c
<item>arch-utils.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>corefile.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2loc.c
<item>event-top.c
<item>findvar.c
<item>frame.c
<item>gdbarch.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>macroscope.c
<item>main.c
<item>mem-break.c
<item>objc-lang.c
<item>objfiles.c
<item>parse.c
<item>regcache.c
<item>remote.c
<item>sentinel-frame.c
<item>solib.c
<item>stack.c
<item>symfile.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>utils.c
<item>valops.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>construct_inferior_arguments()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Variable stepping_ranges

<p>
<tt>struct address_range_list* stepping_ranges</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-namespace.c
<item>cp-support.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>f-exp.c
<item>frame-unwind.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>linespec.c
<item>m2-exp.c
<item>macrotab.c
<item>maint.c
<item>mdebugread.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>printcmd.c
<item>remote.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>tramp-frame.c
<item>valops.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>clear_proceed_status()  :  infrun.c
<item>context_switch()  :  infrun.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>follow_exec()  :  infrun.c
<item>handle_inferior_event()  :  infrun.c
<item>is_at_stepping_ranges_end()  :  inlining.c
<item>is_within_stepping_ranges()  :  inlining.c
<item>restore_inferior_status()  :  infrun.c
<item>save_inferior_status()  :  infrun.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Variable stepping_over_inlined_subroutine

<p>
<tt>int stepping_over_inlined_subroutine</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-namespace.c
<item>cp-support.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>f-exp.c
<item>frame-unwind.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>linespec.c
<item>m2-exp.c
<item>macrotab.c
<item>maint.c
<item>mdebugread.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>printcmd.c
<item>remote.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>tramp-frame.c
<item>valops.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>clear_proceed_status()  :  infrun.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>follow_exec()  :  infrun.c
<item>handle_inferior_event()  :  infrun.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>insert_step_resume_breakpoint_at_frame()  :  infrun.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
<item>verify_stack()  :  inlining.c
</itemize>
</descrip>

<sect1>Global Variable finishing_inlined_subroutine

<p>
<tt>int finishing_inlined_subroutine</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-namespace.c
<item>cp-support.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>f-exp.c
<item>frame-unwind.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>linespec.c
<item>m2-exp.c
<item>macrotab.c
<item>maint.c
<item>mdebugread.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>printcmd.c
<item>remote.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>tramp-frame.c
<item>valops.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>clear_proceed_status()  :  infrun.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>follow_exec()  :  infrun.c
<item>normal_stop()  :  infrun.c
<item>print_stop_reason()  :  infrun.c
<item>verify_stack()  :  inlining.c
</itemize>
</descrip>

<sect1>Global Variable rx_cp

<p>
<tt>struct checkpoint* rx_cp</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>re_exec_once()  :  infcmd.c
<item>re_execute_command()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Variable active_checkpoint

<p>
<tt>struct checkpoint* active_checkpoint</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>re_exec_once()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Variable magic_flag

<p>
<tt>int magic_flag</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>re_exec_1()  :  infcmd.c
<item>re_exec_once()  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>inferior_args</bf><newline>
<tt>static char* inferior_args</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()
<item>get_inferior_args()
<item>set_inferior_args()
</itemize>
</descrip>
<p>
<bf>inferior_argc</bf><newline>
<tt>static int inferior_argc</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>get_inferior_args()
<item>notice_args_set()
<item>set_inferior_args()
<item>set_inferior_args_vector()
</itemize>
</descrip>
<p>
<bf>inferior_argv</bf><newline>
<tt>static char** inferior_argv</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>get_inferior_args()
<item>notice_args_set()
<item>set_inferior_args()
<item>set_inferior_args_vector()
</itemize>
</descrip>
<p>
<bf>inferior_io_terminal</bf><newline>
<tt>static char* inferior_io_terminal</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()
<item>get_inferior_io_terminal()
<item>set_inferior_io_terminal()
</itemize>
</descrip>
<p>
<bf>path_var_name</bf><newline>
<tt>static const char path_var_name[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>path_command()
<item>path_info()
</itemize>
</descrip>

<sect1>Global Function _initialize_infcmd()

<p><tt>void _initialize_infcmd ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>init_environ()  :  environ.c
<item>make_environ()  :  environ.c
<item>smuggle_dyld_settings()  :  environ.c
<item>add_cmd(), add_com(), add_com_alias(), add_info(), add_info_alias(), add_prefix_cmd(), add_setshow_filename_cmd(), add_setshow_optional_filename_cmd(), set_cmd_completer()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>advance_command()  :  infcmd.c
<item>all_registers_info()  :  infcmd.c
<item>attach_command()  :  infcmd.c
<item>continue_command()  :  infcmd.c
<item>detach_command()  :  infcmd.c
<item>disconnect_command()  :  infcmd.c
<item>environment_info()  :  infcmd.c
<item>filename_completer()  :  completer.c
<item>finish_command()  :  infcmd.c
<item>float_info()  :  infcmd.c
<item>go_command()  :  infcmd.c
<item>interrupt_target_command()  :  infcmd.c
<item>jump_command()  :  infcmd.c
<item>location_completer()  :  completer.c
<item>next_command()  :  infcmd.c
<item>nexti_command()  :  infcmd.c
<item>nofp_registers_info()  :  infcmd.c
<item>noop_completer()  :  completer.c
<item>notice_args_read()  :  infcmd.c
<item>notice_args_set()  :  infcmd.c
<item>path_command()  :  infcmd.c
<item>path_info()  :  infcmd.c
<item>pid_info()  :  infcmd.c
<item>program_info()  :  infcmd.c
<item>run_command()  :  infcmd.c
<item>run_no_args_command()  :  infcmd.c
<item>set_environment_command()  :  infcmd.c
<item>signal_command()  :  infcmd.c
<item>start_command()  :  infcmd.c
<item>step_command()  :  infcmd.c
<item>stepi_command()  :  infcmd.c
<item>unset_command()  :  infcmd.c
<item>unset_environment_command()  :  infcmd.c
<item>until_command()  :  infcmd.c
<item>vector_info()  :  infcmd.c
<item>macosx_process_completer()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_args  :  infcmd.c
<item>inferior_environ  :  infcmd.c
<item>inferior_io_terminal  :  infcmd.c
<item>xdb_commands  :  main.c
<item>cmdlist, setlist, showlist, unsetlist
</itemize>
</descrip>

<sect1>Global Function all_registers_info()

<p><tt>void all_registers_info ( const char* addr_exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>registers_info()  :  infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function attach_command()

<p><tt>void attach_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_proceed_status()  :  infrun.c
<item>clear_solib()  :  solib.c
<item>dont_repeat()  :  top.c
<item>error()  :  utils.c
<item>get_exec_file()  :  corefile.c
<item>init_wait_for_inferior()  :  infrun.c
<item>normal_stop()  :  infrun.c
<item>ptid_get_pid()  :  infrun.c
<item>query()  :  utils.c
<item>re_enable_breakpoints_in_shlibs()  :  breakpoint.c
<item>reopen_exec_file()  :  corefile.c
<item>reread_symbols()  :  symfile.c
<item>savestring()  :  utils.c
<item>source_full_path_of()  :  source.c
<item>symbol_file_add_main()  :  symfile.c
<item>target_kill()  :  target/target.c
<item>clear_all_checkpoints(), deprecated_attach_hook(), exec_file_attach(), macosx_solib_add(), strlen()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
<item>captured_main()  :  main.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>auto_solib_add  :  symfile.c
<item>current_target  :  target/target.c
<item>deprecated_attach_hook  :  top.c
<item>inferior_ptid  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function construct_inferior_arguments()

<p><tt>char* construct_inferior_arguments ( struct gdbarch* gdbarch, int argc, char** argv )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___strcat_chk(), __builtin_object_size(), __inline_strcat_chk(), strchr(), strlen()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch.c
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>start_with_shell_flag  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function continue_command()

<p><tt>void continue_command ( const char* proc_count_exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>async_disable_stdin()  :  event-top.c
<item>bpstat_num()  :  breakpoint.c
<item>clear_proceed_status()  :  infrun.c
<item>error()  :  utils.c
<item>parse_and_eval_long()  :  eval.c
<item>printf_filtered()  :  utils.c
<item>proceed()  :  infrun.c
<item>set_ignore_count()  :  breakpoint.c
<item>strip_bg_char()  :  infcmd.c
<item>continue_command_hook(), state_change_hook()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>continue_command_hook  :  top.c
<item>current_target  :  target/target.c
<item>gdb_override_async  :  target/target.c
<item>state_change_hook  :  top.c
<item>stop_bpstat  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function default_print_registers_info()

<p><tt>void default_print_registers_info ( struct gdbarch* gdbarch, struct ui_file* file, struct frame_info* frame, int regnum, int print_all )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>frame_register_read()  :  frame.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>gdbarch_num_pseudo_regs()  :  gdbarch.c
<item>gdbarch_num_regs()  :  gdbarch.c
<item>gdbarch_register_name()  :  gdbarch.c
<item>gdbarch_register_reggroup_p()  :  gdbarch.c
<item>print_spaces_filtered()  :  utils.c
<item>register_size()  :  regcache.c
<item>register_type()  :  regcache.c
<item>val_print()  :  valprint.c
<item>strlen()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>gdbarch.c
<item>gdbarch_alloc()  :  gdbarch.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>all_reggroup  :  reggroups.c
<item>current_gdbarch  :  gdbarch.c
<item>general_reggroup  :  reggroups.c
</itemize>
</descrip>

<sect1>Global Function get_inferior_args()

<p><tt>char* get_inferior_args ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_construct_inferior_arguments()  :  gdbarch.c
<item>set_inferior_args()  :  infcmd.c
<item>xfree()  :  utils.c
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>notice_args_read()  :  infcmd.c
<item>run_command_1()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>inferior_argc  :  infcmd.c
<item>inferior_args  :  infcmd.c
<item>inferior_argv  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function get_inferior_io_terminal()

<p><tt>const char* get_inferior_io_terminal ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_io_terminal  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function interrupt_target_command()

<p><tt>void interrupt_target_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dont_repeat()  :  top.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>gdb_override_async  :  target/target.c
</itemize>
</descrip>

<sect1>Global Function kill_if_already_running()

<p><tt>void kill_if_already_running ( int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>init_wait_for_inferior()  :  infrun.c
<item>ptid_equal()  :  infrun.c
<item>query()  :  utils.c
<item>target_kill()  :  target/target.c
<item>clear_all_checkpoints()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>run_command_1()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>inferior_ptid  :  infcmd.c
<item>null_ptid  :  infrun.c
</itemize>
</descrip>

<sect1>Global Function nexti_command()

<p><tt>void nexti_command ( const char* count_string, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>step_1()  :  infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function pid_info()

<p><tt>void pid_info ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>ptid_get_pid()  :  infrun.c
<item>ui_out_field_int()  :  ui-out.c
<item>ui_out_flush()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>inferior_ptid  :  infcmd.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function re_exec_1()

<p><tt>void re_exec_1 ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>async_disable_stdin()  :  event-top.c
<item>clear_proceed_status()  :  infrun.c
<item>error()  :  utils.c
<item>get_current_frame()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>proceed()  :  infrun.c
<item>re_exec_once()  :  infcmd.c
<item>stepping_command_hook()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>re_execute_command()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>gdb_override_async  :  target/target.c
<item>magic_flag  :  infcmd.c
<item>step_frame_id  :  infcmd.c
<item>step_multi  :  infcmd.c
<item>step_over_calls  :  infcmd.c
<item>step_range_end  :  infcmd.c
<item>step_range_start  :  infcmd.c
<item>stepping_command_hook  :  top.c
<item>stop_step  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function re_exec_1_continuation()

<p><tt>void re_exec_1_continuation ( struct continuation_arg* arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>re_exec_once()  :  infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>re_exec_once()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>stop_step  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function re_exec_once()

<p><tt>void re_exec_once ( int count )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_intermediate_continuation()  :  utils.c
<item>clear_proceed_status()  :  infrun.c
<item>error()  :  utils.c
<item>get_current_frame()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>proceed()  :  infrun.c
<item>xmalloc()  :  utils.c
<item>checkpoint_compare(), print_checkpoint_info(), printf()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>re_exec_1()  :  infcmd.c
<item>re_exec_1_continuation()  :  infcmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>re_exec_1_continuation()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>active_checkpoint  :  infcmd.c
<item>magic_flag  :  infcmd.c
<item>rx_cp  :  infcmd.c
<item>step_frame_id  :  infcmd.c
<item>step_multi  :  infcmd.c
<item>step_over_calls  :  infcmd.c
<item>step_range_end  :  infcmd.c
<item>step_range_start  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function re_execute_command()

<p><tt>void re_execute_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>parse_and_eval_long()  :  eval.c
<item>re_exec_1()  :  infcmd.c
<item>find_checkpoint(), print_checkpoint_info(), printf()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>rx_cp  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function registers_info()

<p><tt>void registers_info ( const char* addr_exp, int fpregs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>frame_map_name_to_regnum()  :  frame.c
<item>gdbarch_num_pseudo_regs()  :  gdbarch.c
<item>gdbarch_num_regs()  :  gdbarch.c
<item>gdbarch_print_registers_info()  :  gdbarch.c
<item>gdbarch_register_reggroup_p()  :  gdbarch.c
<item>reggroup_name()  :  reggroups.c
<item>reggroup_next()  :  reggroups.c
<item>isspace(), strncmp(), strtol()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>all_registers_info()  :  infcmd.c
<item>nofp_registers_info()  :  infcmd.c
<item>trace_dump_command()  :  tracepoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_target  :  target/target.c
<item>deprecated_selected_frame  :  frame.c
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

<sect1>Global Function set_inferior_args()

<p><tt>char* set_inferior_args ( char* newargs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>get_inferior_args()  :  infcmd.c
<item>run_command_1()  :  infcmd.c
<item>run_no_args_command()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_argc  :  infcmd.c
<item>inferior_args  :  infcmd.c
<item>inferior_argv  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function set_inferior_args_vector()

<p><tt>void set_inferior_args_vector ( int argc, char** argv )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>captured_main()  :  main.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_argc  :  infcmd.c
<item>inferior_argv  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function set_inferior_io_terminal()

<p><tt>void set_inferior_io_terminal ( const char* terminal_name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>savestring()  :  utils.c
<item>xfree()  :  utils.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>tty_command()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_io_terminal  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function step_once()

<p><tt>void step_once ( int skip_subroutines, int single_inst, int count )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_intermediate_continuation()  :  utils.c
<item>at_inlined_call_site_p()  :  inlining.c
<item>clear_proceed_status()  :  infrun.c
<item>current_inlined_subroutine_call_stack_end_pc()  :  inlining.c
<item>current_inlined_subroutine_call_stack_start_pc()  :  inlining.c
<item>current_inlined_subroutine_stack_position()  :  inlining.c
<item>current_inlined_subroutine_stack_size()  :  inlining.c
<item>error()  :  utils.c
<item>find_next_inlined_subroutine()  :  inlining.c
<item>find_pc_line()  :  symtab.c
<item>find_pc_line_pc_range()  :  symtab.c
<item>find_pc_partial_function()  :  blockframe.c
<item>flush_cached_frames()  :  frame.c
<item>get_current_frame()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>get_frame_type()  :  frame.c
<item>get_prev_frame()  :  frame.c
<item>identify_source_line()  :  source.c
<item>in_inlined_function_call_p()  :  inlining.c
<item>inlined_function_find_first_line()  :  inlining.c
<item>internal_error()  :  utils.c
<item>print_inlined_frame()  :  inlining.c
<item>print_source_lines()  :  source.c
<item>printf_filtered()  :  utils.c
<item>proceed()  :  infrun.c
<item>rest_of_line_contains_inlined_subroutine()  :  inlining.c
<item>step_into_current_inlined_subroutine()  :  inlining.c
<item>ui_out_text()  :  ui-out.c
<item>xmalloc()  :  utils.c
<item>annotate_frame_end(), annotate_frames_invalid(), annotate_starting(), annotate_stopped(), breakpoints_changed()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>step_1_continuation()  :  infcmd.c
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>step_1_continuation()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>annotation_level  :  stack.c
<item>current_target  :  target/target.c
<item>dwarf2_debug_inlined_stepping  :  dwarf2read.c
<item>global_inlined_call_stack  :  inlining.c
<item>inlined_step_range_end  :  inlining.c
<item>step_frame_id  :  infcmd.c
<item>step_multi  :  infcmd.c
<item>step_over_calls  :  infcmd.c
<item>step_range_end  :  infcmd.c
<item>step_range_start  :  infcmd.c
<item>step_stop_if_no_debug  :  infrun.c
<item>stepping_into_inlined_subroutine  :  inlining.c
<item>stepping_over_inlined_subroutine  :  infcmd.c
<item>stepping_ranges  :  infcmd.c
<item>stop_pc  :  infcmd.c
<item>target_executing  :  top.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function stepi_command()

<p><tt>void stepi_command ( const char* count_string, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>step_1()  :  infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function strip_bg_char()

<p><tt>int strip_bg_char ( const char** args )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strchr(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>advance_command()  :  infcmd.c
<item>continue_command()  :  infcmd.c
<item>finish_command()  :  infcmd.c
<item>jump_command()  :  infcmd.c
<item>run_command_1()  :  infcmd.c
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
<item>until_command()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function tty_command()

<p><tt>void tty_command ( const char* file, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inferior.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>set_inferior_io_terminal()  :  infcmd.c
<item>error_no_arg()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>captured_main()  :  main.c
</itemize>
</descrip>

<sect1>Local Function advance_command()

<p><tt>static void advance_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>async_disable_stdin()  :  event-top.c
<item>error()  :  utils.c
<item>strip_bg_char()  :  infcmd.c
<item>until_break_command()  :  breakpoint.c
<item>error_no_arg()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>gdb_override_async  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function detach_command()

<p><tt>static void detach_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dont_repeat()  :  top.c
<item>target_detach()  :  target/target.c
<item>deprecated_detach_hook()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>deprecated_detach_hook  :  top.c
</itemize>
</descrip>

<sect1>Local Function disable_longjmp_breakpoint_cleanup()

<p><tt>static void disable_longjmp_breakpoint_cleanup ( void* ignore )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>disable_longjmp_breakpoint()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function disconnect_command()

<p><tt>static void disconnect_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dont_repeat()  :  top.c
<item>target_disconnect()  :  target/target.c
<item>deprecated_detach_hook()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>deprecated_detach_hook  :  top.c
</itemize>
</descrip>

<sect1>Local Function environment_info()

<p><tt>static void environment_info ( const char* var, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>environ_vector()  :  environ.c
<item>get_in_environ()  :  environ.c
<item>puts_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_environ  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function finish_command()

<p><tt>static void finish_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_continuation()  :  utils.c
<item>async_disable_stdin()  :  event-top.c
<item>bpstat_find_breakpoint()  :  breakpoint.c
<item>check_typedef()  :  gdbtypes.c
<item>clear_proceed_status()  :  infrun.c
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>find_pc_function()  :  blockframe.c
<item>find_pc_line()  :  symtab.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>get_frame_id()  :  frame.c
<item>get_frame_pc()  :  frame.c
<item>get_prev_frame()  :  frame.c
<item>get_selected_frame()  :  frame.c
<item>in_inlined_function_call_p()  :  inlining.c
<item>internal_error()  :  utils.c
<item>make_cleanup_delete_breakpoint()  :  breakpoint.c
<item>make_exec_cleanup_delete_breakpoint()  :  breakpoint.c
<item>print_return_value()  :  infcmd.c
<item>print_stack_frame()  :  stack.c
<item>printf_filtered()  :  utils.c
<item>proceed()  :  infrun.c
<item>set_momentary_breakpoint()  :  breakpoint.c
<item>strip_bg_char()  :  infcmd.c
<item>using_struct_return()  :  value.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>finish_command_continuation()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>gdb_override_async  :  target/target.c
<item>proceed_to_finish  :  infrun.c
<item>stop_bpstat  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function finish_command_continuation()

<p><tt>static void finish_command_continuation ( struct continuation_arg* arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bpstat_find_breakpoint()  :  breakpoint.c
<item>check_typedef()  :  gdbtypes.c
<item>do_exec_cleanups()  :  utils.c
<item>internal_error()  :  utils.c
<item>print_return_value()  :  infcmd.c
<item>using_struct_return()  :  value.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>finish_command()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>stop_bpstat  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function finish_inlined_subroutine_command()

<p><tt>static void finish_inlined_subroutine_command ( CORE_ADDR inline_end_pc )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>add_continuation()  :  utils.c
<item>adjust_current_inlined_subroutine_stack_position()  :  inlining.c
<item>check_typedef()  :  gdbtypes.c
<item>clear_proceed_status()  :  infrun.c
<item>current_inlined_subroutine_stack_position()  :  inlining.c
<item>do_exec_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>find_pc_function()  :  blockframe.c
<item>find_pc_line()  :  symtab.c
<item>get_current_frame()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>get_frame_pc()  :  frame.c
<item>get_prev_frame()  :  frame.c
<item>internal_error()  :  utils.c
<item>print_return_value()  :  infcmd.c
<item>proceed()  :  infrun.c
<item>using_struct_return()  :  value.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>finish_command()  :  infcmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>finish_inlined_subroutine_command_continuation()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>deprecated_selected_frame  :  frame.c
<item>finishing_inlined_subroutine  :  infcmd.c
<item>gdb_override_async  :  target/target.c
<item>global_inlined_call_stack  :  inlining.c
<item>proceed_to_finish  :  infrun.c
<item>step_frame_id  :  infcmd.c
<item>step_over_calls  :  infcmd.c
<item>step_range_end  :  infcmd.c
<item>step_range_start  :  infcmd.c
<item>stepping_over_inlined_subroutine  :  infcmd.c
<item>stepping_ranges  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function finish_inlined_subroutine_command_continuation()

<p><tt>static void finish_inlined_subroutine_command_continuation ( struct continuation_arg* arg )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>do_exec_cleanups()  :  utils.c
<item>internal_error()  :  utils.c
<item>print_return_value()  :  infcmd.c
<item>using_struct_return()  :  value.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>finish_inlined_subroutine_command()  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function float_info()

<p><tt>static void float_info ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>print_float_info()  :  infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>deprecated_selected_frame  :  frame.c
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

<sect1>Local Function go_command()

<p><tt>static void go_command ( const char* line_no, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>jump_command()  :  infcmd.c
<item>printf_filtered()  :  utils.c
<item>tbreak_command()  :  breakpoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function jump_command()

<p><tt>static void jump_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>async_disable_stdin()  :  event-top.c
<item>clear_proceed_status()  :  infrun.c
<item>decode_line_spec_1()  :  breakpoint.c
<item>deprecated_print_address_numeric()  :  printcmd.c
<item>error()  :  utils.c
<item>find_pc_function()  :  blockframe.c
<item>fixup_symbol_section()  :  symtab.c
<item>gdb_check_fatal()  :  utils.c
<item>get_current_frame()  :  frame.c
<item>get_frame_function()  :  blockframe.c
<item>printf_filtered()  :  utils.c
<item>proceed()  :  infrun.c
<item>query()  :  utils.c
<item>resolve_sal_pc()  :  breakpoint.c
<item>section_is_mapped()  :  symfile.c
<item>section_is_overlay()  :  symfile.c
<item>strip_bg_char()  :  infcmd.c
<item>symbol_natural_name()  :  symtab.c
<item>xfree()  :  utils.c
<item>error_no_arg()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>go_command()  :  infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>demangle  :  utils.c
<item>gdb_override_async  :  target/target.c
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

<sect1>Local Function next_command()

<p><tt>static void next_command ( const char* count_string, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>step_1()  :  infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function nofp_registers_info()

<p><tt>static void nofp_registers_info ( const char* addr_exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>registers_info()  :  infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function notice_args_read()

<p><tt>static void notice_args_read ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>get_inferior_args()  :  infcmd.c
<item>deprecated_show_value_hack()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function notice_args_set()

<p><tt>static void notice_args_set ( const char* args, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_argc  :  infcmd.c
<item>inferior_argv  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function path_command()

<p><tt>static void path_command ( const char* dirname, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dont_repeat()  :  top.c
<item>get_in_environ()  :  environ.c
<item>mod_path()  :  source.c
<item>path_info()  :  infcmd.c
<item>set_in_environ()  :  environ.c
<item>xfree()  :  utils.c
<item>xstrdup()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_environ  :  infcmd.c
<item>path_var_name  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function path_info()

<p><tt>static void path_info ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_in_environ()  :  environ.c
<item>puts_filtered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>path_command()  :  infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_environ  :  infcmd.c
<item>path_var_name  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function print_float_info()

<p><tt>static void print_float_info ( struct gdbarch* gdbarch, struct ui_file* file, struct frame_info* frame, const char* args )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>fprintf_filtered()  :  utils.c
<item>gdbarch_num_pseudo_regs()  :  gdbarch.c
<item>gdbarch_num_regs()  :  gdbarch.c
<item>gdbarch_print_float_info()  :  gdbarch.c
<item>gdbarch_print_float_info_p()  :  gdbarch.c
<item>gdbarch_print_registers_info()  :  gdbarch.c
<item>gdbarch_register_reggroup_p()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>float_info()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_target  :  target/target.c
<item>deprecated_selected_frame  :  frame.c
<item>float_reggroup  :  reggroups.c
</itemize>
</descrip>

<sect1>Local Function print_return_value()

<p><tt>static void print_return_value ( int struct_return, struct type* value_type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_value()  :  value.c
<item>check_typedef()  :  gdbtypes.c
<item>do_cleanups()  :  utils.c
<item>gdbarch_return_value()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>make_cleanup_ui_out_stream_delete()  :  ui-out.c
<item>record_latest_value()  :  value.c
<item>ui_out_field_fmt()  :  ui-out.c
<item>ui_out_field_stream()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_stream_new()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>value_contents_raw()  :  value.c
<item>value_print()  :  valprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>finish_command()  :  infcmd.c
<item>finish_command_continuation()  :  infcmd.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>finish_inlined_subroutine_command_continuation()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>stop_registers  :  infrun.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function print_vector_info()

<p><tt>static void print_vector_info ( struct gdbarch* gdbarch, struct ui_file* file, struct frame_info* frame, const char* args )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>fprintf_filtered()  :  utils.c
<item>gdbarch_num_pseudo_regs()  :  gdbarch.c
<item>gdbarch_num_regs()  :  gdbarch.c
<item>gdbarch_print_registers_info()  :  gdbarch.c
<item>gdbarch_print_vector_info()  :  gdbarch.c
<item>gdbarch_print_vector_info_p()  :  gdbarch.c
<item>gdbarch_register_reggroup_p()  :  gdbarch.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>vector_info()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_target  :  target/target.c
<item>deprecated_selected_frame  :  frame.c
<item>vector_reggroup  :  reggroups.c
</itemize>
</descrip>

<sect1>Local Function program_info()

<p><tt>static void program_info ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bpstat_num()  :  breakpoint.c
<item>hex_string()  :  utils.c
<item>printf_filtered()  :  utils.c
<item>target_signal_to_name(), target_signal_to_string()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>stop_bpstat  :  infcmd.c
<item>stop_pc  :  infcmd.c
<item>stop_signal  :  infcmd.c
<item>stop_step  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function run_command()

<p><tt>static void run_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>run_command_1()  :  infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function run_command_1()

<p><tt>static void run_command_1 ( const char* args, int from_tty, int tbreak_at_main )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>async_disable_stdin()  :  event-top.c
<item>async_enable_stdin()  :  event-top.c
<item>clear_breakpoint_hit_counts()  :  breakpoint.c
<item>do_hand_call_cleanups()  :  utils.c
<item>do_run_cleanups()  :  utils.c
<item>dont_repeat()  :  top.c
<item>environ_vector()  :  environ.c
<item>error()  :  utils.c
<item>get_exec_file()  :  corefile.c
<item>get_inferior_args()  :  infcmd.c
<item>inlined_function_call_stack_initialized_p()  :  inlining.c
<item>inlined_function_initialize_call_stack()  :  inlining.c
<item>inlined_function_reinitialize_call_stack()  :  inlining.c
<item>kill_if_already_running()  :  infcmd.c
<item>main_name()  :  symtab.c
<item>objfile_purge_solibs()  :  objfiles.c
<item>ptid_equal()  :  infrun.c
<item>reopen_exec_file()  :  corefile.c
<item>reread_symbols()  :  symfile.c
<item>set_inferior_args()  :  infcmd.c
<item>strip_bg_char()  :  infcmd.c
<item>tbreak_command()  :  breakpoint.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_flush()  :  ui-out.c
<item>ui_out_spaces()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>xfree()  :  utils.c
<item>clear_all_checkpoints(), run_command_hook(), state_change_hook(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>run_command()  :  infcmd.c
<item>start_command()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>gdb_override_async  :  target/target.c
<item>inferior_environ  :  infcmd.c
<item>inferior_ptid  :  infcmd.c
<item>null_ptid  :  infrun.c
<item>proceed_from_hand_call  :  infrun.c
<item>run_command_hook  :  top.c
<item>state_change_hook  :  top.c
<item>target_executing  :  top.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function run_no_args_command()

<p><tt>static void run_no_args_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>set_inferior_args()  :  infcmd.c
<item>xfree()  :  utils.c
<item>xstrdup()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function set_environment_command()

<p><tt>static void set_environment_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>printf_filtered()  :  utils.c
<item>savestring()  :  utils.c
<item>set_in_environ()  :  environ.c
<item>xfree()  :  utils.c
<item>error_no_arg(), strchr(), strlen()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_environ  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function signal_command()

<p><tt>static void signal_command ( const char* signum_exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_proceed_status()  :  infrun.c
<item>dont_repeat()  :  top.c
<item>error()  :  utils.c
<item>parse_and_eval_long()  :  eval.c
<item>printf_filtered()  :  utils.c
<item>proceed()  :  infrun.c
<item>error_no_arg(), state_change_hook(), target_signal_from_command(), target_signal_from_name(), target_signal_to_name()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>state_change_hook  :  top.c
<item>stop_pc  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function start_command()

<p><tt>static void start_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>have_minimal_symbols()  :  objfiles.c
<item>run_command_1()  :  infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function step_1()

<p><tt>static void step_1 ( int skip_subroutines, int single_inst, const char* count_string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>next_command()  :  infcmd.c
<item>nexti_command()  :  infcmd.c
<item>step_command()  :  infcmd.c
<item>stepi_command()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_allow_inlined_stepping  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Local Function step_1_continuation()

<p><tt>static void step_1_continuation ( struct continuation_arg* arg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_exec_cleanups()  :  utils.c
<item>step_once()  :  infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>step_once()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>stop_step  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function step_1_inlining()

<p><tt>static void step_1_inlining ( int skip_subroutines, int single_inst, const char* count_string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>async_disable_stdin()  :  event-top.c
<item>at_inlined_call_site_p()  :  inlining.c
<item>clear_proceed_status()  :  infrun.c
<item>current_inlined_subroutine_call_stack_end_pc()  :  inlining.c
<item>current_inlined_subroutine_call_stack_start_pc()  :  inlining.c
<item>current_inlined_subroutine_stack_position()  :  inlining.c
<item>current_inlined_subroutine_stack_size()  :  inlining.c
<item>do_cleanups()  :  utils.c
<item>enable_longjmp_breakpoint()  :  breakpoint.c
<item>error()  :  utils.c
<item>find_next_inlined_subroutine()  :  inlining.c
<item>find_pc_line()  :  symtab.c
<item>find_pc_line_pc_range()  :  symtab.c
<item>find_pc_partial_function()  :  blockframe.c
<item>flush_cached_frames()  :  frame.c
<item>get_current_frame()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>get_frame_type()  :  frame.c
<item>get_prev_frame()  :  frame.c
<item>identify_source_line()  :  source.c
<item>in_inlined_function_call_p()  :  inlining.c
<item>inlined_function_find_first_line()  :  inlining.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>make_exec_cleanup()  :  utils.c
<item>parse_and_eval_long()  :  eval.c
<item>print_source_lines()  :  source.c
<item>printf_filtered()  :  utils.c
<item>proceed()  :  infrun.c
<item>rest_of_line_contains_inlined_subroutine()  :  inlining.c
<item>step_into_current_inlined_subroutine()  :  inlining.c
<item>step_once()  :  infcmd.c
<item>strip_bg_char()  :  infcmd.c
<item>ui_out_text()  :  ui-out.c
<item>annotate_frame_end(), annotate_frames_invalid(), annotate_starting(), annotate_stopped(), breakpoints_changed(), stepping_command_hook()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>step_1()  :  infcmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>disable_longjmp_breakpoint_cleanup()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>annotation_level  :  stack.c
<item>current_target  :  target/target.c
<item>dwarf2_debug_inlined_stepping  :  dwarf2read.c
<item>gdb_override_async  :  target/target.c
<item>global_inlined_call_stack  :  inlining.c
<item>inlined_step_range_end  :  inlining.c
<item>step_frame_id  :  infcmd.c
<item>step_multi  :  infcmd.c
<item>step_over_calls  :  infcmd.c
<item>step_range_end  :  infcmd.c
<item>step_range_start  :  infcmd.c
<item>stepping_command_hook  :  top.c
<item>stepping_into_inlined_subroutine  :  inlining.c
<item>stepping_over_inlined_subroutine  :  infcmd.c
<item>stepping_ranges  :  infcmd.c
<item>stop_pc  :  infcmd.c
<item>stop_step  :  infcmd.c
<item>target_executing  :  top.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function step_1_no_inlining()

<p><tt>static void step_1_no_inlining ( int skip_subroutines, int single_inst, const char* count_string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>async_disable_stdin()  :  event-top.c
<item>at_inlined_call_site_p()  :  inlining.c
<item>clear_proceed_status()  :  infrun.c
<item>do_cleanups()  :  utils.c
<item>enable_longjmp_breakpoint()  :  breakpoint.c
<item>error()  :  utils.c
<item>find_pc_line_pc_range()  :  symtab.c
<item>find_pc_partial_function_no_inlined()  :  blockframe.c
<item>get_current_frame()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>make_cleanup()  :  utils.c
<item>make_exec_cleanup()  :  utils.c
<item>parse_and_eval_long()  :  eval.c
<item>printf_filtered()  :  utils.c
<item>proceed()  :  infrun.c
<item>step_once()  :  infcmd.c
<item>strip_bg_char()  :  infcmd.c
<item>stepping_command_hook()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>step_1()  :  infcmd.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>disable_longjmp_breakpoint_cleanup()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>gdb_override_async  :  target/target.c
<item>step_frame_id  :  infcmd.c
<item>step_multi  :  infcmd.c
<item>step_over_calls  :  infcmd.c
<item>step_range_end  :  infcmd.c
<item>step_range_start  :  infcmd.c
<item>stepping_command_hook  :  top.c
<item>stop_pc  :  infcmd.c
<item>stop_step  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function step_command()

<p><tt>static void step_command ( const char* count_string, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>step_1()  :  infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function unset_command()

<p><tt>static void unset_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>printf_filtered()  :  utils.c
<item>help_list()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>unsetlist
</itemize>
</descrip>

<sect1>Local Function unset_environment_command()

<p><tt>static void unset_environment_command ( const char* var, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>free_environ()  :  environ.c
<item>make_environ()  :  environ.c
<item>query()  :  utils.c
<item>unset_in_environ()  :  environ.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inferior_environ  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function until_command()

<p><tt>static void until_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>async_disable_stdin()  :  event-top.c
<item>error()  :  utils.c
<item>strip_bg_char()  :  infcmd.c
<item>until_break_command()  :  breakpoint.c
<item>until_next_command()  :  infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>gdb_override_async  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function until_next_command()

<p><tt>static void until_next_command ( int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>infcmd.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_proceed_status()  :  infrun.c
<item>error()  :  utils.c
<item>find_pc_function()  :  blockframe.c
<item>find_pc_line()  :  symtab.c
<item>get_current_frame()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>lookup_minimal_symbol_by_pc()  :  minsyms.c
<item>proceed()  :  infrun.c
<item>read_pc()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>until_command()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>step_frame_id  :  infcmd.c
<item>step_multi  :  infcmd.c
<item>step_over_calls  :  infcmd.c
<item>step_range_end  :  infcmd.c
<item>step_range_start  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function vector_info()

<p><tt>static void vector_info ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>print_vector_info()  :  infcmd.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_infcmd()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>deprecated_selected_frame  :  frame.c
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

</article>
