{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF frame.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File frame.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "regcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "user-regs.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dummy-frame.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "sentinel-frame.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "annotate.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame-unwind.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame-base.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "observer.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exceptions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <setjmp.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "top.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct frame_info\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct frame_info}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int level;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 void* prologue_cache;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const struct frame_unwind* unwind;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 int p;}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR value;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 prev_pc;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR addr;}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 int p;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 prev_func;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 int p;}\cell\cell\row
		{\s5\f1\fs20\ql\sb50\sa50 struct frame_id value;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 this_id;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const struct frame_base* base;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 void* base_cache;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct frame_info* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int prev_p;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct frame_info* prev;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable null_frame_id\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct frame_id null_frame_id\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell ax-general.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-abi.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame-base.c\cell\cell\row
\cell frame-unwind.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell gnu-v2-abi.c\cell\cell\row
\cell gnu-v3-abi.c\cell\cell\row
\cell hpacc-abi.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell m2-valprint.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell std-regs.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell trad-frame.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell user-regs.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
\cell wrapper.c\cell\cell\row
Used in:\cell allocate_value()\cell value.c\cell\row
\cell check_safe_call()\cell valops.c\cell\row
\cell clear_proceed_status()\cell infrun.c\cell\row
\cell create_sentinel_frame()\cell frame.c\cell\row
\cell frame_id_build()\cell frame.c\cell\row
\cell frame_id_build_special()\cell frame.c\cell\row
\cell frame_id_build_wild()\cell frame.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell new_root_variable()\cell varobj.c\cell\row
\cell set_raw_breakpoint()\cell breakpoint.c\cell\row
\cell step_into_function()\cell infrun.c\cell\row
\cell until_break_command()\cell breakpoint.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
\cell x86_frame_this_id()\cell target/x86-shared-tdep.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable deprecated_selected_frame\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_info* deprecated_selected_frame\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell ax-general.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-abi.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame-base.c\cell\cell\row
\cell frame-unwind.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell gnu-v2-abi.c\cell\cell\row
\cell gnu-v3-abi.c\cell\cell\row
\cell hpacc-abi.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell m2-valprint.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell std-regs.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell trad-frame.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell user-regs.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
\cell wrapper.c\cell\cell\row
Used in:\cell default_macro_scope()\cell macroscope.c\cell\row
\cell do_captured_thread_select()\cell thread.c\cell\row
\cell f77_get_dynamic_lowerbound()\cell f-valprint.c\cell\row
\cell f77_get_dynamic_upperbound()\cell f-valprint.c\cell\row
\cell finish_inlined_subroutine_command()\cell infcmd.c\cell\row
\cell float_info()\cell infcmd.c\cell\row
\cell func_command()\cell stack.c\cell\row
\cell get_frame_language()\cell stack.c\cell\row
\cell get_selected_block()\cell stack.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell info_common_command()\cell f-valprint.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell kill_command()\cell inflow.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell print_float_info()\cell infcmd.c\cell\row
\cell print_vector_info()\cell infcmd.c\cell\row
\cell registers_info()\cell infcmd.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell until_break_command()\cell breakpoint.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_of_local()\cell valops.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
\cell varobj_update()\cell varobj.c\cell\row
\cell vector_info()\cell infcmd.c\cell\row
\cell write_dollar_variable()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable backtrace_past_main\par}
{\s5\f1\fs20\ql\sb50\sa50 int backtrace_past_main\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell ax-general.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-abi.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame-base.c\cell\cell\row
\cell frame-unwind.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell gnu-v2-abi.c\cell\cell\row
\cell gnu-v3-abi.c\cell\cell\row
\cell hpacc-abi.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell m2-valprint.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell std-regs.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell trad-frame.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell user-regs.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
\cell wrapper.c\cell\cell\row
Used in:\cell _initialize_frame()\cell frame.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable frame_debug\par}
{\s5\f1\fs20\ql\sb50\sa50 int frame_debug\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell frame.c\cell\cell\row
Used in:\cell _initialize_frame()\cell frame.c\cell\row
\cell create_new_frame()\cell frame.c\cell\row
\cell create_sentinel_frame()\cell frame.c\cell\row
\cell deprecated_update_frame_base_hack()\cell frame.c\cell\row
\cell deprecated_update_frame_pc_hack()\cell frame.c\cell\row
\cell flush_cached_frames()\cell frame.c\cell\row
\cell frame_debug_got_null_frame()\cell frame.c\cell\row
\cell frame_func_unwind()\cell frame.c\cell\row
\cell frame_id_eq()\cell frame.c\cell\row
\cell frame_id_inner()\cell frame.c\cell\row
\cell frame_id_p()\cell frame.c\cell\row
\cell frame_pc_unwind()\cell frame.c\cell\row
\cell frame_register_unwind()\cell frame.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell get_prev_frame_1()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable backtrace_sanity_checks\par}
{\s5\f1\fs20\ql\sb50\sa50 int backtrace_sanity_checks\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell frame.c\cell\cell\row
Used in:\cell _initialize_frame()\cell frame.c\cell\row
\cell get_prev_frame_1()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable backtrace_past_entry\par}
{\s5\f1\fs20\ql\sb50\sa50 static int backtrace_past_entry\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_frame()\cell\cell\row
\cell get_prev_frame()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable backtrace_limit\par}
{\s5\f1\fs20\ql\sb50\sa50 static int backtrace_limit\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_frame()\cell\cell\row
\cell get_prev_frame()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable current_frame\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct frame_info* current_frame\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell flush_cached_frames()\cell\cell\row
\cell get_current_frame()\cell\cell\row
\cell get_prev_frame()\cell\cell\row
\cell unwind_to_current_frame()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable frame_cache_obstack\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct obstack frame_cache_obstack\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_frame()\cell\cell\row
\cell flush_cached_frames()\cell\cell\row
\cell frame_obstack_zalloc()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable set_backtrace_cmdlist\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct cmd_list_element* set_backtrace_cmdlist\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_frame()\cell\cell\row
\cell set_backtrace_cmd()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable show_backtrace_cmdlist\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct cmd_list_element* show_backtrace_cmdlist\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_frame()\cell\cell\row
\cell show_backtrace_cmd()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_frame ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.c\cell\cell\row
Calls: \cell observer_attach_target_changed()\cell observer.c\cell\row
\cell  _obstack_begin(), add_prefix_cmd(), add_setshow_boolean_cmd(), add_setshow_integer_cmd(), add_setshow_zinteger_cmd()\cell\cell\row
Refs Func:\cell frame_observer_target_changed()\cell frame.c\cell\row
\cell set_backtrace_cmd()\cell frame.c\cell\row
\cell show_backtrace_cmd()\cell frame.c\cell\row
\cell show_backtrace_limit()\cell frame.c\cell\row
\cell show_backtrace_past_entry()\cell frame.c\cell\row
\cell show_backtrace_past_main()\cell frame.c\cell\row
\cell show_frame_debug()\cell frame.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Refs Var:\cell backtrace_limit\cell frame.c\cell\row
\cell backtrace_past_entry\cell frame.c\cell\row
\cell backtrace_past_main\cell frame.c\cell\row
\cell backtrace_sanity_checks\cell frame.c\cell\row
\cell frame_cache_obstack\cell frame.c\cell\row
\cell frame_debug\cell frame.c\cell\row
\cell set_backtrace_cmdlist\cell frame.c\cell\row
\cell show_backtrace_cmdlist\cell frame.c\cell\row
\cell  setdebuglist, setlist, showdebuglist, showlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function create_new_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_info* create_new_frame ( CORE_ADDR addr, CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell create_sentinel_frame()\cell frame.c\cell\row
\cell deprecated_update_frame_base_hack()\cell frame.c\cell\row
\cell deprecated_update_frame_pc_hack()\cell frame.c\cell\row
\cell fprint_frame()\cell frame.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell frame_obstack_zalloc()\cell frame.c\cell\row
\cell frame_unwind_find_by_frame()\cell frame-unwind.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
Called by:\cell parse_frame_specification_1()\cell stack.c\cell\row
Refs Var:\cell current_regcache\cell regcache.c\cell\row
\cell frame_debug\cell frame.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_safe_get_selected_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_info* deprecated_safe_get_selected_frame ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell get_selected_frame()\cell frame.c\cell\row
Called by:\cell check_safe_call()\cell valops.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_update_frame_base_hack()\par}
{\s5\f1\fs20\ql\sb50\sa50 void deprecated_update_frame_base_hack ( struct frame_info* frame, CORE_ADDR base )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
Called by:\cell create_new_frame()\cell frame.c\cell\row
Refs Var:\cell frame_debug\cell frame.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deprecated_update_frame_pc_hack()\par}
{\s5\f1\fs20\ql\sb50\sa50 void deprecated_update_frame_pc_hack ( struct frame_info* frame, CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
Called by:\cell create_new_frame()\cell frame.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
Refs Var:\cell frame_debug\cell frame.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_frame_sal()\par}
{\s5\f1\fs20\ql\sb50\sa50 void find_frame_sal ( struct frame_info* frame, struct symtab_and_line* sal )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell current_inlined_subroutine_call_stack_end_pc()\cell inlining.c\cell\row
\cell find_pc_line()\cell symtab.c\cell\row
\cell get_frame_pc()\cell frame.c\cell\row
\cell get_frame_type()\cell frame.c\cell\row
\cell pc_notcurrent()\cell frame.c\cell\row
Called by:\cell frame_info()\cell stack.c\cell\row
\cell print_frame_info()\cell stack.c\cell\row
\cell set_current_sal_from_frame()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function flush_cached_frames()\par}
{\s5\f1\fs20\ql\sb50\sa50 void flush_cached_frames ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell flush_inlined_subroutine_frames()\cell inlining.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell  _obstack_begin(), annotate_frames_invalid()\cell\cell\row
Called by:\cell deprecated_current_gdbarch_select_hack()\cell gdbarch.c\cell\row
\cell finish_tfind_command()\cell tracepoint.c\cell\row
\cell frame_observer_target_changed()\cell frame.c\cell\row
\cell frame_pop()\cell frame.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell prepare_to_proceed()\cell infrun.c\cell\row
\cell reinit_frame_cache()\cell frame.c\cell\row
\cell step_1_inlining()\cell infcmd.c\cell\row
\cell step_once()\cell infcmd.c\cell\row
\cell switch_to_thread()\cell thread.c\cell\row
\cell verify_stack()\cell inlining.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  obstack_free()\cell\cell\row
Refs Var:\cell current_frame\cell frame.c\cell\row
\cell frame_cache_obstack\cell frame.c\cell\row
\cell frame_debug\cell frame.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function fprint_frame_id()\par}
{\s5\f1\fs20\ql\sb50\sa50 void fprint_frame_id ( struct ui_file* file, struct frame_id id )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell fprint_field()\cell frame.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
Called by:\cell fprint_dummy_frames()\cell dummy-frame.c\cell\row
\cell fprint_frame()\cell frame.c\cell\row
\cell frame_id_eq()\cell frame.c\cell\row
\cell frame_id_inner()\cell frame.c\cell\row
\cell frame_id_p()\cell frame.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_cache_hack()\par}
{\s5\f1\fs20\ql\sb50\sa50 void* frame_cache_hack ( struct frame_info* frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_find_by_id()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_info* frame_find_by_id ( struct frame_id id )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_id_eq()\cell frame.c\cell\row
\cell frame_id_inner()\cell frame.c\cell\row
\cell frame_id_p()\cell frame.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
Called by:\cell c_value_of_root()\cell varobj.c\cell\row
\cell check_safe_call()\cell valops.c\cell\row
\cell do_enable_breakpoint()\cell breakpoint.c\cell\row
\cell info_threads_command()\cell thread.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell restore_selected_frame()\cell infrun.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
\cell varobj_pc_in_valid_block_p()\cell varobj.c\cell\row
\cell varobj_update()\cell varobj.c\cell\row
\cell watchpoint_check()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_func_unwind()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR frame_func_unwind ( struct frame_info* fi )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell frame_unwind_address_in_block()\cell frame.c\cell\row
\cell get_pc_function_start()\cell blockframe.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
Called by:\cell dwarf2_frame_this_id()\cell dwarf2-frame.c\cell\row
\cell dwarf2_signal_frame_this_id()\cell dwarf2-frame.c\cell\row
\cell get_frame_func()\cell frame.c\cell\row
\cell x86_frame_cache()\cell target/x86-shared-tdep.c\cell\row
\cell x86_frame_prev_register()\cell target/x86-shared-tdep.c\cell\row
Refs Var:\cell frame_debug\cell frame.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_id_build()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_id frame_id_build ( CORE_ADDR stack_addr, CORE_ADDR code_addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Called by:\cell dwarf2_frame_this_id()\cell dwarf2-frame.c\cell\row
\cell dwarf2_signal_frame_this_id()\cell dwarf2-frame.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell x86_frame_this_id()\cell target/x86-shared-tdep.c\cell\row
Refs Var:\cell null_frame_id\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_id_build_special()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_id frame_id_build_special ( CORE_ADDR stack_addr, CORE_ADDR code_addr, CORE_ADDR special_addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Refs Var:\cell null_frame_id\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_id_build_wild()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_id frame_id_build_wild ( CORE_ADDR stack_addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Called by:\cell parse_frame_specification_1()\cell stack.c\cell\row
Refs Var:\cell null_frame_id\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_id_eq()\par}
{\s5\f1\fs20\ql\sb50\sa50 int frame_id_eq ( struct frame_id l, struct frame_id r )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell fprint_frame_id()\cell frame.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
Called by:\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell check_safe_call()\cell valops.c\cell\row
\cell dummy_frame_sniffer()\cell dummy-frame.c\cell\row
\cell frame_find_by_id()\cell frame.c\cell\row
\cell get_prev_frame_1()\cell frame.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell inlined_function_update_call_stack()\cell inlining.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell parse_frame_specification_1()\cell stack.c\cell\row
\cell return_command()\cell stack.c\cell\row
\cell value_of_root()\cell varobj.c\cell\row
Refs Var:\cell frame_debug\cell frame.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_id_inner()\par}
{\s5\f1\fs20\ql\sb50\sa50 int frame_id_inner ( struct frame_id l, struct frame_id r )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell fprint_frame_id()\cell frame.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell gdbarch_inner_than()\cell gdbarch.c\cell\row
Called by:\cell dummy_frame_push()\cell dummy-frame.c\cell\row
\cell frame_find_by_id()\cell frame.c\cell\row
\cell get_prev_frame_1()\cell frame.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell return_command()\cell stack.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell frame_debug\cell frame.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_id_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int frame_id_p ( struct frame_id l )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell fprint_frame_id()\cell frame.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
Called by:\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell frame_find_by_id()\cell frame.c\cell\row
\cell get_prev_frame_1()\cell frame.c\cell\row
\cell print_one_breakpoint()\cell breakpoint.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
Refs Var:\cell frame_debug\cell frame.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_map_name_to_regnum()\par}
{\s5\f1\fs20\ql\sb50\sa50 int frame_map_name_to_regnum ( struct frame_info* frame, const char* name, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell get_frame_arch()\cell frame.c\cell\row
\cell user_reg_map_name_to_regnum()\cell user-regs.c\cell\row
Called by:\cell registers_info()\cell infcmd.c\cell\row
\cell write_dollar_variable()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_map_regnum_to_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* frame_map_regnum_to_name ( struct frame_info* frame, int regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell get_frame_arch()\cell frame.c\cell\row
\cell user_reg_map_regnum_to_name()\cell user-regs.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell frame_register_unwind()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_next_hack()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_info* frame_next_hack ( struct frame_info* frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_observer_target_changed()\par}
{\s5\f1\fs20\ql\sb50\sa50 void frame_observer_target_changed ( struct target_ops* target )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell flush_cached_frames()\cell frame.c\cell\row
Used in:\cell _initialize_frame()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_obstack_zalloc()\par}
{\s5\f1\fs20\ql\sb50\sa50 void* frame_obstack_zalloc ( unsigned long size )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()\cell\cell\row
Called by:\cell create_new_frame()\cell frame.c\cell\row
\cell create_sentinel_frame()\cell frame.c\cell\row
\cell dummy_frame_sniffer()\cell dummy-frame.c\cell\row
\cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
\cell get_prev_frame_1()\cell frame.c\cell\row
\cell sentinel_frame_cache()\cell sentinel-frame.c\cell\row
\cell trad_frame_alloc_saved_regs()\cell trad-frame.c\cell\row
\cell trad_frame_cache_zalloc()\cell trad-frame.c\cell\row
\cell tramp_frame_sniffer()\cell tramp-frame.c\cell\row
\cell x86_alloc_frame_cache()\cell target/x86-shared-tdep.c\cell\row
\cell x86_initialize_frame_cache()\cell target/x86-shared-tdep.c\cell\row
Refs Var:\cell frame_cache_obstack\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_pc_unwind()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR frame_pc_unwind ( struct frame_info* this_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell frame_unwind_find_by_frame()\cell frame-unwind.c\cell\row
\cell gdbarch_unwind_pc()\cell gdbarch.c\cell\row
\cell gdbarch_unwind_pc_p()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
Called by:\cell execute_cfa_program()\cell dwarf2-frame.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell frame_unwind_address_in_block()\cell frame.c\cell\row
\cell get_frame_pc()\cell frame.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
\cell tramp_frame_sniffer()\cell tramp-frame.c\cell\row
\cell x86_frame_cache()\cell target/x86-shared-tdep.c\cell\row
\cell x86_frame_prev_register()\cell target/x86-shared-tdep.c\cell\row
\cell x86_frame_this_id()\cell target/x86-shared-tdep.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell frame_debug\cell frame.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_pop()\par}
{\s5\f1\fs20\ql\sb50\sa50 void frame_pop ( struct frame_info* this_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell flush_cached_frames()\cell frame.c\cell\row
\cell frame_save_as_regcache()\cell frame.c\cell\row
\cell get_prev_frame_1()\cell frame.c\cell\row
\cell make_cleanup_regcache_xfree()\cell regcache.c\cell\row
\cell regcache_cpy()\cell regcache.c\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell return_command()\cell stack.c\cell\row
Refs Var:\cell current_regcache\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 void frame_register ( struct frame_info* frame, int regnum, enum opt_state* optimizedp, enum lval_type* lvalp, CORE_ADDR* addrp, int* realnump, gdb_byte* bufferp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_register_unwind()\cell frame.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell dwarf_expr_read_reg()\cell dwarf2loc.c\cell\row
\cell frame_register_read()\cell frame.c\cell\row
\cell put_frame_register()\cell frame.c\cell\row
\cell value_from_register()\cell findvar.c\cell\row
\cell value_of_register()\cell findvar.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_register_read()\par}
{\s5\f1\fs20\ql\sb50\sa50 int frame_register_read ( struct frame_info* frame, int regnum, gdb_byte* myaddr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_register()\cell frame.c\cell\row
\cell register_cached()\cell regcache.c\cell\row
Called by:\cell default_print_registers_info()\cell infcmd.c\cell\row
\cell do_frame_register_read()\cell frame.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_register_unwind()\par}
{\s5\f1\fs20\ql\sb50\sa50 void frame_register_unwind ( struct frame_info* frame, int regnum, enum opt_state* optimizedp, enum lval_type* lvalp, CORE_ADDR* addrp, int* realnump, gdb_byte* bufferp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell frame_map_regnum_to_name()\cell frame.c\cell\row
\cell frame_unwind_find_by_frame()\cell frame-unwind.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell register_size()\cell regcache.c\cell\row
Called by:\cell frame_info()\cell stack.c\cell\row
\cell frame_register()\cell frame.c\cell\row
\cell frame_unwind_register()\cell frame.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell frame_debug\cell frame.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_relative_level()\par}
{\s5\f1\fs20\ql\sb50\sa50 int frame_relative_level ( struct frame_info* fi )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Called by:\cell do_captured_thread_select()\cell thread.c\cell\row
\cell do_check_is_thread_unsafe()\cell valops.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell func_sym_has_inlining()\cell inlining.c\cell\row
\cell inlined_frame_this_id()\cell inlining.c\cell\row
\cell last_inlined_call_site_filename()\cell inlining.c\cell\row
\cell print_frame()\cell stack.c\cell\row
\cell print_frame_info()\cell stack.c\cell\row
\cell print_inlined_frame()\cell inlining.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell varobj_pc_in_valid_block_p()\cell varobj.c\cell\row
\cell x86_frame_cache()\cell target/x86-shared-tdep.c\cell\row
\cell x86_frame_prev_register()\cell target/x86-shared-tdep.c\cell\row
\cell x86_frame_this_id()\cell target/x86-shared-tdep.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_save_as_regcache()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct regcache* frame_save_as_regcache ( struct frame_info* this_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell discard_cleanups()\cell utils.c\cell\row
\cell make_cleanup_regcache_xfree()\cell regcache.c\cell\row
\cell regcache_save()\cell regcache.c\cell\row
\cell regcache_xmalloc()\cell regcache.c\cell\row
Called by:\cell frame_pop()\cell frame.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
Refs Func:\cell do_frame_register_read()\cell frame.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_sp_unwind()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR frame_sp_unwind ( struct frame_info* next_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_unwind_unsigned_register()\cell frame.c\cell\row
\cell gdbarch_read_sp()\cell gdbarch.c\cell\row
\cell gdbarch_read_sp_p()\cell gdbarch.c\cell\row
\cell gdbarch_sp_regnum()\cell gdbarch.c\cell\row
\cell gdbarch_unwind_sp()\cell gdbarch.c\cell\row
\cell gdbarch_unwind_sp_p()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell get_frame_sp()\cell frame.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_unwind_address_in_block()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR frame_unwind_address_in_block ( struct frame_info* next_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_pc_unwind()\cell frame.c\cell\row
\cell get_frame_type()\cell frame.c\cell\row
Called by:\cell dwarf2_frame_base_sniffer()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_sniffer()\cell dwarf2-frame.c\cell\row
\cell frame_func_unwind()\cell frame.c\cell\row
\cell get_frame_address_in_block()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_unwind_id()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_id frame_unwind_id ( struct frame_info* next_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_unwind_id()\cell frame.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell get_frame_type()\cell frame.c\cell\row
\cell get_prev_frame_1()\cell frame.c\cell\row
Called by:\cell frame_unwind_id()\cell frame.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell parse_frame_specification_1()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_unwind_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 void frame_unwind_register ( struct frame_info* frame, int regnum, gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_register_unwind()\cell frame.c\cell\row
Called by:\cell dwarf2_frame_prev_register()\cell dwarf2-frame.c\cell\row
\cell frame_unwind_register_signed()\cell frame.c\cell\row
\cell frame_unwind_register_unsigned()\cell frame.c\cell\row
\cell frame_unwind_unsigned_register()\cell frame.c\cell\row
\cell get_frame_register()\cell frame.c\cell\row
\cell read_reg()\cell dwarf2-frame.c\cell\row
\cell trad_frame_get_prev_register()\cell trad-frame.c\cell\row
\cell x86_finalize_saved_reg_locations()\cell target/x86-shared-tdep.c\cell\row
\cell x86_frame_prev_register()\cell target/x86-shared-tdep.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_unwind_register_signed()\par}
{\s5\f1\fs20\ql\sb50\sa50 long frame_unwind_register_signed ( struct frame_info* frame, int regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell extract_signed_integer()\cell findvar.c\cell\row
\cell frame_unwind_register()\cell frame.c\cell\row
\cell get_frame_arch()\cell frame.c\cell\row
\cell register_size()\cell regcache.c\cell\row
Called by:\cell get_frame_register_signed()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_unwind_register_unsigned()\par}
{\s5\f1\fs20\ql\sb50\sa50 unsigned long frame_unwind_register_unsigned ( struct frame_info* frame, int regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell frame_unwind_register()\cell frame.c\cell\row
\cell get_frame_arch()\cell frame.c\cell\row
\cell register_size()\cell regcache.c\cell\row
Called by:\cell dwarf2_frame_prev_register()\cell dwarf2-frame.c\cell\row
\cell get_frame_register_unsigned()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function frame_unwind_unsigned_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 void frame_unwind_unsigned_register ( struct frame_info* frame, int regnum, unsigned long* val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell frame_unwind_register()\cell frame.c\cell\row
\cell get_frame_arch()\cell frame.c\cell\row
\cell register_size()\cell regcache.c\cell\row
Called by:\cell frame_sp_unwind()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_current_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_info* get_current_frame ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell create_sentinel_frame()\cell frame.c\cell\row
\cell error()\cell utils.c\cell\row
\cell  catch_exceptions()\cell\cell\row
Called by:\cell agent_command()\cell ax-gdb.c\cell\row
\cell backtrace_command_1()\cell stack.c\cell\row
\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell do_captured_thread_select()\cell thread.c\cell\row
\cell do_check_is_thread_unsafe()\cell valops.c\cell\row
\cell finish_inlined_subroutine_command()\cell infcmd.c\cell\row
\cell finish_tfind_command()\cell tracepoint.c\cell\row
\cell frame_find_by_id()\cell frame.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell inlined_function_update_call_stack()\cell inlining.c\cell\row
\cell jump_command()\cell infcmd.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell objc_handle_update()\cell objc-lang.c\cell\row
\cell parse_frame_specification_1()\cell stack.c\cell\row
\cell prepare_to_proceed()\cell infrun.c\cell\row
\cell print_frame()\cell stack.c\cell\row
\cell proceed()\cell infrun.c\cell\row
\cell re_exec_1()\cell infcmd.c\cell\row
\cell re_exec_once()\cell infcmd.c\cell\row
\cell read_sp()\cell regcache.c\cell\row
\cell reinit_frame_cache()\cell frame.c\cell\row
\cell resolve_msgsend()\cell objc-lang.c\cell\row
\cell resolve_msgsend_stret()\cell objc-lang.c\cell\row
\cell resolve_msgsend_super()\cell objc-lang.c\cell\row
\cell resolve_msgsend_super_stret()\cell objc-lang.c\cell\row
\cell resolve_newruntime_objc_msgsend()\cell objc-lang.c\cell\row
\cell resolve_newruntime_objc_msgsendsuper()\cell objc-lang.c\cell\row
\cell restore_current_thread()\cell thread.c\cell\row
\cell restore_inferior_status()\cell infrun.c\cell\row
\cell return_command()\cell stack.c\cell\row
\cell step_1_inlining()\cell infcmd.c\cell\row
\cell step_1_no_inlining()\cell infcmd.c\cell\row
\cell step_once()\cell infcmd.c\cell\row
\cell switch_to_thread()\cell thread.c\cell\row
\cell trace_find_line_command()\cell tracepoint.c\cell\row
\cell until_next_command()\cell infcmd.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell watchpoint_check()\cell breakpoint.c\cell\row
Refs Func:\cell unwind_to_current_frame()\cell frame.c\cell\row
Refs Var:\cell current_frame\cell frame.c\cell\row
\cell current_regcache\cell regcache.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_address_in_block()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR get_frame_address_in_block ( struct frame_info* this_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_unwind_address_in_block()\cell frame.c\cell\row
Called by:\cell backtrace_command_1()\cell stack.c\cell\row
\cell block_innermost_frame()\cell blockframe.c\cell\row
\cell get_frame_block()\cell blockframe.c\cell\row
\cell get_frame_language()\cell stack.c\cell\row
\cell print_frame()\cell stack.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_arch()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct gdbarch* get_frame_arch ( struct frame_info* this_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Called by:\cell dummy_frame_sniffer()\cell dummy-frame.c\cell\row
\cell dwarf2_frame_cache()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_prev_register()\cell dwarf2-frame.c\cell\row
\cell dwarf2_frame_sniffer()\cell dwarf2-frame.c\cell\row
\cell execute_cfa_program()\cell dwarf2-frame.c\cell\row
\cell frame_base_find_by_frame()\cell frame-base.c\cell\row
\cell frame_map_name_to_regnum()\cell frame.c\cell\row
\cell frame_map_regnum_to_name()\cell frame.c\cell\row
\cell frame_unwind_find_by_frame()\cell frame-unwind.c\cell\row
\cell frame_unwind_register_signed()\cell frame.c\cell\row
\cell frame_unwind_register_unsigned()\cell frame.c\cell\row
\cell frame_unwind_unsigned_register()\cell frame.c\cell\row
\cell inlined_frame_this_id()\cell inlining.c\cell\row
\cell put_frame_register()\cell frame.c\cell\row
\cell read_reg()\cell dwarf2-frame.c\cell\row
\cell sentinel_frame_prev_pc()\cell sentinel-frame.c\cell\row
\cell trad_frame_get_prev_register()\cell trad-frame.c\cell\row
\cell value_of_user_reg()\cell user-regs.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_args_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR get_frame_args_address ( struct frame_info* fi )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_base_find_by_frame()\cell frame-base.c\cell\row
\cell get_frame_type()\cell frame.c\cell\row
Called by:\cell frame_info()\cell stack.c\cell\row
\cell print_frame_nameless_args()\cell stack.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_base()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR get_frame_base ( struct frame_info* fi )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell get_frame_id()\cell frame.c\cell\row
Called by:\cell default_frame_base_address()\cell frame-base.c\cell\row
\cell f77_get_dynamic_lowerbound()\cell f-valprint.c\cell\row
\cell f77_get_dynamic_upperbound()\cell f-valprint.c\cell\row
\cell finish_tfind_command()\cell tracepoint.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell print_frame()\cell stack.c\cell\row
\cell print_frame_info()\cell stack.c\cell\row
\cell print_inlined_frame()\cell inlining.c\cell\row
\cell value_of_builtin_frame_reg()\cell std-regs.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_base_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR get_frame_base_address ( struct frame_info* fi )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_base_find_by_frame()\cell frame-base.c\cell\row
\cell get_frame_type()\cell frame.c\cell\row
Called by:\cell find_frame_addr_in_frame_chain()\cell varobj.c\cell\row
\cell value_of_builtin_frame_fp_reg()\cell std-regs.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_func()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR get_frame_func ( struct frame_info* fi )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_func_unwind()\cell frame.c\cell\row
Called by:\cell inside_entry_func()\cell frame.c\cell\row
\cell inside_main_func()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_id()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_id get_frame_id ( struct frame_info* fi )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell fprint_frame_id()\cell frame.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell frame_unwind_find_by_frame()\cell frame-unwind.c\cell\row
Called by:\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell check_safe_call()\cell valops.c\cell\row
\cell do_enable_breakpoint()\cell breakpoint.c\cell\row
\cell finish_command()\cell infcmd.c\cell\row
\cell finish_inlined_subroutine_command()\cell infcmd.c\cell\row
\cell frame_find_by_id()\cell frame.c\cell\row
\cell frame_unwind_id()\cell frame.c\cell\row
\cell get_frame_base()\cell frame.c\cell\row
\cell get_prev_frame_1()\cell frame.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell info_threads_command()\cell thread.c\cell\row
\cell inlined_function_update_call_stack()\cell inlining.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell insert_step_resume_breakpoint_at_frame()\cell infrun.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell parse_frame_specification_1()\cell stack.c\cell\row
\cell re_exec_1()\cell infcmd.c\cell\row
\cell re_exec_once()\cell infcmd.c\cell\row
\cell return_command()\cell stack.c\cell\row
\cell save_inferior_status()\cell infrun.c\cell\row
\cell step_1_inlining()\cell infcmd.c\cell\row
\cell step_1_no_inlining()\cell infcmd.c\cell\row
\cell step_once()\cell infcmd.c\cell\row
\cell until_break_command()\cell breakpoint.c\cell\row
\cell until_next_command()\cell infcmd.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell value_from_register()\cell findvar.c\cell\row
\cell value_of_register()\cell findvar.c\cell\row
\cell value_of_user_reg()\cell user-regs.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
\cell varobj_update()\cell varobj.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
Refs Var:\cell frame_debug\cell frame.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell null_frame_id\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_locals_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR get_frame_locals_address ( struct frame_info* fi )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_base_find_by_frame()\cell frame-base.c\cell\row
\cell get_frame_type()\cell frame.c\cell\row
Called by:\cell frame_info()\cell stack.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_memory()\par}
{\s5\f1\fs20\ql\sb50\sa50 void get_frame_memory ( struct frame_info* this_frame, CORE_ADDR addr, gdb_byte* buf, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell read_memory()\cell corefile.c\cell\row
Called by:\cell trad_frame_get_prev_register()\cell trad-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_memory_signed()\par}
{\s5\f1\fs20\ql\sb50\sa50 long get_frame_memory_signed ( struct frame_info* this_frame, CORE_ADDR addr, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell read_memory_integer()\cell corefile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_memory_unsigned()\par}
{\s5\f1\fs20\ql\sb50\sa50 unsigned long get_frame_memory_unsigned ( struct frame_info* this_frame, CORE_ADDR addr, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell read_memory_unsigned_integer()\cell corefile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_pc()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR get_frame_pc ( struct frame_info* frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_pc_unwind()\cell frame.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell agent_command()\cell ax-gdb.c\cell\row
\cell default_macro_scope()\cell macroscope.c\cell\row
\cell do_check_is_thread_unsafe()\cell valops.c\cell\row
\cell dwarf_expr_frame_base()\cell dwarf2loc.c\cell\row
\cell find_frame_sal()\cell frame.c\cell\row
\cell finish_command()\cell infcmd.c\cell\row
\cell finish_inlined_subroutine_command()\cell infcmd.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell func_command()\cell stack.c\cell\row
\cell func_sym_has_inlining()\cell inlining.c\cell\row
\cell get_frame_language()\cell stack.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
\cell info_common_command()\cell f-valprint.c\cell\row
\cell insert_step_resume_breakpoint_at_frame()\cell infrun.c\cell\row
\cell loclist_read_variable()\cell dwarf2loc.c\cell\row
\cell print_frame()\cell stack.c\cell\row
\cell print_frame_info()\cell stack.c\cell\row
\cell print_frame_label_vars()\cell stack.c\cell\row
\cell print_inlined_frame()\cell inlining.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell trace_find_line_command()\cell tracepoint.c\cell\row
\cell until_break_command()\cell breakpoint.c\cell\row
\cell value_of_builtin_frame_pc_reg()\cell std-regs.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
\cell varobj_pc_in_valid_block_p()\cell varobj.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 void get_frame_register ( struct frame_info* frame, int regnum, gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_unwind_register()\cell frame.c\cell\row
Called by:\cell dwarf2_evaluate_loc_desc()\cell dwarf2loc.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_register_signed()\par}
{\s5\f1\fs20\ql\sb50\sa50 long get_frame_register_signed ( struct frame_info* frame, int regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_unwind_register_signed()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_register_unsigned()\par}
{\s5\f1\fs20\ql\sb50\sa50 unsigned long get_frame_register_unsigned ( struct frame_info* frame, int regnum )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_unwind_register_unsigned()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_sp()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR get_frame_sp ( struct frame_info* this_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_sp_unwind()\cell frame.c\cell\row
Called by:\cell read_sp()\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_frame_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum frame_type get_frame_type ( struct frame_info* frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_unwind_find_by_frame()\cell frame-unwind.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell do_captured_thread_select()\cell thread.c\cell\row
\cell find_frame_sal()\cell frame.c\cell\row
\cell frame_unwind_address_in_block()\cell frame.c\cell\row
\cell frame_unwind_id()\cell frame.c\cell\row
\cell get_frame_args_address()\cell frame.c\cell\row
\cell get_frame_base_address()\cell frame.c\cell\row
\cell get_frame_locals_address()\cell frame.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
\cell get_prev_frame_1()\cell frame.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell pc_notcurrent()\cell frame.c\cell\row
\cell print_frame()\cell stack.c\cell\row
\cell print_frame_info()\cell stack.c\cell\row
\cell return_command()\cell stack.c\cell\row
\cell step_1_inlining()\cell infcmd.c\cell\row
\cell step_once()\cell infcmd.c\cell\row
\cell x86_frame_cache()\cell target/x86-shared-tdep.c\cell\row
\cell x86_frame_this_id()\cell target/x86-shared-tdep.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_next_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_info* get_next_frame ( struct frame_info* this_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Called by:\cell find_relative_frame()\cell stack.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
\cell pc_notcurrent()\cell frame.c\cell\row
\cell print_frame()\cell stack.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_prev_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_info* get_prev_frame ( struct frame_info* this_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell frame_debug_got_null_frame()\cell frame.c\cell\row
\cell frame_pc_unwind()\cell frame.c\cell\row
\cell get_frame_pc()\cell frame.c\cell\row
\cell get_frame_type()\cell frame.c\cell\row
\cell get_next_frame()\cell frame.c\cell\row
\cell get_prev_frame_1()\cell frame.c\cell\row
\cell inside_entry_func()\cell frame.c\cell\row
\cell inside_main_func()\cell frame.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_minimal_symbol_by_pc()\cell minsyms.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell backtrace_command_1()\cell stack.c\cell\row
\cell block_innermost_frame()\cell blockframe.c\cell\row
\cell default_frame_base_address()\cell frame-base.c\cell\row
\cell do_check_is_thread_unsafe()\cell valops.c\cell\row
\cell find_frame_addr_in_frame_chain()\cell varobj.c\cell\row
\cell find_relative_frame()\cell stack.c\cell\row
\cell finish_command()\cell infcmd.c\cell\row
\cell finish_inlined_subroutine_command()\cell infcmd.c\cell\row
\cell frame_find_by_id()\cell frame.c\cell\row
\cell frame_info()\cell stack.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell parse_frame_specification_1()\cell stack.c\cell\row
\cell step_1_inlining()\cell infcmd.c\cell\row
\cell step_once()\cell infcmd.c\cell\row
\cell until_break_command()\cell breakpoint.c\cell\row
\cell unwind_to_current_frame()\cell frame.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
\cell x86_frame_this_id()\cell target/x86-shared-tdep.c\cell\row
Refs Var:\cell backtrace_limit\cell frame.c\cell\row
\cell backtrace_past_entry\cell frame.c\cell\row
\cell backtrace_past_main\cell frame.c\cell\row
\cell current_frame\cell frame.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_selected_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct frame_info* get_selected_frame ( const char* message )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell select_frame()\cell frame.c\cell\row
Called by:\cell args_info()\cell stack.c\cell\row
\cell catch_info()\cell stack.c\cell\row
\cell current_frame_command()\cell stack.c\cell\row
\cell deprecated_safe_get_selected_frame()\cell frame.c\cell\row
\cell do_enable_breakpoint()\cell breakpoint.c\cell\row
\cell down_command()\cell stack.c\cell\row
\cell down_silently_base()\cell stack.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell finish_command()\cell infcmd.c\cell\row
\cell finish_tfind_command()\cell tracepoint.c\cell\row
\cell frame_command()\cell stack.c\cell\row
\cell info_threads_command()\cell thread.c\cell\row
\cell kill_command()\cell inflow.c\cell\row
\cell locals_info()\cell stack.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell parse_frame_specification_1()\cell stack.c\cell\row
\cell return_command()\cell stack.c\cell\row
\cell save_inferior_status()\cell infrun.c\cell\row
\cell up_command()\cell stack.c\cell\row
\cell up_silently_base()\cell stack.c\cell\row
\cell value_of_this()\cell valops.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell deprecated_selected_frame\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function inlined_frame_prev_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 void inlined_frame_prev_register ( struct frame_info* next_frame, void** this_prologue_cache, int prev_regnum, enum opt_state* optimized, enum lval_type* lvalp, CORE_ADDR* addrp, int* realnump, gdb_byte* valuep )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell inlining.h\cell\cell\row
Used in:\cell inlining.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function inside_main_func()\par}
{\s5\f1\fs20\ql\sb50\sa50 int inside_main_func ( struct frame_info* this_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell gdbarch_convert_from_func_ptr_addr()\cell gdbarch.c\cell\row
\cell get_frame_func()\cell frame.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell main_name()\cell symtab.c\cell\row
Called by:\cell get_prev_frame()\cell frame.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function put_frame_register()\par}
{\s5\f1\fs20\ql\sb50\sa50 void put_frame_register ( struct frame_info* frame, int regnum, const gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell frame_register()\cell frame.c\cell\row
\cell get_frame_arch()\cell frame.c\cell\row
\cell regcache_cooked_write()\cell regcache.c\cell\row
\cell register_size()\cell regcache.c\cell\row
\cell write_memory()\cell corefile.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell value_assign()\cell valops.c\cell\row
Refs Var:\cell current_regcache\cell regcache.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function refine_prologue_limit()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR refine_prologue_limit ( CORE_ADDR pc, CORE_ADDR lim_pc, int max_skip_non_prologue_insns )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell find_pc_line()\cell symtab.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function reinit_frame_cache()\par}
{\s5\f1\fs20\ql\sb50\sa50 void reinit_frame_cache ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell flush_cached_frames()\cell frame.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell ptid_get_pid()\cell infrun.c\cell\row
\cell select_frame()\cell frame.c\cell\row
Called by:\cell add_kext_command()\cell symfile.c\cell\row
\cell add_symbol_file_command()\cell symfile.c\cell\row
\cell c_value_of_root()\cell varobj.c\cell\row
\cell generic_mourn_inferior()\cell target/target.c\cell\row
\cell remove_symbol_file_command()\cell symfile.c\cell\row
\cell reread_symbols_for_objfile()\cell symfile.c\cell\row
\cell solib_add()\cell solib.c\cell\row
\cell symbol_file_add_from_memory()\cell symfile-mem.c\cell\row
\cell symbol_file_add_main_1()\cell symfile.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell watchpoint_check()\cell breakpoint.c\cell\row
Refs Var:\cell inferior_ptid\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function safe_frame_unwind_memory()\par}
{\s5\f1\fs20\ql\sb50\sa50 int safe_frame_unwind_memory ( struct frame_info* this_frame, CORE_ADDR addr, gdb_byte* buf, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell deprecated_read_memory_nobpt()\cell breakpoint.c\cell\row
Called by:\cell tramp_frame_start()\cell tramp-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function select_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 void select_frame ( struct frame_info* fi )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.h\cell\cell\row
Calls: \cell find_pc_function()\cell blockframe.c\cell\row
\cell find_pc_symtab()\cell symtab.c\cell\row
\cell frame_relative_level()\cell frame.c\cell\row
\cell get_frame_address_in_block()\cell frame.c\cell\row
\cell get_frame_pc()\cell frame.c\cell\row
\cell set_language()\cell language.c\cell\row
\cell  deprecated_selected_frame_level_changed_hook(), frame_changed_hook()\cell\cell\row
Called by:\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell c_value_of_root()\cell varobj.c\cell\row
\cell check_safe_call()\cell valops.c\cell\row
\cell do_captured_thread_select()\cell thread.c\cell\row
\cell do_enable_breakpoint()\cell breakpoint.c\cell\row
\cell down_silently_base()\cell stack.c\cell\row
\cell finish_tfind_command()\cell tracepoint.c\cell\row
\cell flush_cached_frames()\cell frame.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell info_threads_command()\cell thread.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell normal_stop()\cell infrun.c\cell\row
\cell prepare_to_proceed()\cell infrun.c\cell\row
\cell reinit_frame_cache()\cell frame.c\cell\row
\cell restore_inferior_status()\cell infrun.c\cell\row
\cell restore_selected_frame()\cell infrun.c\cell\row
\cell select_and_print_frame()\cell stack.c\cell\row
\cell select_frame_command()\cell stack.c\cell\row
\cell switch_to_thread()\cell thread.c\cell\row
\cell up_silently_base()\cell stack.c\cell\row
\cell value_assign()\cell valops.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
\cell varobj_update()\cell varobj.c\cell\row
\cell watchpoint_check()\cell breakpoint.c\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\cell currently_inside_optimized_code\cell infrun.c\cell\row
\cell deprecated_selected_frame\cell frame.c\cell\row
\cell deprecated_selected_frame_level_changed_hook\cell stack.c\cell\row
\cell frame_changed_hook\cell top.c\cell\row
\cell language_mode\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function create_sentinel_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct frame_info* create_sentinel_frame ( struct regcache* regcache )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprint_frame()\cell frame.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell frame_obstack_zalloc()\cell frame.c\cell\row
\cell sentinel_frame_cache()\cell sentinel-frame.c\cell\row
Called by:\cell create_new_frame()\cell frame.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
Refs Var:\cell frame_debug\cell frame.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell null_frame_id\cell frame.c\cell\row
\cell sentinel_frame_unwind\cell sentinel-frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_frame_register_read()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int do_frame_register_read ( void* src, int regnum, gdb_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell frame_register_read()\cell frame.c\cell\row
Used in:\cell frame_save_as_regcache()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function fprint_field()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void fprint_field ( struct ui_file* file, const char* name, int p, CORE_ADDR addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
Called by:\cell fprint_frame_id()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function fprint_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void fprint_frame ( struct ui_file* file, struct frame_info* fi )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprint_frame_id()\cell frame.c\cell\row
\cell fprint_frame_type()\cell frame.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell gdb_print_host_address()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
Called by:\cell create_new_frame()\cell frame.c\cell\row
\cell create_sentinel_frame()\cell frame.c\cell\row
\cell get_prev_frame_1()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function fprint_frame_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void fprint_frame_type ( struct ui_file* file, enum frame_type type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Called by:\cell fprint_frame()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function frame_debug_got_null_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void frame_debug_got_null_frame ( struct ui_file* file, struct frame_info* this_frame, const char* reason )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
Called by:\cell get_prev_frame()\cell frame.c\cell\row
Refs Var:\cell frame_debug\cell frame.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_prev_frame_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct frame_info* get_prev_frame_1 ( struct frame_info* this_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell frame.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell fprint_frame()\cell frame.c\cell\row
\cell fprintf_unfiltered()\cell utils.c\cell\row
\cell frame_id_eq()\cell frame.c\cell\row
\cell frame_id_inner()\cell frame.c\cell\row
\cell frame_id_p()\cell frame.c\cell\row
\cell frame_obstack_zalloc()\cell frame.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell get_frame_type()\cell frame.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell frame_pop()\cell frame.c\cell\row
\cell frame_unwind_id()\cell frame.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
Refs Var:\cell backtrace_sanity_checks\cell frame.c\cell\row
\cell frame_debug\cell frame.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function inside_entry_func()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int inside_entry_func ( struct frame_info* this_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell entry_point_address()\cell objfiles.c\cell\row
\cell get_frame_func()\cell frame.c\cell\row
Called by:\cell get_prev_frame()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function pc_notcurrent()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int pc_notcurrent ( struct frame_info* frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell get_frame_type()\cell frame.c\cell\row
\cell get_next_frame()\cell frame.c\cell\row
Called by:\cell find_frame_sal()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_backtrace_cmd()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_backtrace_cmd ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  help_list()\cell\cell\row
Used in:\cell _initialize_frame()\cell frame.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\cell set_backtrace_cmdlist\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_backtrace_cmd()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_backtrace_cmd ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  cmd_show_list()\cell\cell\row
Used in:\cell _initialize_frame()\cell frame.c\cell\row
Refs Var:\cell show_backtrace_cmdlist\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_backtrace_limit()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_backtrace_limit ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_frame()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_backtrace_past_entry()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_backtrace_past_entry ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_frame()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_backtrace_past_main()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_backtrace_past_main ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_frame()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_frame_debug()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_frame_debug ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_frame()\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function unwind_to_current_frame()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int unwind_to_current_frame ( struct ui_out* ui_out, void* args )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell get_prev_frame()\cell frame.c\cell\row
Used in:\cell get_current_frame()\cell frame.c\cell\row
Refs Var:\cell current_frame\cell frame.c\cell\row
\intbl0
}
