<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF source.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for source.c of gdb.cxref.
<author>cxref

<sect>File source.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;source.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;top.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_stat.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;sys/stat.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;fcntl.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;annotate.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;linespec.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/filenames.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/hashtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;completer.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../readline/readline.h&quot;</tt>
<itemize>
<item><tt>#include &lt;../readline/rlstdc.h&gt;</tt>
<item><tt>#include &lt;../readline/rltypedefs.h&gt;</tt>
<item><tt>#include &lt;../readline/keymaps.h&gt;</tt>
<item><tt>#include &lt;../readline/tilde.h&gt;</tt>
</itemize>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define O_BINARY 0</tt><newline>
<p>
<tt>#define OPEN_MODE</tt><newline>
<p>
<tt>#define FDOPEN_MODE FOPEN_RB</tt><newline>
<p>
<tt>#define cdir_len 5</tt><newline>

<sect1>Global Variable source_path

<p>
<tt>char* source_path</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bcache.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>charset.c
<item>cli-out.c
<item>coff-pe-read.c
<item>coffread.c
<item>complaints.c
<item>completer.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>demangle.c
<item>dictionary.c
<item>disasm.c
<item>doublest.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>environ.c
<item>eval.c
<item>event-loop.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>interps.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod-cisco.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macrocmd.c
<item>macroexp.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>observer.c
<item>osabi.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>reggroups.c
<item>remote-fileio.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>ser-base.c
<item>ser-unix.c
<item>serial.c
<item>solib-null.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>ui-file.c
<item>ui-out.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>directory_command()  :  source.c
<item>find_and_open_source()  :  source.c
<item>init_source_path()  :  source.c
<item>show_directories()  :  source.c
<item>source_full_path_of()  :  source.c
</itemize>
</descrip>

<sect1>Global Variable lines_to_list

<p>
<tt>int lines_to_list</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>source.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_source()  :  source.c
<item>forward_search_command()  :  source.c
<item>get_lines_to_list()  :  source.c
<item>reverse_search_command()  :  source.c
<item>select_source_symtab()  :  source.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>current_source_symtab</bf><newline>
<tt>static struct symtab* current_source_symtab</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_source()
<item>clear_current_source_symtab_and_line()
<item>forward_search_command()
<item>get_current_source_symtab_and_line()
<item>identify_source_line()
<item>line_info()
<item>print_source_lines_base()
<item>reverse_search_command()
<item>select_source_symtab()
<item>set_current_source_symtab_and_line()
<item>set_default_source_symtab_and_line()
<item>source_info()
</itemize>
</descrip>
<p>
<bf>current_source_line</bf><newline>
<tt>static int current_source_line</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>clear_current_source_symtab_and_line()
<item>forward_search_command()
<item>get_current_source_symtab_and_line()
<item>identify_source_line()
<item>print_source_lines_base()
<item>reverse_search_command()
<item>select_source_symtab()
<item>set_current_source_symtab_and_line()
</itemize>
</descrip>
<p>
<bf>pathname_substitutions</bf><newline>
<tt>static char* pathname_substitutions</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_source()
<item>set_pathname_substitution()
<item>show_pathname_substitutions()
</itemize>
</descrip>
<p>
<bf>pathname_substitutions_argv</bf><newline>
<tt>static char** pathname_substitutions_argv</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_one_pathname_substitution()
<item>open_source_file_fullpath()
<item>set_pathname_substitution()
<item>show_pathname_substitutions()
</itemize>
</descrip>
<p>
<bf>last_line_listed</bf><newline>
<tt>static int last_line_listed</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>forward_search_command()
<item>identify_source_line()
<item>line_info()
<item>print_source_lines_base()
<item>reverse_search_command()
</itemize>
</descrip>
<p>
<bf>first_line_listed</bf><newline>
<tt>static int first_line_listed</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>get_first_line_listed()
<item>identify_source_line()
<item>print_source_lines_base()
</itemize>
</descrip>
<p>
<bf>last_source_visited</bf><newline>
<tt>static struct symtab* last_source_visited</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>directory_command()
<item>init_last_source_visited()
<item>print_source_lines_base()
</itemize>
</descrip>
<p>
<bf>last_source_error</bf><newline>
<tt>static int last_source_error</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>print_source_lines_base()
<item>set_pathname_substitution()
</itemize>
</descrip>

<sect1>Global Function _initialize_source()

<p><tt>void _initialize_source ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>init_source_path()  :  source.c
<item>re_set_syntax()  :  utils.c
<item>add_cmd(), add_com(), add_com_alias(), add_info(), add_setshow_integer_cmd(), add_setshow_string_cmd(), set_cmd_completer()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>directory_command()  :  source.c
<item>filename_completer()  :  completer.c
<item>forward_search_command()  :  source.c
<item>line_info()  :  source.c
<item>reverse_search_command()  :  source.c
<item>set_pathname_substitution()  :  source.c
<item>show_directories()  :  source.c
<item>show_lines_to_list()  :  source.c
<item>show_pathname_substitutions()  :  source.c
<item>source_info()  :  source.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_source_symtab  :  source.c
<item>dbx_commands  :  main.c
<item>lines_to_list  :  source.c
<item>pathname_substitutions  :  source.c
<item>xdb_commands  :  main.c
<item>cmdlist, setlist, showlist
</itemize>
</descrip>

<sect1>Global Function add_one_pathname_substitution()

<p><tt>void add_one_pathname_substitution ( const char* oldpath, const char* newpath )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>strcmp(), xstrdup()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>pathname_substitutions_argv  :  source.c
</itemize>
</descrip>

<sect1>Global Function add_path()

<p><tt>void add_path ( const char* dirname, char** which_path, int parse_separators )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>fprintf_unfiltered()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>print_sys_errmsg()  :  utils.c
<item>savestring()  :  utils.c
<item>warning()  :  utils.c
<item>xfree()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __error(), __inline_strcpy_chk(), concat(), stat(), strchr(), strlen(), strncmp(), tilde_expand(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>mod_path()  :  source.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_directory  :  top.c
<item>gdb_stderr  :  main.c
</itemize>
</descrip>

<sect1>Global Function clear_current_source_symtab_and_line()

<p><tt>void clear_current_source_symtab_and_line ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>clear_symtab_users()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_source_line  :  source.c
<item>current_source_symtab  :  source.c
</itemize>
</descrip>

<sect1>Global Function convert_sal()

<p><tt>void convert_sal ( struct symtab_and_line* sal )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_source_lines()  :  source.c
<item>open_source_file()  :  source.c
<item>close()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_pc_sect_line()  :  symtab.c
</itemize>
</descrip>

<sect1>Global Function directory_command()

<p><tt>void directory_command ( const char* dirname, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dont_repeat()  :  top.c
<item>forget_cached_source_info()  :  source.c
<item>init_source_path()  :  source.c
<item>mod_path()  :  source.c
<item>query()  :  utils.c
<item>show_directories()  :  source.c
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_source()  :  source.c
<item>captured_main()  :  main.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>last_source_visited  :  source.c
<item>source_path  :  source.c
</itemize>
</descrip>

<sect1>Global Function find_and_open_source()

<p><tt>int find_and_open_source ( struct objfile* objfile, const char* filename, const char* dirname, char** fullname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>open_source_file_fullpath()  :  source.c
<item>openp()  :  source.c
<item>xfree()  :  utils.c
<item>__builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), __inline_strncpy_chk(), lbasename(), open(), strlen(), strstr(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>open_source_file()  :  source.c
<item>psymtab_to_fullname()  :  source.c
<item>symtab_to_fullname()  :  source.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>source_path  :  source.c
</itemize>
</descrip>

<sect1>Global Function find_source_lines()

<p><tt>void find_source_lines ( struct symtab* s, int desc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>myread()  :  utils.c
<item>perror_with_name()  :  utils.c
<item>warning()  :  utils.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>bfd_get_mtime(), fstat()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>convert_sal()  :  source.c
<item>find_line_pc_range()  :  symtab.c
<item>forward_search_command()  :  source.c
<item>get_filename_and_charpos()  :  source.c
<item>print_source_lines_base()  :  source.c
<item>reverse_search_command()  :  source.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>exec_bfd
</itemize>
</descrip>

<sect1>Global Function forget_cached_source_info()

<p><tt>void forget_cached_source_info ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>psymtab_get_first()  :  objfiles.c
<item>psymtab_get_next()  :  objfiles.c
<item>symtab_get_first()  :  objfiles.c
<item>symtab_get_next()  :  objfiles.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>directory_command()  :  source.c
<item>init_source_path()  :  source.c
<item>set_pathname_substitution()  :  source.c
</itemize>
</descrip>

<sect1>Global Function get_current_source_symtab_and_line()

<p><tt>struct symtab_and_line get_current_source_symtab_and_line ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>backtrace_command_1()  :  stack.c
<item>decode_line_spec()  :  symtab.c
<item>default_macro_scope()  :  macroscope.c
<item>in_eval_c()  :  scm-lang.c
<item>initialize_defaults()  :  linespec.c
<item>parse_breakpoint_sals()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_source_line  :  source.c
<item>current_source_symtab  :  source.c
</itemize>
</descrip>

<sect1>Global Function get_first_line_listed()

<p><tt>int get_first_line_listed ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>first_line_listed  :  source.c
</itemize>
</descrip>

<sect1>Global Function get_lines_to_list()

<p><tt>int get_lines_to_list ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>set_current_sal_from_frame()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>lines_to_list  :  source.c
</itemize>
</descrip>

<sect1>Global Function identify_source_line()

<p><tt>int identify_source_line ( struct symtab* s, int line, int mid_statement, CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_filename_and_charpos()  :  source.c
<item>annotate_source()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>line_info()  :  source.c
<item>print_frame_info()  :  stack.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_source_line  :  source.c
<item>current_source_symtab  :  source.c
<item>first_line_listed  :  source.c
<item>last_line_listed  :  source.c
</itemize>
</descrip>

<sect1>Global Function init_last_source_visited()

<p><tt>void init_last_source_visited ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>last_source_visited  :  source.c
</itemize>
</descrip>

<sect1>Global Function init_source_path()

<p><tt>void init_source_path ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>forget_cached_source_info()  :  source.c
<item>__builtin___snprintf_chk(), __builtin_object_size(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_source()  :  source.c
<item>directory_command()  :  source.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>source_path  :  source.c
</itemize>
</descrip>

<sect1>Global Function mod_path()

<p><tt>void mod_path ( const char* dirname, char** which_path )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_path()  :  source.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>directory_command()  :  source.c
<item>path_command()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function open_source_file()

<p><tt>int open_source_file ( struct symtab* s )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_and_open_source()  :  source.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>convert_sal()  :  source.c
<item>find_line_pc_range()  :  symtab.c
<item>forward_search_command()  :  source.c
<item>get_filename_and_charpos()  :  source.c
<item>print_source_lines_base()  :  source.c
<item>reverse_search_command()  :  source.c
</itemize>
</descrip>

<sect1>Global Function open_source_file_fullpath()

<p><tt>int open_source_file_fullpath ( const char* dirname, const char* filename, char** fullname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>gdb_check_fatal()  :  utils.c
<item>openp()  :  source.c
<item>__builtin___memmove_chk(), __builtin___snprintf_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memmove_chk(), strlen(), strncmp(), strstr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_and_open_source()  :  source.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>pathname_substitutions_argv  :  source.c
</itemize>
</descrip>

<sect1>Global Function openp()

<p><tt>int openp ( const char* path, int opts, const char* string, int mode, int prot, char** filename_opened )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>is_regular_file()  :  source.c
<item>xfree()  :  utils.c
<item>xfullpath()  :  utils.c
<item>__builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin___strncpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), __inline_strncpy_chk(), concat(), file_exists_p(), open(), strchr(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_and_open_source()  :  source.c
<item>open_source_file_fullpath()  :  source.c
<item>solib_open()  :  solib.c
<item>source_full_path_of()  :  source.c
<item>symfile_bfd_open()  :  symfile.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_directory  :  top.c
</itemize>
</descrip>

<sect1>Global Function print_source_lines()

<p><tt>void print_source_lines ( struct symtab* s, int line, int nlines, int noerror )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>print_source_lines_base()  :  source.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_mixed_source_and_assembly()  :  disasm.c
<item>forward_search_command()  :  source.c
<item>print_frame_info()  :  stack.c
<item>reverse_search_command()  :  source.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function psymtab_to_fullname()

<p><tt>char* psymtab_to_fullname ( struct partial_symtab* ps )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_and_open_source()  :  source.c
<item>close()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>lookup_partial_symtab_all()  :  symtab.c
<item>sources_info()  :  symtab.c
</itemize>
</descrip>

<sect1>Global Function select_source_symtab()

<p><tt>void select_source_symtab ( struct symtab* s )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symtab.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>decode_line_spec()  :  symtab.c
<item>error()  :  utils.c
<item>internal_error()  :  utils.c
<item>lookup_symbol()  :  symtab.c
<item>main_name()  :  symtab.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>psymtab_get_first()  :  objfiles.c
<item>psymtab_get_next()  :  objfiles.c
<item>psymtab_to_symtab()  :  symfile.c
<item>symtab_get_first()  :  objfiles.c
<item>symtab_get_next()  :  objfiles.c
<item>xfree()  :  utils.c
<item>strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>forward_search_command()  :  source.c
<item>reverse_search_command()  :  source.c
<item>set_default_source_symtab_and_line()  :  source.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_source_line  :  source.c
<item>current_source_symtab  :  source.c
<item>lines_to_list  :  source.c
</itemize>
</descrip>

<sect1>Global Function set_current_source_symtab_and_line()

<p><tt>struct symtab_and_line set_current_source_symtab_and_line ( const struct symtab_and_line* sal )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>backtrace_command_1()  :  stack.c
<item>set_current_sal_from_frame()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_source_line  :  source.c
<item>current_source_symtab  :  source.c
</itemize>
</descrip>

<sect1>Global Function set_default_source_symtab_and_line()

<p><tt>void set_default_source_symtab_and_line ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>have_full_symbols()  :  objfiles.c
<item>have_partial_symbols()  :  objfiles.c
<item>select_source_symtab()  :  source.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_all_digits()  :  linespec.c
<item>decode_all_digits_exhaustive()  :  linespec.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_source_symtab  :  source.c
</itemize>
</descrip>

<sect1>Global Function source_full_path_of()

<p><tt>int source_full_path_of ( char* filename, char** full_pathname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>defs.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>openp()  :  source.c
<item>close()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>attach_command()  :  infcmd.c
<item>lookup_partial_symtab()  :  symtab.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>source_path  :  source.c
</itemize>
</descrip>

<sect1>Global Function symtab_to_fullname()

<p><tt>char* symtab_to_fullname ( struct symtab* s )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_and_open_source()  :  source.c
<item>close()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>lookup_symtab()  :  symtab.c
<item>lookup_symtab_all()  :  symtab.c
<item>print_frame()  :  stack.c
<item>print_inlined_frame()  :  inlining.c
<item>sources_info()  :  symtab.c
</itemize>
</descrip>

<sect1>Local Function forward_search_command()

<p><tt>static void forward_search_command ( const char* regex, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>find_source_lines()  :  source.c
<item>lookup_internalvar()  :  value.c
<item>open_source_file()  :  source.c
<item>perror_with_name()  :  utils.c
<item>print_source_lines()  :  source.c
<item>printf_filtered()  :  utils.c
<item>re_comp()  :  utils.c
<item>re_exec()  :  utils.c
<item>select_source_symtab()  :  source.c
<item>set_internalvar()  :  value.c
<item>value_from_longest()  :  value.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>clearerr(), close(), fclose(), fdopen(), getc(), lseek()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_source()  :  source.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>current_source_line  :  source.c
<item>current_source_symtab  :  source.c
<item>last_line_listed  :  source.c
<item>lines_to_list  :  source.c
</itemize>
</descrip>

<sect1>Local Function get_filename_and_charpos()

<p><tt>static int get_filename_and_charpos ( struct symtab* s, char** fullname )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_source_lines()  :  source.c
<item>open_source_file()  :  source.c
<item>close()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>identify_source_line()  :  source.c
</itemize>
</descrip>

<sect1>Local Function is_regular_file()

<p><tt>static int is_regular_file ( const char* name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>__error(), stat()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>openp()  :  source.c
</itemize>
</descrip>

<sect1>Local Function line_info()

<p><tt>static void line_info ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>decode_line_spec_1()  :  breakpoint.c
<item>dont_repeat()  :  top.c
<item>find_line_pc_range()  :  symtab.c
<item>identify_source_line()  :  source.c
<item>init_sal()  :  symtab.c
<item>print_address()  :  printcmd.c
<item>printf_filtered()  :  utils.c
<item>set_next_address()  :  printcmd.c
<item>wrap_here()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_source()  :  source.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>annotation_level  :  stack.c
<item>current_source_symtab  :  source.c
<item>gdb_stdout  :  main.c
<item>last_line_listed  :  source.c
</itemize>
</descrip>

<sect1>Local Function print_source_lines_base()

<p><tt>static void print_source_lines_base ( struct symtab* s, int line, int nlines, int noerror )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>find_source_lines()  :  source.c
<item>open_source_file()  :  source.c
<item>perror_with_name()  :  utils.c
<item>print_sys_errmsg()  :  utils.c
<item>ui_out_field_int()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_test_flags()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>ui_out_text_fmt()  :  ui-out.c
<item>__builtin___snprintf_chk(), __builtin_alloca(), __builtin_object_size(), __error(), clearerr(), close(), fclose(), fdopen(), fgetc(), lseek(), print_source_lines_hook(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_source_lines()  :  source.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_source_line  :  source.c
<item>current_source_symtab  :  source.c
<item>first_line_listed  :  source.c
<item>last_line_listed  :  source.c
<item>last_source_error  :  source.c
<item>last_source_visited  :  source.c
<item>print_source_lines_hook  :  top.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function reverse_search_command()

<p><tt>static void reverse_search_command ( const char* regex, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>find_source_lines()  :  source.c
<item>lookup_internalvar()  :  value.c
<item>open_source_file()  :  source.c
<item>perror_with_name()  :  utils.c
<item>print_source_lines()  :  source.c
<item>printf_filtered()  :  utils.c
<item>re_comp()  :  utils.c
<item>re_exec()  :  utils.c
<item>select_source_symtab()  :  source.c
<item>set_internalvar()  :  value.c
<item>value_from_longest()  :  value.c
<item>clearerr(), close(), fclose(), fdopen(), fseek(), getc(), lseek()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_source()  :  source.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>current_source_line  :  source.c
<item>current_source_symtab  :  source.c
<item>last_line_listed  :  source.c
<item>lines_to_list  :  source.c
</itemize>
</descrip>

<sect1>Local Function set_pathname_substitution()

<p><tt>static void set_pathname_substitution ( const char* args, int from_tty, struct cmd_list_element* c )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>forget_cached_source_info()  :  source.c
<item>warning()  :  utils.c
<item>buildargv(), freeargv()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_source()  :  source.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>last_source_error  :  source.c
<item>pathname_substitutions  :  source.c
<item>pathname_substitutions_argv  :  source.c
</itemize>
</descrip>

<sect1>Local Function show_directories()

<p><tt>static void show_directories ( const char* ignore, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>puts_filtered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>directory_command()  :  source.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_source()  :  source.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>source_path  :  source.c
</itemize>
</descrip>

<sect1>Local Function show_lines_to_list()

<p><tt>static void show_lines_to_list ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_source()  :  source.c
</itemize>
</descrip>

<sect1>Local Function show_pathname_substitutions()

<p><tt>static void show_pathname_substitutions ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_source()  :  source.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>pathname_substitutions  :  source.c
<item>pathname_substitutions_argv  :  source.c
</itemize>
</descrip>

<sect1>Local Function source_info()

<p><tt>static void source_info ( const char* ignore, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>source.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>language_str()  :  language.c
<item>printf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_source()  :  source.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_source_symtab  :  source.c
</itemize>
</descrip>

</article>
