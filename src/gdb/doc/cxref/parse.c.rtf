{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF parse.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File parse.c\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Refs Func:\cell dump_subexp_body_standard()\cell expprint.c\cell\row
\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell op_name_standard()\cell expprint.c\cell\row
\cell operator_length_standard()\cell parse.c\cell\row
\cell print_subexp_standard()\cell expprint.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <ctype.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "parser-defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct funcall\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct funcall}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct funcall* next;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int arglist_len;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable innermost_block\par}
{\s5\f1\fs20\ql\sb50\sa50 struct block* innermost_block\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell ax-general.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-abi.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame-base.c\cell\cell\row
\cell frame-unwind.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell gnu-v2-abi.c\cell\cell\row
\cell gnu-v3-abi.c\cell\cell\row
\cell hpacc-abi.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell m2-valprint.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell std-regs.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell trad-frame.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell user-regs.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
\cell wrapper.c\cell\cell\row
Used in:\cell agent_command()\cell ax-gdb.c\cell\row
\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell c_parse()\cell c-exp.c\cell\row
\cell display_command()\cell printcmd.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell invoke_block_command()\cell printcmd.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell maintenance_print_type()\cell typeprint.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell output_command()\cell printcmd.c\cell\row
\cell parse_and_eval()\cell eval.c\cell\row
\cell parse_and_eval_address()\cell eval.c\cell\row
\cell parse_and_eval_address_1()\cell eval.c\cell\row
\cell parse_and_eval_long()\cell eval.c\cell\row
\cell parse_and_eval_type()\cell eval.c\cell\row
\cell parse_exp_in_context()\cell parse.c\cell\row
\cell parse_to_comma_and_eval()\cell eval.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
\cell print_command_1()\cell printcmd.c\cell\row
\cell print_object_command()\cell objc-lang.c\cell\row
\cell ptype_command()\cell typeprint.c\cell\row
\cell push_variable()\cell jv-exp.c\cell\row
\cell resolve_subexp()\cell ada-lang.c\cell\row
\cell set_command()\cell printcmd.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
\cell whatis_exp()\cell typeprint.c\cell\row
\cell write_var_from_sym()\cell ada-exp.c\cell\row
\cell x_command()\cell printcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable expout\par}
{\s5\f1\fs20\ql\sb50\sa50 struct expression* expout\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell fix_references_to_optimized_out_variables()\cell parse.c\cell\row
\cell insert_exp()\cell jv-exp.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell parse_exp_in_context()\cell parse.c\cell\row
\cell write_exp_bitstring()\cell parse.c\cell\row
\cell write_exp_elt()\cell parse.c\cell\row
\cell write_exp_elt_sym()\cell parse.c\cell\row
\cell write_exp_string()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable expout_size\par}
{\s5\f1\fs20\ql\sb50\sa50 int expout_size\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell insert_exp()\cell jv-exp.c\cell\row
\cell parse_exp_in_context()\cell parse.c\cell\row
\cell write_exp_bitstring()\cell parse.c\cell\row
\cell write_exp_elt()\cell parse.c\cell\row
\cell write_exp_string()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable expout_ptr\par}
{\s5\f1\fs20\ql\sb50\sa50 int expout_ptr\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell fix_references_to_optimized_out_variables()\cell parse.c\cell\row
\cell insert_exp()\cell jv-exp.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell parse_exp_in_context()\cell parse.c\cell\row
\cell write_exp_bitstring()\cell parse.c\cell\row
\cell write_exp_elt()\cell parse.c\cell\row
\cell write_exp_elt_sym()\cell parse.c\cell\row
\cell write_exp_string()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable expression_context_block\par}
{\s5\f1\fs20\ql\sb50\sa50 struct block* expression_context_block\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell c_lex()\cell c-exp.c\cell\row
\cell c_parse()\cell c-exp.c\cell\row
\cell c_preprocess_and_parse()\cell c-lang.c\cell\row
\cell f_lex()\cell f-exp.c\cell\row
\cell java_lookup_class()\cell jv-lang.c\cell\row
\cell m2_lex()\cell m2-exp.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell name_lookup()\cell ada-exp.c\cell\row
\cell objc_lex()\cell objc-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell parse_exp_in_context()\cell parse.c\cell\row
\cell pascal_lex()\cell p-exp.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
\cell push_variable()\cell jv-exp.c\cell\row
\cell scm_lookup_name()\cell scm-lang.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable expression_context_pc\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR expression_context_pc\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell c_preprocess_and_parse()\cell c-lang.c\cell\row
\cell parse_exp_in_context()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable arglist_len\par}
{\s5\f1\fs20\ql\sb50\sa50 int arglist_len\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell c_parse()\cell c-exp.c\cell\row
\cell end_arglist()\cell parse.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
\cell start_arglist()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable type_stack\par}
{\s5\f1\fs20\ql\sb50\sa50 union type_stack_elt* type_stack\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell _initialize_parse()\cell parse.c\cell\row
\cell check_type_stack_depth()\cell parse.c\cell\row
\cell pop_type()\cell parse.c\cell\row
\cell pop_type_int()\cell parse.c\cell\row
\cell push_type()\cell parse.c\cell\row
\cell push_type_int()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable type_stack_depth\par}
{\s5\f1\fs20\ql\sb50\sa50 int type_stack_depth\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell _initialize_parse()\cell parse.c\cell\row
\cell check_type_stack_depth()\cell parse.c\cell\row
\cell parse_exp_in_context()\cell parse.c\cell\row
\cell pop_type()\cell parse.c\cell\row
\cell pop_type_int()\cell parse.c\cell\row
\cell push_type()\cell parse.c\cell\row
\cell push_type_int()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable type_stack_size\par}
{\s5\f1\fs20\ql\sb50\sa50 int type_stack_size\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell _initialize_parse()\cell parse.c\cell\row
\cell check_type_stack_depth()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable lexptr\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* lexptr\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell ada_error()\cell ada-exp.c\cell\row
\cell ada_lex()\cell ada-exp.c\cell\row
\cell c_error()\cell c-exp.c\cell\row
\cell c_lex()\cell c-exp.c\cell\row
\cell f_error()\cell f-exp.c\cell\row
\cell f_lex()\cell f-exp.c\cell\row
\cell finished_macro_expansion()\cell c-lang.c\cell\row
\cell java_error()\cell jv-exp.c\cell\row
\cell java_lex()\cell jv-exp.c\cell\row
\cell m2_error()\cell m2-exp.c\cell\row
\cell m2_lex()\cell m2-exp.c\cell\row
\cell match_string_literal()\cell f-exp.c\cell\row
\cell objc_error()\cell objc-exp.c\cell\row
\cell objc_lex()\cell objc-exp.c\cell\row
\cell parse_exp_in_context()\cell parse.c\cell\row
\cell parse_number()\cell m2-exp.c\cell\row
\cell pascal_error()\cell p-exp.c\cell\row
\cell pascal_lex()\cell p-exp.c\cell\row
\cell scan_macro_expansion()\cell c-lang.c\cell\row
\cell scm_lreadparen()\cell scm-exp.c\cell\row
\cell scm_lreadr()\cell scm-exp.c\cell\row
\cell scm_parse()\cell scm-exp.c\cell\row
\cell scm_read_token()\cell scm-exp.c\cell\row
\cell scm_skip_ws()\cell scm-exp.c\cell\row
\cell yy_get_next_buffer()\cell ada-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable prev_lexptr\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* prev_lexptr\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell c_error()\cell c-exp.c\cell\row
\cell c_lex()\cell c-exp.c\cell\row
\cell f_error()\cell f-exp.c\cell\row
\cell f_lex()\cell f-exp.c\cell\row
\cell java_error()\cell jv-exp.c\cell\row
\cell java_lex()\cell jv-exp.c\cell\row
\cell m2_error()\cell m2-exp.c\cell\row
\cell m2_lex()\cell m2-exp.c\cell\row
\cell parse_exp_in_context()\cell parse.c\cell\row
\cell pascal_error()\cell p-exp.c\cell\row
\cell pascal_lex()\cell p-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable namecopy\par}
{\s5\f1\fs20\ql\sb50\sa50 char* namecopy\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell copy_name()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable paren_depth\par}
{\s5\f1\fs20\ql\sb50\sa50 int paren_depth\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell ada_lex()\cell ada-exp.c\cell\row
\cell c_lex()\cell c-exp.c\cell\row
\cell f_lex()\cell f-exp.c\cell\row
\cell java_lex()\cell jv-exp.c\cell\row
\cell m2_lex()\cell m2-exp.c\cell\row
\cell objc_lex()\cell objc-exp.c\cell\row
\cell parse_exp_in_context()\cell parse.c\cell\row
\cell pascal_lex()\cell p-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable comma_terminates\par}
{\s5\f1\fs20\ql\sb50\sa50 int comma_terminates\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell ada_lex()\cell ada-exp.c\cell\row
\cell c_lex()\cell c-exp.c\cell\row
\cell f_lex()\cell f-exp.c\cell\row
\cell java_lex()\cell jv-exp.c\cell\row
\cell m2_lex()\cell m2-exp.c\cell\row
\cell objc_lex()\cell objc-exp.c\cell\row
\cell parse_exp_in_context()\cell parse.c\cell\row
\cell pascal_lex()\cell p-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable exp_descriptor_standard\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct exp_descriptor exp_descriptor_standard\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell c-lang.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable namecopy_size\par}
{\s5\f1\fs20\ql\sb50\sa50 size_t namecopy_size\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell parse.c\cell\cell\row
Used in:\cell copy_name()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable msym_text_symbol_type\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* msym_text_symbol_type\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell parse.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell _initialize_parse()\cell parse.c\cell\row
\cell build_parse()\cell parse.c\cell\row
\cell find_function_in_inferior()\cell valops.c\cell\row
\cell write_exp_msymbol()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable msym_data_symbol_type\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* msym_data_symbol_type\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell parse.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell _initialize_parse()\cell parse.c\cell\row
\cell build_parse()\cell parse.c\cell\row
\cell write_exp_msymbol()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable msym_unknown_symbol_type\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* msym_unknown_symbol_type\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell parse.c\cell\cell\row
\cell valops.c\cell\cell\row
Used in:\cell _initialize_parse()\cell parse.c\cell\row
\cell build_parse()\cell parse.c\cell\row
\cell write_exp_msymbol()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable expressiondebug\par}
{\s5\f1\fs20\ql\sb50\sa50 static int expressiondebug\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_parse()\cell\cell\row
\cell parse_exp_in_context()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable funcall_chain\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct funcall* funcall_chain\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell end_arglist()\cell\cell\row
\cell free_funcalls()\cell\cell\row
\cell parse_exp_in_context()\cell\cell\row
\cell start_arglist()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable coloncolon\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char coloncolon[2]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell parse_nested_classes_for_hpacc()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable ftype_no_debug_info_name\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* ftype_no_debug_info_name\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell build_parse()\cell\cell\row
\cell ftype_has_debug_info_p()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_parse()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_parse ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parse.c\cell\cell\row
Calls: \cell build_parse()\cell parse.c\cell\row
\cell deprecated_register_gdbarch_swap()\cell gdbarch.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  add_setshow_zinteger_cmd()\cell\cell\row
Refs Func:\cell build_parse()\cell parse.c\cell\row
\cell show_expressiondebug()\cell parse.c\cell\row
Refs Var:\cell expressiondebug\cell parse.c\cell\row
\cell msym_data_symbol_type\cell parse.c\cell\row
\cell msym_text_symbol_type\cell parse.c\cell\row
\cell msym_unknown_symbol_type\cell parse.c\cell\row
\cell type_stack\cell parse.c\cell\row
\cell type_stack_depth\cell parse.c\cell\row
\cell type_stack_size\cell parse.c\cell\row
\cell  setdebuglist, showdebuglist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function copy_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* copy_name ( struct stoken token )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell c_lex()\cell c-exp.c\cell\row
\cell c_parse()\cell c-exp.c\cell\row
\cell f_lex()\cell f-exp.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell java_type_from_name()\cell jv-exp.c\cell\row
\cell m2_lex()\cell m2-exp.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell objc_lex()\cell objc-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell pascal_lex()\cell p-exp.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
\cell push_expression_name()\cell jv-exp.c\cell\row
\cell push_qualified_expression_name()\cell jv-exp.c\cell\row
\cell push_variable()\cell jv-exp.c\cell\row
\cell write_dollar_variable()\cell parse.c\cell\row
Refs Var:\cell namecopy\cell parse.c\cell\row
\cell namecopy_size\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function end_arglist()\par}
{\s5\f1\fs20\ql\sb50\sa50 int end_arglist ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
Called by:\cell c_parse()\cell c-exp.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
Refs Var:\cell arglist_len\cell parse.c\cell\row
\cell funcall_chain\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_template_name_end()\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* find_template_name_end ( const char* p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Called by:\cell c_lex()\cell c-exp.c\cell\row
\cell decode_compound()\cell linespec.c\cell\row
\cell locate_first_half()\cell linespec.c\cell\row
\cell objc_lex()\cell objc-exp.c\cell\row
\cell parse_nested_classes_for_hpacc()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function follow_types()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* follow_types ( struct type* follow_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell create_array_type()\cell gdbtypes.c\cell\row
\cell create_range_type()\cell gdbtypes.c\cell\row
\cell lookup_function_type()\cell gdbtypes.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell lookup_reference_type()\cell gdbtypes.c\cell\row
\cell make_cvr_type()\cell gdbtypes.c\cell\row
\cell make_type_with_address_space()\cell gdbtypes.c\cell\row
\cell pop_type()\cell parse.c\cell\row
\cell pop_type_int()\cell parse.c\cell\row
Called by:\cell c_parse()\cell c-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function ftype_has_debug_info_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int ftype_has_debug_info_p ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell gdbtypes.h\cell\cell\row
Calls: \cell  strcmp()\cell\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell ftype_no_debug_info_name\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function length_of_subexp()\par}
{\s5\f1\fs20\ql\sb50\sa50 int length_of_subexp ( struct expression* expr, int endpos )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell length_of_subexp()\cell parse.c\cell\row
\cell operator_length()\cell parse.c\cell\row
Called by:\cell copy_exp()\cell jv-exp.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell length_of_subexp()\cell parse.c\cell\row
\cell prefixify_subexp()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function null_post_parser()\par}
{\s5\f1\fs20\ql\sb50\sa50 void null_post_parser ( struct expression** exp, int void_context_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Used in:\cell c-lang.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell language.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function operator_length()\par}
{\s5\f1\fs20\ql\sb50\sa50 void operator_length ( struct expression* expr, int endpos, int* oplenp, int* argsp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Called by:\cell length_of_subexp()\cell parse.c\cell\row
\cell prefixify_subexp()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function operator_length_standard()\par}
{\s5\f1\fs20\ql\sb50\sa50 void operator_length_standard ( struct expression* expr, int endpos, int* oplenp, int* argsp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell longest_to_int()\cell valprint.c\cell\row
Called by:\cell ada_operator_length()\cell ada-lang.c\cell\row
Used in:\cell jv-lang.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function parse_exp_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct expression* parse_exp_1 ( const char** stringptr, struct block* block, int comma )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell expression.h\cell\cell\row
Calls: \cell parse_exp_in_context()\cell parse.c\cell\row
Called by:\cell break_command_2()\cell breakpoint.c\cell\row
\cell breakpoint_re_set_one()\cell breakpoint.c\cell\row
\cell do_captured_breakpoint()\cell breakpoint.c\cell\row
\cell encode_actions()\cell tracepoint.c\cell\row
\cell gdb_parse_exp_1()\cell wrapper.c\cell\row
\cell parse_and_eval_address_1()\cell eval.c\cell\row
\cell parse_expression()\cell parse.c\cell\row
\cell parse_to_comma_and_eval()\cell eval.c\cell\row
\cell validate_actionline()\cell tracepoint.c\cell\row
\cell watch_command_1()\cell breakpoint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function parse_expression()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct expression* parse_expression ( const char* string )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell expression.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell parse_exp_1()\cell parse.c\cell\row
Called by:\cell agent_command()\cell ax-gdb.c\cell\row
\cell display_command()\cell printcmd.c\cell\row
\cell invoke_block_command()\cell printcmd.c\cell\row
\cell maintenance_print_type()\cell typeprint.c\cell\row
\cell output_command()\cell printcmd.c\cell\row
\cell parse_and_eval()\cell eval.c\cell\row
\cell parse_and_eval_address()\cell eval.c\cell\row
\cell parse_and_eval_long()\cell eval.c\cell\row
\cell parse_and_eval_type()\cell eval.c\cell\row
\cell print_command_1()\cell printcmd.c\cell\row
\cell print_object_command()\cell objc-lang.c\cell\row
\cell ptype_command()\cell typeprint.c\cell\row
\cell set_command()\cell printcmd.c\cell\row
\cell whatis_exp()\cell typeprint.c\cell\row
\cell x_command()\cell printcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function parse_expression_in_context()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct expression* parse_expression_in_context ( const char* string, int void_context_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell expression.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell parse_exp_in_context()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function parse_nested_classes_for_hpacc()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symbol* parse_nested_classes_for_hpacc ( char* name, int len, char** token, int* class_prefix, const char** argptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell find_template_name_end()\cell parse.c\cell\row
\cell lookup_symbol()\cell symtab.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), isalnum(), isalpha(), strlen()\cell\cell\row
Called by:\cell c_lex()\cell c-exp.c\cell\row
Refs Var:\cell coloncolon\cell parse.c\cell\row
\cell deprecated_hp_som_som_object_present\cell symtab.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function parser_fprintf()\par}
{\s5\f1\fs20\ql\sb50\sa50 void parser_fprintf ( FILE* x, const char* y, ... )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell vfprintf_unfiltered()\cell utils.c\cell\row
\cell  __builtin_va_end(), __builtin_va_start()\cell\cell\row
Called by:\cell _ada_parse()\cell ada-exp.c\cell\row
\cell c_parse()\cell c-exp.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell fix_references_to_optimized_out_variables()\cell parse.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
\cell yy_reduce_print()\cell p-exp.c\cell\row
\cell yy_stack_print()\cell p-exp.c\cell\row
\cell yy_symbol_print()\cell p-exp.c\cell\row
\cell yydestruct()\cell p-exp.c\cell\row
Refs Var:\cell gdb_stderr\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function pop_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum type_pieces pop_type ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Called by:\cell f_parse()\cell f-exp.c\cell\row
\cell follow_types()\cell parse.c\cell\row
Refs Var:\cell type_stack\cell parse.c\cell\row
\cell type_stack_depth\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function pop_type_int()\par}
{\s5\f1\fs20\ql\sb50\sa50 int pop_type_int ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Called by:\cell f_parse()\cell f-exp.c\cell\row
\cell follow_types()\cell parse.c\cell\row
Refs Var:\cell type_stack\cell parse.c\cell\row
\cell type_stack_depth\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function push_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 void push_type ( enum type_pieces tp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell check_type_stack_depth()\cell parse.c\cell\row
Called by:\cell c_parse()\cell c-exp.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
Refs Var:\cell type_stack\cell parse.c\cell\row
\cell type_stack_depth\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function push_type_address_space()\par}
{\s5\f1\fs20\ql\sb50\sa50 void push_type_address_space ( char* string )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell address_space_name_to_int()\cell gdbtypes.c\cell\row
\cell push_type_int()\cell parse.c\cell\row
Called by:\cell c_parse()\cell c-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function push_type_int()\par}
{\s5\f1\fs20\ql\sb50\sa50 void push_type_int ( int n )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell check_type_stack_depth()\cell parse.c\cell\row
Called by:\cell c_parse()\cell c-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell push_type_address_space()\cell parse.c\cell\row
Refs Var:\cell type_stack\cell parse.c\cell\row
\cell type_stack_depth\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function start_arglist()\par}
{\s5\f1\fs20\ql\sb50\sa50 void start_arglist ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell c_parse()\cell c-exp.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
Refs Var:\cell arglist_len\cell parse.c\cell\row
\cell funcall_chain\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_dollar_variable()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_dollar_variable ( struct stoken str )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell copy_name()\cell parse.c\cell\row
\cell frame_map_name_to_regnum()\cell frame.c\cell\row
\cell lookup_function_type()\cell gdbtypes.c\cell\row
\cell lookup_internalvar()\cell value.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_symbol()\cell symtab.c\cell\row
\cell write_exp_elt_block()\cell parse.c\cell\row
\cell write_exp_elt_intern()\cell parse.c\cell\row
\cell write_exp_elt_longcst()\cell parse.c\cell\row
\cell write_exp_elt_opcode()\cell parse.c\cell\row
\cell write_exp_elt_sym()\cell parse.c\cell\row
\cell write_exp_msymbol()\cell parse.c\cell\row
\cell  atoi()\cell\cell\row
Called by:\cell _ada_parse()\cell ada-exp.c\cell\row
\cell c_lex()\cell c-exp.c\cell\row
\cell f_lex()\cell f-exp.c\cell\row
\cell java_lex()\cell jv-exp.c\cell\row
\cell m2_lex()\cell m2-exp.c\cell\row
\cell objc_lex()\cell objc-exp.c\cell\row
\cell pascal_lex()\cell p-exp.c\cell\row
\cell scm_lreadr()\cell scm-exp.c\cell\row
Refs Var:\cell block_found\cell symtab.c\cell\row
\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell deprecated_selected_frame\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_exp_bitstring()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_exp_bitstring ( struct stoken str )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell write_exp_elt_longcst()\cell parse.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Refs Var:\cell expout\cell parse.c\cell\row
\cell expout_ptr\cell parse.c\cell\row
\cell expout_size\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_exp_elt()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_exp_elt ( union exp_element expelt )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell xrealloc()\cell utils.c\cell\row
Called by:\cell write_exp_elt_block()\cell parse.c\cell\row
\cell write_exp_elt_dblcst()\cell parse.c\cell\row
\cell write_exp_elt_intern()\cell parse.c\cell\row
\cell write_exp_elt_longcst()\cell parse.c\cell\row
\cell write_exp_elt_opcode()\cell parse.c\cell\row
\cell write_exp_elt_sym()\cell parse.c\cell\row
\cell write_exp_elt_type()\cell parse.c\cell\row
Refs Var:\cell expout\cell parse.c\cell\row
\cell expout_ptr\cell parse.c\cell\row
\cell expout_size\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_exp_elt_block()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_exp_elt_block ( struct block* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell write_exp_elt()\cell parse.c\cell\row
Called by:\cell c_parse()\cell c-exp.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
\cell push_variable()\cell jv-exp.c\cell\row
\cell write_dollar_variable()\cell parse.c\cell\row
\cell write_var_from_name()\cell ada-exp.c\cell\row
\cell write_var_from_sym()\cell ada-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_exp_elt_dblcst()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_exp_elt_dblcst ( DOUBLEST expelt )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell write_exp_elt()\cell parse.c\cell\row
Called by:\cell _ada_parse()\cell ada-exp.c\cell\row
\cell c_parse()\cell c-exp.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_exp_elt_intern()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_exp_elt_intern ( struct internalvar* expelt )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell write_exp_elt()\cell parse.c\cell\row
Called by:\cell write_dollar_variable()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_exp_elt_longcst()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_exp_elt_longcst ( long expelt )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell write_exp_elt()\cell parse.c\cell\row
Called by:\cell _ada_parse()\cell ada-exp.c\cell\row
\cell c_parse()\cell c-exp.c\cell\row
\cell end_msglist()\cell objc-lang.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
\cell scm_lreadr()\cell scm-exp.c\cell\row
\cell write_dollar_variable()\cell parse.c\cell\row
\cell write_exp_bitstring()\cell parse.c\cell\row
\cell write_exp_msymbol()\cell parse.c\cell\row
\cell write_exp_string()\cell parse.c\cell\row
\cell write_int()\cell ada-exp.c\cell\row
\cell write_object_renaming()\cell ada-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_exp_elt_opcode()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_exp_elt_opcode ( enum exp_opcode expelt )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell write_exp_elt()\cell parse.c\cell\row
Called by:\cell _ada_parse()\cell ada-exp.c\cell\row
\cell c_parse()\cell c-exp.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
\cell push_expression_name()\cell jv-exp.c\cell\row
\cell push_fieldnames()\cell jv-exp.c\cell\row
\cell push_qualified_expression_name()\cell jv-exp.c\cell\row
\cell push_variable()\cell jv-exp.c\cell\row
\cell scm_lreadr()\cell scm-exp.c\cell\row
\cell write_dollar_variable()\cell parse.c\cell\row
\cell write_exp_msymbol()\cell parse.c\cell\row
\cell write_int()\cell ada-exp.c\cell\row
\cell write_object_renaming()\cell ada-exp.c\cell\row
\cell write_var_from_name()\cell ada-exp.c\cell\row
\cell write_var_from_sym()\cell ada-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_exp_elt_sym()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_exp_elt_sym ( struct symbol* expelt )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell write_exp_elt()\cell parse.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell c_parse()\cell c-exp.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
\cell push_variable()\cell jv-exp.c\cell\row
\cell write_dollar_variable()\cell parse.c\cell\row
\cell write_var_from_name()\cell ada-exp.c\cell\row
\cell write_var_from_sym()\cell ada-exp.c\cell\row
Refs Var:\cell expout\cell parse.c\cell\row
\cell expout_ptr\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_exp_elt_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_exp_elt_type ( struct type* expelt )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell write_exp_elt()\cell parse.c\cell\row
Called by:\cell _ada_parse()\cell ada-exp.c\cell\row
\cell c_parse()\cell c-exp.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
\cell push_expression_name()\cell jv-exp.c\cell\row
\cell push_qualified_expression_name()\cell jv-exp.c\cell\row
\cell scm_lreadr()\cell scm-exp.c\cell\row
\cell write_exp_msymbol()\cell parse.c\cell\row
\cell write_int()\cell ada-exp.c\cell\row
\cell write_object_renaming()\cell ada-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_exp_msymbol()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_exp_msymbol ( struct minimal_symbol* msymbol, struct type* text_symbol_type, struct type* data_symbol_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell symbol_overlayed_address()\cell symfile.c\cell\row
\cell write_exp_elt_longcst()\cell parse.c\cell\row
\cell write_exp_elt_opcode()\cell parse.c\cell\row
\cell write_exp_elt_type()\cell parse.c\cell\row
Called by:\cell c_parse()\cell c-exp.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
\cell push_expression_name()\cell jv-exp.c\cell\row
\cell write_dollar_variable()\cell parse.c\cell\row
\cell write_var_from_name()\cell ada-exp.c\cell\row
Refs Var:\cell builtin_type_CORE_ADDR\cell gdbtypes.c\cell\row
\cell msym_data_symbol_type\cell parse.c\cell\row
\cell msym_text_symbol_type\cell parse.c\cell\row
\cell msym_unknown_symbol_type\cell parse.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function write_exp_string()\par}
{\s5\f1\fs20\ql\sb50\sa50 void write_exp_string ( struct stoken str )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parser-defs.h\cell\cell\row
Calls: \cell write_exp_elt_longcst()\cell parse.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell _ada_parse()\cell ada-exp.c\cell\row
\cell c_parse()\cell c-exp.c\cell\row
\cell f_parse()\cell f-exp.c\cell\row
\cell java_parse()\cell jv-exp.c\cell\row
\cell m2_parse()\cell m2-exp.c\cell\row
\cell objc_parse()\cell objc-exp.c\cell\row
\cell pascal_parse()\cell p-exp.c\cell\row
\cell push_fieldnames()\cell jv-exp.c\cell\row
\cell push_qualified_expression_name()\cell jv-exp.c\cell\row
\cell push_variable()\cell jv-exp.c\cell\row
\cell scm_lreadr()\cell scm-exp.c\cell\row
\cell write_object_renaming()\cell ada-exp.c\cell\row
Refs Var:\cell expout\cell parse.c\cell\row
\cell expout_ptr\cell parse.c\cell\row
\cell expout_size\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function build_parse()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void build_parse ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parse.c\cell\cell\row
Calls: \cell init_type()\cell gdbtypes.c\cell\row
Called by:\cell _initialize_parse()\cell parse.c\cell\row
Used in:\cell _initialize_parse()\cell parse.c\cell\row
Refs Var:\cell builtin_type_error\cell symtab.c\cell\row
\cell ftype_no_debug_info_name\cell parse.c\cell\row
\cell msym_data_symbol_type\cell parse.c\cell\row
\cell msym_text_symbol_type\cell parse.c\cell\row
\cell msym_unknown_symbol_type\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function check_type_stack_depth()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void check_type_stack_depth ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell xrealloc()\cell utils.c\cell\row
Called by:\cell push_type()\cell parse.c\cell\row
\cell push_type_int()\cell parse.c\cell\row
Refs Var:\cell type_stack\cell parse.c\cell\row
\cell type_stack_depth\cell parse.c\cell\row
\cell type_stack_size\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function fix_references_to_optimized_out_variables()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void fix_references_to_optimized_out_variables ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parse.c\cell\cell\row
Calls: \cell parser_fprintf()\cell parse.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell parse_exp_in_context()\cell parse.c\cell\row
Refs Var:\cell expout\cell parse.c\cell\row
\cell expout_ptr\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function free_funcalls()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void free_funcalls ( void* ignore )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parse.c\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
Used in:\cell parse_exp_in_context()\cell parse.c\cell\row
Refs Var:\cell funcall_chain\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function parse_exp_in_context()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct expression* parse_exp_in_context ( const char** stringptr, struct block* block, int comma, int void_context_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parse.c\cell\cell\row
Calls: \cell discard_cleanups()\cell utils.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell dump_prefix_expression()\cell expprint.c\cell\row
\cell dump_raw_expression()\cell expprint.c\cell\row
\cell fix_references_to_optimized_out_variables()\cell parse.c\cell\row
\cell get_selected_block()\cell stack.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_suppress_hook_stop()\cell infrun.c\cell\row
\cell prefixify_expression()\cell parse.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell xrealloc()\cell utils.c\cell\row
\cell  error_no_arg()\cell\cell\row
Called by:\cell parse_exp_1()\cell parse.c\cell\row
\cell parse_expression_in_context()\cell parse.c\cell\row
Refs Func:\cell free_current_contents()\cell utils.c\cell\row
\cell free_funcalls()\cell parse.c\cell\row
Refs Var:\cell comma_terminates\cell parse.c\cell\row
\cell current_language\cell language.c\cell\row
\cell expout\cell parse.c\cell\row
\cell expout_ptr\cell parse.c\cell\row
\cell expout_size\cell parse.c\cell\row
\cell expression_context_block\cell parse.c\cell\row
\cell expression_context_pc\cell parse.c\cell\row
\cell expressiondebug\cell parse.c\cell\row
\cell funcall_chain\cell parse.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell innermost_block\cell parse.c\cell\row
\cell lexptr\cell parse.c\cell\row
\cell paren_depth\cell parse.c\cell\row
\cell prev_lexptr\cell parse.c\cell\row
\cell type_stack_depth\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function prefixify_expression()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void prefixify_expression ( struct expression* expr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parse.c\cell\cell\row
Calls: \cell prefixify_subexp()\cell parse.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell parse_exp_in_context()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function prefixify_subexp()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void prefixify_subexp ( struct expression* inexpr, struct expression* outexpr, int inend, int outbeg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell parse.c\cell\cell\row
Calls: \cell length_of_subexp()\cell parse.c\cell\row
\cell operator_length()\cell parse.c\cell\row
\cell prefixify_subexp()\cell parse.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk()\cell\cell\row
Called by:\cell prefixify_expression()\cell parse.c\cell\row
\cell prefixify_subexp()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_expressiondebug()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_expressiondebug ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_parse()\cell parse.c\cell\row
\intbl0
}
