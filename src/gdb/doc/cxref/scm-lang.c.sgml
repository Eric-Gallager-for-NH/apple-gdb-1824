<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF scm-lang.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for scm-lang.c of gdb.cxref.
<author>cxref

<sect>File scm-lang.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>basic_lookup_symbol_nonlocal()  :  symtab.c
<item>basic_lookup_transparent_type()  :  symtab.c
<item>c_error()  :  c-exp.c
<item>c_language_arch_info()  :  c-lang.c
<item>c_print_type()  :  c-typeprint.c
<item>default_word_break_characters()  :  language.c
<item>dump_subexp_body_standard()  :  expprint.c
<item>evaluate_subexp_scm()  :  scm-lang.c
<item>null_post_parser()  :  parse.c
<item>op_name_standard()  :  expprint.c
<item>operator_length_standard()  :  parse.c
<item>print_subexp_standard()  :  expprint.c
<item>scm_parse()  :  scm-exp.c
<item>scm_printchar()  :  scm-lang.c
<item>scm_printstr()  :  scm-lang.c
<item>scm_val_print()  :  scm-valprint.c
<item>scm_value_print()  :  scm-valprint.c
<item>value_of_this()  :  valops.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>exp_descriptor_scm  :  scm-lang.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;parser-defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;c-lang.h&quot;</tt>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;macroexp.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;scm-lang.h&quot;</tt>
<itemize>
<item><tt>#include &quot;scm-tags.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;scm-tags.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;source.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;infcall.h&quot;</tt>
</itemize>

<sect1>Global Variable builtin_type_scm

<p>
<tt>struct type* builtin_type_scm</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>value.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_scheme_language()  :  scm-lang.c
<item>scm_get_field()  :  scm-lang.c
<item>scm_ipruk()  :  scm-valprint.c
<item>scm_lookup_name()  :  scm-lang.c
<item>scm_lreadr()  :  scm-exp.c
</itemize>
</descrip>

<sect1>Global Variable exp_descriptor_scm

<p>
<tt>const struct exp_descriptor exp_descriptor_scm</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>scm-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>scm-lang.c
</itemize>
</descrip>

<sect1>Global Variable scm_language_defn

<p>
<tt>const struct language_defn scm_language_defn</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>scm-lang.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_scheme_language()  :  scm-lang.c
</itemize>
</descrip>

<sect1>Global Function _initialize_scheme_language()

<p><tt>void _initialize_scheme_language ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>scm-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_language()  :  language.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>init_type()  :  gdbtypes.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_scm  :  scm-lang.c
<item>current_gdbarch  :  gdbarch.c
<item>scm_language_defn  :  scm-lang.c
</itemize>
</descrip>

<sect1>Global Function is_scmvalue_type()

<p><tt>int is_scmvalue_type ( struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>scm-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>scm_lreadr()  :  scm-exp.c
<item>scm_unpack()  :  scm-lang.c
<item>scm_val_print()  :  scm-valprint.c
<item>unpack_long()  :  value.c
</itemize>
</descrip>

<sect1>Global Function scm_evaluate_string()

<p><tt>struct value* scm_evaluate_string ( char* str, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>scm-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>call_function_by_hand()  :  infcall.c
<item>find_function_in_inferior()  :  valops.c
<item>value_allocate_space_in_inferior()  :  valops.c
<item>value_as_long()  :  value.c
<item>write_memory()  :  corefile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_scm()  :  scm-lang.c
<item>scm_lreadr()  :  scm-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_voidptrfuncptr  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Global Function scm_get_field()

<p><tt>long scm_get_field ( long svalue, int index )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>scm-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>extract_signed_integer()  :  findvar.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>read_memory()  :  corefile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>scm_ipruk()  :  scm-valprint.c
<item>scm_scmlist_print()  :  scm-valprint.c
<item>scm_scmval_print()  :  scm-valprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_scm  :  scm-lang.c
</itemize>
</descrip>

<sect1>Global Function scm_printchar()

<p><tt>void scm_printchar ( int c, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>scm-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>scm_scmval_print()  :  scm-valprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>scm-lang.c
</itemize>
</descrip>

<sect1>Global Function scm_unpack()

<p><tt>long scm_unpack ( struct type* type, const gdb_byte* valaddr, enum type_code context )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>scm-lang.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>extract_signed_integer()  :  findvar.c
<item>is_scmvalue_type()  :  scm-lang.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>unpack_long()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>unpack_long()  :  value.c
</itemize>
</descrip>

<sect1>Local Function evaluate_subexp_scm()

<p><tt>static struct value* evaluate_subexp_scm ( struct type* expect_type, struct expression* exp, int* pos, enum noside noside )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>scm-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>evaluate_subexp_standard()  :  eval.c
<item>longest_to_int()  :  valprint.c
<item>scm_evaluate_string()  :  scm-lang.c
<item>scm_lookup_name()  :  scm-lang.c
<item>value_from_longest()  :  value.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>scm-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_long  :  gdbtypes.c
</itemize>
</descrip>

<sect1>Local Function in_eval_c()

<p><tt>static int in_eval_c ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>scm-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_current_source_symtab_and_line()  :  source.c
<item>strcmp(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>scm_lookup_name()  :  scm-lang.c
</itemize>
</descrip>

<sect1>Local Function scm_lookup_name()

<p><tt>static struct value* scm_lookup_name ( char* str )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>scm-lang.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>call_function_by_hand()  :  infcall.c
<item>error()  :  utils.c
<item>find_function_in_inferior()  :  valops.c
<item>in_eval_c()  :  scm-lang.c
<item>lookup_symbol()  :  symtab.c
<item>value_allocate_space_in_inferior()  :  valops.c
<item>value_as_long()  :  value.c
<item>value_from_longest()  :  value.c
<item>value_ind()  :  valops.c
<item>value_logical_not()  :  valarith.c
<item>value_of_variable()  :  valops.c
<item>write_memory()  :  corefile.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>evaluate_subexp_scm()  :  scm-lang.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>builtin_type_scm  :  scm-lang.c
<item>builtin_type_voidptrfuncptr  :  gdbtypes.c
<item>expression_context_block  :  parse.c
</itemize>
</descrip>

<sect1>Local Function scm_printstr()

<p><tt>static void scm_printstr ( struct ui_file* stream, const gdb_byte* string, unsigned int length, int width, int force_ellipses )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>scm-lang.c
</itemize>
</descrip>

</article>
