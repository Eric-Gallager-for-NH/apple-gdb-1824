{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF varobj.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File varobj.c\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Refs Func:\cell c_make_name_of_child()\cell varobj.c\cell\row
\cell c_number_of_children()\cell varobj.c\cell\row
\cell c_path_expr_of_child()\cell varobj.c\cell\row
\cell c_type_of_child()\cell varobj.c\cell\row
\cell c_value_of_child()\cell varobj.c\cell\row
\cell c_value_of_root()\cell varobj.c\cell\row
\cell c_value_of_variable()\cell varobj.c\cell\row
\cell c_variable_editable()\cell varobj.c\cell\row
\cell cplus_make_name_of_child()\cell varobj.c\cell\row
\cell cplus_number_of_children()\cell varobj.c\cell\row
\cell cplus_path_expr_of_child()\cell varobj.c\cell\row
\cell cplus_type_of_child()\cell varobj.c\cell\row
\cell cplus_value_of_child()\cell varobj.c\cell\row
\cell cplus_value_of_root()\cell varobj.c\cell\row
\cell cplus_value_of_variable()\cell varobj.c\cell\row
\cell cplus_variable_editable()\cell varobj.c\cell\row
\cell java_make_name_of_child()\cell varobj.c\cell\row
\cell java_number_of_children()\cell varobj.c\cell\row
\cell java_path_expr_of_child()\cell varobj.c\cell\row
\cell java_type_of_child()\cell varobj.c\cell\row
\cell java_value_of_child()\cell varobj.c\cell\row
\cell java_value_of_root()\cell varobj.c\cell\row
\cell java_value_of_variable()\cell varobj.c\cell\row
\cell java_variable_editable()\cell varobj.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exceptions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <setjmp.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "cp-abi.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "wrapper.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "varobj.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <math.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "varobj.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "parser-defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define VAROBJ_TABLE_SIZE 227\par}
{\s5\f1\fs20\ql\sb50\sa50 #define CPLUS_FAKE_CHILD( x )\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct varobj_root\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct varobj_root}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct expression* exp;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct block* valid_block;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct frame_id frame;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int use_selected_frame;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int in_scope;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct language_specific* lang;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct varobj* rootvar;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct varobj_root* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type enum varobj_join_type\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum varobj_join_type}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 VAROBJ_AS_DUNNO;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 VAROBJ_AS_STRUCT;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 VAROBJ_AS_PTR_TO_SCALAR;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 VAROBJ_AS_PTR_TO_STRUCT;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 VAROBJ_AS_ARRAY;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct varobj\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct varobj}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* path_expr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum varobj_join_type join_in_expr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int elide_in_expr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* obj_name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int index;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct type* type;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct type* dynamic_type;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* dynamic_type_name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct value* value;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int error;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int num_children;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct varobj* parent;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct varobj_child* children;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int fake_child;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct varobj_root* root;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum varobj_display_formats format;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int updated;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct objfile_hitlist* hitlist;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct varobj_child\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct varobj_child}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct varobj* child;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct varobj_child* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct vstack\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct vstack}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct varobj* var;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct vstack* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct cpstack\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct cpstack}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct cpstack* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct vlist\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct vlist}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct varobj* var;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct vlist* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct varobj_changelist_elem\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct varobj_changelist_elem}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct varobj* var;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum varobj_type_change type_changed;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct varobj_changelist_elem* next;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct varobj_changelist\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct varobj_changelist}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct varobj_changelist_elem* tail;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct varobj_changelist_elem* head;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct language_specific\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct language_specific}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum varobj_languages language;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int (*number_of_children)(struct varobj* parent);}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* (*make_name_of_child)(struct varobj* parent,int index);}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* (*path_expr_of_child)(struct varobj* parent,int index);}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct value* (*value_of_root)(struct varobj** root_handle,enum varobj_type_change* type_changed);}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct value* (*value_of_child)(struct varobj* parent,int index,int* lookup_dynamic_type);}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct type* (*type_of_child)(struct varobj* parent,int index);}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int (*variable_editable)(struct varobj* var);}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* (*value_of_variable)(struct varobj* var);}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type enum vsections\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum vsections}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 v_public;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 v_private;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 v_protected;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable varobj_format_string\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* varobj_format_string[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell breakpoint.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell varobj.c\cell\cell\row
\cell wrapper.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable varobj_language_string\par}
{\s5\f1\fs20\ql\sb50\sa50 const char* varobj_language_string[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell breakpoint.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell varobj.c\cell\cell\row
\cell wrapper.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable varobjdebug\par}
{\s5\f1\fs20\ql\sb50\sa50 int varobjdebug\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell varobj.c\cell\cell\row
Used in:\cell _initialize_varobj()\cell varobj.c\cell\row
\cell uninstall_variable()\cell varobj.c\cell\row
\cell varobj_update()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable varobj_runs_all_threads\par}
{\s5\f1\fs20\ql\sb50\sa50 int varobj_runs_all_threads\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell varobj.c\cell\cell\row
Used in:\cell _initialize_varobj()\cell varobj.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable varobj_use_dynamic_type\par}
{\s5\f1\fs20\ql\sb50\sa50 static int varobj_use_dynamic_type\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_varobj()\cell\cell\row
\cell c_value_of_root()\cell\cell\row
\cell cplus_path_expr_of_child()\cell\cell\row
\cell get_type()\cell\cell\row
\cell path_expr_of_root()\cell\cell\row
\cell value_of_child()\cell\cell\row
\cell varobj_create()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable languages\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct language_specific languages[vlang_end][sizeof(struct language_specific)]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell varobj_create()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable format_code\par}
{\s5\f1\fs20\ql\sb50\sa50 static int format_code[]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell c_value_of_variable()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable rootlist\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct varobj_root* rootlist\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell install_variable()\cell\cell\row
\cell uninstall_variable()\cell\cell\row
\cell varobj_list()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable rootcount\par}
{\s5\f1\fs20\ql\sb50\sa50 static int rootcount\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell install_variable()\cell\cell\row
\cell uninstall_variable()\cell\cell\row
\cell varobj_list()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable varobj_table\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct vlist** varobj_table\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_varobj()\cell\cell\row
\cell install_variable()\cell\cell\row
\cell uninstall_variable()\cell\cell\row
\cell varobj_get_handle()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_varobj()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_varobj ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), add_setshow_boolean_cmd(), add_setshow_zinteger_cmd()\cell\cell\row
Refs Func:\cell show_varobjdebug()\cell varobj.c\cell\row
Refs Var:\cell varobj_runs_all_threads\cell varobj.c\cell\row
\cell varobj_table\cell varobj.c\cell\row
\cell varobj_use_dynamic_type\cell varobj.c\cell\row
\cell varobjdebug\cell varobj.c\cell\row
\cell  setdebuglist, setlist, showdebuglist, showlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_changelist_pop()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct varobj* varobj_changelist_pop ( struct varobj_changelist* changelist, enum varobj_type_change* type_changed )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_create()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct varobj* varobj_create ( char* objname, const char* expression, CORE_ADDR frame, struct block* block, enum varobj_type type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell discard_cleanups()\cell utils.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell find_frame_addr_in_frame_chain()\cell varobj.c\cell\row
\cell frame_find_by_id()\cell frame.c\cell\row
\cell frame_id_p()\cell frame.c\cell\row
\cell free_current_contents()\cell utils.c\cell\row
\cell gdb_value_fetch_lazy()\cell wrapper.c\cell\row
\cell get_frame_block()\cell blockframe.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell get_frame_pc()\cell frame.c\cell\row
\cell get_join_type()\cell varobj.c\cell\row
\cell get_selected_frame()\cell frame.c\cell\row
\cell install_variable()\cell varobj.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_free_variable()\cell varobj.c\cell\row
\cell make_cleanup_objfile_init_clear_hitlist()\cell objfiles.c\cell\row
\cell make_cleanup_set_restore_scheduler_locking_mode()\cell utils.c\cell\row
\cell new_root_variable()\cell varobj.c\cell\row
\cell objfile_detach_hitlist()\cell objfiles.c\cell\row
\cell release_value()\cell value.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell variable_default_display()\cell varobj.c\cell\row
\cell variable_language()\cell varobj.c\cell\row
\cell varobj_evaluate_expression()\cell varobj.c\cell\row
\cell varobj_evaluate_type()\cell varobj.c\cell\row
\cell varobj_fixup_value()\cell varobj.c\cell\row
\cell varobj_parse_exp_1()\cell varobj.c\cell\row
\cell varobj_pc_in_valid_block_p()\cell varobj.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell value_of_root()\cell varobj.c\cell\row
Refs Func:\cell null_cleanup()\cell utils.c\cell\row
Refs Var:\cell block_found\cell symtab.c\cell\row
\cell deprecated_selected_frame\cell frame.c\cell\row
\cell innermost_block\cell parse.c\cell\row
\cell languages\cell varobj.c\cell\row
\cell null_frame_id\cell frame.c\cell\row
\cell varobj_runs_all_threads\cell varobj.c\cell\row
\cell varobj_use_dynamic_type\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_delete()\par}
{\s5\f1\fs20\ql\sb50\sa50 int varobj_delete ( struct varobj* var, char*** dellist, int only_children )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell cppop()\cell varobj.c\cell\row
\cell cppush()\cell varobj.c\cell\row
\cell delete_variable()\cell varobj.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell c_value_of_root()\cell varobj.c\cell\row
\cell value_of_root()\cell varobj.c\cell\row
\cell varobj_delete_objfiles_vars()\cell varobj.c\cell\row
\cell varobj_update()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_delete_objfiles_vars()\par}
{\s5\f1\fs20\ql\sb50\sa50 void varobj_delete_objfiles_vars ( struct objfile* ofile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell make_cleanup_ui_out_notify_begin_end()\cell ui-out.c\cell\row
\cell objfile_on_hitlist_p()\cell objfiles.c\cell\row
\cell ui_out_field_string()\cell ui-out.c\cell\row
\cell varobj_delete()\cell varobj.c\cell\row
\cell varobj_list()\cell varobj.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell free_objfile_internal()\cell objfiles.c\cell\row
Refs Var:\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_evaluate_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 int varobj_evaluate_type ( struct expression* exp, struct value** value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell gdb_evaluate_type()\cell wrapper.c\cell\row
\cell make_cleanup_set_restore_print_closure()\cell eval.c\cell\row
Called by:\cell varobj_create()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_gen_name()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* varobj_gen_name ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell xstrprintf()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_get_attributes()\par}
{\s5\f1\fs20\ql\sb50\sa50 int varobj_get_attributes ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell variable_editable()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_get_display_format()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum varobj_display_formats varobj_get_display_format ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_get_dynamic_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* varobj_get_dynamic_type ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell type_sprint()\cell typeprint.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell value_zero()\cell valops.c\cell\row
\cell  xstrdup()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_get_expression()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* varobj_get_expression ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell name_of_variable()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_get_gdb_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* varobj_get_gdb_type ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_get_handle()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct varobj* varobj_get_handle ( char* objname )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Refs Var:\cell varobj_table\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_get_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum varobj_languages varobj_get_language ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell variable_language()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_get_num_children()\par}
{\s5\f1\fs20\ql\sb50\sa50 int varobj_get_num_children ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell number_of_children()\cell varobj.c\cell\row
Called by:\cell c_value_of_variable()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_get_objname()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* varobj_get_objname ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_get_path_expr()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* varobj_get_path_expr ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell path_expr_of_variable()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_get_resolved_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* varobj_get_resolved_type ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell varobj_get_type_internal()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_get_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* varobj_get_type ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell varobj_get_type_internal()\cell varobj.c\cell\row
Called by:\cell varobj_type_is_equal_p()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_get_type_internal()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* varobj_get_type_internal ( struct varobj* var, int check_typedef_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell remove_all_typedefs()\cell gdbtypes.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell type_sprint()\cell typeprint.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell value_zero()\cell valops.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell varobj_get_resolved_type()\cell varobj.c\cell\row
\cell varobj_get_type()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_get_type_struct()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct type* varobj_get_type_struct ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell get_type()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_get_valid_block()\par}
{\s5\f1\fs20\ql\sb50\sa50 void varobj_get_valid_block ( struct varobj* var, CORE_ADDR* start, CORE_ADDR* end )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_get_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* varobj_get_value ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell my_value_of_variable()\cell varobj.c\cell\row
Called by:\cell gdb_varobj_get_value()\cell wrapper.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_in_scope_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int varobj_in_scope_p ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_is_fake_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 int varobj_is_fake_child ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_list()\par}
{\s5\f1\fs20\ql\sb50\sa50 int varobj_list ( struct varobj*** varlist )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell warning()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell varobj_delete_objfiles_vars()\cell varobj.c\cell\row
Refs Var:\cell rootcount\cell varobj.c\cell\row
\cell rootlist\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_list_children()\par}
{\s5\f1\fs20\ql\sb50\sa50 int varobj_list_children ( struct varobj* var, struct varobj*** childlist )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell child_exists()\cell varobj.c\cell\row
\cell create_child()\cell varobj.c\cell\row
\cell make_name_of_child()\cell varobj.c\cell\row
\cell number_of_children()\cell varobj.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_parse_exp_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 int varobj_parse_exp_1 ( const char** stringptr, struct block* block, int comma, struct expression** expression )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell gdb_parse_exp_1()\cell wrapper.c\cell\row
\cell make_cleanup_set_restore_print_closure()\cell eval.c\cell\row
Called by:\cell varobj_create()\cell varobj.c\cell\row
\cell varobj_set_value()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_pc_in_valid_block_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int varobj_pc_in_valid_block_p ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell block_contains_pc()\cell block.c\cell\row
\cell frame_find_by_id()\cell frame.c\cell\row
\cell frame_relative_level()\cell frame.c\cell\row
\cell get_frame_pc()\cell frame.c\cell\row
Called by:\cell value_of_root()\cell varobj.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_set_display_format()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum varobj_display_formats varobj_set_display_format ( struct varobj* var, enum varobj_display_formats format )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell variable_default_display()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_set_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 int varobj_set_value ( struct varobj* var, char* expression )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell gdb_value_assign()\cell wrapper.c\cell\row
\cell make_cleanup_set_restore_scheduler_locking_mode()\cell utils.c\cell\row
\cell my_value_equal()\cell varobj.c\cell\row
\cell release_value()\cell value.c\cell\row
\cell value_free()\cell value.c\cell\row
\cell variable_editable()\cell varobj.c\cell\row
\cell varobj_evaluate_expression()\cell varobj.c\cell\row
\cell varobj_parse_exp_1()\cell varobj.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell input_radix\cell valprint.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_type_is_equal_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int varobj_type_is_equal_p ( struct varobj* old_var, struct varobj* new_var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell varobj_get_type()\cell varobj.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell value_of_root()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function varobj_update()\par}
{\s5\f1\fs20\ql\sb50\sa50 int varobj_update ( struct varobj** varp, struct varobj_changelist** changelist )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.h\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell frame_find_by_id()\cell frame.c\cell\row
\cell gdb_value_fetch_lazy()\cell wrapper.c\cell\row
\cell get_frame_id()\cell frame.c\cell\row
\cell my_value_equal()\cell varobj.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell value_free()\cell value.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell value_of_child()\cell varobj.c\cell\row
\cell value_of_root()\cell varobj.c\cell\row
\cell varobj_add_to_changelist()\cell varobj.c\cell\row
\cell varobj_changelist_init()\cell varobj.c\cell\row
\cell varobj_delete()\cell varobj.c\cell\row
\cell varobj_value_is_changeable_p()\cell varobj.c\cell\row
\cell vpop()\cell varobj.c\cell\row
\cell vpush()\cell varobj.c\cell\row
Refs Var:\cell deprecated_selected_frame\cell frame.c\cell\row
\cell gdb_stdlog\cell main.c\cell\row
\cell varobjdebug\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function c_make_name_of_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* c_make_name_of_child ( struct varobj* parent, int index )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell get_target_type()\cell varobj.c\cell\row
\cell get_type()\cell varobj.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell xstrprintf()\cell utils.c\cell\row
\cell  strlen(), xstrdup()\cell\cell\row
Called by:\cell cplus_make_name_of_child()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function c_number_of_children()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int c_number_of_children ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell get_target_type()\cell varobj.c\cell\row
\cell get_type()\cell varobj.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
Called by:\cell cplus_number_of_children()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function c_path_expr_of_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* c_path_expr_of_child ( struct varobj* parent, int index )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell child_exists()\cell varobj.c\cell\row
\cell error()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell name_of_variable()\cell varobj.c\cell\row
\cell path_expr_of_variable()\cell varobj.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___snprintf_chk(), __builtin_object_size(), strlen()\cell\cell\row
Called by:\cell cplus_path_expr_of_child()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function c_type_of_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* c_type_of_child ( struct varobj* parent, int index )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell child_exists()\cell varobj.c\cell\row
\cell error()\cell utils.c\cell\row
\cell get_target_type()\cell varobj.c\cell\row
\cell get_type()\cell varobj.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell name_of_variable()\cell varobj.c\cell\row
\cell varobj_lookup_struct_elt_type_by_index()\cell varobj.c\cell\row
\cell warning()\cell utils.c\cell\row
Called by:\cell cplus_type_of_child()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function c_value_of_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* c_value_of_child ( struct varobj* parent, int index, int* lookup_dynamic_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell child_exists()\cell varobj.c\cell\row
\cell coerce_ref()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gdb_value_ind()\cell wrapper.c\cell\row
\cell gdb_value_subscript()\cell wrapper.c\cell\row
\cell get_target_type()\cell varobj.c\cell\row
\cell get_type()\cell varobj.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell name_of_variable()\cell varobj.c\cell\row
\cell release_value()\cell value.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_from_longest()\cell value.c\cell\row
\cell varobj_value_struct_elt_by_index()\cell varobj.c\cell\row
\cell warning()\cell utils.c\cell\row
Called by:\cell cplus_value_of_child()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
Refs Var:\cell builtin_type_int\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function c_value_of_root()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* c_value_of_root ( struct varobj** var_handle, enum varobj_type_change* type_changed )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell frame_find_by_id()\cell frame.c\cell\row
\cell gdb_value_fetch_lazy()\cell wrapper.c\cell\row
\cell make_cleanup_set_restore_scheduler_locking_mode()\cell utils.c\cell\row
\cell number_of_children()\cell varobj.c\cell\row
\cell reinit_frame_cache()\cell frame.c\cell\row
\cell release_value()\cell value.c\cell\row
\cell select_frame()\cell frame.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell varobj_delete()\cell varobj.c\cell\row
\cell varobj_evaluate_expression()\cell varobj.c\cell\row
\cell varobj_fixup_value()\cell varobj.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell cplus_value_of_root()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
Refs Var:\cell varobj_use_dynamic_type\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function c_value_of_variable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* c_value_of_variable ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell common_val_print()\cell valprint.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell gdb_value_fetch_lazy()\cell wrapper.c\cell\row
\cell get_type()\cell varobj.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup_ui_file_delete()\cell utils.c\cell\row
\cell mem_fileopen()\cell ui-file.c\cell\row
\cell ui_file_xstrdup()\cell ui-file.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell varobj_get_num_children()\cell varobj.c\cell\row
\cell xstrprintf()\cell utils.c\cell\row
\cell  xstrdup()\cell\cell\row
Called by:\cell cplus_value_of_variable()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
Refs Var:\cell format_code\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function c_variable_editable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int c_variable_editable ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell get_type()\cell varobj.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell cplus_variable_editable()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function child_exists()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct varobj* child_exists ( struct varobj* var, int index )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Called by:\cell c_path_expr_of_child()\cell varobj.c\cell\row
\cell c_type_of_child()\cell varobj.c\cell\row
\cell c_value_of_child()\cell varobj.c\cell\row
\cell cplus_path_expr_of_child()\cell varobj.c\cell\row
\cell cplus_value_of_child()\cell varobj.c\cell\row
\cell value_of_child()\cell varobj.c\cell\row
\cell varobj_list_children()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cplus_class_num_children()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void cplus_class_num_children ( struct type* type, int children[3] )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Called by:\cell cplus_make_name_of_child()\cell varobj.c\cell\row
\cell cplus_number_of_children()\cell varobj.c\cell\row
\cell cplus_path_expr_of_child()\cell varobj.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cplus_make_name_of_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* cplus_make_name_of_child ( struct varobj* parent, int index )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell c_make_name_of_child()\cell varobj.c\cell\row
\cell cplus_class_num_children()\cell varobj.c\cell\row
\cell get_type_deref()\cell varobj.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell varobj_get_type_index_from_fake_child()\cell varobj.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell java_make_name_of_child()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cplus_number_of_children()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int cplus_number_of_children ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell c_number_of_children()\cell varobj.c\cell\row
\cell cplus_class_num_children()\cell varobj.c\cell\row
\cell get_type_deref()\cell varobj.c\cell\row
\cell name_of_variable()\cell varobj.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell java_number_of_children()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cplus_path_expr_of_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* cplus_path_expr_of_child ( struct varobj* parent, int index )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell c_path_expr_of_child()\cell varobj.c\cell\row
\cell child_exists()\cell varobj.c\cell\row
\cell cplus_class_num_children()\cell varobj.c\cell\row
\cell cplus_real_type_index_for_fake_child_index()\cell varobj.c\cell\row
\cell error()\cell utils.c\cell\row
\cell get_type_deref()\cell varobj.c\cell\row
\cell name_of_variable()\cell varobj.c\cell\row
\cell path_expr_of_variable()\cell varobj.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___snprintf_chk(), __builtin_object_size(), strcmp(), strlen()\cell\cell\row
Called by:\cell java_path_expr_of_child()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\cell varobj_use_dynamic_type\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cplus_real_type_index_for_fake_child_index()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int cplus_real_type_index_for_fake_child_index ( struct type* type, enum vsections prot, int num )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell cplus_path_expr_of_child()\cell varobj.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cplus_type_of_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* cplus_type_of_child ( struct varobj* parent, int index )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell c_type_of_child()\cell varobj.c\cell\row
\cell get_type_deref()\cell varobj.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell lookup_reference_type()\cell gdbtypes.c\cell\row
\cell varobj_lookup_struct_elt_type_by_index()\cell varobj.c\cell\row
Called by:\cell java_type_of_child()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cplus_value_of_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* cplus_value_of_child ( struct varobj* parent, int index, int* lookup_dynamic_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell c_value_of_child()\cell varobj.c\cell\row
\cell child_exists()\cell varobj.c\cell\row
\cell error()\cell utils.c\cell\row
\cell get_type_deref()\cell varobj.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell lookup_reference_type()\cell gdbtypes.c\cell\row
\cell release_value()\cell value.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_free()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell varobj_value_struct_elt_by_index()\cell varobj.c\cell\row
Called by:\cell java_value_of_child()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cplus_value_of_root()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* cplus_value_of_root ( struct varobj** var_handle, enum varobj_type_change* type_changed )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell c_value_of_root()\cell varobj.c\cell\row
Called by:\cell java_value_of_root()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cplus_value_of_variable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* cplus_value_of_variable ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell c_value_of_variable()\cell varobj.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  xstrdup()\cell\cell\row
Called by:\cell java_value_of_variable()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cplus_variable_editable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int cplus_variable_editable ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell c_variable_editable()\cell varobj.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell java_variable_editable()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cppop()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* cppop ( struct cpstack** pstack )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
Called by:\cell varobj_delete()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cppush()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void cppush ( struct cpstack** pstack, char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell delete_variable_1()\cell varobj.c\cell\row
\cell varobj_delete()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function create_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct varobj* create_child ( struct varobj* parent, int index, const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell get_join_type()\cell varobj.c\cell\row
\cell get_target_type()\cell varobj.c\cell\row
\cell install_variable()\cell varobj.c\cell\row
\cell new_variable()\cell varobj.c\cell\row
\cell save_child_in_parent()\cell varobj.c\cell\row
\cell type_of_child()\cell varobj.c\cell\row
\cell value_of_child()\cell varobj.c\cell\row
\cell variable_language()\cell varobj.c\cell\row
\cell xstrprintf()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell varobj_list_children()\cell varobj.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function delete_variable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int delete_variable ( struct cpstack** resultp, struct varobj* var, int only_children_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell delete_variable_1()\cell varobj.c\cell\row
Called by:\cell varobj_delete()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function delete_variable_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void delete_variable_1 ( struct cpstack** resultp, int* delcountp, struct varobj* var, int only_children_p, int remove_from_parent_p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell cppush()\cell varobj.c\cell\row
\cell delete_variable_1()\cell varobj.c\cell\row
\cell free_variable()\cell varobj.c\cell\row
\cell remove_child_from_parent()\cell varobj.c\cell\row
\cell uninstall_variable()\cell varobj.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  xstrdup()\cell\cell\row
Called by:\cell delete_variable()\cell varobj.c\cell\row
\cell delete_variable_1()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_free_variable_cleanup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_free_variable_cleanup ( void* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell free_variable()\cell varobj.c\cell\row
Used in:\cell make_cleanup_free_variable()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_frame_addr_in_frame_chain()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct frame_info* find_frame_addr_in_frame_chain ( CORE_ADDR frame_addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell get_frame_base_address()\cell frame.c\cell\row
\cell get_prev_frame()\cell frame.c\cell\row
Called by:\cell varobj_create()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function free_variable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void free_variable ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell free_current_contents()\cell utils.c\cell\row
\cell is_root_p()\cell varobj.c\cell\row
\cell value_free()\cell value.c\cell\row
\cell xfree()\cell utils.c\cell\row
Called by:\cell delete_variable_1()\cell varobj.c\cell\row
\cell do_free_variable_cleanup()\cell varobj.c\cell\row
\cell value_of_root()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_join_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static enum varobj_join_type get_join_type ( struct type* in_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell get_target_type()\cell varobj.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell create_child()\cell varobj.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_target_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* get_target_type ( struct type* type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
Called by:\cell c_make_name_of_child()\cell varobj.c\cell\row
\cell c_number_of_children()\cell varobj.c\cell\row
\cell c_type_of_child()\cell varobj.c\cell\row
\cell c_value_of_child()\cell varobj.c\cell\row
\cell create_child()\cell varobj.c\cell\row
\cell get_join_type()\cell varobj.c\cell\row
\cell get_type_deref()\cell varobj.c\cell\row
\cell varobj_fixup_value()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* get_type ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
Called by:\cell c_make_name_of_child()\cell varobj.c\cell\row
\cell c_number_of_children()\cell varobj.c\cell\row
\cell c_type_of_child()\cell varobj.c\cell\row
\cell c_value_of_child()\cell varobj.c\cell\row
\cell c_value_of_variable()\cell varobj.c\cell\row
\cell c_variable_editable()\cell varobj.c\cell\row
\cell get_type_deref()\cell varobj.c\cell\row
\cell value_of_root()\cell varobj.c\cell\row
\cell varobj_get_type_struct()\cell varobj.c\cell\row
\cell varobj_lookup_struct_elt_type_by_index()\cell varobj.c\cell\row
\cell varobj_value_is_changeable_p()\cell varobj.c\cell\row
Refs Var:\cell varobj_use_dynamic_type\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_type_deref()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* get_type_deref ( struct varobj* var, int* was_ptr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell get_target_type()\cell varobj.c\cell\row
\cell get_type()\cell varobj.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell cplus_make_name_of_child()\cell varobj.c\cell\row
\cell cplus_number_of_children()\cell varobj.c\cell\row
\cell cplus_path_expr_of_child()\cell varobj.c\cell\row
\cell cplus_type_of_child()\cell varobj.c\cell\row
\cell cplus_value_of_child()\cell varobj.c\cell\row
\cell path_expr_of_root()\cell varobj.c\cell\row
\cell varobj_get_type_index_from_fake_child()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function install_variable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int install_variable ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell is_root_p()\cell varobj.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell create_child()\cell varobj.c\cell\row
\cell value_of_root()\cell varobj.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
Refs Var:\cell rootcount\cell varobj.c\cell\row
\cell rootlist\cell varobj.c\cell\row
\cell varobj_table\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function is_root_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int is_root_p ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell free_variable()\cell varobj.c\cell\row
\cell install_variable()\cell varobj.c\cell\row
\cell path_expr_of_variable()\cell varobj.c\cell\row
\cell uninstall_variable()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function java_make_name_of_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* java_make_name_of_child ( struct varobj* parent, int index )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell cplus_make_name_of_child()\cell varobj.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Used in:\cell varobj.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function java_number_of_children()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int java_number_of_children ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell cplus_number_of_children()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function java_path_expr_of_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* java_path_expr_of_child ( struct varobj* parent, int index )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell cplus_path_expr_of_child()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function java_type_of_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* java_type_of_child ( struct varobj* parent, int index )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell cplus_type_of_child()\cell varobj.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Used in:\cell varobj.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function java_value_of_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* java_value_of_child ( struct varobj* parent, int index, int* lookup_dynamic_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell cplus_value_of_child()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function java_value_of_root()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* java_value_of_root ( struct varobj** var_handle, enum varobj_type_change* type_changed )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell cplus_value_of_root()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function java_value_of_variable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* java_value_of_variable ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell cplus_value_of_variable()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function java_variable_editable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int java_variable_editable ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell cplus_variable_editable()\cell varobj.c\cell\row
Used in:\cell varobj.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function make_cleanup_free_variable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct cleanup* make_cleanup_free_variable ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell make_cleanup()\cell utils.c\cell\row
Called by:\cell varobj_create()\cell varobj.c\cell\row
Refs Func:\cell do_free_variable_cleanup()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function make_name_of_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* make_name_of_child ( struct varobj* var, int index )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Called by:\cell varobj_list_children()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function my_value_equal()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int my_value_equal ( struct value* val1, struct value* volatile val2, int* error2 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell gdb_value_equal()\cell wrapper.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell value_lazy()\cell value.c\cell\row
Called by:\cell varobj_set_value()\cell varobj.c\cell\row
\cell varobj_update()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function my_value_of_variable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* my_value_of_variable ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Called by:\cell varobj_get_value()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function name_of_variable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* name_of_variable ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Called by:\cell c_path_expr_of_child()\cell varobj.c\cell\row
\cell c_type_of_child()\cell varobj.c\cell\row
\cell c_value_of_child()\cell varobj.c\cell\row
\cell cplus_number_of_children()\cell varobj.c\cell\row
\cell cplus_path_expr_of_child()\cell varobj.c\cell\row
\cell value_of_root()\cell varobj.c\cell\row
\cell varobj_get_expression()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function new_root_variable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct varobj* new_root_variable ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell new_variable()\cell varobj.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell varobj_create()\cell varobj.c\cell\row
Refs Var:\cell null_frame_id\cell frame.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function new_variable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct varobj* new_variable ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell create_child()\cell varobj.c\cell\row
\cell new_root_variable()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function number_of_children()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int number_of_children ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Called by:\cell c_value_of_root()\cell varobj.c\cell\row
\cell varobj_get_num_children()\cell varobj.c\cell\row
\cell varobj_list_children()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function path_expr_of_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* path_expr_of_child ( struct varobj* var, int index )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Called by:\cell path_expr_of_variable()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function path_expr_of_root()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* path_expr_of_root ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell get_type_deref()\cell varobj.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___snprintf_chk(), __builtin_object_size(), strlen()\cell\cell\row
Called by:\cell path_expr_of_variable()\cell varobj.c\cell\row
Refs Var:\cell varobj_use_dynamic_type\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function path_expr_of_variable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* path_expr_of_variable ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell is_root_p()\cell varobj.c\cell\row
\cell path_expr_of_child()\cell varobj.c\cell\row
\cell path_expr_of_root()\cell varobj.c\cell\row
\cell path_expr_of_variable()\cell varobj.c\cell\row
\cell  xstrdup()\cell\cell\row
Called by:\cell c_path_expr_of_child()\cell varobj.c\cell\row
\cell cplus_path_expr_of_child()\cell varobj.c\cell\row
\cell path_expr_of_variable()\cell varobj.c\cell\row
\cell varobj_get_path_expr()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function remove_child_from_parent()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void remove_child_from_parent ( struct varobj* parent, struct varobj* child )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
Called by:\cell delete_variable_1()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function safe_value_rtti_target_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* safe_value_rtti_target_type ( struct value* val, int* full, int* top, int* using_enc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell ui_file_new()\cell ui-file.c\cell\row
\cell value_rtti_target_type()\cell valops.c\cell\row
\cell  exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()\cell\cell\row
Called by:\cell varobj_fixup_value()\cell varobj.c\cell\row
Refs Var:\cell gdb_stderr\cell main.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function save_child_in_parent()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void save_child_in_parent ( struct varobj* parent, struct varobj* child )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell create_child()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_varobjdebug()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_varobjdebug ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_varobj()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function type_of_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* type_of_child ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell value_type()\cell value.c\cell\row
Called by:\cell create_child()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function uninstall_variable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void uninstall_variable ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell fprintf_unfiltered()\cell utils.c\cell\row
\cell is_root_p()\cell varobj.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell delete_variable_1()\cell varobj.c\cell\row
Refs Var:\cell gdb_stdlog\cell main.c\cell\row
\cell rootcount\cell varobj.c\cell\row
\cell rootlist\cell varobj.c\cell\row
\cell varobj_table\cell varobj.c\cell\row
\cell varobjdebug\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function value_of_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* value_of_child ( struct varobj* parent, int index, enum varobj_type_change* type_changed )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell child_exists()\cell varobj.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gdb_value_fetch_lazy()\cell wrapper.c\cell\row
\cell release_value()\cell value.c\cell\row
\cell value_free()\cell value.c\cell\row
\cell value_lazy()\cell value.c\cell\row
\cell varobj_fixup_value()\cell varobj.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell create_child()\cell varobj.c\cell\row
\cell varobj_update()\cell varobj.c\cell\row
Refs Var:\cell varobj_use_dynamic_type\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function value_of_root()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* value_of_root ( struct varobj** var_handle, enum varobj_type_change* type_changed )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell frame_id_eq()\cell frame.c\cell\row
\cell free_variable()\cell varobj.c\cell\row
\cell get_type()\cell varobj.c\cell\row
\cell install_variable()\cell varobj.c\cell\row
\cell name_of_variable()\cell varobj.c\cell\row
\cell savestring()\cell utils.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
\cell varobj_delete()\cell varobj.c\cell\row
\cell varobj_pc_in_valid_block_p()\cell varobj.c\cell\row
\cell varobj_type_is_equal_p()\cell varobj.c\cell\row
\cell  strlen()\cell\cell\row
Called by:\cell varobj_update()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function variable_default_display()\par}
{\s5\f1\fs20\ql\sb50\sa50 static enum varobj_display_formats variable_default_display ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Called by:\cell varobj_create()\cell varobj.c\cell\row
\cell varobj_set_display_format()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function variable_editable()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int variable_editable ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Called by:\cell varobj_get_attributes()\cell varobj.c\cell\row
\cell varobj_set_value()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function variable_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 static enum varobj_languages variable_language ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Called by:\cell create_child()\cell varobj.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
\cell varobj_get_language()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function varobj_add_to_changelist()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void varobj_add_to_changelist ( struct varobj_changelist* changelist, struct varobj* var, enum varobj_type_change type_changed )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell varobj_update()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function varobj_changelist_init()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct varobj_changelist* varobj_changelist_init ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell varobj_update()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function varobj_evaluate_expression()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int varobj_evaluate_expression ( struct expression* exp, struct value** value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell gdb_evaluate_expression()\cell wrapper.c\cell\row
\cell make_cleanup_set_restore_print_closure()\cell eval.c\cell\row
Called by:\cell c_value_of_root()\cell varobj.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
\cell varobj_set_value()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function varobj_fixup_value()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* varobj_fixup_value ( struct value* in_value, int use_dynamic_type, struct block* block, struct type** dynamic_type_handle, char** dynamic_type_name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell deprecated_set_value_type()\cell value.c\cell\row
\cell gdb_value_cast()\cell wrapper.c\cell\row
\cell get_closure_dynamic_type()\cell gdbtypes.c\cell\row
\cell get_target_type()\cell varobj.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell lookup_reference_type()\cell gdbtypes.c\cell\row
\cell safe_value_objc_target_type()\cell wrapper.c\cell\row
\cell safe_value_rtti_target_type()\cell varobj.c\cell\row
\cell value_copy()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memmove_chk(), __builtin___strcpy_chk(), __builtin_object_size(), __inline_memmove_chk(), __inline_strcpy_chk(), strlen()\cell\cell\row
Called by:\cell c_value_of_root()\cell varobj.c\cell\row
\cell value_of_child()\cell varobj.c\cell\row
\cell varobj_create()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function varobj_get_type_index_from_fake_child()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int varobj_get_type_index_from_fake_child ( struct varobj* parent, int index )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell get_type_deref()\cell varobj.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell cplus_make_name_of_child()\cell varobj.c\cell\row
\cell varobj_lookup_struct_elt_type_by_index()\cell varobj.c\cell\row
\cell varobj_value_struct_elt_by_index()\cell varobj.c\cell\row
Refs Var:\cell cplus_struct_default\cell gdbtypes.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function varobj_lookup_struct_elt_type_by_index()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct type* varobj_lookup_struct_elt_type_by_index ( struct varobj* parent, int index )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gdb_flush()\cell ui-file.c\cell\row
\cell get_type()\cell varobj.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell type_sprint()\cell typeprint.c\cell\row
\cell varobj_get_type_index_from_fake_child()\cell varobj.c\cell\row
Called by:\cell c_type_of_child()\cell varobj.c\cell\row
\cell cplus_type_of_child()\cell varobj.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function varobj_value_is_changeable_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int varobj_value_is_changeable_p ( struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell get_type()\cell varobj.c\cell\row
Called by:\cell varobj_update()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function varobj_value_struct_elt_by_index()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int varobj_value_struct_elt_by_index ( struct varobj* parent, volatile int iindex, struct value** ret_val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell coerce_array()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell value_ind()\cell valops.c\cell\row
\cell value_primitive_field()\cell value.c\cell\row
\cell value_static_field()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell varobj_get_type_index_from_fake_child()\cell varobj.c\cell\row
\cell  exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()\cell\cell\row
Called by:\cell c_value_of_child()\cell varobj.c\cell\row
\cell cplus_value_of_child()\cell varobj.c\cell\row
Refs Var:\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function vpop()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct varobj* vpop ( struct vstack** pstack )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
Called by:\cell varobj_update()\cell varobj.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function vpush()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void vpush ( struct vstack** pstack, struct varobj* var )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell varobj.c\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
Called by:\cell varobj_update()\cell varobj.c\cell\row
\intbl0
}
