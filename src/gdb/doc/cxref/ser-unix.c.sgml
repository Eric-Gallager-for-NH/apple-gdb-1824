<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF ser-unix.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for ser-unix.c of gdb.cxref.
<author>cxref

<sect>File ser-unix.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;serial.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;ser-base.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;ser-unix.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;fcntl.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;terminal.h&quot;</tt>
<itemize>
<item><tt>#include &lt;fcntl.h&gt;</tt>
<item><tt>#include &lt;sgtty.h&gt;</tt>
<item><tt>#include &lt;sys/ioctl.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;sys/socket.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define B19200 EXTA</tt><newline>
<p>
<tt>#define B38400 EXTB</tt><newline>

<sect1>Type struct hardwire_ttystate

<p>
<itemize>
<item><tt>struct hardwire_ttystate</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct sgttyb sgttyb;</tt><newline>
<item><tt>struct tchars tc;</tt><newline>
<item><tt>struct ltchars ltc;</tt><newline>
<item><tt>int lmode;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Local Variables

<p>
<bf>baudtab</bf><newline>
<tt>static struct {...} baudtab[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>rate_to_code()
</itemize>
</descrip>

<sect1>Global Function _initialize_ser_hardwire()

<p><tt>void _initialize_ser_hardwire ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>serial_add_interface()  :  serial.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>hardwire_close()  :  ser-unix.c
<item>hardwire_drain_output()  :  ser-unix.c
<item>hardwire_flush_input()  :  ser-unix.c
<item>hardwire_flush_output()  :  ser-unix.c
<item>hardwire_get_tty_state()  :  ser-unix.c
<item>hardwire_noflush_set_tty_state()  :  ser-unix.c
<item>hardwire_open()  :  ser-unix.c
<item>hardwire_print_tty_state()  :  ser-unix.c
<item>hardwire_raw()  :  ser-unix.c
<item>hardwire_readchar()  :  ser-unix.c
<item>hardwire_send_break()  :  ser-unix.c
<item>hardwire_set_tty_state()  :  ser-unix.c
<item>hardwire_setbaudrate()  :  ser-unix.c
<item>hardwire_setstopbits()  :  ser-unix.c
<item>ser_base_async()  :  ser-base.c
<item>ser_base_write()  :  ser-base.c
<item>ser_unix_read_prim()  :  ser-unix.c
<item>ser_unix_write_prim()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Global Function ser_unix_read_prim()

<p><tt>int ser_unix_read_prim ( struct serial* scb, size_t count )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>__error(), read()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Global Function ser_unix_write_prim()

<p><tt>int ser_unix_write_prim ( struct serial* scb, const void* buf, size_t len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>write()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Local Function do_hardwire_readchar()

<p><tt>static int do_hardwire_readchar ( struct serial* scb, int timeout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>wait_for()  :  ser-unix.c
<item>__error(), deprecated_ui_loop_hook(), read()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>hardwire_readchar()  :  ser-unix.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>deprecated_ui_loop_hook  :  top.c
</itemize>
</descrip>

<sect1>Local Function get_tty_state()

<p><tt>static int get_tty_state ( struct serial* scb, struct hardwire_ttystate* state )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ioctl()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hardwire_drain_output()  :  ser-unix.c
<item>hardwire_get_tty_state()  :  ser-unix.c
<item>hardwire_raw()  :  ser-unix.c
<item>hardwire_setbaudrate()  :  ser-unix.c
<item>hardwire_setstopbits()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Local Function hardwire_close()

<p><tt>static void hardwire_close ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>close()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Local Function hardwire_drain_output()

<p><tt>static int hardwire_drain_output ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_tty_state()  :  ser-unix.c
<item>ioctl()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Local Function hardwire_flush_input()

<p><tt>static int hardwire_flush_input ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ser_base_flush_input()  :  ser-base.c
<item>ioctl()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Local Function hardwire_flush_output()

<p><tt>static int hardwire_flush_output ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ioctl()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Local Function hardwire_get_tty_state()

<p><tt>static serial_ttystate hardwire_get_tty_state ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_tty_state()  :  ser-unix.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Local Function hardwire_noflush_set_tty_state()

<p><tt>static int hardwire_noflush_set_tty_state ( struct serial* scb, serial_ttystate new_ttystate, serial_ttystate old_ttystate )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>set_tty_state()  :  ser-unix.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Local Function hardwire_open()

<p><tt>static int hardwire_open ( struct serial* scb, const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>open()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Local Function hardwire_print_tty_state()

<p><tt>static void hardwire_print_tty_state ( struct serial* scb, serial_ttystate ttystate, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Local Function hardwire_raw()

<p><tt>static void hardwire_raw ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>get_tty_state()  :  ser-unix.c
<item>safe_strerror()  :  utils.c
<item>set_tty_state()  :  ser-unix.c
<item>__error()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stderr  :  main.c
</itemize>
</descrip>

<sect1>Local Function hardwire_readchar()

<p><tt>static int hardwire_readchar ( struct serial* scb, int timeout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>generic_readchar()  :  ser-base.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>do_hardwire_readchar()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Local Function hardwire_send_break()

<p><tt>static int hardwire_send_break ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ioctl(), select()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Local Function hardwire_set_tty_state()

<p><tt>static int hardwire_set_tty_state ( struct serial* scb, serial_ttystate ttystate )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>set_tty_state()  :  ser-unix.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Local Function hardwire_setbaudrate()

<p><tt>static int hardwire_setbaudrate ( struct serial* scb, int rate )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_tty_state()  :  ser-unix.c
<item>rate_to_code()  :  ser-unix.c
<item>set_tty_state()  :  ser-unix.c
<item>__error()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Local Function hardwire_setstopbits()

<p><tt>static int hardwire_setstopbits ( struct serial* scb, int num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_tty_state()  :  ser-unix.c
<item>set_tty_state()  :  ser-unix.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Local Function rate_to_code()

<p><tt>static int rate_to_code ( int rate )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>warning()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hardwire_setbaudrate()  :  ser-unix.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>baudtab  :  ser-unix.c
</itemize>
</descrip>

<sect1>Local Function set_tty_state()

<p><tt>static int set_tty_state ( struct serial* scb, struct hardwire_ttystate* state )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>ioctl()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hardwire_noflush_set_tty_state()  :  ser-unix.c
<item>hardwire_raw()  :  ser-unix.c
<item>hardwire_set_tty_state()  :  ser-unix.c
<item>hardwire_setbaudrate()  :  ser-unix.c
<item>hardwire_setstopbits()  :  ser-unix.c
</itemize>
</descrip>

<sect1>Local Function wait_for()

<p><tt>static int wait_for ( struct serial* scb, int timeout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>ser-unix.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>__builtin_bzero(), __error(), select()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_hardwire_readchar()  :  ser-unix.c
</itemize>
</descrip>

</article>
