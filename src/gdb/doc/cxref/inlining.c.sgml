<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF inlining.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for inlining.c of gdb.cxref.
<author>cxref

<sect>File inlining.c
<descrip>
<tag>References Functions:</tag>
<itemize>
<item>inlined_frame_prev_register()  :  frame.c
<item>inlined_frame_sniffer()  :  inlining.c
<item>inlined_frame_this_id()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>inlined_frame_unwinder  :  inlining.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;source.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;frame-unwind.h&quot;</tt>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;annotate.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbthread.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;complaints.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;buildsym.h&quot;</tt>
</itemize>

<sect1>Type struct rb_tree_node_list

<p>
<itemize>
<item><tt>struct rb_tree_node_list</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct rb_tree_node* node;</tt><newline>
<item><tt>struct rb_tree_node_list* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct record_list

<p>
<itemize>
<item><tt>struct record_list</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct inlined_call_stack_record* record;</tt><newline>
<item><tt>struct record_list* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct pending_node

<p>
<itemize>
<item><tt>struct pending_node</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct linetable_entry* entry;</tt><newline>
<item><tt>struct symtab* s;</tt><newline>
<item><tt>struct pending_node* next;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable global_inlined_call_stack

<p>
<tt>struct inlined_function_data global_inlined_call_stack</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-namespace.c
<item>cp-support.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>f-exp.c
<item>frame-unwind.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>linespec.c
<item>m2-exp.c
<item>macrotab.c
<item>maint.c
<item>mdebugread.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>printcmd.c
<item>remote.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>tramp-frame.c
<item>valops.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>add_item_to_inlined_subroutine_stack()  :  inlining.c
<item>adjust_current_inlined_subroutine_stack_position()  :  inlining.c
<item>at_inlined_call_site_p()  :  inlining.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>clear_inlined_subroutine_print_frames()  :  inlining.c
<item>copy_inlined_call_stack_record()  :  inlining.c
<item>current_inlined_bottom_call_site_line()  :  inlining.c
<item>current_inlined_subroutine_call_site_line()  :  inlining.c
<item>current_inlined_subroutine_call_stack_end_pc()  :  inlining.c
<item>current_inlined_subroutine_call_stack_eof_pc()  :  inlining.c
<item>current_inlined_subroutine_call_stack_start_pc()  :  inlining.c
<item>current_inlined_subroutine_calling_function_name()  :  inlining.c
<item>current_inlined_subroutine_function_name()  :  inlining.c
<item>current_inlined_subroutine_stack_position()  :  inlining.c
<item>current_inlined_subroutine_stack_size()  :  inlining.c
<item>current_inlined_subroutine_stack_symtab()  :  inlining.c
<item>find_correct_current_position()  :  inlining.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>flush_inlined_subroutine_frames()  :  inlining.c
<item>func_sym_has_inlining()  :  inlining.c
<item>in_inlined_function_call_p()  :  inlining.c
<item>inlined_frame_sniffer()  :  inlining.c
<item>inlined_frame_this_id()  :  inlining.c
<item>inlined_function_address_ranges_properly_contained()  :  inlining.c
<item>inlined_function_call_stack_pc()  :  inlining.c
<item>inlined_function_end_of_inlined_code_p()  :  inlining.c
<item>inlined_function_initialize_call_stack()  :  inlining.c
<item>inlined_function_reinitialize_call_stack()  :  inlining.c
<item>inlined_function_reset_frame_stack()  :  inlining.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>inlined_function_update_call_stack_pc()  :  inlining.c
<item>inlined_subroutine_adjust_position_for_breakpoint()  :  inlining.c
<item>inlined_subroutine_restore_after_dummy_call()  :  inlining.c
<item>inlined_subroutine_save_before_dummy_call()  :  inlining.c
<item>last_inlined_call_site_filename()  :  inlining.c
<item>print_inlined_frame()  :  inlining.c
<item>print_inlined_frames_lite()  :  inlining.c
<item>record_ranges_contains_pc()  :  inlining.c
<item>rest_of_line_contains_inlined_subroutine()  :  inlining.c
<item>restore_thread_inlined_call_stack()  :  inlining.c
<item>save_thread_inlined_call_stack()  :  inlining.c
<item>step_1_inlining()  :  infcmd.c
<item>step_into_current_inlined_subroutine()  :  inlining.c
<item>step_once()  :  infcmd.c
<item>verify_stack()  :  inlining.c
</itemize>
</descrip>

<sect1>Global Variable stepping_into_inlined_subroutine

<p>
<tt>int stepping_into_inlined_subroutine</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-namespace.c
<item>cp-support.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>f-exp.c
<item>frame-unwind.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>linespec.c
<item>m2-exp.c
<item>macrotab.c
<item>maint.c
<item>mdebugread.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>printcmd.c
<item>remote.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>tramp-frame.c
<item>valops.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>execute_command()  :  top.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
<item>verify_stack()  :  inlining.c
</itemize>
</descrip>

<sect1>Global Variable inlined_step_range_end

<p>
<tt>CORE_ADDR inlined_step_range_end</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-namespace.c
<item>cp-support.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>f-exp.c
<item>frame-unwind.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>linespec.c
<item>m2-exp.c
<item>macrotab.c
<item>maint.c
<item>mdebugread.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>printcmd.c
<item>remote.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>tramp-frame.c
<item>valops.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>inlined_function_update_call_stack()  :  inlining.c
<item>restore_thread_inlined_call_stack()  :  inlining.c
<item>save_thread_inlined_call_stack()  :  inlining.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
<item>verify_stack()  :  inlining.c
</itemize>
</descrip>

<sect1>Global Variable inlined_frame_unwind

<p>
<tt>const struct frame_unwind* const inlined_frame_unwind</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-namespace.c
<item>cp-support.c
<item>dbxread.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>f-exp.c
<item>frame-unwind.c
<item>frame.c
<item>gdbtypes.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>linespec.c
<item>m2-exp.c
<item>macrotab.c
<item>maint.c
<item>mdebugread.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>printcmd.c
<item>remote.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>tramp-frame.c
<item>valops.c
<item>varobj.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>frame_unwind_init()  :  frame-unwind.c
</itemize>
</descrip>

<sect1>External Variables

<p>
<bf>addressprint</bf><newline>
<tt>extern int addressprint</tt><newline>
<descrip>
<tag>Defined in:</tag>
<itemize>
<item>addressprint</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>temp_frame_stack</bf><newline>
<tt>static struct inlined_function_data temp_frame_stack</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_item_to_temp_frame_stack()
<item>copy_temp_frame_stack_record()
<item>current_inlined_bottom_call_site_line()
<item>current_inlined_subroutine_call_site_line()
<item>current_inlined_subroutine_call_stack_end_pc()
<item>current_inlined_subroutine_call_stack_eof_pc()
<item>current_inlined_subroutine_call_stack_start_pc()
<item>current_inlined_subroutine_calling_function_name()
<item>current_inlined_subroutine_function_name()
<item>current_inlined_subroutine_stack_symtab()
<item>current_tmp_frame_stack_position()
<item>flush_inlined_subroutine_frames()
<item>func_sym_has_inlining()
<item>inlined_frame_sniffer_helper()
<item>inlined_frame_this_id()
<item>inlined_function_initialize_call_stack()
<item>inlined_function_reset_frame_stack()
<item>last_inlined_call_site_filename()
<item>print_inlined_frame()
<item>print_inlined_frames_lite()
<item>reset_temp_frame_stack()
<item>tmp_frame_in_inlined_function_call_p()
<item>tmp_frame_record_ranges_contains_pc()
<item>update_tmp_frame_stack()
</itemize>
</descrip>
<p>
<bf>saved_call_stack</bf><newline>
<tt>static struct inlined_function_data saved_call_stack</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_item_to_inlined_subroutine_stack()
<item>inlined_function_initialize_call_stack()
<item>inlined_subroutine_restore_after_dummy_call()
<item>inlined_subroutine_save_before_dummy_call()
<item>reset_saved_call_stack()
</itemize>
</descrip>
<p>
<bf>call_stack_initialized</bf><newline>
<tt>static int call_stack_initialized</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>inlined_function_call_stack_initialized_p()
<item>inlined_function_initialize_call_stack()
</itemize>
</descrip>
<p>
<bf>inlined_frame_unwinder</bf><newline>
<tt>static const struct frame_unwind inlined_frame_unwinder</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>inlining.c
</itemize>
</descrip>

<sect1>Global Function add_symbol_to_inlined_subroutine_list()

<p><tt>void add_symbol_to_inlined_subroutine_list ( struct symbol* sym, struct pending** list )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_inlined_subroutine_scope()  :  dwarf2read.c
</itemize>
</descrip>

<sect1>Global Function adjust_current_inlined_subroutine_stack_position()

<p><tt>void adjust_current_inlined_subroutine_stack_position ( int i )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>insert_step_resume_breakpoint_at_sal()  :  infrun.c
<item>return_command()  :  stack.c
<item>step_into_current_inlined_subroutine()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function at_inlined_call_site_p()

<p><tt>int at_inlined_call_site_p ( char** file_name, int* line_num, int* column )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>current_inlined_subroutine_stack_position()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
<item>handle_inferior_event()  :  infrun.c
<item>print_frame()  :  stack.c
<item>print_frame_info()  :  stack.c
<item>step_1_inlining()  :  infcmd.c
<item>step_1_no_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>stop_pc  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function block_inlined_function()

<p><tt>struct symbol* block_inlined_function ( struct block* bl, struct bfd_section* section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_sect_line()  :  symtab.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>rb_tree_find_all_exact_matches()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_pc_sect_function()  :  blockframe.c
<item>get_frame_function_inlined()  :  blockframe.c
</itemize>
</descrip>

<sect1>Global Function check_for_additional_inlined_breakpoint_locations()

<p><tt>struct symtabs_and_lines check_for_additional_inlined_breakpoint_locations ( struct symtabs_and_lines sals, char** addr_string, struct expression** cond, char** cond_string, char*** new_addr_string, struct expression*** new_cond, char*** new_cond_string )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_line()  :  symtab.c
<item>objfile_get_first()  :  objfiles.c
<item>objfile_get_next()  :  objfiles.c
<item>search_tree_for_name()  :  inlining.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>strcmp(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>create_breakpoints()  :  breakpoint.c
</itemize>
</descrip>

<sect1>Global Function clear_inlined_subroutine_print_frames()

<p><tt>void clear_inlined_subroutine_print_frames ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>current_inlined_subroutine_stack_position()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>current_frame_command()  :  stack.c
<item>do_captured_thread_select()  :  thread.c
<item>down_command()  :  stack.c
<item>finish_tfind_command()  :  tracepoint.c
<item>frame_command()  :  stack.c
<item>info_threads_command()  :  thread.c
<item>normal_stop()  :  infrun.c
<item>restore_current_thread()  :  thread.c
<item>select_and_print_frame()  :  stack.c
<item>up_command()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function current_inlined_bottom_call_site_line()

<p><tt>int current_inlined_bottom_call_site_line ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_frame()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function current_inlined_subroutine_call_site_line()

<p><tt>int current_inlined_subroutine_call_site_line ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
<item>return_command()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function current_inlined_subroutine_call_stack_end_pc()

<p><tt>CORE_ADDR current_inlined_subroutine_call_stack_end_pc ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_frame_sal()  :  frame.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function current_inlined_subroutine_call_stack_eof_pc()

<p><tt>CORE_ADDR current_inlined_subroutine_call_stack_eof_pc ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>record_end_pc()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function current_inlined_subroutine_call_stack_start_pc()

<p><tt>CORE_ADDR current_inlined_subroutine_call_stack_start_pc ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>normal_stop()  :  infrun.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function current_inlined_subroutine_calling_function_name()

<p><tt>char* current_inlined_subroutine_calling_function_name ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>return_command()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function current_inlined_subroutine_function_name()

<p><tt>char* current_inlined_subroutine_function_name ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>return_command()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function current_inlined_subroutine_stack_position()

<p><tt>int current_inlined_subroutine_stack_position ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>at_inlined_call_site_p()  :  inlining.c
<item>clear_inlined_subroutine_print_frames()  :  inlining.c
<item>finish_inlined_subroutine_command()  :  infcmd.c
<item>flush_inlined_subroutine_frames()  :  inlining.c
<item>in_inlined_function_call_p()  :  inlining.c
<item>inlined_frame_sniffer()  :  inlining.c
<item>inlined_function_end_of_inlined_code_p()  :  inlining.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>rest_of_line_contains_inlined_subroutine()  :  inlining.c
<item>step_1_inlining()  :  infcmd.c
<item>step_into_current_inlined_subroutine()  :  inlining.c
<item>step_once()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function current_inlined_subroutine_stack_size()

<p><tt>int current_inlined_subroutine_stack_size ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>inlined_function_end_of_inlined_code_p()  :  inlining.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>save_thread_inlined_call_stack()  :  inlining.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function current_inlined_subroutine_stack_symtab()

<p><tt>struct symtab* current_inlined_subroutine_stack_symtab ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function find_next_inlined_subroutine()

<p><tt>void find_next_inlined_subroutine ( CORE_ADDR pc, CORE_ADDR* inline_start_pc, CORE_ADDR end_of_line )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_line()  :  symtab.c
<item>rb_tree_find_all_nodes_in_between()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>stop_pc  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function flush_inlined_subroutine_frames()

<p><tt>void flush_inlined_subroutine_frames ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>current_inlined_subroutine_stack_position()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>flush_cached_frames()  :  frame.c
<item>inlined_function_reset_frame_stack()  :  inlining.c
<item>restore_inferior_status()  :  infrun.c
<item>restore_thread_inlined_call_stack()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function func_sym_has_inlining()

<p><tt>int func_sym_has_inlining ( struct symbol* func_sym, struct frame_info* fi )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_relative_level()  :  frame.c
<item>get_frame_pc()  :  frame.c
<item>strcmp()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function func_sym_is_inlined_function()

<p><tt>int func_sym_is_inlined_function ( struct symbol* function )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_section()  :  objfiles.c
<item>rb_tree_find_all_exact_matches()  :  inlining.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_function_in_inferior()  :  valops.c
</itemize>
</descrip>

<sect1>Global Function in_inlined_function_call_p()

<p><tt>int in_inlined_function_call_p ( CORE_ADDR* inline_end_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>address_range_ending_pc()  :  inlining.c
<item>current_inlined_subroutine_stack_position()  :  inlining.c
<item>record_ranges_contains_pc()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>finish_command()  :  infcmd.c
<item>inlined_frame_sniffer()  :  inlining.c
<item>print_frame()  :  stack.c
<item>return_command()  :  stack.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>stop_pc  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function inlined_frame_sniffer()

<p><tt>int inlined_frame_sniffer ( const struct frame_unwind* self, struct frame_info* next_frame, void** this_prologue_cache )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>current_inlined_subroutine_stack_position()  :  inlining.c
<item>gdbarch_unwind_pc()  :  gdbarch.c
<item>gdbarch_unwind_pc_p()  :  gdbarch.c
<item>in_inlined_function_call_p()  :  inlining.c
<item>inlined_frame_sniffer_helper()  :  inlining.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>global_inlined_call_stack  :  inlining.c
<item>step_range_end  :  infcmd.c
<item>step_range_start  :  infcmd.c
<item>stop_pc  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function inlined_frame_this_id()

<p><tt>void inlined_frame_this_id ( struct frame_info* next_frame, void** this_prologue_cache, struct frame_id* this_id )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_relative_level()  :  frame.c
<item>gdbarch_unwind_dummy_id()  :  gdbarch.c
<item>get_frame_arch()  :  frame.c
<item>internal_error()  :  utils.c
<item>record_end_pc()  :  inlining.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function inlined_function_add_function_names()

<p><tt>void inlined_function_add_function_names ( struct objfile* objfile, CORE_ADDR low_pc, CORE_ADDR high_pc, int line, int column, const char* fn_name, const char* calling_fn_name, struct address_range_list* ranges, struct symbol* func_sym )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>paddr_nz()  :  utils.c
<item>rb_tree_find_all_matching_nodes()  :  inlining.c
<item>rb_tree_insert()  :  dwarf2read.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>strcmp(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>check_inlined_function_calls()  :  dwarf2read.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Global Function inlined_function_call_stack_initialized_p()

<p><tt>int inlined_function_call_stack_initialized_p ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>run_command_1()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>call_stack_initialized  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function inlined_function_call_stack_pc()

<p><tt>CORE_ADDR inlined_function_call_stack_pc ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>normal_stop()  :  infrun.c
<item>prepare_to_proceed()  :  infrun.c
<item>switch_to_thread()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function inlined_function_end_of_inlined_code_p()

<p><tt>int inlined_function_end_of_inlined_code_p ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>current_inlined_subroutine_stack_position()  :  inlining.c
<item>current_inlined_subroutine_stack_size()  :  inlining.c
<item>internal_error()  :  utils.c
<item>record_end_pc()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>insert_step_resume_breakpoint_at_sal()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function inlined_function_find_first_line()

<p><tt>int inlined_function_find_first_line ( struct symtab_and_line sal )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function inlined_function_initialize_call_stack()

<p><tt>void inlined_function_initialize_call_stack ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>run_command_1()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>call_stack_initialized  :  inlining.c
<item>global_inlined_call_stack  :  inlining.c
<item>saved_call_stack  :  inlining.c
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function inlined_function_reinitialize_call_stack()

<p><tt>void inlined_function_reinitialize_call_stack ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>reset_saved_call_stack()  :  inlining.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>inlined_function_update_call_stack()  :  inlining.c
<item>restore_thread_inlined_call_stack()  :  inlining.c
<item>run_command_1()  :  infcmd.c
<item>verify_stack()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function inlined_function_reset_frame_stack()

<p><tt>void inlined_function_reset_frame_stack ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>flush_inlined_subroutine_frames()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>backtrace_command_1()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function inlined_function_update_call_stack()

<p><tt>void inlined_function_update_call_stack ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_item_to_inlined_subroutine_stack()  :  inlining.c
<item>adjust_current_inlined_subroutine_stack_position()  :  inlining.c
<item>current_inlined_subroutine_stack_position()  :  inlining.c
<item>current_inlined_subroutine_stack_size()  :  inlining.c
<item>find_correct_current_position()  :  inlining.c
<item>find_pc_overlay()  :  symfile.c
<item>find_pc_sect_symtab()  :  symtab.c
<item>frame_id_eq()  :  frame.c
<item>get_current_frame()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>inlined_function_reinitialize_call_stack()  :  inlining.c
<item>inlined_function_update_call_stack_pc()  :  inlining.c
<item>insert_pending_node()  :  inlining.c
<item>overlay_mapped_address()  :  symfile.c
<item>pc_in_unmapped_range()  :  symfile.c
<item>record_ranges_contains_pc()  :  inlining.c
<item>step_into_current_inlined_subroutine()  :  inlining.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
<item>normal_stop()  :  infrun.c
<item>prepare_to_proceed()  :  infrun.c
<item>print_inlined_frames_lite()  :  inlining.c
<item>restore_thread_inlined_call_stack()  :  inlining.c
<item>switch_to_thread()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_allow_inlined_stepping  :  dwarf2read.c
<item>global_inlined_call_stack  :  inlining.c
<item>inlined_step_range_end  :  inlining.c
<item>step_frame_id  :  infcmd.c
<item>step_range_end  :  infcmd.c
<item>step_range_start  :  infcmd.c
<item>stepping_into_inlined_subroutine  :  inlining.c
<item>stepping_over_inlined_subroutine  :  infcmd.c
<item>stop_pc  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function inlined_function_update_call_stack_pc()

<p><tt>void inlined_function_update_call_stack_pc ( CORE_ADDR new_pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>inlined_function_update_call_stack()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function inlined_subroutine_adjust_position_for_breakpoint()

<p><tt>void inlined_subroutine_adjust_position_for_breakpoint ( struct breakpoint* b )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___snprintf_chk(), __builtin_object_size(), isdigit(), strcmp(), strlen(), strrchr(), strstr(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>bpstat_stop_status()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function inlined_subroutine_free_objfile_call_sites()

<p><tt>void inlined_subroutine_free_objfile_call_sites ( struct rb_tree_node* root )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>inlined_subroutine_free_objfile_call_sites()  :  inlining.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_objfile_internal()  :  objfiles.c
<item>inlined_subroutine_free_objfile_call_sites()  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function inlined_subroutine_free_objfile_data()

<p><tt>void inlined_subroutine_free_objfile_data ( struct rb_tree_node* root )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>inlined_subroutine_free_objfile_data()  :  inlining.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>free_objfile_internal()  :  objfiles.c
<item>inlined_subroutine_free_objfile_data()  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function inlined_subroutine_objfile_relocate()

<p><tt>void inlined_subroutine_objfile_relocate ( struct objfile* objfile, struct rb_tree_node* tree_node, struct section_offsets* deltas )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>executable_objfile()  :  objfiles.c
<item>internal_error()  :  utils.c
<item>update_inlined_data_addresses()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>objfile_relocate()  :  objfiles.c
</itemize>
</descrip>

<sect1>Global Function inlined_subroutine_restore_after_dummy_call()

<p><tt>void inlined_subroutine_restore_after_dummy_call ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>reset_saved_call_stack()  :  inlining.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>hand_function_call()  :  infcall.c
<item>normal_stop()  :  infrun.c
<item>restore_inferior_status()  :  infrun.c
<item>return_command()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>saved_call_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function inlined_subroutine_save_before_dummy_call()

<p><tt>void inlined_subroutine_save_before_dummy_call ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dummy_frame_push()  :  dummy-frame.c
<item>save_inferior_status()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>saved_call_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function is_at_stepping_ranges_end()

<p><tt>int is_at_stepping_ranges_end ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>stepping_ranges  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function is_within_stepping_ranges()

<p><tt>int is_within_stepping_ranges ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>handle_inferior_event()  :  infrun.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>stepping_ranges  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function last_inlined_call_site_filename()

<p><tt>char* last_inlined_call_site_filename ( struct frame_info* fi )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>frame_relative_level()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_frame()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function print_inlined_frame()

<p><tt>void print_inlined_frame ( struct frame_info* fi, int print_level, enum print_what print_what, int print_args, struct symtab_and_line sal, int call_site_line )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>find_pc_function()  :  blockframe.c
<item>fprintf_symbol_filtered()  :  utils.c
<item>frame_relative_level()  :  frame.c
<item>get_frame_base()  :  frame.c
<item>get_frame_pc()  :  frame.c
<item>make_cleanup_ui_out_stream_delete()  :  ui-out.c
<item>make_cleanup_ui_out_tuple_begin_end()  :  ui-out.c
<item>symtab_to_fullname()  :  source.c
<item>ui_out_field_core_addr()  :  ui-out.c
<item>ui_out_field_fmt_int()  :  ui-out.c
<item>ui_out_field_int()  :  ui-out.c
<item>ui_out_field_stream()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
<item>ui_out_stream_new()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>ui_out_wrap_hint()  :  ui-out.c
<item>update_tmp_frame_stack()  :  inlining.c
<item>xmalloc()  :  utils.c
<item>__builtin___snprintf_chk(), __builtin_object_size(), annotate_frame_address(), annotate_frame_address_end(), annotate_frame_args(), annotate_frame_begin(), annotate_frame_function_name(), annotate_frame_source_begin(), annotate_frame_source_end(), annotate_frame_source_file(), annotate_frame_source_file_end(), annotate_frame_source_line(), print_frame_more_info_hook(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_frame()  :  stack.c
<item>step_once()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>addressprint  :  valprint.c
<item>global_inlined_call_stack  :  inlining.c
<item>print_frame_more_info_hook  :  top.c
<item>stop_pc  :  infcmd.c
<item>temp_frame_stack  :  inlining.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function print_inlined_frames_lite()

<p><tt>void print_inlined_frames_lite ( struct ui_out* uiout, int with_names, int* frame_num, CORE_ADDR pc, CORE_ADDR fp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>find_pc_sect_section()  :  objfiles.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>make_cleanup_ui_out_tuple_begin_end()  :  ui-out.c
<item>ui_out_field_core_addr()  :  ui-out.c
<item>ui_out_field_int()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>update_tmp_frame_stack()  :  inlining.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___snprintf_chk(), __builtin_object_size(), strlen()
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function rest_of_line_contains_inlined_subroutine()

<p><tt>int rest_of_line_contains_inlined_subroutine ( CORE_ADDR* end_of_line )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>current_inlined_subroutine_stack_position()  :  inlining.c
<item>find_line_pc()  :  symtab.c
<item>find_pc_line()  :  symtab.c
<item>rb_tree_find_all_nodes_in_between()  :  inlining.c
<item>record_end_pc()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_allow_inlined_stepping  :  dwarf2read.c
<item>global_inlined_call_stack  :  inlining.c
<item>stop_pc  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Function restore_thread_inlined_call_stack()

<p><tt>void restore_thread_inlined_call_stack ( ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_thread_id()  :  thread.c
<item>flush_inlined_subroutine_frames()  :  inlining.c
<item>inlined_function_reinitialize_call_stack()  :  inlining.c
<item>inlined_function_update_call_stack()  :  inlining.c
<item>internal_error()  :  utils.c
<item>pid_to_thread_id()  :  thread.c
<item>read_pc_pid()  :  regcache.c
<item>__builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>load_infrun_state()  :  thread.c
<item>switch_to_thread()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>inlined_step_range_end  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function save_thread_inlined_call_stack()

<p><tt>void save_thread_inlined_call_stack ( ptid_t ptid )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>current_inlined_subroutine_stack_size()  :  inlining.c
<item>find_thread_id()  :  thread.c
<item>pid_to_thread_id()  :  thread.c
<item>xmalloc()  :  utils.c
<item>__builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>save_infrun_state()  :  thread.c
<item>switch_to_thread()  :  thread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>inlined_step_range_end  :  inlining.c
</itemize>
</descrip>

<sect1>Global Function step_into_current_inlined_subroutine()

<p><tt>void step_into_current_inlined_subroutine ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>adjust_current_inlined_subroutine_stack_position()  :  inlining.c
<item>current_inlined_subroutine_stack_position()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>inlined_function_update_call_stack()  :  inlining.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>stop_pc  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function add_item_to_inlined_subroutine_stack()

<p><tt>static void add_item_to_inlined_subroutine_stack ( struct linetable_entry* item, struct symtab* s, struct bfd_section* section )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>copy_inlined_call_stack_record()  :  inlining.c
<item>find_function_names_and_address_ranges()  :  inlining.c
<item>find_pc_symtab()  :  symtab.c
<item>internal_error()  :  utils.c
<item>verify_stack()  :  inlining.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>inlined_function_update_call_stack()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>saved_call_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function add_item_to_temp_frame_stack()

<p><tt>static void add_item_to_temp_frame_stack ( struct linetable_entry* item, struct symtab* s, struct bfd_section* section )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>copy_temp_frame_stack_record()  :  inlining.c
<item>find_function_names_and_address_ranges()  :  inlining.c
<item>find_pc_symtab()  :  symtab.c
<item>internal_error()  :  utils.c
<item>xmalloc()  :  utils.c
<item>xrealloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>update_tmp_frame_stack()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function add_to_list()

<p><tt>static void add_to_list ( struct inlined_call_stack_record* new_record, struct record_list** found_records )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>search_tree_for_name()  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function address_range_ending_pc()

<p><tt>static CORE_ADDR address_range_ending_pc ( struct address_range_list* ranges )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>find_pc_line()  :  symtab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>in_inlined_function_call_p()  :  inlining.c
<item>record_end_pc()  :  inlining.c
<item>tmp_frame_in_inlined_function_call_p()  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function copy_inlined_call_stack_record()

<p><tt>static void copy_inlined_call_stack_record ( int from, int to )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_item_to_inlined_subroutine_stack()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function copy_temp_frame_stack_record()

<p><tt>static void copy_temp_frame_stack_record ( int from, int to )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_item_to_temp_frame_stack()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function current_tmp_frame_stack_position()

<p><tt>static int current_tmp_frame_stack_position ( void )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>inlined_frame_sniffer_helper()  :  inlining.c
<item>tmp_frame_in_inlined_function_call_p()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function find_correct_current_position()

<p><tt>static int find_correct_current_position ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>record_end_pc()  :  inlining.c
<item>record_ranges_contains_pc()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>inlined_function_update_call_stack()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
<item>stop_pc  :  infcmd.c
</itemize>
</descrip>

<sect1>Local Function find_function_names_and_address_ranges()

<p><tt>static void find_function_names_and_address_ranges ( struct objfile* objfile, struct inlined_call_stack_record* record )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>rb_tree_find_all_matching_nodes()  :  inlining.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_item_to_inlined_subroutine_stack()  :  inlining.c
<item>add_item_to_temp_frame_stack()  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function inlined_frame_sniffer_helper()

<p><tt>static int inlined_frame_sniffer_helper ( struct frame_info* next_frame, CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>current_tmp_frame_stack_position()  :  inlining.c
<item>tmp_frame_in_inlined_function_call_p()  :  inlining.c
<item>update_tmp_frame_stack()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>inlined_frame_sniffer()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function inlined_function_address_ranges_properly_contained()

<p><tt>static int inlined_function_address_ranges_properly_contained ( int outer, int inner )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>verify_stack()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function insert_pending_node()

<p><tt>static void insert_pending_node ( struct pending_node* node, struct pending_node** list )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>inlined_function_update_call_stack()  :  inlining.c
<item>update_tmp_frame_stack()  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function rb_tree_find_all_exact_matches()

<p><tt>static void rb_tree_find_all_exact_matches ( struct rb_tree_node* root, CORE_ADDR key, CORE_ADDR third_key, struct rb_tree_node_list** matches )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>rb_tree_find_all_exact_matches()  :  inlining.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>block_inlined_function()  :  inlining.c
<item>func_sym_is_inlined_function()  :  inlining.c
<item>rb_tree_find_all_exact_matches()  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function rb_tree_find_all_matching_nodes()

<p><tt>static void rb_tree_find_all_matching_nodes ( struct rb_tree_node* root, CORE_ADDR key, int secondary_key, CORE_ADDR third_key, struct rb_tree_node_list** matches )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>rb_tree_find_all_matching_nodes()  :  inlining.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_function_names_and_address_ranges()  :  inlining.c
<item>inlined_function_add_function_names()  :  inlining.c
<item>rb_tree_find_all_matching_nodes()  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function rb_tree_find_all_nodes_in_between()

<p><tt>static void rb_tree_find_all_nodes_in_between ( struct rb_tree_node* root, CORE_ADDR start, CORE_ADDR end, struct rb_tree_node_list** matches )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>rb_tree_find_all_nodes_in_between()  :  inlining.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>find_next_inlined_subroutine()  :  inlining.c
<item>rb_tree_find_all_nodes_in_between()  :  inlining.c
<item>rest_of_line_contains_inlined_subroutine()  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function rb_tree_find_next_node()

<p><tt>static struct rb_tree_node* rb_tree_find_next_node ( struct rb_tree_node* root, long long key, int secondary_key, long long third_key )</tt><newline>

<sect1>Local Function record_end_pc()

<p><tt>static CORE_ADDR record_end_pc ( struct inlined_call_stack_record record )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>address_range_ending_pc()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>current_inlined_subroutine_call_stack_eof_pc()  :  inlining.c
<item>find_correct_current_position()  :  inlining.c
<item>inlined_frame_this_id()  :  inlining.c
<item>inlined_function_end_of_inlined_code_p()  :  inlining.c
<item>rest_of_line_contains_inlined_subroutine()  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function record_ranges_contains_pc()

<p><tt>static int record_ranges_contains_pc ( int i, CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>find_correct_current_position()  :  inlining.c
<item>in_inlined_function_call_p()  :  inlining.c
<item>inlined_function_update_call_stack()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_inlined_call_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function reset_saved_call_stack()

<p><tt>static void reset_saved_call_stack ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>inlined_function_reinitialize_call_stack()  :  inlining.c
<item>inlined_subroutine_restore_after_dummy_call()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>saved_call_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function reset_temp_frame_stack()

<p><tt>static void reset_temp_frame_stack ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>update_tmp_frame_stack()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function search_tree_for_name()

<p><tt>static void search_tree_for_name ( struct rb_tree_node* root, char* name, struct record_list** found_records )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>add_to_list()  :  inlining.c
<item>search_tree_for_name()  :  inlining.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>check_for_additional_inlined_breakpoint_locations()  :  inlining.c
<item>search_tree_for_name()  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function tmp_frame_in_inlined_function_call_p()

<p><tt>static int tmp_frame_in_inlined_function_call_p ( CORE_ADDR cur_pc, CORE_ADDR* inline_end_pc )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>address_range_ending_pc()  :  inlining.c
<item>current_tmp_frame_stack_position()  :  inlining.c
<item>tmp_frame_record_ranges_contains_pc()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>inlined_frame_sniffer_helper()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function tmp_frame_record_ranges_contains_pc()

<p><tt>static int tmp_frame_record_ranges_contains_pc ( int i, CORE_ADDR cur_pc )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>tmp_frame_in_inlined_function_call_p()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function update_inlined_data_addresses()

<p><tt>static void update_inlined_data_addresses ( CORE_ADDR offset, struct rb_tree_node* tree )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>update_inlined_data_addresses()  :  inlining.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>inlined_subroutine_objfile_relocate()  :  inlining.c
<item>update_inlined_data_addresses()  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function update_tmp_frame_stack()

<p><tt>static void update_tmp_frame_stack ( CORE_ADDR pc )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>add_item_to_temp_frame_stack()  :  inlining.c
<item>find_pc_overlay()  :  symfile.c
<item>find_pc_sect_symtab()  :  symtab.c
<item>insert_pending_node()  :  inlining.c
<item>overlay_mapped_address()  :  symfile.c
<item>pc_in_unmapped_range()  :  symfile.c
<item>reset_temp_frame_stack()  :  inlining.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>inlined_frame_sniffer_helper()  :  inlining.c
<item>print_inlined_frame()  :  inlining.c
<item>print_inlined_frames_lite()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_allow_inlined_stepping  :  dwarf2read.c
<item>temp_frame_stack  :  inlining.c
</itemize>
</descrip>

<sect1>Local Function verify_stack()

<p><tt>static void verify_stack ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>inlining.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>flush_cached_frames()  :  frame.c
<item>inlined_function_address_ranges_properly_contained()  :  inlining.c
<item>inlined_function_reinitialize_call_stack()  :  inlining.c
<item>internal_error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_item_to_inlined_subroutine_stack()  :  inlining.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dwarf2_allow_inlined_stepping  :  dwarf2read.c
<item>finishing_inlined_subroutine  :  infcmd.c
<item>global_inlined_call_stack  :  inlining.c
<item>inlined_step_range_end  :  inlining.c
<item>stepping_into_inlined_subroutine  :  inlining.c
<item>stepping_over_inlined_subroutine  :  infcmd.c
</itemize>
</descrip>

</article>
