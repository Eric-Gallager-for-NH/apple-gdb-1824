# -*- coding: utf-8; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- vim:fenc=utf-8:et:sw=2:ts=2:sts=2

name: cooljeanius/apple-gdb-1824-macos
on:
  push:
    branches:
      - "**/*"
  pull_request:
jobs:
  test:
    runs-on: macos-latest
    steps:
    - name: checkout
      uses: actions/checkout@v4
    - run: brew update
    - name: Install dependencies with Homebrew
      env:
        HOMEBREW_NO_EMOJI: 1
        HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
        HOMEBREW_VERBOSE: 1
        HOMEBREW_VERBOSE_USING_DOTS: 1
      run: |
        if test ${{ matrix.compiler }} == clang; then \
          COMPILER_FORMULA="clang-build-analyzer"; \
        elif test ${{ matrix.compiler }} == gcc; then \
          COMPILER_FORMULA="libgccjit"; \
        else \
          COMPILER_FORMULA=""; \
        fi
        brew install autogen texi2html texinfo deja-gnu expect dmalloc fastjar openssl@3 gperf help2man ant-contrib findutils grep coreutils remake byacc texlive gawk "${COMPILER_FORMULA}"
    - run: test -e ./.profile_generic && test -r ./.profile_generic && source ./.profile_generic && (env | uniq | sort | uniq)
    - run: ./configure --enable-silent-rules CC=${{ matrix.compiler }} OBJC=${{ matrix.compiler }}
    - run: make -ki -C libcheckpoint || make -ki -C libcheckpoint -f Makefile_orig || make -ki -C macsbug || make -ki -C macsbug/gdb_plugin_support || (if test -x "$(which ant)"; then ant; else echo "ant missing"; fi)
    - run: if test ! -e libcheckpoint/libcheckpoint.dylib; then make -ki -C libcheckpoint -f Makefile_orig RC_CFLAGS="-std=gnu89 -w -Wno-error" || make -ki -C macsbug || make -ki -C macsbug/gdb_plugin_support || (if test -x "$(which ant)"; then ant; else echo "ant missing"; fi); else stat libcheckpoint/libcheckpoint.dylib; fi
    - run: if test -d .. && test -w .. && test ! -e ../gdb; then (pushd .. && ln -sv apple-gdb-1824 gdb && readlink gdb && popd); else stat .. && ls ..; fi
    - run: (if test -x "$(which ant)"; then if test ! -d build; then mkdir build; elif test ! -d "${HOME}"/work/apple-gdb-1824/build; then mkdir -pv "${HOME}"/work/apple-gdb-1824/build; fi; ant; else echo "ant missing"; fi) || (if test -x ./gradlew; then (./gradlew build || ./gradlew assemble || ./gradlew); elif test -r ./gradlew; then sh ./gradlew; elif test -e ./gradlew; then stat ./gradlew; else echo "gradlewrapper missing"; fi) || (if test -x "$(which gradle)"; then gradle; else echo "gradle missing"; fi) || (if test -x ~rc/bin/buildit; then sudo ~rc/bin/buildit "$(pwd)" -arch ppc -arch i386 -arch armv5 -target cross -project gdb -release RELEASENAME RC_CROSS_ARCHS=armv6; else echo "buildit missing"; fi) || ls
    - run: (if test -x ./gradlew; then (./gradlew build || ./gradlew assemble || ./gradlew); elif test -r ./gradlew; then sh ./gradlew; elif test -e ./gradlew; then stat ./gradlew; else echo "gradlewrapper missing" >&2; fi) || (if test -x "$(which gradle)"; then gradle; else echo "gradle missing"; fi) || (if test -x ~rc/bin/buildit; then sudo ~rc/bin/buildit "$(pwd)" -arch ppc -arch i386 -arch armv5 -target cross -project gdb -release RELEASENAME RC_CROSS_ARCHS=armv6; else echo "buildit missing"; fi) || ls
    - run: cd src && ./configure --disable-werror --disable-opts-test --enable-carbon-framework --enable-debug-symbols-framework --enable-64-bit-bfd --enable-silent-rules CC=${{ matrix.compiler }} OBJC=${{ matrix.compiler }}
    - run: cd src && make configure-bfd
    - run: cd src && make -C bfd headers
    - run: cd src && if test ! -e bfd/bfd.h; then make -C bfd bfd.h; else stat bfd/bfd.h; fi
    - run: cd src && make -C bfd diststuff
    - run: cd src && make all-bfd
    - run: if test ! -e macsbug/MacsBug_plugin; then make -ki -C macsbug || make -ki -C macsbug/gdb_plugin_support || (if test -x "$(which ant)"; then ant; else echo "ant missing"; fi); else stat macsbug/MacsBug_plugin; fi
    - run: if test ! -e macsbug/gdb_plugin_support/gdb_plugin_support.o; then make -ki -C macsbug/gdb_plugin_support || (if test -x "$(which ant)"; then ant; fi) || (for cfile in macsbug/gdb_plugin_support/*.c; do ${{ matrix.compiler }} -c "${cfile}" || stat "${cfile}"; done); else stat macsbug/gdb_plugin_support/gdb_plugin_support.o; fi
    - run: cd src && make all-opcodes
    - run: cd src && make configure-binutils
    - name: Backup that annoying arparse.h header
      run: |
        cd src/binutils
        make arparse.h
        if test ! -e arparse.h; then \
          make my_arparse.h; \
        fi
        if test ! -f arparse.h; then \
          remake arparse.c; \
        fi
        # shellcheck disable=SC2046
        if test ! -e arparse.h; then \
          /bin/sh ./../ylwrap arparse.y y.tab.c arparse.c y.tab.h "$(echo arparse.c | sed -e s/cc$/hh/ -e s/cpp$/hpp/ -e s/cxx$/hxx/ -e s/c++$/h++/ -e s/c$/h/)" y.output arparse.output -- $(if [ -f ../bison/bison ]; then echo ../bison/bison -y -L./../bison/; else echo bison -o y.tab.c; fi) -d -t -v -k; \
        fi
        if test -e arparse.h; then \
          if test ! -e ../bfd/arparse.h; then \
            cp -v arparse.h ../bfd; \
          elif test ! -e ../include/arparse.h; then \
            cp -v arparse.h ../include; \
          fi; \
        else \
          ls ./*.h || ls || pwd; \
        fi
    - run: cd src && make all-binutils
    - run: cd src && make all-cgen
    - run: cd src && make all-libiberty
    - run: cd src && make all-intl
    - run: cd src && make all-electric-fence
    - run: cd src && make all-etc
    - run: cd src && make all-libdecnumber
    - run: cd src && make all-mmalloc
    - run: cd src && make configure-readline
    - run: cd src && for dir in libtool_gnu sim utils tcl expect dejagnu itcl tk libgui; do if test -e ${dir}/configure; then (echo "configuring in ${dir}" && make configure-${dir}); elif test -d ${dir}; then ls ${dir}/configure*; else echo "skipping configuring in ${dir}"; fi; done
    - run: cd src && for dir in sim utils tcl expect dejagnu itcl tk libgui; do if test -e ${dir}/Makefile; then (echo "building in ${dir}" && make -C ${dir}); elif test -d ${dir}; then ls ${dir}/Makefile*; else echo "skipping ${dir}"; fi; done
    - run: cd src && make configure-gdb
    - run: cd src && make all-gdb
    - name: Full build to get anything that might have been missed
      run: |
        cd src
        if test -x "$(which nproc)" && test "$(nproc)" -ge 2; then \
          echo "nproc says we can use $(nproc) build jobs"; \
          (make -j"$(nproc)" || remake); \
        elif test -x "$(which gnproc)" && test "$(gnproc)" -ge 2; then \
          echo "gnproc says we can use $(gnproc) build jobs"; \
          (make -j"$(gnproc)" || remake); \
        else \
          echo "on the slow path..."; \
          (make || remake); \
        fi
    - run: cd src && make check-libiberty
    - run: cd src && make -C tcl/unix tcltest
    - run: cd src && for dir in cgen sim expect dejagnu itcl libgui; do if test -r ${dir}/Makefile; then (echo "running testsuite for ${dir}" && make check-${dir} V=0 RUNTESTFLAGS="-v"); elif test -d ${dir}; then ls ${dir}/Makefile*; else echo "skipping testing ${dir}"; fi; done
    - name: Possibly do static analysis
      run: |
        cd src
        if test ${{ matrix.compiler }} == clang; then \
          make check-bfd; \
          make check-mmalloc; \
          cd electric-fence; \
          make check-local || make check info dvi stamp-framework ls; \
        elif test ${{ matrix.compiler }} == gcc; then \
          pushd bfd; \
          make check-DEJAGNU; \
          popd; \
          pushd mmalloc; \
          make info dvi stamp-framework-headers ls; \
          popd; \
          pushd electric-fence; \
          make check info dvi stamp-framework ls; \
          popd; \
        else \
          echo "error, unhandled compiler!" >&2 && exit 1; \
        fi
    - run: cd src && make check-opcodes
    # (dejagnu is now moved into the loop above)
    - run: cd src && make check-intl
    - run: cd src && make check-binutils
    - run: cd src && make check-utils
    - run: time (pwd && ls)
      if: "${{ success() }}"
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.0.0
      if: "${{ success() }}"
      with:
        # Artifact name
        name: apple-gdb-1824-macos-${{ matrix.compiler }}-logfiles
        # A file, directory or wildcard pattern that describes what to upload
        path: |
            **/*.log
    - run: find . -name config.log -print0 | xargs cat | grep -i error | sort | uniq
      if: "${{ failure() }}"
    strategy:
      fail-fast: false
      matrix:
        compiler:
        - clang
        - gcc
