<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF memattr.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for memattr.c of gdb.cxref.
<author>cxref

<sect>File memattr.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;memattr.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>

<sect1>Global Variable default_mem_attrib

<p>
<tt>const struct mem_attrib default_mem_attrib</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>memattr.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>lookup_mem_region()  :  memattr.c
<item>mem_command()  :  memattr.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>mem_region_chain</bf><newline>
<tt>static struct mem_region* mem_region_chain</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>create_mem_region()
<item>lookup_mem_region()
<item>mem_clear()
<item>mem_delete()
<item>mem_disable()
<item>mem_disable_caching()
<item>mem_disable_command()
<item>mem_enable()
<item>mem_enable_caching()
<item>mem_enable_command()
<item>mem_info_command()
</itemize>
</descrip>
<p>
<bf>mem_number</bf><newline>
<tt>static int mem_number</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>create_mem_region()
</itemize>
</descrip>

<sect1>Global Function _initialize_mem()

<p><tt>void _initialize_mem ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>memattr.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_cmd(), add_com(), add_info()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>mem_command()  :  memattr.c
<item>mem_delete_command()  :  memattr.c
<item>mem_disable_command()  :  memattr.c
<item>mem_enable_command()  :  memattr.c
<item>mem_info_command()  :  memattr.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>deletelist, disablelist, enablelist
</itemize>
</descrip>

<sect1>Global Function lookup_mem_region()

<p><tt>struct mem_region* lookup_mem_region ( CORE_ADDR addr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>memattr.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>memory_xfer_partial()  :  target/target.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>default_mem_attrib  :  memattr.c
<item>mem_region_chain  :  memattr.c
</itemize>
</descrip>

<sect1>Global Function mem_disable_caching()

<p><tt>void mem_disable_caching ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>memattr.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>fill_symbuf()  :  dbxread.c
<item>stabsect_build_psymtabs()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>mem_region_chain  :  memattr.c
</itemize>
</descrip>

<sect1>Global Function mem_enable_caching()

<p><tt>void mem_enable_caching ( void* unusued )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>memattr.h
</itemize>
<tag>Used in:</tag>
<itemize>
<item>fill_symbuf()  :  dbxread.c
<item>stabsect_build_psymtabs()  :  dbxread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>mem_region_chain  :  memattr.c
</itemize>
</descrip>

<sect1>Local Function create_mem_region()

<p><tt>static struct mem_region* create_mem_region ( CORE_ADDR lo, CORE_ADDR hi, const struct mem_attrib* attrib )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>printf_unfiltered()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>mem_command()  :  memattr.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>mem_number  :  memattr.c
<item>mem_region_chain  :  memattr.c
</itemize>
</descrip>

<sect1>Local Function delete_mem_region()

<p><tt>static void delete_mem_region ( struct mem_region* m )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>mem_clear()  :  memattr.c
<item>mem_delete()  :  memattr.c
</itemize>
</descrip>

<sect1>Local Function mem_clear()

<p><tt>static void mem_clear ( void )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>delete_mem_region()  :  memattr.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>mem_delete_command()  :  memattr.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>mem_region_chain  :  memattr.c
</itemize>
</descrip>

<sect1>Local Function mem_command()

<p><tt>static void mem_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>create_mem_region()  :  memattr.c
<item>error()  :  utils.c
<item>parse_and_eval_address()  :  eval.c
<item>error_no_arg(), strcmp(), strtok()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mem()  :  memattr.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>default_mem_attrib  :  memattr.c
</itemize>
</descrip>

<sect1>Local Function mem_delete()

<p><tt>static void mem_delete ( int num )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>delete_mem_region()  :  memattr.c
<item>printf_unfiltered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>mem_delete_command()  :  memattr.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>mem_region_chain  :  memattr.c
</itemize>
</descrip>

<sect1>Local Function mem_delete_command()

<p><tt>static void mem_delete_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>dont_repeat()  :  top.c
<item>error()  :  utils.c
<item>mem_clear()  :  memattr.c
<item>mem_delete()  :  memattr.c
<item>query()  :  utils.c
<item>atoi(), dcache_invalidate()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mem()  :  memattr.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>target_dcache  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function mem_disable()

<p><tt>static void mem_disable ( int num )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>printf_unfiltered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>mem_disable_command()  :  memattr.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>mem_region_chain  :  memattr.c
</itemize>
</descrip>

<sect1>Local Function mem_disable_command()

<p><tt>static void mem_disable_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>mem_disable()  :  memattr.c
<item>atoi(), dcache_invalidate()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mem()  :  memattr.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>mem_region_chain  :  memattr.c
<item>target_dcache  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function mem_enable()

<p><tt>static void mem_enable ( int num )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>printf_unfiltered()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>mem_enable_command()  :  memattr.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>mem_region_chain  :  memattr.c
</itemize>
</descrip>

<sect1>Local Function mem_enable_command()

<p><tt>static void mem_enable_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>mem_enable()  :  memattr.c
<item>atoi(), dcache_invalidate()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mem()  :  memattr.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>mem_region_chain  :  memattr.c
<item>target_dcache  :  target/target.c
</itemize>
</descrip>

<sect1>Local Function mem_info_command()

<p><tt>static void mem_info_command ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>gdb_flush()  :  ui-file.c
<item>gdbarch_addr_bit()  :  gdbarch.c
<item>hex_string_custom()  :  utils.c
<item>printf_filtered()  :  utils.c
<item>printf_unfiltered()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_mem()  :  memattr.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>gdb_stdout  :  main.c
<item>mem_region_chain  :  memattr.c
</itemize>
</descrip>

</article>
