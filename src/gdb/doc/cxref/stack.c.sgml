<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF stack.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for stack.c of gdb.cxref.
<author>cxref

<sect>File stack.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;source.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<item><tt>#include &quot;gdb-events.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;inferior.h&quot;</tt>
<itemize>
<item><tt>#include &quot;breakpoint.h&quot;</tt>
<item><tt>#include &quot;target.h&quot;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;annotate.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;block.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;stack.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;dictionary.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;reggroups.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;regcache.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;solib.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
</itemize>

<sect1>Type struct print_stack_frame_args

<p>
<itemize>
<item><tt>struct print_stack_frame_args</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct frame_info* fi;</tt><newline>
<item><tt>int print_level;</tt><newline>
<item><tt>enum print_what print_what;</tt><newline>
<item><tt>int print_args;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct print_args_args

<p>
<itemize>
<item><tt>struct print_args_args</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct symbol* func;</tt><newline>
<item><tt>struct frame_info* fi;</tt><newline>
<item><tt>struct ui_file* stream;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct backtrace_command_args

<p>
<itemize>
<item><tt>struct backtrace_command_args</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>const char* count_exp;</tt><newline>
<item><tt>int show_locals;</tt><newline>
<item><tt>int from_tty;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct function_bounds

<p>
<itemize>
<item><tt>struct function_bounds</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>CORE_ADDR low;</tt><newline>
<item><tt>CORE_ADDR high;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable annotation_level

<p>
<tt>int annotation_level</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bcache.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>charset.c
<item>cli-out.c
<item>coff-pe-read.c
<item>coffread.c
<item>complaints.c
<item>completer.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>demangle.c
<item>dictionary.c
<item>disasm.c
<item>doublest.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>environ.c
<item>eval.c
<item>event-loop.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>interps.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod-cisco.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macrocmd.c
<item>macroexp.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>observer.c
<item>osabi.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>reggroups.c
<item>remote-fileio.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>ser-base.c
<item>ser-unix.c
<item>serial.c
<item>solib-null.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>ui-file.c
<item>ui-out.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>captured_main()  :  main.c
<item>change_annotation_level()  :  event-top.c
<item>command_line_handler()  :  event-top.c
<item>command_line_input()  :  top.c
<item>defaulted_query()  :  utils.c
<item>init_main()  :  top.c
<item>line_info()  :  source.c
<item>print_frame_info()  :  stack.c
<item>prompt_for_continue()  :  utils.c
<item>query()  :  utils.c
<item>step_1_inlining()  :  infcmd.c
<item>step_once()  :  infcmd.c
</itemize>
</descrip>

<sect1>Global Variable deprecated_selected_frame_level_changed_hook

<p>
<tt>void (*deprecated_selected_frame_level_changed_hook)(int)</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>ada-exp.c
<item>ada-lang.c
<item>ada-typeprint.c
<item>ada-valprint.c
<item>arch-utils.c
<item>ax-gdb.c
<item>ax-general.c
<item>bfd-target.c
<item>block.c
<item>blockframe.c
<item>breakpoint.c
<item>buildsym.c
<item>c-exp.c
<item>c-lang.c
<item>c-typeprint.c
<item>c-valprint.c
<item>coff-pe-read.c
<item>coffread.c
<item>corefile.c
<item>cp-abi.c
<item>cp-namespace.c
<item>cp-support.c
<item>cp-valprint.c
<item>dbxread.c
<item>disasm.c
<item>dummy-frame.c
<item>dwarf2-frame.c
<item>dwarf2expr.c
<item>dwarf2loc.c
<item>dwarf2read.c
<item>dwarfread.c
<item>elfread.c
<item>eval.c
<item>event-top.c
<item>expprint.c
<item>f-exp.c
<item>f-lang.c
<item>f-typeprint.c
<item>f-valprint.c
<item>findvar.c
<item>frame-base.c
<item>frame-unwind.c
<item>frame.c
<item>gdbarch.c
<item>gdbtypes.c
<item>gnu-v2-abi.c
<item>gnu-v3-abi.c
<item>hpacc-abi.c
<item>inf-loop.c
<item>infcall.c
<item>infcmd.c
<item>inflow.c
<item>infrun.c
<item>inlining.c
<item>jv-exp.c
<item>jv-lang.c
<item>jv-typeprint.c
<item>jv-valprint.c
<item>kod.c
<item>language.c
<item>linespec.c
<item>m2-exp.c
<item>m2-lang.c
<item>m2-typeprint.c
<item>m2-valprint.c
<item>macroscope.c
<item>macrotab.c
<item>main.c
<item>maint.c
<item>mdebugread.c
<item>mem-break.c
<item>memattr.c
<item>minsyms.c
<item>mipsread.c
<item>nlmread.c
<item>objc-exp.c
<item>objc-lang.c
<item>objfiles.c
<item>p-exp.c
<item>p-lang.c
<item>p-typeprint.c
<item>p-valprint.c
<item>parse.c
<item>printcmd.c
<item>regcache.c
<item>remote.c
<item>scm-exp.c
<item>scm-lang.c
<item>scm-valprint.c
<item>sentinel-frame.c
<item>solib.c
<item>source.c
<item>stabsread.c
<item>stack.c
<item>std-regs.c
<item>symfile-mem.c
<item>symfile.c
<item>symmisc.c
<item>symtab.c
<item>target/target.c
<item>target/x86-shared-tdep.c
<item>thread.c
<item>top.c
<item>tracepoint.c
<item>trad-frame.c
<item>tramp-frame.c
<item>typeprint.c
<item>user-regs.c
<item>utils.c
<item>valarith.c
<item>valops.c
<item>valprint.c
<item>value.c
<item>varobj.c
<item>wrapper.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>select_frame()  :  frame.c
</itemize>
</descrip>

<sect1>External Variables

<p>
<bf>addressprint</bf><newline>
<tt>extern int addressprint</tt><newline>
<descrip>
<tag>Defined in:</tag>
<itemize>
<item>addressprint</itemize>
</descrip>

<sect1>Global Function _initialize_stack()

<p><tt>void _initialize_stack ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_com(), add_com_alias(), add_info(), add_info_alias()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>args_info()  :  stack.c
<item>args_plus_locals_info()  :  stack.c
<item>backtrace_command()  :  stack.c
<item>backtrace_full_command()  :  stack.c
<item>catch_info()  :  stack.c
<item>current_frame_command()  :  stack.c
<item>down_command()  :  stack.c
<item>down_silently_command()  :  stack.c
<item>frame_command()  :  stack.c
<item>frame_info()  :  stack.c
<item>func_command()  :  stack.c
<item>locals_info()  :  stack.c
<item>return_command()  :  stack.c
<item>select_frame_command()  :  stack.c
<item>up_command()  :  stack.c
<item>up_silently_command()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>dbx_commands  :  main.c
<item>xdb_commands  :  main.c
</itemize>
</descrip>

<sect1>Global Function args_info()

<p><tt>void args_info ( const char* ignore, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_selected_frame()  :  frame.c
<item>print_frame_arg_vars()  :  stack.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>args_plus_locals_info()  :  stack.c
<item>trace_dump_command()  :  tracepoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stack()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

<sect1>Global Function find_relative_frame()

<p><tt>struct frame_info* find_relative_frame ( struct frame_info* frame, int* level_offset_ptr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_next_frame()  :  frame.c
<item>get_prev_frame()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>down_silently_base()  :  stack.c
<item>func_command()  :  stack.c
<item>parse_frame_specification_1()  :  stack.c
<item>up_silently_base()  :  stack.c
</itemize>
</descrip>

<sect1>Global Function frame_command()

<p><tt>void frame_command ( const char* level_exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_inlined_subroutine_print_frames()  :  inlining.c
<item>get_selected_frame()  :  frame.c
<item>print_stack_frame()  :  stack.c
<item>select_frame_command()  :  stack.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>return_command()  :  stack.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stack()  :  stack.c
</itemize>
</descrip>

<sect1>Global Function get_frame_language()

<p><tt>enum language get_frame_language ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>language.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_pc_function()  :  blockframe.c
<item>find_pc_symtab()  :  symtab.c
<item>get_frame_address_in_block()  :  frame.c
<item>get_frame_pc()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>execute_command()  :  top.c
<item>set_language_command()  :  language.c
<item>show_language_command()  :  language.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>deprecated_selected_frame  :  frame.c
</itemize>
</descrip>

<sect1>Global Function get_selected_block()

<p><tt>struct block* get_selected_block ( CORE_ADDR* addr_in_block )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_for_pc()  :  block.c
<item>get_frame_block()  :  blockframe.c
<item>read_pc()  :  regcache.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_find_any_symbol()  :  ada-lang.c
<item>address_info()  :  printcmd.c
<item>bpstat_stop_status()  :  breakpoint.c
<item>cp_lookup_transparent_type()  :  cp-namespace.c
<item>decode_all_variables()  :  linespec.c
<item>decode_objc()  :  linespec.c
<item>decode_packed_array_type()  :  ada-lang.c
<item>decode_variable()  :  linespec.c
<item>display_info()  :  printcmd.c
<item>do_one_display()  :  printcmd.c
<item>get_var_value()  :  ada-lang.c
<item>make_symbol_completion_list()  :  symtab.c
<item>make_symbol_overload_list_qualified()  :  cp-support.c
<item>make_symbol_overload_list_using()  :  cp-support.c
<item>parse_exp_in_context()  :  parse.c
<item>value_maybe_namespace_elt()  :  valops.c
<item>write_object_renaming()  :  ada-exp.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>deprecated_selected_frame  :  frame.c
</itemize>
</descrip>

<sect1>Global Function locals_info()

<p><tt>void locals_info ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>get_selected_frame()  :  frame.c
<item>print_frame_local_vars()  :  stack.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>args_plus_locals_info()  :  stack.c
<item>trace_dump_command()  :  tracepoint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stack()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

<sect1>Global Function parse_frame_specification()

<p><tt>struct frame_info* parse_frame_specification ( const char* frame_exp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>parse_frame_specification_1()  :  stack.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>func_command()  :  stack.c
</itemize>
</descrip>

<sect1>Global Function parse_frame_specification_1()

<p><tt>struct frame_info* parse_frame_specification_1 ( const char* frame_exp, const char* message, int* selected_frame_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>create_new_frame()  :  frame.c
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>find_relative_frame()  :  stack.c
<item>frame_id_build_wild()  :  frame.c
<item>frame_id_eq()  :  frame.c
<item>frame_unwind_id()  :  frame.c
<item>get_current_frame()  :  frame.c
<item>get_frame_id()  :  frame.c
<item>get_prev_frame()  :  frame.c
<item>get_selected_frame()  :  frame.c
<item>make_cleanup()  :  utils.c
<item>parse_and_eval()  :  eval.c
<item>savestring()  :  utils.c
<item>value_as_address()  :  value.c
<item>value_as_long()  :  value.c
<item>isspace()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_info()  :  stack.c
<item>parse_frame_specification()  :  stack.c
<item>select_frame_command()  :  stack.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
</descrip>

<sect1>Global Function print_frame_info()

<p><tt>void print_frame_info ( struct frame_info* fi, int print_level, enum print_what print_what, int print_args )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>at_inlined_call_site_p()  :  inlining.c
<item>do_cleanups()  :  utils.c
<item>find_frame_sal()  :  frame.c
<item>find_pc_symtab()  :  symtab.c
<item>frame_relative_level()  :  frame.c
<item>gdb_flush()  :  ui-file.c
<item>get_frame_base()  :  frame.c
<item>get_frame_pc()  :  frame.c
<item>get_frame_type()  :  frame.c
<item>identify_source_line()  :  source.c
<item>make_cleanup_ui_out_tuple_begin_end()  :  ui-out.c
<item>pc_set_load_state()  :  objfiles.c
<item>print_frame()  :  stack.c
<item>print_source_lines()  :  source.c
<item>set_default_breakpoint()  :  breakpoint.c
<item>ui_out_field_core_addr()  :  ui-out.c
<item>ui_out_field_fmt_int()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>annotate_frame_address(), annotate_frame_address_end(), annotate_frame_begin(), annotate_frame_end(), annotate_function_call(), annotate_signal_handler_caller(), deprecated_print_frame_info_listing_hook(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>backtrace_command_1()  :  stack.c
<item>print_stack_frame_stub()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>addressprint  :  valprint.c
<item>annotation_level  :  stack.c
<item>deprecated_print_frame_info_listing_hook  :  top.c
<item>gdb_stdout  :  main.c
<item>stop_pc  :  infcmd.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function print_stack_frame()

<p><tt>void print_stack_frame ( struct frame_info* fi, int print_level, enum print_what print_what )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>catch_errors()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>current_frame_command()  :  stack.c
<item>do_captured_thread_select()  :  thread.c
<item>down_command()  :  stack.c
<item>finish_command()  :  infcmd.c
<item>finish_tfind_command()  :  tracepoint.c
<item>frame_command()  :  stack.c
<item>info_threads_command()  :  thread.c
<item>kill_command()  :  inflow.c
<item>normal_stop()  :  infrun.c
<item>restore_current_thread()  :  thread.c
<item>select_and_print_frame()  :  stack.c
<item>up_command()  :  stack.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>print_stack_frame_stub()  :  stack.c
</itemize>
</descrip>

<sect1>Global Function return_command()

<p><tt>void return_command ( const char* retval_exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>adjust_current_inlined_subroutine_stack_position()  :  inlining.c
<item>check_typedef()  :  gdbtypes.c
<item>current_inlined_subroutine_call_site_line()  :  inlining.c
<item>current_inlined_subroutine_calling_function_name()  :  inlining.c
<item>current_inlined_subroutine_function_name()  :  inlining.c
<item>error()  :  utils.c
<item>frame_command()  :  stack.c
<item>frame_id_eq()  :  frame.c
<item>frame_id_inner()  :  frame.c
<item>frame_pop()  :  frame.c
<item>gdbarch_return_value()  :  gdbarch.c
<item>gdbarch_return_value_p()  :  gdbarch.c
<item>get_current_frame()  :  frame.c
<item>get_frame_function()  :  blockframe.c
<item>get_frame_id()  :  frame.c
<item>get_frame_type()  :  frame.c
<item>get_selected_frame()  :  frame.c
<item>in_inlined_function_call_p()  :  inlining.c
<item>inlined_subroutine_restore_after_dummy_call()  :  inlining.c
<item>internal_error()  :  utils.c
<item>parse_and_eval()  :  eval.c
<item>query()  :  utils.c
<item>select_frame_command()  :  stack.c
<item>symbol_natural_name()  :  symtab.c
<item>ui_out_text_fmt()  :  ui-out.c
<item>using_struct_return()  :  value.c
<item>value_cast()  :  valops.c
<item>value_contents()  :  value.c
<item>value_fetch_lazy()  :  valops.c
<item>value_lazy()  :  value.c
<item>value_type()  :  value.c
<item>stack_changed_hook()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stack()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>builtin_type_int  :  gdbtypes.c
<item>current_gdbarch  :  gdbarch.c
<item>current_regcache  :  regcache.c
<item>demangle  :  utils.c
<item>stack_changed_hook  :  top.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function select_frame_command()

<p><tt>void select_frame_command ( const char* level_exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>parse_frame_specification_1()  :  stack.c
<item>select_frame()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_command()  :  stack.c
<item>return_command()  :  stack.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stack()  :  stack.c
</itemize>
</descrip>

<sect1>Global Function show_stack_frame()

<p><tt>void show_stack_frame ( struct frame_info* fi )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>frame.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>info_threads_command()  :  thread.c
</itemize>
</descrip>

<sect1>Local Function args_plus_locals_info()

<p><tt>static void args_plus_locals_info ( const char* ignore, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>args_info()  :  stack.c
<item>locals_info()  :  stack.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stack()  :  stack.c
</itemize>
</descrip>

<sect1>Local Function backtrace_command()

<p><tt>static void backtrace_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>make_cleanup_freeargv()  :  utils.c
<item>nomem()  :  utils.c
<item>subset_compare()  :  utils.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin___strcat_chk(), __builtin_object_size(), __inline_memset_chk(), __inline_strcat_chk(), buildargv(), catch_errors(), strlen(), tolower()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stack()  :  stack.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>backtrace_command_stub()  :  stack.c
</itemize>
</descrip>

<sect1>Local Function backtrace_command_1()

<p><tt>static void backtrace_command_1 ( const char* count_exp, int show_locals, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>find_pc_psymtab()  :  symtab.c
<item>get_current_frame()  :  frame.c
<item>get_current_source_symtab_and_line()  :  source.c
<item>get_frame_address_in_block()  :  frame.c
<item>get_prev_frame()  :  frame.c
<item>inlined_function_reset_frame_stack()  :  inlining.c
<item>parse_and_eval_long()  :  eval.c
<item>print_frame_info()  :  stack.c
<item>print_frame_local_vars()  :  stack.c
<item>printf_filtered()  :  utils.c
<item>psymtab_to_symtab()  :  symfile.c
<item>quit()  :  utils.c
<item>set_current_source_symtab_and_line()  :  source.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>backtrace_command_stub()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>gdb_stdout  :  main.c
<item>info_verbose  :  top.c
<item>quit_flag  :  utils.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function backtrace_command_stub()

<p><tt>static int backtrace_command_stub ( void* data )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>backtrace_command_1()  :  stack.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>backtrace_command()  :  stack.c
<item>backtrace_full_command()  :  stack.c
</itemize>
</descrip>

<sect1>Local Function backtrace_full_command()

<p><tt>static void backtrace_full_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>catch_errors()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stack()  :  stack.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>backtrace_command_stub()  :  stack.c
</itemize>
</descrip>

<sect1>Local Function catch_info()

<p><tt>static void catch_info ( const char* ignore, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>get_selected_frame()  :  frame.c
<item>print_frame_label_vars()  :  stack.c
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stack()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_target  :  target/target.c
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

<sect1>Local Function current_frame_command()

<p><tt>static void current_frame_command ( const char* level_exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_inlined_subroutine_print_frames()  :  inlining.c
<item>get_selected_frame()  :  frame.c
<item>print_stack_frame()  :  stack.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stack()  :  stack.c
</itemize>
</descrip>

<sect1>Local Function down_command()

<p><tt>static void down_command ( const char* count_exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_inlined_subroutine_print_frames()  :  inlining.c
<item>down_silently_base()  :  stack.c
<item>get_selected_frame()  :  frame.c
<item>print_stack_frame()  :  stack.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stack()  :  stack.c
</itemize>
</descrip>

<sect1>Local Function down_silently_base()

<p><tt>static void down_silently_base ( const char* count_exp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>find_relative_frame()  :  stack.c
<item>get_selected_frame()  :  frame.c
<item>parse_and_eval_long()  :  eval.c
<item>select_frame()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>down_command()  :  stack.c
<item>down_silently_command()  :  stack.c
</itemize>
</descrip>

<sect1>Local Function down_silently_command()

<p><tt>static void down_silently_command ( const char* count_exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>down_silently_base()  :  stack.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stack()  :  stack.c
</itemize>
</descrip>

<sect1>Local Function frame_info()

<p><tt>static void frame_info ( const char* addr_exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_print_address_numeric()  :  printcmd.c
<item>extract_unsigned_integer()  :  findvar.c
<item>find_frame_sal()  :  frame.c
<item>find_pc_symtab()  :  symtab.c
<item>fprintf_symbol_filtered()  :  utils.c
<item>frame_pc_unwind()  :  frame.c
<item>frame_register_unwind()  :  frame.c
<item>frame_relative_level()  :  frame.c
<item>gdbarch_frame_num_args()  :  gdbarch.c
<item>gdbarch_frame_num_args_p()  :  gdbarch.c
<item>gdbarch_num_pseudo_regs()  :  gdbarch.c
<item>gdbarch_num_regs()  :  gdbarch.c
<item>gdbarch_pc_regnum()  :  gdbarch.c
<item>gdbarch_register_name()  :  gdbarch.c
<item>gdbarch_register_reggroup_p()  :  gdbarch.c
<item>gdbarch_sp_regnum()  :  gdbarch.c
<item>get_frame_args_address()  :  frame.c
<item>get_frame_base()  :  frame.c
<item>get_frame_function()  :  blockframe.c
<item>get_frame_locals_address()  :  frame.c
<item>get_frame_pc()  :  frame.c
<item>get_next_frame()  :  frame.c
<item>get_prev_frame()  :  frame.c
<item>internal_error()  :  utils.c
<item>language_str()  :  language.c
<item>lookup_minimal_symbol_by_pc()  :  minsyms.c
<item>parse_frame_specification_1()  :  stack.c
<item>print_frame_args()  :  stack.c
<item>printf_filtered()  :  utils.c
<item>puts_filtered()  :  utils.c
<item>register_size()  :  regcache.c
<item>symbol_natural_name()  :  symtab.c
<item>wrap_here()  :  utils.c
<item>cplus_demangle()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stack()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>all_reggroup  :  reggroups.c
<item>current_gdbarch  :  gdbarch.c
<item>demangle  :  utils.c
<item>gdb_stdout  :  main.c
</itemize>
</descrip>

<sect1>Local Function func_command()

<p><tt>static void func_command ( const char* arg, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>decode_line_spec()  :  symtab.c
<item>find_pc_partial_function()  :  blockframe.c
<item>find_relative_frame()  :  stack.c
<item>get_frame_pc()  :  frame.c
<item>parse_frame_specification()  :  stack.c
<item>printf_filtered()  :  utils.c
<item>select_and_print_frame()  :  stack.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stack()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>deprecated_selected_frame  :  frame.c
</itemize>
</descrip>

<sect1>Local Function print_args_stub()

<p><tt>static int print_args_stub ( void* args )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_frame_num_args()  :  gdbarch.c
<item>gdbarch_frame_num_args_p()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>print_frame_args()  :  stack.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>print_frame()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function print_block_frame_labels()

<p><tt>static int print_block_frame_labels ( struct block* b, int* have_default, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deprecated_print_address_numeric()  :  printcmd.c
<item>dict_iterator_first()  :  dictionary.c
<item>dict_iterator_next()  :  dictionary.c
<item>find_pc_line()  :  symtab.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>symbol_natural_name()  :  symtab.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_frame_label_vars()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>addressprint  :  valprint.c
<item>demangle  :  utils.c
</itemize>
</descrip>

<sect1>Local Function print_block_frame_locals()

<p><tt>static int print_block_frame_locals ( struct block* b, struct frame_info* fi, int num_tabs, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dict_iterator_first()  :  dictionary.c
<item>dict_iterator_next()  :  dictionary.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>print_variable_value()  :  printcmd.c
<item>symbol_natural_name()  :  symtab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_frame_local_vars()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle  :  utils.c
</itemize>
</descrip>

<sect1>Local Function print_frame()

<p><tt>static void print_frame ( struct frame_info* fi, int print_level, enum print_what print_what, int print_args, struct symtab_and_line sal )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>at_inlined_call_site_p()  :  inlining.c
<item>current_inlined_bottom_call_site_line()  :  inlining.c
<item>do_cleanups()  :  utils.c
<item>find_pc_function_no_inlined()  :  blockframe.c
<item>find_pc_symtab()  :  symtab.c
<item>fprintf_symbol_filtered()  :  utils.c
<item>frame_relative_level()  :  frame.c
<item>get_current_frame()  :  frame.c
<item>get_frame_address_in_block()  :  frame.c
<item>get_frame_base()  :  frame.c
<item>get_frame_pc()  :  frame.c
<item>get_frame_type()  :  frame.c
<item>get_next_frame()  :  frame.c
<item>in_inlined_function_call_p()  :  inlining.c
<item>last_inlined_call_site_filename()  :  inlining.c
<item>lookup_minimal_symbol_by_pc()  :  minsyms.c
<item>make_cleanup_ui_out_list_begin_end()  :  ui-out.c
<item>make_cleanup_ui_out_stream_delete()  :  ui-out.c
<item>make_cleanup_ui_out_tuple_begin_end()  :  ui-out.c
<item>print_inlined_frame()  :  inlining.c
<item>quit()  :  utils.c
<item>symbol_natural_name()  :  symtab.c
<item>symtab_clear_cached_lookup_values()  :  symtab.c
<item>symtab_to_fullname()  :  source.c
<item>ui_out_field_core_addr()  :  ui-out.c
<item>ui_out_field_fmt_int()  :  ui-out.c
<item>ui_out_field_int()  :  ui-out.c
<item>ui_out_field_stream()  :  ui-out.c
<item>ui_out_field_string()  :  ui-out.c
<item>ui_out_is_mi_like_p()  :  ui-out.c
<item>ui_out_stream_new()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>ui_out_wrap_hint()  :  ui-out.c
<item>annotate_frame_address(), annotate_frame_address_end(), annotate_frame_args(), annotate_frame_begin(), annotate_frame_function_name(), annotate_frame_source_begin(), annotate_frame_source_end(), annotate_frame_source_file(), annotate_frame_source_file_end(), annotate_frame_source_line(), annotate_frame_where(), catch_errors(), cplus_demangle(), macosx_pc_solib(), print_frame_more_info_hook(), strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_frame_info()  :  stack.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>print_args_stub()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>addressprint  :  valprint.c
<item>demangle  :  utils.c
<item>gdb_stdout  :  main.c
<item>print_frame_more_info_hook  :  top.c
<item>quit_flag  :  utils.c
<item>stop_pc  :  infcmd.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function print_frame_arg_vars()

<p><tt>static void print_frame_arg_vars ( struct frame_info* fi, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>dict_iterator_first()  :  dictionary.c
<item>dict_iterator_next()  :  dictionary.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>get_frame_function()  :  blockframe.c
<item>lookup_symbol()  :  symtab.c
<item>print_variable_value()  :  printcmd.c
<item>symbol_natural_name()  :  symtab.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>args_info()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle  :  utils.c
</itemize>
</descrip>

<sect1>Local Function print_frame_args()

<p><tt>static void print_frame_args ( struct symbol* func, struct frame_info* fi, int num, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>common_val_print()  :  valprint.c
<item>dict_iterator_first()  :  dictionary.c
<item>dict_iterator_next()  :  dictionary.c
<item>do_cleanups()  :  utils.c
<item>fprintf_symbol_filtered()  :  utils.c
<item>gdbarch_frame_args_skip()  :  gdbarch.c
<item>lookup_symbol()  :  symtab.c
<item>make_cleanup_ui_out_stream_delete()  :  ui-out.c
<item>make_cleanup_ui_out_tuple_begin_end()  :  ui-out.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>print_frame_nameless_args()  :  stack.c
<item>quit()  :  utils.c
<item>read_var_value()  :  findvar.c
<item>symbol_natural_name()  :  symtab.c
<item>ui_out_field_stream()  :  ui-out.c
<item>ui_out_stream_new()  :  ui-out.c
<item>ui_out_text()  :  ui-out.c
<item>ui_out_wrap_hint()  :  ui-out.c
<item>value_type()  :  value.c
<item>annotate_arg_begin(), annotate_arg_end(), annotate_arg_name_end(), annotate_arg_value()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>frame_info()  :  stack.c
<item>print_args_stub()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>demangle  :  utils.c
<item>quit_flag  :  utils.c
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Local Function print_frame_label_vars()

<p><tt>static void print_frame_label_vars ( struct frame_info* fi, int this_level_only, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>block_contains_pc()  :  block.c
<item>blockvector_for_pc()  :  block.c
<item>contained_in()  :  block.c
<item>error()  :  utils.c
<item>fprintf_filtered()  :  utils.c
<item>get_frame_block()  :  blockframe.c
<item>get_frame_pc()  :  frame.c
<item>print_block_frame_labels()  :  stack.c
<item>__builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>catch_info()  :  stack.c
</itemize>
</descrip>

<sect1>Local Function print_frame_local_vars()

<p><tt>static void print_frame_local_vars ( struct frame_info* fi, int num_tabs, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>get_frame_block()  :  blockframe.c
<item>print_block_frame_locals()  :  stack.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>backtrace_command_1()  :  stack.c
<item>locals_info()  :  stack.c
</itemize>
</descrip>

<sect1>Local Function print_frame_nameless_args()

<p><tt>static void print_frame_nameless_args ( struct frame_info* fi, long start, int num, int first, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf_filtered()  :  utils.c
<item>get_frame_args_address()  :  frame.c
<item>quit()  :  utils.c
<item>read_memory_integer()  :  corefile.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_frame_args()  :  stack.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>quit_flag  :  utils.c
</itemize>
</descrip>

<sect1>Local Function print_stack_frame_stub()

<p><tt>static int print_stack_frame_stub ( void* args )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>print_frame_info()  :  stack.c
<item>set_current_sal_from_frame()  :  stack.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>print_stack_frame()  :  stack.c
</itemize>
</descrip>

<sect1>Local Function select_and_print_frame()

<p><tt>static void select_and_print_frame ( struct frame_info* fi )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>clear_inlined_subroutine_print_frames()  :  inlining.c
<item>print_stack_frame()  :  stack.c
<item>select_frame()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>func_command()  :  stack.c
</itemize>
</descrip>

<sect1>Local Function set_current_sal_from_frame()

<p><tt>static void set_current_sal_from_frame ( struct frame_info* fi, int center )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>find_frame_sal()  :  frame.c
<item>get_lines_to_list()  :  source.c
<item>set_current_source_symtab_and_line()  :  source.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_stack_frame_stub()  :  stack.c
</itemize>
</descrip>

<sect1>Local Function up_command()

<p><tt>static void up_command ( const char* count_exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>clear_inlined_subroutine_print_frames()  :  inlining.c
<item>get_selected_frame()  :  frame.c
<item>print_stack_frame()  :  stack.c
<item>up_silently_base()  :  stack.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stack()  :  stack.c
</itemize>
</descrip>

<sect1>Local Function up_silently_base()

<p><tt>static void up_silently_base ( const char* count_exp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
<item>find_relative_frame()  :  stack.c
<item>get_selected_frame()  :  frame.c
<item>parse_and_eval_long()  :  eval.c
<item>select_frame()  :  frame.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>up_command()  :  stack.c
<item>up_silently_command()  :  stack.c
</itemize>
</descrip>

<sect1>Local Function up_silently_command()

<p><tt>static void up_silently_command ( const char* count_exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>stack.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>up_silently_base()  :  stack.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_stack()  :  stack.c
</itemize>
</descrip>

</article>
