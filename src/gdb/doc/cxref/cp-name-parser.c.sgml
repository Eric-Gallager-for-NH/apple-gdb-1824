<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF cp-name-parser.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for cp-name-parser.c of gdb.cxref.
<author>cxref

<sect>File cp-name-parser.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;stdlib.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;unistd.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/safe-ctype.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define YYBISON 1</tt><newline>
<p>
<tt>#define YYBISON_VERSION &quot;3.3.2&quot;</tt><newline>
<p>
<tt>#define YYSKELETON_NAME &quot;yacc.c&quot;</tt><newline>
<p>
<tt>#define YYPURE 0</tt><newline>
<p>
<tt>#define YYPUSH 0</tt><newline>
<p>
<tt>#define YYPULL 1</tt><newline>
<p>
<tt>#define HAVE_DECL_BASENAME 0</tt><newline>
<p>
<tt>#define d_grab</tt><newline>
<p>
<tt>#define QUAL_CONST 1</tt><newline>
<p>
<tt>#define QUAL_RESTRICT 2</tt><newline>
<p>
<tt>#define QUAL_VOLATILE 4</tt><newline>
<p>
<tt>#define INT_CHAR</tt><newline>
<p>
<tt>#define INT_SHORT</tt><newline>
<p>
<tt>#define INT_LONG</tt><newline>
<p>
<tt>#define INT_LLONG</tt><newline>
<p>
<tt>#define INT_SIGNED</tt><newline>
<p>
<tt>#define INT_UNSIGNED</tt><newline>
<p>
<tt>#define yymaxdepth cpname_maxdepth</tt><newline>
<p>
<tt>#define yyparse cpname_parse</tt><newline>
<p>
<tt>#define yylex cpname_lex</tt><newline>
<p>
<tt>#define yyerror cpname_error</tt><newline>
<p>
<tt>#define yylval cpname_lval</tt><newline>
<p>
<tt>#define yychar cpname_char</tt><newline>
<p>
<tt>#define yydebug cpname_debug</tt><newline>
<p>
<tt>#define yypact cpname_pact</tt><newline>
<p>
<tt>#define yyr1 cpname_r1</tt><newline>
<p>
<tt>#define yyr2 cpname_r2</tt><newline>
<p>
<tt>#define yydef cpname_def</tt><newline>
<p>
<tt>#define yychk cpname_chk</tt><newline>
<p>
<tt>#define yypgo cpname_pgo</tt><newline>
<p>
<tt>#define yyact cpname_act</tt><newline>
<p>
<tt>#define yyexca cpname_exca</tt><newline>
<p>
<tt>#define yyerrflag cpname_errflag</tt><newline>
<p>
<tt>#define yynerrs cpname_nerrs</tt><newline>
<p>
<tt>#define yyps cpname_ps</tt><newline>
<p>
<tt>#define yypv cpname_pv</tt><newline>
<p>
<tt>#define yys cpname_s</tt><newline>
<p>
<tt>#define yy_yys cpname_yys</tt><newline>
<p>
<tt>#define yystate cpname_state</tt><newline>
<p>
<tt>#define yytmp cpname_tmp</tt><newline>
<p>
<tt>#define yyv cpname_v</tt><newline>
<p>
<tt>#define yy_yyv cpname_yyv</tt><newline>
<p>
<tt>#define yyval cpname_val</tt><newline>
<p>
<tt>#define yylloc cpname_lloc</tt><newline>
<p>
<tt>#define yyreds cpname_reds</tt><newline>
<p>
<tt>#define yytoks cpname_toks</tt><newline>
<p>
<tt>#define yyname cpname_name</tt><newline>
<p>
<tt>#define yyrule cpname_rule</tt><newline>
<p>
<tt>#define yylhs cpname_yylhs</tt><newline>
<p>
<tt>#define yylen cpname_yylen</tt><newline>
<p>
<tt>#define yydefred cpname_yydefred</tt><newline>
<p>
<tt>#define yydgoto cpname_yydgoto</tt><newline>
<p>
<tt>#define yysindex cpname_yysindex</tt><newline>
<p>
<tt>#define yyrindex cpname_yyrindex</tt><newline>
<p>
<tt>#define yygindex cpname_yygindex</tt><newline>
<p>
<tt>#define yytable cpname_yytable</tt><newline>
<p>
<tt>#define yycheck cpname_yycheck</tt><newline>
<p>
<tt>#define d_left( dc )</tt><newline>
<p>
<tt>#define d_right( dc )</tt><newline>
<p>
<tt>#define YY_NULLPTR</tt><newline>
<p>
<tt>#define YYERROR_VERBOSE 0</tt><newline>
<p>
<tt>#define YY_YY_Y_TAB_H_INCLUDED</tt><newline>
<p>
<tt>#define YYDEBUG 1</tt><newline>
<p>
<tt>#define YYTOKENTYPE</tt><newline>
<p>
<tt>#define YYSTYPE_IS_TRIVIAL 1</tt><newline>
<p>
<tt>#define YYSTYPE_IS_DECLARED 1</tt><newline>
<p>
<tt>#define YYSIZE_T __SIZE_TYPE__</tt><newline>
<p>
<tt>#define YYSIZE_MAXIMUM</tt><newline>
<p>
<tt>#define YY_( Msgid )</tt><newline>
<p>
<tt>#define YY_ATTRIBUTE( Spec )</tt><newline>
<p>
<tt>#define YY_ATTRIBUTE_PURE</tt><newline>
<p>
<tt>#define YY_ATTRIBUTE_UNUSED</tt><newline>
<p>
<tt>#define YYUSE( E )</tt><newline>
<p>
<tt>#define YY_INITIAL_VALUE( Value )</tt><newline>
<p>
<tt>#define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN</tt><newline>
<p>
<tt>#define YY_IGNORE_MAYBE_UNINITIALIZED_END</tt><newline>
<p>
<tt>#define YYSTACK_ALLOC YYMALLOC</tt><newline>
<p>
<tt>#define YYSTACK_FREE YYFREE</tt><newline>
<p>
<tt>#define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM</tt><newline>
<p>
<tt>#define YYMALLOC xmalloc</tt><newline>
<p>
<tt>#define YYFREE xfree</tt><newline>
<p>
<tt>#define YYSTACK_GAP_MAXIMUM</tt><newline>
<p>
<tt>#define YYSTACK_BYTES( N )</tt><newline>
<p>
<tt>#define YYCOPY_NEEDED 1</tt><newline>
<p>
<tt>#define YYSTACK_RELOCATE( Stack_alloc, Stack )</tt><newline>
<p>
<tt>#define YYCOPY( Dst, Src, Count )</tt><newline>
<p>
<tt>#define YYFINAL 85</tt><newline>
<p>
<tt>#define YYLAST 1165</tt><newline>
<p>
<tt>#define YYNTOKENS 76</tt><newline>
<p>
<tt>#define YYNNTS 40</tt><newline>
<p>
<tt>#define YYNRULES 195</tt><newline>
<p>
<tt>#define YYNSTATES 330</tt><newline>
<p>
<tt>#define YYUNDEFTOK 2</tt><newline>
<p>
<tt>#define YYMAXUTOK 308</tt><newline>
<p>
<tt>#define YYTRANSLATE( YYX )</tt><newline>
<p>
<tt>#define YYPACT_NINF -204</tt><newline>
<p>
<tt>#define yypact_value_is_default( Yystate )</tt><newline>
<p>
<tt>#define YYTABLE_NINF -1</tt><newline>
<p>
<tt>#define yytable_value_is_error( Yytable_value )</tt><newline>
<p>
<tt>#define yyerrok</tt><newline>
<p>
<tt>#define yyclearin</tt><newline>
<p>
<tt>#define YYEMPTY -2</tt><newline>
<p>
<tt>#define YYEOF 0</tt><newline>
<p>
<tt>#define YYACCEPT</tt><newline>
<p>
<tt>#define YYABORT</tt><newline>
<p>
<tt>#define YYERROR</tt><newline>
<p>
<tt>#define YYRECOVERING</tt><newline>
<p>
<tt>#define YYBACKUP( Token, Value )</tt><newline>
<p>
<tt>#define YYTERROR 1</tt><newline>
<p>
<tt>#define YYERRCODE 256</tt><newline>
<p>
<tt>#define YYFPRINTF fprintf</tt><newline>
<p>
<tt>#define YYDPRINTF( Args )</tt><newline>
<p>
<tt>#define YY_LOCATION_PRINT( File, Loc )</tt><newline>
<p>
<tt>#define YY_SYMBOL_PRINT( Title, Type, Value, Location )</tt><newline>
<p>
<tt>#define YY_STACK_PRINT( Bottom, Top )</tt><newline>
<p>
<tt>#define YY_REDUCE_PRINT( Rule )</tt><newline>
<p>
<tt>#define YYINITDEPTH 200</tt><newline>
<p>
<tt>#define YYMAXDEPTH 10000</tt><newline>
<p>
<tt>#define YYPOPSTACK( N )</tt><newline>
<p>
<tt>#define HANDLE_QUAL( TYPE, MTYPE, QUAL )</tt><newline>
<p>
<tt>#define HANDLE_SPECIAL( string, comp )</tt><newline>
<p>
<tt>#define HANDLE_TOKEN2( string, token )</tt><newline>
<p>
<tt>#define HANDLE_TOKEN3( string, token )</tt><newline>

<sect1>Type struct demangle_info

<p>
<itemize>
<item><tt>struct demangle_info</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int used;</tt><newline>
<item><tt>struct demangle_component comps[1];</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type enum yytokentype

<p>
<itemize>
<item><tt>enum yytokentype</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>INT;</tt><newline>
<item><tt>FLOAT;</tt><newline>
<item><tt>NAME;</tt><newline>
<item><tt>STRUCT;</tt><newline>
<item><tt>CLASS;</tt><newline>
<item><tt>UNION;</tt><newline>
<item><tt>ENUM;</tt><newline>
<item><tt>SIZEOF;</tt><newline>
<item><tt>UNSIGNED;</tt><newline>
<item><tt>COLONCOLON;</tt><newline>
<item><tt>TEMPLATE;</tt><newline>
<item><tt>ERROR;</tt><newline>
<item><tt>NEW;</tt><newline>
<item><tt>DELETE;</tt><newline>
<item><tt>OPERATOR;</tt><newline>
<item><tt>STATIC_CAST;</tt><newline>
<item><tt>REINTERPRET_CAST;</tt><newline>
<item><tt>DYNAMIC_CAST;</tt><newline>
<item><tt>SIGNED_KEYWORD;</tt><newline>
<item><tt>LONG;</tt><newline>
<item><tt>SHORT;</tt><newline>
<item><tt>INT_KEYWORD;</tt><newline>
<item><tt>CONST_KEYWORD;</tt><newline>
<item><tt>VOLATILE_KEYWORD;</tt><newline>
<item><tt>DOUBLE_KEYWORD;</tt><newline>
<item><tt>BOOL;</tt><newline>
<item><tt>ELLIPSIS;</tt><newline>
<item><tt>RESTRICT;</tt><newline>
<item><tt>VOID;</tt><newline>
<item><tt>FLOAT_KEYWORD;</tt><newline>
<item><tt>CHAR;</tt><newline>
<item><tt>WCHAR_T;</tt><newline>
<item><tt>ASSIGN_MODIFY;</tt><newline>
<item><tt>TRUEKEYWORD;</tt><newline>
<item><tt>FALSEKEYWORD;</tt><newline>
<item><tt>DEMANGLER_SPECIAL;</tt><newline>
<item><tt>CONSTRUCTION_VTABLE;</tt><newline>
<item><tt>CONSTRUCTION_IN;</tt><newline>
<item><tt>GLOBAL;</tt><newline>
<item><tt>OROR;</tt><newline>
<item><tt>ANDAND;</tt><newline>
<item><tt>EQUAL;</tt><newline>
<item><tt>NOTEQUAL;</tt><newline>
<item><tt>LEQ;</tt><newline>
<item><tt>GEQ;</tt><newline>
<item><tt>LSH;</tt><newline>
<item><tt>RSH;</tt><newline>
<item><tt>UNARY;</tt><newline>
<item><tt>INCREMENT;</tt><newline>
<item><tt>DECREMENT;</tt><newline>
<item><tt>ARROW;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct nested

<p>
<itemize>
<item><tt>struct nested</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct demangle_component* comp;</tt><newline>
<item><tt>struct demangle_component** last;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type union YYSTYPE

<p>
<itemize>
<item><tt>union YYSTYPE</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct demangle_component* comp;</tt><newline>
<item><tt>struct nested</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct demangle_component* comp;</tt><newline>
<item><tt>struct demangle_component** last;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>nested;</tt><newline>
<item><tt>struct</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct demangle_component* comp;</tt><newline>
<item><tt>struct demangle_component* last;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>nested1;</tt><newline>
<item><tt>struct</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct demangle_component* comp;</tt><newline>
<item><tt>struct demangle_component** last;</tt><newline>
<item><tt>struct nested fn;</tt><newline>
<item><tt>struct demangle_component* start;</tt><newline>
<item><tt>int fold_flag;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>abstract;</tt><newline>
<item><tt>int lval;</tt><newline>
<item><tt>struct</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>int val;</tt><newline>
<item><tt>struct demangle_component* type;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
<item><tt>typed_val_int;</tt><newline>
<item><tt>const char* opname;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Typedef YYSTYPE

<p>
<tt>typedef union YYSTYPE YYSTYPE</tt><newline>
<descrip>
<tag>See:</tag>
<itemize>
<item>Type union YYSTYPE
</itemize>
</descrip>

<sect1>Type enum demangle_component_type_extensions

<p>
<itemize>
<item><tt>enum demangle_component_type_extensions</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>GLOBAL_CONSTRUCTORS;</tt><newline>
<item><tt>GLOBAL_DESTRUCTORS;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Typedef yytype_uint8

<p>
<tt>typedef unsigned char yytype_uint8</tt><newline>

<sect1>Typedef yytype_int8

<p>
<tt>typedef signed char yytype_int8</tt><newline>

<sect1>Typedef yytype_uint16

<p>
<tt>typedef unsigned short yytype_uint16</tt><newline>

<sect1>Typedef yytype_int16

<p>
<tt>typedef short yytype_int16</tt><newline>

<sect1>Type union yyalloc

<p>
<itemize>
<item><tt>union yyalloc</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>yytype_int16 yyss_alloc;</tt><newline>
<item><tt>YYSTYPE yyvs_alloc;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable cpname_debug

<p>
<tt>int cpname_debug</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>cp-name-parser.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cpname_parse()  :  cp-name-parser.c
<item>yydestruct()  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Global Variable cpname_lval

<p>
<tt>YYSTYPE cpname_lval</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>cp-name-parser.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cpname_lex()  :  cp-name-parser.c
<item>cpname_parse()  :  cp-name-parser.c
<item>parse_number()  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Global Variable cpname_char

<p>
<tt>int cpname_char</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>cp-name-parser.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cpname_parse()  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Global Variable cpname_nerrs

<p>
<tt>int cpname_nerrs</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>cp-name-parser.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>cpname_parse()  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>lexptr</bf><newline>
<tt>static const char* lexptr</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>ada_error()
<item>ada_lex()
<item>c_error()
<item>c_lex()
<item>cp_demangled_name_to_comp()
<item>cpname_lex()
<item>f_error()
<item>f_lex()
<item>finished_macro_expansion()
<item>java_error()
<item>java_lex()
<item>m2_error()
<item>m2_lex()
<item>match_string_literal()
<item>objc_error()
<item>objc_lex()
<item>parse_exp_in_context()
<item>parse_number()
<item>pascal_error()
<item>pascal_lex()
<item>scan_macro_expansion()
<item>scm_lreadparen()
<item>scm_lreadr()
<item>scm_parse()
<item>scm_read_token()
<item>scm_skip_ws()
<item>yy_get_next_buffer()
</itemize>
</descrip>
<p>
<bf>prev_lexptr</bf><newline>
<tt>static const char* prev_lexptr</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_error()
<item>c_lex()
<item>cp_demangled_name_to_comp()
<item>cpname_error()
<item>cpname_lex()
<item>f_error()
<item>f_lex()
<item>java_error()
<item>java_lex()
<item>m2_error()
<item>m2_lex()
<item>parse_exp_in_context()
<item>pascal_error()
<item>pascal_lex()
</itemize>
</descrip>
<p>
<bf>error_lexptr</bf><newline>
<tt>static const char* error_lexptr</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cp_demangled_name_to_comp()
<item>cpname_error()
</itemize>
</descrip>
<p>
<bf>global_errmsg</bf><newline>
<tt>static const char* global_errmsg</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cp_demangled_name_to_comp()
<item>cpname_error()
</itemize>
</descrip>
<p>
<bf>demangle_info</bf><newline>
<tt>static struct demangle_info* demangle_info</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cp_demangled_name_to_comp()
<item>fill_comp()
<item>make_builtin_type()
<item>make_dtor()
<item>make_empty()
<item>make_name()
<item>make_operator()
</itemize>
</descrip>
<p>
<bf>global_result</bf><newline>
<tt>static struct demangle_component* global_result</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cp_demangled_name_to_comp()
<item>cpname_parse()
</itemize>
</descrip>
<p>
<bf>yytranslate</bf><newline>
<tt>static const yytype_uint8 yytranslate[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cpname_parse()
</itemize>
</descrip>
<p>
<bf>yyrline</bf><newline>
<tt>static const yytype_uint16 yyrline[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>yy_reduce_print()
</itemize>
</descrip>
<p>
<bf>yytname</bf><newline>
<tt>static const char* const yytname[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>yy_symbol_print()
</itemize>
</descrip>
<p>
<bf>cpname_pact</bf><newline>
<tt>static const yytype_int16 cpname_pact[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cpname_parse()
</itemize>
</descrip>
<p>
<bf>yydefact</bf><newline>
<tt>static const yytype_uint8 yydefact[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cpname_parse()
</itemize>
</descrip>
<p>
<bf>yypgoto</bf><newline>
<tt>static const yytype_int16 yypgoto[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cpname_parse()
</itemize>
</descrip>
<p>
<bf>yydefgoto</bf><newline>
<tt>static const yytype_int16 yydefgoto[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cpname_parse()
</itemize>
</descrip>
<p>
<bf>cpname_yytable</bf><newline>
<tt>static const yytype_uint16 cpname_yytable[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cpname_parse()
</itemize>
</descrip>
<p>
<bf>cpname_yycheck</bf><newline>
<tt>static const yytype_int16 cpname_yycheck[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cpname_parse()
</itemize>
</descrip>
<p>
<bf>yystos</bf><newline>
<tt>static const yytype_uint8 yystos[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cpname_parse()
<item>yy_reduce_print()
</itemize>
</descrip>
<p>
<bf>cpname_r1</bf><newline>
<tt>static const yytype_uint8 cpname_r1[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cpname_parse()
</itemize>
</descrip>
<p>
<bf>cpname_r2</bf><newline>
<tt>static const yytype_uint8 cpname_r2[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>cpname_parse()
<item>yy_reduce_print()
</itemize>
</descrip>
<p>
<bf>backslashable</bf><newline>
<tt>static char backslashable[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_parse_backslash()
</itemize>
</descrip>
<p>
<bf>represented</bf><newline>
<tt>static char represented[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>c_parse_backslash()
</itemize>
</descrip>

<sect1>Global Function cp_comp_to_string()

<p><tt>char* cp_comp_to_string ( struct demangle_component* result, int estimated_len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-name-parser.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), cplus_demangle_print(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_canonicalize_string()  :  cp-support.c
<item>cp_class_name_from_physname()  :  cp-support.c
<item>cp_func_name()  :  cp-support.c
<item>method_name_from_physname()  :  cp-support.c
<item>remove_params()  :  cp-support.c
</itemize>
</descrip>

<sect1>Global Function cp_demangled_name_to_comp()

<p><tt>struct demangle_component* cp_demangled_name_to_comp ( const char* demangled_name, void** memory, const char** errmsg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-name-parser.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>allocate_info()  :  cp-name-parser.c
<item>cpname_parse()  :  cp-name-parser.c
<item>xfree()  :  utils.c
<item>__builtin___snprintf_chk(), __builtin___strcat_chk(), __builtin_object_size(), __inline_strcat_chk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_canonicalize_string()  :  cp-support.c
<item>cp_func_name()  :  cp-support.c
<item>mangled_name_to_comp()  :  cp-support.c
<item>remove_params()  :  cp-support.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle_info  :  cp-name-parser.c
<item>error_lexptr  :  cp-name-parser.c
<item>global_errmsg  :  cp-name-parser.c
<item>global_result  :  cp-name-parser.c
<item>lexptr  :  cp-name-parser.c
<item>prev_lexptr  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Global Function cpname_parse()

<p><tt>int cpname_parse ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-name-parser.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cpname_error()  :  cp-name-parser.c
<item>cpname_lex()  :  cp-name-parser.c
<item>d_binary()  :  cp-name-parser.c
<item>d_int_type()  :  cp-name-parser.c
<item>d_qualify()  :  cp-name-parser.c
<item>d_unary()  :  cp-name-parser.c
<item>fill_comp()  :  cp-name-parser.c
<item>make_builtin_type()  :  cp-name-parser.c
<item>make_dtor()  :  cp-name-parser.c
<item>make_empty()  :  cp-name-parser.c
<item>make_name()  :  cp-name-parser.c
<item>make_operator()  :  cp-name-parser.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>yy_reduce_print()  :  cp-name-parser.c
<item>yy_stack_print()  :  cp-name-parser.c
<item>yy_symbol_print()  :  cp-name-parser.c
<item>yydestruct()  :  cp-name-parser.c
<item>__builtin_memcpy(), fprintf()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_demangled_name_to_comp()  :  cp-name-parser.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cpname_char  :  cp-name-parser.c
<item>cpname_debug  :  cp-name-parser.c
<item>cpname_lval  :  cp-name-parser.c
<item>cpname_nerrs  :  cp-name-parser.c
<item>cpname_pact  :  cp-name-parser.c
<item>cpname_r1  :  cp-name-parser.c
<item>cpname_r2  :  cp-name-parser.c
<item>cpname_yycheck  :  cp-name-parser.c
<item>cpname_yytable  :  cp-name-parser.c
<item>global_result  :  cp-name-parser.c
<item>yydefact  :  cp-name-parser.c
<item>yydefgoto  :  cp-name-parser.c
<item>yypgoto  :  cp-name-parser.c
<item>yystos  :  cp-name-parser.c
<item>yytranslate  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Global Function d_qualify()

<p><tt>struct demangle_component* d_qualify ( struct demangle_component* lhs, int qualifiers, int is_method )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-name-parser.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fill_comp()  :  cp-name-parser.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cpname_parse()  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Local Function allocate_info()

<p><tt>static struct demangle_info* allocate_info ( int comps )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cp_demangled_name_to_comp()  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Local Function c_parse_backslash()

<p><tt>static int c_parse_backslash ( int host_char, int* target_char )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>strchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>parse_escape()  :  cp-name-parser.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>backslashable  :  cp-name-parser.c
<item>represented  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Local Function cpname_error()

<p><tt>static void cpname_error ( const char* msg )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-name-parser.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cpname_lex()  :  cp-name-parser.c
<item>cpname_parse()  :  cp-name-parser.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>error_lexptr  :  cp-name-parser.c
<item>global_errmsg  :  cp-name-parser.c
<item>prev_lexptr  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Local Function cpname_lex()

<p><tt>static int cpname_lex ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-name-parser.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>cpname_error()  :  cp-name-parser.c
<item>fill_comp()  :  cp-name-parser.c
<item>make_builtin_type()  :  cp-name-parser.c
<item>make_name()  :  cp-name-parser.c
<item>parse_escape()  :  cp-name-parser.c
<item>parse_number()  :  cp-name-parser.c
<item>symbol_end()  :  cp-name-parser.c
<item>__builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cpname_parse()  :  cp-name-parser.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cpname_lval  :  cp-name-parser.c
<item>lexptr  :  cp-name-parser.c
<item>prev_lexptr  :  cp-name-parser.c
<item>_sch_istable
</itemize>
</descrip>

<sect1>Local Function d_binary()

<p><tt>static struct demangle_component* d_binary ( const char* name, struct demangle_component* lhs, struct demangle_component* rhs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-name-parser.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fill_comp()  :  cp-name-parser.c
<item>make_operator()  :  cp-name-parser.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cpname_parse()  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Local Function d_int_type()

<p><tt>static struct demangle_component* d_int_type ( int flags )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-name-parser.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>make_builtin_type()  :  cp-name-parser.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cpname_parse()  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Local Function d_unary()

<p><tt>static struct demangle_component* d_unary ( const char* name, struct demangle_component* lhs )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>cp-name-parser.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fill_comp()  :  cp-name-parser.c
<item>make_operator()  :  cp-name-parser.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cpname_parse()  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Local Function fill_comp()

<p><tt>static struct demangle_component* fill_comp ( enum demangle_component_type d_type, struct demangle_component* lhs, struct demangle_component* rhs )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>cplus_demangle_fill_component()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cpname_lex()  :  cp-name-parser.c
<item>cpname_parse()  :  cp-name-parser.c
<item>d_binary()  :  cp-name-parser.c
<item>d_qualify()  :  cp-name-parser.c
<item>d_unary()  :  cp-name-parser.c
<item>parse_number()  :  cp-name-parser.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle_info  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Local Function make_builtin_type()

<p><tt>static struct demangle_component* make_builtin_type ( const char* name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>cplus_demangle_fill_builtin_type()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cpname_lex()  :  cp-name-parser.c
<item>cpname_parse()  :  cp-name-parser.c
<item>d_int_type()  :  cp-name-parser.c
<item>parse_number()  :  cp-name-parser.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle_info  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Local Function make_dtor()

<p><tt>static struct demangle_component* make_dtor ( enum gnu_v3_dtor_kinds kind, struct demangle_component* name )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>cplus_demangle_fill_dtor()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cpname_parse()  :  cp-name-parser.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle_info  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Local Function make_empty()

<p><tt>static struct demangle_component* make_empty ( enum demangle_component_type d_type )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>cpname_parse()  :  cp-name-parser.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle_info  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Local Function make_name()

<p><tt>static struct demangle_component* make_name ( const char* name, int len )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>cplus_demangle_fill_name()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cpname_lex()  :  cp-name-parser.c
<item>cpname_parse()  :  cp-name-parser.c
<item>parse_number()  :  cp-name-parser.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle_info  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Local Function make_operator()

<p><tt>static struct demangle_component* make_operator ( const char* name, int args )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>cplus_demangle_fill_operator()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cpname_parse()  :  cp-name-parser.c
<item>d_binary()  :  cp-name-parser.c
<item>d_unary()  :  cp-name-parser.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>demangle_info  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Local Function parse_escape()

<p><tt>static int parse_escape ( const char** string_ptr )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>c_parse_backslash()  :  cp-name-parser.c
<item>parse_escape()  :  cp-name-parser.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_lex()  :  c-exp.c
<item>cpname_lex()  :  cp-name-parser.c
<item>get_character_constant()  :  macroexp.c
<item>get_string_literal()  :  macroexp.c
<item>java_lex()  :  jv-exp.c
<item>objc_lex()  :  objc-exp.c
<item>parse_escape()  :  cp-name-parser.c
<item>pascal_lex()  :  p-exp.c
</itemize>
</descrip>

<sect1>Local Function parse_number()

<p><tt>static int parse_number ( const char* p, int len, int parsed_float )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fill_comp()  :  cp-name-parser.c
<item>make_builtin_type()  :  cp-name-parser.c
<item>make_name()  :  cp-name-parser.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cpname_lex()  :  cp-name-parser.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cpname_lval  :  cp-name-parser.c
<item>_sch_istable, _sch_tolower
</itemize>
</descrip>

<sect1>Local Function symbol_end()

<p><tt>static const char* symbol_end ( const char* lexptr )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>cpname_lex()  :  cp-name-parser.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>_sch_istable
</itemize>
</descrip>

<sect1>Local Function yy_reduce_print()

<p><tt>static void yy_reduce_print ( yytype_int16* yyssp, YYSTYPE* yyvsp, int cpname_rule )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>yy_symbol_print()  :  cp-name-parser.c
<item>fprintf()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cpname_parse()  :  cp-name-parser.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cpname_r2  :  cp-name-parser.c
<item>yyrline  :  cp-name-parser.c
<item>yystos  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Local Function yy_stack_print()

<p><tt>static void yy_stack_print ( yytype_int16* yybottom, yytype_int16* yytop )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fprintf()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cpname_parse()  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Local Function yy_symbol_print()

<p><tt>static void yy_symbol_print ( FILE* yyo, int yytype, YYSTYPE const* const yyvaluep )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>yy_symbol_value_print()  :  cp-name-parser.c
<item>fprintf()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cpname_parse()  :  cp-name-parser.c
<item>yy_reduce_print()  :  cp-name-parser.c
<item>yydestruct()  :  cp-name-parser.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>yytname  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Local Function yy_symbol_value_print()

<p><tt>static void yy_symbol_value_print ( FILE* yyo, int yytype, YYSTYPE const* const yyvaluep )</tt><newline>
<descrip>
<tag>Called by:</tag>
<itemize>
<item>yy_symbol_print()  :  cp-name-parser.c
</itemize>
</descrip>

<sect1>Local Function yydestruct()

<p><tt>static void yydestruct ( const char* yymsg, int yytype, YYSTYPE* yyvaluep )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>yy_symbol_print()  :  cp-name-parser.c
<item>fprintf()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>cpname_parse()  :  cp-name-parser.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cpname_debug  :  cp-name-parser.c
</itemize>
</descrip>

</article>
