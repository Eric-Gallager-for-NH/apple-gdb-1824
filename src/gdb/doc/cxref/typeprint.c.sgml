<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF typeprint.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for typeprint.c of gdb.cxref.
<author>cxref

<sect>File typeprint.c

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcore.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;target.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;dcache.h&quot;</tt>
<item><tt>#include &quot;memattr.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;cp-abi.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;typeprint.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;errno.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;exceptions.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;ui-out.h&quot;</tt>
<item><tt>#include &lt;setjmp.h&gt;</tt>
</itemize>
</itemize>

<sect1>External Variables

<p>
<bf>objectprint</bf><newline>
<tt>extern int objectprint</tt><newline>
<descrip>
<tag>Defined in:</tag>
<itemize>
<item>objectprint</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>single_quote_typename</bf><newline>
<tt>static int single_quote_typename</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>get_single_quote_typename()
<item>set_single_quote_typename()
</itemize>
</descrip>

<sect1>Global Function _initialize_typeprint()

<p><tt>void _initialize_typeprint ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>typeprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_com()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>ptype_command()  :  typeprint.c
<item>whatis_command()  :  typeprint.c
</itemize>
</descrip>

<sect1>Global Function get_single_quote_typename()

<p><tt>int get_single_quote_typename ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>typeprint.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>c_print_typename_possibly_quoted()  :  c-typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>single_quote_typename  :  typeprint.c
</itemize>
</descrip>

<sect1>Global Function maintenance_print_type()

<p><tt>void maintenance_print_type ( const char* the_typename, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>gdbtypes.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>evaluate_type()  :  eval.c
<item>make_cleanup()  :  utils.c
<item>parse_expression()  :  parse.c
<item>recursive_dump_type()  :  gdbtypes.c
<item>value_type()  :  value.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_maint_cmds()  :  maint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>innermost_block  :  parse.c
</itemize>
</descrip>

<sect1>Global Function print_type_scalar()

<p><tt>void print_type_scalar ( struct type* type, long val, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>typeprint.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>error()  :  utils.c
<item>fprintf_filtered()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>objc_fixup_ivar_offset()  :  objc-lang.c
<item>print_longest()  :  valprint.c
<item>print_type_scalar()  :  typeprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>pascal_type_print_base()  :  p-typeprint.c
<item>pascal_val_print()  :  p-valprint.c
<item>print_type_scalar()  :  typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Global Function set_single_quote_typename()

<p><tt>int set_single_quote_typename ( int new_value )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>typeprint.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>type_sprint_quoted()  :  typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>single_quote_typename  :  typeprint.c
</itemize>
</descrip>

<sect1>Global Function type_print()

<p><tt>void type_print ( struct type* type, const char* varstring, struct ui_file* stream, int show )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ada_dump_subexp_body()  :  ada-lang.c
<item>ada_lookup_struct_elt_type()  :  ada-lang.c
<item>ada_print_subexp()  :  ada-lang.c
<item>ada_typedef_print()  :  ada-typeprint.c
<item>ada_val_print_1()  :  ada-valprint.c
<item>ada_value_print()  :  ada-valprint.c
<item>c_type_print_base()  :  c-typeprint.c
<item>c_val_print()  :  c-valprint.c
<item>c_value_print()  :  c-valprint.c
<item>cp_print_class_method()  :  cp-valprint.c
<item>cp_type_print_method_args()  :  c-typeprint.c
<item>dump_subexp_body_standard()  :  expprint.c
<item>f_val_print()  :  f-valprint.c
<item>java_type_print_base()  :  jv-typeprint.c
<item>java_value_print()  :  jv-valprint.c
<item>pascal_object_print_class_method()  :  p-valprint.c
<item>pascal_type_print_base()  :  p-typeprint.c
<item>pascal_val_print()  :  p-valprint.c
<item>pascal_value_print()  :  p-valprint.c
<item>print_subexp_standard()  :  expprint.c
<item>print_symbol_info()  :  symtab.c
<item>ptype_command()  :  typeprint.c
<item>type_sprint()  :  typeprint.c
<item>typedef_print()  :  typeprint.c
<item>whatis_exp()  :  typeprint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
</itemize>
</descrip>

<sect1>Global Function type_sprint()

<p><tt>char* type_sprint ( struct type* type, const char* varstring, int show )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>make_cleanup_ui_file_delete()  :  utils.c
<item>mem_fileopen()  :  ui-file.c
<item>type_print()  :  typeprint.c
<item>ui_file_xstrdup()  :  ui-file.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>lookup_struct_elt_type()  :  gdbtypes.c
<item>type_sprint_quoted()  :  typeprint.c
<item>varobj_get_dynamic_type()  :  varobj.c
<item>varobj_get_type_internal()  :  varobj.c
<item>varobj_lookup_struct_elt_type_by_index()  :  varobj.c
</itemize>
</descrip>

<sect1>Global Function type_sprint_quoted()

<p><tt>char* type_sprint_quoted ( struct type* type, const char* varstring, int show )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>set_single_quote_typename()  :  typeprint.c
<item>type_sprint()  :  typeprint.c
<item>exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), sigsetjmp(), throw_exception()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>watch_command_1()  :  breakpoint.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>uiout  :  ui-out.c
</itemize>
</descrip>

<sect1>Global Function typedef_print()

<p><tt>void typedef_print ( struct type* type, struct symbol* newsym, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>value.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>check_typedef()  :  gdbtypes.c
<item>error()  :  utils.c
<item>fprintf_filtered()  :  utils.c
<item>symbol_natural_name()  :  symtab.c
<item>type_print()  :  typeprint.c
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>print_symbol_info()  :  symtab.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_language  :  language.c
<item>demangle  :  utils.c
</itemize>
</descrip>

<sect1>Local Function ptype_command()

<p><tt>static void ptype_command ( const char* the_typename, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>typeprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>parse_expression()  :  parse.c
<item>printf_filtered()  :  utils.c
<item>ptype_eval()  :  typeprint.c
<item>type_print()  :  typeprint.c
<item>whatis_exp()  :  typeprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_typeprint()  :  typeprint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>innermost_block  :  parse.c
</itemize>
</descrip>

<sect1>Local Function ptype_eval()

<p><tt>static struct type* ptype_eval ( struct expression* exp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>typeprint.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ptype_command()  :  typeprint.c
</itemize>
</descrip>

<sect1>Local Function whatis_command()

<p><tt>static void whatis_command ( const char* exp, int from_tty )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>typeprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>whatis_exp()  :  typeprint.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_typeprint()  :  typeprint.c
</itemize>
</descrip>

<sect1>Local Function whatis_exp()

<p><tt>static void whatis_exp ( const char* exp, int show )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>typeprint.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>access_value_history()  :  value.c
<item>do_cleanups()  :  utils.c
<item>evaluate_type()  :  eval.c
<item>get_closure_dynamic_type()  :  gdbtypes.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>lookup_reference_type()  :  gdbtypes.c
<item>make_cleanup()  :  utils.c
<item>parse_expression()  :  parse.c
<item>printf_filtered()  :  utils.c
<item>type_print()  :  typeprint.c
<item>value_rtti_target_type()  :  valops.c
<item>value_rtti_type()  :  cp-abi.c
<item>value_type()  :  value.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>ptype_command()  :  typeprint.c
<item>whatis_command()  :  typeprint.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_current_contents()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>innermost_block  :  parse.c
<item>objectprint  :  cp-valprint.c
</itemize>
</descrip>

</article>
