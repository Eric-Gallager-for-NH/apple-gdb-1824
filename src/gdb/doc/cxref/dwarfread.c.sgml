<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF dwarfread.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for dwarfread.c of gdb.cxref.
<author>cxref

<sect>File dwarfread.c
<descrip>
<tag>References Variables:</tag>
<itemize>
<item>file_symbols  :  buildsym.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;objfiles.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;uuid/uuid.h&gt;</tt>
<item><tt>#include &quot;gdb_obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/obstack.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symfile.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
</itemize>
<item><tt>#include &quot;inlining.h&quot;</tt>
<itemize>
<item><tt>#include &lt;block.h&gt;</tt>
<item><tt>#include &quot;frame.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;value.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/floatformat.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;gdb_regex.h&quot;</tt>
<itemize>
<item><tt>#include &lt;regex.h&gt;</tt>
</itemize>
<item><tt>#include &quot;frame.h&quot;</tt>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;gdbtypes.h&quot;</tt>
<item><tt>#include &quot;expression.h&quot;</tt>
<itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<item><tt>#include &quot;doublest.h&quot;</tt>
</itemize>
</itemize>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
</itemize>
<item><tt>#include &lt;sqlite3.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;../include/elf/dwarf.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;buildsym.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;../include/demangle.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;expression.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;language.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;complaints.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &lt;fcntl.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_assert.h&quot;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define DIE_ID</tt><newline>
<p>
<tt>#define DIE_NAME</tt><newline>
<p>
<tt>#define GCC_PRODUCER &quot;GNU C &quot;</tt><newline>
<p>
<tt>#define GPLUS_PRODUCER &quot;GNU C++ &quot;</tt><newline>
<p>
<tt>#define LCC_PRODUCER &quot;NCR C/C++&quot;</tt><newline>
<p>
<tt>#define GET_UNSIGNED 0</tt><newline>
<p>
<tt>#define GET_SIGNED 1</tt><newline>
<p>
<tt>#define SIZEOF_DIE_LENGTH 4</tt><newline>
<p>
<tt>#define SIZEOF_DIE_TAG 2</tt><newline>
<p>
<tt>#define SIZEOF_ATTRIBUTE 2</tt><newline>
<p>
<tt>#define SIZEOF_FORMAT_SPECIFIER 1</tt><newline>
<p>
<tt>#define SIZEOF_FMT_FT 2</tt><newline>
<p>
<tt>#define SIZEOF_LINETBL_LENGTH 4</tt><newline>
<p>
<tt>#define SIZEOF_LINETBL_LINENO 4</tt><newline>
<p>
<tt>#define SIZEOF_LINETBL_STMT 2</tt><newline>
<p>
<tt>#define SIZEOF_LINETBL_DELTA 4</tt><newline>
<p>
<tt>#define SIZEOF_LOC_ATOM_CODE 1</tt><newline>
<p>
<tt>#define FORM_FROM_ATTR( attr )</tt><newline>
<p>
<tt>#define TARGET_FT_POINTER_SIZE( objfile )</tt><newline>
<p>
<tt>#define TARGET_FT_LONG_SIZE( objfile )</tt><newline>
<p>
<tt>#define AT_short_element_list</tt><newline>
<p>
<tt>#define DBFOFF( p )</tt><newline>
<p>
<tt>#define DBROFF( p )</tt><newline>
<p>
<tt>#define DBLENGTH( p )</tt><newline>
<p>
<tt>#define LNFOFF( p )</tt><newline>
<p>
<tt>#define AUTO_AS_IN_THE_C_MEANING_OF_IT auto</tt><newline>

<sect1>Typedef DIE_REF

<p>
<tt>typedef unsigned int DIE_REF</tt><newline>

<sect1>Typedef BLOCK

<p>
<tt>typedef char BLOCK</tt><newline>

<sect1>Type struct dieinfo

<p>
<itemize>
<item><tt>struct dieinfo</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>char* die;</tt><newline>
<item><tt>unsigned long die_length;</tt><newline>
<item><tt>DIE_REF die_ref;</tt><newline>
<item><tt>unsigned short die_tag;</tt><newline>
<item><tt>CORE_ADDR at_padding;</tt><newline>
<item><tt>unsigned long at_sibling;</tt><newline>
<item><tt>BLOCK* at_location;</tt><newline>
<item><tt>char* at_name;</tt><newline>
<item><tt>unsigned short at_fund_type;</tt><newline>
<item><tt>BLOCK* at_mod_fund_type;</tt><newline>
<item><tt>CORE_ADDR at_user_def_type;</tt><newline>
<item><tt>BLOCK* at_mod_u_d_type;</tt><newline>
<item><tt>unsigned short at_ordering;</tt><newline>
<item><tt>BLOCK* at_subscr_data;</tt><newline>
<item><tt>size_t at_byte_size;</tt><newline>
<item><tt>unsigned short at_bit_offset;</tt><newline>
<item><tt>size_t at_bit_size;</tt><newline>
<item><tt>BLOCK* at_element_list;</tt><newline>
<item><tt>CORE_ADDR at_stmt_list;</tt><newline>
<item><tt>CORE_ADDR at_low_pc;</tt><newline>
<item><tt>CORE_ADDR at_high_pc;</tt><newline>
<item><tt>CORE_ADDR at_language;</tt><newline>
<item><tt>CORE_ADDR at_member;</tt><newline>
<item><tt>CORE_ADDR at_discr;</tt><newline>
<item><tt>BLOCK* at_discr_value;</tt><newline>
<item><tt>BLOCK* at_string_length;</tt><newline>
<item><tt>char* at_comp_dir;</tt><newline>
<item><tt>char* at_producer;</tt><newline>
<item><tt>CORE_ADDR at_start_scope;</tt><newline>
<item><tt>CORE_ADDR at_stride_size;</tt><newline>
<item><tt>CORE_ADDR at_src_info;</tt><newline>
<item><tt>char* at_prototyped;</tt><newline>
<item><tt>unsigned int has_at_low_pc:1;</tt><newline>
<item><tt>unsigned int has_at_stmt_list:1;</tt><newline>
<item><tt>unsigned int has_at_byte_size:1;</tt><newline>
<item><tt>unsigned int short_element_list:1;</tt><newline>
<item><tt>unsigned int isreg;</tt><newline>
<item><tt>unsigned int optimized_out;</tt><newline>
<item><tt>unsigned int offreg;</tt><newline>
<item><tt>unsigned int basereg;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct dwfinfo

<p>
<itemize>
<item><tt>struct dwfinfo</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>file_ptr dbfoff;</tt><newline>
<item><tt>int dbroff;</tt><newline>
<item><tt>int dblength;</tt><newline>
<item><tt>file_ptr lnfoff;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct nextfield

<p>
<itemize>
<item><tt>struct nextfield</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct nextfield* next;</tt><newline>
<item><tt>struct field field;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Type struct nextfield

<p>
<itemize>
<item><tt>struct nextfield</tt><newline>
<itemize>
<item><tt>{</tt><newline>
<item><tt>struct nextfield* next;</tt><newline>
<item><tt>struct field field;</tt><newline>
<item><tt>}</tt><newline>
</itemize>
</itemize>

<sect1>Global Variable list_in_scope

<p>
<tt>struct pending** list_in_scope</tt><newline>
<descrip>
<tag>Visible in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>enum_type()  :  dwarfread.c
<item>new_symbol()  :  dwarfread.c
<item>read_func_scope()  :  dwarfread.c
<item>synthesize_typedef()  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Variables

<p>
<bf>diecount</bf><newline>
<tt>static int diecount</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>completedieinfo()
<item>psymtab_to_symtab_1()
<item>read_ofile_symtab()
</itemize>
</descrip>
<p>
<bf>curdie</bf><newline>
<tt>static struct dieinfo* curdie</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>alloc_utype()
<item>attribute_size()
<item>basicdieinfo()
<item>completedieinfo()
<item>decode_array_element_type()
<item>decode_fund_type()
<item>decode_modified_type()
<item>decode_subscript_data_item()
<item>dwarf_read_array_type()
<item>locval()
<item>lookup_utype()
<item>read_func_scope()
<item>read_subroutine_type()
<item>read_tag_string_type()
<item>scan_partial_symbols()
<item>struct_type()
<item>target_to_host()
</itemize>
</descrip>
<p>
<bf>dbbase</bf><newline>
<tt>static char* dbbase</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>basicdieinfo()
<item>dwarf_build_psymtabs()
<item>process_dies()
<item>read_ofile_symtab()
<item>scan_compilation_units()
<item>scan_partial_symbols()
<item>struct_type()
</itemize>
</descrip>
<p>
<bf>dbsize</bf><newline>
<tt>static int dbsize</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>basicdieinfo()
<item>dwarf_build_psymtabs()
<item>read_ofile_symtab()
</itemize>
</descrip>
<p>
<bf>dbroff</bf><newline>
<tt>static int dbroff</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>alloc_utype()
<item>basicdieinfo()
<item>dwarf_build_psymtabs()
<item>lookup_utype()
<item>process_dies()
<item>read_ofile_symtab()
<item>scan_compilation_units()
<item>scan_partial_symbols()
<item>struct_type()
</itemize>
</descrip>
<p>
<bf>lnbase</bf><newline>
<tt>static char* lnbase</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>read_file_scope()
<item>read_ofile_symtab()
</itemize>
</descrip>
<p>
<bf>baseaddr</bf><newline>
<tt>static CORE_ADDR baseaddr</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>completedieinfo()
<item>decode_line_numbers()
<item>dwarf_build_psymtabs()
<item>new_symbol()
<item>read_ofile_symtab()
</itemize>
</descrip>
<p>
<bf>base_section_offsets</bf><newline>
<tt>static struct section_offsets* base_section_offsets</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf_build_psymtabs()
<item>read_ofile_symtab()
<item>scan_compilation_units()
</itemize>
</descrip>
<p>
<bf>utypes</bf><newline>
<tt>static struct type** utypes</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>alloc_utype()
<item>free_utypes()
<item>lookup_utype()
<item>read_file_scope()
</itemize>
</descrip>
<p>
<bf>numutypes</bf><newline>
<tt>static int numutypes</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>alloc_utype()
<item>free_utypes()
<item>lookup_utype()
<item>read_file_scope()
</itemize>
</descrip>
<p>
<bf>ftypes</bf><newline>
<tt>static struct type* ftypes[29]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf_fundamental_type()
<item>read_file_scope()
</itemize>
</descrip>
<p>
<bf>cu_language</bf><newline>
<tt>static enum language cu_language</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>add_enum_psymbol()
<item>add_partial_symbol()
<item>enum_type()
<item>new_symbol()
<item>read_enumeration()
<item>read_file_scope()
<item>read_structure_scope()
<item>set_cu_language()
<item>synthesize_typedef()
</itemize>
</descrip>
<p>
<bf>cu_language_defn</bf><newline>
<tt>static const struct language_defn* cu_language_defn</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>dwarf_fundamental_type()
<item>set_cu_language()
</itemize>
</descrip>

<sect1>Global Function dwarf_build_psymtabs()

<p><tt>void dwarf_build_psymtabs ( struct objfile* objfile, int mainline, file_ptr dbfoff, unsigned int dbfsize, file_ptr lnoffset, unsigned int lnsize )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>symfile.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>init_psymbol_list()  :  symfile.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>scan_compilation_units()  :  dwarfread.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>bfd_bread(), bfd_seek()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>elf_symfile_read()  :  elfread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>base_section_offsets  :  dwarfread.c
<item>baseaddr  :  dwarfread.c
<item>current_objfile  :  objfiles.c
<item>dbbase  :  dwarfread.c
<item>dbroff  :  dwarfread.c
<item>dbsize  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function add_enum_psymbol()

<p><tt>static void add_enum_psymbol ( struct dieinfo* dip, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_psymbol_to_list()  :  symfile.c
<item>attribute_size()  :  dwarfread.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>target_to_host()  :  dwarfread.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>scan_partial_symbols()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cu_language  :  dwarfread.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function add_partial_symbol()

<p><tt>static void add_partial_symbol ( struct dieinfo* dip, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_psymbol_to_list()  :  symfile.c
<item>strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>scan_partial_symbols()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cu_language  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function alloc_utype()

<p><tt>static struct type* alloc_utype ( DIE_REF die_ref, struct type* utypep )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_type()  :  gdbtypes.c
<item>bad_die_ref_complaint()  :  dwarfread.c
<item>complaint()  :  complaints.c
<item>dwarf_fundamental_type()  :  dwarfread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_array_element_type()  :  dwarfread.c
<item>decode_die_type()  :  dwarfread.c
<item>decode_modified_type()  :  dwarfread.c
<item>dwarf_read_array_type()  :  dwarfread.c
<item>enum_type()  :  dwarfread.c
<item>read_subroutine_type()  :  dwarfread.c
<item>read_tag_pointer_type()  :  dwarfread.c
<item>read_tag_string_type()  :  dwarfread.c
<item>struct_type()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>curdie  :  dwarfread.c
<item>current_objfile  :  objfiles.c
<item>dbroff  :  dwarfread.c
<item>numutypes  :  dwarfread.c
<item>symfile_complaints  :  complaints.c
<item>utypes  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function attribute_size()

<p><tt>static int attribute_size ( unsigned int attr )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_ptr_bit()  :  gdbarch.c
<item>unknown_attribute_form_complaint()  :  dwarfread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_enum_psymbol()  :  dwarfread.c
<item>completedieinfo()  :  dwarfread.c
<item>decode_array_element_type()  :  dwarfread.c
<item>decode_mod_fund_type()  :  dwarfread.c
<item>decode_mod_u_d_type()  :  dwarfread.c
<item>decode_modified_type()  :  dwarfread.c
<item>dwarf_read_array_type()  :  dwarfread.c
<item>enum_type()  :  dwarfread.c
<item>locval()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>curdie  :  dwarfread.c
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function bad_array_element_type_complaint()

<p><tt>static void bad_array_element_type_complaint ( int arg1, const char* arg2, int arg3 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_array_element_type()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function bad_die_ref_complaint()

<p><tt>static void bad_die_ref_complaint ( int arg1, const char* arg2, int arg3 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>alloc_utype()  :  dwarfread.c
<item>lookup_utype()  :  dwarfread.c
<item>scan_partial_symbols()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function basicdieinfo()

<p><tt>static void basicdieinfo ( struct dieinfo* dip, char* diep, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>target_to_host()  :  dwarfread.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_dies()  :  dwarfread.c
<item>scan_compilation_units()  :  dwarfread.c
<item>scan_partial_symbols()  :  dwarfread.c
<item>struct_type()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>curdie  :  dwarfread.c
<item>dbbase  :  dwarfread.c
<item>dbroff  :  dwarfread.c
<item>dbsize  :  dwarfread.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function completedieinfo()

<p><tt>static void completedieinfo ( struct dieinfo* dip, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>attribute_size()  :  dwarfread.c
<item>complaint()  :  complaints.c
<item>gdbarch_ptr_bit()  :  gdbarch.c
<item>target_to_host()  :  dwarfread.c
<item>unknown_attribute_form_complaint()  :  dwarfread.c
<item>strlen(), strrchr()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_dies()  :  dwarfread.c
<item>scan_compilation_units()  :  dwarfread.c
<item>scan_partial_symbols()  :  dwarfread.c
<item>struct_type()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>baseaddr  :  dwarfread.c
<item>curdie  :  dwarfread.c
<item>current_gdbarch  :  gdbarch.c
<item>diecount  :  dwarfread.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function create_name()

<p><tt>static char* create_name ( const char* name, struct obstack* obstackp )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
<item>__builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), _obstack_newchunk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>enum_type()  :  dwarfread.c
<item>synthesize_typedef()  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function decode_array_element_type()

<p><tt>static struct type* decode_array_element_type ( char* scan )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_utype()  :  dwarfread.c
<item>attribute_size()  :  dwarfread.c
<item>bad_array_element_type_complaint()  :  dwarfread.c
<item>decode_fund_type()  :  dwarfread.c
<item>decode_mod_fund_type()  :  dwarfread.c
<item>decode_mod_u_d_type()  :  dwarfread.c
<item>dwarf_fundamental_type()  :  dwarfread.c
<item>lookup_utype()  :  dwarfread.c
<item>target_to_host()  :  dwarfread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_subscript_data_item()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>curdie  :  dwarfread.c
<item>current_objfile  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function decode_die_type()

<p><tt>static struct type* decode_die_type ( struct dieinfo* dip )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_utype()  :  dwarfread.c
<item>decode_fund_type()  :  dwarfread.c
<item>decode_mod_fund_type()  :  dwarfread.c
<item>decode_mod_u_d_type()  :  dwarfread.c
<item>dwarf_fundamental_type()  :  dwarfread.c
<item>lookup_utype()  :  dwarfread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>new_symbol()  :  dwarfread.c
<item>read_subroutine_type()  :  dwarfread.c
<item>read_tag_pointer_type()  :  dwarfread.c
<item>struct_type()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_objfile  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function decode_fund_type()

<p><tt>static struct type* decode_fund_type ( unsigned int fundtype )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>dwarf_fundamental_type()  :  dwarfread.c
<item>lookup_pointer_type()  :  gdbtypes.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_array_element_type()  :  dwarfread.c
<item>decode_die_type()  :  dwarfread.c
<item>decode_modified_type()  :  dwarfread.c
<item>decode_subscript_data_item()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>curdie  :  dwarfread.c
<item>current_objfile  :  objfiles.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function decode_line_numbers()

<p><tt>static void decode_line_numbers ( char* linetable )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdbarch_ptr_bit()  :  gdbarch.c
<item>record_line()  :  buildsym.c
<item>target_to_host()  :  dwarfread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_file_scope()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>baseaddr  :  dwarfread.c
<item>current_gdbarch  :  gdbarch.c
<item>current_objfile  :  objfiles.c
<item>current_subfile  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function decode_mod_fund_type()

<p><tt>static struct type* decode_mod_fund_type ( char* typedata )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>attribute_size()  :  dwarfread.c
<item>decode_modified_type()  :  dwarfread.c
<item>target_to_host()  :  dwarfread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_array_element_type()  :  dwarfread.c
<item>decode_die_type()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_objfile  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function decode_mod_u_d_type()

<p><tt>static struct type* decode_mod_u_d_type ( char* typedata )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>attribute_size()  :  dwarfread.c
<item>decode_modified_type()  :  dwarfread.c
<item>target_to_host()  :  dwarfread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_array_element_type()  :  dwarfread.c
<item>decode_die_type()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_objfile  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function decode_modified_type()

<p><tt>static struct type* decode_modified_type ( char* modifiers, unsigned int modcount, int mtype )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_utype()  :  dwarfread.c
<item>attribute_size()  :  dwarfread.c
<item>complaint()  :  complaints.c
<item>decode_fund_type()  :  dwarfread.c
<item>decode_modified_type()  :  dwarfread.c
<item>dwarf_fundamental_type()  :  dwarfread.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>lookup_reference_type()  :  gdbtypes.c
<item>lookup_utype()  :  dwarfread.c
<item>target_to_host()  :  dwarfread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_mod_fund_type()  :  dwarfread.c
<item>decode_mod_u_d_type()  :  dwarfread.c
<item>decode_modified_type()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>curdie  :  dwarfread.c
<item>current_objfile  :  objfiles.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function decode_subscript_data_item()

<p><tt>static struct type* decode_subscript_data_item ( char* scan, char* end )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>create_array_type()  :  gdbtypes.c
<item>create_range_type()  :  gdbtypes.c
<item>decode_array_element_type()  :  dwarfread.c
<item>decode_fund_type()  :  dwarfread.c
<item>decode_subscript_data_item()  :  dwarfread.c
<item>dwarf_fundamental_type()  :  dwarfread.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>target_to_host()  :  dwarfread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_subscript_data_item()  :  dwarfread.c
<item>dwarf_read_array_type()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>curdie  :  dwarfread.c
<item>current_gdbarch  :  gdbarch.c
<item>current_objfile  :  objfiles.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dup_user_type_definition_complaint()

<p><tt>static void dup_user_type_definition_complaint ( int arg1, const char* arg2 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf_read_array_type()  :  dwarfread.c
<item>read_subroutine_type()  :  dwarfread.c
<item>read_tag_string_type()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function dwarf_fundamental_type()

<p><tt>static struct type* dwarf_fundamental_type ( struct objfile* objfile, int type_id )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>error()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>alloc_utype()  :  dwarfread.c
<item>decode_array_element_type()  :  dwarfread.c
<item>decode_die_type()  :  dwarfread.c
<item>decode_fund_type()  :  dwarfread.c
<item>decode_modified_type()  :  dwarfread.c
<item>decode_subscript_data_item()  :  dwarfread.c
<item>read_tag_string_type()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cu_language_defn  :  dwarfread.c
<item>ftypes  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function dwarf_psymtab_to_symtab()

<p><tt>static void dwarf_psymtab_to_symtab ( struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdb_flush()  :  ui-file.c
<item>printf_filtered()  :  utils.c
<item>psymtab_to_symtab_1()  :  dwarfread.c
<item>warning()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>scan_compilation_units()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>info_verbose  :  top.c
</itemize>
</descrip>

<sect1>Local Function dwarf_read_array_type()

<p><tt>static void dwarf_read_array_type ( struct dieinfo* dip )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_utype()  :  dwarfread.c
<item>attribute_size()  :  dwarfread.c
<item>complaint()  :  complaints.c
<item>decode_subscript_data_item()  :  dwarfread.c
<item>dup_user_type_definition_complaint()  :  dwarfread.c
<item>lookup_utype()  :  dwarfread.c
<item>target_to_host()  :  dwarfread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_dies()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>curdie  :  dwarfread.c
<item>current_objfile  :  objfiles.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function enum_type()

<p><tt>static struct type* enum_type ( struct dieinfo* dip, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_symbol_to_list()  :  buildsym.c
<item>alloc_utype()  :  dwarfread.c
<item>attribute_size()  :  dwarfread.c
<item>create_name()  :  dwarfread.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>lookup_utype()  :  dwarfread.c
<item>obconcat()  :  symfile.c
<item>obsavestring()  :  symfile.c
<item>symbol_init_language_specific()  :  symtab.c
<item>target_to_host()  :  dwarfread.c
<item>__builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_enumeration()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cu_language  :  dwarfread.c
<item>current_gdbarch  :  gdbarch.c
<item>list_in_scope  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function free_utypes()

<p><tt>static void free_utypes ( void* dummy )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>Used in:</tag>
<itemize>
<item>read_file_scope()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>numutypes  :  dwarfread.c
<item>utypes  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function handle_producer()

<p><tt>static void handle_producer ( char* producer )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>set_demangling_style()  :  demangle.c
<item>strlen(), strncmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_file_scope()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>processing_gcc_compilation  :  buildsym.c
<item>current_demangling_style
</itemize>
</descrip>

<sect1>Local Function locval()

<p><tt>static int locval ( struct dieinfo* dip )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>attribute_size()  :  dwarfread.c
<item>complaint()  :  complaints.c
<item>gdbarch_dwarf_reg_to_regnum()  :  gdbarch.c
<item>gdbarch_long_bit()  :  gdbarch.c
<item>internal_error()  :  utils.c
<item>target_to_host()  :  dwarfread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>new_symbol()  :  dwarfread.c
<item>struct_type()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>curdie  :  dwarfread.c
<item>current_gdbarch  :  gdbarch.c
<item>current_objfile  :  objfiles.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function lookup_utype()

<p><tt>static struct type* lookup_utype ( DIE_REF die_ref )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>bad_die_ref_complaint()  :  dwarfread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>decode_array_element_type()  :  dwarfread.c
<item>decode_die_type()  :  dwarfread.c
<item>decode_modified_type()  :  dwarfread.c
<item>dwarf_read_array_type()  :  dwarfread.c
<item>enum_type()  :  dwarfread.c
<item>read_subroutine_type()  :  dwarfread.c
<item>read_tag_pointer_type()  :  dwarfread.c
<item>read_tag_string_type()  :  dwarfread.c
<item>struct_type()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>curdie  :  dwarfread.c
<item>dbroff  :  dwarfread.c
<item>numutypes  :  dwarfread.c
<item>utypes  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function new_symbol()

<p><tt>static struct symbol* new_symbol ( struct dieinfo* dip, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_symbol_to_list()  :  buildsym.c
<item>decode_die_type()  :  dwarfread.c
<item>locval()  :  dwarfread.c
<item>lookup_function_type()  :  gdbtypes.c
<item>symbol_set_names()  :  symtab.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_dies()  :  dwarfread.c
<item>read_enumeration()  :  dwarfread.c
<item>read_func_scope()  :  dwarfread.c
<item>read_structure_scope()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>baseaddr  :  dwarfread.c
<item>cu_language  :  dwarfread.c
<item>global_symbols  :  buildsym.c
<item>list_in_scope  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function process_dies()

<p><tt>static void process_dies ( char* thisdie, char* enddie, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>basicdieinfo()  :  dwarfread.c
<item>completedieinfo()  :  dwarfread.c
<item>dwarf_read_array_type()  :  dwarfread.c
<item>gdbarch_smash_text_address()  :  gdbarch.c
<item>new_symbol()  :  dwarfread.c
<item>read_enumeration()  :  dwarfread.c
<item>read_file_scope()  :  dwarfread.c
<item>read_func_scope()  :  dwarfread.c
<item>read_lexical_block_scope()  :  dwarfread.c
<item>read_structure_scope()  :  dwarfread.c
<item>read_subroutine_type()  :  dwarfread.c
<item>read_tag_pointer_type()  :  dwarfread.c
<item>read_tag_string_type()  :  dwarfread.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_file_scope()  :  dwarfread.c
<item>read_func_scope()  :  dwarfread.c
<item>read_lexical_block_scope()  :  dwarfread.c
<item>read_ofile_symtab()  :  dwarfread.c
<item>struct_type()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
<item>current_subfile  :  buildsym.c
<item>dbbase  :  dwarfread.c
<item>dbroff  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function psymtab_to_symtab_1()

<p><tt>static void psymtab_to_symtab_1 ( struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>buildsym_init()  :  buildsym.c
<item>do_cleanups()  :  utils.c
<item>fputs_filtered()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>make_cleanup()  :  utils.c
<item>printf_filtered()  :  utils.c
<item>psymtab_to_symtab_1()  :  dwarfread.c
<item>read_ofile_symtab()  :  dwarfread.c
<item>warning()  :  utils.c
<item>wrap_here()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf_psymtab_to_symtab()  :  dwarfread.c
<item>psymtab_to_symtab_1()  :  dwarfread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>really_free_pendings()  :  buildsym.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>diecount  :  dwarfread.c
<item>gdb_stdout  :  main.c
<item>info_verbose  :  top.c
</itemize>
</descrip>

<sect1>Local Function read_enumeration()

<p><tt>static void read_enumeration ( struct dieinfo* dip, char* thisdie, char* enddie, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>enum_type()  :  dwarfread.c
<item>new_symbol()  :  dwarfread.c
<item>synthesize_typedef()  :  dwarfread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_dies()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cu_language  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function read_file_scope()

<p><tt>static void read_file_scope ( struct dieinfo* dip, char* thisdie, char* enddie, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>decode_line_numbers()  :  dwarfread.c
<item>do_cleanups()  :  utils.c
<item>end_symtab()  :  buildsym.c
<item>handle_producer()  :  dwarfread.c
<item>make_cleanup()  :  utils.c
<item>process_dies()  :  dwarfread.c
<item>record_debugformat()  :  buildsym.c
<item>set_cu_language()  :  dwarfread.c
<item>start_symtab()  :  buildsym.c
<item>xmalloc()  :  utils.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_dies()  :  dwarfread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>free_utypes()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cu_language  :  dwarfread.c
<item>ftypes  :  dwarfread.c
<item>lnbase  :  dwarfread.c
<item>numutypes  :  dwarfread.c
<item>utypes  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function read_func_scope()

<p><tt>static void read_func_scope ( struct dieinfo* dip, char* thisdie, char* enddie, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
<item>finish_block()  :  buildsym.c
<item>new_symbol()  :  dwarfread.c
<item>pop_context()  :  buildsym.c
<item>process_dies()  :  dwarfread.c
<item>push_context()  :  buildsym.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_dies()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>curdie  :  dwarfread.c
<item>file_symbols  :  buildsym.c
<item>list_in_scope  :  dwarfread.c
<item>local_symbols  :  buildsym.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function read_lexical_block_scope()

<p><tt>static void read_lexical_block_scope ( struct dieinfo* dip, char* thisdie, char* enddie, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>finish_block()  :  buildsym.c
<item>pop_context()  :  buildsym.c
<item>process_dies()  :  dwarfread.c
<item>push_context()  :  buildsym.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_dies()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>local_symbols  :  buildsym.c
</itemize>
</descrip>

<sect1>Local Function read_ofile_symtab()

<p><tt>static void read_ofile_symtab ( struct partial_symtab* pst )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_cleanups()  :  utils.c
<item>error()  :  utils.c
<item>internal_error()  :  utils.c
<item>make_cleanup()  :  utils.c
<item>process_dies()  :  dwarfread.c
<item>target_to_host()  :  dwarfread.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>bfd_bread(), bfd_seek()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>psymtab_to_symtab_1()  :  dwarfread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>xfree()  :  utils.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>base_section_offsets  :  dwarfread.c
<item>baseaddr  :  dwarfread.c
<item>current_objfile  :  objfiles.c
<item>dbbase  :  dwarfread.c
<item>dbroff  :  dwarfread.c
<item>dbsize  :  dwarfread.c
<item>diecount  :  dwarfread.c
<item>lnbase  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function read_structure_scope()

<p><tt>static void read_structure_scope ( struct dieinfo* dip, char* thisdie, char* enddie, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>new_symbol()  :  dwarfread.c
<item>struct_type()  :  dwarfread.c
<item>synthesize_typedef()  :  dwarfread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_dies()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cu_language  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function read_subroutine_type()

<p><tt>static void read_subroutine_type ( struct dieinfo* dip, char* thisdie, char* enddie )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_utype()  :  dwarfread.c
<item>decode_die_type()  :  dwarfread.c
<item>dup_user_type_definition_complaint()  :  dwarfread.c
<item>lookup_function_type()  :  gdbtypes.c
<item>lookup_utype()  :  dwarfread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_dies()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>curdie  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function read_tag_pointer_type()

<p><tt>static void read_tag_pointer_type ( struct dieinfo* dip )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_utype()  :  dwarfread.c
<item>decode_die_type()  :  dwarfread.c
<item>gdbarch_ptr_bit()  :  gdbarch.c
<item>lookup_pointer_type()  :  gdbtypes.c
<item>lookup_utype()  :  dwarfread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_dies()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>current_gdbarch  :  gdbarch.c
</itemize>
</descrip>

<sect1>Local Function read_tag_string_type()

<p><tt>static void read_tag_string_type ( struct dieinfo* dip )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_utype()  :  dwarfread.c
<item>create_range_type()  :  gdbtypes.c
<item>create_string_type()  :  gdbtypes.c
<item>dup_user_type_definition_complaint()  :  dwarfread.c
<item>dwarf_fundamental_type()  :  dwarfread.c
<item>internal_error()  :  utils.c
<item>lookup_utype()  :  dwarfread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>process_dies()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>curdie  :  dwarfread.c
<item>current_objfile  :  objfiles.c
</itemize>
</descrip>

<sect1>Local Function scan_compilation_units()

<p><tt>static void scan_compilation_units ( char* thisdie, char* enddie, file_ptr dbfoff, file_ptr lnoffset, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>basicdieinfo()  :  dwarfread.c
<item>completedieinfo()  :  dwarfread.c
<item>free_named_symtabs()  :  symfile.c
<item>scan_partial_symbols()  :  dwarfread.c
<item>set_cu_language()  :  dwarfread.c
<item>sort_pst_symbols()  :  symfile.c
<item>start_psymtab_common()  :  symfile.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>_obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>dwarf_build_psymtabs()  :  dwarfread.c
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>dwarf_psymtab_to_symtab()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>base_section_offsets  :  dwarfread.c
<item>dbbase  :  dwarfread.c
<item>dbroff  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function scan_partial_symbols()

<p><tt>static void scan_partial_symbols ( char* thisdie, char* enddie, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_enum_psymbol()  :  dwarfread.c
<item>add_partial_symbol()  :  dwarfread.c
<item>bad_die_ref_complaint()  :  dwarfread.c
<item>basicdieinfo()  :  dwarfread.c
<item>completedieinfo()  :  dwarfread.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>scan_compilation_units()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>curdie  :  dwarfread.c
<item>dbbase  :  dwarfread.c
<item>dbroff  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function set_cu_language()

<p><tt>static void set_cu_language ( struct dieinfo* dip )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>deduce_language_from_filename()  :  symfile.c
<item>language_def()  :  language.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_file_scope()  :  dwarfread.c
<item>scan_compilation_units()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cu_language  :  dwarfread.c
<item>cu_language_defn  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function struct_type()

<p><tt>static struct type* struct_type ( struct dieinfo* dip, char* thisdie, char* enddie, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>alloc_utype()  :  dwarfread.c
<item>basicdieinfo()  :  dwarfread.c
<item>complaint()  :  complaints.c
<item>completedieinfo()  :  dwarfread.c
<item>decode_die_type()  :  dwarfread.c
<item>gdbarch_byte_order()  :  gdbarch.c
<item>locval()  :  dwarfread.c
<item>lookup_utype()  :  dwarfread.c
<item>obconcat()  :  symfile.c
<item>objc_fixup_class_length()  :  objc-lang.c
<item>obsavestring()  :  symfile.c
<item>process_dies()  :  dwarfread.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>__builtin_alloca(), _obstack_newchunk(), strlen()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_structure_scope()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>curdie  :  dwarfread.c
<item>current_gdbarch  :  gdbarch.c
<item>dbbase  :  dwarfread.c
<item>dbroff  :  dwarfread.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function synthesize_typedef()

<p><tt>static void synthesize_typedef ( struct dieinfo* dip, struct objfile* objfile, struct type* type )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_symbol_to_list()  :  buildsym.c
<item>create_name()  :  dwarfread.c
<item>symbol_init_language_specific()  :  symtab.c
<item>__builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>read_enumeration()  :  dwarfread.c
<item>read_structure_scope()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>cu_language  :  dwarfread.c
<item>list_in_scope  :  dwarfread.c
</itemize>
</descrip>

<sect1>Local Function target_to_host()

<p><tt>static CORE_ADDR target_to_host ( char* from, int nbytes, int signextend, struct objfile* objfile )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>dwarfread.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>add_enum_psymbol()  :  dwarfread.c
<item>basicdieinfo()  :  dwarfread.c
<item>completedieinfo()  :  dwarfread.c
<item>decode_array_element_type()  :  dwarfread.c
<item>decode_line_numbers()  :  dwarfread.c
<item>decode_mod_fund_type()  :  dwarfread.c
<item>decode_mod_u_d_type()  :  dwarfread.c
<item>decode_modified_type()  :  dwarfread.c
<item>decode_subscript_data_item()  :  dwarfread.c
<item>dwarf_read_array_type()  :  dwarfread.c
<item>enum_type()  :  dwarfread.c
<item>locval()  :  dwarfread.c
<item>read_ofile_symtab()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>curdie  :  dwarfread.c
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

<sect1>Local Function unknown_attribute_form_complaint()

<p><tt>static void unknown_attribute_form_complaint ( int arg1, const char* arg2, int arg3 )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>complaint()  :  complaints.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>attribute_size()  :  dwarfread.c
<item>completedieinfo()  :  dwarfread.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>symfile_complaints  :  complaints.c
</itemize>
</descrip>

</article>
