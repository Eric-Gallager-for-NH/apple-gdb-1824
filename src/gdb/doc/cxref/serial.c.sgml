<!DOCTYPE LINUXDOC SYSTEM>

<!-- This SGML file generated by cxref (version 1.6e). -->
<!-- cxref program (c) Andrew M. Bishop 1995-2014. -->

<!--
Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF serial.c
CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
-->

<article>

<title>Cross reference for serial.c of gdb.cxref.
<author>cxref

<sect>File serial.c
<descrip>
<tag>References Variables:</tag>
<itemize>
<item>logbase_ascii  :  serial.c
<item>logbase_hex  :  serial.c
<item>logbase_octal  :  serial.c
</itemize>
</descrip>

<sect1>Included Files

<p>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<itemize>
<item><tt>#include &lt;sys/types.h&gt;</tt>
</itemize>
<item><tt>#include &lt;sys/time.h&gt;</tt>
<item><tt>#include &lt;time.h&gt;</tt>
<item><tt>#include &lt;sys/types.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
<item><tt>#include &lt;errno.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
<item><tt>#include &lt;string.h&gt;</tt>
<item><tt>#include &lt;regex.h&gt;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;unistd.h&gt;</tt>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;gdb_locale.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config.h&quot;</tt>
<item><tt>#include &lt;locale.h&gt;</tt>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../gdb/signals.h&quot;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &quot;../include/libiberty.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdarg.h&gt;</tt>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;../bfd/bfd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;../include/symcat.h&quot;</tt>
</itemize>
<item><tt>#include &lt;../intl/libintl.h&gt;</tt>
<item><tt>#include &quot;ui-file.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdio.h&gt;</tt>
</itemize>
<item><tt>#include &quot;xm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/xm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &lt;mach/mach.h&gt;</tt>
<item><tt>#include &lt;signal.h&gt;</tt>
<item><tt>#include &lt;limits.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;nm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/i386/nm-i386.h&quot;</tt>
<item><tt>#include &quot;macosx/nm-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;tm.h&quot;</tt>
<itemize>
<item><tt>#include &quot;config/tm-macosx.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;defs.h&quot;</tt>
<item><tt>#include &quot;macosx/i386-macosx-tdep.h&quot;</tt>
<itemize>
<item><tt>#include &quot;macosx/i386-macosx-thread-status.h&quot;</tt>
<itemize>
<item><tt>#include &lt;stdint.h&gt;</tt>
<item><tt>#include &lt;mach/mach_types.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;symtab.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &lt;inttypes.h&gt;</tt>
<item><tt>#include &lt;mach/mach_vm.h&gt;</tt>
<item><tt>#include &lt;mach/kmod.h&gt;</tt>
</itemize>
</itemize>
<item><tt>#include &quot;macosx/tm-i386-macosx.h&quot;</tt>
</itemize>
<item><tt>#include &quot;../include/fopen-bin.h&quot;</tt>
<item><tt>#include &lt;stddef.h&gt;</tt>
<item><tt>#include &lt;stdlib.h&gt;</tt>
<item><tt>#include &quot;gdbarch.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &lt;ctype.h&gt;</tt>
</itemize>
<itemize>
<item><tt>#include &quot;serial.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdb_string.h&quot;</tt>
<itemize>
<item><tt>#include &lt;string.h&gt;</tt>
</itemize>
</itemize>
<itemize>
<item><tt>#include &quot;gdbcmd.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
<item><tt>#include &quot;command.h&quot;</tt>
<itemize>
<item><tt>#include &quot;../include/ansidecl.h&quot;</tt>
</itemize>
<item><tt>#include &quot;ui-out.h&quot;</tt>
</itemize>
</itemize>

<sect1>Preprocessor definitions

<p>
<tt>#define SERIAL_BREAK 1235</tt><newline>

<sect1>Local Variables

<p>
<bf>global_serial_debug_p</bf><newline>
<tt>static int global_serial_debug_p</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_serial()
<item>serial_debug_p()
</itemize>
</descrip>
<p>
<bf>serial_ops_list</bf><newline>
<tt>static struct serial_ops* serial_ops_list</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>serial_add_interface()
<item>serial_interface_lookup()
</itemize>
</descrip>
<p>
<bf>last_serial_opened</bf><newline>
<tt>static struct serial* last_serial_opened</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>do_serial_close()
<item>serial_fdopen()
<item>serial_open()
</itemize>
</descrip>
<p>
<bf>scb_base</bf><newline>
<tt>static struct serial* scb_base</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>do_serial_close()
<item>serial_fdopen()
<item>serial_open()
</itemize>
</descrip>
<p>
<bf>serial_logfile</bf><newline>
<tt>static char* serial_logfile</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_serial()
<item>serial_open()
</itemize>
</descrip>
<p>
<bf>serial_logfp</bf><newline>
<tt>static struct ui_file* serial_logfp</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>do_serial_close()
<item>serial_log_command()
<item>serial_open()
<item>serial_readchar()
<item>serial_send_break()
<item>serial_write()
</itemize>
</descrip>
<p>
<bf>logbase_hex</bf><newline>
<tt>static const char logbase_hex[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>serial.c
<item>serial_logchar()
</itemize>
</descrip>
<p>
<bf>logbase_octal</bf><newline>
<tt>static const char logbase_octal[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>serial.c
<item>serial_logchar()
</itemize>
</descrip>
<p>
<bf>logbase_ascii</bf><newline>
<tt>static const char logbase_ascii[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>serial.c
<item>serial_logchar()
</itemize>
</descrip>
<p>
<bf>logbase_enums</bf><newline>
<tt>static const char* logbase_enums[]</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_serial()
</itemize>
</descrip>
<p>
<bf>serial_logbase</bf><newline>
<tt>static const char* serial_logbase</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_serial()
<item>serial_logchar()
</itemize>
</descrip>
<p>
<bf>serial_current_type</bf><newline>
<tt>static int serial_current_type</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>do_serial_close()
<item>serial_log_command()
<item>serial_logchar()
</itemize>
</descrip>
<p>
<bf>serial_set_cmdlist</bf><newline>
<tt>static struct cmd_list_element* serial_set_cmdlist</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_serial()
<item>serial_set_cmd()
</itemize>
</descrip>
<p>
<bf>serial_show_cmdlist</bf><newline>
<tt>static struct cmd_list_element* serial_show_cmdlist</tt><newline>
<descrip>
<tag>Used in:</tag>
<itemize>
<item>_initialize_serial()
<item>serial_show_cmd()
</itemize>
</descrip>

<sect1>Global Function _initialize_serial()

<p><tt>void _initialize_serial ( void )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>add_prefix_cmd(), add_setshow_enum_cmd(), add_setshow_filename_cmd(), add_setshow_zinteger_cmd()
</itemize>
<tag>References Functions:</tag>
<itemize>
<item>serial_set_cmd()  :  serial.c
<item>serial_show_cmd()  :  serial.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_serial_debug_p  :  serial.c
<item>logbase_enums  :  serial.c
<item>serial_logbase  :  serial.c
<item>serial_logfile  :  serial.c
<item>serial_set_cmdlist  :  serial.c
<item>serial_show_cmdlist  :  serial.c
<item>setdebuglist, setlist, showdebuglist, showlist
</itemize>
</descrip>

<sect1>Global Function deprecated_serial_fd()

<p><tt>int deprecated_serial_fd ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>internal_error()  :  utils.c
</itemize>
</descrip>

<sect1>Global Function serial_add_interface()

<p><tt>void serial_add_interface ( struct serial_ops* optable )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>_initialize_ser_hardwire()  :  ser-unix.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>serial_ops_list  :  serial.c
</itemize>
</descrip>

<sect1>Global Function serial_async()

<p><tt>void serial_async ( struct serial* scb, serial_event_ftype* handler, void* context )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>do_serial_close()  :  serial.c
<item>remote_async()  :  remote.c
<item>remote_async_kill()  :  remote.c
<item>remote_detach()  :  remote.c
<item>remote_disconnect()  :  remote.c
</itemize>
</descrip>

<sect1>Global Function serial_can_async_p()

<p><tt>int serial_can_async_p ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remote_can_async_p()  :  remote.c
</itemize>
</descrip>

<sect1>Global Function serial_close()

<p><tt>void serial_close ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_serial_close()  :  serial.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remote_close()  :  remote.c
<item>remote_open_1()  :  remote.c
</itemize>
</descrip>

<sect1>Global Function serial_debug()

<p><tt>void serial_debug ( struct serial* scb, int debug_p )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
</descrip>

<sect1>Global Function serial_debug_p()

<p><tt>int serial_debug_p ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>reschedule()  :  ser-base.c
<item>ser_base_async()  :  ser-base.c
<item>serial_readchar()  :  serial.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>global_serial_debug_p  :  serial.c
</itemize>
</descrip>

<sect1>Global Function serial_drain_output()

<p><tt>int serial_drain_output ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
</descrip>

<sect1>Global Function serial_fdopen()

<p><tt>struct serial* serial_fdopen ( const int fd )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>serial_interface_lookup()  :  serial.c
<item>xmalloc()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdb_has_a_terminal()  :  inflow.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>last_serial_opened  :  serial.c
<item>scb_base  :  serial.c
</itemize>
</descrip>

<sect1>Global Function serial_flush_input()

<p><tt>int serial_flush_input ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remote_open_1()  :  remote.c
</itemize>
</descrip>

<sect1>Global Function serial_flush_output()

<p><tt>int serial_flush_output ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
</descrip>

<sect1>Global Function serial_get_tty_state()

<p><tt>serial_ttystate serial_get_tty_state ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>gdb_has_a_terminal()  :  inflow.c
<item>terminal_init_inferior_with_pgrp()  :  inflow.c
<item>terminal_ours_1()  :  inflow.c
<item>terminal_save_ours()  :  inflow.c
</itemize>
</descrip>

<sect1>Global Function serial_is_async_p()

<p><tt>int serial_is_async_p ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remote_is_async_p()  :  remote.c
<item>reschedule()  :  ser-base.c
<item>serial_readchar()  :  serial.c
</itemize>
</descrip>

<sect1>Global Function serial_log_command()

<p><tt>void serial_log_command ( const char* cmd )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fputs_unfiltered()  :  ui-file.c
<item>gdb_flush()  :  ui-file.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>execute_command()  :  top.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>serial_current_type  :  serial.c
<item>serial_logfp  :  serial.c
</itemize>
</descrip>

<sect1>Global Function serial_noflush_set_tty_state()

<p><tt>int serial_noflush_set_tty_state ( struct serial* scb, serial_ttystate new_ttystate, serial_ttystate old_ttystate )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>terminal_ours_1()  :  inflow.c
</itemize>
</descrip>

<sect1>Global Function serial_open()

<p><tt>struct serial* serial_open ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdb_fopen()  :  ui-file.c
<item>perror_with_name()  :  utils.c
<item>serial_interface_lookup()  :  serial.c
<item>xfree()  :  utils.c
<item>xmalloc()  :  utils.c
<item>strchr(), strcmp(), strncmp(), xstrdup()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remote_serial_open()  :  remote.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>last_serial_opened  :  serial.c
<item>scb_base  :  serial.c
<item>serial_logfile  :  serial.c
<item>serial_logfp  :  serial.c
</itemize>
</descrip>

<sect1>Global Function serial_print_tty_state()

<p><tt>void serial_print_tty_state ( struct serial* scb, serial_ttystate ttystate, struct ui_file* stream )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>child_terminal_info()  :  inflow.c
</itemize>
</descrip>

<sect1>Global Function serial_printf()

<p><tt>void serial_printf ( struct serial* desc, const char* format, ... )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>serial_write()  :  serial.c
<item>xfree()  :  utils.c
<item>xstrvprintf()  :  utils.c
<item>__builtin_va_end(), __builtin_va_start(), strlen()
</itemize>
</descrip>

<sect1>Global Function serial_raw()

<p><tt>void serial_raw ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remote_open_1()  :  remote.c
</itemize>
</descrip>

<sect1>Global Function serial_readchar()

<p><tt>int serial_readchar ( struct serial* scb, int timeout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>gdb_flush()  :  ui-file.c
<item>internal_error()  :  utils.c
<item>serial_debug_p()  :  serial.c
<item>serial_is_async_p()  :  serial.c
<item>serial_logchar()  :  serial.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>readchar()  :  remote.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdlog  :  main.c
<item>serial_logfp  :  serial.c
</itemize>
</descrip>

<sect1>Global Function serial_send_break()

<p><tt>int serial_send_break ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>serial_logchar()  :  serial.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remote_stop()  :  remote.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>serial_logfp  :  serial.c
</itemize>
</descrip>

<sect1>Global Function serial_set_tty_state()

<p><tt>int serial_set_tty_state ( struct serial* scb, serial_ttystate ttystate )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>terminal_inferior()  :  inflow.c
</itemize>
</descrip>

<sect1>Global Function serial_setbaudrate()

<p><tt>int serial_setbaudrate ( struct serial* scb, int rate )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Called by:</tag>
<itemize>
<item>remote_open_1()  :  remote.c
</itemize>
</descrip>

<sect1>Global Function serial_setstopbits()

<p><tt>int serial_setstopbits ( struct serial* scb, int num )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
</descrip>

<sect1>Global Function serial_un_fdopen()

<p><tt>void serial_un_fdopen ( struct serial* scb )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>do_serial_close()  :  serial.c
</itemize>
</descrip>

<sect1>Global Function serial_write()

<p><tt>int serial_write ( struct serial* scb, const char* str, int len )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.h
</itemize>
<tag>Calls:</tag>
<itemize>
<item>gdb_flush()  :  ui-file.c
<item>serial_logchar()  :  serial.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>getpkt_sane()  :  remote.c
<item>putpkt_binary()  :  remote.c
<item>remote_start_remote()  :  remote.c
<item>remote_stop()  :  remote.c
<item>serial_printf()  :  serial.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>serial_logfp  :  serial.c
</itemize>
</descrip>

<sect1>Local Function do_serial_close()

<p><tt>static void do_serial_close ( struct serial* scb, int really_close )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>fputs_unfiltered()  :  ui-file.c
<item>serial_async()  :  serial.c
<item>ui_file_delete()  :  ui-file.c
<item>xfree()  :  utils.c
</itemize>
<tag>Called by:</tag>
<itemize>
<item>serial_close()  :  serial.c
<item>serial_un_fdopen()  :  serial.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>last_serial_opened  :  serial.c
<item>scb_base  :  serial.c
<item>serial_current_type  :  serial.c
<item>serial_logfp  :  serial.c
</itemize>
</descrip>

<sect1>Local Function serial_interface_lookup()

<p><tt>static struct serial_ops* serial_interface_lookup ( const char* name )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>strcmp()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>serial_fdopen()  :  serial.c
<item>serial_open()  :  serial.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>serial_ops_list  :  serial.c
</itemize>
</descrip>

<sect1>Local Function serial_logchar()

<p><tt>static void serial_logchar ( struct ui_file* stream, int ch_type, int ch, int timeout )</tt><newline>
<descrip>
<tag>Prototyped in:</tag>
<itemize>
<item>serial.c
</itemize>
<tag>Calls:</tag>
<itemize>
<item>fprintf_unfiltered()  :  utils.c
<item>fputc_unfiltered()  :  utils.c
<item>fputs_unfiltered()  :  ui-file.c
<item>safe_strerror()  :  utils.c
<item>__error(), isprint()
</itemize>
<tag>Called by:</tag>
<itemize>
<item>serial_readchar()  :  serial.c
<item>serial_send_break()  :  serial.c
<item>serial_write()  :  serial.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>logbase_ascii  :  serial.c
<item>logbase_hex  :  serial.c
<item>logbase_octal  :  serial.c
<item>serial_current_type  :  serial.c
<item>serial_logbase  :  serial.c
</itemize>
</descrip>

<sect1>Local Function serial_set_cmd()

<p><tt>static void serial_set_cmd ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>printf_unfiltered()  :  utils.c
<item>help_list()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_serial()  :  serial.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>gdb_stdout  :  main.c
<item>serial_set_cmdlist  :  serial.c
</itemize>
</descrip>

<sect1>Local Function serial_show_cmd()

<p><tt>static void serial_show_cmd ( const char* args, int from_tty )</tt><newline>
<descrip>
<tag>Calls:</tag>
<itemize>
<item>cmd_show_list()
</itemize>
<tag>Used in:</tag>
<itemize>
<item>_initialize_serial()  :  serial.c
</itemize>
<tag>References Variables:</tag>
<itemize>
<item>serial_show_cmdlist  :  serial.c
</itemize>
</descrip>

</article>
