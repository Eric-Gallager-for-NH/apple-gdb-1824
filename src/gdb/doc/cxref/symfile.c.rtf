{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF symfile.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File symfile.c\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Refs Func:\cell simple_overlay_update()\cell symfile.c\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/bfdlink.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "source.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "complaints.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/demangle.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/filenames.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/hashtab.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-stabs.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "completer.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "bcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../include/hashtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../readline/readline.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../readline/rlstdc.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../readline/rltypedefs.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../readline/keymaps.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../readline/tilde.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "observer.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/libbfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/hashtab.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objc-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <Availability.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exceptions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <setjmp.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exec.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-threads.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <pthread.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-sigthread.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-mutils.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-utils.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-threads.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/wait.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-excthread.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-mutils.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-threads.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <mach/thread_status.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/wait.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-dyld.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-mutils.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-threads.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <mach/machine.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <mach-o/loader.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-dyld-info.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/machine.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach-o/loader.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-dyld-path.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-dyld-info.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "checkpoint.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-utils.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/mach-o.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <mach-o/loader.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "osabi.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <fcntl.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_stat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/stat.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <ctype.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <libgen.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <sys/mman.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-dyld.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-dyld-process.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Preprocessor definitions\par}
{\s5\f1\fs20\ql\sb50\sa50 #define O_BINARY 0\par}
{\s5\f1\fs20\ql\sb50\sa50 #define LDSYMOFF( p )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define LDSYMLEN( p )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SYMLOC( p )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SYMBOL_SIZE( p )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SYMBOL_OFFSET( p )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define STRING_OFFSET( p )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define FILE_STRING_OFFSET( p )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define SYMBOL_PREFIX( p )\par}
{\s5\f1\fs20\ql\sb50\sa50 #define DEBUG_SUBDIRECTORY ".debug"\par}
{\s5\f1\fs20\ql\sb50\sa50 #define TARGET_LONG_BYTES\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Type definitions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct place_section_arg\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct place_section_arg}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct section_offsets* offsets;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR lowest;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct dbxread_symloc\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct dbxread_symloc}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int ldsymoff;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int ldsymlen;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int symbol_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int symbol_offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int string_offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int file_string_offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* prefix;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct load_section_data\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct load_section_data}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned long load_offset;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned long write_count;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned long data_count;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bfd_size_type total_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* section_name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned long section_sent;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 unsigned long section_size;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR lma;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 gdb_byte* buffer;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct sect_opt\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct sect_opt}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* name;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* value;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Typedef filename_language\par}
{\s5\f1\fs20\ql\sb50\sa50 typedef struct \{...\} filename_language\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* ext;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum language lang;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type enum ovly_index\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 enum ovly_index}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 VMA;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 SIZE;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 LMA;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 MAPPED;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct symbol_file_info\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct symbol_file_info}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bfd* abfd;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int from_tty;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct section_addr_info* addrs;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct section_offsets* offsets;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int num_offsets;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int mainline;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int flags;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int symflags;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR mapaddr;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* prefix;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 struct objfile* result;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 char* kext_bundle;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Type struct bfd_file_info\par}
\trowd\trgaph120\cellx2880\cellx9000
\intbl\plain
{\s5\f1\fs20\ql\sb50\sa50 struct bfd_file_info}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \{}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 const char* filename;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 int mainline;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 enum gdb_osabi osabi;}\cell\cell\row
	{\s5\f1\fs20\ql\sb50\sa50 bfd* result;}\cell\cell\row
{\s5\f1\fs20\ql\sb50\sa50 \}}\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable currently_reading_symtab\par}
{\s5\f1\fs20\ql\sb50\sa50 int currently_reading_symtab\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell ax-general.c\cell\cell\row
\cell bcache.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell charset.c\cell\cell\row
\cell cli-out.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell complaints.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-abi.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell demangle.c\cell\cell\row
\cell dictionary.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell doublest.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell environ.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-loop.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame-base.c\cell\cell\row
\cell frame-unwind.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell gnu-v2-abi.c\cell\cell\row
\cell gnu-v3-abi.c\cell\cell\row
\cell hpacc-abi.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell interps.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell kod-cisco.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell m2-valprint.c\cell\cell\row
\cell macrocmd.c\cell\cell\row
\cell macroexp.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell observer.c\cell\cell\row
\cell osabi.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell reggroups.c\cell\cell\row
\cell remote-fileio.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell ser-base.c\cell\cell\row
\cell ser-unix.c\cell\cell\row
\cell serial.c\cell\cell\row
\cell solib-null.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell std-regs.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell trad-frame.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-file.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell user-regs.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
\cell wrapper.c\cell\cell\row
Used in:\cell check_typedef()\cell gdbtypes.c\cell\row
\cell decrement_reading_symtab()\cell symfile.c\cell\row
\cell psymtab_to_symtab()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable deprecated_pre_add_symbol_hook\par}
{\s5\f1\fs20\ql\sb50\sa50 void (*deprecated_pre_add_symbol_hook)(const char*)\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell ax-general.c\cell\cell\row
\cell bcache.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell charset.c\cell\cell\row
\cell cli-out.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell complaints.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-abi.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell demangle.c\cell\cell\row
\cell dictionary.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell doublest.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell environ.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-loop.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame-base.c\cell\cell\row
\cell frame-unwind.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell gnu-v2-abi.c\cell\cell\row
\cell gnu-v3-abi.c\cell\cell\row
\cell hpacc-abi.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell interps.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell kod-cisco.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell m2-valprint.c\cell\cell\row
\cell macrocmd.c\cell\cell\row
\cell macroexp.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell observer.c\cell\cell\row
\cell osabi.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell reggroups.c\cell\cell\row
\cell remote-fileio.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell ser-base.c\cell\cell\row
\cell ser-unix.c\cell\cell\row
\cell serial.c\cell\cell\row
\cell solib-null.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell std-regs.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell trad-frame.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-file.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell user-regs.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
\cell wrapper.c\cell\cell\row
Used in:\cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable deprecated_post_add_symbol_hook\par}
{\s5\f1\fs20\ql\sb50\sa50 void (*deprecated_post_add_symbol_hook)(void)\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell ax-general.c\cell\cell\row
\cell bcache.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell charset.c\cell\cell\row
\cell cli-out.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell complaints.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-abi.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell demangle.c\cell\cell\row
\cell dictionary.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell doublest.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell environ.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-loop.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame-base.c\cell\cell\row
\cell frame-unwind.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell gnu-v2-abi.c\cell\cell\row
\cell gnu-v3-abi.c\cell\cell\row
\cell hpacc-abi.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell interps.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell kod-cisco.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell m2-valprint.c\cell\cell\row
\cell macrocmd.c\cell\cell\row
\cell macroexp.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell observer.c\cell\cell\row
\cell osabi.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell reggroups.c\cell\cell\row
\cell remote-fileio.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell ser-base.c\cell\cell\row
\cell ser-unix.c\cell\cell\row
\cell serial.c\cell\cell\row
\cell solib-null.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell std-regs.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell trad-frame.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-file.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell user-regs.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
\cell wrapper.c\cell\cell\row
Used in:\cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable deprecated_show_load_progress\par}
{\s5\f1\fs20\ql\sb50\sa50 void (*deprecated_show_load_progress)(const char* section,unsigned long section_sent,unsigned long section_size,unsigned long total_sent,unsigned long total_size)\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell ax-general.c\cell\cell\row
\cell bcache.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell charset.c\cell\cell\row
\cell cli-out.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell complaints.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-abi.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell demangle.c\cell\cell\row
\cell dictionary.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell doublest.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell environ.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-loop.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame-base.c\cell\cell\row
\cell frame-unwind.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell gnu-v2-abi.c\cell\cell\row
\cell gnu-v3-abi.c\cell\cell\row
\cell hpacc-abi.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell interps.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell kod-cisco.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell m2-valprint.c\cell\cell\row
\cell macrocmd.c\cell\cell\row
\cell macroexp.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell observer.c\cell\cell\row
\cell osabi.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell reggroups.c\cell\cell\row
\cell remote-fileio.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell ser-base.c\cell\cell\row
\cell ser-unix.c\cell\cell\row
\cell serial.c\cell\cell\row
\cell solib-null.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell std-regs.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell trad-frame.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-file.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell user-regs.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
\cell wrapper.c\cell\cell\row
Used in:\cell load_progress()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable deprecated_ui_load_progress_hook\par}
{\s5\f1\fs20\ql\sb50\sa50 int (*deprecated_ui_load_progress_hook)(const char* section,unsigned long num)\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell ax-general.c\cell\cell\row
\cell bcache.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell c-lang.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell charset.c\cell\cell\row
\cell cli-out.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell complaints.c\cell\cell\row
\cell completer.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-abi.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell demangle.c\cell\cell\row
\cell dictionary.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell doublest.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell environ.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-loop.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell f-lang.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell f-valprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame-base.c\cell\cell\row
\cell frame-unwind.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell gnu-v2-abi.c\cell\cell\row
\cell gnu-v3-abi.c\cell\cell\row
\cell hpacc-abi.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell interps.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell jv-typeprint.c\cell\cell\row
\cell jv-valprint.c\cell\cell\row
\cell kod-cisco.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell m2-lang.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell m2-valprint.c\cell\cell\row
\cell macrocmd.c\cell\cell\row
\cell macroexp.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell observer.c\cell\cell\row
\cell osabi.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell p-lang.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell reggroups.c\cell\cell\row
\cell remote-fileio.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell scm-exp.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell scm-valprint.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell ser-base.c\cell\cell\row
\cell ser-unix.c\cell\cell\row
\cell serial.c\cell\cell\row
\cell solib-null.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell std-regs.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell trad-frame.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell ui-file.c\cell\cell\row
\cell ui-out.c\cell\cell\row
\cell user-regs.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
\cell wrapper.c\cell\cell\row
Used in:\cell load_progress()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable deprecated_target_new_objfile_hook\par}
{\s5\f1\fs20\ql\sb50\sa50 void (*deprecated_target_new_objfile_hook)(struct objfile*)\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell ada-typeprint.c\cell\cell\row
\cell arch-utils.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell bfd-target.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell c-typeprint.c\cell\cell\row
\cell c-valprint.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-valprint.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell disasm.c\cell\cell\row
\cell dummy-frame.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell event-top.c\cell\cell\row
\cell expprint.c\cell\cell\row
\cell f-typeprint.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbarch.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell inf-loop.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell inflow.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell kod.c\cell\cell\row
\cell language.c\cell\cell\row
\cell m2-typeprint.c\cell\cell\row
\cell macroscope.c\cell\cell\row
\cell main.c\cell\cell\row
\cell mem-break.c\cell\cell\row
\cell memattr.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-typeprint.c\cell\cell\row
\cell p-valprint.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell regcache.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell sentinel-frame.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell thread.c\cell\cell\row
\cell top.c\cell\cell\row
\cell tracepoint.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell typeprint.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell valarith.c\cell\cell\row
\cell valops.c\cell\cell\row
\cell valprint.c\cell\cell\row
\cell value.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell _initialize_remote()\cell remote.c\cell\row
\cell clear_symtab_users()\cell symfile.c\cell\row
\cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable auto_solib_add\par}
{\s5\f1\fs20\ql\sb50\sa50 int auto_solib_add\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell _initialize_solib()\cell solib.c\cell\row
\cell attach_command()\cell infcmd.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell reload_shared_libraries()\cell solib.c\cell\row
\cell remote_macosx_complete_create_or_attach()\cell remote.c\cell\row
\cell remote_macosx_open()\cell remote.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable auto_solib_limit\par}
{\s5\f1\fs20\ql\sb50\sa50 int auto_solib_limit\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell varobj.c\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable overlay_debugging\par}
{\s5\f1\fs20\ql\sb50\sa50 enum overlay_debugging_state overlay_debugging\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell agent_command()\cell ax-gdb.c\cell\row
\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell breakpoint_here_p()\cell breakpoint.c\cell\row
\cell breakpoint_inserted_here_p()\cell breakpoint.c\cell\row
\cell breakpoint_thread_match()\cell breakpoint.c\cell\row
\cell build_address_symbolic()\cell printcmd.c\cell\row
\cell check_duplicates()\cell breakpoint.c\cell\row
\cell create_overlay_event_breakpoint()\cell breakpoint.c\cell\row
\cell describe_other_breakpoints()\cell breakpoint.c\cell\row
\cell find_pc_mapped_section()\cell symfile.c\cell\row
\cell find_pc_overlay()\cell symfile.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell list_overlays_command()\cell symfile.c\cell\row
\cell map_overlay_command()\cell symfile.c\cell\row
\cell overlay_auto_command()\cell symfile.c\cell\row
\cell overlay_is_mapped()\cell symfile.c\cell\row
\cell overlay_manual_command()\cell symfile.c\cell\row
\cell overlay_mapped_address()\cell symfile.c\cell\row
\cell overlay_off_command()\cell symfile.c\cell\row
\cell overlay_unmapped_address()\cell symfile.c\cell\row
\cell pc_in_mapped_range()\cell symfile.c\cell\row
\cell pc_in_unmapped_range()\cell symfile.c\cell\row
\cell read_var_value()\cell findvar.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\cell section_is_mapped()\cell symfile.c\cell\row
\cell section_is_overlay()\cell symfile.c\cell\row
\cell software_breakpoint_inserted_here_p()\cell breakpoint.c\cell\row
\cell symbol_overlayed_address()\cell symfile.c\cell\row
\cell unmap_overlay_command()\cell symfile.c\cell\row
\cell write_exp_msymbol()\cell parse.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable overlay_cache_invalid\par}
{\s5\f1\fs20\ql\sb50\sa50 int overlay_cache_invalid\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-exp.c\cell\cell\row
\cell ada-lang.c\cell\cell\row
\cell ax-gdb.c\cell\cell\row
\cell block.c\cell\cell\row
\cell blockframe.c\cell\cell\row
\cell breakpoint.c\cell\cell\row
\cell buildsym.c\cell\cell\row
\cell c-exp.c\cell\cell\row
\cell coff-pe-read.c\cell\cell\row
\cell coffread.c\cell\cell\row
\cell corefile.c\cell\cell\row
\cell cp-namespace.c\cell\cell\row
\cell cp-support.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell dwarf2-frame.c\cell\cell\row
\cell dwarf2expr.c\cell\cell\row
\cell dwarf2loc.c\cell\cell\row
\cell dwarf2read.c\cell\cell\row
\cell dwarfread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell f-exp.c\cell\cell\row
\cell findvar.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell gdbtypes.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell inlining.c\cell\cell\row
\cell jv-exp.c\cell\cell\row
\cell jv-lang.c\cell\cell\row
\cell linespec.c\cell\cell\row
\cell m2-exp.c\cell\cell\row
\cell macrotab.c\cell\cell\row
\cell main.c\cell\cell\row
\cell maint.c\cell\cell\row
\cell mdebugread.c\cell\cell\row
\cell minsyms.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell objfiles.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell parse.c\cell\cell\row
\cell printcmd.c\cell\cell\row
\cell remote.c\cell\cell\row
\cell solib.c\cell\cell\row
\cell source.c\cell\cell\row
\cell stabsread.c\cell\cell\row
\cell stack.c\cell\cell\row
\cell symfile-mem.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell symmisc.c\cell\cell\row
\cell symtab.c\cell\cell\row
\cell target/target.c\cell\cell\row
\cell target/x86-shared-tdep.c\cell\cell\row
\cell tramp-frame.c\cell\cell\row
\cell utils.c\cell\cell\row
\cell varobj.c\cell\cell\row
Used in:\cell fetch_inferior_event()\cell infrun.c\cell\row
\cell load_command()\cell symfile.c\cell\row
\cell overlay_is_mapped()\cell symfile.c\cell\row
\cell prepare_to_wait()\cell infrun.c\cell\row
\cell wait_for_inferior()\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable readnow_symbol_files\par}
{\s5\f1\fs20\ql\sb50\sa50 int readnow_symbol_files\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell event-top.c\cell\cell\row
\cell frame.c\cell\cell\row
\cell infcmd.c\cell\cell\row
\cell infrun.c\cell\cell\row
\cell interps.c\cell\cell\row
\cell main.c\cell\cell\row
\cell objc-exp.c\cell\cell\row
\cell p-exp.c\cell\cell\row
\cell source.c\cell\cell\row
\cell symfile.c\cell\cell\row
\cell top.c\cell\cell\row
Used in:\cell captured_main()\cell main.c\cell\row
\cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable symbol_reloading\par}
{\s5\f1\fs20\ql\sb50\sa50 int symbol_reloading\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell symfile.c\cell\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable target_overlay_update\par}
{\s5\f1\fs20\ql\sb50\sa50 void (*target_overlay_update)(struct obj_section*)\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell symfile.c\cell\cell\row
Used in:\cell overlay_is_mapped()\cell symfile.c\cell\row
\cell overlay_load_command()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable overlaylist\par}
{\s5\f1\fs20\ql\sb50\sa50 struct cmd_list_element* overlaylist\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell symfile.c\cell\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
\cell overlay_command()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable mmap_symbol_files_flag\par}
{\s5\f1\fs20\ql\sb50\sa50 static int mmap_symbol_files_flag\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_symfile()\cell\cell\row
\cell symfile_bfd_open()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable already_found_debug_file\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* already_found_debug_file\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell add_dsym_command()\cell\cell\row
\cell find_separate_debug_file()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable kext_symbol_file_path\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* kext_symbol_file_path\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_symfile()\cell\cell\row
\cell find_kext_files_by_bundle()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable symtab_fns\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct sym_fns* symtab_fns\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell add_symtab_fns()\cell\cell\row
\cell find_sym_fns()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable debug_file_directory\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* debug_file_directory\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_symfile()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable download_write_size\par}
{\s5\f1\fs20\ql\sb50\sa50 static int download_write_size\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_symfile()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable validate_download\par}
{\s5\f1\fs20\ql\sb50\sa50 static int validate_download\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell load_progress()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable filename_language_table\par}
{\s5\f1\fs20\ql\sb50\sa50 static filename_language* filename_language_table\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell add_filename_language()\cell\cell\row
\cell deduce_language_from_filename()\cell\cell\row
\cell info_ext_lang_command()\cell\cell\row
\cell init_filename_language_table()\cell\cell\row
\cell set_ext_lang_command()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable fl_table_size\par}
{\s5\f1\fs20\ql\sb50\sa50 static int fl_table_size\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell add_filename_language()\cell\cell\row
\cell init_filename_language_table()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable fl_table_next\par}
{\s5\f1\fs20\ql\sb50\sa50 static int fl_table_next\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell add_filename_language()\cell\cell\row
\cell deduce_language_from_filename()\cell\cell\row
\cell info_ext_lang_command()\cell\cell\row
\cell init_filename_language_table()\cell\cell\row
\cell set_ext_lang_command()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable ext_args\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* ext_args\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_symfile()\cell\cell\row
\cell set_ext_lang_command()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable cache_ovly_table\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned (*cache_ovly_table)[4]\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell simple_free_overlay_table()\cell\cell\row
\cell simple_overlay_update()\cell\cell\row
\cell simple_overlay_update_1()\cell\cell\row
\cell simple_read_overlay_table()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable cache_novlys\par}
{\s5\f1\fs20\ql\sb50\sa50 static unsigned cache_novlys\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell simple_free_overlay_table()\cell\cell\row
\cell simple_overlay_update()\cell\cell\row
\cell simple_overlay_update_1()\cell\cell\row
\cell simple_read_overlay_table()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable cache_ovly_table_base\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR cache_ovly_table_base\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell simple_free_overlay_table()\cell\cell\row
\cell simple_overlay_update()\cell\cell\row
\cell simple_overlay_update_1()\cell\cell\row
\cell simple_read_overlay_table()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_symfile()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_symfile ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell init_filename_language_table()\cell symfile.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  add_alias_cmd(), add_cmd(), add_com_alias(), add_info(), add_prefix_cmd(), add_setshow_boolean_cmd(), add_setshow_integer_cmd(), add_setshow_optional_filename_cmd(), add_setshow_string_noescape_cmd(), set_cmd_completer(), xstrdup()\cell\cell\row
Refs Func:\cell add_dsym_command()\cell symfile.c\cell\row
\cell add_kext_command()\cell symfile.c\cell\row
\cell add_shared_symbol_files_command()\cell symfile.c\cell\row
\cell add_symbol_file_command()\cell symfile.c\cell\row
\cell filename_completer()\cell completer.c\cell\row
\cell info_ext_lang_command()\cell symfile.c\cell\row
\cell list_overlays_command()\cell symfile.c\cell\row
\cell load_command()\cell symfile.c\cell\row
\cell map_overlay_command()\cell symfile.c\cell\row
\cell overlay_auto_command()\cell symfile.c\cell\row
\cell overlay_command()\cell symfile.c\cell\row
\cell overlay_load_command()\cell symfile.c\cell\row
\cell overlay_manual_command()\cell symfile.c\cell\row
\cell overlay_off_command()\cell symfile.c\cell\row
\cell remove_symbol_file_command()\cell symfile.c\cell\row
\cell reread_symbols_command()\cell symfile.c\cell\row
\cell set_ext_lang_command()\cell symfile.c\cell\row
\cell show_debug_file_directory()\cell symfile.c\cell\row
\cell show_download_write_size()\cell symfile.c\cell\row
\cell show_ext_args()\cell symfile.c\cell\row
\cell show_symbol_reloading()\cell symfile.c\cell\row
\cell symbol_file_command()\cell symfile.c\cell\row
\cell unmap_overlay_command()\cell symfile.c\cell\row
Refs Var:\cell debug_file_directory\cell symfile.c\cell\row
\cell download_write_size\cell symfile.c\cell\row
\cell ext_args\cell symfile.c\cell\row
\cell kext_symbol_file_path\cell symfile.c\cell\row
\cell mmap_symbol_files_flag\cell symfile.c\cell\row
\cell overlaylist\cell symfile.c\cell\row
\cell symbol_reloading\cell symfile.c\cell\row
\cell  cmdlist, setlist, showlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function add_psymbol_to_list()\par}
{\s5\f1\fs20\ql\sb50\sa50 const struct partial_symbol* add_psymbol_to_list ( const char* name, int namelength, domain_enum domain, enum address_class addrclass, struct psymbol_allocation_list* list, long val, CORE_ADDR coreaddr, enum language language, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell deprecated_bcache()\cell bcache.c\cell\row
\cell extend_psymbol_list()\cell symmisc.c\cell\row
\cell symbol_set_names()\cell symtab.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
Called by:\cell add_enum_psymbol()\cell dwarfread.c\cell\row
\cell add_partial_symbol()\cell dwarf2read.c\cell\row
\cell dwarf2_scan_inlined_section_for_psymbols()\cell dwarf2read.c\cell\row
\cell dwarf2_scan_pubtype_for_psymbols()\cell dwarf2read.c\cell\row
\cell handle_psymbol_enumerators()\cell mdebugread.c\cell\row
\cell load_partial_dies()\cell dwarf2read.c\cell\row
\cell parse_partial_symbols()\cell mdebugread.c\cell\row
\cell read_dbx_symtab()\cell dbxread.c\cell\row
\cell replace_psymbols_with_correct_psymbols()\cell symfile.c\cell\row
\cell scan_partial_inlined_function_symbols()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function add_psymbol_with_dem_name_to_list()\par}
{\s5\f1\fs20\ql\sb50\sa50 void add_psymbol_with_dem_name_to_list ( char* name, int namelength, char* dem_name, int dem_namelength, domain_enum domain, enum address_class addrclass, struct psymbol_allocation_list* list, long val, CORE_ADDR coreaddr, enum language language, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell deprecated_bcache()\cell bcache.c\cell\row
\cell extend_psymbol_list()\cell symmisc.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell symbol_init_language_specific()\cell symtab.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function add_symtab_fns()\par}
{\s5\f1\fs20\ql\sb50\sa50 void add_symtab_fns ( struct sym_fns* sf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Called by:\cell _initialize_coffread()\cell coffread.c\cell\row
\cell _initialize_dbxread()\cell dbxread.c\cell\row
\cell _initialize_elfread()\cell elfread.c\cell\row
\cell _initialize_mipsread()\cell mipsread.c\cell\row
\cell _initialize_nlmread()\cell nlmread.c\cell\row
Refs Var:\cell symtab_fns\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function alloc_section_addr_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct section_addr_info* alloc_section_addr_info ( size_t num_sections )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk()\cell\cell\row
Called by:\cell add_symbol_file_command()\cell symfile.c\cell\row
\cell build_section_addr_info_from_section_table()\cell symfile.c\cell\row
\cell copy_section_addr_info()\cell symfile.c\cell\row
\cell symbol_file_add_from_memory()\cell symfile-mem.c\cell\row
\cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
\cell syms_from_objfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function allocate_psymtab()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct partial_symtab* allocate_psymtab ( const char* filename, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strlen()\cell\cell\row
Called by:\cell dwarf2_create_include_psymtab()\cell dwarf2read.c\cell\row
\cell end_psymtab()\cell dbxread.c\cell\row
\cell new_psymtab()\cell mdebugread.c\cell\row
\cell start_psymtab_common()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function allocate_symtab()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symtab* allocate_symtab ( const char* filename, struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell deduce_language_from_filename()\cell symfile.c\cell\row
\cell obsavestring()\cell symfile.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), strlen()\cell\cell\row
Called by:\cell end_symtab()\cell buildsym.c\cell\row
\cell get_java_class_symtab()\cell jv-lang.c\cell\row
\cell initialize_namespace_symtab()\cell cp-namespace.c\cell\row
\cell new_symtab()\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function append_psymbols_as_msymbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 void append_psymbols_as_msymbols ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell add_objfile_prefix()\cell symfile.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell executable_objfile()\cell objfiles.c\cell\row
\cell find_section_for_addr()\cell symfile.c\cell\row
\cell init_minimal_symbol_collection()\cell minsyms.c\cell\row
\cell install_minimal_symbols()\cell minsyms.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_minimal_symbol_by_pc_section_from_objfile()\cell minsyms.c\cell\row
\cell make_cleanup_discard_minimal_symbols()\cell minsyms.c\cell\row
\cell partial_symbol_special_info()\cell objfiles.c\cell\row
\cell prim_record_minimal_symbol_and_info()\cell minsyms.c\cell\row
\cell warning()\cell utils.c\cell\row
Called by:\cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function build_section_addr_info_from_section_table()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct section_addr_info* build_section_addr_info_from_section_table ( const struct section_table* start, const struct section_table* end )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell alloc_section_addr_info()\cell symfile.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell  xstrdup()\cell\cell\row
Called by:\cell symbol_add_stub()\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function clear_symtab_users()\par}
{\s5\f1\fs20\ql\sb50\sa50 void clear_symtab_users ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell clear_current_source_symtab_and_line()\cell source.c\cell\row
\cell clear_displays()\cell printcmd.c\cell\row
\cell clear_internalvars()\cell value.c\cell\row
\cell clear_pc_function_cache()\cell blockframe.c\cell\row
\cell clear_value_history()\cell value.c\cell\row
\cell set_default_breakpoint()\cell breakpoint.c\cell\row
\cell  deprecated_target_new_objfile_hook()\cell\cell\row
Called by:\cell clear_symtab_users_cleanup()\cell symfile.c\cell\row
\cell free_all_objfiles()\cell objfiles.c\cell\row
\cell new_symfile_objfile()\cell symfile.c\cell\row
\cell remove_symbol_file_command()\cell symfile.c\cell\row
\cell reread_symbols()\cell symfile.c\cell\row
Refs Var:\cell deprecated_target_new_objfile_hook\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function convert_sect_addrs_to_offsets_via_on_disk_file()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct section_offsets* convert_sect_addrs_to_offsets_via_on_disk_file ( struct section_addr_info* sect_addrs, const char* file, int* num_offsets )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell gdbarch_osabi()\cell gdbarch.c\cell\row
\cell make_cleanup_bfd_close()\cell utils.c\cell\row
\cell symfile_bfd_open_safe()\cell symfile.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  file_exists_p(), strcmp()\cell\cell\row
Called by:\cell add_kext_command()\cell symfile.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function copy_section_addr_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct section_addr_info* copy_section_addr_info ( struct section_addr_info* addrs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell alloc_section_addr_info()\cell symfile.c\cell\row
\cell  xstrdup()\cell\cell\row
Called by:\cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function deduce_language_from_filename()\par}
{\s5\f1\fs20\ql\sb50\sa50 enum language deduce_language_from_filename ( const char* filename )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell  strcmp(), strrchr()\cell\cell\row
Called by:\cell allocate_symtab()\cell symfile.c\cell\row
\cell parse_partial_symbols()\cell mdebugread.c\cell\row
\cell patch_subfile_names()\cell buildsym.c\cell\row
\cell read_dbx_symtab()\cell dbxread.c\cell\row
\cell set_cu_language()\cell dwarfread.c\cell\row
\cell set_initial_language()\cell symfile.c\cell\row
\cell start_psymtab()\cell dbxread.c\cell\row
\cell start_subfile()\cell buildsym.c\cell\row
Refs Var:\cell filename_language_table\cell symfile.c\cell\row
\cell fl_table_next\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function default_symfile_offsets()\par}
{\s5\f1\fs20\ql\sb50\sa50 void default_symfile_offsets ( struct objfile* objfile, struct section_addr_info* addrs )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell init_objfile_sect_indices()\cell symfile.c\cell\row
\cell  __builtin___memset_chk(), __builtin_object_size(), __inline_memset_chk(), _obstack_newchunk(), bfd_map_over_sections()\cell\cell\row
Used in:\cell coffread.c\cell\cell\row
\cell dbxread.c\cell\cell\row
\cell elfread.c\cell\cell\row
\cell mipsread.c\cell\cell\row
\cell nlmread.c\cell\cell\row
Refs Func:\cell place_section()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function discard_psymtab()\par}
{\s5\f1\fs20\ql\sb50\sa50 void discard_psymtab ( struct partial_symtab* pst )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Called by:\cell end_psymtab()\cell dbxread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_lowest_section()\par}
{\s5\f1\fs20\ql\sb50\sa50 void find_lowest_section ( bfd* abfd, asection* sect, void* obj )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Used in:\cell syms_from_objfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_objfile()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct objfile* find_objfile ( const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  strcmp()\cell\cell\row
Called by:\cell remove_symbol_file_command()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_pc_mapped_section()\par}
{\s5\f1\fs20\ql\sb50\sa50 asection* find_pc_mapped_section ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell overlay_is_mapped()\cell symfile.c\cell\row
\cell pc_in_mapped_range()\cell symfile.c\cell\row
Called by:\cell block_for_pc()\cell block.c\cell\row
\cell blockvector_for_pc()\cell block.c\cell\row
\cell find_pc_function()\cell blockframe.c\cell\row
\cell find_pc_function_no_inlined()\cell blockframe.c\cell\row
\cell find_pc_psymbol()\cell symtab.c\cell\row
\cell find_pc_psymtab()\cell symtab.c\cell\row
\cell find_pc_section()\cell objfiles.c\cell\row
\cell find_pc_symtab()\cell symtab.c\cell\row
\cell get_frame_function_inlined()\cell blockframe.c\cell\row
Refs Var:\cell cached_mapped_section\cell symtab.c\cell\row
\cell last_mapped_section_lookup_pc\cell symtab.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_pc_overlay()\par}
{\s5\f1\fs20\ql\sb50\sa50 asection* find_pc_overlay ( CORE_ADDR pc )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell overlay_is_mapped()\cell symfile.c\cell\row
\cell pc_in_mapped_range()\cell symfile.c\cell\row
\cell pc_in_unmapped_range()\cell symfile.c\cell\row
\cell section_is_overlay()\cell symfile.c\cell\row
Called by:\cell build_address_symbolic()\cell printcmd.c\cell\row
\cell create_internal_breakpoint()\cell breakpoint.c\cell\row
\cell decode_indirect()\cell linespec.c\cell\row
\cell find_pc_line()\cell symtab.c\cell\row
\cell find_pc_partial_function_impl()\cell blockframe.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell handle_inferior_event()\cell infrun.c\cell\row
\cell inlined_function_update_call_stack()\cell inlining.c\cell\row
\cell insert_step_resume_breakpoint_at_frame()\cell infrun.c\cell\row
\cell parse_breakpoint_sals()\cell breakpoint.c\cell\row
\cell step_into_function()\cell infrun.c\cell\row
\cell update_inlined_function_line_table_entry()\cell symtab.c\cell\row
\cell update_tmp_frame_stack()\cell inlining.c\cell\row
Refs Var:\cell cached_overlay_section\cell symtab.c\cell\row
\cell last_overlay_section_lookup_pc\cell symtab.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function free_named_symtabs()\par}
{\s5\f1\fs20\ql\sb50\sa50 int free_named_symtabs ( char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell cashier_psymtab()\cell symfile.c\cell\row
\cell lookup_partial_symtab()\cell symtab.c\cell\row
\cell warning()\cell utils.c\cell\row
Called by:\cell coff_end_symtab()\cell coffread.c\cell\row
\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\cell end_psymtab()\cell dbxread.c\cell\row
\cell scan_compilation_units()\cell dwarfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function free_section_addr_info()\par}
{\s5\f1\fs20\ql\sb50\sa50 void free_section_addr_info ( struct section_addr_info* sap )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
Called by:\cell do_free_section_addr_info()\cell utils.c\cell\row
\cell symbol_add_stub()\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function generic_load()\par}
{\s5\f1\fs20\ql\sb50\sa50 void generic_load ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_bfd_close()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell perror_with_name()\cell utils.c\cell\row
\cell print_transfer_performance()\cell symfile.c\cell\row
\cell ui_out_field_fmt()\cell ui-out.c\cell\row
\cell ui_out_text()\cell ui-out.c\cell\row
\cell write_pc()\cell regcache.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcpy_chk(), bfd_check_format(), bfd_errmsg(), bfd_get_error(), bfd_map_over_sections(), bfd_openr(), gettimeofday(), strchr(), strlen(), strtoul(), xstrdup()\cell\cell\row
Used in:\cell init_remote_async_ops()\cell remote.c\cell\row
\cell init_remote_ops()\cell remote.c\cell\row
Refs Func:\cell add_section_size_callback()\cell symfile.c\cell\row
\cell load_section_callback()\cell symfile.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\cell gnutarget\cell corefile.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_section_index()\par}
{\s5\f1\fs20\ql\sb50\sa50 int get_section_index ( struct objfile* objfile, const char* section_name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell  bfd_get_section_by_name()\cell\cell\row
Called by:\cell parse_partial_symbols()\cell mdebugread.c\cell\row
\cell record_minimal_symbol()\cell mdebugread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function init_psymbol_list()\par}
{\s5\f1\fs20\ql\sb50\sa50 void init_psymbol_list ( struct objfile* objfile, int total_symbols )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell coff_symfile_read()\cell coffread.c\cell\row
\cell dbx_symfile_read()\cell dbxread.c\cell\row
\cell dwarf2_build_psymtabs()\cell dwarf2read.c\cell\row
\cell dwarf_build_psymtabs()\cell dwarfread.c\cell\row
\cell elf_symfile_read()\cell elfread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function list_overlays_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 void list_overlays_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell deprecated_print_address_numeric()\cell printcmd.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell overlay_is_mapped()\cell symfile.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell puts_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function map_overlay_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 void map_overlay_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell section_is_overlay()\cell symfile.c\cell\row
\cell sections_overlap()\cell symfile.c\cell\row
\cell  strcmp()\cell\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
Refs Var:\cell info_verbose\cell top.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function new_symfile_objfile()\par}
{\s5\f1\fs20\ql\sb50\sa50 void new_symfile_objfile ( struct objfile* objfile, int mainline, int verbo )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell breakpoint_re_set()\cell breakpoint.c\cell\row
\cell clear_complaints()\cell complaints.c\cell\row
\cell clear_symtab_users()\cell symfile.c\cell\row
\cell  macosx_init_dyld_symfile()\cell\cell\row
Called by:\cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
Refs Var:\cell symfile_complaints\cell complaints.c\cell\row
\cell symfile_objfile\cell objfiles.c\cell\row
\cell  exec_bfd\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function obconcat()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* obconcat ( struct obstack* obstackp, const char* s1, const char* s2, const char* s3 )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell  __builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), _obstack_newchunk(), strlen()\cell\cell\row
Called by:\cell define_symbol()\cell stabsread.c\cell\row
\cell enum_type()\cell dwarfread.c\cell\row
\cell parse_symbol()\cell mdebugread.c\cell\row
\cell read_cpp_abbrev()\cell stabsread.c\cell\row
\cell read_member_functions()\cell stabsread.c\cell\row
\cell struct_type()\cell dwarfread.c\cell\row
\cell typename_concat()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function obsavestring()\par}
{\s5\f1\fs20\ql\sb50\sa50 char* obsavestring ( const char* ptr, int size, struct obstack* obstackp )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell  _obstack_newchunk()\cell\cell\row
Called by:\cell ada_decode_symbol()\cell ada-lang.c\cell\row
\cell allocate_psymtab()\cell symfile.c\cell\row
\cell allocate_symtab()\cell symfile.c\cell\row
\cell check_one_possible_namespace_symbol()\cell cp-namespace.c\cell\row
\cell coff_read_enum_type()\cell coffread.c\cell\row
\cell coff_read_struct_type()\cell coffread.c\cell\row
\cell common_block_start()\cell stabsread.c\cell\row
\cell cp_copy_usings()\cell cp-namespace.c\cell\row
\cell cp_set_block_scope()\cell cp-namespace.c\cell\row
\cell define_symbol()\cell stabsread.c\cell\row
\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\cell elf_symtab_read()\cell elfread.c\cell\row
\cell end_symtab()\cell buildsym.c\cell\row
\cell enum_type()\cell dwarfread.c\cell\row
\cell guess_structure_name()\cell dwarf2read.c\cell\row
\cell init_type()\cell gdbtypes.c\cell\row
\cell name_lookup()\cell ada-exp.c\cell\row
\cell new_symtab()\cell mdebugread.c\cell\row
\cell parse_symbol()\cell mdebugread.c\cell\row
\cell parse_type()\cell mdebugread.c\cell\row
\cell patch_block_stabs()\cell stabsread.c\cell\row
\cell read_dbx_symtab()\cell dbxread.c\cell\row
\cell read_enum_type()\cell stabsread.c\cell\row
\cell read_member_functions()\cell stabsread.c\cell\row
\cell read_one_struct_field()\cell stabsread.c\cell\row
\cell read_structure_type()\cell dwarf2read.c\cell\row
\cell struct_type()\cell dwarfread.c\cell\row
\cell symbol_init_demangled_name()\cell symtab.c\cell\row
\cell write_var_from_name()\cell ada-exp.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function open_bfd_matching_arch()\par}
{\s5\f1\fs20\ql\sb50\sa50 bfd* open_bfd_matching_arch ( bfd* archive_bfd, bfd_format expected_format, enum gdb_osabi osabi )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell gdbarch_lookup_osabi()\cell osabi.c\cell\row
\cell gdbarch_lookup_osabi_from_bfd()\cell osabi.c\cell\row
\cell gdbarch_osabi()\cell gdbarch.c\cell\row
\cell  bfd_check_format(), bfd_openr_next_archived_file()\cell\cell\row
Called by:\cell open_bfd_from_oso()\cell dbxread.c\cell\row
\cell reread_symbols_for_objfile()\cell symfile.c\cell\row
\cell symfile_bfd_open()\cell symfile.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function overlay_mapped_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR overlay_mapped_address ( CORE_ADDR pc, asection* section )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell pc_in_unmapped_range()\cell symfile.c\cell\row
\cell section_is_overlay()\cell symfile.c\cell\row
Called by:\cell build_address_symbolic()\cell printcmd.c\cell\row
\cell find_function_start_sal()\cell symtab.c\cell\row
\cell find_pc_line()\cell symtab.c\cell\row
\cell find_pc_partial_function_impl()\cell blockframe.c\cell\row
\cell inlined_function_update_call_stack()\cell inlining.c\cell\row
\cell sym_info()\cell printcmd.c\cell\row
\cell update_inlined_function_line_table_entry()\cell symtab.c\cell\row
\cell update_tmp_frame_stack()\cell inlining.c\cell\row
Refs Var:\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function overlay_unmapped_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR overlay_unmapped_address ( CORE_ADDR pc, asection* section )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell pc_in_mapped_range()\cell symfile.c\cell\row
\cell section_is_overlay()\cell symfile.c\cell\row
Called by:\cell address_info()\cell printcmd.c\cell\row
\cell find_function_start_sal()\cell symtab.c\cell\row
\cell find_pc_partial_function_impl()\cell blockframe.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\cell symbol_overlayed_address()\cell symfile.c\cell\row
Refs Var:\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function pc_in_mapped_range()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR pc_in_mapped_range ( CORE_ADDR pc, asection* section )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell section_is_overlay()\cell symfile.c\cell\row
Called by:\cell find_pc_mapped_section()\cell symfile.c\cell\row
\cell find_pc_overlay()\cell symfile.c\cell\row
\cell overlay_unmapped_address()\cell symfile.c\cell\row
Refs Var:\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function pc_in_unmapped_range()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR pc_in_unmapped_range ( CORE_ADDR pc, asection* section )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell section_is_overlay()\cell symfile.c\cell\row
Called by:\cell build_address_symbolic()\cell printcmd.c\cell\row
\cell find_pc_line()\cell symtab.c\cell\row
\cell find_pc_overlay()\cell symfile.c\cell\row
\cell find_pc_partial_function_impl()\cell blockframe.c\cell\row
\cell inlined_function_update_call_stack()\cell inlining.c\cell\row
\cell overlay_mapped_address()\cell symfile.c\cell\row
\cell sym_info()\cell printcmd.c\cell\row
\cell update_inlined_function_line_table_entry()\cell symtab.c\cell\row
\cell update_tmp_frame_stack()\cell inlining.c\cell\row
Refs Var:\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function place_section()\par}
{\s5\f1\fs20\ql\sb50\sa50 void place_section ( bfd* abfd, asection* sect, void* obj )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell  exec_set_section_address()\cell\cell\row
Used in:\cell default_symfile_offsets()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function print_transfer_performance()\par}
{\s5\f1\fs20\ql\sb50\sa50 void print_transfer_performance ( struct ui_file* stream, unsigned long data_count, unsigned long write_count, const struct timeval* start_time, const struct timeval* end_time )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Calls: \cell ui_out_field_fmt()\cell ui-out.c\cell\row
\cell ui_out_text()\cell ui-out.c\cell\row
Called by:\cell generic_load()\cell symfile.c\cell\row
\cell report_transfer_performance()\cell symfile.c\cell\row
Refs Var:\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function psymtab_to_symtab()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct symtab* psymtab_to_symtab ( struct partial_symtab* pst )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell start_timer()\cell maint.c\cell\row
Called by:\cell ada_lookup_symbol_list()\cell ada-lang.c\cell\row
\cell backtrace_command_1()\cell stack.c\cell\row
\cell basic_lookup_transparent_type()\cell symtab.c\cell\row
\cell find_pc_partial_function_impl()\cell blockframe.c\cell\row
\cell find_pc_sect_symtab()\cell symtab.c\cell\row
\cell lookup_symbol_aux_psymtabs()\cell symtab.c\cell\row
\cell lookup_symtab()\cell symtab.c\cell\row
\cell lookup_symtab_all()\cell symtab.c\cell\row
\cell maintenance_check_symtabs()\cell symmisc.c\cell\row
\cell read_in_psymtabs()\cell cp-support.c\cell\row
\cell search_symbols()\cell symtab.c\cell\row
\cell select_source_symtab()\cell source.c\cell\row
\cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
Refs Func:\cell decrement_reading_symtab()\cell symfile.c\cell\row
Refs Var:\cell currently_reading_symtab\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function replace_psymbols_with_correct_psymbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 void replace_psymbols_with_correct_psymbols ( struct objfile* exe_obj )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell add_psymbol_to_list()\cell symfile.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell psymtab_get_first()\cell objfiles.c\cell\row
\cell psymtab_get_next()\cell objfiles.c\cell\row
\cell start_psymtab_common()\cell symfile.c\cell\row
\cell symtab_clear_cached_lookup_values()\cell symtab.c\cell\row
\cell tell_breakpoints_objfile_changed()\cell breakpoint.c\cell\row
\cell tell_objc_msgsend_cacher_objfile_changed()\cell objc-lang.c\cell\row
\cell  _obstack_newchunk(), strlen(), xstrdup()\cell\cell\row
Called by:\cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
Refs Func:\cell dwarf2_kext_psymtab_to_symtab()\cell dwarf2read.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function report_transfer_performance()\par}
{\s5\f1\fs20\ql\sb50\sa50 void report_transfer_performance ( unsigned long data_count, time_t start_time, time_t end_time )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell print_transfer_performance()\cell symfile.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function reread_symbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 void reread_symbols ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell clear_symtab_users()\cell symfile.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell observer_notify_executable_changed()\cell observer.c\cell\row
\cell reread_symbols_for_objfile()\cell symfile.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  bfd_get_mtime(), stat()\cell\cell\row
Called by:\cell attach_command()\cell infcmd.c\cell\row
\cell remote_open_1()\cell remote.c\cell\row
\cell reread_symbols_command()\cell symfile.c\cell\row
\cell run_command_1()\cell infcmd.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function reread_symbols_for_objfile()\par}
{\s5\f1\fs20\ql\sb50\sa50 int reread_symbols_for_objfile ( struct objfile* objfile, long new_modtime, enum gdb_osabi osabi, struct objfile** next )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell bcache_xfree()\cell bcache.c\cell\row
\cell bcache_xmalloc()\cell bcache.c\cell\row
\cell breakpoint_re_set()\cell breakpoint.c\cell\row
\cell build_objfile_section_table()\cell objfiles.c\cell\row
\cell clear_complaints()\cell complaints.c\cell\row
\cell clear_objfile_data()\cell objfiles.c\cell\row
\cell discard_cleanups()\cell utils.c\cell\row
\cell equivalence_table_delete()\cell symmisc.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_libobjc_objfile()\cell objc-lang.c\cell\row
\cell free_objfile()\cell objfiles.c\cell\row
\cell init_entry_point_info()\cell objfiles.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_free_objfile()\cell objfiles.c\cell\row
\cell objc_init_runtime_version()\cell objc-lang.c\cell\row
\cell objc_init_trampoline_observer()\cell objc-lang.c\cell\row
\cell objfile_delete_from_ordered_sections()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell objfile_relocate()\cell objfiles.c\cell\row
\cell open_bfd_matching_arch()\cell symfile.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell reinit_frame_cache()\cell frame.c\cell\row
\cell remove_target_sections()\cell target/target.c\cell\row
\cell reread_separate_symbols()\cell symfile.c\cell\row
\cell symtab_clear_cached_lookup_values()\cell symtab.c\cell\row
\cell tell_breakpoints_objfile_changed()\cell breakpoint.c\cell\row
\cell tell_objc_msgsend_cacher_objfile_changed()\cell objc-lang.c\cell\row
\cell terminate_minimal_symbol_table()\cell objfiles.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin___memset_chk(), __builtin_alloca(), __builtin_object_size(), __inline_memcpy_chk(), __inline_memset_chk(), _obstack_begin(), _obstack_newchunk(), bfd_check_format(), bfd_close(), bfd_errmsg(), bfd_get_error(), bfd_get_mtime(), bfd_openr(), htab_delete(), stat(), strcmp(), xstrdup()\cell\cell\row
Called by:\cell reread_symbols()\cell symfile.c\cell\row
Refs Func:\cell clear_symtab_users_cleanup()\cell symfile.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  obstack_free()\cell\cell\row
Refs Var:\cell gnutarget\cell corefile.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\cell symfile_objfile\cell objfiles.c\cell\row
\cell  exec_bfd\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function section_is_mapped()\par}
{\s5\f1\fs20\ql\sb50\sa50 int section_is_mapped ( asection* section )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell overlay_is_mapped()\cell symfile.c\cell\row
\cell section_is_overlay()\cell symfile.c\cell\row
Called by:\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell breakpoint_here_p()\cell breakpoint.c\cell\row
\cell breakpoint_inserted_here_p()\cell breakpoint.c\cell\row
\cell breakpoint_thread_match()\cell breakpoint.c\cell\row
\cell find_function_start_sal()\cell symtab.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell jump_command()\cell infcmd.c\cell\row
\cell software_breakpoint_inserted_here_p()\cell breakpoint.c\cell\row
\cell sym_info()\cell printcmd.c\cell\row
\cell symbol_overlayed_address()\cell symfile.c\cell\row
Refs Var:\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function section_is_overlay()\par}
{\s5\f1\fs20\ql\sb50\sa50 int section_is_overlay ( asection* section )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Called by:\cell address_info()\cell printcmd.c\cell\row
\cell bpstat_stop_status()\cell breakpoint.c\cell\row
\cell breakpoint_here_p()\cell breakpoint.c\cell\row
\cell breakpoint_inserted_here_p()\cell breakpoint.c\cell\row
\cell breakpoint_thread_match()\cell breakpoint.c\cell\row
\cell clear_command()\cell breakpoint.c\cell\row
\cell find_function_start_sal()\cell symtab.c\cell\row
\cell find_pc_overlay()\cell symfile.c\cell\row
\cell insert_bp_location()\cell breakpoint.c\cell\row
\cell jump_command()\cell infcmd.c\cell\row
\cell map_overlay_command()\cell symfile.c\cell\row
\cell overlay_invalidate_all()\cell symfile.c\cell\row
\cell overlay_is_mapped()\cell symfile.c\cell\row
\cell overlay_mapped_address()\cell symfile.c\cell\row
\cell overlay_unmapped_address()\cell symfile.c\cell\row
\cell pc_in_mapped_range()\cell symfile.c\cell\row
\cell pc_in_unmapped_range()\cell symfile.c\cell\row
\cell remove_breakpoint()\cell breakpoint.c\cell\row
\cell section_is_mapped()\cell symfile.c\cell\row
\cell simple_overlay_update()\cell symfile.c\cell\row
\cell software_breakpoint_inserted_here_p()\cell breakpoint.c\cell\row
\cell sym_info()\cell printcmd.c\cell\row
\cell symbol_overlayed_address()\cell symfile.c\cell\row
Refs Var:\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function sort_pst_symbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 void sort_pst_symbols ( struct partial_symtab* pst )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell  qsort()\cell\cell\row
Called by:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\cell end_psymtab()\cell dbxread.c\cell\row
\cell scan_compilation_units()\cell dwarfread.c\cell\row
Refs Func:\cell compare_psymbols()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function start_psymtab_common()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct partial_symtab* start_psymtab_common ( struct objfile* objfile, struct section_offsets* section_offsets, const char* filename, CORE_ADDR textlow, struct partial_symbol** global_syms, struct partial_symbol** static_syms )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell allocate_psymtab()\cell symfile.c\cell\row
Called by:\cell dwarf2_build_psymtabs_hard()\cell dwarf2read.c\cell\row
\cell parse_partial_symbols()\cell mdebugread.c\cell\row
\cell replace_psymbols_with_correct_psymbols()\cell symfile.c\cell\row
\cell scan_compilation_units()\cell dwarfread.c\cell\row
\cell start_psymtab()\cell dbxread.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function symbol_file_add()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct objfile* symbol_file_add ( const char* name, int from_tty, struct section_addr_info* addrs, int mainline, int flags )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell symbol_file_add_name_with_addrs_or_offsets()\cell symfile.c\cell\row
Called by:\cell symbol_add_stub()\cell solib.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function symbol_file_add_bfd_helper()\par}
{\s5\f1\fs20\ql\sb50\sa50 int symbol_file_add_bfd_helper ( void* v )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell symbol_file_add_with_addrs_or_offsets()\cell symfile.c\cell\row
Used in:\cell symbol_file_add_bfd_safe()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function symbol_file_add_bfd_safe()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct objfile* symbol_file_add_bfd_safe ( bfd* abfd, int from_tty, struct section_addr_info* addrs, struct section_offsets* offsets, int mainline, int flags, int symflags, CORE_ADDR mapaddr, const char* prefix, char* kext_bundle )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell objfile_keeps_section()\cell objfiles.c\cell\row
\cell  catch_errors()\cell\cell\row
Refs Func:\cell symbol_file_add_bfd_helper()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function symbol_file_add_bfd_using_objfile()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct objfile* symbol_file_add_bfd_using_objfile ( struct objfile* objfile, bfd* abfd, int from_tty, struct section_addr_info* addrs, struct section_offsets* offsets, int mainline, int flags, int symflags, CORE_ADDR mapaddr, const char* prefix )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function symbol_file_add_from_bfd()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct objfile* symbol_file_add_from_bfd ( bfd* abfd, int from_tty, struct section_addr_info* addrs, int mainline, int flags )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell symbol_file_add_with_addrs_or_offsets()\cell symfile.c\cell\row
Called by:\cell symbol_file_add_from_memory()\cell symfile-mem.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function symbol_file_add_main()\par}
{\s5\f1\fs20\ql\sb50\sa50 void symbol_file_add_main ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell symbol_file_add_main_1()\cell symfile.c\cell\row
Called by:\cell attach_command()\cell infcmd.c\cell\row
\cell follow_exec()\cell infrun.c\cell\row
Used in:\cell captured_main()\cell main.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function symbol_file_add_name_with_addrs_or_offsets()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct objfile* symbol_file_add_name_with_addrs_or_offsets ( const char* name, int from_tty, struct section_addr_info* addrs, struct section_offsets* offsets, int num_offsets, int mainline, int flags, int symflags, CORE_ADDR mapaddr, const char* prefix, char* kext_bundle )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell symbol_file_add_with_addrs_or_offsets()\cell symfile.c\cell\row
\cell symfile_bfd_open()\cell symfile.c\cell\row
Called by:\cell add_kext_command()\cell symfile.c\cell\row
\cell add_symbol_file_command()\cell symfile.c\cell\row
\cell symbol_file_add()\cell symfile.c\cell\row
\cell symbol_file_add_main_1()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function symbol_file_add_using_objfile()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct objfile* symbol_file_add_using_objfile ( struct objfile* in_objfile, const char* name, int from_tty, struct section_addr_info* addrs, int mainline, int flags )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell symbol_file_add_name_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function symbol_file_add_with_addrs_or_offsets_using_objfile()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct objfile* symbol_file_add_with_addrs_or_offsets_using_objfile ( struct objfile* in_objfile, bfd* abfd, int from_tty, struct section_addr_info* addrs, struct section_offsets* offsets, int num_offsets, int mainline, int flags, int symflags, CORE_ADDR mapaddr, const char* prefix, char* not_loaded_kext_bundle )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell alloc_section_addr_info()\cell symfile.c\cell\row
\cell allocate_objfile()\cell objfiles.c\cell\row
\cell allocate_objfile_using_objfile()\cell objfiles.c\cell\row
\cell append_psymbols_as_msymbols()\cell symfile.c\cell\row
\cell check_bfd_for_matching_uuid()\cell symfile.c\cell\row
\cell copy_section_addr_info()\cell symfile.c\cell\row
\cell discard_cleanups()\cell utils.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_separate_debug_file()\cell symfile.c\cell\row
\cell gdb_flush()\cell ui-file.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_bfd_close()\cell utils.c\cell\row
\cell make_cleanup_free_section_addr_info()\cell utils.c\cell\row
\cell new_symfile_objfile()\cell symfile.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell psymtab_get_first()\cell objfiles.c\cell\row
\cell psymtab_get_next()\cell objfiles.c\cell\row
\cell psymtab_to_symtab()\cell symfile.c\cell\row
\cell put_objfile_before()\cell objfiles.c\cell\row
\cell query()\cell utils.c\cell\row
\cell replace_psymbols_with_correct_psymbols()\cell symfile.c\cell\row
\cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
\cell symfile_bfd_open_safe()\cell symfile.c\cell\row
\cell syms_from_objfile()\cell symfile.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell wrap_here()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  bfd_cache_close_all(), bfd_close(), deprecated_post_add_symbol_hook(), deprecated_pre_add_symbol_hook(), deprecated_target_new_objfile_hook(), macho_calculate_offsets_for_dsym(), macosx_get_osabi_from_dyld_entry(), xstrdup()\cell\cell\row
Called by:\cell symbol_file_add_bfd_using_objfile()\cell symfile.c\cell\row
\cell symbol_file_add_name_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
\cell symbol_file_add_with_addrs_or_offsets()\cell symfile.c\cell\row
\cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell deprecated_post_add_symbol_hook\cell symfile.c\cell\row
\cell deprecated_pre_add_symbol_hook\cell symfile.c\cell\row
\cell deprecated_target_new_objfile_hook\cell symfile.c\cell\row
\cell gdb_stdout\cell main.c\cell\row
\cell info_verbose\cell top.c\cell\row
\cell readnow_symbol_files\cell symfile.c\cell\row
\cell symfile_objfile\cell objfiles.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function symbol_file_clear()\par}
{\s5\f1\fs20\ql\sb50\sa50 void symbol_file_clear ( int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell free_objfile()\cell objfiles.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell query()\cell utils.c\cell\row
\cell symtab_clear_cached_lookup_values()\cell symtab.c\cell\row
\cell  macosx_init_dyld_symfile(), state_change_hook()\cell\cell\row
Called by:\cell symbol_file_command()\cell symfile.c\cell\row
Refs Var:\cell state_change_hook\cell top.c\cell\row
\cell symfile_objfile\cell objfiles.c\cell\row
\cell  exec_bfd\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function symbol_file_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 void symbol_file_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell defs.h\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell dont_repeat()\cell top.c\cell\row
\cell error()\cell utils.c\cell\row
\cell make_cleanup_freeargv()\cell utils.c\cell\row
\cell nomem()\cell utils.c\cell\row
\cell symbol_file_add_main_1()\cell symfile.c\cell\row
\cell symbol_file_clear()\cell symfile.c\cell\row
\cell  buildargv(), state_change_hook(), strcmp()\cell\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
Refs Var:\cell state_change_hook\cell top.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function symbol_overlayed_address()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR symbol_overlayed_address ( CORE_ADDR address, asection* section )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symtab.h\cell\cell\row
Calls: \cell overlay_unmapped_address()\cell symfile.c\cell\row
\cell section_is_mapped()\cell symfile.c\cell\row
\cell section_is_overlay()\cell symfile.c\cell\row
Called by:\cell read_var_value()\cell findvar.c\cell\row
\cell write_exp_msymbol()\cell parse.c\cell\row
Refs Var:\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function symfile_bfd_open()\par}
{\s5\f1\fs20\ql\sb50\sa50 bfd* symfile_bfd_open ( const char* name, int mainline, enum gdb_osabi osabi )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell open_bfd_matching_arch()\cell symfile.c\cell\row
\cell openp()\cell source.c\cell\row
\cell perror_with_name()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  bfd_check_format(), bfd_close(), bfd_errmsg(), bfd_fopen(), bfd_get_error(), bfd_mmap_file(), close(), getenv(), macosx_filename_in_bundle(), tilde_expand()\cell\cell\row
Called by:\cell dwarf2_kext_psymtab_to_symtab()\cell dwarf2read.c\cell\row
\cell find_kext_files_by_symfile()\cell symfile.c\cell\row
\cell get_binary_file_uuids()\cell utils.c\cell\row
\cell reread_separate_symbols()\cell symfile.c\cell\row
\cell symbol_file_add_name_with_addrs_or_offsets()\cell symfile.c\cell\row
\cell symbol_file_add_name_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
\cell symfile_bfd_open_helper()\cell symfile.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell gnutarget\cell corefile.c\cell\row
\cell mmap_symbol_files_flag\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function symfile_bfd_open_helper()\par}
{\s5\f1\fs20\ql\sb50\sa50 int symfile_bfd_open_helper ( void* v )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell symfile_bfd_open()\cell symfile.c\cell\row
Used in:\cell symfile_bfd_open_safe()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function symfile_bfd_open_safe()\par}
{\s5\f1\fs20\ql\sb50\sa50 bfd* symfile_bfd_open_safe ( const char* filename, int mainline, enum gdb_osabi osabi )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell  catch_errors()\cell\cell\row
Called by:\cell convert_sect_addrs_to_offsets_via_on_disk_file()\cell symfile.c\cell\row
\cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
Refs Func:\cell symfile_bfd_open_helper()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function symfile_relocate_debug_section()\par}
{\s5\f1\fs20\ql\sb50\sa50 bfd_byte* symfile_relocate_debug_section ( bfd* abfd, asection* sectp, bfd_byte* buf )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell  bfd_map_over_sections(), bfd_simple_get_relocated_section_contents()\cell\cell\row
Called by:\cell dbx_psymtab_to_symtab()\cell dbxread.c\cell\row
\cell dwarf2_read_section()\cell dwarf2read.c\cell\row
\cell elfstab_build_psymtabs()\cell dbxread.c\cell\row
Refs Func:\cell symfile_dummy_outputs()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function syms_from_objfile()\par}
{\s5\f1\fs20\ql\sb50\sa50 void syms_from_objfile ( struct objfile* objfile, struct section_addr_info* addrs, struct section_offsets* offsets, int num_offsets, int mainline, int verbo )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.h\cell\cell\row
Calls: \cell alloc_section_addr_info()\cell symfile.c\cell\row
\cell clear_complaints()\cell complaints.c\cell\row
\cell discard_cleanups()\cell utils.c\cell\row
\cell find_sym_fns()\cell symfile.c\cell\row
\cell free_objfile()\cell objfiles.c\cell\row
\cell init_entry_point_info()\cell objfiles.c\cell\row
\cell init_objfile_sect_indices()\cell symfile.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_free_objfile()\cell objfiles.c\cell\row
\cell objfile_add_to_ordered_sections()\cell objfiles.c\cell\row
\cell objfile_delete_from_ordered_sections()\cell objfiles.c\cell\row
\cell objfile_section_offset()\cell objfiles.c\cell\row
\cell paddr()\cell utils.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  __builtin___memcpy_chk(), __builtin_object_size(), __inline_memcpy_chk(), _obstack_newchunk(), bfd_get_section_by_name(), bfd_map_over_sections(), macosx_init_dyld_symfile(), strcmp()\cell\cell\row
Called by:\cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
Refs Func:\cell clear_symtab_users_cleanup()\cell symfile.c\cell\row
\cell find_lowest_section()\cell symfile.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell builtin_type_char\cell gdbtypes.c\cell\row
\cell builtin_type_void\cell gdbtypes.c\cell\row
\cell symfile_complaints\cell complaints.c\cell\row
\cell symfile_objfile\cell objfiles.c\cell\row
\cell  exec_bfd\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function unmap_overlay_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 void unmap_overlay_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell  strcmp()\cell\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
Refs Var:\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_dsym_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_dsym_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_freeargv()\cell utils.c\cell\row
\cell make_cleanup_ui_out_tuple_begin_end()\cell ui-out.c\cell\row
\cell safe_strerror()\cell utils.c\cell\row
\cell ui_out_field_string()\cell ui-out.c\cell\row
\cell ui_out_text()\cell ui-out.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  __error(), buildargv(), dyld_objfile_set_load_state(), exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), macosx_find_objfile_matching_dsym_in_bundle(), sigsetjmp(), stat(), tilde_expand(), xstrdup()\cell\cell\row
Called by:\cell add_symbol_file_command()\cell symfile.c\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell already_found_debug_file\cell symfile.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_filename_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_filename_language ( const char* ext, enum language lang )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell xrealloc()\cell utils.c\cell\row
\cell  xstrdup()\cell\cell\row
Called by:\cell init_filename_language_table()\cell symfile.c\cell\row
\cell set_ext_lang_command()\cell symfile.c\cell\row
Refs Var:\cell filename_language_table\cell symfile.c\cell\row
\cell fl_table_next\cell symfile.c\cell\row
\cell fl_table_size\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_kext_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_kext_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell breakpoint_update()\cell breakpoint.c\cell\row
\cell convert_sect_addrs_to_offsets_via_on_disk_file()\cell symfile.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell dont_repeat()\cell top.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_kext_files_by_bundle()\cell symfile.c\cell\row
\cell find_kext_files_by_symfile()\cell symfile.c\cell\row
\cell find_kext_loadaddrs_from_kernel()\cell symfile.c\cell\row
\cell gdbarch_bfd_arch_info()\cell gdbarch.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_free_section_addr_info()\cell utils.c\cell\row
\cell make_cleanup_freeargv()\cell utils.c\cell\row
\cell nomem()\cell utils.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell reinit_frame_cache()\cell frame.c\cell\row
\cell symbol_file_add_name_with_addrs_or_offsets()\cell symfile.c\cell\row
\cell update_current_target()\cell target/target.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  bfd_default_compatible(), bfd_get_arch_info(), buildargv(), file_exists_p(), get_section_addrs_of_macho_on_disk(), strlen(), strncmp(), strrchr(), update_section_tables(), xstrdup()\cell\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
Refs Func:\cell null_cleanup()\cell utils.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell  kernel_slide\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_objfile_prefix()\par}
{\s5\f1\fs20\ql\sb50\sa50 static const char* add_objfile_prefix ( struct objfile* objfile, const char* name )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell  __builtin___snprintf_chk(), __builtin_object_size(), _obstack_newchunk(), strlen()\cell\cell\row
Called by:\cell append_psymbols_as_msymbols()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_section_size_callback()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_section_size_callback ( bfd* abfd, asection* asec, void* data )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell generic_load()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_shared_symbol_files_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_shared_symbol_files_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function add_symbol_file_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void add_symbol_file_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell add_dsym_command()\cell symfile.c\cell\row
\cell alloc_section_addr_info()\cell symfile.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell dont_repeat()\cell top.c\cell\row
\cell error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_freeargv()\cell utils.c\cell\row
\cell nomem()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell parse_and_eval_address()\cell eval.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
\cell query()\cell utils.c\cell\row
\cell re_enable_breakpoints_in_shlibs()\cell breakpoint.c\cell\row
\cell reinit_frame_cache()\cell frame.c\cell\row
\cell symbol_file_add_name_with_addrs_or_offsets()\cell symfile.c\cell\row
\cell update_current_target()\cell target/target.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  buildargv(), strcmp(), strstr(), tilde_expand(), update_section_tables(), xstrdup()\cell\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
Refs Func:\cell null_cleanup()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function cashier_psymtab()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void cashier_psymtab ( struct partial_symtab* pst )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell cashier_psymtab()\cell symfile.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell psymtab_get_first()\cell objfiles.c\cell\row
\cell psymtab_get_next()\cell objfiles.c\cell\row
Called by:\cell cashier_psymtab()\cell symfile.c\cell\row
\cell free_named_symtabs()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function check_bfd_for_matching_uuid()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int check_bfd_for_matching_uuid ( bfd* exe_bfd, bfd* dbg_bfd )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell make_cleanup_ui_out_notify_begin_end()\cell ui-out.c\cell\row
\cell ui_out_field_string()\cell ui-out.c\cell\row
\cell ui_out_is_mi_like_p()\cell ui-out.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  bfd_mach_o_get_uuid(), memcmp()\cell\cell\row
Called by:\cell reread_separate_symbols()\cell symfile.c\cell\row
\cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
Refs Var:\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function clear_symtab_users_cleanup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void clear_symtab_users_cleanup ( void* ignore )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell clear_symtab_users()\cell symfile.c\cell\row
Used in:\cell reread_symbols_for_objfile()\cell symfile.c\cell\row
\cell syms_from_objfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function compare_psymbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int compare_psymbols ( const void* s1p, const void* s2p )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell strcmp_iw_ordered()\cell utils.c\cell\row
\cell symbol_search_name()\cell symtab.c\cell\row
Used in:\cell sort_pst_symbols()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function decrement_reading_symtab()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void decrement_reading_symtab ( void* dummy )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Used in:\cell psymtab_to_symtab()\cell symfile.c\cell\row
Refs Var:\cell currently_reading_symtab\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_kext_files_by_bundle()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void find_kext_files_by_bundle ( const char* filename, char** kextload_symbol_filename, char** kext_bundle_executable_filename )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell get_kext_bundle_ident_and_binary_path()\cell symfile.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), dirname(), file_exists_p(), strlen()\cell\cell\row
Called by:\cell add_kext_command()\cell symfile.c\cell\row
Refs Var:\cell kext_symbol_file_path\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_kext_files_by_symfile()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void find_kext_files_by_symfile ( const char* filename, char** kext_bundle_executable_filename )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell puuid()\cell utils.c\cell\row
\cell symfile_bfd_open()\cell symfile.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  bfd_close(), bfd_mach_o_get_uuid(), macosx_locate_kext_executable_by_symfile(), strrchr()\cell\cell\row
Called by:\cell add_kext_command()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_kext_loadaddrs_from_kernel()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct section_addr_info* find_kext_loadaddrs_from_kernel ( const char* filename, char** kext_bundle_executable_filename )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_objfile_by_uuid()\cell objfiles.c\cell\row
\cell get_binary_file_uuids()\cell utils.c\cell\row
\cell get_kext_bundle_ident_and_binary_path()\cell symfile.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell  macosx_get_kext_sect_addrs_from_kernel()\cell\cell\row
Called by:\cell add_kext_command()\cell symfile.c\cell\row
Refs Func:\cell free_uuids_array()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_section_for_addr()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct obj_section* find_section_for_addr ( struct objfile* objfile, CORE_ADDR addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell append_psymbols_as_msymbols()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_separate_debug_file()\par}
{\s5\f1\fs20\ql\sb50\sa50 static char* find_separate_debug_file ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell  macosx_locate_dsym(), xstrdup()\cell\cell\row
Called by:\cell reread_separate_symbols()\cell symfile.c\cell\row
\cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
Refs Var:\cell already_found_debug_file\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function find_sym_fns()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void find_sym_fns ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Called by:\cell syms_from_objfile()\cell symfile.c\cell\row
Refs Var:\cell symtab_fns\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function get_kext_bundle_ident_and_binary_path()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void get_kext_bundle_ident_and_binary_path ( const char* filename, const char** kext_bundle_filename, char** kext_bundle_executable_filename, const char** bundle_identifier_name_from_plist )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell error()\cell utils.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  __builtin___strcat_chk(), __builtin___strcpy_chk(), __builtin_object_size(), __inline_strcat_chk(), __inline_strcpy_chk(), dirname(), file_exists_p(), macosx_kext_info(), strlen()\cell\cell\row
Called by:\cell find_kext_files_by_bundle()\cell symfile.c\cell\row
\cell find_kext_loadaddrs_from_kernel()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function info_ext_lang_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void info_ext_lang_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell language_str()\cell language.c\cell\row
\cell printf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
Refs Var:\cell filename_language_table\cell symfile.c\cell\row
\cell fl_table_next\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function init_filename_language_table()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void init_filename_language_table ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell add_filename_language()\cell symfile.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell _initialize_symfile()\cell symfile.c\cell\row
Refs Var:\cell filename_language_table\cell symfile.c\cell\row
\cell fl_table_next\cell symfile.c\cell\row
\cell fl_table_size\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function init_objfile_sect_indices()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void init_objfile_sect_indices ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell internal_error()\cell utils.c\cell\row
\cell  bfd_get_section_by_name(), strcmp()\cell\cell\row
Called by:\cell default_symfile_offsets()\cell symfile.c\cell\row
\cell syms_from_objfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function load_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void load_command ( const char* arg, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell get_exec_file()\cell corefile.c\cell\row
\cell target_load()\cell target/target.c\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
Refs Var:\cell overlay_cache_invalid\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function load_progress()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void load_progress ( unsigned long bytes, void* untyped_arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell paddr()\cell utils.c\cell\row
\cell target_read_memory()\cell target/target.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  deprecated_show_load_progress(), deprecated_ui_load_progress_hook(), memcmp()\cell\cell\row
Used in:\cell load_section_callback()\cell symfile.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
Refs Var:\cell deprecated_show_load_progress\cell symfile.c\cell\row
\cell deprecated_ui_load_progress_hook\cell symfile.c\cell\row
\cell quit_flag\cell utils.c\cell\row
\cell validate_download\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function load_section_callback()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void load_section_callback ( bfd* abfd, asection* asec, void* data )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell do_cleanups()\cell utils.c\cell\row
\cell error()\cell utils.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell target_write_with_progress()\cell target/target.c\cell\row
\cell ui_out_message()\cell ui-out.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
\cell  bfd_get_section_contents()\cell\cell\row
Used in:\cell generic_load()\cell symfile.c\cell\row
Refs Func:\cell load_progress()\cell symfile.c\cell\row
\cell xfree()\cell utils.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function overlay_auto_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void overlay_auto_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell enable_overlay_breakpoints()\cell breakpoint.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
Refs Var:\cell info_verbose\cell top.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function overlay_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void overlay_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell printf_unfiltered()\cell utils.c\cell\row
\cell  help_list()\cell\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
Refs Var:\cell gdb_stdout\cell main.c\cell\row
\cell overlaylist\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function overlay_invalidate_all()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void overlay_invalidate_all ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell section_is_overlay()\cell symfile.c\cell\row
Called by:\cell overlay_is_mapped()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function overlay_is_mapped()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int overlay_is_mapped ( struct obj_section* osect )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell overlay_invalidate_all()\cell symfile.c\cell\row
\cell section_is_overlay()\cell symfile.c\cell\row
Called by:\cell find_pc_mapped_section()\cell symfile.c\cell\row
\cell find_pc_overlay()\cell symfile.c\cell\row
\cell list_overlays_command()\cell symfile.c\cell\row
\cell section_is_mapped()\cell symfile.c\cell\row
Refs Var:\cell overlay_cache_invalid\cell symfile.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\cell target_overlay_update\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function overlay_load_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void overlay_load_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
Refs Var:\cell target_overlay_update\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function overlay_manual_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void overlay_manual_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell disable_overlay_breakpoints()\cell breakpoint.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
Refs Var:\cell info_verbose\cell top.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function overlay_off_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void overlay_off_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell disable_overlay_breakpoints()\cell breakpoint.c\cell\row
\cell printf_unfiltered()\cell utils.c\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
Refs Var:\cell info_verbose\cell top.c\cell\row
\cell overlay_debugging\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function read_target_long_array()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void read_target_long_array ( CORE_ADDR memaddr, unsigned int* myaddr, int len )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell extract_unsigned_integer()\cell findvar.c\cell\row
\cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell read_memory()\cell corefile.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell  __builtin_alloca()\cell\cell\row
Called by:\cell simple_overlay_update_1()\cell symfile.c\cell\row
\cell simple_read_overlay_table()\cell symfile.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function remove_symbol_file_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void remove_symbol_file_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell clear_symtab_users()\cell symfile.c\cell\row
\cell dont_repeat()\cell top.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_objfile()\cell symfile.c\cell\row
\cell free_objfile()\cell objfiles.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell reinit_frame_cache()\cell frame.c\cell\row
\cell symtab_clear_cached_lookup_values()\cell symtab.c\cell\row
\cell tell_breakpoints_objfile_changed()\cell breakpoint.c\cell\row
\cell tell_objc_msgsend_cacher_objfile_changed()\cell objc-lang.c\cell\row
\cell  tilde_expand()\cell\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
Refs Func:\cell xfree()\cell utils.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function reread_separate_symbols()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void reread_separate_symbols ( struct objfile* objfile )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell check_bfd_for_matching_uuid()\cell symfile.c\cell\row
\cell find_separate_debug_file()\cell symfile.c\cell\row
\cell free_objfile()\cell objfiles.c\cell\row
\cell put_objfile_before()\cell objfiles.c\cell\row
\cell symbol_file_add_with_addrs_or_offsets()\cell symfile.c\cell\row
\cell symfile_bfd_open()\cell symfile.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  bfd_close(), macho_calculate_offsets_for_dsym(), macosx_get_osabi_from_dyld_entry(), strcmp()\cell\cell\row
Called by:\cell reread_symbols_for_objfile()\cell symfile.c\cell\row
Refs Var:\cell info_verbose\cell top.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function reread_symbols_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void reread_symbols_command ( const char* args, int from_tty )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell reread_symbols()\cell symfile.c\cell\row
\cell warning()\cell utils.c\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function sections_overlap()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int sections_overlap ( asection* a, asection* b )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Called by:\cell map_overlay_command()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_ext_lang_command()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_ext_lang_command ( const char* args, int from_tty, struct cmd_list_element* e )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell add_filename_language()\cell symfile.c\cell\row
\cell error()\cell utils.c\cell\row
\cell language_enum()\cell language.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell  isspace(), strcmp(), xstrdup()\cell\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
Refs Var:\cell ext_args\cell symfile.c\cell\row
\cell filename_language_table\cell symfile.c\cell\row
\cell fl_table_next\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_initial_language()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_initial_language ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell deduce_language_from_filename()\cell symfile.c\cell\row
\cell find_main_psymtab()\cell symtab.c\cell\row
\cell set_language()\cell language.c\cell\row
Called by:\cell symbol_file_add_main_1()\cell symfile.c\cell\row
Refs Var:\cell current_language\cell language.c\cell\row
\cell expected_language\cell language.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_debug_file_directory()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_debug_file_directory ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_download_write_size()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_download_write_size ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_ext_args()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_ext_args ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_symbol_reloading()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_symbol_reloading ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_symfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function simple_free_overlay_table()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void simple_free_overlay_table ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell xfree()\cell utils.c\cell\row
Called by:\cell simple_read_overlay_table()\cell symfile.c\cell\row
Refs Var:\cell cache_novlys\cell symfile.c\cell\row
\cell cache_ovly_table\cell symfile.c\cell\row
\cell cache_ovly_table_base\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function simple_overlay_update()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void simple_overlay_update ( struct obj_section* osect )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell objfile_get_first()\cell objfiles.c\cell\row
\cell objfile_get_next()\cell objfiles.c\cell\row
\cell section_is_overlay()\cell symfile.c\cell\row
\cell simple_overlay_update_1()\cell symfile.c\cell\row
\cell simple_read_overlay_table()\cell symfile.c\cell\row
Used in:\cell symfile.c\cell\cell\row
Refs Var:\cell cache_novlys\cell symfile.c\cell\row
\cell cache_ovly_table\cell symfile.c\cell\row
\cell cache_ovly_table_base\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function simple_overlay_update_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int simple_overlay_update_1 ( struct obj_section* osect )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell gdbarch_long_bit()\cell gdbarch.c\cell\row
\cell read_target_long_array()\cell symfile.c\cell\row
\cell warning()\cell utils.c\cell\row
Called by:\cell simple_overlay_update()\cell symfile.c\cell\row
Refs Var:\cell cache_novlys\cell symfile.c\cell\row
\cell cache_ovly_table\cell symfile.c\cell\row
\cell cache_ovly_table_base\cell symfile.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function simple_read_overlay_table()\par}
{\s5\f1\fs20\ql\sb50\sa50 static int simple_read_overlay_table ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell error()\cell utils.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell read_memory_integer()\cell corefile.c\cell\row
\cell read_target_long_array()\cell symfile.c\cell\row
\cell simple_free_overlay_table()\cell symfile.c\cell\row
\cell xmalloc()\cell utils.c\cell\row
Called by:\cell simple_overlay_update()\cell symfile.c\cell\row
Refs Var:\cell cache_novlys\cell symfile.c\cell\row
\cell cache_ovly_table\cell symfile.c\cell\row
\cell cache_ovly_table_base\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function symbol_file_add_main_1()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void symbol_file_add_main_1 ( const char* args, int from_tty, int flags )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell internal_error()\cell utils.c\cell\row
\cell reinit_frame_cache()\cell frame.c\cell\row
\cell set_initial_language()\cell symfile.c\cell\row
\cell symbol_file_add_name_with_addrs_or_offsets()\cell symfile.c\cell\row
\cell  dyld_default_load_flag(), dyld_minimal_load_flag(), dyld_objfile_entry_clear()\cell\cell\row
Called by:\cell symbol_file_add_main()\cell symfile.c\cell\row
\cell symbol_file_command()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function symbol_file_add_name_with_addrs_or_offsets_using_objfile()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct objfile* symbol_file_add_name_with_addrs_or_offsets_using_objfile ( struct objfile* in_objfile, const char* name, int from_tty, struct section_addr_info* addrs, struct section_offsets* offsets, int num_offsets, int mainline, int flags, int symflags, CORE_ADDR mapaddr, const char* prefix, char* kext_bundle )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell symfile.c\cell\cell\row
Calls: \cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
\cell symfile_bfd_open()\cell symfile.c\cell\row
\cell  macosx_get_osabi_from_dyld_entry()\cell\cell\row
Called by:\cell symbol_file_add_using_objfile()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function symbol_file_add_with_addrs_or_offsets()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct objfile* symbol_file_add_with_addrs_or_offsets ( bfd* abfd, int from_tty, struct section_addr_info* addrs, struct section_offsets* offsets, int num_offsets, int mainline, int flags, int symflags, CORE_ADDR mapaddr, const char* prefix, char* kext_bundle )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell symbol_file_add_with_addrs_or_offsets_using_objfile()\cell symfile.c\cell\row
Called by:\cell reread_separate_symbols()\cell symfile.c\cell\row
\cell symbol_file_add_bfd_helper()\cell symfile.c\cell\row
\cell symbol_file_add_from_bfd()\cell symfile.c\cell\row
\cell symbol_file_add_name_with_addrs_or_offsets()\cell symfile.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function symfile_dummy_outputs()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void symfile_dummy_outputs ( bfd* abfd, asection* sectp, void* dummy )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell symfile_relocate_debug_section()\cell symfile.c\cell\row
\intbl0
}
