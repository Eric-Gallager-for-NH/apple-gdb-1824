#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#!/usr/bin/env sh

#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ascii filenames set this variable to true.
allownonascii=$(git config hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ascii filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	echo "Error: Attempt to add a non-ascii file name."
	echo
	echo "This can cause problems if you want to work"
	echo "with people on other platforms."
	echo
	echo "To be portable it is advisable to rename the file ..."
	echo
	echo "If you know what you are doing you can disable this"
	echo "check using:"
	echo
	echo "  git config hooks.allownonascii true"
	echo
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

#
# Pre-conditions
#
if test -d ".git/rebase-merge"          || \
   test -d ".git/rebase-apply"          || \
   test -f ".git/MERGE_HEAD"            || \
   test -f ".git/CHERRY_PICK_HEAD"      || \
   test -f ".git/BISECT_LOG"
then
    exit 0
fi

#
# Configuration check
#
XMLINDENT="$(git config --get hooks.xmlindent)"
if test ! -x "$XMLINDENT"
then
    echo "Unable to find xmlindent executable on the configuration."
    echo
    echo "Please configure it with :"
    echo "  git config --global hooks.xmlindent C:/path/to/xmlindent"
    echo " or "
    echo "  git config --global hooks.xmlindent /usr/bin/xmlindent"
    echo
fi

if test -z "$(git config --get-all xmlindent.ignored)"
then
    echo "Unable to find xmlindent ignored list on the configuration, ignored"
    echo
    
    XMLINDENT_IGNORED=""
else
    XMLINDENT_IGNORED="$(find $(git config --get-all xmlindent.ignored))"
fi

ASTYLE="$(git config --get hooks.astyle)"
if test ! -x "$ASTYLE"
then
    echo "Unable to find astyle executable on the configuration."
    echo
    echo "Please configure it with :"
    echo "  git config --global hooks.astyle C:/path/to/astyle"
    echo " or "
    echo "  git config --global hooks.astyle /usr/bin/astyle"
    echo
fi

if test -z "$(git config --get-all astyle.ignored)"
then
    echo "Unable to find astyle ignored list on the configuration, ignored"
    echo
    
    ASTYLE_IGNORED=""
else
    ASTYLE_IGNORED="$(find $(git config --get-all astyle.ignored) 2>/dev/null)"
fi

# indent / format file by type
#
indent() {
    # getting against as the current commit
    if git rev-parse --verify HEAD >/dev/null 2>&1
    then
        local against=HEAD
    else
        # Initial commit: diff against an empty tree object
        local against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
    fi

    # loop on modified files
    git diff --cached --name-only $against | while read file;
    do
        local ext=$(expr "$file" : ".*\(\..*\)")
        case $ext in
        .xml)
            __indent_xml;
        ;;
        .h|.c)
            __indent_C;
        ;;
        esac
    done

    return 0;
}

# Indent the file with xmlindent if this is an xml file
__indent_xml() {

    if test ! -x "$XMLINDENT"
    then
        return 1;
    fi
    if test ! -f $file
    then
        return 2;
    fi

    # ignored globs
    if test -n "$XMLINDENT_IGNORED"
    then
        echo $XMLINDENT_IGNORED | grep -q $file
        if test $? -eq 0
        then
            echo "Formatting" $file    ": ignored"
            return 3;
        fi
    fi

    echo "Formatting" $file
    "$XMLINDENT" -w -i 4 "$file" || return 4;
    git add "$file" || return 5;
}

# Pre process before the indent
__pre_indent() {
    if test ! -x "$ASTYLE"
    then
        return 1;
    fi
    if test ! -f $file
    then
        return 2;
    fi

    # ignored globs
    if test -n "$ASTYLE_IGNORED"
    then
        echo $ASTYLE_IGNORED | grep -q "$file"
        if test $? -eq 0
        then
            echo "Indenting" $file    ": ignored"
            return 3;
        fi
    fi

    echo "Indenting" $file
    return 0;
}

# post process after the indent
__post_indent() {
    git add "$file"
}

COMMON_ASTYLE_ARGS="--pad-header --suffix=none --pad-oper --indent-col1-comments --indent-switches --indent=spaces=4 --add-brackets --formatted"

# Indent the file with `astyle' if this is a C/CPP file
__indent_C() {
    __pre_indent || return 1
    $ASTYLE $COMMON_ASTYLE_ARGS --style=bsd "$file" || return 2
    __post_indent || return 3
    return 0
}

indent

