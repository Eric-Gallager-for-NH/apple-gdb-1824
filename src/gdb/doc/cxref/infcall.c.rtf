{\rtf\ansi
\deff0
{\fonttbl
{\f0\froman Times New Roman;}
{\f1\fmodern Courier New;}
}
{\stylesheet
{\s0\f0\fs24 Normal;}
{\s1\f0\fs40\b\sb400\sa200\keepn\keep Heading 1;}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Heading 2;}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Heading 3;}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Heading 4;}
{\s5\f1\fs20\ql\sb50\sa50 Code;}
}
{\info{\comment
 This RTF file generated by cxref (version 1.6e).
 cxref program (c) Andrew M. Bishop 1995-2014.
 Cxref: cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx -I. -I. -I./config -I./target -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I./../include/opcode -I./../readline/.. -I../bfd -I./../bfd -I./../include -I../intl -I./../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -warn-xref -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments -DRUNNING_CXREF infcall.c
 CPP  : cxref-cpp -lang-c -C -dD -dI -I. -Imacosx -I. -I. -Iconfig -Itarget -DHAVE_CONFIG_H -DHAVE_SYS_TYPES_H -DLOCALEDIR="/usr/local/share/locale" -I../include/opcode -I.. -I../bfd -I../bfd -I../include -I../intl -I../intl -I/opt/local/include/libxml2 -D__MigTypeCheck=1 -D__DARWIN_UNIX03=1 -DS_SPLINT_S -U__BLOCKS__ -DRUNNING_CXREF
}}
\paperw11880\paperh16848\margl1440\margr1440\margt1440\margb1440
\sectd\plain
\s0\f0\fs24
{\s1\f0\fs40\b\sb400\sa200\keepn\keep File infcall.c\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Included Files\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <time.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <errno.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <unistd.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_locale.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <locale.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../gdb/signals.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/libiberty.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdarg.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/symcat.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <../intl/libintl.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-file.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <stdio.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "xm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/xm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <signal.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <limits.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "nm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/i386/nm-i386.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/nm-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "tm.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "config/tm-macosx.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-tdep.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-tdep.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/i386-macosx-thread-status.h"\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <stdint.h>\par}
						{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_types.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <inttypes.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach_vm.h>\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <mach/kmod.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/tm-i386-macosx.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/fopen-bin.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stddef.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <stdlib.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdbarch.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "../include/floatformat.h"\par}
					{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_regex.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include <regex.h>\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "gdbtypes.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "expression.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
				{\s5\f1\fs20\ql\sb50\sa50 #include "doublest.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb-events.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "dcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "memattr.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "value.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "regcache.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "inferior.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "breakpoint.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "target.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sys/types.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_assert.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "block.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcore.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "language.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objfiles.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <uuid/uuid.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_obstack.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/obstack.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
			{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "symfile.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "defs.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "symtab.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "inlining.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include <block.h>\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "frame.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../bfd/bfd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <sqlite3.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdbcmd.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
		{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "command.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "gdb_string.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <string.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "infcall.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "dummy-frame.h"\par}
{\s5\f1\fs20\ql\sb50\sa50 #include <sys/time.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "exceptions.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "../include/ansidecl.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include "ui-out.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <setjmp.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "objc-lang.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <Availability.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-infthread.h"\par}
	{\s5\f1\fs20\ql\sb50\sa50 #include <mach/mach.h>\par}
{\s5\f1\fs20\ql\sb50\sa50 #include "macosx/macosx-nat-infthread.h"\par}
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Variables\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable inferior_function_calls_disabled_p\par}
{\s5\f1\fs20\ql\sb50\sa50 int inferior_function_calls_disabled_p\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell ada-lang.c\cell\cell\row
\cell ada-valprint.c\cell\cell\row
\cell eval.c\cell\cell\row
\cell infcall.c\cell\cell\row
\cell objc-lang.c\cell\cell\row
\cell scm-lang.c\cell\cell\row
\cell valarith.c\cell\cell\row
Used in:\cell _initialize_infcall()\cell infcall.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable objc_exceptions_interrupt_hand_call\par}
{\s5\f1\fs20\ql\sb50\sa50 int objc_exceptions_interrupt_hand_call\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell infcall.c\cell\cell\row
Used in:\cell _initialize_infcall()\cell infcall.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable hand_call_ptid\par}
{\s5\f1\fs20\ql\sb50\sa50 ptid_t hand_call_ptid\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell infcall.c\cell\cell\row
Used in:\cell do_reset_hand_call_ptid()\cell infcall.c\cell\row
\cell get_hand_call_ptid()\cell infcall.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Variable unwind_on_signal_p\par}
{\s5\f1\fs20\ql\sb50\sa50 int unwind_on_signal_p\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Visible in:\cell infcall.c\cell\cell\row
Used in:\cell _initialize_infcall()\cell infcall.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
\cell make_cleanup_set_restore_unwind_on_signal()\cell infcall.c\cell\row
\cell set_unwind_on_signal()\cell infcall.c\cell\row
\cell set_unwind_on_signal_cleanup()\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable coerce_float_to_double_p\par}
{\s5\f1\fs20\ql\sb50\sa50 static int coerce_float_to_double_p\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_infcall()\cell\cell\row
\cell value_arg_coerce()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable timer_fired\par}
{\s5\f1\fs20\ql\sb50\sa50 static int timer_fired\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell hand_function_call()\cell\cell\row
\cell hand_function_call_timeout_p()\cell\cell\row
\cell handle_alarm_while_calling()\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Variables\par}
{\s4\f0\fs24\b\sb100\sa50\keepn\keep Variable hand_call_function_timeout\par}
{\s5\f1\fs20\ql\sb50\sa50 static int hand_call_function_timeout\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell _initialize_infcall()\cell\cell\row
\cell hand_function_call()\cell\cell\row
\cell set_hand_function_call_timeout()\cell\cell\row
\intbl0
{\s2\f0\fs32\b\sb200\sa100\keepn\keep Functions\par}
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function _initialize_infcall()\par}
{\s5\f1\fs20\ql\sb50\sa50 void _initialize_infcall ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infcall.c\cell\cell\row
Calls: \cell  add_setshow_boolean_cmd(), add_setshow_zinteger_cmd()\cell\cell\row
Refs Func:\cell show_coerce_float_to_double_p()\cell infcall.c\cell\row
\cell show_unwind_on_signal_p()\cell infcall.c\cell\row
Refs Var:\cell coerce_float_to_double_p\cell infcall.c\cell\row
\cell hand_call_function_timeout\cell infcall.c\cell\row
\cell inferior_function_calls_disabled_p\cell infcall.c\cell\row
\cell objc_exceptions_interrupt_hand_call\cell infcall.c\cell\row
\cell unwind_on_signal_p\cell infcall.c\cell\row
\cell  setlist, showlist\cell\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function call_function_by_hand()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* call_function_by_hand ( struct value* function, int nargs, struct value** args )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell hand_function_call()\cell infcall.c\cell\row
Called by:\cell ada_evaluate_subexp()\cell ada-lang.c\cell\row
\cell ada_val_print_1()\cell ada-valprint.c\cell\row
\cell allocate_space_in_inferior_malloc()\cell valops.c\cell\row
\cell do_end_debugger_mode()\cell objc-lang.c\cell\row
\cell get_class_address_from_object()\cell objc-lang.c\cell\row
\cell invoke_block_command()\cell printcmd.c\cell\row
\cell lookup_child_selector_nocache()\cell objc-lang.c\cell\row
\cell lookup_objc_class()\cell objc-lang.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell new_objc_runtime_class_getClass()\cell objc-lang.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell new_objc_runtime_get_classname()\cell objc-lang.c\cell\row
\cell objc_runtime_lock_taken_p()\cell objc-lang.c\cell\row
\cell print_object_command()\cell objc-lang.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
\cell scm_evaluate_string()\cell scm-lang.c\cell\row
\cell scm_lookup_name()\cell scm-lang.c\cell\row
\cell value_nsstring()\cell objc-lang.c\cell\row
\cell value_x_binop()\cell valarith.c\cell\row
\cell value_x_unop()\cell valarith.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function call_function_by_hand_expecting_type()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* call_function_by_hand_expecting_type ( struct value* function, struct type* expect_type, int nargs, struct value** args, int restore_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell hand_function_call()\cell infcall.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function find_function_addr()\par}
{\s5\f1\fs20\ql\sb50\sa50 CORE_ADDR find_function_addr ( struct value* function, struct type** retval_type )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell deprecated_value_address_hack()\cell value.c\cell\row
\cell error()\cell utils.c\cell\row
\cell gdbarch_convert_from_func_ptr_addr()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_function_start_offset()\cell gdbarch.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_as_address()\cell value.c\cell\row
\cell value_as_long()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell evaluate_subexp_standard()\cell eval.c\cell\row
\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell builtin_type_error\cell symtab.c\cell\row
\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_target\cell target/target.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function get_hand_call_ptid()\par}
{\s5\f1\fs20\ql\sb50\sa50 ptid_t get_hand_call_ptid ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infcall.h\cell\cell\row
Refs Var:\cell hand_call_ptid\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function hand_function_call()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct value* hand_function_call ( struct value* function, struct type* expect_type, int nargs, struct value** args, int restore_frame )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infcall.h\cell\cell\row
Calls: \cell allocate_value()\cell value.c\cell\row
\cell block_for_pc()\cell block.c\cell\row
\cell check_typedef()\cell gdbtypes.c\cell\row
\cell clear_proceed_status()\cell infrun.c\cell\row
\cell deprecated_set_value_type()\cell value.c\cell\row
\cell deprecated_value_lval_hack()\cell value.c\cell\row
\cell disable_watchpoints_before_interactive_call_start()\cell breakpoint.c\cell\row
\cell discard_cleanups()\cell utils.c\cell\row
\cell discard_inferior_status()\cell infrun.c\cell\row
\cell do_cleanups()\cell utils.c\cell\row
\cell dummy_frame_push()\cell dummy-frame.c\cell\row
\cell enable_watchpoints_after_interactive_call_stop()\cell breakpoint.c\cell\row
\cell entry_point_address()\cell objfiles.c\cell\row
\cell error()\cell utils.c\cell\row
\cell find_function_addr()\cell infcall.c\cell\row
\cell find_pc_function()\cell blockframe.c\cell\row
\cell find_pc_overlay()\cell symfile.c\cell\row
\cell find_pc_partial_function()\cell blockframe.c\cell\row
\cell frame_id_build()\cell frame.c\cell\row
\cell frame_pop()\cell frame.c\cell\row
\cell frame_save_as_regcache()\cell frame.c\cell\row
\cell ftype_has_debug_info_p()\cell parse.c\cell\row
\cell gdbarch_addr_bits_remove()\cell gdbarch.c\cell\row
\cell gdbarch_call_dummy_location()\cell gdbarch.c\cell\row
\cell gdbarch_convert_from_func_ptr_addr()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_push_arguments()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_push_arguments_p()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_reg_struct_has_addr()\cell gdbarch.c\cell\row
\cell gdbarch_deprecated_reg_struct_has_addr_p()\cell gdbarch.c\cell\row
\cell gdbarch_frame_align()\cell gdbarch.c\cell\row
\cell gdbarch_frame_align_p()\cell gdbarch.c\cell\row
\cell gdbarch_frame_red_zone_size()\cell gdbarch.c\cell\row
\cell gdbarch_inner_than()\cell gdbarch.c\cell\row
\cell gdbarch_push_dummy_call()\cell gdbarch.c\cell\row
\cell gdbarch_push_dummy_call_p()\cell gdbarch.c\cell\row
\cell gdbarch_return_value()\cell gdbarch.c\cell\row
\cell get_current_frame()\cell frame.c\cell\row
\cell hex_string()\cell utils.c\cell\row
\cell init_sal()\cell symtab.c\cell\row
\cell inlined_subroutine_restore_after_dummy_call()\cell inlining.c\cell\row
\cell internal_error()\cell utils.c\cell\row
\cell lookup_minimal_symbol()\cell minsyms.c\cell\row
\cell lookup_minimal_symbol_by_pc()\cell minsyms.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell make_cleanup()\cell utils.c\cell\row
\cell make_cleanup_init_objc_exception_catcher()\cell objc-lang.c\cell\row
\cell make_cleanup_regcache_xfree()\cell regcache.c\cell\row
\cell make_cleanup_restore_inferior_status()\cell infrun.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell noprocess()\cell target/target.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell objc_pc_at_fail_point()\cell objc-lang.c\cell\row
\cell objc_runtime_check_enabled_p()\cell objc-lang.c\cell\row
\cell paddr_nz()\cell utils.c\cell\row
\cell proceed()\cell infrun.c\cell\row
\cell push_dummy_code()\cell infcall.c\cell\row
\cell read_sp()\cell regcache.c\cell\row
\cell regcache_cpy_no_passthrough()\cell regcache.c\cell\row
\cell regcache_xmalloc()\cell regcache.c\cell\row
\cell save_inferior_status()\cell infrun.c\cell\row
\cell set_momentary_breakpoint()\cell breakpoint.c\cell\row
\cell start_timer()\cell maint.c\cell\row
\cell symbol_natural_name()\cell symtab.c\cell\row
\cell target_async_mask()\cell target/target.c\cell\row
\cell ui_out_is_mi_like_p()\cell ui-out.c\cell\row
\cell using_struct_return()\cell value.c\cell\row
\cell value_arg_coerce()\cell infcall.c\cell\row
\cell value_at()\cell valops.c\cell\row
\cell value_contents()\cell value.c\cell\row
\cell value_contents_all()\cell value.c\cell\row
\cell value_contents_raw()\cell value.c\cell\row
\cell value_enclosing_type()\cell value.c\cell\row
\cell value_from_pointer()\cell value.c\cell\row
\cell value_type()\cell value.c\cell\row
\cell warning()\cell utils.c\cell\row
\cell write_memory()\cell corefile.c\cell\row
\cell xfree()\cell utils.c\cell\row
\cell xstrprintf()\cell utils.c\cell\row
\cell  __builtin___strcpy_chk(), __builtin_alloca(), __builtin_object_size(), __inline_strcpy_chk(), begin_inferior_call_checkpoints(), end_inferior_call_checkpoints(), exceptions_state_mc_action_iter(), exceptions_state_mc_action_iter_1(), exceptions_state_mc_init(), hand_call_function_hook(), macosx_setup_registers_before_hand_call(), setitimer(), signal(), sigsetjmp(), strlen(), throw_exception()\cell\cell\row
Called by:\cell call_function_by_hand()\cell infcall.c\cell\row
\cell call_function_by_hand_expecting_type()\cell infcall.c\cell\row
Refs Func:\cell breakpoint_auto_delete_contents()\cell infcall.c\cell\row
\cell do_reset_hand_call_ptid()\cell infcall.c\cell\row
\cell do_unset_proceed_from_hand_call()\cell infcall.c\cell\row
\cell handle_alarm_while_calling()\cell infcall.c\cell\row
\cell null_cleanup()\cell utils.c\cell\row
Refs Var:\cell current_gdbarch\cell gdbarch.c\cell\row
\cell current_regcache\cell regcache.c\cell\row
\cell current_target\cell target/target.c\cell\row
\cell demangle\cell utils.c\cell\row
\cell gdb_override_async\cell target/target.c\cell\row
\cell hand_call_function_hook\cell top.c\cell\row
\cell hand_call_function_timeout\cell infcall.c\cell\row
\cell hand_call_ptid\cell infcall.c\cell\row
\cell inferior_function_calls_disabled_p\cell infcall.c\cell\row
\cell inferior_ptid\cell infcmd.c\cell\row
\cell minus_one_ptid\cell infrun.c\cell\row
\cell objc_exceptions_interrupt_hand_call\cell infcall.c\cell\row
\cell proceed_from_hand_call\cell infrun.c\cell\row
\cell proceed_to_finish\cell infrun.c\cell\row
\cell stop_bpstat\cell infcmd.c\cell\row
\cell stop_pc\cell infcmd.c\cell\row
\cell stop_registers\cell infrun.c\cell\row
\cell stop_stack_dummy\cell infcmd.c\cell\row
\cell stopped_by_random_signal\cell infcmd.c\cell\row
\cell timer_fired\cell infcall.c\cell\row
\cell uiout\cell ui-out.c\cell\row
\cell unwind_on_signal_p\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function hand_function_call_timeout_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 int hand_function_call_timeout_p ( void )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infcall.h\cell\cell\row
Called by:\cell new_objc_runtime_class_getClass()\cell objc-lang.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
Refs Var:\cell timer_fired\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function make_cleanup_set_restore_unwind_on_signal()\par}
{\s5\f1\fs20\ql\sb50\sa50 struct cleanup* make_cleanup_set_restore_unwind_on_signal ( int newval )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Calls: \cell make_cleanup()\cell utils.c\cell\row
Called by:\cell allocate_space_in_inferior_malloc()\cell valops.c\cell\row
\cell do_end_debugger_mode()\cell objc-lang.c\cell\row
\cell get_class_address_from_object()\cell objc-lang.c\cell\row
\cell make_cleanup_set_restore_debugger_mode()\cell objc-lang.c\cell\row
\cell new_objc_runtime_find_impl()\cell objc-lang.c\cell\row
\cell new_objc_runtime_get_classname()\cell objc-lang.c\cell\row
\cell print_object_command()\cell objc-lang.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
Refs Func:\cell set_unwind_on_signal_cleanup()\cell infcall.c\cell\row
Refs Var:\cell unwind_on_signal_p\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_hand_function_call_timeout()\par}
{\s5\f1\fs20\ql\sb50\sa50 int set_hand_function_call_timeout ( int newval )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell infcall.h\cell\cell\row
Called by:\cell new_objc_runtime_class_getClass()\cell objc-lang.c\cell\row
\cell read_objc_object()\cell objc-lang.c\cell\row
Refs Var:\cell hand_call_function_timeout\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Global Function set_unwind_on_signal()\par}
{\s5\f1\fs20\ql\sb50\sa50 int set_unwind_on_signal ( int new_val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Prototype:\cell value.h\cell\cell\row
Called by:\cell gdb_evaluate_expression()\cell wrapper.c\cell\row
\cell gdb_evaluate_type()\cell wrapper.c\cell\row
Refs Var:\cell unwind_on_signal_p\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function breakpoint_auto_delete_contents()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void breakpoint_auto_delete_contents ( void* arg )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell breakpoint_auto_delete()\cell breakpoint.c\cell\row
Used in:\cell hand_function_call()\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_reset_hand_call_ptid()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_reset_hand_call_ptid ( void* unused )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell hand_call_ptid\cell infcall.c\cell\row
\cell minus_one_ptid\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function do_unset_proceed_from_hand_call()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void do_unset_proceed_from_hand_call ( void* unused )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell proceed_from_hand_call\cell infrun.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function generic_push_dummy_code()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR generic_push_dummy_code ( struct gdbarch* gdbarch, CORE_ADDR sp, CORE_ADDR funaddr, int using_gcc, struct value** args, int nargs, struct type* value_type, CORE_ADDR* real_pc, CORE_ADDR* bp_addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_breakpoint_from_pc()\cell gdbarch.c\cell\row
\cell gdbarch_frame_align()\cell gdbarch.c\cell\row
\cell gdbarch_frame_align_p()\cell gdbarch.c\cell\row
\cell gdbarch_inner_than()\cell gdbarch.c\cell\row
\cell internal_error()\cell utils.c\cell\row
Called by:\cell push_dummy_code()\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function handle_alarm_while_calling()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void handle_alarm_while_calling ( int signo )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell current_target\cell target/target.c\cell\row
\cell timer_fired\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function push_dummy_code()\par}
{\s5\f1\fs20\ql\sb50\sa50 static CORE_ADDR push_dummy_code ( struct gdbarch* gdbarch, CORE_ADDR sp, CORE_ADDR funaddr, int using_gcc, struct value** args, int nargs, struct type* value_type, CORE_ADDR* real_pc, CORE_ADDR* bp_addr )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell gdbarch_push_dummy_code()\cell gdbarch.c\cell\row
\cell gdbarch_push_dummy_code_p()\cell gdbarch.c\cell\row
\cell generic_push_dummy_code()\cell infcall.c\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function set_unwind_on_signal_cleanup()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void set_unwind_on_signal_cleanup ( void* new_val )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Used in:\cell make_cleanup_set_restore_unwind_on_signal()\cell infcall.c\cell\row
Refs Var:\cell unwind_on_signal_p\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_coerce_float_to_double_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_coerce_float_to_double_p ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_infcall()\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function show_unwind_on_signal_p()\par}
{\s5\f1\fs20\ql\sb50\sa50 static void show_unwind_on_signal_p ( struct ui_file* file, int from_tty, struct cmd_list_element* c, const char* value )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell fprintf_filtered()\cell utils.c\cell\row
Used in:\cell _initialize_infcall()\cell infcall.c\cell\row
\intbl0
{\s3\f0\fs28\b\sb100\sa100\keepn\keep Local Function value_arg_coerce()\par}
{\s5\f1\fs20\ql\sb50\sa50 static struct value* value_arg_coerce ( struct value* arg, struct type* param_type, int is_prototyped )\par}
\trowd\trgaph120\cellx1440\cellx5220\cellx9000
\intbl\plain
Calls: \cell check_typedef()\cell gdbtypes.c\cell\row
\cell deprecated_set_value_type()\cell value.c\cell\row
\cell lookup_pointer_type()\cell gdbtypes.c\cell\row
\cell objc_fixup_class_length()\cell objc-lang.c\cell\row
\cell value_addr()\cell valops.c\cell\row
\cell value_cast()\cell valops.c\cell\row
\cell value_type()\cell value.c\cell\row
Called by:\cell hand_function_call()\cell infcall.c\cell\row
Refs Var:\cell builtin_type_double\cell gdbtypes.c\cell\row
\cell builtin_type_int\cell gdbtypes.c\cell\row
\cell builtin_type_long_double\cell gdbtypes.c\cell\row
\cell coerce_float_to_double_p\cell infcall.c\cell\row
\cell current_language\cell language.c\cell\row
\intbl0
}
